void sub_101065E8C(id a1)
{
  qword_1019347E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

std::string *sub_101065EB8@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  result = (std::string *)sub_1010DDBC0(a2, "");
  if (a1 < 5) {
    return std::string::assign(a2, off_101898120[a1]);
  }
  return result;
}

void sub_101065F04(_Unwind_Exception *exception_object)
{
}

_DWORD *sub_101065F20(_DWORD *result, uint64_t a2)
{
  if (a2 > 16)
  {
    if (a2 != 24)
    {
      if (a2 == 17)
      {
        unsigned int v2 = 2;
        goto LABEL_10;
      }

      goto LABEL_9;
    }

float sub_101066238(uint64_t a1, float a2, double a3, double a4, int32x4_t a5)
{
  float v5 = a2;
  a5.i64[0] = *(void *)(a1 + 64);
  v6.i32[0] = *(_DWORD *)(a1 + 56);
  v6.i32[1] = *(_DWORD *)(a1 + 52);
  int32x4_t v7 = *(int32x4_t *)(a1 + 72);
  v6.i32[2] = *(_DWORD *)(a1 + 60);
  v6.i32[3] = a5.i32[0];
  float32x4_t v8 = *(float32x4_t *)(a1 + 88);
  if (((vmaxv_u8((uint8x8_t)vmovn_s16( vuzp1q_s16( (int16x8_t)vcgeq_f32(v6, (float32x4_t)xmmword_1013DE6E0),  (int16x8_t)vcgeq_f32( (float32x4_t)vextq_s8( (int8x16_t)vzip1q_s32(v7, a5),  (int8x16_t)v7,  0xCuLL),  (float32x4_t)xmmword_1013DE6D0)))) & 1) != 0 || (vaddvq_s32((int32x4_t)vandq_s8( (int8x16_t)vcgeq_f32(v8, (float32x4_t)xmmword_1013DE6F0),  (int8x16_t)xmmword_1013DE700)) & 0xF) != 0 || (*(float *)&v7.i32[3] < 1655.0 ? (BOOL v9 = *(float *)(a1 + 104) < 720.0) : (BOOL v9 = 0),  !v9 || *(float *)(a1 + 108) >= 600.0))
    && *(float *)(a1 + 120) >= 0.25)
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101898100);
    }
    int v10 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortEstimator, overriding ML output based on higher rule set",  buf,  2u);
    }

    float v5 = 9.0;
    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101898100);
      }
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortEstimator, overriding ML output based on higher rule set",  v19,  2,  v19[0]);
LABEL_40:
      v16 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static float CLWorkoutEffortEstimator::overrideEstimateWithRules(const CLWorkoutEffort::CalorieFeatures &, float)",  "%s\n",  v11);
      if (v16 != buf) {
        free(v16);
      }
    }
  }

  else
  {
    v12.i32[1] = *(_DWORD *)(a1 + 60);
    v12.i64[1] = *(void *)(a1 + 64);
    v12.i32[0] = *(_DWORD *)(a1 + 52);
    if ((vmaxv_u8((uint8x8_t)vmovn_s16( vuzp1q_s16( (int16x8_t)vcgeq_f32(v12, (float32x4_t)xmmword_1013DE720),  (int16x8_t)vcgeq_f32((float32x4_t)v7, (float32x4_t)xmmword_1013DE710)))) & 1) != 0 || *(float *)(a1 + 56) >= 2120.0 || v8.f32[0] >= 695.0 || v8.f32[1] >= 600.0)
    {
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101898100);
      }
      v14 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortEstimator, overriding ML output based on rule set",  buf,  2u);
      }

      float v5 = 8.0;
      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101898100);
        }
        LOWORD(v19[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortEstimator, overriding ML output based on rule set",  v19,  2,  v19[0]);
        goto LABEL_40;
      }
    }

    else if (a2 > 8.0)
    {
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101898100);
      }
      v13 = (os_log_s *)qword_1019347E8;
      if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortEstimator, overriding ML output based on estimate upper limit",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347E0 != -1) {
          dispatch_once(&qword_1019347E0, &stru_101898100);
        }
        LOWORD(v19[0]) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortEstimator, overriding ML output based on estimate upper limit",  v19,  2);
        v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static float CLWorkoutEffortEstimator::overrideEstimateWithRules(const CLWorkoutEffort::CalorieFeatures &, float)",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      if (v5 >= 1.0) {
        return 8.0;
      }
      else {
        return 1.0;
      }
    }
  }

  return v5;
}

__n128 sub_101066728@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 136);
  float v5 = a1 + 4;
  if (!*(_BYTE *)a2)
  {
LABEL_22:
    *((_BYTE *)a1 + 41) = 0;
    goto LABEL_23;
  }

  if (!sub_10104F444(*(void *)(a2 + 152)))
  {
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101898100);
    }
    v32 = (os_log_s *)qword_1019347E8;
    if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v33 = *(void *)(a2 + 152);
      *(_DWORD *)std::string buf = 67109120;
      LODWORD(v54) = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "CLWorkoutEffortEstimator, did not pass isSupported check, workoutType, %d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347E0 != -1) {
        dispatch_once(&qword_1019347E0, &stru_101898100);
      }
      uint64_t v36 = *(void *)(a2 + 152);
      int v39 = 67109120;
      LODWORD(v40) = v36;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "CLWorkoutEffortEstimator, did not pass isSupported check, workoutType, %d",  &v39);
      v38 = (uint8_t *)v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWorkoutEffort::Result CLWorkoutEffortEstimator::estimate(const CLWorkoutEffort::MLFeatures &)",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }

    goto LABEL_22;
  }

  sub_101065F20(a1, *(void *)(a2 + 152));
  float v7 = (*(float (**)(void, uint64_t))(**((void **)a1 + 1) + 16LL))(*((void *)a1 + 1), a2);
  float v11 = sub_101066238(a2 + 12, v7, v8, v9, v10);
  float v12 = 9.0;
  if (v11 <= 9.0) {
    float v12 = v11;
  }
  if (v11 >= 1.0) {
    float v13 = v12;
  }
  else {
    float v13 = 1.0;
  }
  *((float *)a1 + 8) = v13;
  *((_BYTE *)a1 + 41) = 1;
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101898100);
  }
  v14 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_INFO))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int v16 = *((unsigned __int8 *)a1 + 41);
    uint64_t v17 = *((void *)a1 + 2);
    uint64_t v18 = *((void *)a1 + 3);
    double v19 = *((float *)a1 + 8);
    uint64_t v20 = *(void *)(a2 + 152);
    int v21 = *a1;
    *(_DWORD *)std::string buf = 134219520;
    CFAbsoluteTime v54 = Current;
    __int16 v55 = 1024;
    int v56 = v16;
    __int16 v57 = 2048;
    uint64_t v58 = v17;
    __int16 v59 = 2048;
    uint64_t v60 = v18;
    __int16 v61 = 2048;
    double v62 = v19;
    __int16 v63 = 1024;
    int v64 = v20;
    __int16 v65 = 1024;
    int v66 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "WorkoutEffortEstimatorXgb update, updateStartTime, %f, isValid, %d, startTime, %f, endTime, %f, score, %f, workout Type, %d, modelType, %d",  buf,  0x3Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101898100);
    }
    uint64_t v22 = qword_1019347E8;
    CFAbsoluteTime v23 = CFAbsoluteTimeGetCurrent();
    int v24 = *((unsigned __int8 *)a1 + 41);
    uint64_t v25 = *((void *)a1 + 2);
    uint64_t v26 = *((void *)a1 + 3);
    double v27 = *((float *)a1 + 8);
    uint64_t v28 = *(void *)(a2 + 152);
    int v29 = *a1;
    int v39 = 134219520;
    CFAbsoluteTime v40 = v23;
    __int16 v41 = 1024;
    int v42 = v24;
    __int16 v43 = 2048;
    uint64_t v44 = v25;
    __int16 v45 = 2048;
    uint64_t v46 = v26;
    __int16 v47 = 2048;
    double v48 = v27;
    __int16 v49 = 1024;
    int v50 = v28;
    __int16 v51 = 1024;
    int v52 = v29;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v22,  1LL,  "WorkoutEffortEstimatorXgb update, updateStartTime, %f, isValid, %d, startTime, %f, endTime, %f, score, %f, workout Type, %d, modelType, %d",  COERCE_DOUBLE(&v39),  60);
    v31 = (uint8_t *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWorkoutEffort::Result CLWorkoutEffortEstimator::estimate(const CLWorkoutEffort::MLFeatures &)",  "%s\n",  v30);
    if (v31 != buf) {
      free(v31);
    }
  }

uint64_t sub_101066B58(uint64_t a1, double a2)
{
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_101898100);
  }
  v4 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    double v16 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "WorkoutEffortEstimator reset, startTime, %f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_101898100);
    }
    int v13 = 134217984;
    double v14 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  0LL,  "WorkoutEffortEstimator reset, startTime, %f",  COERCE_DOUBLE(&v13));
    float v12 = (uint8_t *)v11;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLWorkoutEffortEstimator::reset(CFAbsoluteTime)", "%s\n", v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 16) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }

  *(void *)(a1 + 32) = _Q0;
  *(_WORD *)(a1 + 40) = 1;
  uint64_t result = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0LL;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *(_DWORD *)a1 = 4;
  return result;
}

void sub_101066D44(id a1)
{
  qword_1019347E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

uint64_t sub_101066D70(uint64_t a1, unint64_t *a2, __n128 a3)
{
  a3.n128_u64[0] = *a2;
  if (*(double *)a2 != -1.0)
  {
    a3.n128_f32[0] = (*(float (**)(uint64_t, unint64_t *))(*(void *)a1 + 40LL))(a1, a2);
    *(void *)(a1 + 16) = *a2;
    a3.n128_f32[0] = a3.n128_f32[0] + *(float *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = a3.n128_u32[0];
    ++*(void *)(a1 + 32);
    *(_BYTE *)(a1 + 40) = 1;
  }

  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 24LL))(a1, a3);
}

uint64_t sub_101066E14@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)(result + 32);
  float v3 = -1.0;
  if (v2) {
    float v3 = *(float *)(result + 24) / (float)v2;
  }
  double v4 = *(double *)(result + 16) + 2.56;
  *(void *)a2 = *(void *)(result + 8);
  *(double *)(a2 + 8) = v4;
  *(float *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = -1082130432;
  *(_BYTE *)(a2 + 24) = 1;
  BOOL v5 = v3 != -1.0 && *(_BYTE *)(result + 40) != 0;
  *(_BYTE *)(a2 + 25) = v5;
  return result;
}

uint64_t sub_101066E7C(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  *(double *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0LL;
  return result;
}

void sub_101066E8C(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 8) / *(float *)(a2 + 52);
  if (v2 >= 0.3 && v2 >= 0.7) {
    powf(v2, 5.233);
  }
}

float sub_101066F20(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 8) / *(float *)(a2 + 52);
  float v3 = (float)(v2 * 17.4) + -0.8553;
  BOOL v4 = v2 < 0.3;
  float result = 6.0;
  if (v4) {
    float v3 = 6.0;
  }
  if (v3 >= 6.0) {
    float result = v3;
  }
  if (result > 20.0) {
    return 20.0;
  }
  return result;
}

double sub_101066F6C(uint64_t a1, char a2, char a3, float a4, float a5, float a6)
{
  *(void *)a1 = &off_101898158;
  *(float *)(a1 + 8) = a4;
  *(float *)(a1 + 12) = a5;
  *(_BYTE *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 17) = a3;
  *(float *)(a1 + 20) = a6;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 80) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }

  *(double *)(a1 + 96) = result;
  *(_WORD *)(a1 + 104) = 1;
  return result;
}

uint64_t sub_101066FB8(uint64_t a1, float *a2)
{
  if (*(double *)a2 != -1.0)
  {
    sub_101067154(a1, a2);
    float v4 = *(float *)(a1 + 20);
    float v5 = *(float *)(a1 + 48);
    float v7 = *(float *)(a1 + 8);
    float v6 = *(float *)(a1 + 12);
    if (v6 > v5) {
      float v6 = *(float *)(a1 + 48);
    }
    if (v7 >= v6) {
      float v6 = *(float *)(a1 + 8);
    }
    float v8 = powf(fmaxf(v6, 0.0), (float)(v4 * 5.376) + -2.238);
    if (v5 >= v7)
    {
      float v11 = *(float *)(a1 + 64);
      float v12 = *(float *)(a1 + 52);
      if (v11 >= v12)
      {
        float v15 = *(float *)(a1 + 68);
        float v16 = fminf( fmaxf((float)((float)(v4 * 4.378) + 10.56) + (float)((float)((float)(v4 * 7.032) + -2.842) * v8), 6.0),  20.0)
            - v15;
        if (v16 > 0.2) {
          float v16 = 0.2;
        }
        float v14 = v15 + fmaxf(v16, 0.0);
        *(float *)(a1 + 68) = v14;
      }

      else
      {
        float v13 = v12 - v11;
        float v14 = v11 + fmaxf(v13, 0.0);
        *(float *)(a1 + 64) = v14;
      }

      *(float *)(a1 + 96) = v14;
    }

    else
    {
      float v9 = *(float *)(a1 + 24) + *(float *)(a1 + 60);
      float v10 = *(float *)(a1 + 52);
      if (v9 >= v10) {
        float v9 = *(float *)(a1 + 52);
      }
      *(float *)(a1 + 96) = v9;
      *(float *)(a1 + 64) = v9;
      *(float *)(a1 + 68) = v10;
    }

    *(void *)(a1 + 88) = *(void *)a2;
    *(_BYTE *)(a1 + 105) = 1;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
}

float sub_101067154(uint64_t a1, float *a2)
{
  float v4 = *(float *)(a1 + 20);
  *(float *)(a1 + 44) = v4;
  float v5 = sub_10104F410((uint64_t)(a2 + 6));
  float v6 = sub_10104F3DC(v4 * v5, a2[9]);
  *(float *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 36) = 1062501089;
  float v7 = (float)(v6 * 60.0) / 0.95;
  *(float *)(a1 + 40) = v7;
  float v8 = sub_101067260(a1, a2, v6, 0.83, v7) + *(float *)(a1 + 28);
  *(float *)(a1 + 28) = v8;
  float v9 = *(float *)(a1 + 44);
  float v10 = v8 / *(float *)(a1 + 40);
  float v11 = *(float *)(a1 + 8);
  *(float *)(a1 + 48) = fmaxf(v10, 0.0);
  float result = fminf( fmaxf( (float)((float)(v9 * 4.378) + 10.56)
             + (float)((float)((float)(v9 * 7.032) + -2.842) * powf(fmaxf(v11, 0.0), (float)(v9 * 5.376) + -2.238)),
               6.0),
             20.0);
  *(float *)(a1 + 52) = result;
  return result;
}

float sub_101067260(uint64_t a1, float *a2, float a3, float a4, float a5)
{
  float v10 = a2[13];
  if (*(_BYTE *)(a1 + 17))
  {
    float v11 = 65.0;
    if (a2[12] <= 65.0) {
      float v11 = a2[12];
    }
    float v12 = (v10 - a2[2]) / (v10 - v11);
    float v13 = sub_100D086F8(v12, a2[11]) * 1.01;
    float v14 = v13 * sub_10104F410((uint64_t)(a2 + 6));
  }

  else
  {
    float v14 = 0.0;
  }

  float v15 = sub_10104F3DC(v14, a2[9]);
  if (*(_BYTE *)(a1 + 16))
  {
    BOOL v16 = a2[3] < 0.3 || (float)(a2[2] / v10) < a4;
    float v17 = 0.0;
    if (!v16) {
      float v17 = 1.0;
    }
  }

  else
  {
    float v17 = 1.0;
  }

  if (v14 > 2.2 && (!*(_BYTE *)(a1 + 17) || a2[3] > 0.3))
  {
    float v18 = *(float *)(a1 + 56) + 2.56;
    *(float *)(a1 + 56) = v18;
    if (v18 >= 1200.0) {
      *(float *)(a1 + 60) = fminf((float)((float)(v18 + -1200.0) * 0.02336) / 60.0, 3.0);
    }
  }

  float v19 = 0.0;
  if (v15 <= a3 || v17 <= 0.0)
  {
    *(_DWORD *)(a1 + 72) = 0;
  }

  else
  {
    int v20 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v20 + 1;
    if (v20 >= 5)
    {
      float v21 = fmaxf(v15 - a3, 0.0) * 2.56;
      return v21 * v17;
    }
  }

  return v19;
}

__n128 sub_101067440@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 80);
  __int128 v3 = *(_OWORD *)(a1 + 96);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

double sub_10106744C(uint64_t a1, double a2)
{
  *(double *)(a1 + 80) = a2;
  *(double *)(a1 + 88) = a2;
  *(void *)(a1 + 96) = 0xBF80000000000000LL;
  *(_WORD *)(a1 + 104) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

void *sub_10106747C(void *result)
{
  std::string *result = &off_101898280;
  return result;
}

uint64_t sub_101067498(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)a1 = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }

  __int128 v19 = _Q0;
  *(_OWORD *)(a1 + 32) = _Q0;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 24) = &off_101898210;
  sub_101066F6C(a1 + 72, 1, 1, 0.1, 1.2, 0.7);
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  *(_OWORD *)(a1 + 192) = v19;
  *(void *)(a1 + 184) = &off_1018981B8;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_BYTE *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 476) = xmmword_1013DE860;
  *(_OWORD *)(a1 + 492) = xmmword_1013DE870;
  *(_DWORD *)(a1 + 508) = -1082130432;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = v19;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  __asm { FMOV            V0.4S, #-1.0 }

  *(_OWORD *)(a1 + 656) = _Q0;
  *(_DWORD *)(a1 + 672) = -1082130432;
  *(void *)(a1 + 680) = 0xBFF0000000000000LL;
  *(void *)(a1 + 688) = 0xBFF0000000000000LL;
  __asm { FMOV            V0.2S, #-1.0 }

  *(void *)(a1 + 696) = _Q0;
  *(_WORD *)(a1 + 704) = 1;
  *(_DWORD *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  float v12 = sub_10104F410(a3);
  int v13 = *(_DWORD *)(a3 + 28);
  *(float *)(a1 + 476) = v12;
  *(_DWORD *)(a1 + 480) = v13;
  sub_1010677D0(v14, a2, (uint64_t *)(a1 + 608));
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_1018982A8);
  }
  float v15 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "WorkoutEffortFeatureGenerator startSession, updating bodyMetrics and hrMax",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_1018982A8);
    }
    v20[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "WorkoutEffortFeatureGenerator startSession, updating bodyMetrics and hrMax",  v20,  2);
    float v18 = (uint8_t *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWorkoutEffortFeatureGenerator::CLWorkoutEffortFeatureGenerator(const CLMotionStateMediator_Type::WorkoutEvent &, const CLBodyMetrics &)",  "%s\n",  v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  return a1;
}

void sub_1010677AC(_Unwind_Exception *a1)
{
}

void sub_1010677D0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[14];
  uint64_t v6 = a2[16];
  *a3 = *a2;
  a3[1] = v4;
  a3[2] = v5;
  a3[3] = v6;
  a3[4] = 0LL;
  a3[5] = 0LL;
  if (qword_1019347E0 != -1) {
    dispatch_once(&qword_1019347E0, &stru_1018982A8);
  }
  float v7 = (os_log_s *)qword_1019347E8;
  if (os_log_type_enabled((os_log_t)qword_1019347E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *a3;
    uint64_t v9 = a3[2];
    *(_DWORD *)std::string buf = 134218240;
    uint64_t v19 = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "WorkoutEffortFeatureGenerator, updating sessionFeatures startTime, %f,workoutType,%ld",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347E0 != -1) {
      dispatch_once(&qword_1019347E0, &stru_1018982A8);
    }
    uint64_t v10 = *a3;
    uint64_t v11 = a3[2];
    int v14 = 134218240;
    uint64_t v15 = v10;
    __int16 v16 = 2048;
    uint64_t v17 = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347E8,  2LL,  "WorkoutEffortFeatureGenerator, updating sessionFeatures startTime, %f,workoutType,%ld",  COERCE_DOUBLE(&v14),  22);
    int v13 = (uint8_t *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWorkoutEffortFeatureGenerator::updateSessionFeatures(const CLMotionStateMediator_Type::WorkoutEvent &, CLWo rkoutEffort::SessionFeatures &)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

void sub_1010679BC(uint64_t a1, uint64_t *a2)
{
}

double *sub_1010679C4(double *result, double a2)
{
  if (*result == -1.0) {
    std::string *result = a2;
  }
  return result;
}

double sub_1010679E0(double *a1, double result)
{
  if (*a1 != -1.0)
  {
    double result = result - *a1 + a1[1];
    a1[1] = result;
    *a1 = -1.0;
  }

  return result;
}

float32x4_t sub_101067A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 20) = v6;
  float v7 = *(float *)(a2 + 8);
  double v8 = *(float *)(a2 + 12);
  if (v8 > 0.39 && v7 >= 40.0 && v7 <= 220.0)
  {
    ++*(_DWORD *)(a1 + 16);
    v59.n128_u64[0] = *(void *)a2;
    v59.n128_f32[2] = v7;
    float v11 = sub_10104F480((void *)(a1 + 376), &v59);
    if (sub_10104F628(a1 + 376) >= 0.5)
    {
      float v13 = *(float *)(a3 + 24);
      if (v13 >= v11) {
        float v14 = *(float *)(a3 + 24);
      }
      else {
        float v14 = v11;
      }
      if (v13 == -1.0) {
        float v15 = v11;
      }
      else {
        float v15 = v14;
      }
      *(float *)(a3 + 24) = v15;
      float v16 = v11 / *(float *)(a1 + 480);
      float v17 = *(float *)(a1 + 352);
      unint64_t v18 = *(void *)(a1 + 344);
      *(void *)(a1 + 344) = v18 + 1;
      float v19 = (float)(v18 + 1);
      float v20 = v17 + (float)((float)(v16 - v17) / v19);
      *(float *)(a1 + 352) = v20;
      float v21 = *(float *)(a1 + 356) + (float)((float)(v16 - v17) * (float)(v16 - v20));
      *(float *)(a1 + 356) = v21;
      float v22 = *(float *)(a3 + 4);
      else {
        float v23 = v16;
      }
      else {
        float v24 = v23;
      }
      if (v16 >= v22) {
        float v25 = *(float *)(a3 + 4);
      }
      else {
        float v25 = v16;
      }
      if (v22 == -1.0) {
        float v26 = v16;
      }
      else {
        float v26 = v25;
      }
      *(float *)a3 = v24;
      *(float *)(a3 + 4) = v26;
      *(float *)(a3 + 12) = v20;
      LODWORD(v12) = 0;
      if (v18 + 1 >= 2) {
        *(float *)&unint64_t v12 = v21 / (float)v18;
      }
      *(float *)(a3 + 8) = sqrtf(*(float *)&v12);
      *(float *)(a3 + 16) = v24 - v26;
      double v8 = v16;
      if (v16 >= 0.9)
      {
        float v27 = *(float *)(a1 + 288);
        float v28 = v16 - v27;
        uint64_t v29 = *(void *)(a1 + 280) + 1LL;
        *(void *)(a1 + 280) = v29;
        float v30 = v27 + (float)((float)(v16 - v27) / (float)(unint64_t)v29);
        *(float *)(a1 + 288) = v30;
        LODWORD(v12) = *(_DWORD *)(a1 + 292);
        *(float *)(a1 + 292) = *(float *)&v12 + (float)(v28 * (float)(v16 - v30));
      }

      if (v8 >= 0.83)
      {
        float v31 = *(float *)(a1 + 272);
        float v32 = v16 - v31;
        uint64_t v33 = *(void *)(a1 + 264) + 1LL;
        *(void *)(a1 + 264) = v33;
        float v34 = v31 + (float)((float)(v16 - v31) / (float)(unint64_t)v33);
        *(float *)(a1 + 272) = v34;
        LODWORD(v12) = *(_DWORD *)(a1 + 276);
        *(float *)(a1 + 276) = *(float *)&v12 + (float)(v32 * (float)(v16 - v34));
      }

      if (v16 >= 1.0)
      {
        float v35 = *(float *)(a1 + 304);
        float v36 = v16 - v35;
        uint64_t v37 = *(void *)(a1 + 296) + 1LL;
        *(void *)(a1 + 296) = v37;
        *(float *)&unint64_t v12 = (float)(v16 - v35) / (float)(unint64_t)v37;
        float v38 = v35 + *(float *)&v12;
        *(float *)(a1 + 304) = v38;
        *(float *)(a1 + 308) = *(float *)(a1 + 308) + (float)(v36 * (float)(v16 - v38));
      }

      if (v8 >= 0.93) {
        ++*(_WORD *)(a1 + 312);
      }
      if (v8 >= 0.935) {
        ++*(_WORD *)(a1 + 314);
      }
      if (v8 >= 0.94) {
        ++*(_WORD *)(a1 + 316);
      }
      if (v8 >= 0.945) {
        ++*(_WORD *)(a1 + 318);
      }
      if (v8 >= 0.95) {
        ++*(_WORD *)(a1 + 320);
      }
      if (v8 >= 0.955) {
        ++*(_WORD *)(a1 + 322);
      }
      if (v8 >= 0.96) {
        ++*(_WORD *)(a1 + 324);
      }
      if (v8 >= 0.97) {
        ++*(_WORD *)(a1 + 326);
      }
      if (v8 >= 0.98) {
        ++*(_WORD *)(a1 + 328);
      }
      if (v8 >= 0.99) {
        ++*(_WORD *)(a1 + 330);
      }
      if (v8 >= 1.01) {
        ++*(_WORD *)(a1 + 332);
      }
      if (v8 >= 1.02) {
        ++*(_WORD *)(a1 + 334);
      }
      if (v8 >= 1.03) {
        ++*(_WORD *)(a1 + 336);
      }
      if (v8 >= 1.04) {
        ++*(_WORD *)(a1 + 338);
      }
      unint64_t v39 = *(void *)(a1 + 280);
      float v40 = (float)*(unint64_t *)(a1 + 264);
      v41.i64[0] = *(void *)(a1 + 264);
      v41.i64[1] = v39;
      unsigned int v42 = *(unsigned __int16 *)(a1 + 312);
      v43.f64[0] = (double)v42;
      LOWORD(v12) = *(_WORD *)(a1 + 314);
      v43.f64[1] = (double)v12;
      float64x2_t v44 = (float64x2_t)vdupq_n_s64(0x40047AE147AE147BuLL);
      v45.f64[0] = (double)*(unint64_t *)(a1 + 296);
      *(float32x4_t *)(a3 + 44) = vcvt_hight_f32_f64( (int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v41), v44)),  vmulq_f64(v43, v44));
      uint32x4_t v46 = vmovl_u16(*(uint16x4_t *)(a1 + 316));
      v47.i64[0] = v46.u32[0];
      v47.i64[1] = v46.u32[1];
      float64x2_t v48 = vcvtq_f64_u64(v47);
      v47.i64[0] = v46.u32[2];
      v47.i64[1] = v46.u32[3];
      *(float32x4_t *)(a3 + 60) = vcvt_hight_f32_f64( (int32x2_t)vcvt_f32_f64(vmulq_f64(v48, v44)),  vmulq_f64(vcvtq_f64_u64(v47), v44));
      uint32x4_t v49 = vmovl_u16(*(uint16x4_t *)(a1 + 324));
      v47.i64[0] = v49.u32[0];
      v47.i64[1] = v49.u32[1];
      float64x2_t v50 = vcvtq_f64_u64(v47);
      v47.i64[0] = v49.u32[2];
      v47.i64[1] = v49.u32[3];
      float64x2_t v51 = vmulq_f64(vcvtq_f64_u64(v47), v44);
      float64x2_t v52 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v50, v44)), v51);
      *(float64x2_t *)(a3 + 76) = v52;
      LOWORD(v51.f64[0]) = *(_WORD *)(a1 + 332);
      v51.f64[0] = (double)*(unint64_t *)&v51.f64[0];
      LOWORD(v52.f64[0]) = *(_WORD *)(a1 + 334);
      v52.f64[0] = (double)*(unint64_t *)&v52.f64[0];
      v45.f64[1] = v51.f64[0];
      LOWORD(v51.f64[0]) = *(_WORD *)(a1 + 336);
      v52.f64[1] = (double)*(unint64_t *)&v51.f64[0];
      float64x2_t v53 = vmulq_f64(v52, v44);
      *(float32x4_t *)(a3 + 92) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v45, v44)), v53);
      LOWORD(v53.f64[0]) = *(_WORD *)(a1 + 338);
      *(float *)v53.f64 = (double)*(unint64_t *)&v53.f64[0] * 2.56;
      *(_DWORD *)(a3 + 108) = LODWORD(v53.f64[0]);
      *(float *)(a3 + 112) = v40 / v19;
      *(float *)(a3 + 116) = (float)v39 / v19;
      *(float *)(a3 + 120) = (float)v42 / v19;
    }

    unsigned int v6 = *(_DWORD *)(a1 + 20);
  }

  *(float *)&double v8 = (float)v6;
  *(float *)(a3 + 20) = (float)*(unsigned int *)(a1 + 16) / (float)v6;
  int v54 = *(_DWORD *)(a2 + 84);
  __int16 v55 = (void *)(a1 + 248);
  int v56 = (void *)(a1 + 256);
  if (v54 == 4) {
    int v56 = (void *)(a1 + 232);
  }
  if (v54 != 6) {
    __int16 v55 = v56;
  }
  if (v54 == 8) {
    __int16 v57 = (void *)(a1 + 240);
  }
  else {
    __int16 v57 = v55;
  }
  ++*v57;
  float32x4_t result = vdivq_f32( vcvt_hight_f32_f64( (int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 232))),  vcvtq_f64_u64(*(uint64x2_t *)(a1 + 248))),  (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v8, 0));
  *(float32x4_t *)(a3 + 28) = result;
  return result;
}

float sub_101067F54(uint64_t a1, unint64_t *a2, uint64_t a3, __n128 a4)
{
  *(_DWORD *)(a1 + 96) = v9;
  sub_101066FB8(a1 + 72, (float *)a2);
  *(_OWORD *)a3 = *(_OWORD *)v8;
  *(_OWORD *)(a3 + 10) = *(_OWORD *)&v8[10];
  float result = *(float *)(a1 + 120);
  *(float *)(a3 + 32) = result;
  return result;
}

void sub_101067FC4(uint64_t a1, uint64_t a2, float *a3)
{
  float v3 = *(float *)(a2 + 8);
  if (*(float *)(a2 + 12) > 0.39 && v3 >= 40.0 && v3 <= 220.0)
  {
    sub_101066E8C(a1 + 184, a2);
    v21.n128_u64[0] = *(void *)a2;
    v21.n128_u32[2] = v9;
    float v10 = sub_10104F480((void *)(a1 + 424), &v21);
    if (sub_10104F628(a1 + 424) >= 0.5)
    {
      float v11 = *(float *)(a1 + 368);
      unint64_t v12 = *(void *)(a1 + 360);
      *(void *)(a1 + 360) = v12 + 1;
      float v13 = v11 + (float)((float)(v10 - v11) / (float)(v12 + 1));
      *(float *)(a1 + 368) = v13;
      float v14 = *(float *)(a1 + 372) + (float)((float)(v10 - v11) * (float)(v10 - v13));
      *(float *)(a1 + 372) = v14;
      float v15 = a3[1];
      if (*a3 >= v10) {
        float v16 = *a3;
      }
      else {
        float v16 = v10;
      }
      if (*a3 == -1.0) {
        float v17 = v10;
      }
      else {
        float v17 = v16;
      }
      if (v10 >= v15) {
        float v18 = a3[1];
      }
      else {
        float v18 = v10;
      }
      if (v15 == -1.0) {
        float v19 = v10;
      }
      else {
        float v19 = v18;
      }
      *a3 = v17;
      a3[1] = v19;
      a3[2] = v13;
      float v20 = 0.0;
      if (v12 + 1 >= 2) {
        float v20 = v14 / (float)v12;
      }
      a3[3] = sqrtf(v20);
      a3[4] = v17 - v19;
    }
  }

__n128 sub_1010680F0@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double v5 = *(double *)a2;
  *(double *)(a1 + 616) = v5;
  double v7 = (v5 - *(double *)(a1 + 608)) / 60.0;
  *(double *)(a1 + 640) = v7;
  double v8 = v5 + *(double *)(a1 + 8) - *(double *)a1;
  double v9 = *(double *)a1 == -1.0 ? *(double *)(a1 + 8) : v8;
  *(double *)(a1 + 648) = v7 - v9 / 60.0;
  sub_101067A0C(a1, (uint64_t)a2, a1 + 484);
  sub_101067FC4(a1, (uint64_t)a2, (float *)(a1 + 656));
  sub_101067F54(a1, a2, a1 + 680, v10);
  if (*(double *)a2 < *(double *)(a1 + 608) || *(float *)(a1 + 504) < 0.5) {
LABEL_7:
  }
    char v11 = 0;
  else {
    char v11 = 1;
  }
  *(_BYTE *)(a1 + 472) = v11;
  *(void *)(a3 + 240) = *(void *)(a1 + 712);
  __int128 v12 = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(a3 + 192) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a3 + 208) = v12;
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a1 + 696);
  __int128 v13 = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(a3 + 128) = *(_OWORD *)(a1 + 600);
  *(_OWORD *)(a3 + 144) = v13;
  __int128 v14 = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a3 + 160) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a3 + 176) = v14;
  __int128 v15 = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 536);
  *(_OWORD *)(a3 + 80) = v15;
  __int128 v16 = *(_OWORD *)(a1 + 584);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(a3 + 112) = v16;
  __int128 v17 = *(_OWORD *)(a1 + 488);
  *(_OWORD *)a3 = *(_OWORD *)(a1 + 472);
  *(_OWORD *)(a3 + 16) = v17;
  __n128 result = *(__n128 *)(a1 + 504);
  __int128 v19 = *(_OWORD *)(a1 + 520);
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v19;
  return result;
}

void sub_101068210(id a1)
{
  qword_1019347E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

void *sub_10106823C(void *result, uint64_t a2)
{
  std::string *result = &off_1018982D8;
  result[1] = a2;
  return result;
}

uint64_t sub_1010682C0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10015E774(v0, qword_1019A0510);
  sub_10015E694(v0, (uint64_t)qword_1019A0510);
  return Logger.init(subsystem:category:)( 0xD00000000000001CLL,  0x800000010161AB40LL,  0x6E65534E4F414C43LL,  0xEA00000000006573LL);
}

uint64_t sub_101068338@<X0>(uint64_t a1@<X8>)
{
  return sub_10106835C(a1, &byte_1019A18B0);
}

uint64_t sub_101068360@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x90LL))();
  *a2 = result;
  return result;
}

uint64_t sub_1010683A0(void *a1, void **a2)
{
  float v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x98LL);
  uint64_t v3 = swift_retain(*a1);
  return v2(v3);
}

uint64_t sub_1010683E0()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_requester);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_requester, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t sub_101068428(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_requester);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_release(v4);
}

void *sub_101068478(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

id sub_1010684BC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for CLAONSenseWiFiService()) init];
  qword_1019A4158 = (uint64_t)result;
  return result;
}

id sub_1010684EC()
{
  return [objc_allocWithZone(v0) init];
}

uint64_t *sub_101068514()
{
  if (qword_1019A0528 != -1) {
    swift_once(&qword_1019A0528, sub_1010684BC);
  }
  return &qword_1019A4158;
}

id sub_101068554()
{
  if (qword_1019A0528 != -1) {
    swift_once(&qword_1019A0528, sub_1010684BC);
  }
  return (id)qword_1019A4158;
}

uint64_t sub_1010685D4()
{
  return 0LL;
}

uint64_t sub_1010685E0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA8LL))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_101068620(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xB0LL);
  swift_bridgeObjectRetain(v3);
  return v4(v2, v3);
}

uint64_t sub_101068674()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc, v4, 0LL, 0LL);
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1010686C8(uint64_t a1, uint64_t a2)
{
  double v5 = (void *)(v2 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc);
  swift_beginAccess(v5, v8, 1LL, 0LL);
  uint64_t v6 = v5[1];
  *double v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

void *sub_101068724(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_10106876C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xC0LL))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject(&unk_1018984C8, 32LL, 7LL);
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    double v7 = sub_10106A5C8;
  }

  else
  {
    double v7 = 0LL;
  }

  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t sub_1010687E8(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject(&unk_1018984A0, 32LL, 7LL);
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_10106A598;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  double v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((swift_isaMask & **a2) + 0xC8LL);
  sub_1010688D8(v3, v4);
  return v7(v6, v5);
}

uint64_t sub_101068880()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback);
  swift_beginAccess(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback, v4, 0LL, 0LL);
  uint64_t v2 = *v1;
  sub_1010688D8(*v1, v1[1]);
  return v2;
}

uint64_t sub_1010688D8(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_1010688E8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback);
  swift_beginAccess(v5, v9, 1LL, 0LL);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return sub_101068944(v6, v7);
}

uint64_t sub_101068944(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

void *sub_101068954(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

void sub_1010689B4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (qword_1019A0508 != -1) {
    swift_once(&qword_1019A0508, sub_1010682C0);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10015E694(v6, (uint64_t)qword_1019A0510);
  uint64_t v7 = swift_bridgeObjectRetain(a1);
  double v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(18LL, -1LL);
    *(_DWORD *)uint64_t v10 = 134218240;
    uint64_t v17 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(a1);
    *(_WORD *)(v10 + 12) = 1024;
    int v16 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v10 + 14, v10 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "AONSense,onALFWiFiNotification,count,%ld,done,%{BOOL}d",  (uint8_t *)v10,  0x12u);
    swift_slowDealloc(v10, -1LL, -1LL);

    uint64_t v11 = *(void *)(a1 + 16);
    if (!v11) {
      return;
    }
  }

  else
  {

    swift_bridgeObjectRelease(a1);
    uint64_t v11 = *(void *)(a1 + 16);
    if (!v11) {
      return;
    }
  }

  __int128 v12 = *(void (**)(uint64_t))((swift_isaMask & *v3) + 0xE8LL);
  uint64_t v13 = *(void *)(type metadata accessor for ALWiFiNotification(0LL) - 8);
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  swift_bridgeObjectRetain(a1);
  do
  {
    v12(v14);
    v14 += v15;
    --v11;
  }

  while (v11);
  swift_bridgeObjectRelease(a1);
}

void sub_101068B84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiScanSingleAccessPoint(0LL);
  uint64_t v132 = *(void *)(v2 - 8);
  uint64_t v133 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v117 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ALWiFiNotification(0LL);
  uint64_t v121 = *(void *)(v5 - 8);
  uint64_t v122 = v5;
  __chkstk_darwin(v5);
  v120 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  v131 = (uint64_t *)((char *)&v117 - v8);
  uint64_t v9 = sub_10015E6AC(&qword_1019930F8);
  double v10 = __chkstk_darwin(v9);
  __int128 v12 = (char *)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for ALTimeStamp(0LL, v10);
  uint64_t v124 = *(void *)(v13 - 8);
  uint64_t v125 = v13;
  __chkstk_darwin(v13);
  v123 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10015E6AC(&qword_101993100);
  double v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = type metadata accessor for ALWiFiScanResult(0LL, v16);
  uint64_t v19 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  __n128 v21 = (char *)&v117 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v23 = __chkstk_darwin(v22);
  v127 = (char *)&v117 - v24;
  uint64_t v134 = a1;
  ALWiFiNotification.scanResult.getter(v23);
  uint64_t v25 = v129;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1LL, v129) == 1)
  {
    sub_10015E7F8((uint64_t)v18, &qword_101993100);
    if (qword_1019A0508 != -1) {
      swift_once(&qword_1019A0508, sub_1010682C0);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = sub_10015E694(v26, (uint64_t)qword_1019A0510);
    float v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      float v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)float v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "AONSense,onEachNotfication,ScanResult,nil,return", v30, 2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v127, v18, v25);
    ALWiFiNotification.timestamp.getter(v31);
    uint64_t v33 = v124;
    uint64_t v32 = v125;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v12, 1LL, v125) == 1)
    {
      sub_10015E7F8((uint64_t)v12, &qword_1019930F8);
      if (qword_1019A0508 != -1) {
        swift_once(&qword_1019A0508, sub_1010682C0);
      }
      uint64_t v34 = type metadata accessor for Logger(0LL);
      uint64_t v35 = sub_10015E694(v34, (uint64_t)qword_1019A0510);
      float v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        float v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)float v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "AONSense,onEachNotfication,timestamp,nil,return", v38, 2u);
        swift_slowDealloc(v38, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v19 + 8))(v127, v129);
    }

    else
    {
      uint64_t v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v123, v12, v32);
      double v40 = COERCE_DOUBLE(ALTimeStamp.cfAbsoluteTimeSec.getter(v39));
      if ((v41 & 1) != 0) {
        double v42 = 0.0;
      }
      else {
        double v42 = v40;
      }
      double Current = CFAbsoluteTimeGetCurrent();
      if (qword_1019A0508 != -1) {
        swift_once(&qword_1019A0508, sub_1010682C0);
      }
      uint64_t v44 = type metadata accessor for Logger(0LL);
      uint64_t v119 = sub_10015E694(v44, (uint64_t)qword_1019A0510);
      sub_1001B9A1C();
      sub_1001B9A1C();
      sub_1001B9A1C();
      sub_1001B9A1C();
      uint64_t v45 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 16))(v21, v127, v129);
      uint32x4_t v46 = (os_log_s *)Logger.logObject.getter(v45);
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        float64x2_t v48 = (uint8_t *)swift_slowAlloc(44LL, -1LL);
        *(_DWORD *)float64x2_t v48 = 68158720;
        LODWORD(v142[0]) = 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v142, (char *)v142 + 4, v48 + 4, v48 + 8);
        v48[8] = 0;
        v48[9] = 8;
        v142[0] = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v142, &v142[1], v48 + 10, v48 + 18);
        v48[18] = 16;
        v48[19] = 4;
        LODWORD(v142[0]) = 3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v142, (char *)v142 + 4, v48 + 20, v48 + 24);
        v48[24] = 0;
        v48[25] = 8;
        v142[0] = Current - v42;
        uint64_t v49 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v142, &v142[1], v48 + 26, v48 + 34);
        v48[34] = 0;
        v48[35] = 8;
        uint64_t v50 = ALWiFiScanResult.accessPoints.getter(v49);
        double v51 = *(double *)(v50 + 16);
        swift_bridgeObjectRelease(v50);
        v117 = *(void (**)(char *, uint64_t))(v19 + 8);
        v117(v21, v129);
        v142[0] = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v142, &v142[1], v48 + 36, v48 + 44);
        _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "AONSense,onEachNotfication,ScanResult,time,%.*f,age,%.*f,aps,%ld",  v48,  0x2Cu);
        swift_slowDealloc(v48, -1LL, -1LL);
      }

      else
      {
        v117 = *(void (**)(char *, uint64_t))(v19 + 8);
        v117(v21, v129);
      }

      __int128 v144 = 0u;
      __int128 v145 = 0u;
      __int128 v143 = 0u;
      memset(v142, 0, sizeof(v142));
      double v52 = sub_10106A19C((uint64_t)v142);
      BYTE8(v145) = ALWiFiNotification.simulated.getter(v52) & 1;
      BYTE9(v145) = ALWiFiNotification.available.getter() & 1;
      uint64_t v53 = ((uint64_t (*)(void))ALWiFiNotification.associatedMac.getter)();
      if ((v54 & 1) != 0)
      {
        v68 = (os_log_s *)Logger.logObject.getter(v53);
        os_log_type_t v69 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v68, v69))
        {
          v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v70 = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "AONSense,associatedState,nil", v70, 2u);
          swift_slowDealloc(v70, -1LL, -1LL);
        }

        sub_10106835C(&v140, &byte_1019A18B0);
        uint64_t v71 = (uint64_t)v126 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        swift_beginAccess( (char *)v126 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState,  &v138,  33LL,  0LL);
        uint64_t v72 = sub_10099E5C8(v71);
        sub_10106A1C0(v72, (uint64_t)&v140);
        sub_10099E5C8((uint64_t)&v140);
        swift_endAccess(&v138);
      }

      else
      {
        uint64_t v55 = v53;
        uint64_t v56 = (uint64_t)v126 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        swift_beginAccess( (char *)v126 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState,  &v135,  0LL,  0LL);
        sub_10106835C(&v140, v56);
        BOOL v57 = sub_10106A2F4(&v140, v55);
        uint64_t v58 = sub_10099E5C8((uint64_t)&v140);
        if (!v57)
        {
          nullsub_10(v55);
          sub_10106A340((uint64_t)&v140, v59);
          sub_10106A2E8((uint64_t)&v140, 1);
          swift_beginAccess(v56, &v138, 33LL, 0LL);
          sub_10106A2F0(v56, (uint64_t)&v140);
          double v60 = swift_endAccess(&v138);
          uint64_t v61 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(v121 + 16))(v131, v134, v122, v60);
          double v62 = (os_log_s *)Logger.logObject.getter(v61);
          os_log_type_t v63 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v62, v63))
          {
            int v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            *(_DWORD *)int v64 = 134283521;
            uint64_t v65 = ((uint64_t (*)(void))ALWiFiNotification.associatedMac.getter)();
            if ((v66 & 1) != 0) {
              uint64_t v67 = 0LL;
            }
            else {
              uint64_t v67 = v65;
            }
            (*(void (**)(uint64_t *, uint64_t))(v121 + 8))(v131, v122);
            *(void *)&__int128 v138 = v67;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, (char *)&v138 + 8, v64 + 4, v64 + 12);
            _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "AONSense,associatedState,update,%{private}llx",  v64,  0xCu);
            swift_slowDealloc(v64, -1LL, -1LL);
          }

          else
          {
            (*(void (**)(uint64_t *, uint64_t))(v121 + 8))(v131, v122);
          }

          uint64_t v58 = sub_10099E600((uint64_t)&v140);
        }
      }

      *((double *)&v143 + 1) = v42;
      uint64_t v73 = ALWiFiScanResult.accessPoints.getter(v58);
      uint64_t v118 = v73;
      uint64_t v74 = *(void *)(v73 + 16);
      if (v74)
      {
        v128 = (char *)v126 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        uint64_t v75 = v133;
        unint64_t v76 = v73 + ((*(unsigned __int8 *)(v132 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80));
        uint64_t v130 = *(void *)(v132 + 72);
        v131 = (uint64_t *)&v144;
        v77 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v132 + 16);
        do
        {
          uint64_t v78 = v77(v4, v76, v75);
          uint64_t v79 = ALWiFiScanSingleAccessPoint.ageSec.getter(v78);
          uint64_t v80 = ALWiFiScanSingleAccessPoint.mac.getter();
          if ((v81 & 1) != 0) {
            uint64_t v80 = 0LL;
          }
          nullsub_10(v80);
          uint64_t v83 = v82;
          else {
            double v84 = *(float *)&v79;
          }
          __int128 v138 = 0uLL;
          uint64_t v139 = 0LL;
          v85 = sub_10106A214(&v138);
          uint64_t v86 = ALWiFiScanSingleAccessPoint.rssidB.getter(v85);
          else {
            int v87 = v86;
          }
          uint64_t v88 = ALWiFiScanSingleAccessPoint.channel.getter();
          else {
            int v89 = v88;
          }
          char v90 = ALWiFiScanSingleAccessPoint.isAph.getter();
          char v91 = ALWiFiScanSingleAccessPoint.isMoving.getter();
          sub_10106A220((uint64_t)&v140, v83, &v138, v87, 0, v89, v90 & 1, v91 & 1, v84, v42 - v84);
          *(void *)&__int128 v138 = sub_1005B46E8((uint64_t)&v140);
          uint64_t v92 = sub_1005B46E8((uint64_t)&v138);
          uint64_t v93 = ((uint64_t (*)(void))ALWiFiNotification.associatedMac.getter)();
          if ((v94 & 1) == 0 && v92 == v93)
          {
            sub_10106A2E8((uint64_t)&v140, 1);
            uint64_t v95 = (uint64_t)v128;
            swift_beginAccess(v128, &v138, 33LL, 0LL);
            sub_10106A2F0(v95, (uint64_t)&v140);
            swift_endAccess(&v138);
          }

          double v96 = CFAbsoluteTimeGetCurrent();
          sub_10106A260((uint64_t)&v140, v96);
          sub_10106A268(v131, (uint64_t)&v140);
          uint64_t v75 = v133;
          sub_10099E600((uint64_t)&v140);
          (*(void (**)(char *, uint64_t))(v132 + 8))(v4, v75);
          v76 += v130;
          --v74;
        }

        while (v74);
        uint64_t v73 = v118;
      }

      uint64_t v97 = swift_bridgeObjectRelease(v73);
      ALWiFiNotification.associatedMac.getter(v97);
      if ((v98 & 1) == 0)
      {
        v99 = (char *)v126 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        swift_beginAccess( (char *)v126 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState,  &v136,  0LL,  0LL);
        sub_10106835C(&v140, v99);
        LOBYTE(v99) = sub_10106A2C8((uint64_t)&v140);
        sub_10099E5C8((uint64_t)&v140);
        if ((v99 & 1) == 0)
        {
          uint64_t v100 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 16))(v120, v134, v122);
          v101 = (os_log_s *)Logger.logObject.getter(v100);
          os_log_type_t v102 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v101, v102))
          {
            v103 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            *(_DWORD *)v103 = 134283521;
            uint64_t v104 = ALWiFiNotification.associatedMac.getter(v103);
            if ((v105 & 1) != 0) {
              uint64_t v106 = 0LL;
            }
            else {
              uint64_t v106 = v104;
            }
            (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v122);
            uint64_t v140 = v106;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v103 + 4, v103 + 12);
            _os_log_impl( (void *)&_mh_execute_header,  v101,  v102,  "The associatedState NOT set though associatedMac is valid %{private}llx",  v103,  0xCu);
            swift_slowDealloc(v103, -1LL, -1LL);
          }

          else
          {
            (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v122);
          }
        }
      }

      v107 = (char *)v126 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
      swift_beginAccess( (char *)v126 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState,  &v140,  0LL,  0LL);
      uint64_t v108 = sub_10099E5C8((uint64_t)&v142[1]);
      uint64_t v109 = sub_10106835C(v108, v107);
      v110 = (os_log_s *)Logger.logObject.getter(v109);
      os_log_type_t v111 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v110, v111))
      {
        v112 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)v112 = 134217984;
        swift_beginAccess(v142, &v137, 0LL, 0LL);
        *(void *)&__int128 v138 = sub_10106A2A4(&v144);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, (char *)&v138 + 8, v112 + 4, v112 + 12);
        _os_log_impl( (void *)&_mh_execute_header,  v110,  v111,  "AONSense,onEachNotfication,data.scan.size,%ld",  v112,  0xCu);
        swift_slowDealloc(v112, -1LL, -1LL);
      }

      v114 = (void (*)(id))(*(uint64_t (**)(void))((swift_isaMask & *v126) + 0xC0LL))();
      if (v114)
      {
        uint64_t v115 = v113;
        id v116 = [objc_allocWithZone((Class)CLAONSenseWiFiNotification) init];
        swift_beginAccess(v142, &v138, 1LL, 0LL);
        [v116 setData:v142];
        v114(v116);
        sub_101068944((uint64_t)v114, v115);
      }

      (*(void (**)(char *, uint64_t))(v124 + 8))(v123, v125);
      v117(v127, v129);
      sub_100339720((uint64_t)v142);
    }
  }

void sub_1010698FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x101069904LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_101069990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5 = ALWiFiScanSingleAccessPoint.ageSec.getter(a1);
  uint64_t v6 = ALWiFiScanSingleAccessPoint.mac.getter();
  if ((v7 & 1) != 0) {
    uint64_t v6 = 0LL;
  }
  nullsub_10(v6);
  uint64_t v9 = v8;
  else {
    double v10 = *(float *)&v5;
  }
  __int128 v19 = 0uLL;
  uint64_t v20 = 0LL;
  uint64_t v11 = sub_10106A214(&v19);
  uint64_t v12 = ALWiFiScanSingleAccessPoint.rssidB.getter(v11);
  else {
    int v13 = v12;
  }
  uint64_t v14 = ALWiFiScanSingleAccessPoint.channel.getter();
  else {
    int v15 = v14;
  }
  char v16 = ALWiFiScanSingleAccessPoint.isAph.getter();
  char v17 = ALWiFiScanSingleAccessPoint.isMoving.getter();
  return sub_10106A220(a2, v9, &v19, v13, 0, v15, v16 & 1, v17 & 1, v10, a3 - v10);
}

uint64_t sub_101069A68(void *a1, float a2)
{
  uint64_t v4 = sub_10015E6AC(&qword_101993110);
  double v5 = __chkstk_darwin(v4);
  char v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ALResultOptions(0LL, v5);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  char v12 = 0;
  sub_101069F00(a1, v9, LODWORD(a2));
  return sub_10015E7F8((uint64_t)v7, &qword_101993110);
}

uint64_t sub_101069C78(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10015E6AC(&qword_101993110);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v10 = *(double (**)(uint64_t, uint64_t))((swift_isaMask & *v3) + 0xC8LL);
  swift_retain(a3);
  double v11 = v10(a2, a3);
  uint64_t v12 = type metadata accessor for ALResultOptions(0LL, v11);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v9, 1LL, 1LL, v12);
  char v16 = 1;
  sub_101069F00(a1, v13, 0x100000000uLL);
  return sub_10015E7F8((uint64_t)v9, &qword_101993110);
}

uint64_t sub_101069F00(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(uint64_t (**)(void))((swift_isaMask & *v3) + 0x90LL);
  uint64_t v8 = v7();
  if (!v8)
  {
    uint64_t v9 = type metadata accessor for ALFWiFiScanResultsRequester();
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    uint64_t v8 = ALFWiFiScanResultsRequester.init(queue:)(a1);
  }

  uint64_t v10 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0x98LL))(v8);
  uint64_t result = ((uint64_t (*)(uint64_t))v7)(v10);
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = swift_allocObject(&unk_1018984F0, 24LL, 7LL);
    *(void *)(v13 + 16) = v4;
    id v14 = v4;
    dispatch thunk of ALFWiFiScanResultsRequester.register(callback:intervalSec:)( sub_10106A610,  v13,  a3 | ((HIDWORD(a3) & 1) << 32));
    swift_release(v12);
    return swift_release(v13);
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_101069FFC()
{
  *(void *)&v0[OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_requester] = 0LL;
  uint64_t v1 = &v0[OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc];
  *(void *)uint64_t v1 = 0LL;
  *((void *)v1 + 1) = 0LL;
  uint64_t v2 = &v0[OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback];
  uint64_t v3 = (objc_class *)type metadata accessor for CLAONSenseWiFiService();
  *(void *)uint64_t v2 = 0LL;
  *((void *)v2 + 1) = 0LL;
  v5.receiver = v0;
  v5.super_class = v3;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_10106A108()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CLAONSenseWiFiService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

double sub_10106A19C(uint64_t a1)
{
  *(_WORD *)a1 = -256;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0LL;
  return result;
}

__n128 sub_10106A1C0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    *(void *)a1 = *(void *)a2;
    __int128 v2 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v2;
    *(void *)(a2 + 16) = 0LL;
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + 8) = 0LL;
    __n128 result = *(__n128 *)(a2 + 32);
    __int128 v4 = *(_OWORD *)(a2 + 48);
    __int128 v5 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v4;
    *(_OWORD *)(a1 + 64) = v5;
    *(__n128 *)(a1 + 32) = result;
    *(_BYTE *)(a1 + 88) = 1;
  }

  return result;
}

void *sub_10106A214(void *result)
{
  std::string *result = 0LL;
  result[1] = 0LL;
  result[2] = 0LL;
  return result;
}

uint64_t sub_10106A220( uint64_t result, uint64_t a2, __int128 *a3, int a4, int a5, int a6, char a7, char a8, double a9, double a10)
{
  *(void *)__n128 result = a2;
  __int128 v10 = *a3;
  *(void *)(result + 24) = *((void *)a3 + 2);
  *(_OWORD *)(result + 8) = v10;
  *((void *)a3 + 1) = 0LL;
  *((void *)a3 + 2) = 0LL;
  *(void *)a3 = 0LL;
  *(_DWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 36) = a5;
  *(_DWORD *)(result + 40) = a6;
  *(double *)(result + 48) = a9;
  *(double *)(result + 56) = a10;
  *(_BYTE *)(result + 64) = a7;
  *(_BYTE *)(result + 65) = a8;
  *(_DWORD *)(result + 68) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(void *)(result + 80) = 0LL;
  return result;
}

uint64_t sub_10106A260(uint64_t result, double a2)
{
  *(double *)(result + 80) = a2;
  return result;
}

uint64_t sub_10106A268(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_100023888(a1, a2);
  }

  else
  {
    sub_100023800((uint64_t)a1, a2);
    uint64_t result = v3 + 88;
  }

  a1[1] = result;
  return result;
}

uint64_t sub_10106A2A4(void *a1)
{
  return 0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(a1[1] - *a1) >> 3);
}

BOOL sub_10106A2C8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 88) && *(_DWORD *)(a1 + 40) > 0;
}

uint64_t sub_10106A2E8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 72) = a2;
  return result;
}

BOOL sub_10106A2F4(uint64_t *a1, uint64_t a2)
{
  if (!*((_BYTE *)a1 + 88)) {
    return 0LL;
  }
  uint64_t v3 = *a1;
  return sub_1005B46E8((uint64_t)&v3) == a2;
}

uint64_t sub_10106A340(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 40) = 9999;
  *(_BYTE *)(result + 72) = 0;
  *(void *)(result + 80) = 0LL;
  return result;
}

uint64_t type metadata accessor for CLAONSenseWiFiService()
{
  return objc_opt_self(&OBJC_CLASS____TtC10CLAONSense21CLAONSenseWiFiService);
}

void type metadata accessor for CLWifiService_Type(uint64_t a1)
{
}

uint64_t sub_10106A390(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_10106A3C4(uint64_t a1, uint64_t a2)
{
  return sub_10106835C(a1, a2);
}

uint64_t sub_10106A3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10099E5C8(a1);
  return sub_10106835C(v3, a2);
}

uint64_t sub_10106A408(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_10106A438(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10099E5C8(a1);
  sub_10106A1C0(v4, a2);
  sub_10099E5C8(a2);
  return a1;
}

uint64_t sub_10106A470(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10106A490(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for CLWifiService_Type.AssociationState(uint64_t a1)
{
}

void sub_10106A4E8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_10106A52C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10106A550()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_10106A574()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10106A598(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_10106A5C8(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10106A5EC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10106A610()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0xE0LL))();
}

void sub_10106A690(id a1)
{
  uint64_t v1 = (const void *)MGCopyAnswer(@"InternalBuild", 0LL);
  if (v1)
  {
    uint64_t v2 = v1;
    if (CFEqual(v1, kCFBooleanTrue)) {
      byte_1019A0530 = 1;
    }
    CFRelease(v2);
  }

void sub_10106A730(id a1)
{
  uint64_t v1 = (const void *)MGCopyAnswer(@"DeviceClass", 0LL);
  if (v1)
  {
    uint64_t v2 = v1;
    if (CFEqual(v1, @"iPhone")) {
      byte_1019A0540 = 1;
    }
    CFRelease(v2);
  }

void sub_10106A7DC(id a1)
{
  uint64_t v1 = (const void *)_CFCopyServerVersionDictionary(a1);
  if (v1 || (uint64_t v1 = (const void *)_CFCopySystemVersionDictionary()) != 0LL)
  {
    CFRelease(v1);
    Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v1, _kCFSystemVersionProductNameKey);
    char v3 = (const void *)_kCFSystemVersionProductVersionKey;
    uint64_t v4 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v1, _kCFSystemVersionProductVersionKey);
    uint64_t v5 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v1, v3);
    if (!Value || (CFTypeID v6 = CFGetTypeID(Value), v6 != CFStringGetTypeID())) {
      Value = @"<name>";
    }
    if (!v4 || (CFTypeID v7 = CFGetTypeID(v4), v7 != CFStringGetTypeID())) {
      uint64_t v4 = @"<version>";
    }
    CFTypeID v8 = CFGetTypeID(v5);
    if (v8 != CFStringGetTypeID()) {
      uint64_t v5 = @"<build>";
    }
    uint64_t v9 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@%@/%@",  Value,  v4,  v5);
  }

  else
  {
    uint64_t v9 = @"<null>";
  }

  qword_1019A0550 = (uint64_t)v9;
}

void sub_10106A944(id a1)
{
  size_t v2 = 128LL;
  if (sysctlbyname("hw.model", v3, &v2, 0LL, 0LL)) {
    uint64_t v1 = @"<unknown>";
  }
  else {
    uint64_t v1 = -[NSString initWithCString:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithCString:encoding:", v3, 4LL);
  }
  qword_1019A0560 = (uint64_t)v1;
}

id sub_10106AAD0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _checkAudioStreamState];
}

id sub_10106B184(uint64_t a1, unsigned int *a2, __int128 *a3, void *a4)
{
  uint64_t v4 = *a2;
  __int128 v6 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  return [a4 _onDaemonStatusNotification:v4 data:&v6];
}

void sub_10106B1C0(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6 = *a2;
  __int16 v7 = *a3;
  sub_1000C6980(v8, (uint64_t)(a3 + 4));
  uint64_t v12 = *((void *)a3 + 13);
  memset(v13, 0, 24);
  sub_1002DE3C8( v13,  *((void *)a3 + 14),  *((void *)a3 + 15),  0x2E8BA2E8BA2E8BA3LL * ((uint64_t)(*((void *)a3 + 15) - *((void *)a3 + 14)) >> 3));
  v13[3] = *((void *)a3 + 17);
  [a4 _onWifiServiceNotification:v6 data:&v7];
  id v14 = (void **)v13;
  sub_100023498(&v14);
  if (v11)
  {
    if (v10 < 0) {
      operator delete(__p);
    }
  }

void sub_10106B284( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
}

id sub_10106B2B8(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return _[a4 _onDataProtectionNotification:*a2 data:*a3];
}

id sub_10106B2CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _checkAudioStreamState];
}

void sub_10106B2D8(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  v7[0] = *(_BYTE *)a3;
  sub_1008F2EA8((uint64_t)&v8, a3 + 8);
  uint64_t v15 = *(void *)(a3 + 112);
  int v16 = *(_DWORD *)(a3 + 120);
  [a4 _onBluetoothServiceNotification:v6 data:v7];
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
}

void sub_10106B374( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10106C00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10106C090;
  block[3] = &unk_10181A2D8;
  block[4] = a3;
  block[5] = a2;
  block[6] = *(void *)(a1 + 32);
  dispatch_async(v6, block);
}

void sub_10106C090(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_1018985B0);
    }
    size_t v2 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_ERROR))
    {
      char v3 = *(CLVisit **)(a1 + 32);
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      char v14 = "";
      __int16 v15 = 2114;
      int v16 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#durian #system fail to fetch visits, error:%{public, location:escape_only}@}",  (uint8_t *)&v11,  0x1Cu);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_1018985B0);
      }
    }

    uint64_t v4 = (os_log_s *)qword_101934848;
    if (os_signpost_enabled((os_log_t)qword_101934848))
    {
      uint64_t v5 = *(CLVisit **)(a1 + 32);
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      char v14 = "";
      __int16 v15 = 2114;
      int v16 = v5;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#durian #system fail to fetch visits",  "{msg%{public}.0s:#durian #system fail to fetch visits, error:%{public, location:escape_only}@}",  (uint8_t *)&v11,  0x1Cu);
    }
  }

  else
  {
    id v6 = [*(id *)(a1 + 40) firstObject];
    if (v6)
    {
      __int16 v7 = v6;
      if ([v6 entry])
      {
        -[NSDate timeIntervalSinceDate:]( +[NSDate now](NSDate, "now"),  "timeIntervalSinceDate:",  [v7 entry]);
        if (v8 > 0.0)
        {
          if ([v7 location])
          {
            uint64_t v9 = -[CLVisit initWithVisit:](objc_alloc(&OBJC_CLASS___CLVisit), "initWithVisit:", v7);
            if (qword_101934840 != -1) {
              dispatch_once(&qword_101934840, &stru_1018985B0);
            }
            char v10 = (os_log_s *)qword_101934848;
            if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_DEFAULT))
            {
              int v11 = 68289283;
              int v12 = 0;
              __int16 v13 = 2082;
              char v14 = "";
              __int16 v15 = 2113;
              int v16 = v9;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#durian #system fetched most recent visit, visit:%{private, location:escape_only}@}",  (uint8_t *)&v11,  0x1Cu);
            }

            objc_msgSend( objc_msgSend(*(id *)(a1 + 48), "delegate"),  "updateSystemLoiType:isEntry:",  objc_msgSend(-[CLVisit _placeInference](v9, "_placeInference"), "userType"),  -[CLVisit hasDepartureDate](v9, "hasDepartureDate") ^ 1);
          }
        }
      }
    }
  }

id sub_10106C628(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onVehicleStateNotification];
}

void sub_10106C720( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10106C738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_101934840 != -1) {
    dispatch_once(&qword_101934840, &stru_1018985B0);
  }
  double v8 = (os_log_s *)qword_101934848;
  if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134349568;
    uint64_t v22 = a2;
    __int16 v23 = 2050;
    uint64_t v24 = a3;
    __int16 v25 = 2050;
    uint64_t v26 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#durian received vehicle state notification - state %{public}lu; hints %{public}lu; operator state %{public}lu",
      buf,
      0x20u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_1018985B0);
    }
    int v15 = 134349568;
    uint64_t v16 = a2;
    __int16 v17 = 2050;
    uint64_t v18 = a3;
    __int16 v19 = 2050;
    uint64_t v20 = a4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934848,  0LL,  "#durian received vehicle state notification - state %{public}lu; hints %{public}lu; operator state %{public}lu",
      &v15,
      32);
    int v11 = (uint8_t *)v10;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLDurianSystemMonitor onVehicleStateNotification]_block_invoke",  "%s\n",  v10);
    if (v11 != buf) {
      free(v11);
    }
  }

  if (a3 == 16) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_1018985B0);
    }
    uint64_t v9 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#durian attempting to call into durian service to handle vehicular state",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_1018985B0);
      }
      LOWORD(v15) = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934848,  0LL,  "#durian attempting to call into durian service to handle vehicular state",  &v15,  v14);
      __int16 v13 = (uint8_t *)v12;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLDurianSystemMonitor onVehicleStateNotification]_block_invoke",  "%s\n",  v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "delegate"), "onVehicularState");
  }

void sub_10106CB40(id a1)
{
  qword_101934848 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_10106E930(id a1)
{
  qword_101934848 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_10106E9F8(uint64_t a1, void *a2)
{
  id v7 = +[RBSProcessPredicate predicateMatchingBundleIdentifier:]( &OBJC_CLASS___RBSProcessPredicate,  "predicateMatchingBundleIdentifier:",  @"com.apple.findmy");
  objc_msgSend( a2,  "setPredicates:",  +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
  id v4 = objc_alloc_init(&OBJC_CLASS___RBSProcessStateDescriptor);
  [v4 setValues:1];
  [a2 setStateDescriptor:v4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10106EAF4;
  v6[3] = &unk_1018822D0;
  v6[4] = *(void *)(a1 + 32);
  return [a2 setUpdateHandler:v6];
}

void sub_10106EAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10106EB50;
  v6[3] = &unk_10183D288;
  v6[4] = v4;
  void v6[5] = a2;
  v6[6] = a4;
  v6[7] = a3;
  dispatch_async(v5, v6);
}

id sub_10106EB50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) processMonitor:*(void *)(a1 + 40) didProvideUpdate:*(void *)(a1 + 48) forProcessHandle:*(void *)(a1 + 56)];
}

void sub_10106ECF0(id a1)
{
  qword_101934848 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_10106F25C(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "submitClientRequestsEvent:client:scanType:",  &off_1018D51E0,  *(void *)(*(void *)(a1 + 32) + 56),  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "StartMonitor"));
}

const char *sub_10106F5EC(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }

        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }

      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }

            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }

            break;
        }
      }

      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }

            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }

            break;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }

          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }

          break;
      }
    }
  }

  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }

        break;
    }
  }

  return result;
}

id sub_10107030C(uint64_t a1)
{
  return [objc_loadWeak((id *)(*(void *)(a1 + 32) + 16)) onAggressiveScanEnded];
}

void sub_10107089C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_1010708C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (id *)(a1 + 32);
  id v6 = (dispatch_queue_s *)[objc_loadWeak((id *)(a1 + 32)) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_101070968;
  block[3] = &unk_101898640;
  objc_copyWeak(&v8, v5);
  block[4] = a2;
  block[5] = a3;
  dispatch_async(v6, block);
  objc_destroyWeak(&v8);
}

id sub_101070968(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 48));
  return _[Weak scanCompletedWithError:*(void *)(a1 + 32) totalRXTime:*(void *)(a1 + 40)];
}

id sub_101070990(uint64_t a1)
{
  return [objc_loadWeak((id *)(*(void *)(a1 + 32) + 16)) onAggressiveScanStarted];
}

id sub_101070A7C(void *a1)
{
  return [objc_loadWeak((id *)(a1[4] + 16)) onAvengerAdvertisement:a1[5] reconciledInformation:a1[6]];
}

id sub_101070D04(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 16LL));
  return _[Weak onNotOptedInBOMScanEnded];
}

id sub_101071100(uint64_t a1)
{
  return [objc_loadWeak((id *)(*(void *)(a1 + 32) + 16)) onAdvertisementBufferEmptied];
}

uint64_t sub_101071440(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

id sub_1010716D8(uint64_t a1)
{
  return [objc_loadWeak((id *)(*(void *)(a1 + 32) + 16)) onAggressiveScanEnded];
}

id sub_1010716F4(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 16LL));
  return _[Weak onUpdatedPowerState];
}

uint64_t sub_101072730(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_1010729C4(id a1)
{
  qword_1019349C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "AvengerScanner");
}

void sub_101072FF4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101073100(uint64_t result)
{
  *(void *)uint64_t result = &off_1018986B8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101073118(PB::Base *a1)
{
}

float sub_10107312C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018986B8;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_1010731D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cyclingState", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "cyclingStateSummary", *(_DWORD *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "motionType", *(_DWORD *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 32) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010732A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101073808(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

void *sub_1010738B8(void *result)
{
  const char *result = &off_1018986F0;
  *(void *)((char *)result + 156) = 0LL;
  return result;
}

void sub_1010738D0(PB::Base *a1)
{
}

float sub_1010738E4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018986F0;
  *(void *)(a1 + 156) = 0LL;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v3 = 1LL;
    *(void *)(a1 + 156) = 1LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    uint64_t v2 = *(void *)(a2 + 156);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 24);
    v3 |= 4uLL;
    *(void *)(a1 + 156) = v3;
    *(void *)(a1 + 24) = v5;
    uint64_t v2 = *(void *)(a2 + 156);
  }

uint64_t sub_101073D0C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "abruptGravityChangeAngle", *(float *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 156);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_42;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "accelPathLength", *(float *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }

uint64_t sub_1010741DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101074F50(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 156);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    uint64_t v4 = *(void *)(v3 + 156);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_41;
    }
  }

  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 2u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_42;
  }

uint64_t sub_101075380(uint64_t result)
{
  *(void *)uint64_t result = &off_101898728;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101075398(PB::Base *a1)
{
}

uint64_t sub_1010753AC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101898728;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1010753FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "gyroOn", *(_BYTE *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101075464(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010756E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_10107573C(uint64_t result)
{
  *(void *)uint64_t result = &off_101898760;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_101075754(PB::Base *a1)
{
}

uint64_t sub_101075768(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101898760;
  *(_DWORD *)(result + 52) = 0;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    __int16 v3 = 2;
    *(_WORD *)(result + 52) = 2;
    *(void *)(result + 16) = v4;
    __int16 v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 52) = v3;
    *(void *)(result + 24) = v5;
    __int16 v2 = *(_WORD *)(a2 + 52);
  }

uint64_t sub_1010758F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "consideredAlert", *(_BYTE *)(a1 + 44));
    __int16 v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "consideredRecovery", *(_BYTE *)(a1 + 45));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_101075AC0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010762EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 52);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 2u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

void *sub_10107647C(void *result)
{
  const char *result = &off_101898798;
  *(void *)((char *)result + 364) = 0LL;
  return result;
}

void sub_101076498(PB::Base *a1)
{
}

double sub_1010764AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898798;
  unint64_t v2 = (uint64_t *)(a1 + 364);
  *(void *)(a1 + 364) = 0LL;
  uint64_t v3 = (uint64_t *)(a2 + 364);
  uint64_t v4 = *(void *)(a2 + 364);
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 248);
    uint64_t v5 = 0x40000000LL;
    *unint64_t v2 = 0x40000000LL;
    *(void *)(a1 + 24_Block_object_dispose(va, 8) = v6;
    uint64_t v4 = *v3;
    if ((*v3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v5 = 0LL;
  if ((v4 & 0x80000000) != 0)
  {
LABEL_5:
    uint64_t v7 = *(void *)(a2 + 256);
    v5 |= 0x80000000uLL;
    *unint64_t v2 = v5;
    *(void *)(a1 + 256) = v7;
    uint64_t v4 = *v3;
  }

uint64_t sub_1010769BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 364);
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "alertCanceledBecauseOfAbsenceOfQuiessence", *(void *)(a1 + 8));
    uint64_t v6 = *v5;
    if ((*v5 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_50;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfActive", *(void *)(a1 + 16));
  uint64_t v6 = *v5;
  if ((*v5 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_51;
  }

uint64_t sub_101076F98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void *)(a1 + 364);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }

LABEL_648:
          *(void *)(a1 + 24_Block_object_dispose(va, 8) = v26;
          goto LABEL_821;
        case 2u:
          *v8 |= 0x80000000uLL;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0LL;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_652;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v15 = v33++ > 8;
            }

            while (!v15);
LABEL_349:
            uint64_t v34 = 0LL;
            goto LABEL_652;
          }

          char v379 = 0;
          unsigned int v380 = 0;
          uint64_t v34 = 0LL;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              uint64_t v34 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v381 = v29 + 1;
              char v382 = *(_BYTE *)(v31 + v29);
              *((void *)this + 1) = v381;
              v34 |= (unint64_t)(v382 & 0x7F) << v379;
              if (v382 < 0)
              {
                v379 += 7;
                unint64_t v29 = v381;
                BOOL v15 = v380++ > 8;
                if (v15) {
                  goto LABEL_349;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v34 = 0LL;
              }
            }

            break;
          }

LABEL_652:
          *(void *)(a1 + 256) = v34;
          goto LABEL_821;
        case 0x15u:
          *v8 |= 0x80000uLL;
          unint64_t v38 = *((void *)this + 1);
          unint64_t v39 = *((void *)this + 2);
          uint64_t v40 = *(void *)this;
          if (v38 <= 0xFFFFFFFFFFFFFFF5LL && v38 + 10 <= v39)
          {
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v43 = 0LL;
            do
            {
              unint64_t v44 = v38 + 1;
              *((void *)this + 1) = v38 + 1;
              char v45 = *(_BYTE *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0) {
                goto LABEL_656;
              }
              v41 += 7;
              unint64_t v38 = v44;
              BOOL v15 = v42++ > 8;
            }

            while (!v15);
LABEL_356:
            uint64_t v43 = 0LL;
            goto LABEL_656;
          }

          char v383 = 0;
          unsigned int v384 = 0;
          uint64_t v43 = 0LL;
          if (v39 <= v38) {
            unint64_t v39 = *((void *)this + 1);
          }
          while (2)
          {
            if (v39 == v38)
            {
              uint64_t v43 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v385 = v38 + 1;
              char v386 = *(_BYTE *)(v40 + v38);
              *((void *)this + 1) = v385;
              v43 |= (unint64_t)(v386 & 0x7F) << v383;
              if (v386 < 0)
              {
                v383 += 7;
                unint64_t v38 = v385;
                BOOL v15 = v384++ > 8;
                if (v15) {
                  goto LABEL_356;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v43 = 0LL;
              }
            }

            break;
          }

LABEL_656:
          *(void *)(a1 + 160) = v43;
          goto LABEL_821;
        case 0x16u:
          *v8 |= 0x100000uLL;
          unint64_t v46 = *((void *)this + 1);
          unint64_t v47 = *((void *)this + 2);
          uint64_t v48 = *(void *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5LL && v46 + 10 <= v47)
          {
            char v49 = 0;
            unsigned int v50 = 0;
            uint64_t v51 = 0LL;
            do
            {
              unint64_t v52 = v46 + 1;
              *((void *)this + 1) = v46 + 1;
              char v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0) {
                goto LABEL_660;
              }
              v49 += 7;
              unint64_t v46 = v52;
              BOOL v15 = v50++ > 8;
            }

            while (!v15);
LABEL_363:
            uint64_t v51 = 0LL;
            goto LABEL_660;
          }

          char v387 = 0;
          unsigned int v388 = 0;
          uint64_t v51 = 0LL;
          if (v47 <= v46) {
            unint64_t v47 = *((void *)this + 1);
          }
          while (2)
          {
            if (v47 == v46)
            {
              uint64_t v51 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v389 = v46 + 1;
              char v390 = *(_BYTE *)(v48 + v46);
              *((void *)this + 1) = v389;
              v51 |= (unint64_t)(v390 & 0x7F) << v387;
              if (v390 < 0)
              {
                v387 += 7;
                unint64_t v46 = v389;
                BOOL v15 = v388++ > 8;
                if (v15) {
                  goto LABEL_363;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v51 = 0LL;
              }
            }

            break;
          }

LABEL_660:
          *(void *)(a1 + 16_Block_object_dispose(va, 8) = v51;
          goto LABEL_821;
        case 0x2Cu:
          *v8 |= 0x200000uLL;
          unint64_t v54 = *((void *)this + 1);
          unint64_t v55 = *((void *)this + 2);
          uint64_t v56 = *(void *)this;
          if (v54 <= 0xFFFFFFFFFFFFFFF5LL && v54 + 10 <= v55)
          {
            char v57 = 0;
            unsigned int v58 = 0;
            uint64_t v59 = 0LL;
            do
            {
              unint64_t v60 = v54 + 1;
              *((void *)this + 1) = v54 + 1;
              char v61 = *(_BYTE *)(v56 + v54);
              v59 |= (unint64_t)(v61 & 0x7F) << v57;
              if ((v61 & 0x80) == 0) {
                goto LABEL_664;
              }
              v57 += 7;
              unint64_t v54 = v60;
              BOOL v15 = v58++ > 8;
            }

            while (!v15);
LABEL_370:
            uint64_t v59 = 0LL;
            goto LABEL_664;
          }

          char v391 = 0;
          unsigned int v392 = 0;
          uint64_t v59 = 0LL;
          if (v55 <= v54) {
            unint64_t v55 = *((void *)this + 1);
          }
          while (2)
          {
            if (v55 == v54)
            {
              uint64_t v59 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v393 = v54 + 1;
              char v394 = *(_BYTE *)(v56 + v54);
              *((void *)this + 1) = v393;
              v59 |= (unint64_t)(v394 & 0x7F) << v391;
              if (v394 < 0)
              {
                v391 += 7;
                unint64_t v54 = v393;
                BOOL v15 = v392++ > 8;
                if (v15) {
                  goto LABEL_370;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v59 = 0LL;
              }
            }

            break;
          }

LABEL_664:
          *(void *)(a1 + 176) = v59;
          goto LABEL_821;
        case 0x2Du:
          *v8 |= 0x8000000000uLL;
          unint64_t v62 = *((void *)this + 1);
          unint64_t v63 = *((void *)this + 2);
          uint64_t v64 = *(void *)this;
          if (v62 <= 0xFFFFFFFFFFFFFFF5LL && v62 + 10 <= v63)
          {
            char v65 = 0;
            unsigned int v66 = 0;
            uint64_t v67 = 0LL;
            do
            {
              unint64_t v68 = v62 + 1;
              *((void *)this + 1) = v62 + 1;
              char v69 = *(_BYTE *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0) {
                goto LABEL_668;
              }
              v65 += 7;
              unint64_t v62 = v68;
              BOOL v15 = v66++ > 8;
            }

            while (!v15);
LABEL_377:
            uint64_t v67 = 0LL;
            goto LABEL_668;
          }

          char v395 = 0;
          unsigned int v396 = 0;
          uint64_t v67 = 0LL;
          if (v63 <= v62) {
            unint64_t v63 = *((void *)this + 1);
          }
          while (2)
          {
            if (v63 == v62)
            {
              uint64_t v67 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v397 = v62 + 1;
              char v398 = *(_BYTE *)(v64 + v62);
              *((void *)this + 1) = v397;
              v67 |= (unint64_t)(v398 & 0x7F) << v395;
              if (v398 < 0)
              {
                v395 += 7;
                unint64_t v62 = v397;
                BOOL v15 = v396++ > 8;
                if (v15) {
                  goto LABEL_377;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v67 = 0LL;
              }
            }

            break;
          }

LABEL_668:
          *(void *)(a1 + 320) = v67;
          goto LABEL_821;
        case 0x2Eu:
          *v8 |= 0x40000000000uLL;
          unint64_t v70 = *((void *)this + 1);
          unint64_t v71 = *((void *)this + 2);
          uint64_t v72 = *(void *)this;
          if (v70 <= 0xFFFFFFFFFFFFFFF5LL && v70 + 10 <= v71)
          {
            char v73 = 0;
            unsigned int v74 = 0;
            uint64_t v75 = 0LL;
            do
            {
              unint64_t v76 = v70 + 1;
              *((void *)this + 1) = v70 + 1;
              char v77 = *(_BYTE *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0) {
                goto LABEL_672;
              }
              v73 += 7;
              unint64_t v70 = v76;
              BOOL v15 = v74++ > 8;
            }

            while (!v15);
LABEL_384:
            uint64_t v75 = 0LL;
            goto LABEL_672;
          }

          char v399 = 0;
          unsigned int v400 = 0;
          uint64_t v75 = 0LL;
          if (v71 <= v70) {
            unint64_t v71 = *((void *)this + 1);
          }
          while (2)
          {
            if (v71 == v70)
            {
              uint64_t v75 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v401 = v70 + 1;
              char v402 = *(_BYTE *)(v72 + v70);
              *((void *)this + 1) = v401;
              v75 |= (unint64_t)(v402 & 0x7F) << v399;
              if (v402 < 0)
              {
                v399 += 7;
                unint64_t v70 = v401;
                BOOL v15 = v400++ > 8;
                if (v15) {
                  goto LABEL_384;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v75 = 0LL;
              }
            }

            break;
          }

LABEL_672:
          *(void *)(a1 + 344) = v75;
          goto LABEL_821;
        case 0x2Fu:
          *v8 |= 0x10000000000uLL;
          unint64_t v78 = *((void *)this + 1);
          unint64_t v79 = *((void *)this + 2);
          uint64_t v80 = *(void *)this;
          if (v78 <= 0xFFFFFFFFFFFFFFF5LL && v78 + 10 <= v79)
          {
            char v81 = 0;
            unsigned int v82 = 0;
            uint64_t v83 = 0LL;
            do
            {
              unint64_t v84 = v78 + 1;
              *((void *)this + 1) = v78 + 1;
              char v85 = *(_BYTE *)(v80 + v78);
              v83 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0) {
                goto LABEL_676;
              }
              v81 += 7;
              unint64_t v78 = v84;
              BOOL v15 = v82++ > 8;
            }

            while (!v15);
LABEL_391:
            uint64_t v83 = 0LL;
            goto LABEL_676;
          }

          char v403 = 0;
          unsigned int v404 = 0;
          uint64_t v83 = 0LL;
          if (v79 <= v78) {
            unint64_t v79 = *((void *)this + 1);
          }
          while (2)
          {
            if (v79 == v78)
            {
              uint64_t v83 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v405 = v78 + 1;
              char v406 = *(_BYTE *)(v80 + v78);
              *((void *)this + 1) = v405;
              v83 |= (unint64_t)(v406 & 0x7F) << v403;
              if (v406 < 0)
              {
                v403 += 7;
                unint64_t v78 = v405;
                BOOL v15 = v404++ > 8;
                if (v15) {
                  goto LABEL_391;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v83 = 0LL;
              }
            }

            break;
          }

LABEL_676:
          *(void *)(a1 + 32_Block_object_dispose(va, 8) = v83;
          goto LABEL_821;
        case 0x30u:
          *v8 |= 0x20000000000uLL;
          unint64_t v86 = *((void *)this + 1);
          unint64_t v87 = *((void *)this + 2);
          uint64_t v88 = *(void *)this;
          if (v86 <= 0xFFFFFFFFFFFFFFF5LL && v86 + 10 <= v87)
          {
            char v89 = 0;
            unsigned int v90 = 0;
            uint64_t v91 = 0LL;
            do
            {
              unint64_t v92 = v86 + 1;
              *((void *)this + 1) = v86 + 1;
              char v93 = *(_BYTE *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0) {
                goto LABEL_680;
              }
              v89 += 7;
              unint64_t v86 = v92;
              BOOL v15 = v90++ > 8;
            }

            while (!v15);
LABEL_398:
            uint64_t v91 = 0LL;
            goto LABEL_680;
          }

          char v407 = 0;
          unsigned int v408 = 0;
          uint64_t v91 = 0LL;
          if (v87 <= v86) {
            unint64_t v87 = *((void *)this + 1);
          }
          while (2)
          {
            if (v87 == v86)
            {
              uint64_t v91 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v409 = v86 + 1;
              char v410 = *(_BYTE *)(v88 + v86);
              *((void *)this + 1) = v409;
              v91 |= (unint64_t)(v410 & 0x7F) << v407;
              if (v410 < 0)
              {
                v407 += 7;
                unint64_t v86 = v409;
                BOOL v15 = v408++ > 8;
                if (v15) {
                  goto LABEL_398;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v91 = 0LL;
              }
            }

            break;
          }

LABEL_680:
          *(void *)(a1 + 336) = v91;
          goto LABEL_821;
        case 0x31u:
          *v8 |= 0x80000000000uLL;
          unint64_t v94 = *((void *)this + 1);
          unint64_t v95 = *((void *)this + 2);
          uint64_t v96 = *(void *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5LL && v94 + 10 <= v95)
          {
            char v97 = 0;
            unsigned int v98 = 0;
            uint64_t v99 = 0LL;
            do
            {
              unint64_t v100 = v94 + 1;
              *((void *)this + 1) = v94 + 1;
              char v101 = *(_BYTE *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0) {
                goto LABEL_684;
              }
              v97 += 7;
              unint64_t v94 = v100;
              BOOL v15 = v98++ > 8;
            }

            while (!v15);
LABEL_405:
            uint64_t v99 = 0LL;
            goto LABEL_684;
          }

          char v411 = 0;
          unsigned int v412 = 0;
          uint64_t v99 = 0LL;
          if (v95 <= v94) {
            unint64_t v95 = *((void *)this + 1);
          }
          while (2)
          {
            if (v95 == v94)
            {
              uint64_t v99 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v413 = v94 + 1;
              char v414 = *(_BYTE *)(v96 + v94);
              *((void *)this + 1) = v413;
              v99 |= (unint64_t)(v414 & 0x7F) << v411;
              if (v414 < 0)
              {
                v411 += 7;
                unint64_t v94 = v413;
                BOOL v15 = v412++ > 8;
                if (v15) {
                  goto LABEL_405;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v99 = 0LL;
              }
            }

            break;
          }

LABEL_684:
          *(void *)(a1 + 352) = v99;
          goto LABEL_821;
        case 0x32u:
          *v8 |= 0x100000000000uLL;
          unint64_t v102 = *((void *)this + 1);
          unint64_t v103 = *((void *)this + 2);
          uint64_t v104 = *(void *)this;
          if (v102 <= 0xFFFFFFFFFFFFFFF5LL && v102 + 10 <= v103)
          {
            char v105 = 0;
            unsigned int v106 = 0;
            uint64_t v107 = 0LL;
            do
            {
              unint64_t v108 = v102 + 1;
              *((void *)this + 1) = v102 + 1;
              char v109 = *(_BYTE *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0) {
                goto LABEL_688;
              }
              v105 += 7;
              unint64_t v102 = v108;
              BOOL v15 = v106++ > 8;
            }

            while (!v15);
LABEL_412:
            LODWORD(v107) = 0;
            goto LABEL_688;
          }

          char v415 = 0;
          unsigned int v416 = 0;
          uint64_t v107 = 0LL;
          if (v103 <= v102) {
            unint64_t v103 = *((void *)this + 1);
          }
          while (2)
          {
            if (v103 == v102)
            {
              LODWORD(v107) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v417 = v102 + 1;
              char v418 = *(_BYTE *)(v104 + v102);
              *((void *)this + 1) = v417;
              v107 |= (unint64_t)(v418 & 0x7F) << v415;
              if (v418 < 0)
              {
                v415 += 7;
                unint64_t v102 = v417;
                BOOL v15 = v416++ > 8;
                if (v15) {
                  goto LABEL_412;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v107) = 0;
              }
            }

            break;
          }

LABEL_688:
          *(_DWORD *)(a1 + 360) = v107;
          goto LABEL_821;
        case 0x33u:
          *v8 |= 0x1000000uLL;
          unint64_t v110 = *((void *)this + 1);
          unint64_t v111 = *((void *)this + 2);
          uint64_t v112 = *(void *)this;
          if (v110 <= 0xFFFFFFFFFFFFFFF5LL && v110 + 10 <= v111)
          {
            char v113 = 0;
            unsigned int v114 = 0;
            uint64_t v115 = 0LL;
            do
            {
              unint64_t v116 = v110 + 1;
              *((void *)this + 1) = v110 + 1;
              char v117 = *(_BYTE *)(v112 + v110);
              v115 |= (unint64_t)(v117 & 0x7F) << v113;
              if ((v117 & 0x80) == 0) {
                goto LABEL_692;
              }
              v113 += 7;
              unint64_t v110 = v116;
              BOOL v15 = v114++ > 8;
            }

            while (!v15);
LABEL_419:
            uint64_t v115 = 0LL;
            goto LABEL_692;
          }

          char v419 = 0;
          unsigned int v420 = 0;
          uint64_t v115 = 0LL;
          if (v111 <= v110) {
            unint64_t v111 = *((void *)this + 1);
          }
          while (2)
          {
            if (v111 == v110)
            {
              uint64_t v115 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v421 = v110 + 1;
              char v422 = *(_BYTE *)(v112 + v110);
              *((void *)this + 1) = v421;
              v115 |= (unint64_t)(v422 & 0x7F) << v419;
              if (v422 < 0)
              {
                v419 += 7;
                unint64_t v110 = v421;
                BOOL v15 = v420++ > 8;
                if (v15) {
                  goto LABEL_419;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v115 = 0LL;
              }
            }

            break;
          }

LABEL_692:
          *(void *)(a1 + 200) = v115;
          goto LABEL_821;
        case 0x34u:
          *v8 |= 0x8000000uLL;
          unint64_t v118 = *((void *)this + 1);
          unint64_t v119 = *((void *)this + 2);
          uint64_t v120 = *(void *)this;
          if (v118 <= 0xFFFFFFFFFFFFFFF5LL && v118 + 10 <= v119)
          {
            char v121 = 0;
            unsigned int v122 = 0;
            uint64_t v123 = 0LL;
            do
            {
              unint64_t v124 = v118 + 1;
              *((void *)this + 1) = v118 + 1;
              char v125 = *(_BYTE *)(v120 + v118);
              v123 |= (unint64_t)(v125 & 0x7F) << v121;
              if ((v125 & 0x80) == 0) {
                goto LABEL_696;
              }
              v121 += 7;
              unint64_t v118 = v124;
              BOOL v15 = v122++ > 8;
            }

            while (!v15);
LABEL_426:
            uint64_t v123 = 0LL;
            goto LABEL_696;
          }

          char v423 = 0;
          unsigned int v424 = 0;
          uint64_t v123 = 0LL;
          if (v119 <= v118) {
            unint64_t v119 = *((void *)this + 1);
          }
          while (2)
          {
            if (v119 == v118)
            {
              uint64_t v123 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v425 = v118 + 1;
              char v426 = *(_BYTE *)(v120 + v118);
              *((void *)this + 1) = v425;
              v123 |= (unint64_t)(v426 & 0x7F) << v423;
              if (v426 < 0)
              {
                v423 += 7;
                unint64_t v118 = v425;
                BOOL v15 = v424++ > 8;
                if (v15) {
                  goto LABEL_426;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v123 = 0LL;
              }
            }

            break;
          }

LABEL_696:
          *(void *)(a1 + 224) = v123;
          goto LABEL_821;
        case 0x35u:
          *v8 |= 0x2000000uLL;
          unint64_t v126 = *((void *)this + 1);
          unint64_t v127 = *((void *)this + 2);
          uint64_t v128 = *(void *)this;
          if (v126 <= 0xFFFFFFFFFFFFFFF5LL && v126 + 10 <= v127)
          {
            char v129 = 0;
            unsigned int v130 = 0;
            uint64_t v131 = 0LL;
            do
            {
              unint64_t v132 = v126 + 1;
              *((void *)this + 1) = v126 + 1;
              char v133 = *(_BYTE *)(v128 + v126);
              v131 |= (unint64_t)(v133 & 0x7F) << v129;
              if ((v133 & 0x80) == 0) {
                goto LABEL_700;
              }
              v129 += 7;
              unint64_t v126 = v132;
              BOOL v15 = v130++ > 8;
            }

            while (!v15);
LABEL_433:
            uint64_t v131 = 0LL;
            goto LABEL_700;
          }

          char v427 = 0;
          unsigned int v428 = 0;
          uint64_t v131 = 0LL;
          if (v127 <= v126) {
            unint64_t v127 = *((void *)this + 1);
          }
          while (2)
          {
            if (v127 == v126)
            {
              uint64_t v131 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v429 = v126 + 1;
              char v430 = *(_BYTE *)(v128 + v126);
              *((void *)this + 1) = v429;
              v131 |= (unint64_t)(v430 & 0x7F) << v427;
              if (v430 < 0)
              {
                v427 += 7;
                unint64_t v126 = v429;
                BOOL v15 = v428++ > 8;
                if (v15) {
                  goto LABEL_433;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v131 = 0LL;
              }
            }

            break;
          }

LABEL_704:
          *(void *)(a1 + 216) = v139;
          goto LABEL_821;
        case 0x37u:
          *v8 |= 0x400000uLL;
          unint64_t v142 = *((void *)this + 1);
          unint64_t v143 = *((void *)this + 2);
          uint64_t v144 = *(void *)this;
          if (v142 <= 0xFFFFFFFFFFFFFFF5LL && v142 + 10 <= v143)
          {
            char v145 = 0;
            unsigned int v146 = 0;
            uint64_t v147 = 0LL;
            do
            {
              unint64_t v148 = v142 + 1;
              *((void *)this + 1) = v142 + 1;
              char v149 = *(_BYTE *)(v144 + v142);
              v147 |= (unint64_t)(v149 & 0x7F) << v145;
              if ((v149 & 0x80) == 0) {
                goto LABEL_708;
              }
              v145 += 7;
              unint64_t v142 = v148;
              BOOL v15 = v146++ > 8;
            }

            while (!v15);
LABEL_447:
            uint64_t v147 = 0LL;
            goto LABEL_708;
          }

          char v435 = 0;
          unsigned int v436 = 0;
          uint64_t v147 = 0LL;
          if (v143 <= v142) {
            unint64_t v143 = *((void *)this + 1);
          }
          while (2)
          {
            if (v143 == v142)
            {
              uint64_t v147 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v437 = v142 + 1;
              char v438 = *(_BYTE *)(v144 + v142);
              *((void *)this + 1) = v437;
              v147 |= (unint64_t)(v438 & 0x7F) << v435;
              if (v438 < 0)
              {
                v435 += 7;
                unint64_t v142 = v437;
                BOOL v15 = v436++ > 8;
                if (v15) {
                  goto LABEL_447;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v147 = 0LL;
              }
            }

            break;
          }

LABEL_708:
          *(void *)(a1 + 184) = v147;
          goto LABEL_821;
        case 0x38u:
          *v8 |= 0x800000uLL;
          unint64_t v150 = *((void *)this + 1);
          unint64_t v151 = *((void *)this + 2);
          uint64_t v152 = *(void *)this;
          if (v150 <= 0xFFFFFFFFFFFFFFF5LL && v150 + 10 <= v151)
          {
            char v153 = 0;
            unsigned int v154 = 0;
            uint64_t v155 = 0LL;
            do
            {
              unint64_t v156 = v150 + 1;
              *((void *)this + 1) = v150 + 1;
              char v157 = *(_BYTE *)(v152 + v150);
              v155 |= (unint64_t)(v157 & 0x7F) << v153;
              if ((v157 & 0x80) == 0) {
                goto LABEL_712;
              }
              v153 += 7;
              unint64_t v150 = v156;
              BOOL v15 = v154++ > 8;
            }

            while (!v15);
LABEL_454:
            uint64_t v155 = 0LL;
            goto LABEL_712;
          }

          char v439 = 0;
          unsigned int v440 = 0;
          uint64_t v155 = 0LL;
          if (v151 <= v150) {
            unint64_t v151 = *((void *)this + 1);
          }
          while (2)
          {
            if (v151 == v150)
            {
              uint64_t v155 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v441 = v150 + 1;
              char v442 = *(_BYTE *)(v152 + v150);
              *((void *)this + 1) = v441;
              v155 |= (unint64_t)(v442 & 0x7F) << v439;
              if (v442 < 0)
              {
                v439 += 7;
                unint64_t v150 = v441;
                BOOL v15 = v440++ > 8;
                if (v15) {
                  goto LABEL_454;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v155 = 0LL;
              }
            }

            break;
          }

LABEL_712:
          *(void *)(a1 + 192) = v155;
          goto LABEL_821;
        case 0x3Bu:
          *v8 |= 0x20uLL;
          unint64_t v158 = *((void *)this + 1);
          unint64_t v159 = *((void *)this + 2);
          uint64_t v160 = *(void *)this;
          if (v158 <= 0xFFFFFFFFFFFFFFF5LL && v158 + 10 <= v159)
          {
            char v161 = 0;
            unsigned int v162 = 0;
            uint64_t v163 = 0LL;
            do
            {
              unint64_t v164 = v158 + 1;
              *((void *)this + 1) = v158 + 1;
              char v165 = *(_BYTE *)(v160 + v158);
              v163 |= (unint64_t)(v165 & 0x7F) << v161;
              if ((v165 & 0x80) == 0) {
                goto LABEL_716;
              }
              v161 += 7;
              unint64_t v158 = v164;
              BOOL v15 = v162++ > 8;
            }

            while (!v15);
LABEL_461:
            uint64_t v163 = 0LL;
            goto LABEL_716;
          }

          char v443 = 0;
          unsigned int v444 = 0;
          uint64_t v163 = 0LL;
          if (v159 <= v158) {
            unint64_t v159 = *((void *)this + 1);
          }
          while (2)
          {
            if (v159 == v158)
            {
              uint64_t v163 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v445 = v158 + 1;
              char v446 = *(_BYTE *)(v160 + v158);
              *((void *)this + 1) = v445;
              v163 |= (unint64_t)(v446 & 0x7F) << v443;
              if (v446 < 0)
              {
                v443 += 7;
                unint64_t v158 = v445;
                BOOL v15 = v444++ > 8;
                if (v15) {
                  goto LABEL_461;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v163 = 0LL;
              }
            }

            break;
          }

LABEL_716:
          *(void *)(a1 + 4_Block_object_dispose(va, 8) = v163;
          goto LABEL_821;
        case 0x3Cu:
          *v8 |= 8uLL;
          unint64_t v166 = *((void *)this + 1);
          unint64_t v167 = *((void *)this + 2);
          uint64_t v168 = *(void *)this;
          if (v166 <= 0xFFFFFFFFFFFFFFF5LL && v166 + 10 <= v167)
          {
            char v169 = 0;
            unsigned int v170 = 0;
            uint64_t v171 = 0LL;
            do
            {
              unint64_t v172 = v166 + 1;
              *((void *)this + 1) = v166 + 1;
              char v173 = *(_BYTE *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0) {
                goto LABEL_720;
              }
              v169 += 7;
              unint64_t v166 = v172;
              BOOL v15 = v170++ > 8;
            }

            while (!v15);
LABEL_468:
            uint64_t v171 = 0LL;
            goto LABEL_720;
          }

          char v447 = 0;
          unsigned int v448 = 0;
          uint64_t v171 = 0LL;
          if (v167 <= v166) {
            unint64_t v167 = *((void *)this + 1);
          }
          while (2)
          {
            if (v167 == v166)
            {
              uint64_t v171 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v449 = v166 + 1;
              char v450 = *(_BYTE *)(v168 + v166);
              *((void *)this + 1) = v449;
              v171 |= (unint64_t)(v450 & 0x7F) << v447;
              if (v450 < 0)
              {
                v447 += 7;
                unint64_t v166 = v449;
                BOOL v15 = v448++ > 8;
                if (v15) {
                  goto LABEL_468;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v171 = 0LL;
              }
            }

            break;
          }

LABEL_720:
          *(void *)(a1 + 32) = v171;
          goto LABEL_821;
        case 0x3Du:
          *v8 |= 1uLL;
          unint64_t v174 = *((void *)this + 1);
          unint64_t v175 = *((void *)this + 2);
          uint64_t v176 = *(void *)this;
          if (v174 <= 0xFFFFFFFFFFFFFFF5LL && v174 + 10 <= v175)
          {
            char v177 = 0;
            unsigned int v178 = 0;
            uint64_t v179 = 0LL;
            do
            {
              unint64_t v180 = v174 + 1;
              *((void *)this + 1) = v174 + 1;
              char v181 = *(_BYTE *)(v176 + v174);
              v179 |= (unint64_t)(v181 & 0x7F) << v177;
              if ((v181 & 0x80) == 0) {
                goto LABEL_724;
              }
              v177 += 7;
              unint64_t v174 = v180;
              BOOL v15 = v178++ > 8;
            }

            while (!v15);
LABEL_475:
            uint64_t v179 = 0LL;
            goto LABEL_724;
          }

          char v451 = 0;
          unsigned int v452 = 0;
          uint64_t v179 = 0LL;
          if (v175 <= v174) {
            unint64_t v175 = *((void *)this + 1);
          }
          while (2)
          {
            if (v175 == v174)
            {
              uint64_t v179 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v453 = v174 + 1;
              char v454 = *(_BYTE *)(v176 + v174);
              *((void *)this + 1) = v453;
              v179 |= (unint64_t)(v454 & 0x7F) << v451;
              if (v454 < 0)
              {
                v451 += 7;
                unint64_t v174 = v453;
                BOOL v15 = v452++ > 8;
                if (v15) {
                  goto LABEL_475;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v179 = 0LL;
              }
            }

            break;
          }

LABEL_724:
          *(void *)(a1 + _Block_object_dispose(va, 8) = v179;
          goto LABEL_821;
        case 0x3Eu:
          *v8 |= 0x40uLL;
          unint64_t v182 = *((void *)this + 1);
          unint64_t v183 = *((void *)this + 2);
          uint64_t v184 = *(void *)this;
          if (v182 <= 0xFFFFFFFFFFFFFFF5LL && v182 + 10 <= v183)
          {
            char v185 = 0;
            unsigned int v186 = 0;
            uint64_t v187 = 0LL;
            do
            {
              unint64_t v188 = v182 + 1;
              *((void *)this + 1) = v182 + 1;
              char v189 = *(_BYTE *)(v184 + v182);
              v187 |= (unint64_t)(v189 & 0x7F) << v185;
              if ((v189 & 0x80) == 0) {
                goto LABEL_728;
              }
              v185 += 7;
              unint64_t v182 = v188;
              BOOL v15 = v186++ > 8;
            }

            while (!v15);
LABEL_482:
            uint64_t v187 = 0LL;
            goto LABEL_728;
          }

          char v455 = 0;
          unsigned int v456 = 0;
          uint64_t v187 = 0LL;
          if (v183 <= v182) {
            unint64_t v183 = *((void *)this + 1);
          }
          while (2)
          {
            if (v183 == v182)
            {
              uint64_t v187 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v457 = v182 + 1;
              char v458 = *(_BYTE *)(v184 + v182);
              *((void *)this + 1) = v457;
              v187 |= (unint64_t)(v458 & 0x7F) << v455;
              if (v458 < 0)
              {
                v455 += 7;
                unint64_t v182 = v457;
                BOOL v15 = v456++ > 8;
                if (v15) {
                  goto LABEL_482;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v187 = 0LL;
              }
            }

            break;
          }

LABEL_728:
          *(void *)(a1 + 56) = v187;
          goto LABEL_821;
        case 0x3Fu:
          *v8 |= 0x100uLL;
          unint64_t v190 = *((void *)this + 1);
          unint64_t v191 = *((void *)this + 2);
          uint64_t v192 = *(void *)this;
          if (v190 <= 0xFFFFFFFFFFFFFFF5LL && v190 + 10 <= v191)
          {
            char v193 = 0;
            unsigned int v194 = 0;
            uint64_t v195 = 0LL;
            do
            {
              unint64_t v196 = v190 + 1;
              *((void *)this + 1) = v190 + 1;
              char v197 = *(_BYTE *)(v192 + v190);
              v195 |= (unint64_t)(v197 & 0x7F) << v193;
              if ((v197 & 0x80) == 0) {
                goto LABEL_732;
              }
              v193 += 7;
              unint64_t v190 = v196;
              BOOL v15 = v194++ > 8;
            }

            while (!v15);
LABEL_489:
            uint64_t v195 = 0LL;
            goto LABEL_732;
          }

          char v459 = 0;
          unsigned int v460 = 0;
          uint64_t v195 = 0LL;
          if (v191 <= v190) {
            unint64_t v191 = *((void *)this + 1);
          }
          while (2)
          {
            if (v191 == v190)
            {
              uint64_t v195 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v461 = v190 + 1;
              char v462 = *(_BYTE *)(v192 + v190);
              *((void *)this + 1) = v461;
              v195 |= (unint64_t)(v462 & 0x7F) << v459;
              if (v462 < 0)
              {
                v459 += 7;
                unint64_t v190 = v461;
                BOOL v15 = v460++ > 8;
                if (v15) {
                  goto LABEL_489;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v195 = 0LL;
              }
            }

            break;
          }

LABEL_736:
          *(void *)(a1 + 40) = v203;
          goto LABEL_821;
        case 0x41u:
          *v8 |= 0x200uLL;
          unint64_t v206 = *((void *)this + 1);
          unint64_t v207 = *((void *)this + 2);
          uint64_t v208 = *(void *)this;
          if (v206 <= 0xFFFFFFFFFFFFFFF5LL && v206 + 10 <= v207)
          {
            char v209 = 0;
            unsigned int v210 = 0;
            uint64_t v211 = 0LL;
            do
            {
              unint64_t v212 = v206 + 1;
              *((void *)this + 1) = v206 + 1;
              char v213 = *(_BYTE *)(v208 + v206);
              v211 |= (unint64_t)(v213 & 0x7F) << v209;
              if ((v213 & 0x80) == 0) {
                goto LABEL_740;
              }
              v209 += 7;
              unint64_t v206 = v212;
              BOOL v15 = v210++ > 8;
            }

            while (!v15);
LABEL_503:
            uint64_t v211 = 0LL;
            goto LABEL_740;
          }

          char v467 = 0;
          unsigned int v468 = 0;
          uint64_t v211 = 0LL;
          if (v207 <= v206) {
            unint64_t v207 = *((void *)this + 1);
          }
          while (2)
          {
            if (v207 == v206)
            {
              uint64_t v211 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v469 = v206 + 1;
              char v470 = *(_BYTE *)(v208 + v206);
              *((void *)this + 1) = v469;
              v211 |= (unint64_t)(v470 & 0x7F) << v467;
              if (v470 < 0)
              {
                v467 += 7;
                unint64_t v206 = v469;
                BOOL v15 = v468++ > 8;
                if (v15) {
                  goto LABEL_503;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v211 = 0LL;
              }
            }

            break;
          }

LABEL_740:
          *(void *)(a1 + 80) = v211;
          goto LABEL_821;
        case 0x42u:
          *v8 |= 0x400uLL;
          unint64_t v214 = *((void *)this + 1);
          unint64_t v215 = *((void *)this + 2);
          uint64_t v216 = *(void *)this;
          if (v214 <= 0xFFFFFFFFFFFFFFF5LL && v214 + 10 <= v215)
          {
            char v217 = 0;
            unsigned int v218 = 0;
            uint64_t v219 = 0LL;
            do
            {
              unint64_t v220 = v214 + 1;
              *((void *)this + 1) = v214 + 1;
              char v221 = *(_BYTE *)(v216 + v214);
              v219 |= (unint64_t)(v221 & 0x7F) << v217;
              if ((v221 & 0x80) == 0) {
                goto LABEL_744;
              }
              v217 += 7;
              unint64_t v214 = v220;
              BOOL v15 = v218++ > 8;
            }

            while (!v15);
LABEL_510:
            uint64_t v219 = 0LL;
            goto LABEL_744;
          }

          char v471 = 0;
          unsigned int v472 = 0;
          uint64_t v219 = 0LL;
          if (v215 <= v214) {
            unint64_t v215 = *((void *)this + 1);
          }
          while (2)
          {
            if (v215 == v214)
            {
              uint64_t v219 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v473 = v214 + 1;
              char v474 = *(_BYTE *)(v216 + v214);
              *((void *)this + 1) = v473;
              v219 |= (unint64_t)(v474 & 0x7F) << v471;
              if (v474 < 0)
              {
                v471 += 7;
                unint64_t v214 = v473;
                BOOL v15 = v472++ > 8;
                if (v15) {
                  goto LABEL_510;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v219 = 0LL;
              }
            }

            break;
          }

LABEL_744:
          *(void *)(a1 + 8_Block_object_dispose(va, 8) = v219;
          goto LABEL_821;
        case 0x43u:
          *v8 |= 0x800uLL;
          unint64_t v222 = *((void *)this + 1);
          unint64_t v223 = *((void *)this + 2);
          uint64_t v224 = *(void *)this;
          if (v222 <= 0xFFFFFFFFFFFFFFF5LL && v222 + 10 <= v223)
          {
            char v225 = 0;
            unsigned int v226 = 0;
            uint64_t v227 = 0LL;
            do
            {
              unint64_t v228 = v222 + 1;
              *((void *)this + 1) = v222 + 1;
              char v229 = *(_BYTE *)(v224 + v222);
              v227 |= (unint64_t)(v229 & 0x7F) << v225;
              if ((v229 & 0x80) == 0) {
                goto LABEL_748;
              }
              v225 += 7;
              unint64_t v222 = v228;
              BOOL v15 = v226++ > 8;
            }

            while (!v15);
LABEL_517:
            uint64_t v227 = 0LL;
            goto LABEL_748;
          }

          char v475 = 0;
          unsigned int v476 = 0;
          uint64_t v227 = 0LL;
          if (v223 <= v222) {
            unint64_t v223 = *((void *)this + 1);
          }
          while (2)
          {
            if (v223 == v222)
            {
              uint64_t v227 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v477 = v222 + 1;
              char v478 = *(_BYTE *)(v224 + v222);
              *((void *)this + 1) = v477;
              v227 |= (unint64_t)(v478 & 0x7F) << v475;
              if (v478 < 0)
              {
                v475 += 7;
                unint64_t v222 = v477;
                BOOL v15 = v476++ > 8;
                if (v15) {
                  goto LABEL_517;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v227 = 0LL;
              }
            }

            break;
          }

LABEL_748:
          *(void *)(a1 + 96) = v227;
          goto LABEL_821;
        case 0x44u:
          *v8 |= 0x4000uLL;
          unint64_t v230 = *((void *)this + 1);
          unint64_t v231 = *((void *)this + 2);
          uint64_t v232 = *(void *)this;
          if (v230 <= 0xFFFFFFFFFFFFFFF5LL && v230 + 10 <= v231)
          {
            char v233 = 0;
            unsigned int v234 = 0;
            uint64_t v235 = 0LL;
            do
            {
              unint64_t v236 = v230 + 1;
              *((void *)this + 1) = v230 + 1;
              char v237 = *(_BYTE *)(v232 + v230);
              v235 |= (unint64_t)(v237 & 0x7F) << v233;
              if ((v237 & 0x80) == 0) {
                goto LABEL_752;
              }
              v233 += 7;
              unint64_t v230 = v236;
              BOOL v15 = v234++ > 8;
            }

            while (!v15);
LABEL_524:
            uint64_t v235 = 0LL;
            goto LABEL_752;
          }

          char v479 = 0;
          unsigned int v480 = 0;
          uint64_t v235 = 0LL;
          if (v231 <= v230) {
            unint64_t v231 = *((void *)this + 1);
          }
          while (2)
          {
            if (v231 == v230)
            {
              uint64_t v235 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v481 = v230 + 1;
              char v482 = *(_BYTE *)(v232 + v230);
              *((void *)this + 1) = v481;
              v235 |= (unint64_t)(v482 & 0x7F) << v479;
              if (v482 < 0)
              {
                v479 += 7;
                unint64_t v230 = v481;
                BOOL v15 = v480++ > 8;
                if (v15) {
                  goto LABEL_524;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v235 = 0LL;
              }
            }

            break;
          }

LABEL_752:
          *(void *)(a1 + 120) = v235;
          goto LABEL_821;
        case 0x45u:
          *v8 |= 2uLL;
          unint64_t v238 = *((void *)this + 1);
          unint64_t v239 = *((void *)this + 2);
          uint64_t v240 = *(void *)this;
          if (v238 <= 0xFFFFFFFFFFFFFFF5LL && v238 + 10 <= v239)
          {
            char v241 = 0;
            unsigned int v242 = 0;
            uint64_t v243 = 0LL;
            do
            {
              unint64_t v244 = v238 + 1;
              *((void *)this + 1) = v238 + 1;
              char v245 = *(_BYTE *)(v240 + v238);
              v243 |= (unint64_t)(v245 & 0x7F) << v241;
              if ((v245 & 0x80) == 0) {
                goto LABEL_756;
              }
              v241 += 7;
              unint64_t v238 = v244;
              BOOL v15 = v242++ > 8;
            }

            while (!v15);
LABEL_531:
            uint64_t v243 = 0LL;
            goto LABEL_756;
          }

          char v483 = 0;
          unsigned int v484 = 0;
          uint64_t v243 = 0LL;
          if (v239 <= v238) {
            unint64_t v239 = *((void *)this + 1);
          }
          while (2)
          {
            if (v239 == v238)
            {
              uint64_t v243 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v485 = v238 + 1;
              char v486 = *(_BYTE *)(v240 + v238);
              *((void *)this + 1) = v485;
              v243 |= (unint64_t)(v486 & 0x7F) << v483;
              if (v486 < 0)
              {
                v483 += 7;
                unint64_t v238 = v485;
                BOOL v15 = v484++ > 8;
                if (v15) {
                  goto LABEL_531;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v243 = 0LL;
              }
            }

            break;
          }

LABEL_756:
          *(void *)(a1 + 16) = v243;
          goto LABEL_821;
        case 0x46u:
          *v8 |= 0x8000uLL;
          unint64_t v246 = *((void *)this + 1);
          unint64_t v247 = *((void *)this + 2);
          uint64_t v248 = *(void *)this;
          if (v246 <= 0xFFFFFFFFFFFFFFF5LL && v246 + 10 <= v247)
          {
            char v249 = 0;
            unsigned int v250 = 0;
            uint64_t v251 = 0LL;
            do
            {
              unint64_t v252 = v246 + 1;
              *((void *)this + 1) = v246 + 1;
              char v253 = *(_BYTE *)(v248 + v246);
              v251 |= (unint64_t)(v253 & 0x7F) << v249;
              if ((v253 & 0x80) == 0) {
                goto LABEL_760;
              }
              v249 += 7;
              unint64_t v246 = v252;
              BOOL v15 = v250++ > 8;
            }

            while (!v15);
LABEL_538:
            uint64_t v251 = 0LL;
            goto LABEL_760;
          }

          char v487 = 0;
          unsigned int v488 = 0;
          uint64_t v251 = 0LL;
          if (v247 <= v246) {
            unint64_t v247 = *((void *)this + 1);
          }
          while (2)
          {
            if (v247 == v246)
            {
              uint64_t v251 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v489 = v246 + 1;
              char v490 = *(_BYTE *)(v248 + v246);
              *((void *)this + 1) = v489;
              v251 |= (unint64_t)(v490 & 0x7F) << v487;
              if (v490 < 0)
              {
                v487 += 7;
                unint64_t v246 = v489;
                BOOL v15 = v488++ > 8;
                if (v15) {
                  goto LABEL_538;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v251 = 0LL;
              }
            }

            break;
          }

LABEL_760:
          *(void *)(a1 + 12_Block_object_dispose(va, 8) = v251;
          goto LABEL_821;
        case 0x47u:
          *v8 |= 0x800000000uLL;
          unint64_t v254 = *((void *)this + 1);
          unint64_t v255 = *((void *)this + 2);
          uint64_t v256 = *(void *)this;
          if (v254 <= 0xFFFFFFFFFFFFFFF5LL && v254 + 10 <= v255)
          {
            char v257 = 0;
            unsigned int v258 = 0;
            uint64_t v259 = 0LL;
            do
            {
              unint64_t v260 = v254 + 1;
              *((void *)this + 1) = v254 + 1;
              char v261 = *(_BYTE *)(v256 + v254);
              v259 |= (unint64_t)(v261 & 0x7F) << v257;
              if ((v261 & 0x80) == 0) {
                goto LABEL_764;
              }
              v257 += 7;
              unint64_t v254 = v260;
              BOOL v15 = v258++ > 8;
            }

            while (!v15);
LABEL_545:
            uint64_t v259 = 0LL;
            goto LABEL_764;
          }

          char v491 = 0;
          unsigned int v492 = 0;
          uint64_t v259 = 0LL;
          if (v255 <= v254) {
            unint64_t v255 = *((void *)this + 1);
          }
          while (2)
          {
            if (v255 == v254)
            {
              uint64_t v259 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v493 = v254 + 1;
              char v494 = *(_BYTE *)(v256 + v254);
              *((void *)this + 1) = v493;
              v259 |= (unint64_t)(v494 & 0x7F) << v491;
              if (v494 < 0)
              {
                v491 += 7;
                unint64_t v254 = v493;
                BOOL v15 = v492++ > 8;
                if (v15) {
                  goto LABEL_545;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v259 = 0LL;
              }
            }

            break;
          }

LABEL_764:
          *(void *)(a1 + 28_Block_object_dispose(va, 8) = v259;
          goto LABEL_821;
        case 0x48u:
          *v8 |= 0x400000000uLL;
          unint64_t v262 = *((void *)this + 1);
          unint64_t v263 = *((void *)this + 2);
          uint64_t v264 = *(void *)this;
          if (v262 <= 0xFFFFFFFFFFFFFFF5LL && v262 + 10 <= v263)
          {
            char v265 = 0;
            unsigned int v266 = 0;
            uint64_t v267 = 0LL;
            do
            {
              unint64_t v268 = v262 + 1;
              *((void *)this + 1) = v262 + 1;
              char v269 = *(_BYTE *)(v264 + v262);
              v267 |= (unint64_t)(v269 & 0x7F) << v265;
              if ((v269 & 0x80) == 0) {
                goto LABEL_768;
              }
              v265 += 7;
              unint64_t v262 = v268;
              BOOL v15 = v266++ > 8;
            }

            while (!v15);
LABEL_552:
            uint64_t v267 = 0LL;
            goto LABEL_768;
          }

          char v495 = 0;
          unsigned int v496 = 0;
          uint64_t v267 = 0LL;
          if (v263 <= v262) {
            unint64_t v263 = *((void *)this + 1);
          }
          while (2)
          {
            if (v263 == v262)
            {
              uint64_t v267 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v497 = v262 + 1;
              char v498 = *(_BYTE *)(v264 + v262);
              *((void *)this + 1) = v497;
              v267 |= (unint64_t)(v498 & 0x7F) << v495;
              if (v498 < 0)
              {
                v495 += 7;
                unint64_t v262 = v497;
                BOOL v15 = v496++ > 8;
                if (v15) {
                  goto LABEL_552;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v267 = 0LL;
              }
            }

            break;
          }

LABEL_768:
          *(void *)(a1 + 280) = v267;
          goto LABEL_821;
        case 0x49u:
          *v8 |= 0x200000000uLL;
          unint64_t v270 = *((void *)this + 1);
          unint64_t v271 = *((void *)this + 2);
          uint64_t v272 = *(void *)this;
          if (v270 <= 0xFFFFFFFFFFFFFFF5LL && v270 + 10 <= v271)
          {
            char v273 = 0;
            unsigned int v274 = 0;
            uint64_t v275 = 0LL;
            do
            {
              unint64_t v276 = v270 + 1;
              *((void *)this + 1) = v270 + 1;
              char v277 = *(_BYTE *)(v272 + v270);
              v275 |= (unint64_t)(v277 & 0x7F) << v273;
              if ((v277 & 0x80) == 0) {
                goto LABEL_772;
              }
              v273 += 7;
              unint64_t v270 = v276;
              BOOL v15 = v274++ > 8;
            }

            while (!v15);
LABEL_559:
            uint64_t v275 = 0LL;
            goto LABEL_772;
          }

          char v499 = 0;
          unsigned int v500 = 0;
          uint64_t v275 = 0LL;
          if (v271 <= v270) {
            unint64_t v271 = *((void *)this + 1);
          }
          while (2)
          {
            if (v271 == v270)
            {
              uint64_t v275 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v501 = v270 + 1;
              char v502 = *(_BYTE *)(v272 + v270);
              *((void *)this + 1) = v501;
              v275 |= (unint64_t)(v502 & 0x7F) << v499;
              if (v502 < 0)
              {
                v499 += 7;
                unint64_t v270 = v501;
                BOOL v15 = v500++ > 8;
                if (v15) {
                  goto LABEL_559;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v275 = 0LL;
              }
            }

            break;
          }

LABEL_772:
          *(void *)(a1 + 272) = v275;
          goto LABEL_821;
        case 0x4Au:
          *v8 |= (unint64_t)&_mh_execute_header;
          unint64_t v278 = *((void *)this + 1);
          unint64_t v279 = *((void *)this + 2);
          uint64_t v280 = *(void *)this;
          if (v278 <= 0xFFFFFFFFFFFFFFF5LL && v278 + 10 <= v279)
          {
            char v281 = 0;
            unsigned int v282 = 0;
            uint64_t v283 = 0LL;
            do
            {
              unint64_t v284 = v278 + 1;
              *((void *)this + 1) = v278 + 1;
              char v285 = *(_BYTE *)(v280 + v278);
              v283 |= (unint64_t)(v285 & 0x7F) << v281;
              if ((v285 & 0x80) == 0) {
                goto LABEL_776;
              }
              v281 += 7;
              unint64_t v278 = v284;
              BOOL v15 = v282++ > 8;
            }

            while (!v15);
LABEL_566:
            uint64_t v283 = 0LL;
            goto LABEL_776;
          }

          char v503 = 0;
          unsigned int v504 = 0;
          uint64_t v283 = 0LL;
          if (v279 <= v278) {
            unint64_t v279 = *((void *)this + 1);
          }
          while (2)
          {
            if (v279 == v278)
            {
              uint64_t v283 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v505 = v278 + 1;
              char v506 = *(_BYTE *)(v280 + v278);
              *((void *)this + 1) = v505;
              v283 |= (unint64_t)(v506 & 0x7F) << v503;
              if (v506 < 0)
              {
                v503 += 7;
                unint64_t v278 = v505;
                BOOL v15 = v504++ > 8;
                if (v15) {
                  goto LABEL_566;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v283 = 0LL;
              }
            }

            break;
          }

LABEL_776:
          *(void *)(a1 + 264) = v283;
          goto LABEL_821;
        case 0x51u:
          *v8 |= 0x20000000uLL;
          unint64_t v286 = *((void *)this + 1);
          unint64_t v287 = *((void *)this + 2);
          uint64_t v288 = *(void *)this;
          if (v286 <= 0xFFFFFFFFFFFFFFF5LL && v286 + 10 <= v287)
          {
            char v289 = 0;
            unsigned int v290 = 0;
            uint64_t v291 = 0LL;
            do
            {
              unint64_t v292 = v286 + 1;
              *((void *)this + 1) = v286 + 1;
              char v293 = *(_BYTE *)(v288 + v286);
              v291 |= (unint64_t)(v293 & 0x7F) << v289;
              if ((v293 & 0x80) == 0) {
                goto LABEL_780;
              }
              v289 += 7;
              unint64_t v286 = v292;
              BOOL v15 = v290++ > 8;
            }

            while (!v15);
LABEL_573:
            uint64_t v291 = 0LL;
            goto LABEL_780;
          }

          char v507 = 0;
          unsigned int v508 = 0;
          uint64_t v291 = 0LL;
          if (v287 <= v286) {
            unint64_t v287 = *((void *)this + 1);
          }
          while (2)
          {
            if (v287 == v286)
            {
              uint64_t v291 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v509 = v286 + 1;
              char v510 = *(_BYTE *)(v288 + v286);
              *((void *)this + 1) = v509;
              v291 |= (unint64_t)(v510 & 0x7F) << v507;
              if (v510 < 0)
              {
                v507 += 7;
                unint64_t v286 = v509;
                BOOL v15 = v508++ > 8;
                if (v15) {
                  goto LABEL_573;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v291 = 0LL;
              }
            }

            break;
          }

LABEL_780:
          *(void *)(a1 + 240) = v291;
          goto LABEL_821;
        case 0x52u:
          *v8 |= 0x10000000uLL;
          unint64_t v294 = *((void *)this + 1);
          unint64_t v295 = *((void *)this + 2);
          uint64_t v296 = *(void *)this;
          if (v294 <= 0xFFFFFFFFFFFFFFF5LL && v294 + 10 <= v295)
          {
            char v297 = 0;
            unsigned int v298 = 0;
            uint64_t v299 = 0LL;
            do
            {
              unint64_t v300 = v294 + 1;
              *((void *)this + 1) = v294 + 1;
              char v301 = *(_BYTE *)(v296 + v294);
              v299 |= (unint64_t)(v301 & 0x7F) << v297;
              if ((v301 & 0x80) == 0) {
                goto LABEL_784;
              }
              v297 += 7;
              unint64_t v294 = v300;
              BOOL v15 = v298++ > 8;
            }

            while (!v15);
LABEL_580:
            uint64_t v299 = 0LL;
            goto LABEL_784;
          }

          char v511 = 0;
          unsigned int v512 = 0;
          uint64_t v299 = 0LL;
          if (v295 <= v294) {
            unint64_t v295 = *((void *)this + 1);
          }
          while (2)
          {
            if (v295 == v294)
            {
              uint64_t v299 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v513 = v294 + 1;
              char v514 = *(_BYTE *)(v296 + v294);
              *((void *)this + 1) = v513;
              v299 |= (unint64_t)(v514 & 0x7F) << v511;
              if (v514 < 0)
              {
                v511 += 7;
                unint64_t v294 = v513;
                BOOL v15 = v512++ > 8;
                if (v15) {
                  goto LABEL_580;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v299 = 0LL;
              }
            }

            break;
          }

LABEL_784:
          *(void *)(a1 + 232) = v299;
          goto LABEL_821;
        case 0x53u:
          *v8 |= 0x2000uLL;
          unint64_t v302 = *((void *)this + 1);
          unint64_t v303 = *((void *)this + 2);
          uint64_t v304 = *(void *)this;
          if (v302 <= 0xFFFFFFFFFFFFFFF5LL && v302 + 10 <= v303)
          {
            char v305 = 0;
            unsigned int v306 = 0;
            uint64_t v307 = 0LL;
            do
            {
              unint64_t v308 = v302 + 1;
              *((void *)this + 1) = v302 + 1;
              char v309 = *(_BYTE *)(v304 + v302);
              v307 |= (unint64_t)(v309 & 0x7F) << v305;
              if ((v309 & 0x80) == 0) {
                goto LABEL_788;
              }
              v305 += 7;
              unint64_t v302 = v308;
              BOOL v15 = v306++ > 8;
            }

            while (!v15);
LABEL_587:
            uint64_t v307 = 0LL;
            goto LABEL_788;
          }

          char v515 = 0;
          unsigned int v516 = 0;
          uint64_t v307 = 0LL;
          if (v303 <= v302) {
            unint64_t v303 = *((void *)this + 1);
          }
          while (2)
          {
            if (v303 == v302)
            {
              uint64_t v307 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v517 = v302 + 1;
              char v518 = *(_BYTE *)(v304 + v302);
              *((void *)this + 1) = v517;
              v307 |= (unint64_t)(v518 & 0x7F) << v515;
              if (v518 < 0)
              {
                v515 += 7;
                unint64_t v302 = v517;
                BOOL v15 = v516++ > 8;
                if (v15) {
                  goto LABEL_587;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v307 = 0LL;
              }
            }

            break;
          }

LABEL_788:
          *(void *)(a1 + 112) = v307;
          goto LABEL_821;
        case 0x54u:
          *v8 |= 0x10000uLL;
          unint64_t v310 = *((void *)this + 1);
          unint64_t v311 = *((void *)this + 2);
          uint64_t v312 = *(void *)this;
          if (v310 <= 0xFFFFFFFFFFFFFFF5LL && v310 + 10 <= v311)
          {
            char v313 = 0;
            unsigned int v314 = 0;
            uint64_t v315 = 0LL;
            do
            {
              unint64_t v316 = v310 + 1;
              *((void *)this + 1) = v310 + 1;
              char v317 = *(_BYTE *)(v312 + v310);
              v315 |= (unint64_t)(v317 & 0x7F) << v313;
              if ((v317 & 0x80) == 0) {
                goto LABEL_792;
              }
              v313 += 7;
              unint64_t v310 = v316;
              BOOL v15 = v314++ > 8;
            }

            while (!v15);
LABEL_594:
            uint64_t v315 = 0LL;
            goto LABEL_792;
          }

          char v519 = 0;
          unsigned int v520 = 0;
          uint64_t v315 = 0LL;
          if (v311 <= v310) {
            unint64_t v311 = *((void *)this + 1);
          }
          while (2)
          {
            if (v311 == v310)
            {
              uint64_t v315 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v521 = v310 + 1;
              char v522 = *(_BYTE *)(v312 + v310);
              *((void *)this + 1) = v521;
              v315 |= (unint64_t)(v522 & 0x7F) << v519;
              if (v522 < 0)
              {
                v519 += 7;
                unint64_t v310 = v521;
                BOOL v15 = v520++ > 8;
                if (v15) {
                  goto LABEL_594;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v315 = 0LL;
              }
            }

            break;
          }

LABEL_792:
          *(void *)(a1 + 136) = v315;
          goto LABEL_821;
        case 0x55u:
          *v8 |= 4uLL;
          unint64_t v318 = *((void *)this + 1);
          unint64_t v319 = *((void *)this + 2);
          uint64_t v320 = *(void *)this;
          if (v318 <= 0xFFFFFFFFFFFFFFF5LL && v318 + 10 <= v319)
          {
            char v321 = 0;
            unsigned int v322 = 0;
            uint64_t v323 = 0LL;
            do
            {
              unint64_t v324 = v318 + 1;
              *((void *)this + 1) = v318 + 1;
              char v325 = *(_BYTE *)(v320 + v318);
              v323 |= (unint64_t)(v325 & 0x7F) << v321;
              if ((v325 & 0x80) == 0) {
                goto LABEL_796;
              }
              v321 += 7;
              unint64_t v318 = v324;
              BOOL v15 = v322++ > 8;
            }

            while (!v15);
LABEL_601:
            uint64_t v323 = 0LL;
            goto LABEL_796;
          }

          char v523 = 0;
          unsigned int v524 = 0;
          uint64_t v323 = 0LL;
          if (v319 <= v318) {
            unint64_t v319 = *((void *)this + 1);
          }
          while (2)
          {
            if (v319 == v318)
            {
              uint64_t v323 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v525 = v318 + 1;
              char v526 = *(_BYTE *)(v320 + v318);
              *((void *)this + 1) = v525;
              v323 |= (unint64_t)(v526 & 0x7F) << v523;
              if (v526 < 0)
              {
                v523 += 7;
                unint64_t v318 = v525;
                BOOL v15 = v524++ > 8;
                if (v15) {
                  goto LABEL_601;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v323 = 0LL;
              }
            }

            break;
          }

LABEL_796:
          *(void *)(a1 + 24) = v323;
          goto LABEL_821;
        case 0x56u:
          *v8 |= 0x40000uLL;
          unint64_t v326 = *((void *)this + 1);
          unint64_t v327 = *((void *)this + 2);
          uint64_t v328 = *(void *)this;
          if (v326 <= 0xFFFFFFFFFFFFFFF5LL && v326 + 10 <= v327)
          {
            char v329 = 0;
            unsigned int v330 = 0;
            uint64_t v331 = 0LL;
            do
            {
              unint64_t v332 = v326 + 1;
              *((void *)this + 1) = v326 + 1;
              char v333 = *(_BYTE *)(v328 + v326);
              v331 |= (unint64_t)(v333 & 0x7F) << v329;
              if ((v333 & 0x80) == 0) {
                goto LABEL_800;
              }
              v329 += 7;
              unint64_t v326 = v332;
              BOOL v15 = v330++ > 8;
            }

            while (!v15);
LABEL_608:
            uint64_t v331 = 0LL;
            goto LABEL_800;
          }

          char v527 = 0;
          unsigned int v528 = 0;
          uint64_t v331 = 0LL;
          if (v327 <= v326) {
            unint64_t v327 = *((void *)this + 1);
          }
          while (2)
          {
            if (v327 == v326)
            {
              uint64_t v331 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v529 = v326 + 1;
              char v530 = *(_BYTE *)(v328 + v326);
              *((void *)this + 1) = v529;
              v331 |= (unint64_t)(v530 & 0x7F) << v527;
              if (v530 < 0)
              {
                v527 += 7;
                unint64_t v326 = v529;
                BOOL v15 = v528++ > 8;
                if (v15) {
                  goto LABEL_608;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v331 = 0LL;
              }
            }

            break;
          }

LABEL_800:
          *(void *)(a1 + 152) = v331;
          goto LABEL_821;
        case 0x57u:
          *v8 |= 0x20000uLL;
          unint64_t v334 = *((void *)this + 1);
          unint64_t v335 = *((void *)this + 2);
          uint64_t v336 = *(void *)this;
          if (v334 <= 0xFFFFFFFFFFFFFFF5LL && v334 + 10 <= v335)
          {
            char v337 = 0;
            unsigned int v338 = 0;
            uint64_t v339 = 0LL;
            do
            {
              unint64_t v340 = v334 + 1;
              *((void *)this + 1) = v334 + 1;
              char v341 = *(_BYTE *)(v336 + v334);
              v339 |= (unint64_t)(v341 & 0x7F) << v337;
              if ((v341 & 0x80) == 0) {
                goto LABEL_804;
              }
              v337 += 7;
              unint64_t v334 = v340;
              BOOL v15 = v338++ > 8;
            }

            while (!v15);
LABEL_615:
            uint64_t v339 = 0LL;
            goto LABEL_804;
          }

          char v531 = 0;
          unsigned int v532 = 0;
          uint64_t v339 = 0LL;
          if (v335 <= v334) {
            unint64_t v335 = *((void *)this + 1);
          }
          while (2)
          {
            if (v335 == v334)
            {
              uint64_t v339 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v533 = v334 + 1;
              char v534 = *(_BYTE *)(v336 + v334);
              *((void *)this + 1) = v533;
              v339 |= (unint64_t)(v534 & 0x7F) << v531;
              if (v534 < 0)
              {
                v531 += 7;
                unint64_t v334 = v533;
                BOOL v15 = v532++ > 8;
                if (v15) {
                  goto LABEL_615;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v339 = 0LL;
              }
            }

            break;
          }

LABEL_804:
          *(void *)(a1 + 144) = v339;
          goto LABEL_821;
        case 0x58u:
          *v8 |= 0x80uLL;
          unint64_t v342 = *((void *)this + 1);
          unint64_t v343 = *((void *)this + 2);
          uint64_t v344 = *(void *)this;
          if (v342 <= 0xFFFFFFFFFFFFFFF5LL && v342 + 10 <= v343)
          {
            char v345 = 0;
            unsigned int v346 = 0;
            uint64_t v347 = 0LL;
            do
            {
              unint64_t v348 = v342 + 1;
              *((void *)this + 1) = v342 + 1;
              char v349 = *(_BYTE *)(v344 + v342);
              v347 |= (unint64_t)(v349 & 0x7F) << v345;
              if ((v349 & 0x80) == 0) {
                goto LABEL_808;
              }
              v345 += 7;
              unint64_t v342 = v348;
              BOOL v15 = v346++ > 8;
            }

            while (!v15);
LABEL_622:
            uint64_t v347 = 0LL;
            goto LABEL_808;
          }

          char v535 = 0;
          unsigned int v536 = 0;
          uint64_t v347 = 0LL;
          if (v343 <= v342) {
            unint64_t v343 = *((void *)this + 1);
          }
          while (2)
          {
            if (v343 == v342)
            {
              uint64_t v347 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v537 = v342 + 1;
              char v538 = *(_BYTE *)(v344 + v342);
              *((void *)this + 1) = v537;
              v347 |= (unint64_t)(v538 & 0x7F) << v535;
              if (v538 < 0)
              {
                v535 += 7;
                unint64_t v342 = v537;
                BOOL v15 = v536++ > 8;
                if (v15) {
                  goto LABEL_622;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v347 = 0LL;
              }
            }

            break;
          }

LABEL_808:
          *(void *)(a1 + 64) = v347;
          goto LABEL_821;
        case 0x59u:
          *v8 |= 0x1000uLL;
          unint64_t v350 = *((void *)this + 1);
          unint64_t v351 = *((void *)this + 2);
          uint64_t v352 = *(void *)this;
          if (v350 <= 0xFFFFFFFFFFFFFFF5LL && v350 + 10 <= v351)
          {
            char v353 = 0;
            unsigned int v354 = 0;
            uint64_t v355 = 0LL;
            do
            {
              unint64_t v356 = v350 + 1;
              *((void *)this + 1) = v350 + 1;
              char v357 = *(_BYTE *)(v352 + v350);
              v355 |= (unint64_t)(v357 & 0x7F) << v353;
              if ((v357 & 0x80) == 0) {
                goto LABEL_812;
              }
              v353 += 7;
              unint64_t v350 = v356;
              BOOL v15 = v354++ > 8;
            }

            while (!v15);
LABEL_629:
            uint64_t v355 = 0LL;
            goto LABEL_812;
          }

          char v539 = 0;
          unsigned int v540 = 0;
          uint64_t v355 = 0LL;
          if (v351 <= v350) {
            unint64_t v351 = *((void *)this + 1);
          }
          while (2)
          {
            if (v351 == v350)
            {
              uint64_t v355 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v541 = v350 + 1;
              char v542 = *(_BYTE *)(v352 + v350);
              *((void *)this + 1) = v541;
              v355 |= (unint64_t)(v542 & 0x7F) << v539;
              if (v542 < 0)
              {
                v539 += 7;
                unint64_t v350 = v541;
                BOOL v15 = v540++ > 8;
                if (v15) {
                  goto LABEL_629;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v355 = 0LL;
              }
            }

            break;
          }

LABEL_812:
          *(void *)(a1 + 104) = v355;
          goto LABEL_821;
        case 0x64u:
          *v8 |= 0x4000000000uLL;
          unint64_t v358 = *((void *)this + 1);
          unint64_t v359 = *((void *)this + 2);
          uint64_t v360 = *(void *)this;
          if (v358 <= 0xFFFFFFFFFFFFFFF5LL && v358 + 10 <= v359)
          {
            char v361 = 0;
            unsigned int v362 = 0;
            uint64_t v363 = 0LL;
            do
            {
              unint64_t v364 = v358 + 1;
              *((void *)this + 1) = v358 + 1;
              char v365 = *(_BYTE *)(v360 + v358);
              v363 |= (unint64_t)(v365 & 0x7F) << v361;
              if ((v365 & 0x80) == 0) {
                goto LABEL_816;
              }
              v361 += 7;
              unint64_t v358 = v364;
              BOOL v15 = v362++ > 8;
            }

            while (!v15);
LABEL_636:
            uint64_t v363 = 0LL;
            goto LABEL_816;
          }

          char v543 = 0;
          unsigned int v544 = 0;
          uint64_t v363 = 0LL;
          if (v359 <= v358) {
            unint64_t v359 = *((void *)this + 1);
          }
          while (2)
          {
            if (v359 == v358)
            {
              uint64_t v363 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v545 = v358 + 1;
              char v546 = *(_BYTE *)(v360 + v358);
              *((void *)this + 1) = v545;
              v363 |= (unint64_t)(v546 & 0x7F) << v543;
              if (v546 < 0)
              {
                v543 += 7;
                unint64_t v358 = v545;
                BOOL v15 = v544++ > 8;
                if (v15) {
                  goto LABEL_636;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v363 = 0LL;
              }
            }

            break;
          }

LABEL_816:
          *(void *)(a1 + 312) = v363;
          goto LABEL_821;
        case 0x65u:
          *v8 |= 0x1000000000uLL;
          unint64_t v366 = *((void *)this + 1);
          unint64_t v367 = *((void *)this + 2);
          uint64_t v368 = *(void *)this;
          if (v366 <= 0xFFFFFFFFFFFFFFF5LL && v366 + 10 <= v367)
          {
            char v369 = 0;
            unsigned int v370 = 0;
            uint64_t v371 = 0LL;
            do
            {
              unint64_t v372 = v366 + 1;
              *((void *)this + 1) = v366 + 1;
              char v373 = *(_BYTE *)(v368 + v366);
              v371 |= (unint64_t)(v373 & 0x7F) << v369;
              if ((v373 & 0x80) == 0) {
                goto LABEL_820;
              }
              v369 += 7;
              unint64_t v366 = v372;
              BOOL v15 = v370++ > 8;
            }

            while (!v15);
LABEL_643:
            uint64_t v371 = 0LL;
            goto LABEL_820;
          }

          char v547 = 0;
          unsigned int v548 = 0;
          uint64_t v371 = 0LL;
          if (v367 <= v366) {
            unint64_t v367 = *((void *)this + 1);
          }
          break;
        case 0x66u:
          *v8 |= 0x2000000000uLL;
          unint64_t v374 = *((void *)this + 1);
          if (v374 <= 0xFFFFFFFFFFFFFFF7LL && v374 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 304) = *(void *)(*(void *)this + v374);
            *((void *)this + 1) += 8LL;
          }

          else
          {
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_821;
        default:
          uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_821;
      }

      while (1)
      {
        if (v367 == v366)
        {
          uint64_t v371 = 0LL;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_820;
        }

        unint64_t v549 = v366 + 1;
        char v550 = *(_BYTE *)(v368 + v366);
        *((void *)this + 1) = v549;
        v371 |= (unint64_t)(v550 & 0x7F) << v547;
        if ((v550 & 0x80) == 0) {
          break;
        }
        v547 += 7;
        unint64_t v366 = v549;
        BOOL v15 = v548++ > 8;
        if (v15) {
          goto LABEL_643;
        }
      }

      if (*((_BYTE *)this + 24)) {
        uint64_t v371 = 0LL;
      }
LABEL_820:
      *(void *)(a1 + 296) = v371;
LABEL_821:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v12 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

uint64_t sub_10107992C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = (uint64_t *)(result + 364);
  uint64_t v5 = *(void *)(result + 364);
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 248), 1u);
    uint64_t v5 = *v4;
    if ((*v4 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }

  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 256), 2u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_50;
  }

void *sub_101079E4C(void *result)
{
  const char *result = &off_1018987D0;
  *(void *)((char *)result + 156) = 0LL;
  return result;
}

void sub_101079E64(PB::Base *a1)
{
}

double sub_101079E78(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018987D0;
  *(void *)(a1 + 156) = 0LL;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    uint64_t v3 = 4LL;
    *(void *)(a1 + 156) = 4LL;
    *(double *)(a1 + 24) = result;
    uint64_t v2 = *(void *)(a2 + 156);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 32);
    v3 |= 8uLL;
    *(void *)(a1 + 156) = v3;
    *(void *)(a1 + 32) = v5;
    uint64_t v2 = *(void *)(a2 + 156);
  }

uint64_t sub_10107A284(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "conisderedSOS", *(_DWORD *)(a1 + 40));
    uint64_t v5 = *(void *)(a1 + 156);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x100000000LL) == 0) {
        goto LABEL_4;
      }
      goto LABEL_41;
    }
  }

  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "deltaSteps", *(_DWORD *)(a1 + 44));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100000000LL) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_42;
  }

uint64_t sub_10107A734(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

LABEL_368:
          *(void *)(a1 + 32) = v27;
          goto LABEL_210;
        case 3u:
          *(void *)(a1 + 156) |= 2uLL;
          unint64_t v30 = *((void *)this + 1);
          unint64_t v31 = *((void *)this + 2);
          uint64_t v32 = *(void *)this;
          if (v30 <= 0xFFFFFFFFFFFFFFF5LL && v30 + 10 <= v31)
          {
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0LL;
            do
            {
              unint64_t v36 = v30 + 1;
              *((void *)this + 1) = v30 + 1;
              char v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0) {
                goto LABEL_372;
              }
              v33 += 7;
              unint64_t v30 = v36;
              BOOL v14 = v34++ > 8;
            }

            while (!v14);
LABEL_228:
            uint64_t v35 = 0LL;
            goto LABEL_372;
          }

          char v215 = 0;
          unsigned int v216 = 0;
          uint64_t v35 = 0LL;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)this + 1);
          }
          while (2)
          {
            if (v31 == v30)
            {
              uint64_t v35 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v217 = v30 + 1;
              char v218 = *(_BYTE *)(v32 + v30);
              *((void *)this + 1) = v217;
              v35 |= (unint64_t)(v218 & 0x7F) << v215;
              if (v218 < 0)
              {
                v215 += 7;
                unint64_t v30 = v217;
                BOOL v14 = v216++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v35 = 0LL;
              }
            }

            break;
          }

            *(void *)(a1 + 12_Block_object_dispose(va, 8) = v41;
            goto LABEL_460;
          case 202:
            *(_WORD *)(a1 + 204) |= 2u;
            uint64_t v73 = *((void *)this + 1);
            unint64_t v74 = *((void *)this + 2);
            char v75 = *(void *)this;
            if (v73 <= 0xFFFFFFFFFFFFFFF5LL && v73 + 10 <= v74)
            {
              unint64_t v76 = 0;
              unint64_t v77 = 0;
              unint64_t v78 = 0LL;
              do
              {
                uint64_t v79 = v73 + 1;
                *((void *)this + 1) = v73 + 1;
                char v80 = *(_BYTE *)(v75 + v73);
                v78 |= (unint64_t)(v80 & 0x7F) << v76;
                if ((v80 & 0x80) == 0) {
                  goto LABEL_377;
                }
                v76 += 7;
                uint64_t v73 = v79;
                char v104 = v77++ > 8;
              }

              while (!v104);
LABEL_296:
              unint64_t v78 = 0LL;
              goto LABEL_377;
            }

            unint64_t v199 = 0;
            char v200 = 0;
            unint64_t v78 = 0LL;
            if (v74 <= v73) {
              unint64_t v74 = *((void *)this + 1);
            }
            while (2)
            {
              if (v74 == v73)
              {
                unint64_t v78 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v201 = v73 + 1;
                unint64_t v202 = *(_BYTE *)(v75 + v73);
                *((void *)this + 1) = v201;
                v78 |= (unint64_t)(v202 & 0x7F) << v199;
                if (v202 < 0)
                {
                  v199 += 7;
                  uint64_t v73 = v201;
                  char v104 = v200++ > 8;
                  if (v104) {
                    goto LABEL_296;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  unint64_t v78 = 0LL;
                }
              }

              break;
            }

          *(_DWORD *)(a1 + 76) = v51;
          goto LABEL_356;
        case 0xBu:
          *(void *)(a1 + 184) |= 2uLL;
          uint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7LL || v54 + 8 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v54);
LABEL_62:
          unint64_t v55 = *((void *)this + 1) + 8LL;
          goto LABEL_355;
        case 0xCu:
          *(void *)(a1 + 184) |= 8uLL;
          char v56 = *((void *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v56);
          goto LABEL_354;
        case 0xDu:
          *(void *)(a1 + 184) |= 0x8000000000uLL;
          unint64_t v57 = *((void *)this + 1);
          if (v57 >= *((void *)this + 2))
          {
            char v60 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v58 = v57 + 1;
            uint64_t v59 = *(unsigned __int8 *)(*(void *)this + v57);
            *((void *)this + 1) = v58;
            char v60 = v59 != 0;
          }

          *(_BYTE *)(a1 + 176) = v60;
          goto LABEL_356;
        case 0xEu:
          *(void *)(a1 + 184) |= 0x2000uLL;
          unsigned int v61 = *((void *)this + 1);
          uint64_t v62 = *((void *)this + 2);
          unint64_t v63 = *(void *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5LL && v61 + 10 <= v62)
          {
            char v64 = 0;
            unint64_t v65 = 0;
            unint64_t v66 = 0LL;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)this + 1) = v61 + 1;
              unint64_t v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_372;
              }
              v64 += 7;
              unsigned int v61 = v67;
              BOOL v14 = v65++ > 8;
            }

            while (!v14);
LABEL_250:
            LODWORD(v66) = 0;
            goto LABEL_372;
          }

          unsigned int v212 = 0;
          unint64_t v213 = 0;
          unint64_t v66 = 0LL;
          if (v62 <= v61) {
            uint64_t v62 = *((void *)this + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v214 = v61 + 1;
              char v215 = *(_BYTE *)(v63 + v61);
              *((void *)this + 1) = v214;
              v66 |= (unint64_t)(v215 & 0x7F) << v212;
              if (v215 < 0)
              {
                v212 += 7;
                unsigned int v61 = v214;
                BOOL v14 = v213++ > 8;
                if (v14) {
                  goto LABEL_250;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v66) = 0;
              }
            }

            break;
          }

LABEL_372:
          *(void *)(a1 + 16) = v35;
          goto LABEL_210;
        case 4u:
          *(void *)(a1 + 156) |= 0x400uLL;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_191;
        case 5u:
          *(void *)(a1 + 156) |= 0x200uLL;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_191;
        case 6u:
          *(void *)(a1 + 156) |= 0x100uLL;
          unint64_t v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_191;
        case 7u:
          *(void *)(a1 + 156) |= 0x800uLL;
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          uint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5LL && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0LL;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              char v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_376;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v14 = v45++ > 8;
            }

            while (!v14);
LABEL_235:
            LODWORD(v46) = 0;
            goto LABEL_376;
          }

          char v219 = 0;
          unsigned int v220 = 0;
          uint64_t v46 = 0LL;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)this + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v221 = v41 + 1;
              char v222 = *(_BYTE *)(v43 + v41);
              *((void *)this + 1) = v221;
              v46 |= (unint64_t)(v222 & 0x7F) << v219;
              if (v222 < 0)
              {
                v219 += 7;
                unint64_t v41 = v221;
                BOOL v14 = v220++ > 8;
                if (v14) {
                  goto LABEL_235;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v46) = 0;
              }
            }

            break;
          }

            *(void *)(a1 + 16) = v145;
            break;
          case 0xCA:
            *(void *)v8 |= 4uLL;
            char v148 = *((void *)this + 1);
            unint64_t v149 = *((void *)this + 2);
            unint64_t v150 = *(void *)this;
            if (v148 > 0xFFFFFFFFFFFFFFF5LL || v148 + 10 > v149)
            {
              unint64_t v189 = 0;
              char v190 = 0;
              unsigned int v153 = 0LL;
              if (v149 <= v148) {
                unint64_t v149 = *((void *)this + 1);
              }
              while (1)
              {
                if (v149 == v148)
                {
                  unsigned int v153 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_376;
                }

                unint64_t v191 = v148 + 1;
                uint64_t v192 = *(_BYTE *)(v150 + v148);
                *((void *)this + 1) = v191;
                v153 |= (unint64_t)(v192 & 0x7F) << v189;
                if ((v192 & 0x80) == 0) {
                  break;
                }
                v189 += 7;
                char v148 = v191;
                char v15 = v190++ > 8;
                if (v15)
                {
LABEL_332:
                  unsigned int v153 = 0LL;
                  goto LABEL_376;
                }
              }

              if (*((_BYTE *)this + 24)) {
                unsigned int v153 = 0LL;
              }
            }

            else
            {
              uint64_t v151 = 0;
              char v152 = 0;
              unsigned int v153 = 0LL;
              while (1)
              {
                uint64_t v154 = v148 + 1;
                *((void *)this + 1) = v148 + 1;
                unint64_t v155 = *(_BYTE *)(v150 + v148);
                v153 |= (unint64_t)(v155 & 0x7F) << v151;
                if ((v155 & 0x80) == 0) {
                  break;
                }
                v151 += 7;
                char v148 = v154;
                char v15 = v152++ > 8;
                if (v15) {
                  goto LABEL_332;
                }
              }
            }

          *(_DWORD *)(a1 + 72) = v66;
          goto LABEL_356;
        case 0xFu:
          *(void *)(a1 + 184) |= 0x200000000uLL;
          unint64_t v69 = *((void *)this + 1);
          uint64_t v70 = *((void *)this + 2);
          char v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5LL && v69 + 10 <= v70)
          {
            unsigned int v72 = 0;
            uint64_t v73 = 0;
            unint64_t v74 = 0LL;
            do
            {
              char v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              unint64_t v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_376;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }

            while (!v14);
LABEL_257:
            LODWORD(v74) = 0;
            goto LABEL_376;
          }

          unsigned int v216 = 0;
          unint64_t v217 = 0;
          unint64_t v74 = 0LL;
          if (v70 <= v69) {
            uint64_t v70 = *((void *)this + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v218 = v69 + 1;
              char v219 = *(_BYTE *)(v71 + v69);
              *((void *)this + 1) = v218;
              v74 |= (unint64_t)(v219 & 0x7F) << v216;
              if (v219 < 0)
              {
                v216 += 7;
                unint64_t v69 = v218;
                BOOL v14 = v217++ > 8;
                if (v14) {
                  goto LABEL_257;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v74) = 0;
              }
            }

            break;
          }

LABEL_380:
          *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = v54;
          goto LABEL_210;
        case 9u:
          *(void *)(a1 + 156) |= 0x1000uLL;
          unint64_t v57 = *((void *)this + 1);
          unint64_t v58 = *((void *)this + 2);
          uint64_t v59 = *(void *)this;
          if (v57 <= 0xFFFFFFFFFFFFFFF5LL && v57 + 10 <= v58)
          {
            char v60 = 0;
            unsigned int v61 = 0;
            uint64_t v62 = 0LL;
            do
            {
              unint64_t v63 = v57 + 1;
              *((void *)this + 1) = v57 + 1;
              char v64 = *(_BYTE *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0) {
                goto LABEL_384;
              }
              v60 += 7;
              unint64_t v57 = v63;
              BOOL v14 = v61++ > 8;
            }

            while (!v14);
LABEL_249:
            LODWORD(v62) = 0;
            goto LABEL_384;
          }

          char v227 = 0;
          unsigned int v228 = 0;
          uint64_t v62 = 0LL;
          if (v58 <= v57) {
            unint64_t v58 = *((void *)this + 1);
          }
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v229 = v57 + 1;
              char v230 = *(_BYTE *)(v59 + v57);
              *((void *)this + 1) = v229;
              v62 |= (unint64_t)(v230 & 0x7F) << v227;
              if (v230 < 0)
              {
                v227 += 7;
                unint64_t v57 = v229;
                BOOL v14 = v228++ > 8;
                if (v14) {
                  goto LABEL_249;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v62) = 0;
              }
            }

            break;
          }

            *(_DWORD *)(a1 + 184) = v86;
            goto LABEL_460;
          case 204:
            *(_WORD *)(a1 + 204) |= 0x20u;
            unint64_t v89 = *((void *)this + 1);
            if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((void *)this + 2)) {
              break;
            }
            *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v89);
            goto LABEL_459;
          case 205:
            if ((_DWORD)v26 == 2)
            {
              unint64_t v90 = v4;
              if ((PB::Reader::placeMark(this, v294, v26, a4) & 1) != 0) {
                return 0LL;
              }
              if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
              {
                int v91 = *(char **)(a1 + 88);
                do
                {
                  if ((unint64_t)v91 >= *v14)
                  {
                    BOOL v92 = (char *)*v288;
                    unint64_t v93 = (v91 - (_BYTE *)*v288) >> 3;
                    unint64_t v94 = v93 + 1;
                    uint64_t v95 = *v14 - (void)v92;
                    if (v95 >> 2 > v94) {
                      unint64_t v94 = v95 >> 2;
                    }
                    else {
                      char v96 = v94;
                    }
                    if (v96)
                    {
                      unsigned int v97 = (char *)sub_1000071BC((uint64_t)v14, v96);
                      BOOL v92 = *(char **)(a1 + 80);
                      int v91 = *(char **)(a1 + 88);
                    }

                    else
                    {
                      unsigned int v97 = 0LL;
                    }

                    uint64_t v98 = &v97[8 * v93];
                    *(void *)uint64_t v98 = 0LL;
                    unint64_t v99 = v98 + 8;
                    while (v91 != v92)
                    {
                      char v100 = *((void *)v91 - 1);
                      v91 -= 8;
                      *((void *)v98 - 1) = v100;
                      v98 -= 8;
                    }

                    *(void *)(a1 + 80) = v98;
                    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v99;
                    *(void *)(a1 + 96) = &v97[8 * v96];
                    if (v92) {
                      operator delete(v92);
                    }
                    int v91 = v99;
                  }

                  else
                  {
                    *(void *)int v91 = 0LL;
                    v91 += 8;
                  }

                  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v91;
                  unint64_t v102 = *((void *)this + 1);
                  unint64_t v101 = *((void *)this + 2);
                  uint64_t v103 = *(void *)this;
                  char v104 = v102 > 0xFFFFFFFFFFFFFFF5LL || v102 + 10 > v101;
                  if (v104)
                  {
                    unsigned int v105 = 0;
                    uint64_t v106 = 0;
                    char v112 = 0LL;
                    if (v101 <= v102) {
                      unint64_t v107 = *((void *)this + 1);
                    }
                    else {
                      unint64_t v107 = *((void *)this + 2);
                    }
                    while (1)
                    {
                      if (v107 == v102) {
                        goto LABEL_315;
                      }
                      char v108 = v102++;
                      unint64_t v109 = *(_BYTE *)(v103 + v108);
                      *((void *)this + 1) = v102;
                      v112 |= (unint64_t)(v109 & 0x7F) << v105;
                      if ((v109 & 0x80) == 0) {
                        break;
                      }
                      v105 += 7;
                      char v104 = v106++ > 8;
                      if (v104)
                      {
                        char v112 = 0LL;
                        goto LABEL_132;
                      }
                    }

                    if (*((_BYTE *)this + 24)) {
                      char v112 = 0LL;
                    }
LABEL_132:
                    unsigned int v113 = v108 + 1;
                  }

                  else
                  {
                    unint64_t v110 = 0;
                    uint64_t v111 = 0;
                    char v112 = 0LL;
                    while (1)
                    {
                      unsigned int v113 = v102 + 1;
                      *((void *)this + 1) = v102 + 1;
                      uint64_t v114 = *(_BYTE *)(v103 + v102);
                      v112 |= (unint64_t)(v114 & 0x7F) << v110;
                      if ((v114 & 0x80) == 0) {
                        break;
                      }
                      v110 += 7;
                      unint64_t v102 = v113;
                      char v104 = v111++ > 8;
                      if (v104)
                      {
                        char v112 = 0LL;
                        break;
                      }
                    }
                  }

                  *((void *)v91 - 1) = v112;
                }

                while (v113 < v101 && !*((_BYTE *)this + 24));
              }

              goto LABEL_316;
            }

            char v208 = *(char **)(a1 + 88);
            unint64_t v207 = *(void *)(a1 + 96);
            if ((unint64_t)v208 >= v207)
            {
              char v219 = (char *)*v288;
              unsigned int v220 = (v208 - (_BYTE *)*v288) >> 3;
              unint64_t v221 = v220 + 1;
              if ((unint64_t)(v220 + 1) >> 61) {
LABEL_473:
              }
                sub_100007008();
              char v222 = v4;
              char v223 = v207 - (void)v219;
              if (v223 >> 2 > v221) {
                unint64_t v221 = v223 >> 2;
              }
              else {
                unsigned int v224 = v221;
              }
              if (v224)
              {
                unint64_t v225 = (char *)sub_1000071BC((uint64_t)v14, v224);
                char v219 = *(char **)(a1 + 80);
                char v208 = *(char **)(a1 + 88);
              }

              else
              {
                unint64_t v225 = 0LL;
              }

              char v254 = &v225[8 * v220];
              *(void *)char v254 = 0LL;
              unint64_t v209 = v254 + 8;
              while (v208 != v219)
              {
                char v255 = *((void *)v208 - 1);
                v208 -= 8;
                *((void *)v254 - 1) = v255;
                v254 -= 8;
              }

              *(void *)(a1 + 80) = v254;
              *(void *)(a1 + 8_Block_object_dispose(va, 8) = v209;
              *(void *)(a1 + 96) = &v225[8 * v224];
              if (v219) {
                operator delete(v219);
              }
              int v4 = v222;
            }

            else
            {
              *(void *)char v208 = 0LL;
              unint64_t v209 = v208 + 8;
            }

            *(void *)(a1 + 8_Block_object_dispose(va, 8) = v209;
            unsigned int v256 = *((void *)this + 1);
            unint64_t v257 = *((void *)this + 2);
            char v258 = *(void *)this;
            char v259 = 0;
            unsigned int v260 = 0;
            if (v256 <= 0xFFFFFFFFFFFFFFF5LL && v256 + 10 <= v257)
            {
              unsigned int v264 = 0LL;
              while (1)
              {
                unint64_t v265 = v256 + 1;
                *((void *)this + 1) = v256 + 1;
                char v266 = *(_BYTE *)(v258 + v256);
                v264 |= (unint64_t)(v266 & 0x7F) << v259;
                if ((v266 & 0x80) == 0) {
                  goto LABEL_430;
                }
                v259 += 7;
                unsigned int v256 = v265;
                char v104 = v260++ > 8;
                if (v104) {
                  goto LABEL_426;
                }
              }
            }

            unsigned int v264 = 0LL;
            if (v257 <= v256) {
              unint64_t v257 = *((void *)this + 1);
            }
            while (v257 != v256)
            {
              char v262 = v256 + 1;
              char v263 = *(_BYTE *)(v258 + v256);
              *((void *)this + 1) = v262;
              v264 |= (unint64_t)(v263 & 0x7F) << v259;
              if ((v263 & 0x80) == 0) {
                goto LABEL_428;
              }
              v259 += 7;
              unsigned int v256 = v262;
              char v104 = v260++ > 8;
              if (v104) {
                goto LABEL_426;
              }
            }

            goto LABEL_427;
          case 206:
            if ((_DWORD)v26 != 2)
            {
              char v211 = *(char **)(a1 + 112);
              unsigned int v210 = *(void *)(a1 + 120);
              if ((unint64_t)v211 >= v210)
              {
                char v226 = (char *)*v289;
                char v227 = (v211 - (_BYTE *)*v289) >> 3;
                unsigned int v228 = v227 + 1;
                if ((unint64_t)(v227 + 1) >> 61) {
LABEL_474:
                }
                  sub_100007008();
                unint64_t v229 = v4;
                char v230 = v210 - (void)v226;
                if (v230 >> 2 > v228) {
                  unsigned int v228 = v230 >> 2;
                }
                else {
                  char v231 = v228;
                }
                if (v231)
                {
                  unsigned int v232 = (char *)sub_1000071BC((uint64_t)v13, v231);
                  char v226 = *(char **)(a1 + 104);
                  char v211 = *(char **)(a1 + 112);
                }

                else
                {
                  unsigned int v232 = 0LL;
                }

                char v267 = &v232[8 * v227];
                *(void *)char v267 = 0LL;
                unint64_t v209 = v267 + 8;
                while (v211 != v226)
                {
                  unsigned int v268 = *((void *)v211 - 1);
                  v211 -= 8;
                  *((void *)v267 - 1) = v268;
                  v267 -= 8;
                }

                *(void *)(a1 + 104) = v267;
                *(void *)(a1 + 112) = v209;
                *(void *)(a1 + 120) = &v232[8 * v231];
                if (v226) {
                  operator delete(v226);
                }
                int v4 = v229;
              }

              else
              {
                *(void *)char v211 = 0LL;
                unint64_t v209 = v211 + 8;
              }

              *(void *)(a1 + 112) = v209;
              unint64_t v269 = *((void *)this + 1);
              char v270 = *((void *)this + 2);
              char v271 = *(void *)this;
              unsigned int v272 = 0;
              unint64_t v273 = 0;
              if (v269 > 0xFFFFFFFFFFFFFFF5LL || v269 + 10 > v270)
              {
                unsigned int v264 = 0LL;
                if (v270 <= v269) {
                  char v270 = *((void *)this + 1);
                }
                while (v270 != v269)
                {
                  char v275 = v269 + 1;
                  unsigned int v276 = *(_BYTE *)(v271 + v269);
                  *((void *)this + 1) = v275;
                  v264 |= (unint64_t)(v276 & 0x7F) << v272;
                  if ((v276 & 0x80) == 0)
                  {
LABEL_428:
                    if (*((_BYTE *)this + 24)) {
                      unsigned int v264 = 0LL;
                    }
                    goto LABEL_430;
                  }

                  v272 += 7;
                  unint64_t v269 = v275;
                  char v104 = v273++ > 8;
                  if (v104)
                  {
LABEL_426:
                    unsigned int v264 = 0LL;
                    goto LABEL_430;
                  }
                }

          *(_DWORD *)(a1 + 172) = v82;
          goto LABEL_356;
        case 0x11u:
          *(void *)(a1 + 184) |= 0x100000uLL;
          unint64_t v85 = *((void *)this + 1);
          unint64_t v86 = *((void *)this + 2);
          int v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5LL && v85 + 10 <= v86)
          {
            BOOL v88 = 0;
            unint64_t v89 = 0;
            unint64_t v90 = 0LL;
            do
            {
              int v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              BOOL v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_384;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }

            while (!v14);
LABEL_271:
            LODWORD(v90) = 0;
            goto LABEL_384;
          }

          unsigned int v224 = 0;
          unint64_t v225 = 0;
          unint64_t v90 = 0LL;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v226 = v85 + 1;
              char v227 = *(_BYTE *)(v87 + v85);
              *((void *)this + 1) = v226;
              v90 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                unint64_t v85 = v226;
                BOOL v14 = v225++ > 8;
                if (v14) {
                  goto LABEL_271;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v90) = 0;
              }
            }

            break;
          }

LABEL_388:
          *(_DWORD *)(a1 + 96) = v73;
          goto LABEL_210;
        case 0xEu:
          *(void *)(a1 + 156) |= 0x4000uLL;
          unint64_t v76 = *((void *)this + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v76);
          goto LABEL_191;
        case 0xFu:
          *(void *)(a1 + 156) |= 0x20uLL;
          unint64_t v77 = *((void *)this + 1);
          unint64_t v78 = *((void *)this + 2);
          uint64_t v79 = *(void *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5LL && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0LL;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)this + 1) = v77 + 1;
              char v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_392;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }

            while (!v14);
LABEL_263:
            LODWORD(v82) = 0;
            goto LABEL_392;
          }

          char v235 = 0;
          unsigned int v236 = 0;
          uint64_t v82 = 0LL;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)this + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v237 = v77 + 1;
              char v238 = *(_BYTE *)(v79 + v77);
              *((void *)this + 1) = v237;
              v82 |= (unint64_t)(v238 & 0x7F) << v235;
              if (v238 < 0)
              {
                v235 += 7;
                unint64_t v77 = v237;
                BOOL v14 = v236++ > 8;
                if (v14) {
                  goto LABEL_263;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v82) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = v98;
          goto LABEL_356;
        case 0x13u:
          *(void *)(a1 + 184) |= 0x10000uLL;
          unint64_t v101 = *((void *)this + 1);
          unint64_t v102 = *((void *)this + 2);
          uint64_t v103 = *(void *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5LL && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0LL;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)this + 1) = v101 + 1;
              char v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_392;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }

            while (!v14);
LABEL_285:
            LODWORD(v106) = 0;
            goto LABEL_392;
          }

          unsigned int v232 = 0;
          unint64_t v233 = 0;
          uint64_t v106 = 0LL;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)this + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v234 = v101 + 1;
              char v235 = *(_BYTE *)(v103 + v101);
              *((void *)this + 1) = v234;
              v106 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                unint64_t v101 = v234;
                BOOL v14 = v233++ > 8;
                if (v14) {
                  goto LABEL_285;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v106) = 0;
              }
            }

            break;
          }

LABEL_392:
          *(_DWORD *)(a1 + 44) = v82;
          goto LABEL_210;
        case 0x10u:
          *(void *)(a1 + 156) |= 0x400000000uLL;
          unint64_t v85 = *((void *)this + 1);
          if (v85 >= *((void *)this + 2))
          {
            BOOL v88 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v86 = v85 + 1;
            int v87 = *(unsigned __int8 *)(*(void *)this + v85);
            *((void *)this + 1) = v86;
            BOOL v88 = v87 != 0;
          }

          *(_BYTE *)(a1 + 154) = v88;
          goto LABEL_210;
        case 0x11u:
          *(void *)(a1 + 156) |= 0x200000000uLL;
          unint64_t v89 = *((void *)this + 1);
          if (v89 >= *((void *)this + 2))
          {
            BOOL v92 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v90 = v89 + 1;
            int v91 = *(unsigned __int8 *)(*(void *)this + v89);
            *((void *)this + 1) = v90;
            BOOL v92 = v91 != 0;
          }

          *(_BYTE *)(a1 + 153) = v92;
          goto LABEL_210;
        case 0x12u:
          *(void *)(a1 + 156) |= 0x80uLL;
          unint64_t v93 = *((void *)this + 1);
          unint64_t v94 = *((void *)this + 2);
          uint64_t v95 = *(void *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5LL && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0LL;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)this + 1) = v93 + 1;
              char v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_396;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }

            while (!v14);
LABEL_274:
            LODWORD(v9_Block_object_dispose(va, 8) = 0;
            goto LABEL_396;
          }

          char v239 = 0;
          unsigned int v240 = 0;
          uint64_t v98 = 0LL;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)this + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v9_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v241 = v93 + 1;
              char v242 = *(_BYTE *)(v95 + v93);
              *((void *)this + 1) = v241;
              v98 |= (unint64_t)(v242 & 0x7F) << v239;
              if (v242 < 0)
              {
                v239 += 7;
                unint64_t v93 = v241;
                BOOL v14 = v240++ > 8;
                if (v14) {
                  goto LABEL_274;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v9_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 84) = v106;
          goto LABEL_356;
        case 0x14u:
          *(void *)(a1 + 184) |= 0x40000uLL;
          unint64_t v109 = *((void *)this + 1);
          unint64_t v110 = *((void *)this + 2);
          uint64_t v111 = *(void *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5LL && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0LL;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)this + 1) = v109 + 1;
              char v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_396;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }

            while (!v14);
LABEL_292:
            LODWORD(v114) = 0;
            goto LABEL_396;
          }

          unsigned int v236 = 0;
          unint64_t v237 = 0;
          uint64_t v114 = 0LL;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)this + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v238 = v109 + 1;
              char v239 = *(_BYTE *)(v111 + v109);
              *((void *)this + 1) = v238;
              v114 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                unint64_t v109 = v238;
                BOOL v14 = v237++ > 8;
                if (v14) {
                  goto LABEL_292;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v114) = 0;
              }
            }

            break;
          }

LABEL_396:
          *(_DWORD *)(a1 + 52) = v98;
          goto LABEL_210;
        case 0x13u:
          *(void *)(a1 + 156) |= 0x40000000uLL;
          unint64_t v101 = *((void *)this + 1);
          unint64_t v102 = *((void *)this + 2);
          uint64_t v103 = *(void *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5LL && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0LL;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)this + 1) = v101 + 1;
              char v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_400;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }

            while (!v14);
LABEL_281:
            LODWORD(v106) = 0;
            goto LABEL_400;
          }

          char v243 = 0;
          unsigned int v244 = 0;
          uint64_t v106 = 0LL;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)this + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v245 = v101 + 1;
              char v246 = *(_BYTE *)(v103 + v101);
              *((void *)this + 1) = v245;
              v106 |= (unint64_t)(v246 & 0x7F) << v243;
              if (v246 < 0)
              {
                v243 += 7;
                unint64_t v101 = v245;
                BOOL v14 = v244++ > 8;
                if (v14) {
                  goto LABEL_281;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v106) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 80) = v34;
          goto LABEL_489;
        case 9u:
          *(void *)(a1 + 164) |= 0x1000uLL;
          char v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          unint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5LL && v37 + 10 <= v38)
          {
            unint64_t v40 = 0;
            unint64_t v41 = 0;
            unint64_t v42 = 0LL;
            do
            {
              uint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_400;
              }
              v40 += 7;
              char v37 = v43;
              BOOL v14 = v41++ > 8;
            }

            while (!v14);
LABEL_235:
            LODWORD(v42) = 0;
            goto LABEL_400;
          }

          unsigned int v228 = 0;
          unint64_t v229 = 0;
          unint64_t v42 = 0LL;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v230 = v37 + 1;
              char v231 = *(_BYTE *)(v39 + v37);
              *((void *)this + 1) = v230;
              v42 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                char v37 = v230;
                BOOL v14 = v229++ > 8;
                if (v14) {
                  goto LABEL_235;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v42) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 92) = v114;
          goto LABEL_356;
        case 0x15u:
          *(void *)(a1 + 184) |= 0x80000uLL;
          unint64_t v117 = *((void *)this + 1);
          unint64_t v118 = *((void *)this + 2);
          int v119 = *(void *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5LL && v117 + 10 <= v118)
          {
            BOOL v120 = 0;
            unint64_t v121 = 0;
            unint64_t v122 = 0LL;
            do
            {
              int v123 = v117 + 1;
              *((void *)this + 1) = v117 + 1;
              BOOL v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_400;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v14 = v121++ > 8;
            }

            while (!v14);
LABEL_299:
            LODWORD(v122) = 0;
            goto LABEL_400;
          }

          unsigned int v240 = 0;
          unint64_t v241 = 0;
          unint64_t v122 = 0LL;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)this + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v242 = v117 + 1;
              char v243 = *(_BYTE *)(v119 + v117);
              *((void *)this + 1) = v242;
              v122 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                unint64_t v117 = v242;
                BOOL v14 = v241++ > 8;
                if (v14) {
                  goto LABEL_299;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v122) = 0;
              }
            }

            break;
          }

LABEL_400:
          *(_DWORD *)(a1 + 144) = v106;
          goto LABEL_210;
        case 0x14u:
          *(void *)(a1 + 156) |= 0x2000000uLL;
          unint64_t v109 = *((void *)this + 1);
          unint64_t v110 = *((void *)this + 2);
          uint64_t v111 = *(void *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5LL && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0LL;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)this + 1) = v109 + 1;
              char v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_404;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }

            while (!v14);
LABEL_288:
            LODWORD(v114) = 0;
            goto LABEL_404;
          }

          char v247 = 0;
          unsigned int v248 = 0;
          uint64_t v114 = 0LL;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)this + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v249 = v109 + 1;
              char v250 = *(_BYTE *)(v111 + v109);
              *((void *)this + 1) = v249;
              v114 |= (unint64_t)(v250 & 0x7F) << v247;
              if (v250 < 0)
              {
                v247 += 7;
                unint64_t v109 = v249;
                BOOL v14 = v248++ > 8;
                if (v14) {
                  goto LABEL_288;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v114) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 76) = v42;
          goto LABEL_489;
        case 0xAu:
          *(void *)(a1 + 164) |= 0x80uLL;
          unsigned int v45 = *((void *)this + 1);
          uint64_t v46 = *((void *)this + 2);
          unint64_t v47 = *(void *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5LL && v45 + 10 <= v46)
          {
            char v48 = 0;
            unint64_t v49 = 0;
            unint64_t v50 = 0LL;
            do
            {
              uint64_t v51 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              char v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_404;
              }
              v48 += 7;
              unsigned int v45 = v51;
              BOOL v14 = v49++ > 8;
            }

            while (!v14);
LABEL_242:
            LODWORD(v50) = 0;
            goto LABEL_404;
          }

          unsigned int v232 = 0;
          unint64_t v233 = 0;
          unint64_t v50 = 0LL;
          if (v46 <= v45) {
            uint64_t v46 = *((void *)this + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v234 = v45 + 1;
              char v235 = *(_BYTE *)(v47 + v45);
              *((void *)this + 1) = v234;
              v50 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                unsigned int v45 = v234;
                BOOL v14 = v233++ > 8;
                if (v14) {
                  goto LABEL_242;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v50) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 96) = v122;
          goto LABEL_356;
        case 0x16u:
          *(void *)(a1 + 184) |= 0x8000uLL;
          unint64_t v125 = *((void *)this + 1);
          unint64_t v126 = *((void *)this + 2);
          uint64_t v127 = *(void *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5LL && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0LL;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)this + 1) = v125 + 1;
              char v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_404;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }

            while (!v14);
LABEL_306:
            LODWORD(v130) = 0;
            goto LABEL_404;
          }

          unsigned int v244 = 0;
          unint64_t v245 = 0;
          uint64_t v130 = 0LL;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)this + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v246 = v125 + 1;
              char v247 = *(_BYTE *)(v127 + v125);
              *((void *)this + 1) = v246;
              v130 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                unint64_t v125 = v246;
                BOOL v14 = v245++ > 8;
                if (v14) {
                  goto LABEL_306;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v130) = 0;
              }
            }

            break;
          }

LABEL_404:
          *(_DWORD *)(a1 + 124) = v114;
          goto LABEL_210;
        case 0x15u:
          *(void *)(a1 + 156) |= 0x800000000uLL;
          unint64_t v117 = *((void *)this + 1);
          if (v117 >= *((void *)this + 2))
          {
            BOOL v120 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v118 = v117 + 1;
            int v119 = *(unsigned __int8 *)(*(void *)this + v117);
            *((void *)this + 1) = v118;
            BOOL v120 = v119 != 0;
          }

          *(_BYTE *)(a1 + 155) = v120;
          goto LABEL_210;
        case 0x16u:
          *(void *)(a1 + 156) |= (unint64_t)&_mh_execute_header;
          unint64_t v121 = *((void *)this + 1);
          if (v121 >= *((void *)this + 2))
          {
            BOOL v124 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v122 = v121 + 1;
            int v123 = *(unsigned __int8 *)(*(void *)this + v121);
            *((void *)this + 1) = v122;
            BOOL v124 = v123 != 0;
          }

          *(_BYTE *)(a1 + 152) = v124;
          goto LABEL_210;
        case 0x17u:
          *(void *)(a1 + 156) |= 0x20000uLL;
          unint64_t v125 = *((void *)this + 1);
          unint64_t v126 = *((void *)this + 2);
          uint64_t v127 = *(void *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5LL && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0LL;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)this + 1) = v125 + 1;
              char v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_408;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }

            while (!v14);
LABEL_299:
            LODWORD(v130) = 0;
            goto LABEL_408;
          }

          char v251 = 0;
          unsigned int v252 = 0;
          uint64_t v130 = 0LL;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)this + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v253 = v125 + 1;
              char v254 = *(_BYTE *)(v127 + v125);
              *((void *)this + 1) = v253;
              v130 |= (unint64_t)(v254 & 0x7F) << v251;
              if (v254 < 0)
              {
                v251 += 7;
                unint64_t v125 = v253;
                BOOL v14 = v252++ > 8;
                if (v14) {
                  goto LABEL_299;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v130) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 56) = v50;
          goto LABEL_489;
        case 0xBu:
          *(void *)(a1 + 164) |= 0x200000000uLL;
          unsigned int v53 = *((void *)this + 1);
          uint64_t v54 = *((void *)this + 2);
          unint64_t v55 = *(void *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5LL && v53 + 10 <= v54)
          {
            char v56 = 0;
            unint64_t v57 = 0;
            unint64_t v58 = 0LL;
            do
            {
              uint64_t v59 = v53 + 1;
              *((void *)this + 1) = v53 + 1;
              char v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_408;
              }
              v56 += 7;
              unsigned int v53 = v59;
              BOOL v14 = v57++ > 8;
            }

            while (!v14);
LABEL_249:
            LODWORD(v5_Block_object_dispose(va, 8) = 0;
            goto LABEL_408;
          }

          unsigned int v236 = 0;
          unint64_t v237 = 0;
          unint64_t v58 = 0LL;
          if (v54 <= v53) {
            uint64_t v54 = *((void *)this + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v5_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v238 = v53 + 1;
              char v239 = *(_BYTE *)(v55 + v53);
              *((void *)this + 1) = v238;
              v58 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                unsigned int v53 = v238;
                BOOL v14 = v237++ > 8;
                if (v14) {
                  goto LABEL_249;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v5_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 80) = v130;
          goto LABEL_356;
        case 0x17u:
          *(void *)(a1 + 184) |= 0x400uLL;
          unint64_t v133 = *((void *)this + 1);
          unint64_t v134 = *((void *)this + 2);
          uint64_t v135 = *(void *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5LL && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0LL;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)this + 1) = v133 + 1;
              char v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_408;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }

            while (!v14);
LABEL_313:
            LODWORD(v13_Block_object_dispose(va, 8) = 0;
            goto LABEL_408;
          }

          unsigned int v248 = 0;
          unint64_t v249 = 0;
          uint64_t v138 = 0LL;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)this + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v13_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v250 = v133 + 1;
              char v251 = *(_BYTE *)(v135 + v133);
              *((void *)this + 1) = v250;
              v138 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                unint64_t v133 = v250;
                BOOL v14 = v249++ > 8;
                if (v14) {
                  goto LABEL_313;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v13_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

LABEL_408:
          *(_DWORD *)(a1 + 92) = v130;
          goto LABEL_210;
        case 0x18u:
          *(void *)(a1 + 156) |= 0x200000uLL;
          unint64_t v133 = *((void *)this + 1);
          unint64_t v134 = *((void *)this + 2);
          uint64_t v135 = *(void *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5LL && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0LL;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)this + 1) = v133 + 1;
              char v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_412;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }

            while (!v14);
LABEL_306:
            LODWORD(v13_Block_object_dispose(va, 8) = 0;
            goto LABEL_412;
          }

          char v255 = 0;
          unsigned int v256 = 0;
          uint64_t v138 = 0LL;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)this + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v13_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v257 = v133 + 1;
              char v258 = *(_BYTE *)(v135 + v133);
              *((void *)this + 1) = v257;
              v138 |= (unint64_t)(v258 & 0x7F) << v255;
              if (v258 < 0)
              {
                v255 += 7;
                unint64_t v133 = v257;
                BOOL v14 = v256++ > 8;
                if (v14) {
                  goto LABEL_306;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v13_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 160) = v58;
          goto LABEL_489;
        case 0xCu:
          *(void *)(a1 + 164) |= 0x10000000uLL;
          unsigned int v61 = *((void *)this + 1);
          uint64_t v62 = *((void *)this + 2);
          unint64_t v63 = *(void *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5LL && v61 + 10 <= v62)
          {
            char v64 = 0;
            unint64_t v65 = 0;
            unint64_t v66 = 0LL;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)this + 1) = v61 + 1;
              unint64_t v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_412;
              }
              v64 += 7;
              unsigned int v61 = v67;
              BOOL v14 = v65++ > 8;
            }

            while (!v14);
LABEL_256:
            LODWORD(v66) = 0;
            goto LABEL_412;
          }

          unsigned int v240 = 0;
          unint64_t v241 = 0;
          unint64_t v66 = 0LL;
          if (v62 <= v61) {
            uint64_t v62 = *((void *)this + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v242 = v61 + 1;
              char v243 = *(_BYTE *)(v63 + v61);
              *((void *)this + 1) = v242;
              v66 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                unsigned int v61 = v242;
                BOOL v14 = v241++ > 8;
                if (v14) {
                  goto LABEL_256;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v66) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 60) = v138;
          goto LABEL_356;
        case 0x18u:
          *(void *)(a1 + 184) |= 0x2000000000uLL;
          unint64_t v141 = *((void *)this + 1);
          unint64_t v142 = *((void *)this + 2);
          uint64_t v143 = *(void *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5LL && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0LL;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)this + 1) = v141 + 1;
              char v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_412;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }

            while (!v14);
LABEL_320:
            LODWORD(v146) = 0;
            goto LABEL_412;
          }

          unsigned int v252 = 0;
          unint64_t v253 = 0;
          uint64_t v146 = 0LL;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)this + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v254 = v141 + 1;
              char v255 = *(_BYTE *)(v143 + v141);
              *((void *)this + 1) = v254;
              v146 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                unint64_t v141 = v254;
                BOOL v14 = v253++ > 8;
                if (v14) {
                  goto LABEL_320;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v146) = 0;
              }
            }

            break;
          }

LABEL_412:
          *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = v138;
          goto LABEL_210;
        case 0x19u:
          *(void *)(a1 + 156) |= 0x400000uLL;
          unint64_t v141 = *((void *)this + 1);
          unint64_t v142 = *((void *)this + 2);
          uint64_t v143 = *(void *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5LL && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0LL;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)this + 1) = v141 + 1;
              char v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_416;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }

            while (!v14);
LABEL_313:
            LODWORD(v146) = 0;
            goto LABEL_416;
          }

          char v259 = 0;
          unsigned int v260 = 0;
          uint64_t v146 = 0LL;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)this + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v261 = v141 + 1;
              char v262 = *(_BYTE *)(v143 + v141);
              *((void *)this + 1) = v261;
              v146 |= (unint64_t)(v262 & 0x7F) << v259;
              if (v262 < 0)
              {
                v259 += 7;
                unint64_t v141 = v261;
                BOOL v14 = v260++ > 8;
                if (v14) {
                  goto LABEL_313;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v146) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 140) = v66;
          goto LABEL_489;
        case 0xDu:
          *(void *)(a1 + 164) |= 0x400uLL;
          unint64_t v69 = *((void *)this + 1);
          uint64_t v70 = *((void *)this + 2);
          char v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5LL && v69 + 10 <= v70)
          {
            unsigned int v72 = 0;
            uint64_t v73 = 0;
            unint64_t v74 = 0LL;
            do
            {
              char v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              unint64_t v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_416;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }

            while (!v14);
LABEL_263:
            LODWORD(v74) = 0;
            goto LABEL_416;
          }

          unsigned int v244 = 0;
          unint64_t v245 = 0;
          unint64_t v74 = 0LL;
          if (v70 <= v69) {
            uint64_t v70 = *((void *)this + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v246 = v69 + 1;
              char v247 = *(_BYTE *)(v71 + v69);
              *((void *)this + 1) = v246;
              v74 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                unint64_t v69 = v246;
                BOOL v14 = v245++ > 8;
                if (v14) {
                  goto LABEL_263;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v74) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = v146;
          goto LABEL_356;
        case 0x19u:
          *(void *)(a1 + 184) |= 0x1000uLL;
          unint64_t v149 = *((void *)this + 1);
          unint64_t v150 = *((void *)this + 2);
          uint64_t v151 = *(void *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5LL && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0LL;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)this + 1) = v149 + 1;
              char v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_416;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }

            while (!v14);
LABEL_327:
            LODWORD(v154) = 0;
            goto LABEL_416;
          }

          unsigned int v256 = 0;
          unint64_t v257 = 0;
          uint64_t v154 = 0LL;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)this + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v258 = v149 + 1;
              char v259 = *(_BYTE *)(v151 + v149);
              *((void *)this + 1) = v258;
              v154 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                unint64_t v149 = v258;
                BOOL v14 = v257++ > 8;
                if (v14) {
                  goto LABEL_327;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v154) = 0;
              }
            }

            break;
          }

LABEL_416:
          *(_DWORD *)(a1 + 112) = v146;
          goto LABEL_210;
        case 0x1Au:
          *(void *)(a1 + 156) |= 0x80000uLL;
          unint64_t v149 = *((void *)this + 1);
          unint64_t v150 = *((void *)this + 2);
          uint64_t v151 = *(void *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5LL && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0LL;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)this + 1) = v149 + 1;
              char v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_420;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }

            while (!v14);
LABEL_320:
            LODWORD(v154) = 0;
            goto LABEL_420;
          }

          char v263 = 0;
          unsigned int v264 = 0;
          uint64_t v154 = 0LL;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)this + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v265 = v149 + 1;
              char v266 = *(_BYTE *)(v151 + v149);
              *((void *)this + 1) = v265;
              v154 |= (unint64_t)(v266 & 0x7F) << v263;
              if (v266 < 0)
              {
                v263 += 7;
                unint64_t v149 = v265;
                BOOL v14 = v264++ > 8;
                if (v14) {
                  goto LABEL_320;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v154) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = v74;
          goto LABEL_489;
        case 0xEu:
          *(void *)(a1 + 164) |= 0x4000uLL;
          unint64_t v77 = *((void *)this + 1);
          unint64_t v78 = *((void *)this + 2);
          uint64_t v79 = *(void *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5LL && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0LL;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)this + 1) = v77 + 1;
              char v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_420;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }

            while (!v14);
LABEL_270:
            LODWORD(v82) = 0;
            goto LABEL_420;
          }

          unsigned int v248 = 0;
          unint64_t v249 = 0;
          uint64_t v82 = 0LL;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)this + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v250 = v77 + 1;
              char v251 = *(_BYTE *)(v79 + v77);
              *((void *)this + 1) = v250;
              v82 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                unint64_t v77 = v250;
                BOOL v14 = v249++ > 8;
                if (v14) {
                  goto LABEL_270;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v82) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = v154;
          goto LABEL_356;
        case 0x1Au:
          *(void *)(a1 + 184) |= 0x20000000uLL;
          unint64_t v157 = *((void *)this + 1);
          unint64_t v158 = *((void *)this + 2);
          uint64_t v159 = *(void *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5LL && v157 + 10 <= v158)
          {
            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v162 = 0LL;
            do
            {
              unint64_t v163 = v157 + 1;
              *((void *)this + 1) = v157 + 1;
              char v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0) {
                goto LABEL_420;
              }
              v160 += 7;
              unint64_t v157 = v163;
              BOOL v14 = v161++ > 8;
            }

            while (!v14);
LABEL_334:
            LODWORD(v162) = 0;
            goto LABEL_420;
          }

          unsigned int v260 = 0;
          unint64_t v261 = 0;
          uint64_t v162 = 0LL;
          if (v158 <= v157) {
            unint64_t v158 = *((void *)this + 1);
          }
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v262 = v157 + 1;
              char v263 = *(_BYTE *)(v159 + v157);
              *((void *)this + 1) = v262;
              v162 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                unint64_t v157 = v262;
                BOOL v14 = v261++ > 8;
                if (v14) {
                  goto LABEL_334;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v162) = 0;
              }
            }

            break;
          }

LABEL_420:
          *(_DWORD *)(a1 + 100) = v154;
          goto LABEL_210;
        case 0x1Bu:
          *(void *)(a1 + 156) |= 0x8000uLL;
          unint64_t v157 = *((void *)this + 1);
          unint64_t v158 = *((void *)this + 2);
          uint64_t v159 = *(void *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5LL && v157 + 10 <= v158)
          {
            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v162 = 0LL;
            do
            {
              unint64_t v163 = v157 + 1;
              *((void *)this + 1) = v157 + 1;
              char v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0) {
                goto LABEL_424;
              }
              v160 += 7;
              unint64_t v157 = v163;
              BOOL v14 = v161++ > 8;
            }

            while (!v14);
LABEL_327:
            LODWORD(v162) = 0;
            goto LABEL_424;
          }

          char v267 = 0;
          unsigned int v268 = 0;
          uint64_t v162 = 0LL;
          if (v158 <= v157) {
            unint64_t v158 = *((void *)this + 1);
          }
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v269 = v157 + 1;
              char v270 = *(_BYTE *)(v159 + v157);
              *((void *)this + 1) = v269;
              v162 |= (unint64_t)(v270 & 0x7F) << v267;
              if (v270 < 0)
              {
                v267 += 7;
                unint64_t v157 = v269;
                BOOL v14 = v268++ > 8;
                if (v14) {
                  goto LABEL_327;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v162) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 84) = v82;
          goto LABEL_489;
        case 0xFu:
          *(void *)(a1 + 164) |= 0x800000uLL;
          unint64_t v85 = *((void *)this + 1);
          unint64_t v86 = *((void *)this + 2);
          int v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5LL && v85 + 10 <= v86)
          {
            BOOL v88 = 0;
            unint64_t v89 = 0;
            unint64_t v90 = 0LL;
            do
            {
              int v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              BOOL v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_424;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }

            while (!v14);
LABEL_277:
            LODWORD(v90) = 0;
            goto LABEL_424;
          }

          unsigned int v252 = 0;
          unint64_t v253 = 0;
          unint64_t v90 = 0LL;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v254 = v85 + 1;
              char v255 = *(_BYTE *)(v87 + v85);
              *((void *)this + 1) = v254;
              v90 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                unint64_t v85 = v254;
                BOOL v14 = v253++ > 8;
                if (v14) {
                  goto LABEL_277;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v90) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 136) = v162;
          goto LABEL_356;
        case 0x1Bu:
          *(void *)(a1 + 184) |= 0x10uLL;
          unint64_t v165 = *((void *)this + 1);
          unint64_t v166 = *((void *)this + 2);
          unint64_t v167 = *(void *)this;
          if (v165 <= 0xFFFFFFFFFFFFFFF5LL && v165 + 10 <= v166)
          {
            uint64_t v168 = 0;
            char v169 = 0;
            unsigned int v170 = 0LL;
            do
            {
              uint64_t v171 = v165 + 1;
              *((void *)this + 1) = v165 + 1;
              unint64_t v172 = *(_BYTE *)(v167 + v165);
              v170 |= (unint64_t)(v172 & 0x7F) << v168;
              if ((v172 & 0x80) == 0) {
                goto LABEL_424;
              }
              v168 += 7;
              unint64_t v165 = v171;
              BOOL v14 = v169++ > 8;
            }

            while (!v14);
LABEL_341:
            LODWORD(v170) = 0;
            goto LABEL_424;
          }

          unsigned int v264 = 0;
          unint64_t v265 = 0;
          unsigned int v170 = 0LL;
          if (v166 <= v165) {
            unint64_t v166 = *((void *)this + 1);
          }
          while (2)
          {
            if (v166 == v165)
            {
              LODWORD(v170) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v266 = v165 + 1;
              char v267 = *(_BYTE *)(v167 + v165);
              *((void *)this + 1) = v266;
              v170 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                unint64_t v165 = v266;
                BOOL v14 = v265++ > 8;
                if (v14) {
                  goto LABEL_341;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v170) = 0;
              }
            }

            break;
          }

LABEL_424:
          *(_DWORD *)(a1 + 84) = v162;
          goto LABEL_210;
        case 0x1Cu:
          *(void *)(a1 + 156) |= 0x800000uLL;
          unint64_t v165 = *((void *)this + 1);
          if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v165);
          goto LABEL_191;
        case 0x1Du:
          *(void *)(a1 + 156) |= 0x100000uLL;
          unint64_t v166 = *((void *)this + 1);
          unint64_t v167 = *((void *)this + 2);
          uint64_t v168 = *(void *)this;
          if (v166 <= 0xFFFFFFFFFFFFFFF5LL && v166 + 10 <= v167)
          {
            char v169 = 0;
            unsigned int v170 = 0;
            uint64_t v171 = 0LL;
            do
            {
              unint64_t v172 = v166 + 1;
              *((void *)this + 1) = v166 + 1;
              char v173 = *(_BYTE *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0) {
                goto LABEL_428;
              }
              v169 += 7;
              unint64_t v166 = v172;
              BOOL v14 = v170++ > 8;
            }

            while (!v14);
LABEL_334:
            LODWORD(v171) = 0;
            goto LABEL_428;
          }

          char v271 = 0;
          unsigned int v272 = 0;
          uint64_t v171 = 0LL;
          if (v167 <= v166) {
            unint64_t v167 = *((void *)this + 1);
          }
          while (2)
          {
            if (v167 == v166)
            {
              LODWORD(v171) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v273 = v166 + 1;
              char v274 = *(_BYTE *)(v168 + v166);
              *((void *)this + 1) = v273;
              v171 |= (unint64_t)(v274 & 0x7F) << v271;
              if (v274 < 0)
              {
                v271 += 7;
                unint64_t v166 = v273;
                BOOL v14 = v272++ > 8;
                if (v14) {
                  goto LABEL_334;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v171) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 120) = v90;
          goto LABEL_489;
        case 0x10u:
          *(void *)(a1 + 164) |= 0x2000000uLL;
          unint64_t v93 = *((void *)this + 1);
          unint64_t v94 = *((void *)this + 2);
          uint64_t v95 = *(void *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5LL && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0LL;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)this + 1) = v93 + 1;
              char v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_428;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }

            while (!v14);
LABEL_284:
            LODWORD(v9_Block_object_dispose(va, 8) = 0;
            goto LABEL_428;
          }

          unsigned int v256 = 0;
          unint64_t v257 = 0;
          uint64_t v98 = 0LL;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)this + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v9_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v258 = v93 + 1;
              char v259 = *(_BYTE *)(v95 + v93);
              *((void *)this + 1) = v258;
              v98 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                unint64_t v93 = v258;
                BOOL v14 = v257++ > 8;
                if (v14) {
                  goto LABEL_284;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v9_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 36) = v170;
          goto LABEL_356;
        case 0x1Cu:
          *(void *)(a1 + 184) |= 0x400000000uLL;
          char v173 = *((void *)this + 1);
          if (v173 > 0xFFFFFFFFFFFFFFFBLL || v173 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v173);
          goto LABEL_354;
        case 0x1Du:
          *(void *)(a1 + 184) |= 0x20000000000uLL;
          unint64_t v174 = *((void *)this + 1);
          if (v174 >= *((void *)this + 2))
          {
            uint64_t v177 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v175 = v174 + 1;
            unint64_t v176 = *(unsigned __int8 *)(*(void *)this + v174);
            *((void *)this + 1) = v175;
            uint64_t v177 = v176 != 0;
          }

          *(_BYTE *)(a1 + 17_Block_object_dispose(va, 8) = v177;
          goto LABEL_356;
        case 0x1Eu:
          *(void *)(a1 + 184) |= 0x800000000uLL;
          char v178 = *((void *)this + 1);
          if (v178 > 0xFFFFFFFFFFFFFFFBLL || v178 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v178);
          goto LABEL_354;
        case 0x1Fu:
          *(void *)(a1 + 184) |= 0x40000000000uLL;
          unsigned int v179 = *((void *)this + 1);
          if (v179 >= *((void *)this + 2))
          {
            char v182 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v180 = v179 + 1;
            unint64_t v181 = *(unsigned __int8 *)(*(void *)this + v179);
            *((void *)this + 1) = v180;
            char v182 = v181 != 0;
          }

          *(_BYTE *)(a1 + 179) = v182;
          goto LABEL_356;
        case 0x20u:
          *(void *)(a1 + 184) |= 0x20uLL;
          unint64_t v183 = *((void *)this + 1);
          unint64_t v184 = *((void *)this + 2);
          uint64_t v185 = *(void *)this;
          if (v183 <= 0xFFFFFFFFFFFFFFF5LL && v183 + 10 <= v184)
          {
            char v186 = 0;
            unsigned int v187 = 0;
            uint64_t v188 = 0LL;
            do
            {
              unint64_t v189 = v183 + 1;
              *((void *)this + 1) = v183 + 1;
              char v190 = *(_BYTE *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0) {
                goto LABEL_428;
              }
              v186 += 7;
              unint64_t v183 = v189;
              BOOL v14 = v187++ > 8;
            }

            while (!v14);
LABEL_352:
            LODWORD(v18_Block_object_dispose(va, 8) = 0;
            goto LABEL_428;
          }

          unsigned int v268 = 0;
          unint64_t v269 = 0;
          uint64_t v188 = 0LL;
          if (v184 <= v183) {
            unint64_t v184 = *((void *)this + 1);
          }
          break;
        case 0x21u:
          *(void *)(a1 + 184) |= 0x80uLL;
          unint64_t v191 = *((void *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v191);
          goto LABEL_354;
        case 0x22u:
          *(void *)(a1 + 184) |= 0x4000000uLL;
          uint64_t v192 = *((void *)this + 1);
          if (v192 > 0xFFFFFFFFFFFFFFFBLL || v192 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v192);
          goto LABEL_354;
        case 0x23u:
          *(void *)(a1 + 184) |= 0x8000000uLL;
          unint64_t v193 = *((void *)this + 1);
          if (v193 > 0xFFFFFFFFFFFFFFFBLL || v193 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v193);
          goto LABEL_354;
        case 0x24u:
          *(void *)(a1 + 184) |= 0x10000000uLL;
          unint64_t v194 = *((void *)this + 1);
          if (v194 > 0xFFFFFFFFFFFFFFFBLL || v194 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v194);
          goto LABEL_354;
        case 0x25u:
          *(void *)(a1 + 184) |= 0x40uLL;
          uint64_t v195 = *((void *)this + 1);
          if (v195 > 0xFFFFFFFFFFFFFFFBLL || v195 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v195);
          goto LABEL_354;
        case 0x26u:
          *(void *)(a1 + 184) |= 0x100uLL;
          char v196 = *((void *)this + 1);
          if (v196 > 0xFFFFFFFFFFFFFFFBLL || v196 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v196);
          goto LABEL_354;
        case 0x27u:
          *(void *)(a1 + 184) |= 0x200uLL;
          unsigned int v197 = *((void *)this + 1);
          if (v197 > 0xFFFFFFFFFFFFFFFBLL || v197 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v197);
          goto LABEL_354;
        case 0x28u:
          *(void *)(a1 + 184) |= 0x400000uLL;
          uint64_t v198 = *((void *)this + 1);
          if (v198 > 0xFFFFFFFFFFFFFFFBLL || v198 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v198);
          goto LABEL_354;
        case 0x29u:
          *(void *)(a1 + 184) |= 0x800000uLL;
          unint64_t v199 = *((void *)this + 1);
          if (v199 > 0xFFFFFFFFFFFFFFFBLL || v199 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v199);
          goto LABEL_354;
        case 0x2Au:
          *(void *)(a1 + 184) |= 0x1000000uLL;
          char v200 = *((void *)this + 1);
          if (v200 > 0xFFFFFFFFFFFFFFFBLL || v200 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v200);
          goto LABEL_354;
        case 0x2Bu:
          *(void *)(a1 + 184) |= 0x40000000uLL;
          unint64_t v201 = *((void *)this + 1);
          if (v201 > 0xFFFFFFFFFFFFFFFBLL || v201 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v201);
          goto LABEL_354;
        case 0x2Cu:
          *(void *)(a1 + 184) |= 0x80000000uLL;
          unint64_t v202 = *((void *)this + 1);
          if (v202 > 0xFFFFFFFFFFFFFFFBLL || v202 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v202);
          goto LABEL_354;
        case 0x2Du:
          *(void *)(a1 + 184) |= (unint64_t)&_mh_execute_header;
          uint64_t v203 = *((void *)this + 1);
          if (v203 <= 0xFFFFFFFFFFFFFFFBLL && v203 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v203);
LABEL_354:
            unint64_t v55 = *((void *)this + 1) + 4LL;
LABEL_355:
            *((void *)this + 1) = v55;
          }

          else
          {
LABEL_221:
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_356;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_356;
      }

      while (1)
      {
        if (v184 == v183)
        {
          LODWORD(v18_Block_object_dispose(va, 8) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_428;
        }

        char v270 = v183 + 1;
        char v271 = *(_BYTE *)(v185 + v183);
        *((void *)this + 1) = v270;
        v188 |= (unint64_t)(v271 & 0x7F) << v268;
        if ((v271 & 0x80) == 0) {
          break;
        }
        v268 += 7;
        unint64_t v183 = v270;
        BOOL v14 = v269++ > 8;
        if (v14) {
          goto LABEL_352;
        }
      }

      if (*((_BYTE *)this + 24)) {
        LODWORD(v18_Block_object_dispose(va, 8) = 0;
      }
LABEL_428:
      *(_DWORD *)(a1 + 40) = v188;
LABEL_356:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

LABEL_428:
          *(_DWORD *)(a1 + 104) = v171;
          goto LABEL_210;
        case 0x1Eu:
          *(void *)(a1 + 156) |= 0x4000000uLL;
          unint64_t v174 = *((void *)this + 1);
          if (v174 > 0xFFFFFFFFFFFFFFFBLL || v174 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v174);
          goto LABEL_191;
        case 0x1Fu:
          *(void *)(a1 + 156) |= 0x1000000uLL;
          unint64_t v175 = *((void *)this + 1);
          unint64_t v176 = *((void *)this + 2);
          uint64_t v177 = *(void *)this;
          if (v175 <= 0xFFFFFFFFFFFFFFF5LL && v175 + 10 <= v176)
          {
            char v178 = 0;
            unsigned int v179 = 0;
            uint64_t v180 = 0LL;
            do
            {
              unint64_t v181 = v175 + 1;
              *((void *)this + 1) = v175 + 1;
              char v182 = *(_BYTE *)(v177 + v175);
              v180 |= (unint64_t)(v182 & 0x7F) << v178;
              if ((v182 & 0x80) == 0) {
                goto LABEL_432;
              }
              v178 += 7;
              unint64_t v175 = v181;
              BOOL v14 = v179++ > 8;
            }

            while (!v14);
LABEL_341:
            LODWORD(v180) = 0;
            goto LABEL_432;
          }

          char v275 = 0;
          unsigned int v276 = 0;
          uint64_t v180 = 0LL;
          if (v176 <= v175) {
            unint64_t v176 = *((void *)this + 1);
          }
          while (2)
          {
            if (v176 == v175)
            {
              LODWORD(v180) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v277 = v175 + 1;
              char v278 = *(_BYTE *)(v177 + v175);
              *((void *)this + 1) = v277;
              v180 |= (unint64_t)(v278 & 0x7F) << v275;
              if (v278 < 0)
              {
                v275 += 7;
                unint64_t v175 = v277;
                BOOL v14 = v276++ > 8;
                if (v14) {
                  goto LABEL_341;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v180) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = v98;
          goto LABEL_489;
        case 0x11u:
          *(void *)(a1 + 164) |= 0x8000000uLL;
          unint64_t v101 = *((void *)this + 1);
          unint64_t v102 = *((void *)this + 2);
          uint64_t v103 = *(void *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5LL && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0LL;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)this + 1) = v101 + 1;
              char v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_432;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }

            while (!v14);
LABEL_291:
            LODWORD(v106) = 0;
            goto LABEL_432;
          }

          unsigned int v260 = 0;
          unint64_t v261 = 0;
          uint64_t v106 = 0LL;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)this + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v262 = v101 + 1;
              char v263 = *(_BYTE *)(v103 + v101);
              *((void *)this + 1) = v262;
              v106 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                unint64_t v101 = v262;
                BOOL v14 = v261++ > 8;
                if (v14) {
                  goto LABEL_291;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v106) = 0;
              }
            }

            break;
          }

LABEL_432:
          *(_DWORD *)(a1 + 120) = v180;
          goto LABEL_210;
        case 0x20u:
          *(void *)(a1 + 156) |= 0x10uLL;
          unint64_t v183 = *((void *)this + 1);
          unint64_t v184 = *((void *)this + 2);
          uint64_t v185 = *(void *)this;
          if (v183 <= 0xFFFFFFFFFFFFFFF5LL && v183 + 10 <= v184)
          {
            char v186 = 0;
            unsigned int v187 = 0;
            uint64_t v188 = 0LL;
            do
            {
              unint64_t v189 = v183 + 1;
              *((void *)this + 1) = v183 + 1;
              char v190 = *(_BYTE *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0) {
                goto LABEL_436;
              }
              v186 += 7;
              unint64_t v183 = v189;
              BOOL v14 = v187++ > 8;
            }

            while (!v14);
LABEL_348:
            LODWORD(v18_Block_object_dispose(va, 8) = 0;
            goto LABEL_436;
          }

          char v279 = 0;
          unsigned int v280 = 0;
          uint64_t v188 = 0LL;
          if (v184 <= v183) {
            unint64_t v184 = *((void *)this + 1);
          }
          while (2)
          {
            if (v184 == v183)
            {
              LODWORD(v18_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v281 = v183 + 1;
              char v282 = *(_BYTE *)(v185 + v183);
              *((void *)this + 1) = v281;
              v188 |= (unint64_t)(v282 & 0x7F) << v279;
              if (v282 < 0)
              {
                v279 += 7;
                unint64_t v183 = v281;
                BOOL v14 = v280++ > 8;
                if (v14) {
                  goto LABEL_348;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v18_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 136) = v106;
          goto LABEL_489;
        case 0x12u:
          *(void *)(a1 + 164) |= 0x4000000uLL;
          unint64_t v109 = *((void *)this + 1);
          unint64_t v110 = *((void *)this + 2);
          uint64_t v111 = *(void *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5LL && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0LL;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)this + 1) = v109 + 1;
              char v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_436;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }

            while (!v14);
LABEL_298:
            LODWORD(v114) = 0;
            goto LABEL_436;
          }

          unsigned int v264 = 0;
          unint64_t v265 = 0;
          uint64_t v114 = 0LL;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)this + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v266 = v109 + 1;
              char v267 = *(_BYTE *)(v111 + v109);
              *((void *)this + 1) = v266;
              v114 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                unint64_t v109 = v266;
                BOOL v14 = v265++ > 8;
                if (v14) {
                  goto LABEL_298;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v114) = 0;
              }
            }

            break;
          }

LABEL_436:
          *(_DWORD *)(a1 + 40) = v188;
          goto LABEL_210;
        case 0x21u:
          *(void *)(a1 + 156) |= 0x40uLL;
          unint64_t v191 = *((void *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v191);
LABEL_191:
          uint64_t v192 = *((void *)this + 1) + 4LL;
          goto LABEL_192;
        case 0x22u:
          *(void *)(a1 + 156) |= 0x10000uLL;
          unint64_t v193 = *((void *)this + 1);
          unint64_t v194 = *((void *)this + 2);
          uint64_t v195 = *(void *)this;
          if (v193 <= 0xFFFFFFFFFFFFFFF5LL && v193 + 10 <= v194)
          {
            char v196 = 0;
            unsigned int v197 = 0;
            uint64_t v198 = 0LL;
            do
            {
              unint64_t v199 = v193 + 1;
              *((void *)this + 1) = v193 + 1;
              char v200 = *(_BYTE *)(v195 + v193);
              v198 |= (unint64_t)(v200 & 0x7F) << v196;
              if ((v200 & 0x80) == 0) {
                goto LABEL_440;
              }
              v196 += 7;
              unint64_t v193 = v199;
              BOOL v14 = v197++ > 8;
            }

            while (!v14);
LABEL_355:
            LODWORD(v19_Block_object_dispose(va, 8) = 0;
            goto LABEL_440;
          }

          char v283 = 0;
          unsigned int v284 = 0;
          uint64_t v198 = 0LL;
          if (v194 <= v193) {
            unint64_t v194 = *((void *)this + 1);
          }
          while (2)
          {
            if (v194 == v193)
            {
              LODWORD(v19_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v285 = v193 + 1;
              char v286 = *(_BYTE *)(v195 + v193);
              *((void *)this + 1) = v285;
              v198 |= (unint64_t)(v286 & 0x7F) << v283;
              if (v286 < 0)
              {
                v283 += 7;
                unint64_t v193 = v285;
                BOOL v14 = v284++ > 8;
                if (v14) {
                  goto LABEL_355;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v19_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 132) = v114;
          goto LABEL_489;
        case 0x13u:
          *(void *)(a1 + 164) |= 0x400000uLL;
          unint64_t v117 = *((void *)this + 1);
          unint64_t v118 = *((void *)this + 2);
          int v119 = *(void *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5LL && v117 + 10 <= v118)
          {
            BOOL v120 = 0;
            unint64_t v121 = 0;
            unint64_t v122 = 0LL;
            do
            {
              int v123 = v117 + 1;
              *((void *)this + 1) = v117 + 1;
              BOOL v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_440;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v14 = v121++ > 8;
            }

            while (!v14);
LABEL_305:
            LODWORD(v122) = 0;
            goto LABEL_440;
          }

          unsigned int v268 = 0;
          unint64_t v269 = 0;
          unint64_t v122 = 0LL;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)this + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v270 = v117 + 1;
              char v271 = *(_BYTE *)(v119 + v117);
              *((void *)this + 1) = v270;
              v122 |= (unint64_t)(v271 & 0x7F) << v268;
              if (v271 < 0)
              {
                v268 += 7;
                unint64_t v117 = v270;
                BOOL v14 = v269++ > 8;
                if (v14) {
                  goto LABEL_305;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v122) = 0;
              }
            }

            break;
          }

LABEL_440:
          *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = v198;
          goto LABEL_210;
        case 0x23u:
          *(void *)(a1 + 156) |= 0x2000uLL;
          unint64_t v201 = *((void *)this + 1);
          unint64_t v202 = *((void *)this + 2);
          uint64_t v203 = *(void *)this;
          if (v201 <= 0xFFFFFFFFFFFFFFF5LL && v201 + 10 <= v202)
          {
            char v204 = 0;
            unsigned int v205 = 0;
            uint64_t v206 = 0LL;
            do
            {
              unint64_t v207 = v201 + 1;
              *((void *)this + 1) = v201 + 1;
              char v208 = *(_BYTE *)(v203 + v201);
              v206 |= (unint64_t)(v208 & 0x7F) << v204;
              if ((v208 & 0x80) == 0) {
                goto LABEL_444;
              }
              v204 += 7;
              unint64_t v201 = v207;
              BOOL v14 = v205++ > 8;
            }

            while (!v14);
LABEL_362:
            LODWORD(v206) = 0;
            goto LABEL_444;
          }

          char v287 = 0;
          unsigned int v288 = 0;
          uint64_t v206 = 0LL;
          if (v202 <= v201) {
            unint64_t v202 = *((void *)this + 1);
          }
          break;
        case 0x24u:
          *(void *)(a1 + 156) |= 1uLL;
          unint64_t v209 = *((void *)this + 1);
          if (v209 <= 0xFFFFFFFFFFFFFFF7LL && v209 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(*(void *)this + v209);
LABEL_364:
            uint64_t v192 = *((void *)this + 1) + 8LL;
LABEL_192:
            *((void *)this + 1) = v192;
          }

          else
          {
LABEL_209:
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_210;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_210;
      }

      while (1)
      {
        if (v202 == v201)
        {
          LODWORD(v206) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_444;
        }

        unint64_t v289 = v201 + 1;
        char v290 = *(_BYTE *)(v203 + v201);
        *((void *)this + 1) = v289;
        v206 |= (unint64_t)(v290 & 0x7F) << v287;
        if ((v290 & 0x80) == 0) {
          break;
        }
        v287 += 7;
        unint64_t v201 = v289;
        BOOL v14 = v288++ > 8;
        if (v14) {
          goto LABEL_362;
        }
      }

      if (*((_BYTE *)this + 24)) {
        LODWORD(v206) = 0;
      }
LABEL_444:
      *(_DWORD *)(a1 + 76) = v206;
LABEL_210:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

          *(_DWORD *)(a1 + 116) = v122;
          goto LABEL_489;
        case 0x14u:
          *(void *)(a1 + 164) |= 0x1000000uLL;
          unint64_t v125 = *((void *)this + 1);
          unint64_t v126 = *((void *)this + 2);
          uint64_t v127 = *(void *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5LL && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0LL;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)this + 1) = v125 + 1;
              char v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_444;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }

            while (!v14);
LABEL_312:
            LODWORD(v130) = 0;
            goto LABEL_444;
          }

          unsigned int v272 = 0;
          unint64_t v273 = 0;
          uint64_t v130 = 0LL;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)this + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v274 = v125 + 1;
              char v275 = *(_BYTE *)(v127 + v125);
              *((void *)this + 1) = v274;
              v130 |= (unint64_t)(v275 & 0x7F) << v272;
              if (v275 < 0)
              {
                v272 += 7;
                unint64_t v125 = v274;
                BOOL v14 = v273++ > 8;
                if (v14) {
                  goto LABEL_312;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v130) = 0;
              }
            }

            break;
          }

uint64_t sub_10107BE94(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 156);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    uint64_t v4 = *(void *)(v3 + 156);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }

  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 2u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_41;
  }

double sub_10107C2A8(uint64_t a1)
{
  *(void *)a1 = &off_101898808;
  *(_DWORD *)(a1 + 396) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0LL;
  return result;
}

void sub_10107C2F8(PB::Base *this)
{
  *(void *)this = &off_101898808;
  unint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }

  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }

  uint64_t v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }

  uint64_t v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }

  int v7 = (void *)*((void *)this + 10);
  if (v7)
  {
    *((void *)this + 11) = v7;
    operator delete(v7);
  }

  uint64_t v8 = (void *)*((void *)this + 7);
  if (v8)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v8;
    operator delete(v8);
  }

  char v9 = (void *)*((void *)this + 4);
  if (v9)
  {
    *((void *)this + 5) = v9;
    operator delete(v9);
  }

  unsigned int v10 = (void *)*((void *)this + 1);
  if (v10)
  {
    *((void *)this + 2) = v10;
    operator delete(v10);
  }

  PB::Base::~Base(this);
}

void sub_10107C3B8(PB::Base *a1)
{
}

uint64_t sub_10107C3CC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  uint64_t v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  int v7 = (char *)(a1 + 152);
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v8 = (char *)(a1 + 200);
  *(void *)a1 = &off_101898808;
  *(_DWORD *)(a1 + 396) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 216) = 0LL;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x80000) != 0)
  {
    uint64_t v11 = *(void *)(a2 + 376);
    int v10 = 0x80000;
    *(_DWORD *)(a1 + 396) = 0x80000;
    *(void *)(a1 + 376) = v11;
    int v9 = *(_DWORD *)(a2 + 396);
    if ((v9 & 0x1000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v10 = 0;
  if ((v9 & 0x1000000) != 0)
  {
LABEL_5:
    char v12 = *(_BYTE *)(a2 + 388);
    v10 |= 0x1000000u;
    *(_DWORD *)(a1 + 396) = v10;
    *(_BYTE *)(a1 + 38_Block_object_dispose(va, 8) = v12;
    int v9 = *(_DWORD *)(a2 + 396);
  }

uint64_t sub_10107C8B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "absoluteTimestampOfImpact", *(double *)(a1 + 224));
    int v5 = *(_DWORD *)(a1 + 396);
    if ((v5 & 0x100000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_60;
    }
  }

  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "anyOffWristAfterImpact", *(_BYTE *)(a1 + 384));
  int v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_61;
  }

BOOL sub_10107CE6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v421 = a1 + 216;
    unsigned int v424 = (void **)(a1 + 152);
    unint64_t v425 = (void **)(a1 + 200);
    char v423 = (void **)(a1 + 176);
    uint64_t v419 = a1 + 192;
    uint64_t v420 = a1 + 168;
    char v422 = (void **)(a1 + 128);
    int v10 = (void **)(a1 + 80);
    uint64_t v417 = a1 + 96;
    uint64_t v418 = a1 + 144;
    double v11 = (void **)(a1 + 104);
    char v12 = (void **)(a1 + 56);
    uint64_t v415 = a1 + 72;
    uint64_t v416 = a1 + 120;
    char v13 = (void **)(a1 + 8);
    double v14 = (void **)(a1 + 32);
    uint64_t v413 = a1 + 48;
    uint64_t v414 = a1 + 24;
    while (1)
    {
      uint64_t v15 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0LL;
      while (1)
      {
        unint64_t v19 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v4 = v19;
        BOOL v21 = v17++ > 8;
        if (v21) {
          goto LABEL_20;
        }
      }

LABEL_542:
          *(void *)(a1 + 376) = v34;
          goto LABEL_641;
        case 2u:
          *(_DWORD *)(a1 + 396) |= 0x1000000u;
          unint64_t v175 = *((void *)this + 1);
          if (v175 >= *((void *)this + 2))
          {
            BOOL v178 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v176 = v175 + 1;
            int v177 = *(unsigned __int8 *)(*(void *)this + v175);
            *((void *)this + 1) = v176;
            BOOL v178 = v177 != 0;
          }

          *(_BYTE *)(a1 + 38_Block_object_dispose(va, 8) = v178;
          goto LABEL_641;
        case 3u:
          *(_DWORD *)(a1 + 396) |= 1u;
          unint64_t v179 = *((void *)this + 1);
          if (v179 > 0xFFFFFFFFFFFFFFF7LL || v179 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 224) = *(void *)(*(void *)this + v179);
          goto LABEL_640;
        case 4u:
          *(_DWORD *)(a1 + 396) |= 0x40000u;
          unint64_t v180 = *((void *)this + 1);
          if (v180 > 0xFFFFFFFFFFFFFFF7LL || v180 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 36_Block_object_dispose(va, 8) = *(void *)(*(void *)this + v180);
          goto LABEL_640;
        case 5u:
          *(_DWORD *)(a1 + 396) |= 2u;
          unint64_t v181 = *((void *)this + 1);
          unint64_t v182 = *((void *)this + 2);
          uint64_t v183 = *(void *)this;
          if (v181 <= 0xFFFFFFFFFFFFFFF5LL && v181 + 10 <= v182)
          {
            char v184 = 0;
            unsigned int v185 = 0;
            uint64_t v186 = 0LL;
            do
            {
              unint64_t v187 = v181 + 1;
              *((void *)this + 1) = v181 + 1;
              char v188 = *(_BYTE *)(v183 + v181);
              v186 |= (unint64_t)(v188 & 0x7F) << v184;
              if ((v188 & 0x80) == 0) {
                goto LABEL_545;
              }
              v184 += 7;
              unint64_t v181 = v187;
              BOOL v21 = v185++ > 8;
            }

            while (!v21);
LABEL_394:
            uint64_t v186 = 0LL;
            goto LABEL_545;
          }

          char v310 = 0;
          unsigned int v311 = 0;
          uint64_t v186 = 0LL;
          if (v182 <= v181) {
            unint64_t v182 = *((void *)this + 1);
          }
          while (2)
          {
            if (v182 == v181)
            {
              uint64_t v186 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v312 = v181 + 1;
              char v313 = *(_BYTE *)(v183 + v181);
              *((void *)this + 1) = v312;
              v186 |= (unint64_t)(v313 & 0x7F) << v310;
              if (v313 < 0)
              {
                v310 += 7;
                unint64_t v181 = v312;
                BOOL v21 = v311++ > 8;
                if (v21) {
                  goto LABEL_394;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v186 = 0LL;
              }
            }

            break;
          }

LABEL_545:
          *(void *)(a1 + 232) = v186;
          goto LABEL_641;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x30u:
        case 0x31u:
        case 0x32u:
LABEL_58:
          uint64_t v55 = v3;
          char v56 = v14;
          unint64_t v57 = v13;
          unint64_t v58 = v12;
          uint64_t v59 = v11;
          char v60 = v10;
          unsigned int v61 = v2;
          char v62 = PB::Reader::skip(this, v28, v18 & 7, 0);
          unint64_t v2 = v61;
          int v10 = v60;
          double v11 = v59;
          char v12 = v58;
          char v13 = v57;
          double v14 = v56;
          uint64_t v3 = v55;
          if ((v62 & 1) == 0) {
            return 0LL;
          }
          goto LABEL_641;
        case 0x15u:
          *(_DWORD *)(a1 + 396) |= 0x10u;
          unint64_t v189 = *((void *)this + 1);
          unint64_t v190 = *((void *)this + 2);
          uint64_t v191 = *(void *)this;
          if (v189 <= 0xFFFFFFFFFFFFFFF5LL && v189 + 10 <= v190)
          {
            char v192 = 0;
            unsigned int v193 = 0;
            uint64_t v194 = 0LL;
            do
            {
              unint64_t v195 = v189 + 1;
              *((void *)this + 1) = v189 + 1;
              char v196 = *(_BYTE *)(v191 + v189);
              v194 |= (unint64_t)(v196 & 0x7F) << v192;
              if ((v196 & 0x80) == 0) {
                goto LABEL_548;
              }
              v192 += 7;
              unint64_t v189 = v195;
              BOOL v21 = v193++ > 8;
            }

            while (!v21);
LABEL_401:
            uint64_t v194 = 0LL;
            goto LABEL_548;
          }

          char v314 = 0;
          unsigned int v315 = 0;
          uint64_t v194 = 0LL;
          if (v190 <= v189) {
            unint64_t v190 = *((void *)this + 1);
          }
          while (2)
          {
            if (v190 == v189)
            {
              uint64_t v194 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v316 = v189 + 1;
              char v317 = *(_BYTE *)(v191 + v189);
              *((void *)this + 1) = v316;
              v194 |= (unint64_t)(v317 & 0x7F) << v314;
              if (v317 < 0)
              {
                v314 += 7;
                unint64_t v189 = v316;
                BOOL v21 = v315++ > 8;
                if (v21) {
                  goto LABEL_401;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v194 = 0LL;
              }
            }

            break;
          }

LABEL_548:
          *(void *)(a1 + 256) = v194;
          goto LABEL_641;
        case 0x16u:
          *(_DWORD *)(a1 + 396) |= 0x20u;
          unint64_t v197 = *((void *)this + 1);
          if (v197 > 0xFFFFFFFFFFFFFFF7LL || v197 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 264) = *(void *)(*(void *)this + v197);
          goto LABEL_640;
        case 0x17u:
          *(_DWORD *)(a1 + 396) |= 0x100u;
          unint64_t v198 = *((void *)this + 1);
          if (v198 > 0xFFFFFFFFFFFFFFF7LL || v198 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 28_Block_object_dispose(va, 8) = *(void *)(*(void *)this + v198);
          goto LABEL_640;
        case 0x18u:
          *(_DWORD *)(a1 + 396) |= 0x400u;
          unint64_t v199 = *((void *)this + 1);
          if (v199 > 0xFFFFFFFFFFFFFFF7LL || v199 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 304) = *(void *)(*(void *)this + v199);
          goto LABEL_640;
        case 0x19u:
          *(_DWORD *)(a1 + 396) |= 0x200u;
          unint64_t v200 = *((void *)this + 1);
          if (v200 > 0xFFFFFFFFFFFFFFF7LL || v200 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 296) = *(void *)(*(void *)this + v200);
          goto LABEL_640;
        case 0x1Au:
          *(_DWORD *)(a1 + 396) |= 0x80u;
          unint64_t v201 = *((void *)this + 1);
          if (v201 > 0xFFFFFFFFFFFFFFF7LL || v201 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 280) = *(void *)(*(void *)this + v201);
          goto LABEL_640;
        case 0x1Bu:
          *(_DWORD *)(a1 + 396) |= 0x40u;
          unint64_t v202 = *((void *)this + 1);
          if (v202 > 0xFFFFFFFFFFFFFFF7LL || v202 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 272) = *(void *)(*(void *)this + v202);
          goto LABEL_640;
        case 0x1Cu:
          *(_DWORD *)(a1 + 396) |= 0x1000u;
          unint64_t v203 = *((void *)this + 1);
          if (v203 > 0xFFFFFFFFFFFFFFF7LL || v203 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 320) = *(void *)(*(void *)this + v203);
          goto LABEL_640;
        case 0x1Du:
          *(_DWORD *)(a1 + 396) |= 0x800u;
          unint64_t v204 = *((void *)this + 1);
          if (v204 > 0xFFFFFFFFFFFFFFF7LL || v204 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 312) = *(void *)(*(void *)this + v204);
          goto LABEL_640;
        case 0x1Eu:
          *(_DWORD *)(a1 + 396) |= 0x20000u;
          unint64_t v205 = *((void *)this + 1);
          unint64_t v206 = *((void *)this + 2);
          uint64_t v207 = *(void *)this;
          if (v205 <= 0xFFFFFFFFFFFFFFF5LL && v205 + 10 <= v206)
          {
            char v208 = 0;
            unsigned int v209 = 0;
            uint64_t v210 = 0LL;
            do
            {
              unint64_t v211 = v205 + 1;
              *((void *)this + 1) = v205 + 1;
              char v212 = *(_BYTE *)(v207 + v205);
              v210 |= (unint64_t)(v212 & 0x7F) << v208;
              if ((v212 & 0x80) == 0) {
                goto LABEL_551;
              }
              v208 += 7;
              unint64_t v205 = v211;
              BOOL v21 = v209++ > 8;
            }

            while (!v21);
LABEL_408:
            uint64_t v210 = 0LL;
            goto LABEL_551;
          }

          char v318 = 0;
          unsigned int v319 = 0;
          uint64_t v210 = 0LL;
          if (v206 <= v205) {
            unint64_t v206 = *((void *)this + 1);
          }
          while (2)
          {
            if (v206 == v205)
            {
              uint64_t v210 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v320 = v205 + 1;
              char v321 = *(_BYTE *)(v207 + v205);
              *((void *)this + 1) = v320;
              v210 |= (unint64_t)(v321 & 0x7F) << v318;
              if (v321 < 0)
              {
                v318 += 7;
                unint64_t v205 = v320;
                BOOL v21 = v319++ > 8;
                if (v21) {
                  goto LABEL_408;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v210 = 0LL;
              }
            }

            break;
          }

LABEL_551:
          *(void *)(a1 + 360) = v210;
          goto LABEL_641;
        case 0x1Fu:
          *(_DWORD *)(a1 + 396) |= 0x10000u;
          unint64_t v213 = *((void *)this + 1);
          unint64_t v214 = *((void *)this + 2);
          uint64_t v215 = *(void *)this;
          if (v213 <= 0xFFFFFFFFFFFFFFF5LL && v213 + 10 <= v214)
          {
            char v216 = 0;
            unsigned int v217 = 0;
            uint64_t v218 = 0LL;
            do
            {
              unint64_t v219 = v213 + 1;
              *((void *)this + 1) = v213 + 1;
              char v220 = *(_BYTE *)(v215 + v213);
              v218 |= (unint64_t)(v220 & 0x7F) << v216;
              if ((v220 & 0x80) == 0) {
                goto LABEL_554;
              }
              v216 += 7;
              unint64_t v213 = v219;
              BOOL v21 = v217++ > 8;
            }

            while (!v21);
LABEL_415:
            uint64_t v218 = 0LL;
            goto LABEL_554;
          }

          char v322 = 0;
          unsigned int v323 = 0;
          uint64_t v218 = 0LL;
          if (v214 <= v213) {
            unint64_t v214 = *((void *)this + 1);
          }
          while (2)
          {
            if (v214 == v213)
            {
              uint64_t v218 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v324 = v213 + 1;
              char v325 = *(_BYTE *)(v215 + v213);
              *((void *)this + 1) = v324;
              v218 |= (unint64_t)(v325 & 0x7F) << v322;
              if (v325 < 0)
              {
                v322 += 7;
                unint64_t v213 = v324;
                BOOL v21 = v323++ > 8;
                if (v21) {
                  goto LABEL_415;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v218 = 0LL;
              }
            }

            break;
          }

LABEL_554:
          *(void *)(a1 + 352) = v218;
          goto LABEL_641;
        case 0x20u:
          *(_DWORD *)(a1 + 396) |= 0x8000u;
          unint64_t v221 = *((void *)this + 1);
          unint64_t v222 = *((void *)this + 2);
          uint64_t v223 = *(void *)this;
          if (v221 <= 0xFFFFFFFFFFFFFFF5LL && v221 + 10 <= v222)
          {
            char v224 = 0;
            unsigned int v225 = 0;
            uint64_t v226 = 0LL;
            do
            {
              unint64_t v227 = v221 + 1;
              *((void *)this + 1) = v221 + 1;
              char v228 = *(_BYTE *)(v223 + v221);
              v226 |= (unint64_t)(v228 & 0x7F) << v224;
              if ((v228 & 0x80) == 0) {
                goto LABEL_557;
              }
              v224 += 7;
              unint64_t v221 = v227;
              BOOL v21 = v225++ > 8;
            }

            while (!v21);
LABEL_422:
            uint64_t v226 = 0LL;
            goto LABEL_557;
          }

          char v326 = 0;
          unsigned int v327 = 0;
          uint64_t v226 = 0LL;
          if (v222 <= v221) {
            unint64_t v222 = *((void *)this + 1);
          }
          while (2)
          {
            if (v222 == v221)
            {
              uint64_t v226 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v328 = v221 + 1;
              char v329 = *(_BYTE *)(v223 + v221);
              *((void *)this + 1) = v328;
              v226 |= (unint64_t)(v329 & 0x7F) << v326;
              if (v329 < 0)
              {
                v326 += 7;
                unint64_t v221 = v328;
                BOOL v21 = v327++ > 8;
                if (v21) {
                  goto LABEL_422;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v226 = 0LL;
              }
            }

            break;
          }

LABEL_557:
          *(void *)(a1 + 344) = v226;
          goto LABEL_641;
        case 0x21u:
          *(_DWORD *)(a1 + 396) |= 0x4000u;
          unint64_t v229 = *((void *)this + 1);
          unint64_t v230 = *((void *)this + 2);
          uint64_t v231 = *(void *)this;
          if (v229 <= 0xFFFFFFFFFFFFFFF5LL && v229 + 10 <= v230)
          {
            char v232 = 0;
            unsigned int v233 = 0;
            uint64_t v234 = 0LL;
            do
            {
              unint64_t v235 = v229 + 1;
              *((void *)this + 1) = v229 + 1;
              char v236 = *(_BYTE *)(v231 + v229);
              v234 |= (unint64_t)(v236 & 0x7F) << v232;
              if ((v236 & 0x80) == 0) {
                goto LABEL_560;
              }
              v232 += 7;
              unint64_t v229 = v235;
              BOOL v21 = v233++ > 8;
            }

            while (!v21);
LABEL_429:
            uint64_t v234 = 0LL;
            goto LABEL_560;
          }

          char v330 = 0;
          unsigned int v331 = 0;
          uint64_t v234 = 0LL;
          if (v230 <= v229) {
            unint64_t v230 = *((void *)this + 1);
          }
          while (2)
          {
            if (v230 == v229)
            {
              uint64_t v234 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v332 = v229 + 1;
              char v333 = *(_BYTE *)(v231 + v229);
              *((void *)this + 1) = v332;
              v234 |= (unint64_t)(v333 & 0x7F) << v330;
              if (v333 < 0)
              {
                v330 += 7;
                unint64_t v229 = v332;
                BOOL v21 = v331++ > 8;
                if (v21) {
                  goto LABEL_429;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v234 = 0LL;
              }
            }

            break;
          }

LABEL_560:
          *(void *)(a1 + 336) = v234;
          goto LABEL_641;
        case 0x22u:
          *(_DWORD *)(a1 + 396) |= 0x2000u;
          unint64_t v237 = *((void *)this + 1);
          unint64_t v238 = *((void *)this + 2);
          uint64_t v239 = *(void *)this;
          if (v237 <= 0xFFFFFFFFFFFFFFF5LL && v237 + 10 <= v238)
          {
            char v240 = 0;
            unsigned int v241 = 0;
            uint64_t v242 = 0LL;
            do
            {
              unint64_t v243 = v237 + 1;
              *((void *)this + 1) = v237 + 1;
              char v244 = *(_BYTE *)(v239 + v237);
              v242 |= (unint64_t)(v244 & 0x7F) << v240;
              if ((v244 & 0x80) == 0) {
                goto LABEL_563;
              }
              v240 += 7;
              unint64_t v237 = v243;
              BOOL v21 = v241++ > 8;
            }

            while (!v21);
LABEL_436:
            uint64_t v242 = 0LL;
            goto LABEL_563;
          }

          char v334 = 0;
          unsigned int v335 = 0;
          uint64_t v242 = 0LL;
          if (v238 <= v237) {
            unint64_t v238 = *((void *)this + 1);
          }
          while (2)
          {
            if (v238 == v237)
            {
              uint64_t v242 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v336 = v237 + 1;
              char v337 = *(_BYTE *)(v239 + v237);
              *((void *)this + 1) = v336;
              v242 |= (unint64_t)(v337 & 0x7F) << v334;
              if (v337 < 0)
              {
                v334 += 7;
                unint64_t v237 = v336;
                BOOL v21 = v335++ > 8;
                if (v21) {
                  goto LABEL_436;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v242 = 0LL;
              }
            }

            break;
          }

LABEL_563:
          *(void *)(a1 + 32_Block_object_dispose(va, 8) = v242;
          goto LABEL_641;
        case 0x29u:
          *(_DWORD *)(a1 + 396) |= 0x80000000;
          unint64_t v245 = *((void *)this + 1);
          if (v245 >= *((void *)this + 2))
          {
            BOOL v248 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v246 = v245 + 1;
            int v247 = *(unsigned __int8 *)(*(void *)this + v245);
            *((void *)this + 1) = v246;
            BOOL v248 = v247 != 0;
          }

          *(_BYTE *)(a1 + 395) = v248;
          goto LABEL_641;
        case 0x2Au:
          *(_DWORD *)(a1 + 396) |= 4u;
          unint64_t v249 = *((void *)this + 1);
          if (v249 > 0xFFFFFFFFFFFFFFF7LL || v249 + 8 > *((void *)this + 2)) {
            goto LABEL_342;
          }
          *(void *)(a1 + 240) = *(void *)(*(void *)this + v249);
          goto LABEL_640;
        case 0x2Bu:
          *(_DWORD *)(a1 + 396) |= 8u;
          unint64_t v250 = *((void *)this + 1);
          if (v250 > 0xFFFFFFFFFFFFFFF7LL || v250 + 8 > *((void *)this + 2))
          {
LABEL_342:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_641;
          }

          *(void *)(a1 + 24_Block_object_dispose(va, 8) = *(void *)(*(void *)this + v250);
          goto LABEL_640;
        case 0x33u:
          *(_DWORD *)(a1 + 396) |= 0x100000u;
          unint64_t v251 = *((void *)this + 1);
          if (v251 >= *((void *)this + 2))
          {
            BOOL v254 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v252 = v251 + 1;
            int v253 = *(unsigned __int8 *)(*(void *)this + v251);
            *((void *)this + 1) = v252;
            BOOL v254 = v253 != 0;
          }

          *(_BYTE *)(a1 + 384) = v254;
          goto LABEL_641;
        case 0x34u:
          *(_DWORD *)(a1 + 396) |= 0x400000u;
          unint64_t v255 = *((void *)this + 1);
          if (v255 >= *((void *)this + 2))
          {
            BOOL v258 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v256 = v255 + 1;
            int v257 = *(unsigned __int8 *)(*(void *)this + v255);
            *((void *)this + 1) = v256;
            BOOL v258 = v257 != 0;
          }

          *(_BYTE *)(a1 + 386) = v258;
          goto LABEL_641;
        case 0x35u:
          *(_DWORD *)(a1 + 396) |= 0x40000000u;
          unint64_t v259 = *((void *)this + 1);
          if (v259 >= *((void *)this + 2))
          {
            BOOL v262 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v260 = v259 + 1;
            int v261 = *(unsigned __int8 *)(*(void *)this + v259);
            *((void *)this + 1) = v260;
            BOOL v262 = v261 != 0;
          }

          *(_BYTE *)(a1 + 394) = v262;
          goto LABEL_641;
        case 0x36u:
          *(_DWORD *)(a1 + 396) |= 0x200000u;
          unint64_t v263 = *((void *)this + 1);
          if (v263 >= *((void *)this + 2))
          {
            BOOL v266 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v264 = v263 + 1;
            int v265 = *(unsigned __int8 *)(*(void *)this + v263);
            *((void *)this + 1) = v264;
            BOOL v266 = v265 != 0;
          }

          *(_BYTE *)(a1 + 385) = v266;
          goto LABEL_641;
        case 0x37u:
          *(_DWORD *)(a1 + 396) |= 0x800000u;
          unint64_t v267 = *((void *)this + 1);
          if (v267 >= *((void *)this + 2))
          {
            BOOL v270 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v268 = v267 + 1;
            int v269 = *(unsigned __int8 *)(*(void *)this + v267);
            *((void *)this + 1) = v268;
            BOOL v270 = v269 != 0;
          }

          *(_BYTE *)(a1 + 387) = v270;
          goto LABEL_641;
        default:
          switch((int)v28)
          {
            case 151:
              if ((_DWORD)v27 != 2)
              {
                unsigned int v288 = *(char **)(a1 + 40);
                unint64_t v287 = *(void *)(a1 + 48);
                if ((unint64_t)v288 >= v287)
                {
                  unsigned int v338 = (char *)*v14;
                  uint64_t v339 = (v288 - (_BYTE *)*v14) >> 3;
                  unint64_t v340 = v339 + 1;
                  if ((unint64_t)(v339 + 1) >> 61) {
LABEL_651:
                  }
                    sub_100007008();
                  uint64_t v341 = v287 - (void)v338;
                  if (v341 >> 2 > v340) {
                    unint64_t v340 = v341 >> 2;
                  }
                  else {
                    unint64_t v342 = v340;
                  }
                  if (v342)
                  {
                    unint64_t v343 = (char *)sub_1000071BC(v413, v342);
                    unsigned int v338 = *(char **)(a1 + 32);
                    unsigned int v288 = *(char **)(a1 + 40);
                  }

                  else
                  {
                    unint64_t v343 = 0LL;
                  }

                  unsigned int v392 = &v343[8 * v339];
                  *(void *)unsigned int v392 = 0LL;
                  unint64_t v289 = v392 + 8;
                  while (v288 != v338)
                  {
                    uint64_t v393 = *((void *)v288 - 1);
                    v288 -= 8;
                    *((void *)v392 - 1) = v393;
                    v392 -= 8;
                  }

                  *(void *)(a1 + 32) = v392;
                  *(void *)(a1 + 40) = v289;
                  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v343[8 * v342];
                  if (v338) {
                    operator delete(v338);
                  }
                  unint64_t v2 = &jpt_10107D004;
                }

                else
                {
                  *(void *)unsigned int v288 = 0LL;
                  unint64_t v289 = v288 + 8;
                }

                *(void *)(a1 + 40) = v289;
                goto LABEL_636;
              }

              if ((PB::Reader::placeMark(this, v426, v27, 1LL) & 1) != 0) {
                return 0LL;
              }
              unint64_t v37 = *((void *)this + 1);
              unint64_t v38 = *((void *)this + 2);
              while (v37 < v38 && !*((_BYTE *)this + 24))
              {
                char v40 = *(char **)(a1 + 40);
                unint64_t v39 = *(void *)(a1 + 48);
                if ((unint64_t)v40 >= v39)
                {
                  char v42 = (char *)*v14;
                  uint64_t v43 = (v40 - (_BYTE *)*v14) >> 3;
                  unint64_t v44 = v43 + 1;
                  uint64_t v45 = v39 - (void)v42;
                  if (v45 >> 2 > v44) {
                    unint64_t v44 = v45 >> 2;
                  }
                  else {
                    unint64_t v46 = v44;
                  }
                  if (v46)
                  {
                    unint64_t v47 = (char *)sub_1000071BC(v413, v46);
                    char v42 = *(char **)(a1 + 32);
                    char v40 = *(char **)(a1 + 40);
                  }

                  else
                  {
                    unint64_t v47 = 0LL;
                  }

                  char v48 = &v47[8 * v43];
                  *(void *)char v48 = 0LL;
                  char v41 = v48 + 8;
                  while (v40 != v42)
                  {
                    uint64_t v49 = *((void *)v40 - 1);
                    v40 -= 8;
                    *((void *)v48 - 1) = v49;
                    v48 -= 8;
                  }

                  *(void *)(a1 + 32) = v48;
                  *(void *)(a1 + 40) = v41;
                  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v47[8 * v46];
                  if (v42) {
                    operator delete(v42);
                  }
                }

                else
                {
                  *(void *)char v40 = 0LL;
                  char v41 = v40 + 8;
                }

                *(void *)(a1 + 40) = v41;
                unint64_t v50 = *((void *)this + 1);
                if (v50 > 0xFFFFFFFFFFFFFFF7LL || v50 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v41 - 1) = *(void *)(*(void *)this + v50);
                unint64_t v38 = *((void *)this + 2);
                unint64_t v37 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v37;
              }

              goto LABEL_253;
            case 152:
              if ((_DWORD)v27 != 2)
              {
                uint64_t v291 = *(char **)(a1 + 16);
                unint64_t v290 = *(void *)(a1 + 24);
                if ((unint64_t)v291 >= v290)
                {
                  uint64_t v344 = (char *)*v13;
                  uint64_t v345 = (v291 - (_BYTE *)*v13) >> 3;
                  unint64_t v346 = v345 + 1;
                  if ((unint64_t)(v345 + 1) >> 61) {
LABEL_652:
                  }
                    sub_100007008();
                  uint64_t v347 = v290 - (void)v344;
                  if (v347 >> 2 > v346) {
                    unint64_t v346 = v347 >> 2;
                  }
                  else {
                    unint64_t v348 = v346;
                  }
                  if (v348)
                  {
                    char v349 = (char *)sub_1000071BC(v414, v348);
                    uint64_t v344 = *(char **)(a1 + 8);
                    uint64_t v291 = *(char **)(a1 + 16);
                  }

                  else
                  {
                    char v349 = 0LL;
                  }

                  char v394 = &v349[8 * v345];
                  *(void *)char v394 = 0LL;
                  unint64_t v289 = v394 + 8;
                  while (v291 != v344)
                  {
                    uint64_t v395 = *((void *)v291 - 1);
                    v291 -= 8;
                    *((void *)v394 - 1) = v395;
                    v394 -= 8;
                  }

                  *(void *)(a1 + _Block_object_dispose(va, 8) = v394;
                  *(void *)(a1 + 16) = v289;
                  *(void *)(a1 + 24) = &v349[8 * v348];
                  if (v344) {
                    operator delete(v344);
                  }
                  unint64_t v2 = &jpt_10107D004;
                }

                else
                {
                  *(void *)uint64_t v291 = 0LL;
                  unint64_t v289 = v291 + 8;
                }

                *(void *)(a1 + 16) = v289;
                goto LABEL_636;
              }

              if ((PB::Reader::placeMark(this, v426, v27, 1LL) & 1) != 0) {
                return 0LL;
              }
              unint64_t v63 = *((void *)this + 1);
              unint64_t v64 = *((void *)this + 2);
              while (v63 < v64 && !*((_BYTE *)this + 24))
              {
                unint64_t v66 = *(char **)(a1 + 16);
                unint64_t v65 = *(void *)(a1 + 24);
                if ((unint64_t)v66 >= v65)
                {
                  unint64_t v68 = (char *)*v13;
                  uint64_t v69 = (v66 - (_BYTE *)*v13) >> 3;
                  unint64_t v70 = v69 + 1;
                  uint64_t v71 = v65 - (void)v68;
                  if (v71 >> 2 > v70) {
                    unint64_t v70 = v71 >> 2;
                  }
                  else {
                    unint64_t v72 = v70;
                  }
                  if (v72)
                  {
                    uint64_t v73 = (char *)sub_1000071BC(v414, v72);
                    unint64_t v68 = *(char **)(a1 + 8);
                    unint64_t v66 = *(char **)(a1 + 16);
                  }

                  else
                  {
                    uint64_t v73 = 0LL;
                  }

                  unint64_t v74 = &v73[8 * v69];
                  *(void *)unint64_t v74 = 0LL;
                  unint64_t v67 = v74 + 8;
                  while (v66 != v68)
                  {
                    uint64_t v75 = *((void *)v66 - 1);
                    v66 -= 8;
                    *((void *)v74 - 1) = v75;
                    v74 -= 8;
                  }

                  *(void *)(a1 + _Block_object_dispose(va, 8) = v74;
                  *(void *)(a1 + 16) = v67;
                  *(void *)(a1 + 24) = &v73[8 * v72];
                  if (v68) {
                    operator delete(v68);
                  }
                }

                else
                {
                  *(void *)unint64_t v66 = 0LL;
                  unint64_t v67 = v66 + 8;
                }

                *(void *)(a1 + 16) = v67;
                unint64_t v76 = *((void *)this + 1);
                if (v76 > 0xFFFFFFFFFFFFFFF7LL || v76 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v67 - 1) = *(void *)(*(void *)this + v76);
                unint64_t v64 = *((void *)this + 2);
                unint64_t v63 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v63;
              }

              goto LABEL_253;
            case 153:
              if ((_DWORD)v27 != 2)
              {
                char v293 = *(char **)(a1 + 64);
                unint64_t v292 = *(void *)(a1 + 72);
                if ((unint64_t)v293 >= v292)
                {
                  unint64_t v350 = (char *)*v12;
                  uint64_t v351 = (v293 - (_BYTE *)*v12) >> 3;
                  unint64_t v352 = v351 + 1;
                  if ((unint64_t)(v351 + 1) >> 61) {
LABEL_653:
                  }
                    sub_100007008();
                  uint64_t v353 = v292 - (void)v350;
                  if (v353 >> 2 > v352) {
                    unint64_t v352 = v353 >> 2;
                  }
                  else {
                    unint64_t v354 = v352;
                  }
                  if (v354)
                  {
                    uint64_t v355 = (char *)sub_1000071BC(v415, v354);
                    unint64_t v350 = *(char **)(a1 + 56);
                    char v293 = *(char **)(a1 + 64);
                  }

                  else
                  {
                    uint64_t v355 = 0LL;
                  }

                  unsigned int v396 = &v355[8 * v351];
                  *(void *)unsigned int v396 = 0LL;
                  unint64_t v289 = v396 + 8;
                  while (v293 != v350)
                  {
                    uint64_t v397 = *((void *)v293 - 1);
                    v293 -= 8;
                    *((void *)v396 - 1) = v397;
                    v396 -= 8;
                  }

                  *(void *)(a1 + 56) = v396;
                  *(void *)(a1 + 64) = v289;
                  *(void *)(a1 + 72) = &v355[8 * v354];
                  if (v350) {
                    operator delete(v350);
                  }
                  unint64_t v2 = &jpt_10107D004;
                }

                else
                {
                  *(void *)char v293 = 0LL;
                  unint64_t v289 = v293 + 8;
                }

                *(void *)(a1 + 64) = v289;
                goto LABEL_636;
              }

              if ((PB::Reader::placeMark(this, v426, v27, 1LL) & 1) != 0) {
                return 0LL;
              }
              unint64_t v77 = *((void *)this + 1);
              unint64_t v78 = *((void *)this + 2);
              while (v77 < v78 && !*((_BYTE *)this + 24))
              {
                char v80 = *(char **)(a1 + 64);
                unint64_t v79 = *(void *)(a1 + 72);
                if ((unint64_t)v80 >= v79)
                {
                  uint64_t v82 = (char *)*v12;
                  uint64_t v83 = (v80 - (_BYTE *)*v12) >> 3;
                  unint64_t v84 = v83 + 1;
                  uint64_t v85 = v79 - (void)v82;
                  if (v85 >> 2 > v84) {
                    unint64_t v84 = v85 >> 2;
                  }
                  else {
                    unint64_t v86 = v84;
                  }
                  if (v86)
                  {
                    int v87 = (char *)sub_1000071BC(v415, v86);
                    uint64_t v82 = *(char **)(a1 + 56);
                    char v80 = *(char **)(a1 + 64);
                  }

                  else
                  {
                    int v87 = 0LL;
                  }

                  BOOL v88 = &v87[8 * v83];
                  *(void *)BOOL v88 = 0LL;
                  unsigned int v81 = v88 + 8;
                  while (v80 != v82)
                  {
                    uint64_t v89 = *((void *)v80 - 1);
                    v80 -= 8;
                    *((void *)v88 - 1) = v89;
                    v88 -= 8;
                  }

                  *(void *)(a1 + 56) = v88;
                  *(void *)(a1 + 64) = v81;
                  *(void *)(a1 + 72) = &v87[8 * v86];
                  if (v82) {
                    operator delete(v82);
                  }
                }

                else
                {
                  *(void *)char v80 = 0LL;
                  unsigned int v81 = v80 + 8;
                }

                *(void *)(a1 + 64) = v81;
                unint64_t v90 = *((void *)this + 1);
                if (v90 > 0xFFFFFFFFFFFFFFF7LL || v90 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v81 - 1) = *(void *)(*(void *)this + v90);
                unint64_t v78 = *((void *)this + 2);
                unint64_t v77 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v77;
              }

              goto LABEL_253;
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
              goto LABEL_58;
            case 161:
              if ((_DWORD)v27 != 2)
              {
                unint64_t v295 = *(char **)(a1 + 112);
                unint64_t v294 = *(void *)(a1 + 120);
                if ((unint64_t)v295 >= v294)
                {
                  unint64_t v356 = (char *)*v11;
                  uint64_t v357 = (v295 - (_BYTE *)*v11) >> 3;
                  unint64_t v358 = v357 + 1;
                  if ((unint64_t)(v357 + 1) >> 61) {
LABEL_654:
                  }
                    sub_100007008();
                  uint64_t v359 = v294 - (void)v356;
                  if (v359 >> 2 > v358) {
                    unint64_t v358 = v359 >> 2;
                  }
                  else {
                    unint64_t v360 = v358;
                  }
                  if (v360)
                  {
                    char v361 = (char *)sub_1000071BC(v416, v360);
                    unint64_t v356 = *(char **)(a1 + 104);
                    unint64_t v295 = *(char **)(a1 + 112);
                  }

                  else
                  {
                    char v361 = 0LL;
                  }

                  char v398 = &v361[8 * v357];
                  *(void *)char v398 = 0LL;
                  unint64_t v289 = v398 + 8;
                  while (v295 != v356)
                  {
                    uint64_t v399 = *((void *)v295 - 1);
                    v295 -= 8;
                    *((void *)v398 - 1) = v399;
                    v398 -= 8;
                  }

                  *(void *)(a1 + 104) = v398;
                  *(void *)(a1 + 112) = v289;
                  *(void *)(a1 + 120) = &v361[8 * v360];
                  if (v356) {
                    operator delete(v356);
                  }
                  unint64_t v2 = &jpt_10107D004;
                }

                else
                {
                  *(void *)unint64_t v295 = 0LL;
                  unint64_t v289 = v295 + 8;
                }

                *(void *)(a1 + 112) = v289;
                goto LABEL_636;
              }

              if ((PB::Reader::placeMark(this, v426, v27, 1LL) & 1) != 0) {
                return 0LL;
              }
              unint64_t v91 = *((void *)this + 1);
              unint64_t v92 = *((void *)this + 2);
              while (v91 < v92 && !*((_BYTE *)this + 24))
              {
                unint64_t v94 = *(char **)(a1 + 112);
                unint64_t v93 = *(void *)(a1 + 120);
                if ((unint64_t)v94 >= v93)
                {
                  char v96 = (char *)*v11;
                  uint64_t v97 = (v94 - (_BYTE *)*v11) >> 3;
                  unint64_t v98 = v97 + 1;
                  uint64_t v99 = v93 - (void)v96;
                  if (v99 >> 2 > v98) {
                    unint64_t v98 = v99 >> 2;
                  }
                  else {
                    unint64_t v100 = v98;
                  }
                  if (v100)
                  {
                    unint64_t v101 = (char *)sub_1000071BC(v416, v100);
                    char v96 = *(char **)(a1 + 104);
                    unint64_t v94 = *(char **)(a1 + 112);
                  }

                  else
                  {
                    unint64_t v101 = 0LL;
                  }

                  unint64_t v102 = &v101[8 * v97];
                  *(void *)unint64_t v102 = 0LL;
                  uint64_t v95 = v102 + 8;
                  while (v94 != v96)
                  {
                    uint64_t v103 = *((void *)v94 - 1);
                    v94 -= 8;
                    *((void *)v102 - 1) = v103;
                    v102 -= 8;
                  }

                  *(void *)(a1 + 104) = v102;
                  *(void *)(a1 + 112) = v95;
                  *(void *)(a1 + 120) = &v101[8 * v100];
                  if (v96) {
                    operator delete(v96);
                  }
                }

                else
                {
                  *(void *)unint64_t v94 = 0LL;
                  uint64_t v95 = v94 + 8;
                }

                *(void *)(a1 + 112) = v95;
                unint64_t v104 = *((void *)this + 1);
                if (v104 > 0xFFFFFFFFFFFFFFF7LL || v104 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v95 - 1) = *(void *)(*(void *)this + v104);
                unint64_t v92 = *((void *)this + 2);
                unint64_t v91 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v91;
              }

              goto LABEL_253;
            case 162:
              if ((_DWORD)v27 != 2)
              {
                char v297 = *(char **)(a1 + 88);
                unint64_t v296 = *(void *)(a1 + 96);
                if ((unint64_t)v297 >= v296)
                {
                  unsigned int v362 = (char *)*v10;
                  uint64_t v363 = (v297 - (_BYTE *)*v10) >> 3;
                  unint64_t v364 = v363 + 1;
                  if ((unint64_t)(v363 + 1) >> 61) {
LABEL_655:
                  }
                    sub_100007008();
                  uint64_t v365 = v296 - (void)v362;
                  if (v365 >> 2 > v364) {
                    unint64_t v364 = v365 >> 2;
                  }
                  else {
                    unint64_t v366 = v364;
                  }
                  if (v366)
                  {
                    unint64_t v367 = (char *)sub_1000071BC(v417, v366);
                    unsigned int v362 = *(char **)(a1 + 80);
                    char v297 = *(char **)(a1 + 88);
                  }

                  else
                  {
                    unint64_t v367 = 0LL;
                  }

                  unsigned int v400 = &v367[8 * v363];
                  *(void *)unsigned int v400 = 0LL;
                  unint64_t v289 = v400 + 8;
                  while (v297 != v362)
                  {
                    uint64_t v401 = *((void *)v297 - 1);
                    v297 -= 8;
                    *((void *)v400 - 1) = v401;
                    v400 -= 8;
                  }

                  *(void *)(a1 + 80) = v400;
                  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v289;
                  *(void *)(a1 + 96) = &v367[8 * v366];
                  if (v362) {
                    operator delete(v362);
                  }
                  unint64_t v2 = &jpt_10107D004;
                }

                else
                {
                  *(void *)char v297 = 0LL;
                  unint64_t v289 = v297 + 8;
                }

                *(void *)(a1 + 8_Block_object_dispose(va, 8) = v289;
                goto LABEL_636;
              }

              if ((PB::Reader::placeMark(this, v426, v27, 1LL) & 1) != 0) {
                return 0LL;
              }
              unint64_t v105 = *((void *)this + 1);
              unint64_t v106 = *((void *)this + 2);
              while (v105 < v106 && !*((_BYTE *)this + 24))
              {
                char v108 = *(char **)(a1 + 88);
                unint64_t v107 = *(void *)(a1 + 96);
                if ((unint64_t)v108 >= v107)
                {
                  unint64_t v110 = (char *)*v10;
                  uint64_t v111 = (v108 - (_BYTE *)*v10) >> 3;
                  unint64_t v112 = v111 + 1;
                  uint64_t v113 = v107 - (void)v110;
                  if (v113 >> 2 > v112) {
                    unint64_t v112 = v113 >> 2;
                  }
                  else {
                    unint64_t v114 = v112;
                  }
                  if (v114)
                  {
                    unint64_t v115 = (char *)sub_1000071BC(v417, v114);
                    unint64_t v110 = *(char **)(a1 + 80);
                    char v108 = *(char **)(a1 + 88);
                  }

                  else
                  {
                    unint64_t v115 = 0LL;
                  }

                  char v116 = &v115[8 * v111];
                  *(void *)char v116 = 0LL;
                  unint64_t v109 = v116 + 8;
                  while (v108 != v110)
                  {
                    uint64_t v117 = *((void *)v108 - 1);
                    v108 -= 8;
                    *((void *)v116 - 1) = v117;
                    v116 -= 8;
                  }

                  *(void *)(a1 + 80) = v116;
                  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v109;
                  *(void *)(a1 + 96) = &v115[8 * v114];
                  if (v110) {
                    operator delete(v110);
                  }
                }

                else
                {
                  *(void *)char v108 = 0LL;
                  unint64_t v109 = v108 + 8;
                }

                *(void *)(a1 + 8_Block_object_dispose(va, 8) = v109;
                unint64_t v118 = *((void *)this + 1);
                if (v118 > 0xFFFFFFFFFFFFFFF7LL || v118 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v109 - 1) = *(void *)(*(void *)this + v118);
                unint64_t v106 = *((void *)this + 2);
                unint64_t v105 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v105;
              }

              goto LABEL_253;
            case 163:
              if ((_DWORD)v27 != 2)
              {
                uint64_t v299 = *(char **)(a1 + 136);
                unint64_t v298 = *(void *)(a1 + 144);
                if ((unint64_t)v299 >= v298)
                {
                  uint64_t v368 = (char *)*v422;
                  uint64_t v369 = (v299 - (_BYTE *)*v422) >> 3;
                  unint64_t v370 = v369 + 1;
                  if ((unint64_t)(v369 + 1) >> 61) {
LABEL_656:
                  }
                    sub_100007008();
                  uint64_t v371 = v298 - (void)v368;
                  if (v371 >> 2 > v370) {
                    unint64_t v370 = v371 >> 2;
                  }
                  else {
                    unint64_t v372 = v370;
                  }
                  if (v372)
                  {
                    char v373 = (char *)sub_1000071BC(v418, v372);
                    uint64_t v368 = *(char **)(a1 + 128);
                    uint64_t v299 = *(char **)(a1 + 136);
                  }

                  else
                  {
                    char v373 = 0LL;
                  }

                  char v402 = &v373[8 * v369];
                  *(void *)char v402 = 0LL;
                  unint64_t v289 = v402 + 8;
                  while (v299 != v368)
                  {
                    uint64_t v403 = *((void *)v299 - 1);
                    v299 -= 8;
                    *((void *)v402 - 1) = v403;
                    v402 -= 8;
                  }

                  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v402;
                  *(void *)(a1 + 136) = v289;
                  *(void *)(a1 + 144) = &v373[8 * v372];
                  if (v368) {
                    operator delete(v368);
                  }
                  unint64_t v2 = &jpt_10107D004;
                }

                else
                {
                  *(void *)uint64_t v299 = 0LL;
                  unint64_t v289 = v299 + 8;
                }

                *(void *)(a1 + 136) = v289;
                goto LABEL_636;
              }

              if ((PB::Reader::placeMark(this, v426, v27, 1LL) & 1) != 0) {
                return 0LL;
              }
              unint64_t v119 = *((void *)this + 1);
              unint64_t v120 = *((void *)this + 2);
              while (v119 < v120 && !*((_BYTE *)this + 24))
              {
                unint64_t v122 = *(char **)(a1 + 136);
                unint64_t v121 = *(void *)(a1 + 144);
                if ((unint64_t)v122 >= v121)
                {
                  BOOL v124 = (char *)*v422;
                  uint64_t v125 = (v122 - (_BYTE *)*v422) >> 3;
                  unint64_t v126 = v125 + 1;
                  uint64_t v127 = v121 - (void)v124;
                  if (v127 >> 2 > v126) {
                    unint64_t v126 = v127 >> 2;
                  }
                  else {
                    unint64_t v128 = v126;
                  }
                  if (v128)
                  {
                    unsigned int v129 = (char *)sub_1000071BC(v418, v128);
                    BOOL v124 = *(char **)(a1 + 128);
                    unint64_t v122 = *(char **)(a1 + 136);
                  }

                  else
                  {
                    unsigned int v129 = 0LL;
                  }

                  uint64_t v130 = &v129[8 * v125];
                  *(void *)uint64_t v130 = 0LL;
                  int v123 = v130 + 8;
                  while (v122 != v124)
                  {
                    uint64_t v131 = *((void *)v122 - 1);
                    v122 -= 8;
                    *((void *)v130 - 1) = v131;
                    v130 -= 8;
                  }

                  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v130;
                  *(void *)(a1 + 136) = v123;
                  *(void *)(a1 + 144) = &v129[8 * v128];
                  if (v124) {
                    operator delete(v124);
                  }
                }

                else
                {
                  *(void *)unint64_t v122 = 0LL;
                  int v123 = v122 + 8;
                }

                *(void *)(a1 + 136) = v123;
                unint64_t v132 = *((void *)this + 1);
                if (v132 > 0xFFFFFFFFFFFFFFF7LL || v132 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v123 - 1) = *(void *)(*(void *)this + v132);
                unint64_t v120 = *((void *)this + 2);
                unint64_t v119 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v119;
              }

              goto LABEL_253;
            case 164:
              if ((_DWORD)v27 != 2)
              {
                char v301 = *(char **)(a1 + 184);
                unint64_t v300 = *(void *)(a1 + 192);
                if ((unint64_t)v301 >= v300)
                {
                  unint64_t v374 = (char *)*v423;
                  uint64_t v375 = (v301 - (_BYTE *)*v423) >> 3;
                  unint64_t v376 = v375 + 1;
                  if ((unint64_t)(v375 + 1) >> 61) {
LABEL_657:
                  }
                    sub_100007008();
                  uint64_t v377 = v300 - (void)v374;
                  if (v377 >> 2 > v376) {
                    unint64_t v376 = v377 >> 2;
                  }
                  else {
                    unint64_t v378 = v376;
                  }
                  if (v378)
                  {
                    char v379 = (char *)sub_1000071BC(v419, v378);
                    unint64_t v374 = *(char **)(a1 + 176);
                    char v301 = *(char **)(a1 + 184);
                  }

                  else
                  {
                    char v379 = 0LL;
                  }

                  unsigned int v404 = &v379[8 * v375];
                  *(void *)unsigned int v404 = 0LL;
                  unint64_t v289 = v404 + 8;
                  while (v301 != v374)
                  {
                    uint64_t v405 = *((void *)v301 - 1);
                    v301 -= 8;
                    *((void *)v404 - 1) = v405;
                    v404 -= 8;
                  }

                  *(void *)(a1 + 176) = v404;
                  *(void *)(a1 + 184) = v289;
                  *(void *)(a1 + 192) = &v379[8 * v378];
                  if (v374) {
                    operator delete(v374);
                  }
                  unint64_t v2 = &jpt_10107D004;
                }

                else
                {
                  *(void *)char v301 = 0LL;
                  unint64_t v289 = v301 + 8;
                }

                *(void *)(a1 + 184) = v289;
                goto LABEL_636;
              }

              if ((PB::Reader::placeMark(this, v426, v27, 1LL) & 1) != 0) {
                return 0LL;
              }
              unint64_t v133 = *((void *)this + 1);
              unint64_t v134 = *((void *)this + 2);
              while (v133 < v134 && !*((_BYTE *)this + 24))
              {
                char v136 = *(char **)(a1 + 184);
                unint64_t v135 = *(void *)(a1 + 192);
                if ((unint64_t)v136 >= v135)
                {
                  uint64_t v138 = (char *)*v423;
                  uint64_t v139 = (v136 - (_BYTE *)*v423) >> 3;
                  unint64_t v140 = v139 + 1;
                  uint64_t v141 = v135 - (void)v138;
                  if (v141 >> 2 > v140) {
                    unint64_t v140 = v141 >> 2;
                  }
                  else {
                    unint64_t v142 = v140;
                  }
                  if (v142)
                  {
                    uint64_t v143 = (char *)sub_1000071BC(v419, v142);
                    uint64_t v138 = *(char **)(a1 + 176);
                    char v136 = *(char **)(a1 + 184);
                  }

                  else
                  {
                    uint64_t v143 = 0LL;
                  }

                  char v144 = &v143[8 * v139];
                  *(void *)char v144 = 0LL;
                  unsigned int v137 = v144 + 8;
                  while (v136 != v138)
                  {
                    uint64_t v145 = *((void *)v136 - 1);
                    v136 -= 8;
                    *((void *)v144 - 1) = v145;
                    v144 -= 8;
                  }

                  *(void *)(a1 + 176) = v144;
                  *(void *)(a1 + 184) = v137;
                  *(void *)(a1 + 192) = &v143[8 * v142];
                  if (v138) {
                    operator delete(v138);
                  }
                }

                else
                {
                  *(void *)char v136 = 0LL;
                  unsigned int v137 = v136 + 8;
                }

                *(void *)(a1 + 184) = v137;
                unint64_t v146 = *((void *)this + 1);
                if (v146 > 0xFFFFFFFFFFFFFFF7LL || v146 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v137 - 1) = *(void *)(*(void *)this + v146);
                unint64_t v134 = *((void *)this + 2);
                unint64_t v133 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v133;
              }

              goto LABEL_253;
            case 165:
              if ((_DWORD)v27 != 2)
              {
                unint64_t v303 = *(char **)(a1 + 160);
                unint64_t v302 = *(void *)(a1 + 168);
                if ((unint64_t)v303 >= v302)
                {
                  unsigned int v380 = (char *)*v424;
                  uint64_t v381 = (v303 - (_BYTE *)*v424) >> 3;
                  unint64_t v382 = v381 + 1;
                  if ((unint64_t)(v381 + 1) >> 61) {
LABEL_658:
                  }
                    sub_100007008();
                  uint64_t v383 = v302 - (void)v380;
                  if (v383 >> 2 > v382) {
                    unint64_t v382 = v383 >> 2;
                  }
                  else {
                    unint64_t v384 = v382;
                  }
                  if (v384)
                  {
                    unint64_t v385 = (char *)sub_1000071BC(v420, v384);
                    unsigned int v380 = *(char **)(a1 + 152);
                    unint64_t v303 = *(char **)(a1 + 160);
                  }

                  else
                  {
                    unint64_t v385 = 0LL;
                  }

                  char v406 = &v385[8 * v381];
                  *(void *)char v406 = 0LL;
                  unint64_t v289 = v406 + 8;
                  while (v303 != v380)
                  {
                    uint64_t v407 = *((void *)v303 - 1);
                    v303 -= 8;
                    *((void *)v406 - 1) = v407;
                    v406 -= 8;
                  }

                  *(void *)(a1 + 152) = v406;
                  *(void *)(a1 + 160) = v289;
                  *(void *)(a1 + 16_Block_object_dispose(va, 8) = &v385[8 * v384];
                  if (v380) {
                    operator delete(v380);
                  }
                  unint64_t v2 = &jpt_10107D004;
                }

                else
                {
                  *(void *)unint64_t v303 = 0LL;
                  unint64_t v289 = v303 + 8;
                }

                *(void *)(a1 + 160) = v289;
                goto LABEL_636;
              }

              if ((PB::Reader::placeMark(this, v426, v27, 1LL) & 1) != 0) {
                return 0LL;
              }
              unint64_t v147 = *((void *)this + 1);
              unint64_t v148 = *((void *)this + 2);
              while (v147 < v148 && !*((_BYTE *)this + 24))
              {
                unint64_t v150 = *(char **)(a1 + 160);
                unint64_t v149 = *(void *)(a1 + 168);
                if ((unint64_t)v150 >= v149)
                {
                  char v152 = (char *)*v424;
                  uint64_t v153 = (v150 - (_BYTE *)*v424) >> 3;
                  unint64_t v154 = v153 + 1;
                  uint64_t v155 = v149 - (void)v152;
                  if (v155 >> 2 > v154) {
                    unint64_t v154 = v155 >> 2;
                  }
                  else {
                    unint64_t v156 = v154;
                  }
                  if (v156)
                  {
                    unint64_t v157 = (char *)sub_1000071BC(v420, v156);
                    char v152 = *(char **)(a1 + 152);
                    unint64_t v150 = *(char **)(a1 + 160);
                  }

                  else
                  {
                    unint64_t v157 = 0LL;
                  }

                  unint64_t v158 = &v157[8 * v153];
                  *(void *)unint64_t v158 = 0LL;
                  uint64_t v151 = v158 + 8;
                  while (v150 != v152)
                  {
                    uint64_t v159 = *((void *)v150 - 1);
                    v150 -= 8;
                    *((void *)v158 - 1) = v159;
                    v158 -= 8;
                  }

                  *(void *)(a1 + 152) = v158;
                  *(void *)(a1 + 160) = v151;
                  *(void *)(a1 + 16_Block_object_dispose(va, 8) = &v157[8 * v156];
                  if (v152) {
                    operator delete(v152);
                  }
                }

                else
                {
                  *(void *)unint64_t v150 = 0LL;
                  uint64_t v151 = v150 + 8;
                }

                *(void *)(a1 + 160) = v151;
                unint64_t v160 = *((void *)this + 1);
                if (v160 > 0xFFFFFFFFFFFFFFF7LL || v160 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v151 - 1) = *(void *)(*(void *)this + v160);
                unint64_t v148 = *((void *)this + 2);
                unint64_t v147 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v147;
              }

              goto LABEL_253;
            case 166:
              if ((_DWORD)v27 == 2)
              {
                if ((PB::Reader::placeMark(this, v426, v27, 1LL) & 1) != 0) {
                  return 0LL;
                }
                unint64_t v161 = *((void *)this + 1);
                unint64_t v162 = *((void *)this + 2);
                while (v161 < v162 && !*((_BYTE *)this + 24))
                {
                  char v164 = *(char **)(a1 + 208);
                  unint64_t v163 = *(void *)(a1 + 216);
                  if ((unint64_t)v164 >= v163)
                  {
                    unint64_t v166 = (char *)*v425;
                    uint64_t v167 = (v164 - (_BYTE *)*v425) >> 3;
                    unint64_t v168 = v167 + 1;
                    uint64_t v169 = v163 - (void)v166;
                    if (v169 >> 2 > v168) {
                      unint64_t v168 = v169 >> 2;
                    }
                    else {
                      unint64_t v170 = v168;
                    }
                    if (v170)
                    {
                      uint64_t v171 = (char *)sub_1000071BC(v421, v170);
                      unint64_t v166 = *(char **)(a1 + 200);
                      char v164 = *(char **)(a1 + 208);
                    }

                    else
                    {
                      uint64_t v171 = 0LL;
                    }

                    unint64_t v172 = &v171[8 * v167];
                    *(void *)unint64_t v172 = 0LL;
                    unint64_t v165 = v172 + 8;
                    while (v164 != v166)
                    {
                      uint64_t v173 = *((void *)v164 - 1);
                      v164 -= 8;
                      *((void *)v172 - 1) = v173;
                      v172 -= 8;
                    }

                    *(void *)(a1 + 200) = v172;
                    *(void *)(a1 + 20_Block_object_dispose(va, 8) = v165;
                    *(void *)(a1 + 216) = &v171[8 * v170];
                    if (v166) {
                      operator delete(v166);
                    }
                  }

                  else
                  {
                    *(void *)char v164 = 0LL;
                    unint64_t v165 = v164 + 8;
                  }

                  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v165;
                  unint64_t v174 = *((void *)this + 1);
                  if (v174 > 0xFFFFFFFFFFFFFFF7LL || v174 + 8 > *((void *)this + 2))
                  {
LABEL_252:
                    *((_BYTE *)this + 24) = 1;
                    break;
                  }

                  *(v165 - 1) = *(void *)(*(void *)this + v174);
                  unint64_t v162 = *((void *)this + 2);
                  unint64_t v161 = *((void *)this + 1) + 8LL;
                  *((void *)this + 1) = v161;
                }

LABEL_253:
                PB::Reader::recallMark(this, v426);
                unint64_t v2 = &jpt_10107D004;
              }

              else
              {
                char v305 = *(char **)(a1 + 208);
                unint64_t v304 = *(void *)(a1 + 216);
                if ((unint64_t)v305 >= v304)
                {
                  char v386 = (char *)*v425;
                  uint64_t v387 = (v305 - (_BYTE *)*v425) >> 3;
                  unint64_t v388 = v387 + 1;
                  if ((unint64_t)(v387 + 1) >> 61) {
LABEL_659:
                  }
                    sub_100007008();
                  uint64_t v389 = v304 - (void)v386;
                  if (v389 >> 2 > v388) {
                    unint64_t v388 = v389 >> 2;
                  }
                  else {
                    unint64_t v390 = v388;
                  }
                  if (v390)
                  {
                    char v391 = (char *)sub_1000071BC(v421, v390);
                    char v386 = *(char **)(a1 + 200);
                    char v305 = *(char **)(a1 + 208);
                  }

                  else
                  {
                    char v391 = 0LL;
                  }

                  unsigned int v408 = &v391[8 * v387];
                  *(void *)unsigned int v408 = 0LL;
                  unint64_t v289 = v408 + 8;
                  while (v305 != v386)
                  {
                    uint64_t v409 = *((void *)v305 - 1);
                    v305 -= 8;
                    *((void *)v408 - 1) = v409;
                    v408 -= 8;
                  }

                  *(void *)(a1 + 200) = v408;
                  *(void *)(a1 + 20_Block_object_dispose(va, 8) = v289;
                  *(void *)(a1 + 216) = &v391[8 * v390];
                  if (v386) {
                    operator delete(v386);
                  }
                  unint64_t v2 = &jpt_10107D004;
                }

                else
                {
                  *(void *)char v305 = 0LL;
                  unint64_t v289 = v305 + 8;
                }

                *(void *)(a1 + 20_Block_object_dispose(va, 8) = v289;
LABEL_636:
                unint64_t v410 = *((void *)this + 1);
                if (v410 <= 0xFFFFFFFFFFFFFFF7LL && v410 + 8 <= *((void *)this + 2))
                {
                  *(v289 - 1) = *(void *)(*(void *)this + v410);
LABEL_640:
                  *((void *)this + 1) += 8LL;
                }

                else
                {
                  *((_BYTE *)this + 24) = 1;
                }
              }

          *(_DWORD *)(a1 + 144) = v120;
          goto LABEL_294;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_294;
      }
    }

    BOOL v21 = 0;
    char v22 = 0;
    unsigned int v17 = 0LL;
    if (v4 > v5) {
      unint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      unsigned int v23 = v4 + 1;
      unint64_t v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unsigned int v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

LABEL_641:
              unint64_t v4 = *((void *)this + 1);
              unint64_t v5 = *((void *)this + 2);
              int v6 = *((unsigned __int8 *)this + 24);
              if (v4 >= v5 || v6 != 0) {
                return v6 == 0;
              }
              break;
            default:
              switch((int)v28)
              {
                case 'e':
                  *(_DWORD *)(a1 + 396) |= 0x10000000u;
                  unint64_t v51 = *((void *)this + 1);
                  if (v51 >= *((void *)this + 2))
                  {
                    BOOL v54 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }

                  else
                  {
                    unint64_t v52 = v51 + 1;
                    int v53 = *(unsigned __int8 *)(*(void *)this + v51);
                    *((void *)this + 1) = v52;
                    BOOL v54 = v53 != 0;
                  }

                  *(_BYTE *)(a1 + 392) = v54;
                  goto LABEL_641;
                case 'f':
                  *(_DWORD *)(a1 + 396) |= 0x8000000u;
                  unint64_t v271 = *((void *)this + 1);
                  if (v271 >= *((void *)this + 2))
                  {
                    BOOL v274 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }

                  else
                  {
                    unint64_t v272 = v271 + 1;
                    int v273 = *(unsigned __int8 *)(*(void *)this + v271);
                    *((void *)this + 1) = v272;
                    BOOL v274 = v273 != 0;
                  }

                  *(_BYTE *)(a1 + 391) = v274;
                  goto LABEL_641;
                case 'g':
                  *(_DWORD *)(a1 + 396) |= 0x20000000u;
                  unint64_t v275 = *((void *)this + 1);
                  if (v275 >= *((void *)this + 2))
                  {
                    BOOL v278 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }

                  else
                  {
                    unint64_t v276 = v275 + 1;
                    int v277 = *(unsigned __int8 *)(*(void *)this + v275);
                    *((void *)this + 1) = v276;
                    BOOL v278 = v277 != 0;
                  }

                  *(_BYTE *)(a1 + 393) = v278;
                  goto LABEL_641;
                case 'h':
                  *(_DWORD *)(a1 + 396) |= 0x2000000u;
                  unint64_t v279 = *((void *)this + 1);
                  if (v279 >= *((void *)this + 2))
                  {
                    BOOL v282 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }

                  else
                  {
                    unint64_t v280 = v279 + 1;
                    int v281 = *(unsigned __int8 *)(*(void *)this + v279);
                    *((void *)this + 1) = v280;
                    BOOL v282 = v281 != 0;
                  }

                  *(_BYTE *)(a1 + 389) = v282;
                  goto LABEL_641;
                case 'i':
                  *(_DWORD *)(a1 + 396) |= 0x4000000u;
                  unint64_t v283 = *((void *)this + 1);
                  if (v283 >= *((void *)this + 2))
                  {
                    BOOL v286 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }

                  else
                  {
                    unint64_t v284 = v283 + 1;
                    int v285 = *(unsigned __int8 *)(*(void *)this + v283);
                    *((void *)this + 1) = v284;
                    BOOL v286 = v285 != 0;
                  }

                  *(_BYTE *)(a1 + 390) = v286;
                  goto LABEL_641;
                default:
                  goto LABEL_58;
              }
          }

          break;
      }
    }

    char v22 = 0;
    unsigned int v23 = 0;
    unint64_t v18 = 0LL;
    if (v4 > v5) {
      unint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      unint64_t v24 = v4 + 1;
      char v25 = *(_BYTE *)(v15 + v4);
      *((void *)this + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_21;
      }
      v22 += 7;
      unint64_t v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        unint64_t v18 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

uint64_t sub_10107EE80(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 396);
  if ((v4 & 0x80000) != 0)
  {
    double result = PB::Writer::writeVarInt(this, *(void *)(result + 376), 1u);
    int v4 = *(_DWORD *)(v3 + 396);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_64;
    }
  }

  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 388), 2u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_65;
  }

uint64_t sub_10107F348(uint64_t result)
{
  *(void *)double result = &off_101898840;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_10107F360(PB::Base *a1)
{
}

float sub_10107F374(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898840;
  *(_DWORD *)(a1 + 72) = 0;
  __int16 v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    __int16 v3 = 4;
    *(_WORD *)(a1 + 72) = 4;
    *(void *)(a1 + 24) = v4;
    __int16 v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 32);
    v3 |= 8u;
    *(_WORD *)(a1 + 72) = v3;
    *(void *)(a1 + 32) = v5;
    __int16 v2 = *(_WORD *)(a2 + 72);
  }

uint64_t sub_10107F4A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "afterElevationMedian", *(float *)(a1 + 56));
    __int16 v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "beforeElevationMedian", *(float *)(a1 + 60));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_10107F618(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10107FE04(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 72);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 2u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_10107FF40(uint64_t result)
{
  *(void *)uint64_t result = &off_101898878;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_10107FF58(PB::Base *a1)
{
}

uint64_t sub_10107FF6C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101898878;
  *(_DWORD *)(result + 80) = 0;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    __int16 v3 = 4;
    *(_WORD *)(result + 80) = 4;
    *(void *)(result + 24) = v4;
    __int16 v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 80) = v3;
    *(void *)(result + 16) = v5;
    __int16 v2 = *(_WORD *)(a2 + 80);
  }

uint64_t sub_1010800F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "aopTsImpact", *(void *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "aopTsNow", *(void *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_1010802C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101080D6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 80);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

void sub_101080F00(PB::Base *a1)
{
}

uint64_t sub_101080F14(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018988B0;
  *(_DWORD *)(result + 72) = 0;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 1) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(result + 72) = 1;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v4;
    int v2 = *(_DWORD *)(a2 + 72);
    if ((v2 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 70);
    v3 |= 0x20000u;
    *(_DWORD *)(result + 72) = v3;
    *(_BYTE *)(result + 70) = v5;
    int v2 = *(_DWORD *)(a2 + 72);
  }

uint64_t sub_101081124(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "crownUpDown", *(_DWORD *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "fallType", *(_DWORD *)(a1 + 12));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

uint64_t sub_101081394(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101081BF4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 72);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 72);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }

  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 70), 2u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }

double sub_101081E10(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = &off_1018988E8;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_101081E38(PB::Base *this)
{
  *(void *)this = &off_1018988E8;
  uint64_t v2 = *((void *)this + 15);
  *((void *)this + 15) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *((void *)this + 13);
  *((void *)this + 13) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 12) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  *((void *)this + 9) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + _Block_object_dispose(va, 8) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  uint64_t v15 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  PB::Base::~Base(this);
}

void sub_101081FB8(PB::Base *a1)
{
}

uint64_t sub_101081FCC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018988E8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v5 = (uint64_t *)(a1 + 32);
  *(void *)(a1 + 16) = 0LL;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  if ((*(_BYTE *)(a2 + 128) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = 1;
    *(void *)(a1 + 24) = v6;
  }

  uint64_t v7 = *(void *)(a2 + 88);
  if (v7)
  {
    uint64_t v8 = operator new(0x50uLL);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = sub_101080F14((uint64_t)v8, v7);
  }

  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    uint64_t v10 = operator new(0x28uLL);
    uint64_t v11 = sub_1010DF384((uint64_t)v10, v9);
    uint64_t v12 = *v4;
    uint64_t *v4 = v11;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
  }

  uint64_t v13 = *(void *)(a2 + 16);
  if (v13)
  {
    uint64_t v14 = operator new(0x28uLL);
    uint64_t v15 = sub_1010DF384((uint64_t)v14, v13);
    uint64_t v16 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v15;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
  }

  uint64_t v17 = *(void *)(a2 + 64);
  if (v17)
  {
    char v18 = operator new(0x30uLL);
    uint64_t v19 = sub_10108FEBC((uint64_t)v18, v17);
    uint64_t v20 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v19;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
    }
  }

  uint64_t v21 = *(void *)(a2 + 72);
  if (v21)
  {
    char v22 = operator new(0x30uLL);
    uint64_t v23 = sub_10108FEBC((uint64_t)v22, v21);
    uint64_t v24 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v23;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    }
  }

  uint64_t v25 = *(void *)(a2 + 32);
  if (v25)
  {
    unint64_t v26 = operator new(0x80uLL);
    float v27 = sub_1010E3EEC((uint64_t)v26, v25);
    uint64_t v28 = *v5;
    *uint64_t v5 = v29;
    if (v28) {
      (*(void (**)(uint64_t, float))(*(void *)v28 + 8LL))(v28, v27);
    }
  }

  uint64_t v30 = *(void *)(a2 + 104);
  if (v30)
  {
    char v31 = operator new(0x20uLL);
    float v32 = sub_10119F3F0((uint64_t)v31, v30);
    uint64_t v33 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v34;
    if (v33) {
      (*(void (**)(uint64_t, float))(*(void *)v33 + 8LL))(v33, v32);
    }
  }

  uint64_t v35 = *(void *)(a2 + 80);
  if (v35)
  {
    uint64_t v36 = operator new(0x10uLL);
    uint64_t v37 = sub_10114F804(v36, v35);
    uint64_t v38 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v37;
    if (v38) {
      (*(void (**)(uint64_t))(*(void *)v38 + 8LL))(v38);
    }
  }

  uint64_t v39 = *(void *)(a2 + 120);
  if (v39)
  {
    char v40 = operator new(0x30uLL);
    uint64_t v41 = sub_101167DC4((uint64_t)v40, v39);
    uint64_t v42 = *(void *)(a1 + 120);
    *(void *)(a1 + 120) = v41;
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 8LL))(v42);
    }
  }

  uint64_t v43 = *(void *)(a2 + 48);
  if (v43)
  {
    unsigned int v44 = operator new(0x38uLL);
    uint64_t v45 = sub_101083010((uint64_t)v44, v43);
    uint64_t v46 = *(void *)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v45;
    if (v46) {
      (*(void (**)(uint64_t))(*(void *)v46 + 8LL))(v46);
    }
  }

  uint64_t v47 = *(void *)(a2 + 56);
  if (v47)
  {
    BOOL v48 = operator new(0xE0uLL);
    float v49 = sub_101083B70((uint64_t)v48, v47);
    uint64_t v50 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v51;
    if (v50) {
      (*(void (**)(uint64_t, float))(*(void *)v50 + 8LL))(v50, v49);
    }
  }

  uint64_t v52 = *(void *)(a2 + 112);
  if (v52)
  {
    unint64_t v53 = operator new(0x58uLL);
    uint64_t v54 = sub_10107FF6C((uint64_t)v53, v52);
    uint64_t v55 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = v54;
    if (v55) {
      (*(void (**)(uint64_t))(*(void *)v55 + 8LL))(v55);
    }
  }

  uint64_t v56 = *(void *)(a2 + 40);
  if (v56)
  {
    unint64_t v57 = operator new(0x80uLL);
    float v58 = sub_1010E3EEC((uint64_t)v57, v56);
    uint64_t v59 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v60;
    if (v59) {
      (*(void (**)(uint64_t, float))(*(void *)v59 + 8LL))(v59, v58);
    }
  }

  uint64_t v61 = *(void *)(a2 + 96);
  if (v61)
  {
    char v62 = operator new(0x58uLL);
    uint64_t v63 = sub_101188EBC(v62, v61);
    uint64_t v64 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = v63;
    if (v64) {
      (*(void (**)(uint64_t))(*(void *)v64 + 8LL))(v64);
    }
  }

  return a1;
}

uint64_t sub_10108231C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "accel100");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "accel800");
  }
  if ((*(_BYTE *)(a1 + 128) & 1) != 0) {
    PB::TextFormatter::format(this, "aopTimestamp", *(void *)(a1 + 24));
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "dm");
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32LL))(v8, this, "dmAlwaysOn");
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32LL))(v9, this, "fallState");
  }
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32LL))(v10, this, "fallStats");
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32LL))(v11, this, "gyro100");
  }
  uint64_t v12 = *(void *)(a1 + 72);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32LL))(v12, this, "gyro200");
  }
  uint64_t v13 = *(void *)(a1 + 80);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32LL))(v13, this, "heartRate");
  }
  uint64_t v14 = *(void *)(a1 + 88);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32LL))(v14, this, "meta");
  }
  uint64_t v15 = *(void *)(a1 + 96);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32LL))( v15,  this,  "odometerEntry");
  }
  uint64_t v16 = *(void *)(a1 + 104);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32LL))(v16, this, "pressure");
  }
  uint64_t v17 = *(void *)(a1 + 112);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32LL))( v17,  this,  "suppressionFeatures");
  }
  uint64_t v18 = *(void *)(a1 + 120);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32LL))( v18,  this,  "wristState");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101082528(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_101082AAC(uint64_t result)
{
  *(void *)uint64_t result = &off_101898D10;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void *sub_101082AC0(void *result)
{
  const char *result = &off_101898958;
  result[27] = 0LL;
  return result;
}

uint64_t sub_101082AD4(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if ((*(_BYTE *)(result + 128) & 1) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 24), 2u);
  }
  int v4 = (const PB::Base *)v3[11];
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 3u);
  }
  uint64_t v5 = (const PB::Base *)v3[1];
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5, 4u);
  }
  uint64_t v6 = (const PB::Base *)v3[2];
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 5u);
  }
  uint64_t v7 = (const PB::Base *)v3[8];
  if (v7) {
    uint64_t result = PB::Writer::writeSubmessage(this, v7, 6u);
  }
  uint64_t v8 = (const PB::Base *)v3[9];
  if (v8) {
    uint64_t result = PB::Writer::writeSubmessage(this, v8, 7u);
  }
  char v9 = (const PB::Base *)v3[4];
  if (v9) {
    uint64_t result = PB::Writer::writeSubmessage(this, v9, 8u);
  }
  unsigned int v10 = (const PB::Base *)v3[13];
  if (v10) {
    uint64_t result = PB::Writer::writeSubmessage(this, v10, 9u);
  }
  unint64_t v11 = (const PB::Base *)v3[10];
  if (v11) {
    uint64_t result = PB::Writer::writeSubmessage(this, v11, 0xAu);
  }
  unint64_t v12 = (const PB::Base *)v3[15];
  if (v12) {
    uint64_t result = PB::Writer::writeSubmessage(this, v12, 0xBu);
  }
  char v13 = (const PB::Base *)v3[6];
  if (v13) {
    uint64_t result = PB::Writer::writeSubmessage(this, v13, 0xCu);
  }
  BOOL v14 = (const PB::Base *)v3[7];
  if (v14) {
    uint64_t result = PB::Writer::writeSubmessage(this, v14, 0xDu);
  }
  char v15 = (const PB::Base *)v3[14];
  if (v15) {
    uint64_t result = PB::Writer::writeSubmessage(this, v15, 0xEu);
  }
  unsigned int v16 = (const PB::Base *)v3[5];
  if (v16) {
    uint64_t result = PB::Writer::writeSubmessage(this, v16, 0xFu);
  }
  unint64_t v17 = (const PB::Base *)v3[12];
  if (v17) {
    return PB::Writer::writeSubmessage(this, v17, 0x10u);
  }
  return result;
}

_DWORD *sub_101082C2C(_DWORD *result)
{
  if (!*((void *)result + 11))
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x50uLL);
    *(void *)uint64_t result = &off_1018988B0;
    result[18] = 0;
    *((void *)v1 + 11) = result;
  }

  return result;
}

void *sub_101082C6C(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_1010DF2B4((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101082CC0(void *result)
{
  if (!result[2])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_1010DF2B4((uint64_t)v2);
    uint64_t result = (void *)v1[2];
    v1[2] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

_DWORD *sub_101082D14(_DWORD *result)
{
  if (!*((void *)result + 8))
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x30uLL);
    *(void *)uint64_t result = &off_101898D10;
    result[11] = 0;
    *((void *)v1 + _Block_object_dispose(va, 8) = result;
  }

  return result;
}

_DWORD *sub_101082D54(_DWORD *result)
{
  if (!*((void *)result + 9))
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x30uLL);
    *(void *)uint64_t result = &off_101898D10;
    result[11] = 0;
    *((void *)v1 + 9) = result;
  }

  return result;
}

void *sub_101082D94(void *result)
{
  if (!result[4])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x80uLL);
    sub_1010E4324((uint64_t)v2);
    uint64_t result = (void *)v1[4];
    v1[4] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101082DE8(void *result)
{
  if (!result[13])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_10119F358((uint64_t)v2);
    uint64_t result = (void *)v1[13];
    v1[13] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101082E3C(void *result)
{
  if (!result[10])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10114F70C(v2);
    uint64_t result = (void *)v1[10];
    v1[10] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101082E90(void *result)
{
  if (!result[15])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x30uLL);
    sub_101167CA0((uint64_t)v2);
    uint64_t result = (void *)v1[15];
    v1[15] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

_DWORD *sub_101082EE4(_DWORD *result)
{
  if (!*((void *)result + 6))
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x38uLL);
    *(void *)uint64_t result = &off_101898920;
    result[12] = 0;
    *((void *)v1 + 6) = result;
  }

  return result;
}

void *sub_101082F24(void *result)
{
  if (!result[7])
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0xE0uLL);
    const char *result = &off_101898958;
    result[27] = 0LL;
    v1[7] = result;
  }

  return result;
}

_DWORD *sub_101082F64(_DWORD *result)
{
  if (!*((void *)result + 14))
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x58uLL);
    *(void *)uint64_t result = &off_101898878;
    result[20] = 0;
    *((void *)v1 + 14) = result;
  }

  return result;
}

void *sub_101082FA4(void *result)
{
  if (!result[12])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x58uLL);
    sub_101188CD4((uint64_t)v2);
    uint64_t result = (void *)v1[12];
    v1[12] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_101082FFC(PB::Base *a1)
{
}

uint64_t sub_101083010(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101898920;
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = v3;
    *(void *)(result + _Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 48);
  }

uint64_t sub_101083108(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "aopTsNow", *(void *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "aopTsSensor", *(void *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_101083238(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(_BYTE *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101083A54(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 48);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(result + 48) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 2u);
  char v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

void sub_101083B5C(PB::Base *a1)
{
}

float sub_101083B70(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898958;
  *(void *)(a1 + 216) = 0LL;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x80000000) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 144);
    uint64_t v3 = 0x80000000LL;
    *(void *)(a1 + 216) = 0x80000000LL;
    *(_DWORD *)(a1 + 144) = v4;
    uint64_t v2 = *(void *)(a2 + 216);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1uLL;
    *(void *)(a1 + 216) = v3;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
    uint64_t v2 = *(void *)(a2 + 216);
  }

uint64_t sub_1010840E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "abruptGravityChangeAngle", *(float *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 216);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_54;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "accelPathLength", *(float *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_55;
  }

uint64_t sub_101084734(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

LABEL_306:
          *(void *)(a1 + _Block_object_dispose(va, 8) = v34;
          goto LABEL_294;
        case 3u:
          *(void *)(a1 + 216) |= 2uLL;
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          uint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5LL && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0LL;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_310;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }

            while (!v14);
LABEL_235:
            uint64_t v42 = 0LL;
            goto LABEL_310;
          }

          char v155 = 0;
          unsigned int v156 = 0;
          uint64_t v42 = 0LL;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              uint64_t v42 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v157 = v37 + 1;
              char v158 = *(_BYTE *)(v39 + v37);
              *((void *)this + 1) = v157;
              v42 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                unint64_t v37 = v157;
                BOOL v14 = v156++ > 8;
                if (v14) {
                  goto LABEL_235;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v42 = 0LL;
              }
            }

            break;
          }

              *(_DWORD *)(a1 + 120) = v67;
              goto LABEL_282;
            case 0xBu:
              *(void *)(a1 + 164) |= 0x10uLL;
              unint64_t v70 = *((void *)this + 1);
              unint64_t v71 = *((void *)this + 2);
              unint64_t v72 = *(void *)this;
              if (v70 <= 0xFFFFFFFFFFFFFFF5LL && v70 + 10 <= v71)
              {
                unint64_t v73 = 0;
                unint64_t v74 = 0;
                unint64_t v75 = 0LL;
                do
                {
                  uint64_t v76 = v70 + 1;
                  *((void *)this + 1) = v70 + 1;
                  char v77 = *(_BYTE *)(v72 + v70);
                  v75 |= (unint64_t)(v77 & 0x7F) << v73;
                  if ((v77 & 0x80) == 0) {
                    goto LABEL_310;
                  }
                  v73 += 7;
                  unint64_t v70 = v76;
                  BOOL v14 = v74++ > 8;
                }

                while (!v14);
LABEL_223:
                unint64_t v75 = 0LL;
                goto LABEL_310;
              }

              unsigned int v176 = 0;
              unint64_t v177 = 0;
              unint64_t v75 = 0LL;
              if (v71 <= v70) {
                unint64_t v71 = *((void *)this + 1);
              }
              while (2)
              {
                if (v71 == v70)
                {
                  unint64_t v75 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  char v178 = v70 + 1;
                  char v179 = *(_BYTE *)(v72 + v70);
                  *((void *)this + 1) = v178;
                  v75 |= (unint64_t)(v179 & 0x7F) << v176;
                  if (v179 < 0)
                  {
                    v176 += 7;
                    unint64_t v70 = v178;
                    BOOL v14 = v177++ > 8;
                    if (v14) {
                      goto LABEL_223;
                    }
                    continue;
                  }

                  if (*((_BYTE *)this + 24)) {
                    unint64_t v75 = 0LL;
                  }
                }

                break;
              }

            *(void *)(a1 + 72) = v87;
            break;
          case 203:
            *(_DWORD *)(a1 + 152) |= 0x2000u;
            unint64_t v90 = *((void *)this + 1);
            if (v90 <= 0xFFFFFFFFFFFFFFFBLL && v90 + 4 <= *((void *)this + 2))
            {
              *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v90);
LABEL_258:
              *((void *)this + 1) += 4LL;
            }

            else
            {
LABEL_96:
              *((_BYTE *)this + 24) = 1;
            }

            break;
          case 204:
            if ((_DWORD)v26 == 2)
            {
              if ((PB::Reader::placeMark(this, v229, v26, a4) & 1) != 0) {
                return 0LL;
              }
              if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
              {
                unint64_t v91 = *(char **)(a1 + 16);
                do
                {
                  if ((unint64_t)v91 >= *v14)
                  {
                    uint64_t v92 = v4;
                    char v93 = (char *)*v13;
                    unsigned int v94 = (v91 - (_BYTE *)*v13) >> 3;
                    uint64_t v95 = v94 + 1;
                    unint64_t v96 = *v14 - (void)v93;
                    if (v96 >> 2 > v95) {
                      uint64_t v95 = v96 >> 2;
                    }
                    else {
                      char v97 = v95;
                    }
                    if (v97)
                    {
                      unint64_t v98 = (char *)sub_1000071BC((uint64_t)v14, v97);
                      char v93 = *(char **)(a1 + 8);
                      unint64_t v91 = *(char **)(a1 + 16);
                    }

                    else
                    {
                      unint64_t v98 = 0LL;
                    }

                    unint64_t v99 = &v98[8 * v94];
                    *(void *)unint64_t v99 = 0LL;
                    uint64_t v100 = v99 + 8;
                    while (v91 != v93)
                    {
                      char v101 = *((void *)v91 - 1);
                      v91 -= 8;
                      *((void *)v99 - 1) = v101;
                      v99 -= 8;
                    }

                    *(void *)(a1 + _Block_object_dispose(va, 8) = v99;
                    *(void *)(a1 + 16) = v100;
                    *(void *)(a1 + 24) = &v98[8 * v97];
                    if (v93) {
                      operator delete(v93);
                    }
                    unint64_t v91 = v100;
                    int v4 = v92;
                  }

                  else
                  {
                    *(void *)unint64_t v91 = 0LL;
                    v91 += 8;
                  }

                  *(void *)(a1 + 16) = v91;
                  uint64_t v103 = *((void *)this + 1);
                  unsigned int v102 = *((void *)this + 2);
                  unint64_t v104 = *(void *)this;
                  char v105 = v103 > 0xFFFFFFFFFFFFFFF5LL || v103 + 10 > v102;
                  if (!v105)
                  {
                    uint64_t v111 = 0;
                    unint64_t v112 = 0;
                    char v113 = 0LL;
                    while (1)
                    {
                      unint64_t v114 = v103 + 1;
                      *((void *)this + 1) = v103 + 1;
                      unint64_t v115 = *(_BYTE *)(v104 + v103);
                      v113 |= (unint64_t)(v115 & 0x7F) << v111;
                      if ((v115 & 0x80) == 0) {
                        goto LABEL_139;
                      }
                      v111 += 7;
                      uint64_t v103 = v114;
                      char v105 = v112++ > 8;
                      if (v105)
                      {
                        char v113 = 0LL;
                        goto LABEL_139;
                      }
                    }
                  }

                  unint64_t v106 = 0;
                  unint64_t v107 = 0;
                  char v113 = 0LL;
                  if (v102 <= v103) {
                    uint64_t v108 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v108 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v108 == v103)
                    {
                      *((_BYTE *)this + 24) = 1;
                      *((void *)v91 - 1) = 0LL;
                      goto LABEL_276;
                    }

                    char v109 = v103++;
                    unsigned int v110 = *(_BYTE *)(v104 + v109);
                    *((void *)this + 1) = v103;
                    v113 |= (unint64_t)(v110 & 0x7F) << v106;
                    if ((v110 & 0x80) == 0) {
                      break;
                    }
                    v106 += 7;
                    char v105 = v107++ > 8;
                    if (v105)
                    {
                      char v113 = 0LL;
                      goto LABEL_138;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    char v113 = 0LL;
                  }
LABEL_138:
                  unint64_t v114 = v109 + 1;
LABEL_139:
                  *((void *)v91 - 1) = v113;
                }

                while (v114 < v102 && !*((_BYTE *)this + 24));
              }

LABEL_318:
          *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = v79;
          goto LABEL_294;
        case 0x1Bu:
          *(void *)(a1 + 216) |= 0x4000uLL;
          unint64_t v82 = *((void *)this + 1);
          unint64_t v83 = *((void *)this + 2);
          uint64_t v84 = *(void *)this;
          if (v82 <= 0xFFFFFFFFFFFFFFF5LL && v82 + 10 <= v83)
          {
            char v85 = 0;
            unsigned int v86 = 0;
            uint64_t v87 = 0LL;
            do
            {
              unint64_t v88 = v82 + 1;
              *((void *)this + 1) = v82 + 1;
              char v89 = *(_BYTE *)(v84 + v82);
              v87 |= (unint64_t)(v89 & 0x7F) << v85;
              if ((v89 & 0x80) == 0) {
                goto LABEL_322;
              }
              v85 += 7;
              unint64_t v82 = v88;
              BOOL v14 = v86++ > 8;
            }

            while (!v14);
LABEL_256:
            LODWORD(v87) = 0;
            goto LABEL_322;
          }

          char v167 = 0;
          unsigned int v168 = 0;
          uint64_t v87 = 0LL;
          if (v83 <= v82) {
            unint64_t v83 = *((void *)this + 1);
          }
          while (2)
          {
            if (v83 == v82)
            {
              LODWORD(v87) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v169 = v82 + 1;
              char v170 = *(_BYTE *)(v84 + v82);
              *((void *)this + 1) = v169;
              v87 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                unint64_t v82 = v169;
                BOOL v14 = v168++ > 8;
                if (v14) {
                  goto LABEL_256;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v87) = 0;
              }
            }

            break;
          }

              *(void *)(a1 + 24) = v91;
              goto LABEL_282;
            case 0xEu:
              *(void *)(a1 + 164) |= 0x8000uLL;
              unsigned int v94 = *((void *)this + 1);
              uint64_t v95 = *((void *)this + 2);
              unint64_t v96 = *(void *)this;
              if (v94 <= 0xFFFFFFFFFFFFFFF5LL && v94 + 10 <= v95)
              {
                char v97 = 0;
                unint64_t v98 = 0;
                unint64_t v99 = 0LL;
                do
                {
                  uint64_t v100 = v94 + 1;
                  *((void *)this + 1) = v94 + 1;
                  char v101 = *(_BYTE *)(v96 + v94);
                  v99 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0) {
                    goto LABEL_322;
                  }
                  v97 += 7;
                  unsigned int v94 = v100;
                  BOOL v14 = v98++ > 8;
                }

                while (!v14);
LABEL_244:
                LODWORD(v99) = 0;
                goto LABEL_322;
              }

              unsigned int v188 = 0;
              unint64_t v189 = 0;
              unint64_t v99 = 0LL;
              if (v95 <= v94) {
                uint64_t v95 = *((void *)this + 1);
              }
              while (2)
              {
                if (v95 == v94)
                {
                  LODWORD(v99) = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  char v190 = v94 + 1;
                  uint64_t v191 = *(_BYTE *)(v96 + v94);
                  *((void *)this + 1) = v190;
                  v99 |= (unint64_t)(v191 & 0x7F) << v188;
                  if (v191 < 0)
                  {
                    v188 += 7;
                    unsigned int v94 = v190;
                    BOOL v14 = v189++ > 8;
                    if (v14) {
                      goto LABEL_244;
                    }
                    continue;
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v99) = 0;
                  }
                }

                break;
              }

LABEL_322:
          *(_DWORD *)(a1 + 76) = v87;
          goto LABEL_294;
        case 0x1Cu:
          *(void *)(a1 + 216) |= (unint64_t)&_mh_execute_header;
          unint64_t v90 = *((void *)this + 1);
          unint64_t v91 = *((void *)this + 2);
          uint64_t v92 = *(void *)this;
          if (v90 <= 0xFFFFFFFFFFFFFFF5LL && v90 + 10 <= v91)
          {
            char v93 = 0;
            unsigned int v94 = 0;
            uint64_t v95 = 0LL;
            do
            {
              unint64_t v96 = v90 + 1;
              *((void *)this + 1) = v90 + 1;
              char v97 = *(_BYTE *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0) {
                goto LABEL_326;
              }
              v93 += 7;
              unint64_t v90 = v96;
              BOOL v14 = v94++ > 8;
            }

            while (!v14);
LABEL_263:
            LODWORD(v95) = 0;
            goto LABEL_326;
          }

          char v171 = 0;
          unsigned int v172 = 0;
          uint64_t v95 = 0LL;
          if (v91 <= v90) {
            unint64_t v91 = *((void *)this + 1);
          }
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v173 = v90 + 1;
              char v174 = *(_BYTE *)(v92 + v90);
              *((void *)this + 1) = v173;
              v95 |= (unint64_t)(v174 & 0x7F) << v171;
              if (v174 < 0)
              {
                v171 += 7;
                unint64_t v90 = v173;
                BOOL v14 = v172++ > 8;
                if (v14) {
                  goto LABEL_263;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v95) = 0;
              }
            }

            break;
          }

              *(_DWORD *)(a1 + 92) = v99;
              goto LABEL_282;
            case 0xFu:
              *(void *)(a1 + 164) |= 0x20000uLL;
              unsigned int v102 = *((void *)this + 1);
              if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v102);
              goto LABEL_281;
            case 0x10u:
              *(void *)(a1 + 164) |= 0x10000uLL;
              uint64_t v103 = *((void *)this + 1);
              unint64_t v104 = *((void *)this + 2);
              char v105 = *(void *)this;
              if (v103 <= 0xFFFFFFFFFFFFFFF5LL && v103 + 10 <= v104)
              {
                unint64_t v106 = 0;
                unint64_t v107 = 0;
                uint64_t v108 = 0LL;
                do
                {
                  char v109 = v103 + 1;
                  *((void *)this + 1) = v103 + 1;
                  unsigned int v110 = *(_BYTE *)(v105 + v103);
                  v108 |= (unint64_t)(v110 & 0x7F) << v106;
                  if ((v110 & 0x80) == 0) {
                    goto LABEL_326;
                  }
                  v106 += 7;
                  uint64_t v103 = v109;
                  BOOL v14 = v107++ > 8;
                }

                while (!v14);
LABEL_251:
                LODWORD(v10_Block_object_dispose(va, 8) = 0;
                goto LABEL_326;
              }

              char v192 = 0;
              unsigned int v193 = 0;
              uint64_t v108 = 0LL;
              if (v104 <= v103) {
                unint64_t v104 = *((void *)this + 1);
              }
              while (2)
              {
                if (v104 == v103)
                {
                  LODWORD(v10_Block_object_dispose(va, 8) = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  uint64_t v194 = v103 + 1;
                  unint64_t v195 = *(_BYTE *)(v105 + v103);
                  *((void *)this + 1) = v194;
                  v108 |= (unint64_t)(v195 & 0x7F) << v192;
                  if (v195 < 0)
                  {
                    v192 += 7;
                    uint64_t v103 = v194;
                    BOOL v14 = v193++ > 8;
                    if (v14) {
                      goto LABEL_251;
                    }
                    continue;
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v10_Block_object_dispose(va, 8) = 0;
                  }
                }

                break;
              }

LABEL_330:
          *(_DWORD *)(a1 + 164) = v103;
          goto LABEL_294;
        case 0x1Eu:
          *(void *)(a1 + 216) |= 0x100uLL;
          unint64_t v106 = *((void *)this + 1);
          unint64_t v107 = *((void *)this + 2);
          uint64_t v108 = *(void *)this;
          if (v106 <= 0xFFFFFFFFFFFFFFF5LL && v106 + 10 <= v107)
          {
            char v109 = 0;
            unsigned int v110 = 0;
            uint64_t v111 = 0LL;
            do
            {
              unint64_t v112 = v106 + 1;
              *((void *)this + 1) = v106 + 1;
              char v113 = *(_BYTE *)(v108 + v106);
              v111 |= (unint64_t)(v113 & 0x7F) << v109;
              if ((v113 & 0x80) == 0) {
                goto LABEL_334;
              }
              v109 += 7;
              unint64_t v106 = v112;
              BOOL v14 = v110++ > 8;
            }

            while (!v14);
LABEL_277:
            LODWORD(v111) = 0;
            goto LABEL_334;
          }

          char v179 = 0;
          unsigned int v180 = 0;
          uint64_t v111 = 0LL;
          if (v107 <= v106) {
            unint64_t v107 = *((void *)this + 1);
          }
          while (2)
          {
            if (v107 == v106)
            {
              LODWORD(v111) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v181 = v106 + 1;
              char v182 = *(_BYTE *)(v108 + v106);
              *((void *)this + 1) = v181;
              v111 |= (unint64_t)(v182 & 0x7F) << v179;
              if (v182 < 0)
              {
                v179 += 7;
                unint64_t v106 = v181;
                BOOL v14 = v180++ > 8;
                if (v14) {
                  goto LABEL_277;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v111) = 0;
              }
            }

            break;
          }

              *(_DWORD *)(a1 + 60) = v119;
              goto LABEL_282;
            case 0x15u:
              *(void *)(a1 + 164) |= 0x800uLL;
              unint64_t v122 = *((void *)this + 1);
              if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v122);
              goto LABEL_281;
            case 0x16u:
              *(void *)(a1 + 164) |= 0x1000uLL;
              unint64_t v123 = *((void *)this + 1);
              if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v123);
              goto LABEL_281;
            case 0x17u:
              *(void *)(a1 + 164) |= 0x2000uLL;
              uint64_t v124 = *((void *)this + 1);
              if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v124);
              goto LABEL_281;
            case 0x18u:
              *(void *)(a1 + 164) |= 0x100uLL;
              char v125 = *((void *)this + 1);
              if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v125);
              goto LABEL_281;
            case 0x19u:
              *(void *)(a1 + 164) |= 0x200uLL;
              unsigned int v126 = *((void *)this + 1);
              if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v126);
              goto LABEL_281;
            case 0x1Au:
              *(void *)(a1 + 164) |= 0x400uLL;
              uint64_t v127 = *((void *)this + 1);
              if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v127);
              goto LABEL_281;
            case 0x1Bu:
              *(void *)(a1 + 164) |= 0x8000000uLL;
              unint64_t v128 = *((void *)this + 1);
              if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v128);
              goto LABEL_281;
            case 0x1Cu:
              *(void *)(a1 + 164) |= 0x800000uLL;
              char v129 = *((void *)this + 1);
              unint64_t v130 = *((void *)this + 2);
              unint64_t v131 = *(void *)this;
              if (v129 <= 0xFFFFFFFFFFFFFFF5LL && v129 + 10 <= v130)
              {
                unint64_t v132 = 0;
                unint64_t v133 = 0;
                unint64_t v134 = 0LL;
                do
                {
                  unint64_t v135 = v129 + 1;
                  *((void *)this + 1) = v129 + 1;
                  unint64_t v136 = *(_BYTE *)(v131 + v129);
                  v134 |= (unint64_t)(v136 & 0x7F) << v132;
                  if ((v136 & 0x80) == 0) {
                    goto LABEL_334;
                  }
                  v132 += 7;
                  char v129 = v135;
                  BOOL v14 = v133++ > 8;
                }

                while (!v14);
LABEL_265:
                LODWORD(v134) = 0;
                goto LABEL_334;
              }

              unint64_t v200 = 0;
              unint64_t v201 = 0;
              unint64_t v134 = 0LL;
              if (v130 <= v129) {
                unint64_t v130 = *((void *)this + 1);
              }
              while (2)
              {
                if (v130 == v129)
                {
                  LODWORD(v134) = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v202 = v129 + 1;
                  unint64_t v203 = *(_BYTE *)(v131 + v129);
                  *((void *)this + 1) = v202;
                  v134 |= (unint64_t)(v203 & 0x7F) << v200;
                  if (v203 < 0)
                  {
                    v200 += 7;
                    char v129 = v202;
                    BOOL v14 = v201++ > 8;
                    if (v14) {
                      goto LABEL_265;
                    }
                    continue;
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v134) = 0;
                  }
                }

                break;
              }

LABEL_334:
          *(_DWORD *)(a1 + 52) = v111;
          goto LABEL_294;
        case 0x1Fu:
          *(void *)(a1 + 216) |= 0x200000000uLL;
          unint64_t v114 = *((void *)this + 1);
          if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v114);
          goto LABEL_293;
        case 0x20u:
          *(void *)(a1 + 216) |= 0x800uLL;
          unint64_t v115 = *((void *)this + 1);
          if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v115);
          goto LABEL_293;
        case 0x21u:
          *(void *)(a1 + 216) |= 0x400uLL;
          unint64_t v116 = *((void *)this + 1);
          if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v116);
          goto LABEL_293;
        case 0x22u:
          *(void *)(a1 + 216) |= 0x200000uLL;
          unint64_t v117 = *((void *)this + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v117);
          goto LABEL_293;
        case 0x23u:
          *(void *)(a1 + 216) |= 0x40000uLL;
          unint64_t v118 = *((void *)this + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v118);
          goto LABEL_293;
        case 0x24u:
          *(void *)(a1 + 216) |= 0x20000000uLL;
          unint64_t v119 = *((void *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v119);
          goto LABEL_293;
        case 0x25u:
          *(void *)(a1 + 216) |= 0x800000000uLL;
          unint64_t v120 = *((void *)this + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v120);
          goto LABEL_293;
        case 0x26u:
          *(void *)(a1 + 216) |= 0x400000000uLL;
          unint64_t v121 = *((void *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v121);
          goto LABEL_293;
        case 0x27u:
          *(void *)(a1 + 216) |= 0x8000uLL;
          unint64_t v122 = *((void *)this + 1);
          unint64_t v123 = *((void *)this + 2);
          uint64_t v124 = *(void *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5LL && v122 + 10 <= v123)
          {
            char v125 = 0;
            unsigned int v126 = 0;
            uint64_t v127 = 0LL;
            do
            {
              unint64_t v128 = v122 + 1;
              *((void *)this + 1) = v122 + 1;
              char v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0) {
                goto LABEL_338;
              }
              v125 += 7;
              unint64_t v122 = v128;
              BOOL v14 = v126++ > 8;
            }

            while (!v14);
LABEL_284:
            LODWORD(v127) = 0;
            goto LABEL_338;
          }

          char v183 = 0;
          unsigned int v184 = 0;
          uint64_t v127 = 0LL;
          if (v123 <= v122) {
            unint64_t v123 = *((void *)this + 1);
          }
          while (2)
          {
            if (v123 == v122)
            {
              LODWORD(v127) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v185 = v122 + 1;
              char v186 = *(_BYTE *)(v124 + v122);
              *((void *)this + 1) = v185;
              v127 |= (unint64_t)(v186 & 0x7F) << v183;
              if (v186 < 0)
              {
                v183 += 7;
                unint64_t v122 = v185;
                BOOL v14 = v184++ > 8;
                if (v14) {
                  goto LABEL_284;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v127) = 0;
              }
            }

            break;
          }

              *(_DWORD *)(a1 + 124) = v134;
              goto LABEL_282;
            case 0x1Du:
              *(void *)(a1 + 164) |= 0x20uLL;
              uint64_t v137 = *((void *)this + 1);
              char v138 = *((void *)this + 2);
              unsigned int v139 = *(void *)this;
              if (v137 <= 0xFFFFFFFFFFFFFFF5LL && v137 + 10 <= v138)
              {
                uint64_t v140 = 0;
                unint64_t v141 = 0;
                char v142 = 0LL;
                do
                {
                  unint64_t v143 = v137 + 1;
                  *((void *)this + 1) = v137 + 1;
                  unint64_t v144 = *(_BYTE *)(v139 + v137);
                  v142 |= (unint64_t)(v144 & 0x7F) << v140;
                  if ((v144 & 0x80) == 0) {
                    goto LABEL_338;
                  }
                  v140 += 7;
                  uint64_t v137 = v143;
                  BOOL v14 = v141++ > 8;
                }

                while (!v14);
LABEL_272:
                char v142 = 0LL;
                goto LABEL_338;
              }

              unint64_t v204 = 0;
              unint64_t v205 = 0;
              char v142 = 0LL;
              if (v138 <= v137) {
                char v138 = *((void *)this + 1);
              }
              while (2)
              {
                if (v138 == v137)
                {
                  char v142 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v206 = v137 + 1;
                  uint64_t v207 = *(_BYTE *)(v139 + v137);
                  *((void *)this + 1) = v206;
                  v142 |= (unint64_t)(v207 & 0x7F) << v204;
                  if (v207 < 0)
                  {
                    v204 += 7;
                    uint64_t v137 = v206;
                    BOOL v14 = v205++ > 8;
                    if (v14) {
                      goto LABEL_272;
                    }
                    continue;
                  }

                  if (*((_BYTE *)this + 24)) {
                    char v142 = 0LL;
                  }
                }

                break;
              }

LABEL_338:
          *(_DWORD *)(a1 + 80) = v127;
          goto LABEL_294;
        case 0x28u:
          *(void *)(a1 + 216) |= 0x10000000uLL;
          unint64_t v130 = *((void *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v130);
          goto LABEL_293;
        case 0x29u:
          *(void *)(a1 + 216) |= 0x4000000uLL;
          unint64_t v131 = *((void *)this + 1);
          if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v131);
          goto LABEL_293;
        case 0x2Au:
          *(void *)(a1 + 216) |= 0x8000000uLL;
          unint64_t v132 = *((void *)this + 1);
          if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v132);
          goto LABEL_293;
        case 0x2Bu:
          *(void *)(a1 + 216) |= 0x20uLL;
          unint64_t v133 = *((void *)this + 1);
          if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v133);
          goto LABEL_293;
        case 0x2Cu:
          *(void *)(a1 + 216) |= 0x1000000uLL;
          unint64_t v134 = *((void *)this + 1);
          if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v134);
          goto LABEL_293;
        case 0x2Du:
          *(void *)(a1 + 216) |= 0x2000000uLL;
          unint64_t v135 = *((void *)this + 1);
          unint64_t v136 = *((void *)this + 2);
          uint64_t v137 = *(void *)this;
          if (v135 <= 0xFFFFFFFFFFFFFFF5LL && v135 + 10 <= v136)
          {
            char v138 = 0;
            unsigned int v139 = 0;
            uint64_t v140 = 0LL;
            do
            {
              unint64_t v141 = v135 + 1;
              *((void *)this + 1) = v135 + 1;
              char v142 = *(_BYTE *)(v137 + v135);
              v140 |= (unint64_t)(v142 & 0x7F) << v138;
              if ((v142 & 0x80) == 0) {
                goto LABEL_342;
              }
              v138 += 7;
              unint64_t v135 = v141;
              BOOL v14 = v139++ > 8;
            }

            while (!v14);
LABEL_291:
            LODWORD(v140) = 0;
            goto LABEL_342;
          }

          char v187 = 0;
          unsigned int v188 = 0;
          uint64_t v140 = 0LL;
          if (v136 <= v135) {
            unint64_t v136 = *((void *)this + 1);
          }
          break;
        case 0x2Eu:
          *(void *)(a1 + 216) |= 0x2000uLL;
          unint64_t v143 = *((void *)this + 1);
          if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v143);
          goto LABEL_293;
        case 0x2Fu:
          *(void *)(a1 + 216) |= 0x200uLL;
          unint64_t v144 = *((void *)this + 1);
          if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v144);
          goto LABEL_293;
        case 0x30u:
          *(void *)(a1 + 216) |= 0x400000uLL;
          unint64_t v145 = *((void *)this + 1);
          if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v145);
          goto LABEL_293;
        case 0x31u:
          *(void *)(a1 + 216) |= 8uLL;
          unint64_t v146 = *((void *)this + 1);
          if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v146);
LABEL_293:
            *((void *)this + 1) += 4LL;
          }

          else
          {
LABEL_214:
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_294;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_294;
      }

      while (1)
      {
        if (v136 == v135)
        {
          LODWORD(v140) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_342;
        }

        unint64_t v189 = v135 + 1;
        char v190 = *(_BYTE *)(v137 + v135);
        *((void *)this + 1) = v189;
        v140 |= (unint64_t)(v190 & 0x7F) << v187;
        if ((v190 & 0x80) == 0) {
          break;
        }
        v187 += 7;
        unint64_t v135 = v189;
        BOOL v14 = v188++ > 8;
        if (v14) {
          goto LABEL_291;
        }
      }

      if (*((_BYTE *)this + 24)) {
        LODWORD(v140) = 0;
      }
LABEL_342:
      *(_DWORD *)(a1 + 120) = v140;
LABEL_294:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

              *(void *)(a1 + 4_Block_object_dispose(va, 8) = v142;
              goto LABEL_282;
            case 0x1Eu:
              *(void *)(a1 + 164) |= 0x2000000uLL;
              unint64_t v145 = *((void *)this + 1);
              if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v145);
              goto LABEL_281;
            case 0x1Fu:
              *(void *)(a1 + 164) |= 0x40000000uLL;
              unint64_t v146 = *((void *)this + 1);
              if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v146);
LABEL_281:
                *((void *)this + 1) += 4LL;
              }

              else
              {
LABEL_170:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_282;
            default:
              if ((_DWORD)v20 == 201)
              {
                *(void *)(a1 + 164) |= 1uLL;
                char v147 = *((void *)this + 1);
                unsigned int v148 = *((void *)this + 2);
                unint64_t v149 = *(void *)this;
                if (v147 > 0xFFFFFFFFFFFFFFF5LL || v147 + 10 > v148)
                {
                  char v208 = 0;
                  unsigned int v209 = 0;
                  unsigned int v152 = 0LL;
                  if (v148 <= v147) {
                    unsigned int v148 = *((void *)this + 1);
                  }
                  while (1)
                  {
                    if (v148 == v147)
                    {
                      unsigned int v152 = 0LL;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_342;
                    }

                    uint64_t v210 = v147 + 1;
                    unint64_t v211 = *(_BYTE *)(v149 + v147);
                    *((void *)this + 1) = v210;
                    v152 |= (unint64_t)(v211 & 0x7F) << v208;
                    if ((v211 & 0x80) == 0) {
                      break;
                    }
                    v208 += 7;
                    char v147 = v210;
                    BOOL v14 = v209++ > 8;
                    if (v14)
                    {
LABEL_279:
                      unsigned int v152 = 0LL;
                      goto LABEL_342;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    unsigned int v152 = 0LL;
                  }
                }

                else
                {
                  char v150 = 0;
                  char v151 = 0;
                  unsigned int v152 = 0LL;
                  while (1)
                  {
                    unint64_t v153 = v147 + 1;
                    *((void *)this + 1) = v147 + 1;
                    char v154 = *(_BYTE *)(v149 + v147);
                    v152 |= (unint64_t)(v154 & 0x7F) << v150;
                    if ((v154 & 0x80) == 0) {
                      break;
                    }
                    v150 += 7;
                    char v147 = v153;
                    BOOL v14 = v151++ > 8;
                    if (v14) {
                      goto LABEL_279;
                    }
                  }
                }

            *(v150 - 1) = v192;
          }

uint64_t sub_101085AF4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 216);
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 144), 1u);
    uint64_t v4 = *(void *)(v3 + 216);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_53;
    }
  }

  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 2u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_54;
  }

uint64_t sub_101086074(uint64_t result)
{
  *(void *)uint64_t result = &off_101898990;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_10108608C(PB::Base *a1)
{
}

uint64_t sub_1010860A0(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101898990;
  *(_DWORD *)(result + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(result + 44) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 44) = v3;
    *(void *)(result + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 44);
  }

uint64_t sub_101086148(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "aggAccelZDelta", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "arcLength", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "firstLoftAngleDeg", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 44) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_101086218(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101086560(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_101086610(uint64_t result)
{
  *(void *)uint64_t result = &off_1018989C8;
  *(_DWORD *)(result + 176) = 0;
  return result;
}

void sub_101086628(PB::Base *a1)
{
}

double sub_10108663C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018989C8;
  *(_DWORD *)(a1 + 176) = 0;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    int v3 = 8;
    *(_DWORD *)(a1 + 176) = 8;
    *(double *)(a1 + 32) = result;
    int v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 40) = result;
    int v2 = *(_DWORD *)(a2 + 176);
  }

uint64_t sub_1010868BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cadenceDeviceIdentification", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 176);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "cadenceUpdateTime", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }

uint64_t sub_101086BAC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10108757C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 176);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    int v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }

  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }

uint64_t sub_101087808(uint64_t result)
{
  *(void *)uint64_t result = &off_101898A00;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_101087820(PB::Base *a1)
{
}

float sub_101087834(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898A00;
  *(_DWORD *)(a1 + 112) = 0;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    int v3 = 4;
    *(_DWORD *)(a1 + 112) = 4;
    *(void *)(a1 + 24) = v4;
    int v2 = *(_DWORD *)(a2 + 112);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v4 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 112) = v3;
    *(void *)(a1 + 16) = v4;
    int v2 = *(_DWORD *)(a2 + 112);
  }

uint64_t sub_101087AD4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "averageCadence", *(float *)(a1 + 32));
    int v5 = *(_DWORD *)(a1 + 112);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "averageHeartRate", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }

uint64_t sub_101087DE4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010885D8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 112);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    int v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }

uint64_t sub_101088880(uint64_t result)
{
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = 0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = &off_101898A38;
  return result;
}

void sub_101088898(PB::Base *this)
{
  *(void *)this = &off_101898A38;
  int v4 = (void **)*((void *)this + 2);
  unint64_t v2 = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  int v5 = (void **)*((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v5) {
    sub_10058A4FC((_DWORD)this + 8, v5);
  }
  PB::Base::~Base(this);
}

void sub_1010888EC(PB::Base *a1)
{
}

uint64_t sub_101088900(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  int v4 = (void ***)(a1 + 8);
  *(void *)a1 = &off_101898A38;
  *(void *)(a1 + 16) = 0LL;
  int v5 = (void ***)(a1 + 16);
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  int v6 = *(__int128 **)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = (void **)operator new(0x18uLL);
    uint64_t v8 = v7;
    if (*((char *)v6 + 23) < 0)
    {
      sub_1010DD48C(v7, *(void **)v6, *((void *)v6 + 1));
      unsigned int v10 = *v4;
      const PB::Base *v4 = v8;
      if (v10) {
        sub_10058A4FC((int)v4, v10);
      }
    }

    else
    {
      __int128 v9 = *v6;
      v7[2] = (void *)*((void *)v6 + 2);
      *(_OWORD *)uint64_t v7 = v9;
      const PB::Base *v4 = v7;
    }
  }

  unint64_t v11 = *(__int128 **)(a2 + 16);
  if (v11)
  {
    unint64_t v12 = (void **)operator new(0x18uLL);
    char v13 = v12;
    if (*((char *)v11 + 23) < 0)
    {
      sub_1010DD48C(v12, *(void **)v11, *((void *)v11 + 1));
    }

    else
    {
      __int128 v14 = *v11;
      v12[2] = (void *)*((void *)v11 + 2);
      *(_OWORD *)unint64_t v12 = v14;
    }

    char v15 = *v5;
    *int v5 = v13;
    if (v15) {
      sub_10058A4FC((int)v5, v15);
    }
  }

  char v16 = *(_BYTE *)(a2 + 48);
  if ((v16 & 4) != 0)
  {
    int v19 = *(_DWORD *)(a2 + 36);
    *(_BYTE *)(a1 + 48) |= 4u;
    *(_DWORD *)(a1 + 36) = v19;
    char v16 = *(_BYTE *)(a2 + 48);
    if ((v16 & 2) == 0)
    {
LABEL_14:
      if ((v16 & 8) == 0) {
        goto LABEL_15;
      }
      goto LABEL_21;
    }
  }

  else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
  {
    goto LABEL_14;
  }

  int v20 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) |= 2u;
  *(_DWORD *)(a1 + 32) = v20;
  char v16 = *(_BYTE *)(a2 + 48);
  if ((v16 & 8) == 0)
  {
LABEL_15:
    if ((v16 & 0x10) == 0) {
      goto LABEL_16;
    }
LABEL_22:
    char v22 = *(_BYTE *)(a2 + 44);
    *(_BYTE *)(a1 + 48) |= 0x10u;
    *(_BYTE *)(a1 + 44) = v22;
    if ((*(_BYTE *)(a2 + 48) & 1) == 0) {
      return a1;
    }
    goto LABEL_17;
  }

uint64_t sub_101088AA0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format(this, "mode");
  }
  char v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "modeSemanticType", *(_DWORD *)(a1 + 32));
    char v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }

  else if ((*(_BYTE *)(a1 + 48) & 4) == 0)
  {
    goto LABEL_5;
  }

  PB::TextFormatter::format(this, "modeUpdateReason", *(_DWORD *)(a1 + 36));
  if ((*(_BYTE *)(a1 + 48) & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "modeUpdateSource", *(_DWORD *)(a1 + 40));
LABEL_7:
  if (*(void *)(a1 + 16)) {
    PB::TextFormatter::format(this, "semanticModeIdentifier");
  }
  char v6 = *(_BYTE *)(a1 + 48);
  if ((v6 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "starting", *(_BYTE *)(a1 + 44));
    char v6 = *(_BYTE *)(a1 + 48);
  }

  if ((v6 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101088B98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void ***)(a1 + 16);
    __int128 v9 = (void ***)(a1 + 8);
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0LL;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010890E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::write(this, v4, 1LL);
  }
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5) {
    uint64_t result = PB::Writer::write(this, v5, 2LL);
  }
  char v6 = *(_BYTE *)(v3 + 48);
  if ((v6 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 3u);
    char v6 = *(_BYTE *)(v3 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }

  else if ((*(_BYTE *)(v3 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  char v6 = *(_BYTE *)(v3 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }

double sub_1010891B8(uint64_t a1)
{
  *(void *)a1 = &off_101898A70;
  *(_DWORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1010891DC(PB::Base *this)
{
  *(void *)this = &off_101898A70;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_10108922C(PB::Base *a1)
{
}

uint64_t sub_101089240(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898A70;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  uint64_t v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    *(void *)(a1 + 56) = v5;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  return a1;
}

uint64_t sub_1010892D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(float **)(a1 + 8);
  char v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "freq", v7);
  }

  uint64_t v8 = *(float **)(a1 + 32);
  __int128 v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "mag", v10);
  }

  if ((*(_BYTE *)(a1 + 64) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101089384(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    unsigned int v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        unint64_t v17 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v23 = v4 + 1;
          char v24 = *(_BYTE *)(v14 + v4);
          *((void *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_21;
          }
          v21 += 7;
          unint64_t v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            unint64_t v17 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010898FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = (void *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  }
  unint64_t v4 = (float *)v3[1];
  unint64_t v5 = (float *)v3[2];
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  uint64_t v8 = (float *)v3[4];
  float v7 = (float *)v3[5];
  while (v8 != v7)
  {
    float v9 = *v8++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  return result;
}

void *sub_10108997C(void *result)
{
  const char *result = off_101898AA8;
  result[1] = 0LL;
  return result;
}

void sub_10108998C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101898AA8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010899CC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101898AA8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_101089A10(void *a1, uint64_t a2)
{
  *a1 = off_101898AA8;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    unint64_t v4 = operator new(0x38uLL);
    double v5 = sub_1010F844C((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v7;
    if (v6) {
      (*(void (**)(uint64_t, double))(*(void *)v6 + 8LL))(v6, v5);
    }
  }

  return a1;
}

uint64_t sub_101089A78(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101089AC8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101089C80(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_101089C9C(uint64_t result)
{
  *(void *)uint64_t result = &off_101898AE0;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_101089CB4(PB::Base *a1)
{
}

float sub_101089CC8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898AE0;
  *(_DWORD *)(a1 + 100) = 0;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 100) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    int v2 = *(_DWORD *)(a2 + 100);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 100) = v3;
    *(void *)(a1 + 24) = v5;
    int v2 = *(_DWORD *)(a2 + 100);
  }

uint64_t sub_101089F84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbabilityEstimate", *(float *)(a1 + 40));
    int v5 = *(_DWORD *)(a1 + 100);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }

  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }

uint64_t sub_10108A2B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10108AC94(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 100);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }

  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 2u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }

uint64_t sub_10108AF58(uint64_t result)
{
  *(void *)uint64_t result = &off_101898B18;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_10108AF70(PB::Base *a1)
{
}

uint64_t sub_10108AF84(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101898B18;
  *(_DWORD *)(result + 116) = 0;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 64);
    int v3 = 128;
    *(_DWORD *)(result + 116) = 128;
    *(void *)(result + 64) = v4;
    int v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 114);
    v3 |= 0x100000u;
    *(_DWORD *)(result + 116) = v3;
    *(_BYTE *)(result + 114) = v5;
    int v2 = *(_DWORD *)(a2 + 116);
  }

uint64_t sub_10108B208(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "curImpulseStartTime", *(void *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "curLoftEndTime", *(void *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }

uint64_t sub_10108B4F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10108C068(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 116);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }

  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 114), 2u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }

uint64_t sub_10108C2F4(uint64_t result)
{
  *(void *)uint64_t result = &off_101898B50;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

void sub_10108C30C(PB::Base *a1)
{
}

double sub_10108C320(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898B50;
  *(_DWORD *)(a1 + 76) = 0;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    __int16 v3 = 4;
    *(_WORD *)(a1 + 76) = 4;
    *(double *)(a1 + 24) = result;
    __int16 v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_WORD *)(a1 + 76) = v3;
    *(double *)(a1 + 40) = result;
    __int16 v2 = *(_WORD *)(a2 + 76);
  }

uint64_t sub_10108C454(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "emptyField2", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((*(_WORD *)(a1 + 76) & 0x100) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "emptyField3", *(_BYTE *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_10108C5C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10108C988(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 76);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_10108CAC4(uint64_t result)
{
  *(void *)uint64_t result = &off_101898B88;
  *(_DWORD *)(result + 8_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_10108CADC(PB::Base *a1)
{
}

double sub_10108CAF0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898B88;
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x800) != 0)
  {
    char v4 = *(_BYTE *)(a2 + 84);
    __int16 v3 = 2048;
    *(_WORD *)(a1 + 8_Block_object_dispose(va, 8) = 2048;
    *(_BYTE *)(a1 + 84) = v4;
    __int16 v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(a1 + 8_Block_object_dispose(va, 8) = v3;
    *(double *)(a1 + _Block_object_dispose(va, 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
  }

uint64_t sub_10108CC94(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "crownOrientation", *(_DWORD *)(a1 + 72));
    __int16 v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }

uint64_t sub_10108CE84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10108D550(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x800) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(result + 84), 1u);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_10108D6FC(uint64_t result)
{
  *(void *)uint64_t result = &off_101898BC0;
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_10108D714(PB::Base *a1)
{
}

double sub_10108D728(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898BC0;
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x20) != 0)
  {
    char v4 = *(_BYTE *)(a2 + 44);
    char v3 = 32;
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 32;
    *(_BYTE *)(a1 + 44) = v4;
    char v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = v3;
    *(double *)(a1 + _Block_object_dispose(va, 8) = result;
    char v2 = *(_BYTE *)(a2 + 48);
  }

uint64_t sub_10108D7EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "initialContactTime", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_10108D8DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10108DC68(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 48);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(result + 44), 1u);
    char v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 48) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_10108DD34(uint64_t result)
{
  *(void *)uint64_t result = &off_101898BF8;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_10108DD4C(PB::Base *a1)
{
}

float sub_10108DD60(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898BF8;
  *(_DWORD *)(a1 + 52) = 0;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    float result = *(float *)(a2 + 28);
    __int16 v3 = 32;
    *(_WORD *)(a1 + 52) = 32;
    *(float *)(a1 + 2_Block_object_dispose(va, 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 32);
    v3 |= 0x40u;
    *(_WORD *)(a1 + 52) = v3;
    *(float *)(a1 + 32) = result;
    __int16 v2 = *(_WORD *)(a2 + 52);
  }

uint64_t sub_10108DEB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(float *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "decimalYear", *(float *)(a1 + 12));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_10108E040(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10108E424(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 52);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 28), 1u);
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 2u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_10108E57C(uint64_t result)
{
  *(void *)uint64_t result = &off_101898C30;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10108E598(PB::Base *a1)
{
}

double sub_10108E5AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898C30;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(a1 + 32) = 2;
    *(double *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 28);
    v3 |= 8u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_10108E63C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "measSource", *(_DWORD *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "stateProbability", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10108E6EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10108EAB0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  }

double sub_10108EB44(uint64_t a1)
{
  *(void *)a1 = off_101898C68;
  *(_DWORD *)(a1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0LL;
  return result;
}

void sub_10108EB7C(void **a1)
{
  *a1 = off_101898C68;
  unint64_t v2 = a1 + 3;
  uint64_t v3 = a1 + 15;
  sub_1004CADB0(&v3);
  uint64_t v3 = a1 + 12;
  sub_1004CADB0(&v3);
  uint64_t v3 = a1 + 9;
  sub_1004CADB0(&v3);
  uint64_t v3 = a1 + 6;
  sub_1004CADB0(&v3);
  uint64_t v3 = v2;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10108EC08(void **a1)
{
}

uint64_t sub_10108EC1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_101898C68;
  *(_OWORD *)(a1 + 24) = 0u;
  char v4 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 72) = 0u;
  char v5 = (char **)(a1 + 72);
  *(_OWORD *)(a1 + 120) = 0u;
  int v6 = (char **)(a1 + 120);
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 136) = 0LL;
  if ((*(_BYTE *)(a2 + 152) & 4) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = 4;
    *(void *)(a1 + 144) = v7;
  }

  uint64_t v8 = *(uint64_t **)(a2 + 96);
  unsigned int v10 = *(uint64_t **)(a2 + 72);
  unint64_t v11 = *(uint64_t **)(a2 + 80);
  while (v10 != v11)
    sub_10108EDAC(v5, *v10++);
  unint64_t v12 = *(uint64_t **)(a2 + 120);
  char v13 = *(uint64_t **)(a2 + 128);
  while (v12 != v13)
    sub_10108EDAC(v6, *v12++);
  BOOL v14 = *(uint64_t **)(a2 + 48);
  unsigned int v16 = *(uint64_t **)(a2 + 24);
  unint64_t v17 = *(uint64_t **)(a2 + 32);
  while (v16 != v17)
    sub_10108EDAC(v4, *v16++);
  char v18 = *(_BYTE *)(a2 + 152);
  if ((v18 & 2) != 0)
  {
    uint64_t v19 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 152) |= 2u;
    *(void *)(a1 + 16) = v19;
    char v18 = *(_BYTE *)(a2 + 152);
  }

  if ((v18 & 1) != 0)
  {
    uint64_t v20 = *(void *)(a2 + 8);
    *(_BYTE *)(a1 + 152) |= 1u;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v20;
  }

  return a1;
}

uint64_t sub_10108EDAC(char **a1, uint64_t a2)
{
  char v4 = operator new(0x18uLL);
  sub_101140314((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    unsigned int v24 = a1 + 2;
    if (v12) {
      char v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      char v13 = 0LL;
    }
    BOOL v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    char v23 = v15;
    *(void *)BOOL v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    unint64_t v17 = *a1;
    unsigned int v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)unsigned int v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      char v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    uint64_t v20 = a1[2];
    a1[2] = v15;
    char v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_10108EED0(_Unwind_Exception *a1)
{
}

uint64_t sub_10108EEF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 152);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "lifespan", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 152);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "machTime", *(double *)(a1 + 16));
  }
  unint64_t v6 = *(uint64_t **)(a1 + 24);
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32LL))( v8,  this,  "satInfoBeidou");
  }

  uint64_t v9 = *(uint64_t **)(a1 + 48);
  uint64_t v10 = *(uint64_t **)(a1 + 56);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32LL))( v11,  this,  "satInfoGalileo");
  }

  unint64_t v12 = *(uint64_t **)(a1 + 72);
  char v13 = *(uint64_t **)(a1 + 80);
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32LL))( v14,  this,  "satInfoGlonass");
  }

  char v15 = *(uint64_t **)(a1 + 96);
  unsigned int v16 = *(uint64_t **)(a1 + 104);
  while (v15 != v16)
  {
    uint64_t v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32LL))( v17,  this,  "satInfoGps");
  }

  uint64_t v18 = *(uint64_t **)(a1 + 120);
  int64x2_t v19 = *(uint64_t **)(a1 + 128);
  while (v18 != v19)
  {
    uint64_t v20 = *v18++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v20 + 32LL))( v20,  this,  "satInfoQzss");
  }

  if ((*(_BYTE *)(a1 + 152) & 4) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 144));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10108F088(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  uint64_t v8 = (char **)(a1 + 24);
  uint64_t v9 = (char **)(a1 + 48);
  uint64_t v10 = (char **)(a1 + 120);
  uint64_t v11 = (char **)(a1 + 72);
  unint64_t v12 = (char **)(a1 + 96);
  while (2)
  {
    uint64_t v13 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v20 = 0;
      unsigned int v21 = 0;
      unint64_t v16 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v22 = v2 + 1;
        char v23 = *(_BYTE *)(v13 + v2);
        *((void *)this + 1) = v22;
        v16 |= (unint64_t)(v23 & 0x7F) << v20;
        if ((v23 & 0x80) == 0) {
          goto LABEL_21;
        }
        v20 += 7;
        unint64_t v2 = v22;
        if (v21++ >= 9)
        {
LABEL_20:
          unint64_t v16 = 0LL;
          goto LABEL_21;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v16 = 0LL;
    while (1)
    {
      unint64_t v17 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v18 = *(_BYTE *)(v13 + v2);
      v16 |= (unint64_t)(v18 & 0x7F) << v14;
      if ((v18 & 0x80) == 0) {
        break;
      }
      v14 += 7;
      unint64_t v2 = v17;
      if (v15++ > 8) {
        goto LABEL_20;
      }
    }

uint64_t sub_10108F36C(char **a1)
{
  unint64_t v2 = operator new(0x18uLL);
  sub_10114027C((uint64_t)v2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  char v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    unint64_t v22 = a1 + 2;
    if (v10) {
      uint64_t v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      uint64_t v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    uint64_t v13 = &v11[8 * v10];
    unsigned int v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    unsigned int v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      uint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    char v18 = a1[2];
    a1[2] = v13;
    unsigned int v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)char v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_10108F488(_Unwind_Exception *a1)
{
}

uint64_t sub_10108F4A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 152) & 4) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 144), 1u);
  }
  unint64_t v4 = *(const PB::Base ***)(v3 + 96);
  char v5 = *(const PB::Base ***)(v3 + 104);
  while (v4 != v5)
  {
    unint64_t v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 2u);
  }

  uint64_t v7 = *(const PB::Base ***)(v3 + 72);
  uint64_t v8 = *(const PB::Base ***)(v3 + 80);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    uint64_t result = PB::Writer::writeSubmessage(this, v9, 3u);
  }

  unint64_t v10 = *(const PB::Base ***)(v3 + 120);
  uint64_t v11 = *(const PB::Base ***)(v3 + 128);
  while (v10 != v11)
  {
    unint64_t v12 = *v10++;
    uint64_t result = PB::Writer::writeSubmessage(this, v12, 4u);
  }

  uint64_t v13 = *(const PB::Base ***)(v3 + 48);
  char v14 = *(const PB::Base ***)(v3 + 56);
  while (v13 != v14)
  {
    unsigned int v15 = *v13++;
    uint64_t result = PB::Writer::writeSubmessage(this, v15, 5u);
  }

  uint64_t v16 = *(const PB::Base ***)(v3 + 24);
  int64x2_t v17 = *(const PB::Base ***)(v3 + 32);
  while (v16 != v17)
  {
    char v18 = *v16++;
    uint64_t result = PB::Writer::writeSubmessage(this, v18, 6u);
  }

  char v19 = *(_BYTE *)(v3 + 152);
  if ((v19 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 7u);
    char v19 = *(_BYTE *)(v3 + 152);
  }

  if ((v19 & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 8u);
  }
  return result;
}

uint64_t sub_10108F5C0(uint64_t result)
{
  *(void *)uint64_t result = &off_101898CA0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10108F5D8(PB::Base *a1)
{
}

float sub_10108F5EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898CA0;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_10108F694(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "gyroMaxMean", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "magnitudeDiffUnity", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "maxAccelStdAxis", *(float *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 32) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_10108F764(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10108FA00(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_10108FAB0(uint64_t result)
{
  *(void *)uint64_t result = off_101898CD8;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10108FAC4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101898CD8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10108FB04(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101898CD8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_10108FB48(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_101898CD8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    char v5 = operator new(0xA8uLL);
    uint64_t v6 = sub_1010F1098(v5, v4);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    char v8 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a1 + 20) |= 1u;
    *(_BYTE *)(a1 + 16) = v8;
  }

  return a1;
}

uint64_t sub_10108FBDC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "correction");
  }
  if ((*(_BYTE *)(a1 + 20) & 1) != 0) {
    PB::TextFormatter::format(this, "isAvgGrav", *(_BYTE *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10108FC48(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10108FE50(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if ((*(_BYTE *)(v3 + 20) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

void sub_10108FEA8(PB::Base *a1)
{
}

uint64_t sub_10108FEBC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101898D10;
  *(_DWORD *)(result + 44) = 0;
  __int16 v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(result + 44) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 44) = v3;
    *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = v5;
    __int16 v2 = *(_WORD *)(a2 + 44);
  }

uint64_t sub_10108FFD0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "sampleNumMod3", *(_DWORD *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_101090120(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010906D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 44);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_1010907F0(uint64_t result)
{
  *(void *)uint64_t result = &off_101898D48;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_101090808(PB::Base *a1)
{
}

uint64_t sub_10109081C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101898D48;
  *(_DWORD *)(result + 36) = 0;
  char v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 36) = 1;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 12);
    v3 |= 2u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 12) = v5;
    char v2 = *(_BYTE *)(a2 + 36);
  }

uint64_t sub_1010908FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 36) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 12));
  char v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_101090A0C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101090DC4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 36);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 36) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12), 2u);
  char v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

double sub_101090EAC(uint64_t a1)
{
  *(void *)a1 = &off_101898D80;
  *(_DWORD *)(a1 + 116) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  return result;
}

void sub_101090EDC(PB::Base *this)
{
  *(void *)this = &off_101898D80;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }

  char v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

void sub_101090F4C(PB::Base *a1)
{
}

uint64_t sub_101090F60(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898D80;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  char v5 = (char *)(a1 + 56);
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  char v6 = *(_BYTE *)(a2 + 116);
  if ((v6 & 1) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 104);
    char v7 = 1;
    *(_BYTE *)(a1 + 116) = 1;
    *(void *)(a1 + 104) = v8;
    char v6 = *(_BYTE *)(a2 + 116);
    if ((v6 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v7 = 0;
  if ((*(_BYTE *)(a2 + 116) & 4) != 0)
  {
LABEL_5:
    char v9 = *(_BYTE *)(a2 + 113);
    v7 |= 4u;
    *(_BYTE *)(a1 + 116) = v7;
    *(_BYTE *)(a1 + 113) = v9;
    char v6 = *(_BYTE *)(a2 + 116);
  }

uint64_t sub_101091074(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(float **)(a1 + 8);
  char v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "accelVariance", v7);
  }

  if ((*(_BYTE *)(a1 + 116) & 2) != 0) {
    PB::TextFormatter::format(this, "allowRelaxedGyroMean", *(_BYTE *)(a1 + 112));
  }
  uint64_t v8 = *(float **)(a1 + 32);
  char v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "gyroMean", v10);
  }

  unint64_t v11 = *(float **)(a1 + 56);
  unint64_t v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "gyroVariance", v13);
  }

  if ((*(_BYTE *)(a1 + 116) & 4) != 0) {
    PB::TextFormatter::format(this, "stillOnAll", *(_BYTE *)(a1 + 113));
  }
  BOOL v14 = *(float **)(a1 + 80);
  char v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(this, "temperatureBias", v16);
  }

  if ((*(_BYTE *)(a1 + 116) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010911B8(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 8);
    unint64_t v11 = (void **)(a1 + 80);
    uint64_t v138 = a1 + 96;
    uint64_t v139 = a1 + 24;
    unint64_t v12 = (void **)(a1 + 56);
    float v13 = (void **)(a1 + 32);
    uint64_t v136 = a1 + 48;
    uint64_t v137 = a1 + 72;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101091B38(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 116);
  if ((v4 & 1) == 0)
  {
    if ((*(_BYTE *)(result + 116) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_19:
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 113), 2u);
    if ((*(_BYTE *)(v3 + 116) & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  double result = PB::Writer::write(this, *(double *)(result + 104), 1u);
  char v4 = *(_BYTE *)(v3 + 116);
  if ((v4 & 4) != 0) {
    goto LABEL_19;
  }
LABEL_3:
  if ((v4 & 2) != 0) {
LABEL_4:
  }
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 112), 3u);
LABEL_5:
  unint64_t v5 = *(float **)(v3 + 32);
  int v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7, 4u);
  }

  uint64_t v8 = *(float **)(v3 + 56);
  char v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    float v10 = *v8++;
    double result = PB::Writer::write(this, v10, 5u);
  }

  unint64_t v11 = *(float **)(v3 + 80);
  unint64_t v12 = *(float **)(v3 + 88);
  while (v11 != v12)
  {
    float v13 = *v11++;
    double result = PB::Writer::write(this, v13, 6u);
  }

  char v15 = *(float **)(v3 + 8);
  uint64_t v14 = *(float **)(v3 + 16);
  while (v15 != v14)
  {
    float v16 = *v15++;
    double result = PB::Writer::write(this, v16, 7u);
  }

  return result;
}

uint64_t sub_101091C34(uint64_t result)
{
  *(void *)double result = off_101898DB8;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101091C48(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101898DB8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101091C88(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101898DB8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_101091CCC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_101898DB8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    unint64_t v5 = operator new(0xA8uLL);
    uint64_t v6 = sub_1010F1098(v5, v4);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) |= 1u;
    *(_DWORD *)(a1 + 16) = v8;
  }

  return a1;
}

uint64_t sub_101091D60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0) {
    PB::TextFormatter::format(this, "axis", *(_DWORD *)(a1 + 16));
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "correction");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101091DCC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101092074(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if ((*(_BYTE *)(v3 + 20) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

double sub_1010920C8(uint64_t a1)
{
  *(void *)a1 = &off_101898DF0;
  *(_DWORD *)(a1 + 92) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

void sub_1010920F4(PB::Base *this)
{
  *(void *)this = &off_101898DF0;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }

  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_101092154(PB::Base *a1)
{
}

uint64_t sub_101092168(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &off_101898DF0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0LL;
  if ((*(_BYTE *)(a2 + 92) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 80);
    *(_BYTE *)(a1 + 92) = 1;
    *(void *)(a1 + 80) = v5;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  }

  if ((*(_BYTE *)(a2 + 92) & 2) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 92) |= 2u;
    *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = v6;
  }

  return a1;
}

uint64_t sub_10109223C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(float **)(a1 + 8);
  int v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "dynamicBiasEstimate", v7);
  }

  uint64_t v8 = *(float **)(a1 + 32);
  char v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "estimateErrorMetric", v10);
  }

  if ((*(_BYTE *)(a1 + 92) & 2) != 0) {
    PB::TextFormatter::format(this, "rawGyroTemperature", *(float *)(a1 + 88));
  }
  unint64_t v11 = *(float **)(a1 + 56);
  unint64_t v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "subFitError", v13);
  }

  if ((*(_BYTE *)(a1 + 92) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101092338(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 56);
    unint64_t v11 = (void **)(a1 + 32);
    uint64_t v105 = a1 + 48;
    uint64_t v106 = a1 + 72;
    unint64_t v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101092AAC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 92) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 80), 1u);
  }
  unint64_t v4 = *(float **)(v3 + 8);
  unint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  float v10 = *(float **)(v3 + 56);
  unint64_t v11 = *(float **)(v3 + 64);
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12, 4u);
  }

  if ((*(_BYTE *)(v3 + 92) & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 88), 5u);
  }
  return result;
}

double sub_101092B70(uint64_t a1)
{
  *(void *)a1 = &off_101898E28;
  *(_DWORD *)(a1 + 60) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_101092B94(PB::Base *this)
{
  *(void *)this = &off_101898E28;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101092BE4(PB::Base *a1)
{
}

uint64_t sub_101092BF8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898E28;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  unint64_t v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 60) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    int v5 = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 60) |= 1u;
    *(_DWORD *)(a1 + 56) = v5;
  }

  return a1;
}

uint64_t sub_101092C9C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "intercept", v7);
  }

  if ((*(_BYTE *)(a1 + 60) & 1) != 0) {
    PB::TextFormatter::format(this, "lastMiniCal", *(float *)(a1 + 56));
  }
  uint64_t v8 = *(float **)(a1 + 32);
  float v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "slope", v10);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101092D50(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    float v12 = (void **)(a1 + 32);
    uint64_t v13 = a1 + 48;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        unint64_t v17 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v23 = v4 + 1;
          char v24 = *(_BYTE *)(v14 + v4);
          *((void *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_21;
          }
          v21 += 7;
          unint64_t v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            unint64_t v17 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010932C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(float **)(result + 32);
  unint64_t v5 = *(float **)(result + 40);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 1u);
  }

  float v7 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 2u);
  }

  if ((*(_BYTE *)(v3 + 60) & 1) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 56), 3u);
  }
  return result;
}

void *sub_10109334C(void *result)
{
  const char *result = off_101898E60;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_101093360(void **a1)
{
  *a1 = off_101898E60;
  unint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1010933A8(void **a1)
{
  *a1 = off_101898E60;
  uint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

void *sub_1010933F4(void *a1, uint64_t a2)
{
  a1[1] = 0LL;
  uint64_t v3 = (char **)(a1 + 1);
  *a1 = off_101898E60;
  a1[2] = 0LL;
  a1[3] = 0LL;
  unint64_t v4 = *(uint64_t **)(a2 + 8);
  unint64_t v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_101093458(v3, *v4++);
  return a1;
}

uint64_t sub_101093458(char **a1, uint64_t a2)
{
  unint64_t v4 = operator new(0x20uLL);
  sub_101093F48((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  float v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    char v24 = a1 + 2;
    if (v12) {
      uint64_t v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    unint64_t v23 = v15;
    *(void *)uint64_t v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    unint64_t v17 = *a1;
    unsigned int v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)unsigned int v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      char v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    unint64_t v20 = a1[2];
    a1[2] = v15;
    unint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)float v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_10109357C(_Unwind_Exception *a1)
{
}

uint64_t sub_10109359C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "sample");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101093608(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010937A8(char **a1)
{
  unint64_t v2 = operator new(0x20uLL);
  *(void *)unint64_t v2 = &off_101898ED0;
  v2[6] = 0;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  unint64_t v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    uint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    char v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    uint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)unint64_t v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_1010938D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1010938EC(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5, 1u))
    unint64_t v5 = *v2++;
  return result;
}

void *sub_101093934(void *result)
{
  const char *result = off_101898E98;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_101093948(void **a1)
{
  *a1 = off_101898E98;
  unint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_101093990(void **a1)
{
  *a1 = off_101898E98;
  unint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

void *sub_1010939DC(void *a1, uint64_t a2)
{
  a1[1] = 0LL;
  unint64_t v3 = (char **)(a1 + 1);
  *a1 = off_101898E98;
  a1[2] = 0LL;
  a1[3] = 0LL;
  unint64_t v4 = *(uint64_t **)(a2 + 8);
  unint64_t v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_101093A40(v3, *v4++);
  return a1;
}

uint64_t sub_101093A40(char **a1, uint64_t a2)
{
  unint64_t v4 = operator new(0x20uLL);
  sub_10109440C((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    char v24 = a1 + 2;
    if (v12) {
      unint64_t v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    char v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    uint64_t v23 = v15;
    *(void *)char v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    int64x2_t v17 = *a1;
    uint64_t v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)uint64_t v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      char v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    int64x2_t v20 = a1[2];
    a1[2] = v15;
    uint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_101093B64(_Unwind_Exception *a1)
{
}

uint64_t sub_101093B84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "sample");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101093BF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101093D90(char **a1)
{
  unint64_t v2 = operator new(0x20uLL);
  *unint64_t v2 = off_101898F08;
  v2[1] = 0LL;
  *((_DWORD *)v2 + 6) = 0;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  unint64_t v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    uint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    char v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    uint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)unint64_t v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_101093EB8(_Unwind_Exception *a1)
{
}

uint64_t sub_101093ED4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5, 1u))
    unint64_t v5 = *v2++;
  return result;
}

uint64_t sub_101093F1C(uint64_t result)
{
  *(void *)uint64_t result = &off_101898ED0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101093F34(PB::Base *a1)
{
}

float sub_101093F48(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898ED0;
  *(_DWORD *)(a1 + 24) = 0;
  char v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    float result = *(float *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    *(float *)(a1 + _Block_object_dispose(va, 8) = result;
    char v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 12);
    v3 |= 2u;
    *(_BYTE *)(a1 + 24) = v3;
    *(float *)(a1 + 12) = result;
    char v2 = *(_BYTE *)(a2 + 24);
  }

uint64_t sub_101093FD4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 24) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 12));
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101094084(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010942E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12), 2u);
  char v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  }

uint64_t sub_101094374(uint64_t result)
{
  *(void *)uint64_t result = off_101898F08;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101094388(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101898F08;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010943C8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101898F08;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_10109440C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_101898F08;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    char v5 = operator new(0x20uLL);
    sub_101093F48((uint64_t)v5, v4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  }

  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 1;
    *(void *)(a1 + 16) = v7;
  }

  return a1;
}

uint64_t sub_101094484(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010944F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101094714(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if ((*(_BYTE *)(v3 + 24) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  }
  return result;
}

_DWORD *sub_101094768(_DWORD *result)
{
  if (!*((void *)result + 1))
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x20uLL);
    *(void *)uint64_t result = &off_101898ED0;
    result[6] = 0;
    *((void *)v1 + 1) = result;
  }

  return result;
}

uint64_t sub_1010947A8(uint64_t result)
{
  *(void *)uint64_t result = &off_101898F40;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1010947C0(PB::Base *a1)
{
}

uint64_t sub_1010947D4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101898F40;
  *(_DWORD *)(result + 60) = 0;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(result + 60) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 44);
    v3 |= 0x100u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 44) = v5;
    __int16 v2 = *(_WORD *)(a2 + 60);
  }

uint64_t sub_101094940(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "calibrationLevel", *(_DWORD *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_101094AF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101094FC8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((*(_WORD *)(result + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_10109513C(uint64_t result)
{
  *(void *)uint64_t result = &off_101898F78;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_101095154(PB::Base *a1)
{
}

float sub_101095168(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898F78;
  *(_DWORD *)(a1 + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    float result = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 12) = 1;
    *(float *)(a1 + _Block_object_dispose(va, 8) = result;
  }

  return result;
}

uint64_t sub_101095194(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "dt", *(float *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010951E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101095378(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::write(this, *(float *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_101095394(uint64_t result)
{
  *(void *)uint64_t result = &off_101898FB0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1010953AC(PB::Base *a1)
{
}

float sub_1010953C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898FB0;
  *(_DWORD *)(a1 + 24) = 0;
  char v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    float result = *(float *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    *(float *)(a1 + _Block_object_dispose(va, 8) = result;
    char v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 12);
    v3 |= 2u;
    *(_BYTE *)(a1 + 24) = v3;
    *(float *)(a1 + 12) = result;
    char v2 = *(_BYTE *)(a2 + 24);
  }

uint64_t sub_10109544C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 24) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 12));
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010954FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101095758(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12), 2u);
  char v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  }

uint64_t sub_1010957EC(uint64_t result)
{
  *(void *)uint64_t result = &off_101898FE8;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_101095804(PB::Base *a1)
{
}

float sub_101095818(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101898FE8;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010958A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101095954(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101095BB8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  }

uint64_t sub_101095C4C(uint64_t result)
{
  *(void *)uint64_t result = &off_101899020;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_101095C64(PB::Base *a1)
{
}

uint64_t sub_101095C78(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899020;
  *(_DWORD *)(result + 36) = 0;
  char v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 36) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 20) = v5;
    char v2 = *(_BYTE *)(a2 + 36);
  }

uint64_t sub_101095D3C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "fsync", *(_BYTE *)(a1 + 32));
    char v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 36) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "sampleNum", *(_DWORD *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_101095E2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010961C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 36);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 36) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 2u);
  char v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_10109628C(uint64_t result)
{
  *(void *)uint64_t result = &off_101899058;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_1010962A4(PB::Base *a1)
{
}

uint64_t sub_1010962B8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899058;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    int v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v4;
  }

  return result;
}

uint64_t sub_101096308(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 16);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 12));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101096370(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010965FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 16);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 12), 1u);
    char v4 = *(_BYTE *)(v3 + 16);
  }

  if ((v4 & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 2u);
  }
  return result;
}

uint64_t sub_101096654(uint64_t result)
{
  *(void *)uint64_t result = &off_101899090;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10109666C(PB::Base *a1)
{
}

uint64_t sub_101096680(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899090;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1010966D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "inShower", *(_BYTE *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101096738(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10109691C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_101096974(uint64_t result)
{
  *(void *)uint64_t result = &off_1018990C8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10109698C(PB::Base *a1)
{
}

uint64_t sub_1010969A0(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018990C8;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1010969F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "hapticOn", *(_BYTE *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101096A58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101096C3C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_101096C94(uint64_t result)
{
  *(void *)uint64_t result = &off_101899100;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_101096CAC(PB::Base *a1)
{
}

float sub_101096CC0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899100;
  *(_DWORD *)(a1 + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 44) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
  }

  else
  {
    char v3 = 0;
    if ((*(_BYTE *)(a2 + 44) & 0x80) == 0) {
      goto LABEL_6;
    }
  }

  float result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_BYTE *)(a1 + 44) = v3;
  *(float *)(a1 + 40) = result;
  char v2 = *(_BYTE *)(a2 + 44);
LABEL_6:
  if ((v2 & 2) != 0)
  {
    float result = *(float *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 44) = v3;
    *(float *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }

  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }

  float result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 44) = v3;
  *(float *)(a1 + 20) = result;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

uint64_t sub_101096DBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_101096EEC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010972DC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 0x80) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

double sub_1010973E0(uint64_t a1)
{
  *(void *)a1 = &off_101899138;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  return result;
}

void sub_101097410(PB::Base *this)
{
  *(void *)this = &off_101899138;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }

  char v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

void sub_101097480(PB::Base *a1)
{
}

uint64_t sub_101097494(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899138;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  char v5 = (char *)(a1 + 56);
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  if ((*(_WORD *)(a2 + 172) & 0x10) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 136);
    *(_WORD *)(a1 + 172) = 16;
    *(void *)(a1 + 136) = v7;
    __int16 v6 = 272;
    if ((*(_WORD *)(a2 + 172) & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v6 = 256;
  if ((*(_WORD *)(a2 + 172) & 0x100) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 168);
    *(_WORD *)(a1 + 172) = v6;
    *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = v8;
  }

uint64_t sub_101097670(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 172);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "covTraceAfterCorrection", *(double *)(a1 + 104));
    __int16 v5 = *(_WORD *)(a1 + 172);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "covTraceBeforeCorrection", *(double *)(a1 + 112));
  }
  __int16 v6 = *(double **)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "dX", v8);
  }

  __int16 v9 = *(_WORD *)(a1 + 172);
  if ((v9 & 4) != 0)
  {
    PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 120));
    __int16 v9 = *(_WORD *)(a1 + 172);
    if ((v9 & 8) == 0)
    {
LABEL_9:
      if ((v9 & 0x100) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }

  else if ((v9 & 8) == 0)
  {
    goto LABEL_9;
  }

  PB::TextFormatter::format(this, "lidAngleDeg", *(double *)(a1 + 128));
  if ((*(_WORD *)(a1 + 172) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "measurementUpdateType", *(_DWORD *)(a1 + 168));
LABEL_11:
  uint64_t v10 = *(double **)(a1 + 32);
  uint64_t v11 = *(double **)(a1 + 40);
  while (v10 != v11)
  {
    double v12 = *v10++;
    PB::TextFormatter::format(this, "residual", v12);
  }

  uint64_t v13 = *(double **)(a1 + 56);
  BOOL v14 = *(double **)(a1 + 64);
  while (v13 != v14)
  {
    double v15 = *v13++;
    PB::TextFormatter::format(this, "stateQfbAfterCorrection", v15);
  }

  uint64_t v16 = *(double **)(a1 + 80);
  uint64_t v17 = *(double **)(a1 + 88);
  while (v16 != v17)
  {
    double v18 = *v16++;
    PB::TextFormatter::format(this, "stateQfbBeforeCorrection", v18);
  }

  __int16 v19 = *(_WORD *)(a1 + 172);
  if ((v19 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 136));
    __int16 v19 = *(_WORD *)(a1 + 172);
    if ((v19 & 0x20) == 0)
    {
LABEL_19:
      if ((v19 & 0x40) == 0) {
        goto LABEL_20;
      }
LABEL_28:
      PB::TextFormatter::format(this, "wAuxFaceNormMeanDps", *(double *)(a1 + 152));
      if ((*(_WORD *)(a1 + 172) & 0x80) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_21;
    }
  }

  else if ((v19 & 0x20) == 0)
  {
    goto LABEL_19;
  }

  PB::TextFormatter::format(this, "wAuxBudNormMeanDps", *(double *)(a1 + 144));
  __int16 v19 = *(_WORD *)(a1 + 172);
  if ((v19 & 0x40) != 0) {
    goto LABEL_28;
  }
LABEL_20:
  if ((v19 & 0x80) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(this, "wSrcNormMeanDps", *(double *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101097878(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v10 = (void **)(a1 + 8);
    uint64_t v11 = (void **)(a1 + 32);
    uint64_t v149 = a1 + 48;
    uint64_t v150 = a1 + 24;
    double v12 = (void **)(a1 + 56);
    uint64_t v13 = (void **)(a1 + 80);
    uint64_t v147 = a1 + 96;
    uint64_t v148 = a1 + 72;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

LABEL_238:
          unint64_t v4 = *((void *)this + 1);
          unint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 9u:
          *(_WORD *)(a1 + 172) |= 0x80u;
          unint64_t v94 = *((void *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFF7LL || v94 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 160) = *(void *)(*(void *)this + v94);
          goto LABEL_237;
        case 0xAu:
          *(_WORD *)(a1 + 172) |= 0x20u;
          unint64_t v95 = *((void *)this + 1);
          if (v95 > 0xFFFFFFFFFFFFFFF7LL || v95 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v95);
          goto LABEL_237;
        case 0xBu:
          *(_WORD *)(a1 + 172) |= 0x40u;
          unint64_t v96 = *((void *)this + 1);
          if (v96 > 0xFFFFFFFFFFFFFFF7LL || v96 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v96);
          goto LABEL_237;
        case 0xCu:
          *(_WORD *)(a1 + 172) |= 8u;
          unint64_t v97 = *((void *)this + 1);
          if (v97 > 0xFFFFFFFFFFFFFFF7LL || v97 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(*(void *)this + v97);
          goto LABEL_237;
        case 0xDu:
          *(_WORD *)(a1 + 172) |= 4u;
          unint64_t v98 = *((void *)this + 1);
          if (v98 > 0xFFFFFFFFFFFFFFF7LL || v98 + 8 > *((void *)this + 2)) {
            goto LABEL_235;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v98);
          goto LABEL_237;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_238;
      }
    }

    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v17 = 0LL;
    if (v4 > v5) {
      unint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      unint64_t v23 = v4 + 1;
      char v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

          *(void *)(a1 + 64) = v84;
          goto LABEL_258;
        case 0x13u:
          if ((_DWORD)v26 != 2)
          {
            uint64_t v140 = *(char **)(a1 + 40);
            uint64_t v139 = *(void *)(a1 + 48);
            if ((unint64_t)v140 >= v139)
            {
              unint64_t v144 = (char *)*v12;
              unint64_t v145 = (v140 - (_BYTE *)*v12) >> 2;
              unint64_t v146 = v145 + 1;
              if ((unint64_t)(v145 + 1) >> 62) {
LABEL_268:
              }
                sub_100007008();
              uint64_t v147 = v139 - (void)v144;
              if (v147 >> 1 > v146) {
                unint64_t v146 = v147 >> 1;
              }
              else {
                uint64_t v148 = v146;
              }
              if (v148)
              {
                uint64_t v149 = (char *)sub_10000956C(v13, v148);
                unint64_t v144 = *(char **)(a1 + 32);
                uint64_t v140 = *(char **)(a1 + 40);
              }

              else
              {
                uint64_t v149 = 0LL;
              }

              unsigned int v156 = &v149[4 * v145];
              *(_DWORD *)unsigned int v156 = 0;
              uint64_t v141 = v156 + 4;
              while (v140 != v144)
              {
                unint64_t v157 = *((_DWORD *)v140 - 1);
                v140 -= 4;
                *((_DWORD *)v156 - 1) = v157;
                v156 -= 4;
              }

              *(void *)(a1 + 32) = v156;
              *(void *)(a1 + 40) = v141;
              *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v149[4 * v148];
              if (v144) {
                operator delete(v144);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v140 = 0;
              uint64_t v141 = v140 + 4;
            }

            *(void *)(a1 + 40) = v141;
            goto LABEL_253;
          }

          if ((PB::Reader::placeMark(this, v163, v26, a4) & 1) != 0) {
            return 0LL;
          }
          unint64_t v87 = *((void *)this + 1);
          uint64_t v88 = *((void *)this + 2);
          while (v87 < v88 && !*((_BYTE *)this + 24))
          {
            char v90 = *(char **)(a1 + 40);
            unint64_t v89 = *(void *)(a1 + 48);
            if ((unint64_t)v90 >= v89)
            {
              uint64_t v92 = (char *)*v12;
              unint64_t v93 = (v90 - (_BYTE *)*v12) >> 2;
              unint64_t v94 = v93 + 1;
              unint64_t v95 = v89 - (void)v92;
              if (v95 >> 1 > v94) {
                unint64_t v94 = v95 >> 1;
              }
              else {
                unint64_t v96 = v94;
              }
              if (v96)
              {
                unint64_t v97 = (char *)sub_10000956C(v13, v96);
                uint64_t v92 = *(char **)(a1 + 32);
                char v90 = *(char **)(a1 + 40);
              }

              else
              {
                unint64_t v97 = 0LL;
              }

              unint64_t v98 = &v97[4 * v93];
              *(_DWORD *)unint64_t v98 = 0;
              int v91 = v98 + 4;
              while (v90 != v92)
              {
                char v99 = *((_DWORD *)v90 - 1);
                v90 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }

              *(void *)(a1 + 32) = v98;
              *(void *)(a1 + 40) = v91;
              *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v97[4 * v96];
              if (v92) {
                operator delete(v92);
              }
            }

            else
            {
              *(_DWORD *)char v90 = 0;
              int v91 = v90 + 4;
            }

            *(void *)(a1 + 40) = v91;
            unsigned int v100 = *((void *)this + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((void *)this + 2)) {
              goto LABEL_197;
            }
            *(v91 - 1) = *(_DWORD *)(*(void *)this + v100);
            uint64_t v88 = *((void *)this + 2);
            unint64_t v87 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v87;
          }

          goto LABEL_198;
        case 0x14u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v163, v26, a4) & 1) != 0) {
              return 0LL;
            }
            unint64_t v101 = *((void *)this + 1);
            char v102 = *((void *)this + 2);
            while (v101 < v102 && !*((_BYTE *)this + 24))
            {
              unint64_t v104 = *(char **)(a1 + 16);
              unint64_t v103 = *(void *)(a1 + 24);
              if ((unint64_t)v104 >= v103)
              {
                unint64_t v106 = (char *)*v10;
                unint64_t v107 = (v104 - (_BYTE *)*v10) >> 2;
                unint64_t v108 = v107 + 1;
                uint64_t v109 = v103 - (void)v106;
                if (v109 >> 1 > v108) {
                  unint64_t v108 = v109 >> 1;
                }
                else {
                  unint64_t v110 = v108;
                }
                if (v110)
                {
                  uint64_t v111 = (char *)sub_10000956C(v11, v110);
                  unint64_t v106 = *(char **)(a1 + 8);
                  unint64_t v104 = *(char **)(a1 + 16);
                }

                else
                {
                  uint64_t v111 = 0LL;
                }

                unint64_t v112 = &v111[4 * v107];
                *(_DWORD *)unint64_t v112 = 0;
                uint64_t v105 = v112 + 4;
                while (v104 != v106)
                {
                  uint64_t v113 = *((_DWORD *)v104 - 1);
                  v104 -= 4;
                  *((_DWORD *)v112 - 1) = v113;
                  v112 -= 4;
                }

                *(void *)(a1 + _Block_object_dispose(va, 8) = v112;
                *(void *)(a1 + 16) = v105;
                *(void *)(a1 + 24) = &v111[4 * v110];
                if (v106) {
                  operator delete(v106);
                }
              }

              else
              {
                *(_DWORD *)unint64_t v104 = 0;
                uint64_t v105 = v104 + 4;
              }

              *(void *)(a1 + 16) = v105;
              unint64_t v114 = *((void *)this + 1);
              if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)this + 2))
              {
LABEL_197:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v105 - 1) = *(_DWORD *)(*(void *)this + v114);
              char v102 = *((void *)this + 2);
              unint64_t v101 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v101;
            }

    uint64_t v3 = *((void *)this + 2);
  }

  return i == 0;
}

        *(_DWORD *)(a1 + 132) = v105;
        goto LABEL_202;
      case 0x1Cu:
        *(_DWORD *)(a1 + 180) |= 0x4000u;
        unint64_t v108 = *((void *)this + 1);
        if (v108 <= 0xFFFFFFFFFFFFFFFBLL && v108 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v108);
LABEL_200:
          int v55 = *((void *)this + 1) + 4LL;
LABEL_201:
          *((void *)this + 1) = v55;
        }

        else
        {
LABEL_142:
          *((_BYTE *)this + 24) = 1;
        }

        goto LABEL_202;
      default:
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_202;
    }
  }

uint64_t sub_1010983E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 172);
  if ((v4 & 0x10) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 136), 1u);
    __int16 v4 = *(_WORD *)(v3 + 172);
  }

  if ((v4 & 0x100) != 0) {
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 2u);
  }
  unint64_t v5 = *(double **)(v3 + 80);
  int v6 = *(double **)(v3 + 88);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7, 3u);
  }

  double v8 = *(double **)(v3 + 56);
  __int16 v9 = *(double **)(v3 + 64);
  while (v8 != v9)
  {
    double v10 = *v8++;
    double result = PB::Writer::write(this, v10, 4u);
  }

  __int16 v11 = *(_WORD *)(v3 + 172);
  if ((v11 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 112), 5u);
    __int16 v11 = *(_WORD *)(v3 + 172);
  }

  if ((v11 & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(v3 + 104), 6u);
  }
  double v12 = *(double **)(v3 + 32);
  uint64_t v13 = *(double **)(v3 + 40);
  while (v12 != v13)
  {
    double v14 = *v12++;
    double result = PB::Writer::write(this, v14, 7u);
  }

  char v15 = *(double **)(v3 + 8);
  unsigned int v16 = *(double **)(v3 + 16);
  while (v15 != v16)
  {
    double v17 = *v15++;
    double result = PB::Writer::write(this, v17, 8u);
  }

  __int16 v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x80) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 160), 9u);
    __int16 v18 = *(_WORD *)(v3 + 172);
    if ((v18 & 0x20) == 0)
    {
LABEL_23:
      if ((v18 & 0x40) == 0) {
        goto LABEL_24;
      }
      goto LABEL_29;
    }
  }

  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_23;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 144), 0xAu);
  __int16 v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x40) == 0)
  {
LABEL_24:
    if ((v18 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_30;
  }

double sub_101098580(uint64_t a1)
{
  *(void *)a1 = &off_101899170;
  *(_DWORD *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1010985A4(PB::Base *this)
{
  *(void *)this = &off_101899170;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1010985F4(PB::Base *a1)
{
}

uint64_t sub_101098608(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899170;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  __int16 v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 80) & 4) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = 4;
    *(void *)(a1 + 72) = v5;
  }

  if (a1 != a2)
  {
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }

  char v6 = *(_BYTE *)(a2 + 80);
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 64);
    *(_BYTE *)(a1 + 80) |= 2u;
    *(void *)(a1 + 64) = v7;
    char v6 = *(_BYTE *)(a2 + 80);
  }

  if ((v6 & 1) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 56);
    *(_BYTE *)(a1 + 80) |= 1u;
    *(void *)(a1 + 56) = v8;
  }

  return a1;
}

uint64_t sub_1010986E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 80) & 1) != 0) {
    PB::TextFormatter::format(this, "lastUpdateTimestamp", *(double *)(a1 + 56));
  }
  uint64_t v5 = *(double **)(a1 + 8);
  char v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "stateCov", v7);
  }

  if ((*(_BYTE *)(a1 + 80) & 2) != 0) {
    PB::TextFormatter::format(this, "stateCovTrace", *(double *)(a1 + 64));
  }
  uint64_t v8 = *(double **)(a1 + 32);
  __int16 v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "stateQfb", v10);
  }

  if ((*(_BYTE *)(a1 + 80) & 4) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010987CC(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    double v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    double v12 = (void **)(a1 + 32);
    uint64_t v13 = a1 + 48;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101098DC4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 80) & 4) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 72), 1u);
  }
  unint64_t v4 = *(double **)(v3 + 32);
  unint64_t v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  double v7 = *(double **)(v3 + 8);
  uint64_t v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  char v10 = *(_BYTE *)(v3 + 80);
  if ((v10 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 64), 4u);
    char v10 = *(_BYTE *)(v3 + 80);
  }

  if ((v10 & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 56), 5u);
  }
  return result;
}

void *sub_101098E80(void *result)
{
  const char *result = &off_1018991A8;
  result[1] = 0LL;
  return result;
}

void sub_101098E94(PB::Base *a1)
{
}

uint64_t sub_101098EA8(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_1018991A8;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v2;
  }

  return result;
}

uint64_t sub_101098ED0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "trackingBehavior", *(_DWORD *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101098F1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101099150(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  }
  return result;
}

void *sub_101099170(void *result)
{
  const char *result = &off_1018991E0;
  result[1] = 0LL;
  return result;
}

void sub_101099184(PB::Base *a1)
{
}

uint64_t sub_101099198(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018991E0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v2;
  }

  return result;
}

uint64_t sub_1010991C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "clientMode", *(_DWORD *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10109920C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101099440(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_101099460(uint64_t result)
{
  *(void *)uint64_t result = &off_101899218;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101099478(PB::Base *a1)
{
}

double sub_10109948C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899218;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(double *)(a1 + 24) = result;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_1010994FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 32) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "bpm", *(void *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10109958C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_101099858(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  }
  return result;
}

void *sub_1010998D0(void *result)
{
  const char *result = off_101899250;
  result[1] = 0LL;
  return result;
}

void sub_1010998E0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101899250;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101099920(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101899250;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_101099964(void *a1, uint64_t a2)
{
  *a1 = off_101899250;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x28uLL);
    uint64_t v5 = sub_1010DF384((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_1010999CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101099A1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101099BD4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_101099BF0(uint64_t result)
{
  *(void *)uint64_t result = &off_101899288;
  *(_DWORD *)(result + 12_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_101099C08(PB::Base *a1)
{
}

float sub_101099C1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899288;
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    int v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 104);
    v3 |= 0x100000u;
    *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(a1 + 104) = v4;
    int v2 = *(_DWORD *)(a2 + 128);
  }

uint64_t sub_101099F10(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "accelUnfilteredX", *(float *)(a1 + 40));
    int v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }

  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "accelUnfilteredY", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }

uint64_t sub_10109A280(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10109AA6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 128);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }

  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 2u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }

uint64_t sub_10109AD68(uint64_t result)
{
  *(void *)uint64_t result = off_1018992C0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_10109AD80(void **a1)
{
  *a1 = off_1018992C0;
  unint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10109ADC8(void **a1)
{
  *a1 = off_1018992C0;
  uint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

uint64_t sub_10109AE14(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1018992C0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  int v4 = (char **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 36) = 0;
  int v5 = *(uint64_t **)(a2 + 8);
  uint64_t v6 = *(uint64_t **)(a2 + 16);
  while (v5 != v6)
    sub_10109AEA4(v4, *v5++);
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    int v7 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 36) |= 1u;
    *(_DWORD *)(a1 + 32) = v7;
  }

  return a1;
}

uint64_t sub_10109AEA4(char **a1, uint64_t a2)
{
  int v4 = operator new(0x18uLL);
  sub_101103670((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  int v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    unsigned int v24 = a1 + 2;
    if (v12) {
      char v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      char v13 = 0LL;
    }
    BOOL v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    char v23 = v15;
    *(void *)BOOL v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    unint64_t v17 = *a1;
    unsigned int v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)unsigned int v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      char v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    unint64_t v20 = a1[2];
    a1[2] = v15;
    char v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)int v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_10109AFC8(_Unwind_Exception *a1)
{
}

uint64_t sub_10109AFE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 36) & 1) != 0) {
    PB::TextFormatter::format(this, "lastSampleId", *(_DWORD *)(a1 + 32));
  }
  int v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "slowOptical");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10109B070(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }

uint64_t sub_10109B308(char **a1)
{
  unint64_t v2 = operator new(0x18uLL);
  sub_101103644((uint64_t)v2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  int v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    unint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    BOOL v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    unint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)int v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_10109B424(_Unwind_Exception *a1)
{
}

uint64_t sub_10109B440(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base ***)(result + 8);
  int v5 = *(const PB::Base ***)(result + 16);
  while (v4 != v5)
  {
    unint64_t v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 1u);
  }

  if ((*(_BYTE *)(v3 + 36) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 2u);
  }
  return result;
}

double sub_10109B4AC(uint64_t a1)
{
  *(void *)a1 = off_1018992F8;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0LL;
  return result;
}

void sub_10109B4D4(uint64_t a1)
{
  *(void *)a1 = off_1018992F8;
  unint64_t v4 = (void **)(a1 + 24);
  sub_1004CADB0(&v4);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10109B550(uint64_t a1)
{
}

uint64_t sub_10109B564(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1018992F8;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  int v5 = (char **)(a1 + 24);
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 40) = 0LL;
  if ((*(_BYTE *)(a2 + 60) & 1) == 0)
  {
    char v6 = 2;
    if ((*(_BYTE *)(a2 + 60) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v7 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 60) = 1;
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = v7;
  char v6 = 3;
  if ((*(_BYTE *)(a2 + 60) & 2) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 52);
    *(_BYTE *)(a1 + 60) = v6;
    *(_DWORD *)(a1 + 52) = v8;
  }

uint64_t sub_10109B6CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "conchaMinAccepted", *(_BYTE *)(a1 + 56));
    char v5 = *(_BYTE *)(a1 + 60);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 48));
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "newOpenLid");
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "oldOpenLid");
  }
  int v8 = *(uint64_t **)(a1 + 24);
  uint64_t v9 = *(uint64_t **)(a1 + 32);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32LL))(v10, this, "optical");
  }

  char v11 = *(_BYTE *)(a1 + 60);
  if ((v11 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 52));
    char v11 = *(_BYTE *)(a1 + 60);
  }

  if ((v11 & 8) != 0) {
    PB::TextFormatter::format(this, "tragusMinAccepted", *(_BYTE *)(a1 + 57));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10109B7F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  int v8 = (char **)(a1 + 24);
  while (2)
  {
    uint64_t v9 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v12 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v18 = v2 + 1;
        char v19 = *(_BYTE *)(v9 + v2);
        *((void *)this + 1) = v18;
        v12 |= (unint64_t)(v19 & 0x7F) << v16;
        if ((v19 & 0x80) == 0) {
          goto LABEL_21;
        }
        v16 += 7;
        unint64_t v2 = v18;
        if (v17++ >= 9)
        {
LABEL_20:
          unint64_t v12 = 0LL;
          goto LABEL_21;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v10 = 0;
    unsigned int v11 = 0;
    unint64_t v12 = 0LL;
    while (1)
    {
      unint64_t v13 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0) {
        break;
      }
      v10 += 7;
      unint64_t v2 = v13;
      BOOL v15 = v11++ > 8;
      if (v15) {
        goto LABEL_20;
      }
    }

uint64_t sub_10109BC68(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 60);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 48), 1u);
    char v4 = *(_BYTE *)(v3 + 60);
  }

  if ((v4 & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 2u);
  }
  char v5 = *(const PB::Base ***)(v3 + 24);
  uint64_t v6 = *(const PB::Base ***)(v3 + 32);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t result = PB::Writer::writeSubmessage(this, v7, 3u);
  }

  int v8 = *(const PB::Base **)(v3 + 16);
  if (v8) {
    uint64_t result = PB::Writer::writeSubmessage(this, v8, 4u);
  }
  uint64_t v9 = *(const PB::Base **)(v3 + 8);
  if (v9) {
    uint64_t result = PB::Writer::writeSubmessage(this, v9, 5u);
  }
  char v10 = *(_BYTE *)(v3 + 60);
  if ((v10 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 6u);
    char v10 = *(_BYTE *)(v3 + 60);
  }

  if ((v10 & 8) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 57), 7u);
  }
  return result;
}

uint64_t sub_10109BD44(uint64_t result)
{
  *(_DWORD *)(result + 56) = 0;
  *(void *)uint64_t result = &off_101899330;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  return result;
}

void sub_10109BD5C(PB::Base *this)
{
  *(void *)this = &off_101899330;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  PB::Base::~Base(this);
}

void sub_10109BDD4(PB::Base *a1)
{
}

uint64_t sub_10109BDE8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899330;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  if ((*(_BYTE *)(a2 + 56) & 1) == 0)
  {
    char v5 = 8;
    if ((*(_BYTE *)(a2 + 56) & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v6 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 56) = 1;
  *(void *)(a1 + 32) = v6;
  char v5 = 9;
  if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = v5;
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = v7;
  }

uint64_t sub_10109BF70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "baseline");
  }
  char v6 = *(_BYTE *)(a1 + 56);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "conchaOpenResponse", *(float *)(a1 + 40));
    char v6 = *(_BYTE *)(a1 + 56);
  }

  if ((v6 & 4) != 0) {
    PB::TextFormatter::format(this, "filter", *(float *)(a1 + 44));
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))( v7,  this,  "lastBaseline");
  }
  if ((*(_BYTE *)(a1 + 56) & 8) != 0) {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 48));
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32LL))(v8, this, "minimum");
  }
  char v9 = *(_BYTE *)(a1 + 56);
  if ((v9 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "rho", *(float *)(a1 + 52));
    char v9 = *(_BYTE *)(a1 + 56);
  }

  if ((v9 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10109C08C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_10109C4AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 56);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 56);
  }

  if ((v4 & 8) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 24);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5, 3u);
  }
  char v6 = *(const PB::Base **)(v3 + 8);
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 4u);
  }
  uint64_t v7 = *(const PB::Base **)(v3 + 16);
  if (v7) {
    uint64_t result = PB::Writer::writeSubmessage(this, v7, 5u);
  }
  char v8 = *(_BYTE *)(v3 + 56);
  if ((v8 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 6u);
    char v8 = *(_BYTE *)(v3 + 56);
    if ((v8 & 0x10) == 0)
    {
LABEL_13:
      if ((v8 & 4) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(float *)(v3 + 44), 8u);
    }
  }

  else if ((*(_BYTE *)(v3 + 56) & 0x10) == 0)
  {
    goto LABEL_13;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 7u);
  if ((*(_BYTE *)(v3 + 56) & 4) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 44), 8u);
  }
  return result;
}

uint64_t sub_10109C590(uint64_t result)
{
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = 0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = &off_101899368;
  return result;
}

void sub_10109C5A8(PB::Base *this)
{
  *(void *)this = &off_101899368;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  PB::Base::~Base(this);
}

void sub_10109C608(PB::Base *a1)
{
}

uint64_t sub_10109C61C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899368;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  char v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 16) = 0LL;
  __int16 v5 = *(_WORD *)(a2 + 48);
  if ((v5 & 1) == 0)
  {
    __int16 v6 = 2;
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v7 = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 4_Block_object_dispose(va, 8) = 1;
  *(void *)(a1 + 24) = v7;
  __int16 v6 = 3;
  if ((*(_WORD *)(a2 + 48) & 2) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 32);
    *(_WORD *)(a1 + 4_Block_object_dispose(va, 8) = v6;
    *(_DWORD *)(a1 + 32) = v8;
  }

uint64_t sub_10109C830(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "above", *(_BYTE *)(a1 + 36));
    __int16 v5 = *(_WORD *)(a1 + 48);
  }

  if ((v5 & 8) != 0) {
    PB::TextFormatter::format(this, "below", *(_BYTE *)(a1 + 37));
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "current");
  }
  __int16 v7 = *(_WORD *)(a1 + 48);
  if ((v7 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 32));
    __int16 v7 = *(_WORD *)(a1 + 48);
    if ((v7 & 0x10) == 0)
    {
LABEL_9:
      if ((v7 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }
  }

  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_9;
  }

  PB::TextFormatter::format(this, "moving", *(_BYTE *)(a1 + 38));
  __int16 v7 = *(_WORD *)(a1 + 48);
  if ((v7 & 0x20) == 0)
  {
LABEL_10:
    if ((v7 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

uint64_t sub_10109C9F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_10109CF9C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
  }

  if ((v4 & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 2u);
  }
  __int16 v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5, 3u);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 16);
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 4u);
  }
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 41), 5u);
    __int16 v7 = *(_WORD *)(v3 + 48);
    if ((v7 & 0x20) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0) {
        goto LABEL_12;
      }
      goto LABEL_21;
    }
  }

  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_11;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 39), 6u);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 4) == 0)
  {
LABEL_12:
    if ((v7 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }

uint64_t sub_10109D114(uint64_t result)
{
  *(_DWORD *)(result + 44) = 0;
  *(void *)uint64_t result = &off_1018993A0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  return result;
}

void sub_10109D12C(PB::Base *this)
{
  *(void *)this = &off_1018993A0;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  PB::Base::~Base(this);
}

void sub_10109D1A4(PB::Base *a1)
{
}

uint64_t sub_10109D1B8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018993A0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  if ((*(_BYTE *)(a2 + 44) & 1) == 0)
  {
    char v5 = 2;
    if ((*(_BYTE *)(a2 + 44) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v6 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 44) = 1;
  *(void *)(a1 + 32) = v6;
  char v5 = 3;
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 44) = v5;
    *(_DWORD *)(a1 + 40) = v7;
  }

uint64_t sub_10109D2E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "current");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "last");
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0) {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 40));
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "minimum");
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10109D3A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_10109D718(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
  }

  if ((v4 & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 2u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 24);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5, 3u);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 8);
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 4u);
  }
  uint64_t v7 = *(const PB::Base **)(v3 + 16);
  if (v7) {
    return PB::Writer::writeSubmessage(this, v7, 5u);
  }
  return result;
}

double sub_10109D7AC(uint64_t a1)
{
  *(void *)a1 = &off_1018993D8;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

void sub_10109D7D8(PB::Base *this)
{
  *(void *)this = &off_1018993D8;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + _Block_object_dispose(va, 8) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }

  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

void sub_10109D858(PB::Base *a1)
{
}

uint64_t sub_10109D86C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018993D8;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  if ((*(_BYTE *)(a2 + 108) & 1) == 0)
  {
    char v5 = 8;
    if ((*(_BYTE *)(a2 + 108) & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v6 = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = 1;
  *(void *)(a1 + 72) = v6;
  char v5 = 9;
  if ((*(_BYTE *)(a2 + 108) & 8) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 10_Block_object_dispose(va, 8) = v5;
    *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = v7;
  }

uint64_t sub_10109DA60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "acceleration", v7);
  }

  if ((*(_BYTE *)(a1 + 108) & 2) != 0) {
    PB::TextFormatter::format(this, "correlation", *(float *)(a1 + 80));
  }
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32LL))(v8, this, "current");
  }
  if ((*(_BYTE *)(a1 + 108) & 4) != 0) {
    PB::TextFormatter::format(this, "deltatip", *(float *)(a1 + 84));
  }
  uint64_t v9 = *(void *)(a1 + 64);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32LL))(v9, this, "instability");
  }
  char v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 8) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 88));
    char v10 = *(_BYTE *)(a1 + 108);
    if ((v10 & 0x10) == 0)
    {
LABEL_13:
      if ((v10 & 0x20) == 0) {
        goto LABEL_14;
      }
      goto LABEL_22;
    }
  }

  else if ((*(_BYTE *)(a1 + 108) & 0x10) == 0)
  {
    goto LABEL_13;
  }

  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 92));
  char v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 0x20) == 0)
  {
LABEL_14:
    if ((v10 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }

BOOL sub_10109DC30(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    char v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    uint64_t v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_10109E534(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 108);
  if ((v4 & 1) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 72), 1u);
    char v4 = *(_BYTE *)(v3 + 108);
  }

  if ((v4 & 8) != 0) {
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 2u);
  }
  unint64_t v5 = *(const PB::Base **)(v3 + 56);
  if (v5) {
    double result = PB::Writer::writeSubmessage(this, v5, 3u);
  }
  int v6 = *(const PB::Base **)(v3 + 64);
  if (v6) {
    double result = PB::Writer::writeSubmessage(this, v6, 4u);
  }
  float v7 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 5u);
  }

  char v10 = *(_BYTE *)(v3 + 108);
  if ((v10 & 0x40) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 100), 6u);
    char v10 = *(_BYTE *)(v3 + 108);
    if ((v10 & 0x20) == 0)
    {
LABEL_14:
      if ((v10 & 0x80) == 0) {
        goto LABEL_15;
      }
LABEL_26:
      double result = PB::Writer::write(this, *(_BYTE *)(v3 + 104), 8u);
      if ((*(_BYTE *)(v3 + 108) & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }

  else if ((*(_BYTE *)(v3 + 108) & 0x20) == 0)
  {
    goto LABEL_14;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 96), 7u);
  char v10 = *(_BYTE *)(v3 + 108);
  if (v10 < 0) {
    goto LABEL_26;
  }
LABEL_15:
  if ((v10 & 0x10) != 0) {
LABEL_16:
  }
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 9u);
LABEL_17:
  uint64_t v11 = *(float **)(v3 + 32);
  uint64_t v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    double result = PB::Writer::write(this, v13, 0xAu);
  }

  char v14 = *(_BYTE *)(v3 + 108);
  if ((v14 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 80), 0xBu);
    char v14 = *(_BYTE *)(v3 + 108);
  }

  if ((v14 & 4) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 84), 0xCu);
  }
  return result;
}

uint64_t sub_10109E6A0(uint64_t result)
{
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)double result = &off_101899410;
  return result;
}

void sub_10109E6B8(PB::Base *this)
{
  *(void *)this = &off_101899410;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  PB::Base::~Base(this);
}

void sub_10109E718(PB::Base *a1)
{
}

uint64_t sub_10109E72C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899410;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  char v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0LL;
  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
  {
    char v5 = 2;
    if ((*(_BYTE *)(a2 + 32) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v6 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 24) = v6;
  char v5 = 3;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 28);
    *(_BYTE *)(a1 + 32) = v5;
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v7;
  }

uint64_t sub_10109E820(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 32) & 1) != 0) {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 24));
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "maximum");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "minimum");
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0) {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 28));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10109E8C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_10109ECA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
  }

  if ((v4 & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 16);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5, 3u);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 8);
  if (v6) {
    return PB::Writer::writeSubmessage(this, v6, 4u);
  }
  return result;
}

double sub_10109ED20(void *a1)
{
  *a1 = &off_101899448;
  double result = 0.0;
  a1[2] = 0LL;
  *(void *)((char *)a1 + 2_Block_object_dispose(va, 8) = 0LL;
  return result;
}

void sub_10109ED40(PB::Base *a1)
{
}

uint64_t sub_10109ED54(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_101899448;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 2_Block_object_dispose(va, 8) = 0LL;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_10109EE04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "eventTag", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "from", *(_DWORD *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_10109EED4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10109F438(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

double sub_10109F4E8(uint64_t a1)
{
  *(void *)a1 = off_101899480;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void sub_10109F520(uint64_t a1)
{
  *(void *)a1 = off_101899480;
  int v6 = (void **)(a1 + 96);
  sub_1004CADB0(&v6);
  int v6 = (void **)(a1 + 72);
  sub_1004CADB0(&v6);
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  char v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 40) = v4;
    operator delete(v4);
  }

  char v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(void *)(a1 + 16) = v5;
    operator delete(v5);
  }

  PB::Base::~Base((PB::Base *)a1);
}

void sub_10109F5CC(uint64_t a1)
{
}

uint64_t sub_10109F5E0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(void *)a1 = off_101899480;
  *(_OWORD *)(a1 + 72) = 0u;
  char v5 = (char **)(a1 + 72);
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if ((*(_BYTE *)(a2 + 132) & 1) == 0)
  {
    char v6 = 2;
    if ((*(_BYTE *)(a2 + 132) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v7 = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 132) = 1;
  *(_DWORD *)(a1 + 120) = v7;
  char v6 = 3;
  if ((*(_BYTE *)(a2 + 132) & 2) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 124);
    *(_BYTE *)(a1 + 132) = v6;
    *(_DWORD *)(a1 + 124) = v8;
  }

uint64_t sub_10109F7B0(char **a1, uint64_t a2)
{
  char v4 = operator new(0x18uLL);
  sub_101103984((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  int v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    unsigned int v24 = a1 + 2;
    if (v12) {
      float v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      float v13 = 0LL;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    char v23 = v15;
    *(void *)uint64_t v14 = v4;
    int v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    unint64_t v17 = *a1;
    uint64_t v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)uint64_t v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      int v8 = (char *)v22.i64[1];
      uint64_t v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    uint64_t v20 = a1[2];
    a1[2] = v15;
    char v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)int v7 = v4;
    int v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_10109F8D4(_Unwind_Exception *a1)
{
}

uint64_t sub_10109F8F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "baseline");
  }
  if ((*(_BYTE *)(a1 + 132) & 1) != 0) {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 120));
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "minimum");
  }
  int v7 = *(uint64_t **)(a1 + 72);
  int v8 = *(uint64_t **)(a1 + 80);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32LL))(v9, this, "optical");
  }

  char v10 = *(_BYTE *)(a1 + 132);
  if ((v10 & 4) != 0)
  {
    PB::TextFormatter::format(this, "ringBufferUpdated", *(_BYTE *)(a1 + 128));
    char v10 = *(_BYTE *)(a1 + 132);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 2) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 132) & 8) == 0)
  {
    goto LABEL_11;
  }

  PB::TextFormatter::format(this, "runningMinAccepted", *(_BYTE *)(a1 + 129));
  if ((*(_BYTE *)(a1 + 132) & 2) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 124));
LABEL_13:
  uint64_t v11 = *(uint64_t **)(a1 + 96);
  unint64_t v12 = *(uint64_t **)(a1 + 104);
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32LL))(v13, this, "temp");
  }

  uint64_t v14 = *(float **)(a1 + 8);
  uint64_t v15 = *(float **)(a1 + 16);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(this, "tilt", v16);
  }

  unint64_t v17 = *(float **)(a1 + 32);
  uint64_t v18 = *(float **)(a1 + 40);
  while (v17 != v18)
  {
    float v19 = *v17++;
    PB::TextFormatter::format(this, "tip", v19);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_10109FAB0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    char v10 = (char **)(a1 + 96);
    uint64_t v11 = (void **)(a1 + 8);
    uint64_t v12 = a1 + 24;
    uint64_t v13 = (void **)(a1 + 32);
    uint64_t v14 = a1 + 48;
    uint64_t v15 = (char **)(a1 + 72);
    while (1)
    {
      uint64_t v16 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v17 = 0;
      unsigned int v18 = 0;
      unint64_t v19 = 0LL;
      while (1)
      {
        unint64_t v20 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v21 = *(_BYTE *)(v16 + v4);
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          break;
        }
        v17 += 7;
        unint64_t v4 = v20;
        BOOL v22 = v18++ > 8;
        if (v22) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010A0324(char **a1)
{
  uint64_t v2 = operator new(0x18uLL);
  sub_101103958((uint64_t)v2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  unint64_t v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    BOOL v22 = a1 + 2;
    if (v10) {
      uint64_t v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      uint64_t v11 = 0LL;
    }
    uint64_t v12 = &v11[8 * v7];
    uint64_t v13 = &v11[8 * v10];
    char v21 = v13;
    *(void *)uint64_t v12 = v2;
    int v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    uint64_t v15 = *a1;
    uint64_t v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)uint64_t v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      int v6 = (char *)v20.i64[1];
      uint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unsigned int v18 = a1[2];
    a1[2] = v13;
    char v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)unint64_t v5 = v2;
    int v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_1010A0440(_Unwind_Exception *a1)
{
}

uint64_t sub_1010A045C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 132);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 120), 1u);
    char v4 = *(_BYTE *)(v3 + 132);
  }

  if ((v4 & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 124), 2u);
  }
  unint64_t v5 = *(const PB::Base ***)(v3 + 72);
  int v6 = *(const PB::Base ***)(v3 + 80);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t result = PB::Writer::writeSubmessage(this, v7, 3u);
  }

  uint64_t v8 = *(float **)(v3 + 32);
  uint64_t v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    uint64_t result = PB::Writer::write(this, v10, 4u);
  }

  uint64_t v11 = *(float **)(v3 + 8);
  uint64_t v12 = *(float **)(v3 + 16);
  while (v11 != v12)
  {
    float v13 = *v11++;
    uint64_t result = PB::Writer::write(this, v13, 5u);
  }

  uint64_t v14 = *(const PB::Base **)(v3 + 64);
  if (v14) {
    uint64_t result = PB::Writer::writeSubmessage(this, v14, 6u);
  }
  uint64_t v15 = *(const PB::Base **)(v3 + 56);
  if (v15) {
    uint64_t result = PB::Writer::writeSubmessage(this, v15, 7u);
  }
  char v16 = *(_BYTE *)(v3 + 132);
  if ((v16 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 129), 8u);
    char v16 = *(_BYTE *)(v3 + 132);
  }

  if ((v16 & 4) != 0) {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 128), 9u);
  }
  unsigned int v18 = *(const PB::Base ***)(v3 + 96);
  int64x2_t v17 = *(const PB::Base ***)(v3 + 104);
  while (v18 != v17)
  {
    uint64_t v19 = *v18++;
    uint64_t result = PB::Writer::writeSubmessage(this, v19, 0xAu);
  }

  return result;
}

uint64_t sub_1010A058C(uint64_t result)
{
  *(void *)uint64_t result = &off_1018994B8;
  *(_DWORD *)(result + 6_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010A05A4(PB::Base *a1)
{
}

uint64_t sub_1010A05B8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018994B8;
  *(_DWORD *)(result + 6_Block_object_dispose(va, 8) = 0;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(result + 6_Block_object_dispose(va, 8) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 6_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(result + 16) = v5;
    __int16 v2 = *(_WORD *)(a2 + 68);
  }

uint64_t sub_1010A075C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "deltaPositionX", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "deltaPositionY", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }

uint64_t sub_1010A094C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010A0F54(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

double sub_1010A1100(uint64_t a1)
{
  *(void *)a1 = &off_1018994F0;
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

void sub_1010A112C(PB::Base *this)
{
  *(void *)this = &off_1018994F0;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }

  __int16 v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_1010A118C(PB::Base *a1)
{
}

uint64_t sub_1010A11A0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  __int16 v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  __int16 v5 = (char *)(a1 + 56);
  *(void *)a1 = &off_1018994F0;
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0LL;
  if (a1 != a2)
  {
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }

  if ((*(_BYTE *)(a2 + 88) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 80);
    *(_BYTE *)(a1 + 88) |= 1u;
    *(void *)(a1 + 80) = v6;
  }

  return a1;
}

uint64_t sub_1010A1264(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "historicalMeanSeaLevelPressure", v7);
  }

  uint64_t v8 = *(double **)(a1 + 32);
  char v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "historicalTimestamp", v10);
  }

  unint64_t v11 = *(double **)(a1 + 56);
  unint64_t v12 = *(double **)(a1 + 64);
  while (v11 != v12)
  {
    double v13 = *v11++;
    PB::TextFormatter::format(this, "historicalUncertainty", v13);
  }

  if ((*(_BYTE *)(a1 + 88) & 1) != 0) {
    PB::TextFormatter::format(this, "refreshTime", *(double *)(a1 + 80));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010A1344(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    double v10 = (void **)(a1 + 56);
    unint64_t v11 = (void **)(a1 + 8);
    uint64_t v103 = a1 + 24;
    uint64_t v104 = a1 + 72;
    unint64_t v12 = (void **)(a1 + 32);
    uint64_t v13 = a1 + 48;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010A1A78(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(double **)(result + 32);
  unint64_t v5 = *(double **)(result + 40);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 1u);
  }

  double v7 = *(double **)(v3 + 8);
  uint64_t v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9, 2u);
  }

  double v10 = *(double **)(v3 + 56);
  unint64_t v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    double v12 = *v10++;
    double result = PB::Writer::write(this, v12, 3u);
  }

  if ((*(_BYTE *)(v3 + 88) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 80), 4u);
  }
  return result;
}

void *sub_1010A1B24(void *result)
{
  const char *result = off_101899528;
  result[1] = 0LL;
  return result;
}

void sub_1010A1B34(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101899528;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010A1B74(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101899528;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1010A1BB8(void *a1, uint64_t a2)
{
  *a1 = off_101899528;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    unint64_t v4 = operator new(0x28uLL);
    uint64_t v5 = sub_1010E1D68(v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_1010A1C20(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010A1C70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010A1E28(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_1010A1E44(void *result)
{
  const char *result = off_101899560;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_1010A1E58(void ***a1)
{
  *a1 = (void **)off_101899560;
  int v4 = a1[3];
  unint64_t v2 = a1 + 3;
  unint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0LL;
  if (v5) {
    sub_10058A4FC((_DWORD)a1 + 16, v5);
  }
  sub_1010DD450(a1 + 1, 0LL);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1010A1EB8(void ***a1)
{
}

void ***sub_1010A1ECC(void ***a1, void *a2)
{
  *a1 = (void **)off_101899560;
  a1[1] = 0LL;
  int v4 = a1 + 1;
  a1[2] = 0LL;
  uint64_t v5 = a1 + 2;
  a1[3] = 0LL;
  uint64_t v6 = a1 + 3;
  double v7 = (__int128 *)a2[2];
  if (v7)
  {
    uint64_t v8 = (void **)operator new(0x18uLL);
    char v9 = v8;
    if (*((char *)v7 + 23) < 0)
    {
      sub_1010DD48C(v8, *(void **)v7, *((void *)v7 + 1));
      unint64_t v11 = *v5;
      *uint64_t v5 = v9;
      if (v11) {
        sub_10058A4FC((int)v5, v11);
      }
    }

    else
    {
      __int128 v10 = *v7;
      v8[2] = (void *)*((void *)v7 + 2);
      *(_OWORD *)uint64_t v8 = v10;
      *uint64_t v5 = v8;
    }
  }

  unint64_t v12 = (__int128 *)a2[3];
  if (v12)
  {
    char v13 = (void **)operator new(0x18uLL);
    uint64_t v14 = v13;
    if (*((char *)v12 + 23) < 0)
    {
      sub_1010DD48C(v13, *(void **)v12, *((void *)v12 + 1));
    }

    else
    {
      __int128 v15 = *v12;
      v13[2] = (void *)*((void *)v12 + 2);
      *(_OWORD *)char v13 = v15;
    }

    unsigned int v16 = *v6;
    *uint64_t v6 = v14;
    if (v16) {
      sub_10058A4FC((int)v6, v16);
    }
  }

  unint64_t v17 = (const Data *)a2[1];
  if (v17)
  {
    char v18 = (PB::Data *)operator new(0x10uLL);
    PB::Data::Data(v18, v17);
    sub_1010DD450(v4, (void **)v18);
  }

  return a1;
}

uint64_t sub_1010A2000(void *a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = (const Data *)a1[1];
  if (v5) {
    PB::TextFormatter::format(this, "codedInvocation", v5);
  }
  if (a1[2]) {
    PB::TextFormatter::format(this, "fromName");
  }
  if (a1[3]) {
    PB::TextFormatter::format(this, "toName");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010A2078(void ***a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v7 = a1 + 1;
    uint64_t v8 = a1 + 3;
    char v9 = a1 + 2;
    do
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        unint64_t v13 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v19 = v2 + 1;
          char v20 = *(_BYTE *)(v10 + v2);
          *((void *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0) {
            goto LABEL_21;
          }
          v17 += 7;
          unint64_t v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            unint64_t v13 = 0LL;
            goto LABEL_21;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0LL;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010A2294(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (v4) {
    uint64_t result = PB::Writer::write(this, v4, 2LL);
  }
  uint64_t v5 = *(void *)(v3 + 24);
  if (v5) {
    uint64_t result = PB::Writer::write(this, v5, 3LL);
  }
  uint64_t v6 = *(const PB::Data **)(v3 + 8);
  if (v6) {
    return PB::Writer::write(this, v6, 4u);
  }
  return result;
}

uint64_t sub_1010A22F8(uint64_t result)
{
  *(void *)uint64_t result = &off_101899598;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010A2310(PB::Base *a1)
{
}

uint64_t sub_1010A2324(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899598;
  *(_DWORD *)(result + 20) = 0;
  char v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 4) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 16);
    char v3 = 4;
    *(_BYTE *)(result + 20) = 4;
    *(_DWORD *)(result + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 20) = v3;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 20);
  }

uint64_t sub_1010A2394(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 20) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "threshold", *(_DWORD *)(a1 + 12));
    if ((*(_BYTE *)(a1 + 20) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "level", *(_DWORD *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestamp", *(float *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010A2424(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010A27A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        return result;
      }
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 12), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 20) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 20) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 12), 3u);
  }
  return result;
}

void *sub_1010A281C(void *result)
{
  const char *result = off_1018995D0;
  result[1] = 0LL;
  return result;
}

void sub_1010A282C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018995D0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010A286C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018995D0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1010A28B0(void *a1, uint64_t a2)
{
  *a1 = off_1018995D0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x98uLL);
    uint64_t v5 = sub_1010F9D7C(v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_1010A2918(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010A2968(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010A2B20(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_1010A2B3C(void *result)
{
  const char *result = off_101899608;
  result[1] = 0LL;
  return result;
}

void sub_1010A2B4C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101899608;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010A2B8C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_101899608;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1010A2BD0(void *a1, uint64_t a2)
{
  *a1 = off_101899608;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x20uLL);
    uint64_t v5 = sub_1010FADCC(v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_1010A2C38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010A2C88(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010A2E40(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_1010A2E5C(uint64_t result)
{
  *(void *)uint64_t result = &off_101899640;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010A2E74(PB::Base *a1)
{
}

uint64_t sub_1010A2E88(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899640;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1010A2ED8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010A2F40(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010A3268(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1010A32C0(uint64_t result)
{
  *(void *)uint64_t result = &off_101899678;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_1010A32D8(PB::Base *a1)
{
}

uint64_t sub_1010A32EC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899678;
  *(_DWORD *)(result + 100) = 0;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    int v3 = 4;
    *(_DWORD *)(result + 100) = 4;
    *(void *)(result + 24) = v4;
    int v2 = *(_DWORD *)(a2 + 100);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 32);
    v3 |= 8u;
    *(_DWORD *)(result + 100) = v3;
    *(_DWORD *)(result + 32) = v5;
    int v2 = *(_DWORD *)(a2 + 100);
  }

uint64_t sub_1010A3538(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "dataBufferSize", *(_DWORD *)(a1 + 32));
    int v5 = *(_DWORD *)(a1 + 100);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "gestureLengthSeconds", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }

uint64_t sub_1010A37E8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010A4370(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 100);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 24), 1u);
    int v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }

  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 2u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }

uint64_t sub_1010A45C4(uint64_t result)
{
  *(void *)uint64_t result = &off_1018996B0;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010A45DC(PB::Base *a1)
{
}

float sub_1010A45F0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018996B0;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v3;
    *(float *)(a1 + 24) = result;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010A467C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxSymmetryAllowanceFactor", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "minTwistAngleThresholdDeg", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "minPeakRotationRateThresholdRps", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 1) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampUs", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010A472C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010A4A3C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 16), 4u);
  }

double sub_1010A4AD0(uint64_t a1)
{
  *(void *)a1 = &off_1018996E8;
  *(_DWORD *)(a1 + 212) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

void sub_1010A4AFC(PB::Base *this)
{
  *(void *)this = &off_1018996E8;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }

  char v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_1010A4B5C(PB::Base *a1)
{
}

uint64_t sub_1010A4B70(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &off_1018996E8;
  *(_DWORD *)(a1 + 212) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0LL;
  int v5 = *(_DWORD *)(a2 + 212);
  if ((v5 & 4) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 96);
    int v6 = 4;
    *(_DWORD *)(a1 + 212) = 4;
    *(void *)(a1 + 96) = v7;
    int v5 = *(_DWORD *)(a2 + 212);
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }

  else
  {
    int v6 = 0;
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }

  char v8 = *(_BYTE *)(a2 + 211);
  v6 |= 0x80000000;
  *(_DWORD *)(a1 + 212) = v6;
  *(_BYTE *)(a1 + 211) = v8;
  int v5 = *(_DWORD *)(a2 + 212);
LABEL_6:
  if ((v5 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 80);
    *(_DWORD *)(a1 + 212) = v6 | 1;
    *(void *)(a1 + 80) = v9;
  }

  if (a1 != a2)
  {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_10004C5F8( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  int v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x10000000) != 0)
  {
    char v13 = *(_BYTE *)(a2 + 208);
    *(_DWORD *)(a1 + 212) |= 0x10000000u;
    *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = v13;
    int v10 = *(_DWORD *)(a2 + 212);
    if ((v10 & 0x20000000) == 0)
    {
LABEL_12:
      if ((v10 & 0x400000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_43;
    }
  }

  else if ((v10 & 0x20000000) == 0)
  {
    goto LABEL_12;
  }

  char v14 = *(_BYTE *)(a2 + 209);
  *(_DWORD *)(a1 + 212) |= 0x20000000u;
  *(_BYTE *)(a1 + 209) = v14;
  int v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x400000) == 0)
  {
LABEL_13:
    if ((v10 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }

uint64_t sub_1010A5004(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "avgHorizontalDecelMax", *(double *)(a1 + 80));
    int v5 = *(_DWORD *)(a1 + 212);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "avgHorizontalDecelThresholdCoupled", *(float *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }

BOOL sub_1010A54C8(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    int v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    float v12 = (void **)(a1 + 56);
    uint64_t v13 = a1 + 72;
    char v14 = (void **)(a1 + 8);
    uint64_t v15 = a1 + 24;
    while (1)
    {
      uint64_t v16 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v17 = 0;
      unsigned int v18 = 0;
      unint64_t v19 = 0LL;
      while (1)
      {
        unint64_t v20 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v21 = *(_BYTE *)(v16 + v4);
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          break;
        }
        v17 += 7;
        unint64_t v4 = v20;
        BOOL v22 = v18++ > 8;
        if (v22) {
          goto LABEL_20;
        }
      }

LABEL_413:
            PB::Reader::recallMark(this, v361);
          }

          else
          {
            unint64_t v259 = *(char **)(a1 + 40);
            unint64_t v258 = *(void *)(a1 + 48);
            if ((unint64_t)v259 >= v258)
            {
              uint64_t v344 = (char *)*v10;
              uint64_t v345 = (v259 - (_BYTE *)*v10) >> 2;
              unint64_t v346 = v345 + 1;
              if ((unint64_t)(v345 + 1) >> 62) {
LABEL_556:
              }
                sub_100007008();
              uint64_t v347 = v258 - (void)v344;
              if (v347 >> 1 > v346) {
                unint64_t v346 = v347 >> 1;
              }
              else {
                unint64_t v348 = v346;
              }
              if (v348)
              {
                char v349 = (char *)sub_10000956C(v11, v348);
                uint64_t v344 = *(char **)(a1 + 32);
                unint64_t v259 = *(char **)(a1 + 40);
              }

              else
              {
                char v349 = 0LL;
              }

              unint64_t v356 = &v349[4 * v345];
              *(_DWORD *)unint64_t v356 = 0;
              int v257 = v356 + 4;
              while (v259 != v344)
              {
                int v357 = *((_DWORD *)v259 - 1);
                v259 -= 4;
                *((_DWORD *)v356 - 1) = v357;
                v356 -= 4;
              }

              *(void *)(a1 + 32) = v356;
              *(void *)(a1 + 40) = v257;
              *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v349[4 * v348];
              if (v344) {
                operator delete(v344);
              }
            }

            else
            {
              *(_DWORD *)unint64_t v259 = 0;
              int v257 = v259 + 4;
            }

            *(void *)(a1 + 40) = v257;
LABEL_538:
            unint64_t v358 = *((void *)this + 1);
            if (v358 <= 0xFFFFFFFFFFFFFFFBLL && v358 + 4 <= *((void *)this + 2))
            {
              *(v257 - 1) = *(_DWORD *)(*(void *)this + v358);
LABEL_542:
              uint64_t v353 = *((void *)this + 1) + 4LL;
LABEL_543:
              *((void *)this + 1) = v353;
            }

            else
            {
LABEL_540:
              *((_BYTE *)this + 24) = 1;
            }
          }

LABEL_544:
          unint64_t v4 = *((void *)this + 1);
          unint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 7u:
          *(_DWORD *)(a1 + 212) |= 0x10000000u;
          unint64_t v84 = *((void *)this + 1);
          if (v84 >= *((void *)this + 2))
          {
            BOOL v87 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v85 = v84 + 1;
            int v86 = *(unsigned __int8 *)(*(void *)this + v84);
            *((void *)this + 1) = v85;
            BOOL v87 = v86 != 0;
          }

          *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = v87;
          goto LABEL_544;
        case 8u:
          *(_DWORD *)(a1 + 212) |= 0x20000000u;
          unint64_t v88 = *((void *)this + 1);
          if (v88 >= *((void *)this + 2))
          {
            BOOL v91 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v89 = v88 + 1;
            int v90 = *(unsigned __int8 *)(*(void *)this + v88);
            *((void *)this + 1) = v89;
            BOOL v91 = v90 != 0;
          }

          *(_BYTE *)(a1 + 209) = v91;
          goto LABEL_544;
        case 9u:
          *(_DWORD *)(a1 + 212) |= 0x400000u;
          unint64_t v92 = *((void *)this + 1);
          unint64_t v93 = *((void *)this + 2);
          uint64_t v94 = *(void *)this;
          if (v92 <= 0xFFFFFFFFFFFFFFF5LL && v92 + 10 <= v93)
          {
            char v95 = 0;
            unsigned int v96 = 0;
            uint64_t v97 = 0LL;
            do
            {
              unint64_t v98 = v92 + 1;
              *((void *)this + 1) = v92 + 1;
              char v99 = *(_BYTE *)(v94 + v92);
              v97 |= (unint64_t)(v99 & 0x7F) << v95;
              if ((v99 & 0x80) == 0) {
                goto LABEL_462;
              }
              v95 += 7;
              unint64_t v92 = v98;
              BOOL v22 = v96++ > 8;
            }

            while (!v22);
LABEL_290:
            LODWORD(v97) = 0;
            goto LABEL_462;
          }

          char v260 = 0;
          unsigned int v261 = 0;
          uint64_t v97 = 0LL;
          if (v93 <= v92) {
            unint64_t v93 = *((void *)this + 1);
          }
          while (2)
          {
            if (v93 == v92)
            {
              LODWORD(v97) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v262 = v92 + 1;
              char v263 = *(_BYTE *)(v94 + v92);
              *((void *)this + 1) = v262;
              v97 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                unint64_t v92 = v262;
                BOOL v22 = v261++ > 8;
                if (v22) {
                  goto LABEL_290;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v97) = 0;
              }
            }

            break;
          }

LABEL_462:
          *(_DWORD *)(a1 + 184) = v97;
          goto LABEL_544;
        case 0xAu:
          *(_DWORD *)(a1 + 212) |= 0x10u;
          unint64_t v100 = *((void *)this + 1);
          if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((void *)this + 2)) {
            goto LABEL_540;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v100);
          goto LABEL_542;
        case 0xBu:
          *(_DWORD *)(a1 + 212) |= 0x80000u;
          unint64_t v101 = *((void *)this + 1);
          unint64_t v102 = *((void *)this + 2);
          uint64_t v103 = *(void *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5LL && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0LL;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)this + 1) = v101 + 1;
              char v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_465;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v22 = v105++ > 8;
            }

            while (!v22);
LABEL_297:
            LODWORD(v106) = 0;
            goto LABEL_465;
          }

          char v264 = 0;
          unsigned int v265 = 0;
          uint64_t v106 = 0LL;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)this + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v266 = v101 + 1;
              char v267 = *(_BYTE *)(v103 + v101);
              *((void *)this + 1) = v266;
              v106 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                unint64_t v101 = v266;
                BOOL v22 = v265++ > 8;
                if (v22) {
                  goto LABEL_297;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v106) = 0;
              }
            }

            break;
          }

LABEL_468:
          *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = v114;
          goto LABEL_544;
        case 0xDu:
          *(_DWORD *)(a1 + 212) |= 0x20000u;
          unint64_t v117 = *((void *)this + 1);
          unint64_t v118 = *((void *)this + 2);
          uint64_t v119 = *(void *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5LL && v117 + 10 <= v118)
          {
            char v120 = 0;
            unsigned int v121 = 0;
            uint64_t v122 = 0LL;
            do
            {
              unint64_t v123 = v117 + 1;
              *((void *)this + 1) = v117 + 1;
              char v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_471;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v22 = v121++ > 8;
            }

            while (!v22);
LABEL_311:
            LODWORD(v122) = 0;
            goto LABEL_471;
          }

          char v272 = 0;
          unsigned int v273 = 0;
          uint64_t v122 = 0LL;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)this + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v274 = v117 + 1;
              char v275 = *(_BYTE *)(v119 + v117);
              *((void *)this + 1) = v274;
              v122 |= (unint64_t)(v275 & 0x7F) << v272;
              if (v275 < 0)
              {
                v272 += 7;
                unint64_t v117 = v274;
                BOOL v22 = v273++ > 8;
                if (v22) {
                  goto LABEL_311;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v122) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 92) = v181;
          goto LABEL_489;
        case 0x1Eu:
          *(void *)(a1 + 164) |= 8uLL;
          uint64_t v184 = *((void *)this + 1);
          char v185 = *((void *)this + 2);
          unsigned int v186 = *(void *)this;
          if (v184 <= 0xFFFFFFFFFFFFFFF5LL && v184 + 10 <= v185)
          {
            uint64_t v187 = 0;
            unint64_t v188 = 0;
            char v189 = 0LL;
            do
            {
              unint64_t v190 = v184 + 1;
              *((void *)this + 1) = v184 + 1;
              unint64_t v191 = *(_BYTE *)(v186 + v184);
              v189 |= (unint64_t)(v191 & 0x7F) << v187;
              if ((v191 & 0x80) == 0) {
                goto LABEL_472;
              }
              v187 += 7;
              uint64_t v184 = v190;
              char v14 = v188++ > 8;
            }

            while (!v14);
LABEL_361:
            char v189 = 0LL;
            goto LABEL_472;
          }

          char v300 = 0;
          unsigned int v301 = 0;
          char v189 = 0LL;
          if (v185 <= v184) {
            char v185 = *((void *)this + 1);
          }
          while (2)
          {
            if (v185 == v184)
            {
              char v189 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v302 = v184 + 1;
              char v303 = *(_BYTE *)(v186 + v184);
              *((void *)this + 1) = v302;
              v189 |= (unint64_t)(v303 & 0x7F) << v300;
              if (v303 < 0)
              {
                v300 += 7;
                uint64_t v184 = v302;
                char v14 = v301++ > 8;
                if (v14) {
                  goto LABEL_361;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                char v189 = 0LL;
              }
            }

            break;
          }

LABEL_474:
          *(_DWORD *)(a1 + 160) = v130;
          goto LABEL_544;
        case 0xFu:
          *(_DWORD *)(a1 + 212) |= 0x8000u;
          unint64_t v133 = *((void *)this + 1);
          unint64_t v134 = *((void *)this + 2);
          uint64_t v135 = *(void *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5LL && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0LL;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)this + 1) = v133 + 1;
              char v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_477;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v22 = v137++ > 8;
            }

            while (!v22);
LABEL_325:
            LODWORD(v13_Block_object_dispose(va, 8) = 0;
            goto LABEL_477;
          }

          char v280 = 0;
          unsigned int v281 = 0;
          uint64_t v138 = 0LL;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)this + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v13_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v282 = v133 + 1;
              char v283 = *(_BYTE *)(v135 + v133);
              *((void *)this + 1) = v282;
              v138 |= (unint64_t)(v283 & 0x7F) << v280;
              if (v283 < 0)
              {
                v280 += 7;
                unint64_t v133 = v282;
                BOOL v22 = v281++ > 8;
                if (v22) {
                  goto LABEL_325;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v13_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

LABEL_480:
          *(_DWORD *)(a1 + 152) = v146;
          goto LABEL_544;
        case 0x11u:
          *(_DWORD *)(a1 + 212) |= 0x2000u;
          unint64_t v149 = *((void *)this + 1);
          unint64_t v150 = *((void *)this + 2);
          uint64_t v151 = *(void *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5LL && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0LL;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)this + 1) = v149 + 1;
              char v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_483;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v22 = v153++ > 8;
            }

            while (!v22);
LABEL_339:
            LODWORD(v154) = 0;
            goto LABEL_483;
          }

          char v288 = 0;
          unsigned int v289 = 0;
          uint64_t v154 = 0LL;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)this + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v290 = v149 + 1;
              char v291 = *(_BYTE *)(v151 + v149);
              *((void *)this + 1) = v290;
              v154 |= (unint64_t)(v291 & 0x7F) << v288;
              if (v291 < 0)
              {
                v288 += 7;
                unint64_t v149 = v290;
                BOOL v22 = v289++ > 8;
                if (v22) {
                  goto LABEL_339;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v154) = 0;
              }
            }

            break;
          }

          *(void *)(a1 + _Block_object_dispose(va, 8) = v205;
          goto LABEL_489;
        case 0x21u:
          *(void *)(a1 + 164) |= 2uLL;
          char v208 = *((void *)this + 1);
          unint64_t v209 = *((void *)this + 2);
          unint64_t v210 = *(void *)this;
          if (v208 <= 0xFFFFFFFFFFFFFFF5LL && v208 + 10 <= v209)
          {
            uint64_t v211 = 0;
            char v212 = 0;
            unsigned int v213 = 0LL;
            do
            {
              uint64_t v214 = v208 + 1;
              *((void *)this + 1) = v208 + 1;
              unint64_t v215 = *(_BYTE *)(v210 + v208);
              v213 |= (unint64_t)(v215 & 0x7F) << v211;
              if ((v215 & 0x80) == 0) {
                goto LABEL_484;
              }
              v211 += 7;
              char v208 = v214;
              char v14 = v212++ > 8;
            }

            while (!v14);
LABEL_382:
            unsigned int v213 = 0LL;
            goto LABEL_484;
          }

          char v312 = 0;
          unsigned int v313 = 0;
          unsigned int v213 = 0LL;
          if (v209 <= v208) {
            unint64_t v209 = *((void *)this + 1);
          }
          while (2)
          {
            if (v209 == v208)
            {
              unsigned int v213 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v314 = v208 + 1;
              char v315 = *(_BYTE *)(v210 + v208);
              *((void *)this + 1) = v314;
              v213 |= (unint64_t)(v315 & 0x7F) << v312;
              if (v315 < 0)
              {
                v312 += 7;
                char v208 = v314;
                char v14 = v313++ > 8;
                if (v14) {
                  goto LABEL_382;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                unsigned int v213 = 0LL;
              }
            }

            break;
          }

LABEL_492:
          *(_DWORD *)(a1 + 116) = v179;
          goto LABEL_544;
        case 0x16u:
          *(_DWORD *)(a1 + 212) |= 8u;
          unint64_t v182 = *((void *)this + 1);
          unint64_t v183 = *((void *)this + 2);
          uint64_t v184 = *(void *)this;
          if (v182 <= 0xFFFFFFFFFFFFFFF5LL && v182 + 10 <= v183)
          {
            char v185 = 0;
            unsigned int v186 = 0;
            uint64_t v187 = 0LL;
            do
            {
              unint64_t v188 = v182 + 1;
              *((void *)this + 1) = v182 + 1;
              char v189 = *(_BYTE *)(v184 + v182);
              v187 |= (unint64_t)(v189 & 0x7F) << v185;
              if ((v189 & 0x80) == 0) {
                goto LABEL_495;
              }
              v185 += 7;
              unint64_t v182 = v188;
              BOOL v22 = v186++ > 8;
            }

            while (!v22);
LABEL_367:
            uint64_t v187 = 0LL;
            goto LABEL_495;
          }

          char v304 = 0;
          unsigned int v305 = 0;
          uint64_t v187 = 0LL;
          if (v183 <= v182) {
            unint64_t v183 = *((void *)this + 1);
          }
          while (2)
          {
            if (v183 == v182)
            {
              uint64_t v187 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v306 = v182 + 1;
              char v307 = *(_BYTE *)(v184 + v182);
              *((void *)this + 1) = v306;
              v187 |= (unint64_t)(v307 & 0x7F) << v304;
              if (v307 < 0)
              {
                v304 += 7;
                unint64_t v182 = v306;
                BOOL v22 = v305++ > 8;
                if (v22) {
                  goto LABEL_367;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v187 = 0LL;
              }
            }

            break;
          }

LABEL_495:
          *(void *)(a1 + 104) = v187;
          goto LABEL_544;
        case 0x17u:
          *(_DWORD *)(a1 + 212) |= 0x2000000u;
          unint64_t v190 = *((void *)this + 1);
          if (v190 > 0xFFFFFFFFFFFFFFFBLL || v190 + 4 > *((void *)this + 2)) {
            goto LABEL_540;
          }
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(void *)this + v190);
          goto LABEL_542;
        case 0x18u:
          *(_DWORD *)(a1 + 212) |= 0x4000000u;
          unint64_t v191 = *((void *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((void *)this + 2)) {
            goto LABEL_540;
          }
          *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(void *)this + v191);
          goto LABEL_542;
        case 0x19u:
          *(_DWORD *)(a1 + 212) |= 0x8000000u;
          unint64_t v192 = *((void *)this + 1);
          if (v192 > 0xFFFFFFFFFFFFFFFBLL || v192 + 4 > *((void *)this + 2)) {
            goto LABEL_540;
          }
          *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(void *)this + v192);
          goto LABEL_542;
        case 0x1Au:
          *(_DWORD *)(a1 + 212) |= 0x800u;
          unint64_t v193 = *((void *)this + 1);
          unint64_t v194 = *((void *)this + 2);
          uint64_t v195 = *(void *)this;
          if (v193 <= 0xFFFFFFFFFFFFFFF5LL && v193 + 10 <= v194)
          {
            char v196 = 0;
            unsigned int v197 = 0;
            uint64_t v198 = 0LL;
            do
            {
              unint64_t v199 = v193 + 1;
              *((void *)this + 1) = v193 + 1;
              char v200 = *(_BYTE *)(v195 + v193);
              v198 |= (unint64_t)(v200 & 0x7F) << v196;
              if ((v200 & 0x80) == 0) {
                goto LABEL_498;
              }
              v196 += 7;
              unint64_t v193 = v199;
              BOOL v22 = v197++ > 8;
            }

            while (!v22);
LABEL_374:
            LODWORD(v19_Block_object_dispose(va, 8) = 0;
            goto LABEL_498;
          }

          char v308 = 0;
          unsigned int v309 = 0;
          uint64_t v198 = 0LL;
          if (v194 <= v193) {
            unint64_t v194 = *((void *)this + 1);
          }
          while (2)
          {
            if (v194 == v193)
            {
              LODWORD(v19_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v310 = v193 + 1;
              char v311 = *(_BYTE *)(v195 + v193);
              *((void *)this + 1) = v310;
              v198 |= (unint64_t)(v311 & 0x7F) << v308;
              if (v311 < 0)
              {
                v308 += 7;
                unint64_t v193 = v310;
                BOOL v22 = v309++ > 8;
                if (v22) {
                  goto LABEL_374;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v19_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

LABEL_498:
          *(_DWORD *)(a1 + 140) = v198;
          goto LABEL_544;
        case 0x1Bu:
          *(_DWORD *)(a1 + 212) |= 0x80u;
          unint64_t v201 = *((void *)this + 1);
          unint64_t v202 = *((void *)this + 2);
          uint64_t v203 = *(void *)this;
          if (v201 <= 0xFFFFFFFFFFFFFFF5LL && v201 + 10 <= v202)
          {
            char v204 = 0;
            unsigned int v205 = 0;
            uint64_t v206 = 0LL;
            do
            {
              unint64_t v207 = v201 + 1;
              *((void *)this + 1) = v201 + 1;
              char v208 = *(_BYTE *)(v203 + v201);
              v206 |= (unint64_t)(v208 & 0x7F) << v204;
              if ((v208 & 0x80) == 0) {
                goto LABEL_501;
              }
              v204 += 7;
              unint64_t v201 = v207;
              BOOL v22 = v205++ > 8;
            }

            while (!v22);
LABEL_381:
            LODWORD(v206) = 0;
            goto LABEL_501;
          }

          char v312 = 0;
          unsigned int v313 = 0;
          uint64_t v206 = 0LL;
          if (v202 <= v201) {
            unint64_t v202 = *((void *)this + 1);
          }
          while (2)
          {
            if (v202 == v201)
            {
              LODWORD(v206) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v314 = v201 + 1;
              char v315 = *(_BYTE *)(v203 + v201);
              *((void *)this + 1) = v314;
              v206 |= (unint64_t)(v315 & 0x7F) << v312;
              if (v315 < 0)
              {
                v312 += 7;
                unint64_t v201 = v314;
                BOOL v22 = v313++ > 8;
                if (v22) {
                  goto LABEL_381;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v206) = 0;
              }
            }

            break;
          }

LABEL_501:
          *(_DWORD *)(a1 + 124) = v206;
          goto LABEL_544;
        case 0x1Cu:
          *(_DWORD *)(a1 + 212) |= 2u;
          unint64_t v209 = *((void *)this + 1);
          unint64_t v210 = *((void *)this + 2);
          uint64_t v211 = *(void *)this;
          if (v209 <= 0xFFFFFFFFFFFFFFF5LL && v209 + 10 <= v210)
          {
            char v212 = 0;
            unsigned int v213 = 0;
            uint64_t v214 = 0LL;
            do
            {
              unint64_t v215 = v209 + 1;
              *((void *)this + 1) = v209 + 1;
              char v216 = *(_BYTE *)(v211 + v209);
              v214 |= (unint64_t)(v216 & 0x7F) << v212;
              if ((v216 & 0x80) == 0) {
                goto LABEL_504;
              }
              v212 += 7;
              unint64_t v209 = v215;
              BOOL v22 = v213++ > 8;
            }

            while (!v22);
LABEL_388:
            uint64_t v214 = 0LL;
            goto LABEL_504;
          }

          char v316 = 0;
          unsigned int v317 = 0;
          uint64_t v214 = 0LL;
          if (v210 <= v209) {
            unint64_t v210 = *((void *)this + 1);
          }
          while (2)
          {
            if (v210 == v209)
            {
              uint64_t v214 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v318 = v209 + 1;
              char v319 = *(_BYTE *)(v211 + v209);
              *((void *)this + 1) = v318;
              v214 |= (unint64_t)(v319 & 0x7F) << v316;
              if (v319 < 0)
              {
                v316 += 7;
                unint64_t v209 = v318;
                BOOL v22 = v317++ > 8;
                if (v22) {
                  goto LABEL_388;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v214 = 0LL;
              }
            }

            break;
          }

LABEL_504:
          *(void *)(a1 + 8_Block_object_dispose(va, 8) = v214;
          goto LABEL_544;
        case 0x1Du:
          *(_DWORD *)(a1 + 212) |= 0x40000000u;
          unint64_t v217 = *((void *)this + 1);
          if (v217 >= *((void *)this + 2))
          {
            BOOL v220 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v218 = v217 + 1;
            int v219 = *(unsigned __int8 *)(*(void *)this + v217);
            *((void *)this + 1) = v218;
            BOOL v220 = v219 != 0;
          }

          *(_BYTE *)(a1 + 210) = v220;
          goto LABEL_544;
        case 0x1Eu:
          *(_DWORD *)(a1 + 212) |= 0x1000u;
          unint64_t v221 = *((void *)this + 1);
          if (v221 > 0xFFFFFFFFFFFFFFFBLL || v221 + 4 > *((void *)this + 2)) {
            goto LABEL_540;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v221);
          goto LABEL_542;
        case 0x1Fu:
          *(_DWORD *)(a1 + 212) |= 0x200u;
          unint64_t v222 = *((void *)this + 1);
          if (v222 > 0xFFFFFFFFFFFFFFFBLL || v222 + 4 > *((void *)this + 2)) {
            goto LABEL_540;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v222);
          goto LABEL_542;
        case 0x20u:
          *(_DWORD *)(a1 + 212) |= 0x40u;
          unint64_t v223 = *((void *)this + 1);
          if (v223 > 0xFFFFFFFFFFFFFFFBLL || v223 + 4 > *((void *)this + 2)) {
            goto LABEL_540;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v223);
          goto LABEL_542;
        case 0x21u:
          *(_DWORD *)(a1 + 212) |= 0x200000u;
          unint64_t v224 = *((void *)this + 1);
          unint64_t v225 = *((void *)this + 2);
          uint64_t v226 = *(void *)this;
          if (v224 <= 0xFFFFFFFFFFFFFFF5LL && v224 + 10 <= v225)
          {
            char v227 = 0;
            unsigned int v228 = 0;
            uint64_t v229 = 0LL;
            do
            {
              unint64_t v230 = v224 + 1;
              *((void *)this + 1) = v224 + 1;
              char v231 = *(_BYTE *)(v226 + v224);
              v229 |= (unint64_t)(v231 & 0x7F) << v227;
              if ((v231 & 0x80) == 0) {
                goto LABEL_507;
              }
              v227 += 7;
              unint64_t v224 = v230;
              BOOL v22 = v228++ > 8;
            }

            while (!v22);
LABEL_397:
            LODWORD(v229) = 0;
            goto LABEL_507;
          }

          char v320 = 0;
          unsigned int v321 = 0;
          uint64_t v229 = 0LL;
          if (v225 <= v224) {
            unint64_t v225 = *((void *)this + 1);
          }
          while (2)
          {
            if (v225 == v224)
            {
              LODWORD(v229) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v322 = v224 + 1;
              char v323 = *(_BYTE *)(v226 + v224);
              *((void *)this + 1) = v322;
              v229 |= (unint64_t)(v323 & 0x7F) << v320;
              if (v323 < 0)
              {
                v320 += 7;
                unint64_t v224 = v322;
                BOOL v22 = v321++ > 8;
                if (v22) {
                  goto LABEL_397;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v229) = 0;
              }
            }

            break;
          }

LABEL_507:
          *(_DWORD *)(a1 + 180) = v229;
          goto LABEL_544;
        case 0x22u:
          *(_DWORD *)(a1 + 212) |= 0x400u;
          unint64_t v232 = *((void *)this + 1);
          unint64_t v233 = *((void *)this + 2);
          uint64_t v234 = *(void *)this;
          if (v232 <= 0xFFFFFFFFFFFFFFF5LL && v232 + 10 <= v233)
          {
            char v235 = 0;
            unsigned int v236 = 0;
            uint64_t v237 = 0LL;
            do
            {
              unint64_t v238 = v232 + 1;
              *((void *)this + 1) = v232 + 1;
              char v239 = *(_BYTE *)(v234 + v232);
              v237 |= (unint64_t)(v239 & 0x7F) << v235;
              if ((v239 & 0x80) == 0) {
                goto LABEL_510;
              }
              v235 += 7;
              unint64_t v232 = v238;
              BOOL v22 = v236++ > 8;
            }

            while (!v22);
LABEL_404:
            LODWORD(v237) = 0;
            goto LABEL_510;
          }

          char v324 = 0;
          unsigned int v325 = 0;
          uint64_t v237 = 0LL;
          if (v233 <= v232) {
            unint64_t v233 = *((void *)this + 1);
          }
          while (2)
          {
            if (v233 == v232)
            {
              LODWORD(v237) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v326 = v232 + 1;
              char v327 = *(_BYTE *)(v234 + v232);
              *((void *)this + 1) = v326;
              v237 |= (unint64_t)(v327 & 0x7F) << v324;
              if (v327 < 0)
              {
                v324 += 7;
                unint64_t v232 = v326;
                BOOL v22 = v325++ > 8;
                if (v22) {
                  goto LABEL_404;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v237) = 0;
              }
            }

            break;
          }

LABEL_510:
          *(_DWORD *)(a1 + 136) = v237;
          goto LABEL_544;
        case 0x23u:
          *(_DWORD *)(a1 + 212) |= 0x800000u;
          unint64_t v240 = *((void *)this + 1);
          unint64_t v241 = *((void *)this + 2);
          uint64_t v242 = *(void *)this;
          if (v240 <= 0xFFFFFFFFFFFFFFF5LL && v240 + 10 <= v241)
          {
            char v243 = 0;
            unsigned int v244 = 0;
            uint64_t v245 = 0LL;
            do
            {
              unint64_t v246 = v240 + 1;
              *((void *)this + 1) = v240 + 1;
              char v247 = *(_BYTE *)(v242 + v240);
              v245 |= (unint64_t)(v247 & 0x7F) << v243;
              if ((v247 & 0x80) == 0) {
                goto LABEL_513;
              }
              v243 += 7;
              unint64_t v240 = v246;
              BOOL v22 = v244++ > 8;
            }

            while (!v22);
LABEL_411:
            LODWORD(v245) = 0;
            goto LABEL_513;
          }

          char v328 = 0;
          unsigned int v329 = 0;
          uint64_t v245 = 0LL;
          if (v241 <= v240) {
            unint64_t v241 = *((void *)this + 1);
          }
          while (2)
          {
            if (v241 == v240)
            {
              LODWORD(v245) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v330 = v240 + 1;
              char v331 = *(_BYTE *)(v242 + v240);
              *((void *)this + 1) = v330;
              v245 |= (unint64_t)(v331 & 0x7F) << v328;
              if (v331 < 0)
              {
                v328 += 7;
                unint64_t v240 = v330;
                BOOL v22 = v329++ > 8;
                if (v22) {
                  goto LABEL_411;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v245) = 0;
              }
            }

            break;
          }

LABEL_513:
          *(_DWORD *)(a1 + 18_Block_object_dispose(va, 8) = v245;
          goto LABEL_544;
        default:
          if ((PB::Reader::skip(this, v19 >> 3, v19 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_544;
      }
    }

    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v19 = 0LL;
    if (v4 > v5) {
      unint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      unint64_t v25 = v4 + 1;
      char v26 = *(_BYTE *)(v16 + v4);
      *((void *)this + 1) = v25;
      v19 |= (unint64_t)(v26 & 0x7F) << v23;
      if ((v26 & 0x80) == 0) {
        goto LABEL_21;
      }
      v23 += 7;
      unint64_t v4 = v25;
      if (v24++ >= 9)
      {
LABEL_20:
        unint64_t v19 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

uint64_t sub_1010A7068(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 212);
  if ((v4 & 4) == 0)
  {
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_45:
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 211), 2u);
    if ((*(_DWORD *)(v3 + 212) & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(result + 96), 1u);
  int v4 = *(_DWORD *)(v3 + 212);
  if (v4 < 0) {
    goto LABEL_45;
  }
LABEL_3:
  if ((v4 & 1) != 0) {
LABEL_4:
  }
    double result = PB::Writer::write(this, *(double *)(v3 + 80), 3u);
LABEL_5:
  unint64_t v5 = *(double **)(v3 + 8);
  int v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7, 4u);
  }

  double v8 = *(float **)(v3 + 56);
  int v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    float v10 = *v8++;
    double result = PB::Writer::write(this, v10, 5u);
  }

  uint64_t v11 = *(float **)(v3 + 32);
  float v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    double result = PB::Writer::write(this, v13, 6u);
  }

  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000000) != 0)
  {
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 208), 7u);
    int v14 = *(_DWORD *)(v3 + 212);
    if ((v14 & 0x20000000) == 0)
    {
LABEL_16:
      if ((v14 & 0x400000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_49;
    }
  }

  else if ((v14 & 0x20000000) == 0)
  {
    goto LABEL_16;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 209), 8u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400000) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }

double sub_1010A7478(uint64_t a1)
{
  *(void *)a1 = &off_101899720;
  *(_DWORD *)(a1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

void sub_1010A74A4(PB::Base *this)
{
  *(void *)this = &off_101899720;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }

  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_1010A7504(PB::Base *a1)
{
}

uint64_t sub_1010A7518(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &off_101899720;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0LL;
  __int16 v5 = *(_WORD *)(a2 + 120);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 88);
    __int16 v6 = 2;
    *(_WORD *)(a1 + 120) = 2;
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v7;
    __int16 v5 = *(_WORD *)(a2 + 120);
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v6 = 0;
  if ((*(_WORD *)(a2 + 120) & 0x200) != 0)
  {
LABEL_5:
    char v8 = *(_BYTE *)(a2 + 118);
    v6 |= 0x200u;
    *(_WORD *)(a1 + 120) = v6;
    *(_BYTE *)(a1 + 11_Block_object_dispose(va, 8) = v8;
    __int16 v5 = *(_WORD *)(a2 + 120);
  }

uint64_t sub_1010A76EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "avgHorizontalDecelMax", *(double *)(a1 + 80));
    __int16 v5 = *(_WORD *)(a1 + 120);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "avgHorizontalDecelThresholdCoupled", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 120) & 8) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "impactThresholdUncoupled", *(float *)(a1 + 100));
LABEL_5:
  __int16 v6 = *(double **)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "inertialAccel", v8);
  }

  __int16 v9 = *(_WORD *)(a1 + 120);
  if ((v9 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "isMounted", *(_BYTE *)(a1 + 116));
    __int16 v9 = *(_WORD *)(a1 + 120);
    if ((v9 & 0x100) == 0)
    {
LABEL_9:
      if ((v9 & 0x10) == 0) {
        goto LABEL_10;
      }
      goto LABEL_26;
    }
  }

  else if ((*(_WORD *)(a1 + 120) & 0x100) == 0)
  {
    goto LABEL_9;
  }

  PB::TextFormatter::format(this, "isSimulated", *(_BYTE *)(a1 + 117));
  __int16 v9 = *(_WORD *)(a1 + 120);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

BOOL sub_1010A78F0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    __int16 v10 = (void **)(a1 + 32);
    uint64_t v170 = a1 + 48;
    int v11 = (void **)(a1 + 56);
    uint64_t v12 = a1 + 72;
    char v13 = (void **)(a1 + 8);
    uint64_t v14 = a1 + 24;
    while (1)
    {
      uint64_t v15 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0LL;
      while (1)
      {
        unint64_t v19 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v4 = v19;
        BOOL v21 = v17++ > 8;
        if (v21) {
          goto LABEL_20;
        }
      }

LABEL_212:
          *(void *)(a1 + 8_Block_object_dispose(va, 8) = v33;
          goto LABEL_252;
        case 2u:
          *(_WORD *)(a1 + 120) |= 0x200u;
          unint64_t v36 = *((void *)this + 1);
          if (v36 >= *((void *)this + 2))
          {
            BOOL v39 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v37 = v36 + 1;
            int v38 = *(unsigned __int8 *)(*(void *)this + v36);
            *((void *)this + 1) = v37;
            BOOL v39 = v38 != 0;
          }

          *(_BYTE *)(a1 + 11_Block_object_dispose(va, 8) = v39;
          goto LABEL_252;
        case 3u:
          *(_WORD *)(a1 + 120) |= 1u;
          unint64_t v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFF7LL || v40 + 8 > *((void *)this + 2)) {
            goto LABEL_248;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v40);
          goto LABEL_231;
        case 4u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v171, v27, a4) & 1) != 0) {
              return 0LL;
            }
            unint64_t v41 = *((void *)this + 1);
            unint64_t v42 = *((void *)this + 2);
            while (v41 < v42 && !*((_BYTE *)this + 24))
            {
              unint64_t v44 = *(char **)(a1 + 16);
              unint64_t v43 = *(void *)(a1 + 24);
              if ((unint64_t)v44 >= v43)
              {
                uint64_t v46 = (char *)*v13;
                uint64_t v47 = (v44 - (_BYTE *)*v13) >> 3;
                unint64_t v48 = v47 + 1;
                uint64_t v49 = v43 - (void)v46;
                if (v49 >> 2 > v48) {
                  unint64_t v48 = v49 >> 2;
                }
                else {
                  unint64_t v50 = v48;
                }
                if (v50)
                {
                  unint64_t v51 = (char *)sub_1000071BC(v14, v50);
                  uint64_t v46 = *(char **)(a1 + 8);
                  unint64_t v44 = *(char **)(a1 + 16);
                }

                else
                {
                  unint64_t v51 = 0LL;
                }

                uint64_t v52 = &v51[8 * v47];
                *(void *)uint64_t v52 = 0LL;
                unint64_t v45 = v52 + 8;
                while (v44 != v46)
                {
                  uint64_t v53 = *((void *)v44 - 1);
                  v44 -= 8;
                  *((void *)v52 - 1) = v53;
                  v52 -= 8;
                }

                *(void *)(a1 + _Block_object_dispose(va, 8) = v52;
                *(void *)(a1 + 16) = v45;
                *(void *)(a1 + 24) = &v51[8 * v50];
                if (v46) {
                  operator delete(v46);
                }
              }

              else
              {
                *(void *)unint64_t v44 = 0LL;
                unint64_t v45 = v44 + 8;
              }

              *(void *)(a1 + 16) = v45;
              unint64_t v54 = *((void *)this + 1);
              if (v54 > 0xFFFFFFFFFFFFFFF7LL || v54 + 8 > *((void *)this + 2)) {
                goto LABEL_180;
              }
              *(v45 - 1) = *(void *)(*(void *)this + v54);
              unint64_t v42 = *((void *)this + 2);
              unint64_t v41 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v41;
            }

            goto LABEL_181;
          }

          uint64_t v122 = *(char **)(a1 + 16);
          unint64_t v121 = *(void *)(a1 + 24);
          if ((unint64_t)v122 >= v121)
          {
            unint64_t v141 = (char *)*v13;
            uint64_t v142 = (v122 - (_BYTE *)*v13) >> 3;
            unint64_t v143 = v142 + 1;
            if ((unint64_t)(v142 + 1) >> 61) {
LABEL_262:
            }
              sub_100007008();
            uint64_t v144 = v121 - (void)v141;
            if (v144 >> 2 > v143) {
              unint64_t v143 = v144 >> 2;
            }
            else {
              unint64_t v145 = v143;
            }
            if (v145)
            {
              uint64_t v146 = (char *)sub_1000071BC(v14, v145);
              unint64_t v141 = *(char **)(a1 + 8);
              uint64_t v122 = *(char **)(a1 + 16);
            }

            else
            {
              uint64_t v146 = 0LL;
            }

            uint64_t v159 = &v146[8 * v142];
            *(void *)uint64_t v159 = 0LL;
            unint64_t v123 = v159 + 8;
            while (v122 != v141)
            {
              uint64_t v160 = *((void *)v122 - 1);
              v122 -= 8;
              *((void *)v159 - 1) = v160;
              v159 -= 8;
            }

            *(void *)(a1 + _Block_object_dispose(va, 8) = v159;
            *(void *)(a1 + 16) = v123;
            *(void *)(a1 + 24) = &v146[8 * v145];
            if (v141) {
              operator delete(v141);
            }
          }

          else
          {
            *(void *)uint64_t v122 = 0LL;
            unint64_t v123 = v122 + 8;
          }

          *(void *)(a1 + 16) = v123;
          unint64_t v161 = *((void *)this + 1);
          if (v161 <= 0xFFFFFFFFFFFFFFF7LL && v161 + 8 <= *((void *)this + 2))
          {
            *(v123 - 1) = *(void *)(*(void *)this + v161);
LABEL_231:
            uint64_t v162 = *((void *)this + 1) + 8LL;
            goto LABEL_251;
          }

          goto LABEL_248;
        case 5u:
          if ((_DWORD)v27 != 2)
          {
            unint64_t v125 = *(char **)(a1 + 64);
            unint64_t v124 = *(void *)(a1 + 72);
            if ((unint64_t)v125 >= v124)
            {
              unint64_t v147 = (char *)*v11;
              uint64_t v148 = (v125 - (_BYTE *)*v11) >> 2;
              unint64_t v149 = v148 + 1;
              if ((unint64_t)(v148 + 1) >> 62) {
LABEL_263:
              }
                sub_100007008();
              uint64_t v150 = v124 - (void)v147;
              if (v150 >> 1 > v149) {
                unint64_t v149 = v150 >> 1;
              }
              else {
                unint64_t v151 = v149;
              }
              if (v151)
              {
                char v152 = (char *)sub_10000956C(v12, v151);
                unint64_t v147 = *(char **)(a1 + 56);
                unint64_t v125 = *(char **)(a1 + 64);
              }

              else
              {
                char v152 = 0LL;
              }

              unint64_t v163 = &v152[4 * v148];
              *(_DWORD *)unint64_t v163 = 0;
              unint64_t v126 = v163 + 4;
              while (v125 != v147)
              {
                int v164 = *((_DWORD *)v125 - 1);
                v125 -= 4;
                *((_DWORD *)v163 - 1) = v164;
                v163 -= 4;
              }

              *(void *)(a1 + 56) = v163;
              *(void *)(a1 + 64) = v126;
              *(void *)(a1 + 72) = &v152[4 * v151];
              if (v147) {
                operator delete(v147);
              }
            }

            else
            {
              *(_DWORD *)unint64_t v125 = 0;
              unint64_t v126 = v125 + 4;
            }

            *(void *)(a1 + 64) = v126;
            goto LABEL_246;
          }

          if ((PB::Reader::placeMark(this, v171, v27, a4) & 1) != 0) {
            return 0LL;
          }
          unint64_t v55 = *((void *)this + 1);
          unint64_t v56 = *((void *)this + 2);
          while (v55 < v56 && !*((_BYTE *)this + 24))
          {
            unint64_t v58 = *(char **)(a1 + 64);
            unint64_t v57 = *(void *)(a1 + 72);
            if ((unint64_t)v58 >= v57)
            {
              unsigned int v60 = (char *)*v11;
              uint64_t v61 = (v58 - (_BYTE *)*v11) >> 2;
              unint64_t v62 = v61 + 1;
              uint64_t v63 = v57 - (void)v60;
              if (v63 >> 1 > v62) {
                unint64_t v62 = v63 >> 1;
              }
              else {
                unint64_t v64 = v62;
              }
              if (v64)
              {
                unint64_t v65 = (char *)sub_10000956C(v12, v64);
                unsigned int v60 = *(char **)(a1 + 56);
                unint64_t v58 = *(char **)(a1 + 64);
              }

              else
              {
                unint64_t v65 = 0LL;
              }

              unsigned int v66 = &v65[4 * v61];
              *(_DWORD *)unsigned int v66 = 0;
              char v59 = v66 + 4;
              while (v58 != v60)
              {
                int v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }

              *(void *)(a1 + 56) = v66;
              *(void *)(a1 + 64) = v59;
              *(void *)(a1 + 72) = &v65[4 * v64];
              if (v60) {
                operator delete(v60);
              }
            }

            else
            {
              *(_DWORD *)unint64_t v58 = 0;
              char v59 = v58 + 4;
            }

            *(void *)(a1 + 64) = v59;
            unint64_t v68 = *((void *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)this + 2)) {
              goto LABEL_180;
            }
            *(v59 - 1) = *(_DWORD *)(*(void *)this + v68);
            unint64_t v56 = *((void *)this + 2);
            unint64_t v55 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v55;
          }

          goto LABEL_181;
        case 6u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v171, v27, a4) & 1) != 0) {
              return 0LL;
            }
            unint64_t v69 = *((void *)this + 1);
            unint64_t v70 = *((void *)this + 2);
            while (v69 < v70 && !*((_BYTE *)this + 24))
            {
              unint64_t v72 = *(char **)(a1 + 40);
              unint64_t v71 = *(void *)(a1 + 48);
              if ((unint64_t)v72 >= v71)
              {
                char v74 = (char *)*v10;
                uint64_t v75 = (v72 - (_BYTE *)*v10) >> 2;
                unint64_t v76 = v75 + 1;
                uint64_t v77 = v71 - (void)v74;
                if (v77 >> 1 > v76) {
                  unint64_t v76 = v77 >> 1;
                }
                else {
                  unint64_t v78 = v76;
                }
                if (v78)
                {
                  unint64_t v79 = (char *)sub_10000956C(v170, v78);
                  char v74 = *(char **)(a1 + 32);
                  unint64_t v72 = *(char **)(a1 + 40);
                }

                else
                {
                  unint64_t v79 = 0LL;
                }

                unsigned int v80 = &v79[4 * v75];
                *(_DWORD *)unsigned int v80 = 0;
                unint64_t v73 = v80 + 4;
                while (v72 != v74)
                {
                  int v81 = *((_DWORD *)v72 - 1);
                  v72 -= 4;
                  *((_DWORD *)v80 - 1) = v81;
                  v80 -= 4;
                }

                *(void *)(a1 + 32) = v80;
                *(void *)(a1 + 40) = v73;
                *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v79[4 * v78];
                if (v74) {
                  operator delete(v74);
                }
              }

              else
              {
                *(_DWORD *)unint64_t v72 = 0;
                unint64_t v73 = v72 + 4;
              }

              *(void *)(a1 + 40) = v73;
              unint64_t v82 = *((void *)this + 1);
              if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)this + 2))
              {
LABEL_180:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v73 - 1) = *(_DWORD *)(*(void *)this + v82);
              unint64_t v70 = *((void *)this + 2);
              unint64_t v69 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v69;
            }

              *(_DWORD *)(a1 + 44) = v46;
              break;
            case 403:
              *(_DWORD *)(a1 + 68) |= 0x20u;
              unint64_t v48 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v49 = *(void *)this;
              if (v48 > 0xFFFFFFFFFFFFFFF5LL || v48 + 10 > v2)
              {
                unint64_t v102 = 0;
                uint64_t v103 = 0;
                uint64_t v52 = 0LL;
                if (v2 <= v48) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v48)
                  {
                    LODWORD(v52) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_217;
                  }

                  char v104 = v48++;
                  unsigned int v105 = *(_BYTE *)(v49 + v104);
                  *((void *)this + 1) = v48;
                  v52 |= (unint64_t)(v105 & 0x7F) << v102;
                  if ((v105 & 0x80) == 0) {
                    break;
                  }
                  v102 += 7;
                  uint64_t v14 = v103++ > 8;
                  if (v14)
                  {
                    LODWORD(v52) = 0;
                    goto LABEL_216;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v52) = 0;
                }
LABEL_216:
                unint64_t v2 = v104 + 1;
              }

              else
              {
                unint64_t v50 = 0;
                unint64_t v51 = 0;
                uint64_t v52 = 0LL;
                while (1)
                {
                  unint64_t v2 = v48 + 1;
                  *((void *)this + 1) = v48 + 1;
                  uint64_t v53 = *(_BYTE *)(v49 + v48);
                  v52 |= (unint64_t)(v53 & 0x7F) << v50;
                  if ((v53 & 0x80) == 0) {
                    break;
                  }
                  v50 += 7;
                  unint64_t v48 = v2;
                  uint64_t v14 = v51++ > 8;
                  if (v14)
                  {
                    LODWORD(v52) = 0;
                    break;
                  }
                }
              }

          *(_DWORD *)(a1 + 18_Block_object_dispose(va, 8) = v33;
          goto LABEL_245;
        case 2u:
          *(_WORD *)(a1 + 192) |= 0x1000u;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7LL || v36 + 8 > *((void *)this + 2)) {
            goto LABEL_242;
          }
          *(void *)(a1 + 176) = *(void *)(*(void *)this + v36);
          goto LABEL_244;
        case 3u:
          *(_WORD *)(a1 + 192) |= 0x40u;
          unint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFF7LL || v37 + 8 > *((void *)this + 2)) {
            goto LABEL_242;
          }
          *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(*(void *)this + v37);
          goto LABEL_244;
        case 4u:
          if ((_DWORD)v27 != 2)
          {
            uint64_t v111 = *(char **)(a1 + 40);
            unint64_t v110 = *(void *)(a1 + 48);
            if ((unint64_t)v111 >= v110)
            {
              unint64_t v125 = (char *)*v13;
              unint64_t v126 = (v111 - (_BYTE *)*v13) >> 3;
              unint64_t v127 = v126 + 1;
              if ((unint64_t)(v126 + 1) >> 61) {
LABEL_255:
              }
                sub_100007008();
              char v128 = v110 - (void)v125;
              if (v128 >> 2 > v127) {
                unint64_t v127 = v128 >> 2;
              }
              else {
                char v129 = v127;
              }
              if (v129)
              {
                unsigned int v130 = (char *)sub_1000071BC(v14, v129);
                unint64_t v125 = *(char **)(a1 + 32);
                uint64_t v111 = *(char **)(a1 + 40);
              }

              else
              {
                unsigned int v130 = 0LL;
              }

              unint64_t v143 = &v130[8 * v126];
              *(void *)unint64_t v143 = 0LL;
              char v112 = v143 + 8;
              while (v111 != v125)
              {
                uint64_t v144 = *((void *)v111 - 1);
                v111 -= 8;
                *((void *)v143 - 1) = v144;
                v143 -= 8;
              }

              *(void *)(a1 + 32) = v143;
              *(void *)(a1 + 40) = v112;
              *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v130[8 * v129];
              if (v125) {
                operator delete(v125);
              }
            }

            else
            {
              *(void *)uint64_t v111 = 0LL;
              char v112 = v111 + 8;
            }

            *(void *)(a1 + 40) = v112;
            goto LABEL_240;
          }

          if ((PB::Reader::placeMark(this, v153, v27, a4) & 1) != 0) {
            return 0LL;
          }
          int v38 = *((void *)this + 1);
          BOOL v39 = *((void *)this + 2);
          while (v38 < v39 && !*((_BYTE *)this + 24))
          {
            unint64_t v41 = *(char **)(a1 + 40);
            unint64_t v40 = *(void *)(a1 + 48);
            if ((unint64_t)v41 >= v40)
            {
              unint64_t v43 = (char *)*v13;
              unint64_t v44 = (v41 - (_BYTE *)*v13) >> 3;
              unint64_t v45 = v44 + 1;
              uint64_t v46 = v40 - (void)v43;
              if (v46 >> 2 > v45) {
                unint64_t v45 = v46 >> 2;
              }
              else {
                uint64_t v47 = v45;
              }
              if (v47)
              {
                unint64_t v48 = (char *)sub_1000071BC(v14, v47);
                unint64_t v43 = *(char **)(a1 + 32);
                unint64_t v41 = *(char **)(a1 + 40);
              }

              else
              {
                unint64_t v48 = 0LL;
              }

              uint64_t v49 = &v48[8 * v44];
              *(void *)uint64_t v49 = 0LL;
              unint64_t v42 = v49 + 8;
              while (v41 != v43)
              {
                unint64_t v50 = *((void *)v41 - 1);
                v41 -= 8;
                *((void *)v49 - 1) = v50;
                v49 -= 8;
              }

              *(void *)(a1 + 32) = v49;
              *(void *)(a1 + 40) = v42;
              *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v48[8 * v47];
              if (v43) {
                operator delete(v43);
              }
            }

            else
            {
              *(void *)unint64_t v41 = 0LL;
              unint64_t v42 = v41 + 8;
            }

            *(void *)(a1 + 40) = v42;
            unint64_t v51 = *((void *)this + 1);
            if (v51 > 0xFFFFFFFFFFFFFFF7LL || v51 + 8 > *((void *)this + 2)) {
              goto LABEL_181;
            }
            *(v42 - 1) = *(void *)(*(void *)this + v51);
            BOOL v39 = *((void *)this + 2);
            int v38 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v38;
          }

          goto LABEL_182;
        case 5u:
          if ((_DWORD)v27 != 2)
          {
            uint64_t v114 = *(char **)(a1 + 16);
            unsigned int v113 = *(void *)(a1 + 24);
            if ((unint64_t)v114 >= v113)
            {
              unint64_t v131 = (char *)*v11;
              char v132 = (v114 - (_BYTE *)*v11) >> 3;
              char v133 = v132 + 1;
              if ((unint64_t)(v132 + 1) >> 61) {
LABEL_256:
              }
                sub_100007008();
              unsigned int v134 = v113 - (void)v131;
              if (v134 >> 2 > v133) {
                char v133 = v134 >> 2;
              }
              else {
                unint64_t v135 = v133;
              }
              if (v135)
              {
                char v136 = (char *)sub_1000071BC(v12, v135);
                unint64_t v131 = *(char **)(a1 + 8);
                uint64_t v114 = *(char **)(a1 + 16);
              }

              else
              {
                char v136 = 0LL;
              }

              unint64_t v145 = &v136[8 * v132];
              *(void *)unint64_t v145 = 0LL;
              char v112 = v145 + 8;
              while (v114 != v131)
              {
                uint64_t v146 = *((void *)v114 - 1);
                v114 -= 8;
                *((void *)v145 - 1) = v146;
                v145 -= 8;
              }

              *(void *)(a1 + _Block_object_dispose(va, 8) = v145;
              *(void *)(a1 + 16) = v112;
              *(void *)(a1 + 24) = &v136[8 * v135];
              if (v131) {
                operator delete(v131);
              }
            }

            else
            {
              *(void *)uint64_t v114 = 0LL;
              char v112 = v114 + 8;
            }

            *(void *)(a1 + 16) = v112;
            goto LABEL_240;
          }

          if ((PB::Reader::placeMark(this, v153, v27, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v52 = *((void *)this + 1);
          uint64_t v53 = *((void *)this + 2);
          while (v52 < v53 && !*((_BYTE *)this + 24))
          {
            unint64_t v55 = *(char **)(a1 + 16);
            unint64_t v54 = *(void *)(a1 + 24);
            if ((unint64_t)v55 >= v54)
            {
              unint64_t v57 = (char *)*v11;
              unint64_t v58 = (v55 - (_BYTE *)*v11) >> 3;
              char v59 = v58 + 1;
              unsigned int v60 = v54 - (void)v57;
              if (v60 >> 2 > v59) {
                char v59 = v60 >> 2;
              }
              else {
                uint64_t v61 = v59;
              }
              if (v61)
              {
                unint64_t v62 = (char *)sub_1000071BC(v12, v61);
                unint64_t v57 = *(char **)(a1 + 8);
                unint64_t v55 = *(char **)(a1 + 16);
              }

              else
              {
                unint64_t v62 = 0LL;
              }

              uint64_t v63 = &v62[8 * v58];
              *(void *)uint64_t v63 = 0LL;
              unint64_t v56 = v63 + 8;
              while (v55 != v57)
              {
                unint64_t v64 = *((void *)v55 - 1);
                v55 -= 8;
                *((void *)v63 - 1) = v64;
                v63 -= 8;
              }

              *(void *)(a1 + _Block_object_dispose(va, 8) = v63;
              *(void *)(a1 + 16) = v56;
              *(void *)(a1 + 24) = &v62[8 * v61];
              if (v57) {
                operator delete(v57);
              }
            }

            else
            {
              *(void *)unint64_t v55 = 0LL;
              unint64_t v56 = v55 + 8;
            }

            *(void *)(a1 + 16) = v56;
            unint64_t v65 = *((void *)this + 1);
            if (v65 > 0xFFFFFFFFFFFFFFF7LL || v65 + 8 > *((void *)this + 2)) {
              goto LABEL_181;
            }
            *(v56 - 1) = *(void *)(*(void *)this + v65);
            uint64_t v53 = *((void *)this + 2);
            uint64_t v52 = *((void *)this + 1) + 8LL;
            *((void *)this + 1) = v52;
          }

          goto LABEL_182;
        case 6u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v153, v27, a4) & 1) != 0) {
              return 0LL;
            }
            unsigned int v66 = *((void *)this + 1);
            int v67 = *((void *)this + 2);
            while (v66 < v67 && !*((_BYTE *)this + 24))
            {
              unint64_t v69 = *(char **)(a1 + 64);
              unint64_t v68 = *(void *)(a1 + 72);
              if ((unint64_t)v69 >= v68)
              {
                unint64_t v71 = (char *)*v10;
                unint64_t v72 = (v69 - (_BYTE *)*v10) >> 3;
                unint64_t v73 = v72 + 1;
                char v74 = v68 - (void)v71;
                if (v74 >> 2 > v73) {
                  unint64_t v73 = v74 >> 2;
                }
                else {
                  uint64_t v75 = v73;
                }
                if (v75)
                {
                  unint64_t v76 = (char *)sub_1000071BC(v152, v75);
                  unint64_t v71 = *(char **)(a1 + 56);
                  unint64_t v69 = *(char **)(a1 + 64);
                }

                else
                {
                  unint64_t v76 = 0LL;
                }

                uint64_t v77 = &v76[8 * v72];
                *(void *)uint64_t v77 = 0LL;
                unint64_t v70 = v77 + 8;
                while (v69 != v71)
                {
                  unint64_t v78 = *((void *)v69 - 1);
                  v69 -= 8;
                  *((void *)v77 - 1) = v78;
                  v77 -= 8;
                }

                *(void *)(a1 + 56) = v77;
                *(void *)(a1 + 64) = v70;
                *(void *)(a1 + 72) = &v76[8 * v75];
                if (v71) {
                  operator delete(v71);
                }
              }

              else
              {
                *(void *)unint64_t v69 = 0LL;
                unint64_t v70 = v69 + 8;
              }

              *(void *)(a1 + 64) = v70;
              unint64_t v79 = *((void *)this + 1);
              if (v79 > 0xFFFFFFFFFFFFFFF7LL || v79 + 8 > *((void *)this + 2))
              {
LABEL_181:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v70 - 1) = *(void *)(*(void *)this + v79);
              int v67 = *((void *)this + 2);
              unsigned int v66 = *((void *)this + 1) + 8LL;
              *((void *)this + 1) = v66;
            }

LABEL_252:
          unint64_t v4 = *((void *)this + 1);
          unint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 7u:
          *(_WORD *)(a1 + 120) |= 0x80u;
          unint64_t v83 = *((void *)this + 1);
          if (v83 >= *((void *)this + 2))
          {
            BOOL v86 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v84 = v83 + 1;
            int v85 = *(unsigned __int8 *)(*(void *)this + v83);
            *((void *)this + 1) = v84;
            BOOL v86 = v85 != 0;
          }

          *(_BYTE *)(a1 + 116) = v86;
          goto LABEL_252;
        case 8u:
          *(_WORD *)(a1 + 120) |= 0x100u;
          unint64_t v87 = *((void *)this + 1);
          if (v87 >= *((void *)this + 2))
          {
            BOOL v90 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v88 = v87 + 1;
            int v89 = *(unsigned __int8 *)(*(void *)this + v87);
            *((void *)this + 1) = v88;
            BOOL v90 = v89 != 0;
          }

          *(_BYTE *)(a1 + 117) = v90;
          goto LABEL_252;
        case 9u:
          *(_WORD *)(a1 + 120) |= 4u;
          unint64_t v91 = *((void *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((void *)this + 2)) {
            goto LABEL_248;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v91);
          goto LABEL_250;
        case 0xAu:
          *(_WORD *)(a1 + 120) |= 8u;
          unint64_t v92 = *((void *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((void *)this + 2)) {
            goto LABEL_248;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v92);
          goto LABEL_250;
        case 0xBu:
          *(_WORD *)(a1 + 120) |= 0x40u;
          unint64_t v93 = *((void *)this + 1);
          unint64_t v94 = *((void *)this + 2);
          uint64_t v95 = *(void *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5LL && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0LL;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)this + 1) = v93 + 1;
              char v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_215;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v21 = v97++ > 8;
            }

            while (!v21);
LABEL_165:
            LODWORD(v9_Block_object_dispose(va, 8) = 0;
            goto LABEL_215;
          }

          char v129 = 0;
          unsigned int v130 = 0;
          uint64_t v98 = 0LL;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)this + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v9_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v131 = v93 + 1;
              char v132 = *(_BYTE *)(v95 + v93);
              *((void *)this + 1) = v131;
              v98 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                unint64_t v93 = v131;
                BOOL v21 = v130++ > 8;
                if (v21) {
                  goto LABEL_165;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v9_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 152) = v55;
          goto LABEL_296;
        case 0xEu:
          *(_WORD *)(a1 + 168) |= 0x80u;
          unint64_t v109 = *((void *)this + 1);
          unint64_t v110 = *((void *)this + 2);
          uint64_t v111 = *(void *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5LL && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0LL;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)this + 1) = v109 + 1;
              char v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_261;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v21 = v113++ > 8;
            }

            while (!v21);
LABEL_211:
            LODWORD(v114) = 0;
            goto LABEL_261;
          }

          uint64_t v150 = 0;
          unint64_t v151 = 0;
          uint64_t v114 = 0LL;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)this + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v152 = v109 + 1;
              unsigned int v153 = *(_BYTE *)(v111 + v109);
              *((void *)this + 1) = v152;
              v114 |= (unint64_t)(v153 & 0x7F) << v150;
              if (v153 < 0)
              {
                v150 += 7;
                unint64_t v109 = v152;
                BOOL v21 = v151++ > 8;
                if (v21) {
                  goto LABEL_211;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v114) = 0;
              }
            }

            break;
          }

LABEL_215:
          *(_DWORD *)(a1 + 112) = v98;
          goto LABEL_252;
        case 0xCu:
          *(_WORD *)(a1 + 120) |= 0x20u;
          unint64_t v101 = *((void *)this + 1);
          unint64_t v102 = *((void *)this + 2);
          uint64_t v103 = *(void *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5LL && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0LL;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)this + 1) = v101 + 1;
              char v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_218;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v21 = v105++ > 8;
            }

            while (!v21);
LABEL_172:
            LODWORD(v106) = 0;
            goto LABEL_218;
          }

          char v133 = 0;
          unsigned int v134 = 0;
          uint64_t v106 = 0LL;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)this + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v135 = v101 + 1;
              char v136 = *(_BYTE *)(v103 + v101);
              *((void *)this + 1) = v135;
              v106 |= (unint64_t)(v136 & 0x7F) << v133;
              if (v136 < 0)
              {
                v133 += 7;
                unint64_t v101 = v135;
                BOOL v21 = v134++ > 8;
                if (v21) {
                  goto LABEL_172;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v106) = 0;
              }
            }

            break;
          }

  unint64_t v92 = *(void *)(a2 + 40);
  *v2 |= 0x10uLL;
  *(void *)(a1 + 40) = v92;
  __int16 v10 = *v3;
  if ((*v3 & 0x2000000000000LL) == 0)
  {
LABEL_111:
    if ((v10 & 0x2000) == 0) {
      return result;
    }
LABEL_217:
    double result = *(float *)(a2 + 92);
    *v2 |= 0x2000uLL;
    *(float *)(a1 + 92) = result;
    return result;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0x522u);
  uint64_t v7 = *v4;
  if ((*v4 & 0x2000000000000LL) == 0)
  {
LABEL_111:
    if ((v7 & 0x2000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 92), 0x524u);
  }

          *(_DWORD *)(a1 + 184) = v86;
          goto LABEL_245;
        case 9u:
          *(_WORD *)(a1 + 192) |= 4u;
          int v89 = *((void *)this + 1);
          if (v89 > 0xFFFFFFFFFFFFFFF7LL || v89 + 8 > *((void *)this + 2)) {
            goto LABEL_242;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v89);
          goto LABEL_244;
        case 0xAu:
          *(_WORD *)(a1 + 192) |= 0x10u;
          BOOL v90 = *((void *)this + 1);
          if (v90 > 0xFFFFFFFFFFFFFFF7LL || v90 + 8 > *((void *)this + 2)) {
            goto LABEL_242;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v90);
          goto LABEL_244;
        case 0xBu:
          *(_WORD *)(a1 + 192) |= 1u;
          unint64_t v91 = *((void *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFF7LL || v91 + 8 > *((void *)this + 2)) {
            goto LABEL_242;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v91);
          goto LABEL_244;
        case 0xCu:
          *(_WORD *)(a1 + 192) |= 8u;
          unint64_t v92 = *((void *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFF7LL || v92 + 8 > *((void *)this + 2)) {
            goto LABEL_242;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v92);
          goto LABEL_244;
        case 0xDu:
          *(_WORD *)(a1 + 192) |= 0x20u;
          unint64_t v93 = *((void *)this + 1);
          if (v93 > 0xFFFFFFFFFFFFFFF7LL || v93 + 8 > *((void *)this + 2)) {
            goto LABEL_242;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v93);
          goto LABEL_244;
        case 0xEu:
          *(_WORD *)(a1 + 192) |= 0x800u;
          unint64_t v94 = *((void *)this + 1);
          uint64_t v95 = *((void *)this + 2);
          char v96 = *(void *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5LL && v94 + 10 <= v95)
          {
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            unint64_t v99 = 0LL;
            do
            {
              char v100 = v94 + 1;
              *((void *)this + 1) = v94 + 1;
              unint64_t v101 = *(_BYTE *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0) {
                goto LABEL_218;
              }
              v97 += 7;
              unint64_t v94 = v100;
              BOOL v21 = v98++ > 8;
            }

            while (!v21);
LABEL_180:
            unint64_t v99 = 0LL;
            goto LABEL_218;
          }

          unint64_t v121 = 0;
          uint64_t v122 = 0;
          unint64_t v99 = 0LL;
          if (v95 <= v94) {
            uint64_t v95 = *((void *)this + 1);
          }
          while (2)
          {
            if (v95 == v94)
            {
              unint64_t v99 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v123 = v94 + 1;
              unint64_t v124 = *(_BYTE *)(v96 + v94);
              *((void *)this + 1) = v123;
              v99 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                unint64_t v94 = v123;
                BOOL v21 = v122++ > 8;
                if (v21) {
                  goto LABEL_180;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                unint64_t v99 = 0LL;
              }
            }

            break;
          }

uint64_t sub_1010A8544(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 120);
  if ((v4 & 2) == 0)
  {
    if ((*(_WORD *)(result + 120) & 0x200) == 0) {
      goto LABEL_3;
    }
LABEL_23:
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 118), 2u);
    if ((*(_WORD *)(v3 + 120) & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(result + 88), 1u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x200) != 0) {
    goto LABEL_23;
  }
LABEL_3:
  if ((v4 & 1) != 0) {
LABEL_4:
  }
    double result = PB::Writer::write(this, *(double *)(v3 + 80), 3u);
LABEL_5:
  unint64_t v5 = *(double **)(v3 + 8);
  int v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7, 4u);
  }

  double v8 = *(float **)(v3 + 56);
  __int16 v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    float v10 = *v8++;
    double result = PB::Writer::write(this, v10, 5u);
  }

  int v11 = *(float **)(v3 + 32);
  uint64_t v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    double result = PB::Writer::write(this, v13, 6u);
  }

  __int16 v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x80) != 0)
  {
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 116), 7u);
    __int16 v14 = *(_WORD *)(v3 + 120);
    if ((v14 & 0x100) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0) {
        goto LABEL_17;
      }
      goto LABEL_27;
    }
  }

  else if ((*(_WORD *)(v3 + 120) & 0x100) == 0)
  {
    goto LABEL_16;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 117), 8u);
  __int16 v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }

double sub_1010A86EC(uint64_t a1)
{
  *(void *)a1 = &off_101899758;
  *(_DWORD *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1010A8710(PB::Base *this)
{
  *(void *)this = &off_101899758;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1010A8760(PB::Base *a1)
{
}

uint64_t sub_1010A8774(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899758;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  __int16 v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  int v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 8) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 80);
    int v6 = 8;
    *(_DWORD *)(a1 + 144) = 8;
    *(void *)(a1 + 80) = v7;
    int v5 = *(_DWORD *)(a2 + 144);
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v6 = 0;
  if ((v5 & 0x20) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 92);
    v6 |= 0x20u;
    *(_DWORD *)(a1 + 144) = v6;
    *(_DWORD *)(a1 + 92) = v8;
    int v5 = *(_DWORD *)(a2 + 144);
  }

uint64_t sub_1010A89F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 144);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "combinedUnc", *(float *)(a1 + 88));
    int v5 = *(_DWORD *)(a1 + 144);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }

  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "combinedX", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 144);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

BOOL sub_1010A8CCC(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    float v12 = (void **)(a1 + 32);
    uint64_t v13 = a1 + 48;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010A9A14(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 144);
  if ((v4 & 8) != 0)
  {
    double result = PB::Writer::writeVarInt(this, *(void *)(result + 80), 1u);
    int v4 = *(_DWORD *)(v3 + 144);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 92), 2u);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }

uint64_t sub_1010A9C74(uint64_t result)
{
  *(void *)double result = &off_101899790;
  *(_DWORD *)(result + 10_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010A9C8C(PB::Base *a1)
{
}

float sub_1010A9CA0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899790;
  *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x800000) != 0)
  {
    char v4 = *(_BYTE *)(a2 + 100);
    int v3 = 0x800000;
    *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = 0x800000;
    *(_BYTE *)(a1 + 100) = v4;
    int v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 84);
    v3 |= 0x80000u;
    *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(a1 + 84) = v5;
    int v2 = *(_DWORD *)(a2 + 108);
  }

uint64_t sub_1010A9FCC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configDelaySpreadFpThreshold", *(float *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 108);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "configFeatureSamples", *(_DWORD *)(a1 + 12));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }

uint64_t sub_1010AA37C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010AAE48(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 108);
  if ((v4 & 0x800000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(result + 100), 1u);
    int v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }

  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 2u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }

uint64_t sub_1010AB17C(uint64_t result)
{
  *(void *)uint64_t result = &off_1018997C8;
  *(_DWORD *)(result + 152) = 0;
  return result;
}

void sub_1010AB194(PB::Base *a1)
{
}

float sub_1010AB1A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018997C8;
  *(_DWORD *)(a1 + 152) = 0;
  int v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x20000000) != 0)
  {
    char v4 = *(_BYTE *)(a2 + 148);
    int v3 = 0x20000000;
    *(_DWORD *)(a1 + 152) = 0x20000000;
    *(_BYTE *)(a1 + 14_Block_object_dispose(va, 8) = v4;
    int v2 = *(_DWORD *)(a2 + 152);
    if ((v2 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x200000) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 116);
    v3 |= 0x200000u;
    *(_DWORD *)(a1 + 152) = v3;
    *(float *)(a1 + 116) = result;
    int v2 = *(_DWORD *)(a2 + 152);
  }

uint64_t sub_1010AB50C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "configMaximumAccelBaroTimeDifferenceThreshold", *(float *)(a1 + 56));
    int v5 = *(_DWORD *)(a1 + 152);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }

  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "configMinimumAccelNormInWindowThreshold", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }

uint64_t sub_1010AB8FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

LABEL_250:
          *(_DWORD *)(a1 + 112) = v41;
          goto LABEL_238;
        case 7u:
          *(_DWORD *)(a1 + 152) |= 0x10000u;
          unint64_t v44 = *((void *)this + 1);
          unint64_t v45 = *((void *)this + 2);
          uint64_t v46 = *(void *)this;
          if (v44 <= 0xFFFFFFFFFFFFFFF5LL && v44 + 10 <= v45)
          {
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0LL;
            do
            {
              unint64_t v50 = v44 + 1;
              *((void *)this + 1) = v44 + 1;
              char v51 = *(_BYTE *)(v46 + v44);
              v49 |= (unint64_t)(v51 & 0x7F) << v47;
              if ((v51 & 0x80) == 0) {
                goto LABEL_254;
              }
              v47 += 7;
              unint64_t v44 = v50;
              BOOL v14 = v48++ > 8;
            }

            while (!v14);
LABEL_179:
            LODWORD(v49) = 0;
            goto LABEL_254;
          }

          char v139 = 0;
          unsigned int v140 = 0;
          uint64_t v49 = 0LL;
          if (v45 <= v44) {
            unint64_t v45 = *((void *)this + 1);
          }
          while (2)
          {
            if (v45 == v44)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v141 = v44 + 1;
              char v142 = *(_BYTE *)(v46 + v44);
              *((void *)this + 1) = v141;
              v49 |= (unint64_t)(v142 & 0x7F) << v139;
              if (v142 < 0)
              {
                v139 += 7;
                unint64_t v44 = v141;
                BOOL v14 = v140++ > 8;
                if (v14) {
                  goto LABEL_179;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v49) = 0;
              }
            }

            break;
          }

          *(void *)(a1 + 12_Block_object_dispose(va, 8) = v98;
          goto LABEL_294;
        case 8u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v195, v26, a4) & 1) != 0) {
              return 0LL;
            }
            unint64_t v101 = *((void *)this + 1);
            unint64_t v102 = *((void *)this + 2);
            while (v101 < v102 && !*((_BYTE *)this + 24))
            {
              uint64_t v104 = *(char **)(a1 + 112);
              unint64_t v103 = *(void *)(a1 + 120);
              if ((unint64_t)v104 >= v103)
              {
                unsigned int v106 = (char *)*v194;
                uint64_t v107 = (v104 - (_BYTE *)*v194) >> 2;
                unint64_t v108 = v107 + 1;
                char v109 = v103 - (void)v106;
                if (v109 >> 1 > v108) {
                  unint64_t v108 = v109 >> 1;
                }
                else {
                  unint64_t v110 = v108;
                }
                if (v110)
                {
                  unint64_t v111 = (char *)sub_10000956C(v193, v110);
                  unsigned int v106 = *(char **)(a1 + 104);
                  uint64_t v104 = *(char **)(a1 + 112);
                }

                else
                {
                  unint64_t v111 = 0LL;
                }

                unint64_t v112 = &v111[4 * v107];
                *(_DWORD *)unint64_t v112 = 0;
                char v105 = v112 + 4;
                while (v104 != v106)
                {
                  unint64_t v113 = *((_DWORD *)v104 - 1);
                  v104 -= 4;
                  *((_DWORD *)v112 - 1) = v113;
                  v112 -= 4;
                }

                *(void *)(a1 + 104) = v112;
                *(void *)(a1 + 112) = v105;
                *(void *)(a1 + 120) = &v111[4 * v110];
                if (v106) {
                  operator delete(v106);
                }
              }

              else
              {
                *(_DWORD *)uint64_t v104 = 0;
                char v105 = v104 + 4;
              }

              *(void *)(a1 + 112) = v105;
              unint64_t v114 = *((void *)this + 1);
              if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)this + 2))
              {
LABEL_169:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v105 - 1) = *(_DWORD *)(*(void *)this + v114);
              unint64_t v102 = *((void *)this + 2);
              unint64_t v101 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v101;
            }

LABEL_270:
          *(void *)(a1 + _Block_object_dispose(va, 8) = v90;
          goto LABEL_238;
        case 0x15u:
          *(_DWORD *)(a1 + 152) |= 2u;
          unint64_t v93 = *((void *)this + 1);
          unint64_t v94 = *((void *)this + 2);
          uint64_t v95 = *(void *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5LL && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0LL;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)this + 1) = v93 + 1;
              char v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_274;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }

            while (!v14);
LABEL_214:
            uint64_t v98 = 0LL;
            goto LABEL_274;
          }

          char v159 = 0;
          unsigned int v160 = 0;
          uint64_t v98 = 0LL;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)this + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              uint64_t v98 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v161 = v93 + 1;
              char v162 = *(_BYTE *)(v95 + v93);
              *((void *)this + 1) = v161;
              v98 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                unint64_t v93 = v161;
                BOOL v14 = v160++ > 8;
                if (v14) {
                  goto LABEL_214;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v98 = 0LL;
              }
            }

            break;
          }

              LODWORD(v153) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v153 = 0LL;
              while (1)
              {
                char v166 = v158 + 1;
                *((void *)this + 1) = v158 + 1;
                char v167 = *(_BYTE *)(v160 + v158);
                v153 |= (unint64_t)(v167 & 0x7F) << v161;
                if ((v167 & 0x80) == 0) {
                  break;
                }
                v161 += 7;
                char v158 = v166;
                char v47 = v162++ > 8;
                if (v47) {
                  goto LABEL_269;
                }
              }
            }

LABEL_274:
          *(void *)(a1 + 16) = v98;
          goto LABEL_238;
        case 0x16u:
          *(_DWORD *)(a1 + 152) |= 0x20000u;
          unint64_t v101 = *((void *)this + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v101);
          goto LABEL_237;
        case 0x17u:
          *(_DWORD *)(a1 + 152) |= 0x20u;
          unint64_t v102 = *((void *)this + 1);
          unint64_t v103 = *((void *)this + 2);
          uint64_t v104 = *(void *)this;
          if (v102 <= 0xFFFFFFFFFFFFFFF5LL && v102 + 10 <= v103)
          {
            char v105 = 0;
            unsigned int v106 = 0;
            uint64_t v107 = 0LL;
            do
            {
              unint64_t v108 = v102 + 1;
              *((void *)this + 1) = v102 + 1;
              char v109 = *(_BYTE *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0) {
                goto LABEL_278;
              }
              v105 += 7;
              unint64_t v102 = v108;
              BOOL v14 = v106++ > 8;
            }

            while (!v14);
LABEL_221:
            uint64_t v107 = 0LL;
            goto LABEL_278;
          }

          char v163 = 0;
          unsigned int v164 = 0;
          uint64_t v107 = 0LL;
          if (v103 <= v102) {
            unint64_t v103 = *((void *)this + 1);
          }
          while (2)
          {
            if (v103 == v102)
            {
              uint64_t v107 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v165 = v102 + 1;
              char v166 = *(_BYTE *)(v104 + v102);
              *((void *)this + 1) = v165;
              v107 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                unint64_t v102 = v165;
                BOOL v14 = v164++ > 8;
                if (v14) {
                  goto LABEL_221;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v107 = 0LL;
              }
            }

            break;
          }

          int v4 = *((void *)this + 1);
          int v5 = *((void *)this + 2);
          uint64_t v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 0xAu:
          *(_WORD *)(a1 + 104) |= 0x10u;
          unint64_t v85 = *((void *)this + 1);
          if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)this + 2)) {
            goto LABEL_157;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v85);
          goto LABEL_193;
        case 0xBu:
          *(_WORD *)(a1 + 104) |= 8u;
          char v109 = *((void *)this + 1);
          if (v109 <= 0xFFFFFFFFFFFFFFFBLL && v109 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v109);
LABEL_193:
            *((void *)this + 1) += 4LL;
          }

          else
          {
LABEL_157:
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_274;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_274;
      }
    }

    unint64_t v20 = 0;
    unint64_t v21 = 0;
    unint64_t v17 = 0LL;
    if (v4 > v5) {
      int v5 = v4;
    }
    while (v5 != v4)
    {
      int v22 = v4 + 1;
      BOOL v23 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v22;
      v17 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      int v4 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

LABEL_278:
          *(void *)(a1 + 4_Block_object_dispose(va, 8) = v107;
          goto LABEL_238;
        case 0x18u:
          *(_DWORD *)(a1 + 152) |= 0x2000000u;
          unint64_t v110 = *((void *)this + 1);
          if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v110);
          goto LABEL_237;
        case 0x19u:
          *(_DWORD *)(a1 + 152) |= 0x40000u;
          unint64_t v111 = *((void *)this + 1);
          if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v111);
          goto LABEL_237;
        case 0x1Au:
          *(_DWORD *)(a1 + 152) |= 0x100u;
          unint64_t v112 = *((void *)this + 1);
          if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v112);
          goto LABEL_237;
        case 0x1Bu:
          *(_DWORD *)(a1 + 152) |= 0x80000u;
          unint64_t v113 = *((void *)this + 1);
          unint64_t v114 = *((void *)this + 2);
          uint64_t v115 = *(void *)this;
          if (v113 <= 0xFFFFFFFFFFFFFFF5LL && v113 + 10 <= v114)
          {
            char v116 = 0;
            unsigned int v117 = 0;
            uint64_t v118 = 0LL;
            do
            {
              unint64_t v119 = v113 + 1;
              *((void *)this + 1) = v113 + 1;
              char v120 = *(_BYTE *)(v115 + v113);
              v118 |= (unint64_t)(v120 & 0x7F) << v116;
              if ((v120 & 0x80) == 0) {
                goto LABEL_282;
              }
              v116 += 7;
              unint64_t v113 = v119;
              BOOL v14 = v117++ > 8;
            }

            while (!v14);
LABEL_228:
            LODWORD(v11_Block_object_dispose(va, 8) = 0;
            goto LABEL_282;
          }

          char v167 = 0;
          unsigned int v168 = 0;
          uint64_t v118 = 0LL;
          if (v114 <= v113) {
            unint64_t v114 = *((void *)this + 1);
          }
          while (2)
          {
            if (v114 == v113)
            {
              LODWORD(v11_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v169 = v113 + 1;
              char v170 = *(_BYTE *)(v115 + v113);
              *((void *)this + 1) = v169;
              v118 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                unint64_t v113 = v169;
                BOOL v14 = v168++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v11_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

LABEL_282:
          *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = v118;
          goto LABEL_238;
        case 0x1Cu:
          *(_DWORD *)(a1 + 152) |= 0x40u;
          unint64_t v121 = *((void *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v121);
          goto LABEL_237;
        case 0x1Du:
          *(_DWORD *)(a1 + 152) |= 8u;
          unint64_t v122 = *((void *)this + 1);
          unint64_t v123 = *((void *)this + 2);
          uint64_t v124 = *(void *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5LL && v122 + 10 <= v123)
          {
            char v125 = 0;
            unsigned int v126 = 0;
            uint64_t v127 = 0LL;
            do
            {
              unint64_t v128 = v122 + 1;
              *((void *)this + 1) = v122 + 1;
              char v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0) {
                goto LABEL_286;
              }
              v125 += 7;
              unint64_t v122 = v128;
              BOOL v14 = v126++ > 8;
            }

            while (!v14);
LABEL_235:
            uint64_t v127 = 0LL;
            goto LABEL_286;
          }

          char v171 = 0;
          unsigned int v172 = 0;
          uint64_t v127 = 0LL;
          if (v123 <= v122) {
            unint64_t v123 = *((void *)this + 1);
          }
          break;
        case 0x1Eu:
          *(_DWORD *)(a1 + 152) |= 0x80u;
          unint64_t v130 = *((void *)this + 1);
          if (v130 <= 0xFFFFFFFFFFFFFFFBLL && v130 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v130);
LABEL_237:
            *((void *)this + 1) += 4LL;
          }

          else
          {
LABEL_156:
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_238;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_238;
      }

      while (1)
      {
        if (v123 == v122)
        {
          uint64_t v127 = 0LL;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_286;
        }

        unint64_t v173 = v122 + 1;
        char v174 = *(_BYTE *)(v124 + v122);
        *((void *)this + 1) = v173;
        v127 |= (unint64_t)(v174 & 0x7F) << v171;
        if ((v174 & 0x80) == 0) {
          break;
        }
        v171 += 7;
        unint64_t v122 = v173;
        BOOL v14 = v172++ > 8;
        if (v14) {
          goto LABEL_235;
        }
      }

      if (*((_BYTE *)this + 24)) {
        uint64_t v127 = 0LL;
      }
LABEL_286:
      *(void *)(a1 + 32) = v127;
LABEL_238:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }

        int v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

uint64_t sub_1010AC8A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 152);
  if ((v4 & 0x20000000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(result + 148), 1u);
    int v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x200000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }

  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 2u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }

uint64_t sub_1010ACC10(uint64_t result)
{
  *(void *)uint64_t result = &off_101899800;
  *(_DWORD *)(result + 132) = 0;
  return result;
}

void sub_1010ACC28(PB::Base *a1)
{
}

uint64_t sub_1010ACC3C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899800;
  *(_DWORD *)(result + 132) = 0;
  int v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x4000000) != 0)
  {
    char v4 = *(_BYTE *)(a2 + 126);
    int v3 = 0x4000000;
    *(_DWORD *)(result + 132) = 0x4000000;
    *(_BYTE *)(result + 126) = v4;
    int v2 = *(_DWORD *)(a2 + 132);
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 127);
    v3 |= 0x8000000u;
    *(_DWORD *)(result + 132) = v3;
    *(_BYTE *)(result + 127) = v5;
    int v2 = *(_DWORD *)(a2 + 132);
  }

uint64_t sub_1010ACF84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "configSuddenTransitionDurationThreshold", *(float *)(a1 + 48));
    int v5 = *(_DWORD *)(a1 + 132);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }

  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "configTransitionEndSpeedThreshold", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }

uint64_t sub_1010AD354(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010AE0D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 132);
  if ((v4 & 0x4000000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(result + 126), 1u);
    int v4 = *(_DWORD *)(v3 + 132);
    if ((v4 & 0x8000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }

  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 127), 2u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }

uint64_t sub_1010AE424(uint64_t result)
{
  *(void *)uint64_t result = &off_101899838;
  *(_DWORD *)(result + 324) = 0;
  *(void *)(result + 316) = 0LL;
  return result;
}

void sub_1010AE444(PB::Base *a1)
{
}

float sub_1010AE458(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899838;
  unint64_t v2 = (uint64_t *)(a1 + 316);
  *(_DWORD *)(a1 + 324) = 0;
  *(void *)(a1 + 316) = 0LL;
  uint64_t v3 = (uint64_t *)(a2 + 316);
  char v4 = *(_BYTE *)(a2 + 324);
  if ((v4 & 8) != 0)
  {
    uint64_t v5 = 0LL;
    char v8 = *(_BYTE *)(a2 + 312);
    *unint64_t v2 = 0LL;
    char v6 = 8;
    *(_BYTE *)(a1 + 324) = 8;
    *(_BYTE *)(a1 + 312) = v8;
    uint64_t v7 = *v3;
    char v4 = *(_BYTE *)(a2 + 324);
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v5 = 0LL;
  char v6 = 0;
  uint64_t v7 = *v3;
  if ((*(_BYTE *)(a2 + 324) & 2) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 304);
    v6 |= 2u;
    *unint64_t v2 = 0LL;
    *(_BYTE *)(a1 + 324) = v6;
    *(float *)(a1 + 304) = result;
    uint64_t v7 = *v3;
    char v4 = *(_BYTE *)(a2 + 324);
  }

uint64_t sub_1010AED90(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 316);
  uint64_t v6 = *(void *)(a1 + 316);
  if ((v6 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "arclengthXYBiggestImpact", *(float *)(a1 + 80));
    uint64_t v6 = *v5;
    char v7 = *(_BYTE *)(a1 + 324);
    if ((*v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v7 = *(_BYTE *)(a1 + 324);
  if ((v6 & 0x400) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "arclengthXYOverEpoch", *(float *)(a1 + 84));
    uint64_t v6 = *v5;
    char v7 = *(_BYTE *)(a1 + 324);
  }

uint64_t sub_1010AF74C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = a1 + 316;
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }

LABEL_344:
            *(void *)(a1 + 4_Block_object_dispose(va, 8) = v34;
            goto LABEL_336;
          case 5:
            *(void *)v8 |= 0x40uLL;
            unint64_t v37 = *((void *)this + 1);
            unint64_t v38 = *((void *)this + 2);
            uint64_t v39 = *(void *)this;
            if (v37 <= 0xFFFFFFFFFFFFFFF5LL && v37 + 10 <= v38)
            {
              char v40 = 0;
              unsigned int v41 = 0;
              uint64_t v42 = 0LL;
              do
              {
                unint64_t v43 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                char v44 = *(_BYTE *)(v39 + v37);
                v42 |= (unint64_t)(v44 & 0x7F) << v40;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_348;
                }
                v40 += 7;
                unint64_t v37 = v43;
                BOOL v15 = v41++ > 8;
              }

              while (!v15);
LABEL_283:
              uint64_t v42 = 0LL;
              goto LABEL_348;
            }

            char v161 = 0;
            unsigned int v162 = 0;
            uint64_t v42 = 0LL;
            if (v38 <= v37) {
              unint64_t v38 = *((void *)this + 1);
            }
            while (2)
            {
              if (v38 == v37)
              {
                uint64_t v42 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v163 = v37 + 1;
                char v164 = *(_BYTE *)(v39 + v37);
                *((void *)this + 1) = v163;
                v42 |= (unint64_t)(v164 & 0x7F) << v161;
                if (v164 < 0)
                {
                  v161 += 7;
                  unint64_t v37 = v163;
                  BOOL v15 = v162++ > 8;
                  if (v15) {
                    goto LABEL_283;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v42 = 0LL;
                }
              }

              break;
            }

LABEL_348:
            *(void *)(a1 + 56) = v42;
            goto LABEL_336;
          case 6:
            *(void *)v8 |= 1uLL;
            unint64_t v45 = *((void *)this + 1);
            unint64_t v46 = *((void *)this + 2);
            uint64_t v47 = *(void *)this;
            if (v45 <= 0xFFFFFFFFFFFFFFF5LL && v45 + 10 <= v46)
            {
              char v48 = 0;
              unsigned int v49 = 0;
              uint64_t v50 = 0LL;
              do
              {
                unint64_t v51 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v52 = *(_BYTE *)(v47 + v45);
                v50 |= (unint64_t)(v52 & 0x7F) << v48;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_352;
                }
                v48 += 7;
                unint64_t v45 = v51;
                BOOL v15 = v49++ > 8;
              }

              while (!v15);
LABEL_290:
              uint64_t v50 = 0LL;
              goto LABEL_352;
            }

            char v165 = 0;
            unsigned int v166 = 0;
            uint64_t v50 = 0LL;
            if (v46 <= v45) {
              unint64_t v46 = *((void *)this + 1);
            }
            while (2)
            {
              if (v46 == v45)
              {
                uint64_t v50 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v167 = v45 + 1;
                char v168 = *(_BYTE *)(v47 + v45);
                *((void *)this + 1) = v167;
                v50 |= (unint64_t)(v168 & 0x7F) << v165;
                if (v168 < 0)
                {
                  v165 += 7;
                  unint64_t v45 = v167;
                  BOOL v15 = v166++ > 8;
                  if (v15) {
                    goto LABEL_290;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v50 = 0LL;
                }
              }

              break;
            }

LABEL_352:
            *(void *)(a1 + _Block_object_dispose(va, 8) = v50;
            goto LABEL_336;
          case 7:
            *(void *)v8 |= 0x8000uLL;
            unint64_t v53 = *((void *)this + 1);
            if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2)) {
              goto LABEL_251;
            }
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v53);
            goto LABEL_335;
          case 8:
            *(void *)v8 |= 0x80uLL;
            unint64_t v54 = *((void *)this + 1);
            unint64_t v55 = *((void *)this + 2);
            uint64_t v56 = *(void *)this;
            if (v54 <= 0xFFFFFFFFFFFFFFF5LL && v54 + 10 <= v55)
            {
              char v57 = 0;
              unsigned int v58 = 0;
              uint64_t v59 = 0LL;
              do
              {
                unint64_t v60 = v54 + 1;
                *((void *)this + 1) = v54 + 1;
                char v61 = *(_BYTE *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0) {
                  goto LABEL_356;
                }
                v57 += 7;
                unint64_t v54 = v60;
                BOOL v15 = v58++ > 8;
              }

              while (!v15);
LABEL_297:
              uint64_t v59 = 0LL;
              goto LABEL_356;
            }

            char v169 = 0;
            unsigned int v170 = 0;
            uint64_t v59 = 0LL;
            if (v55 <= v54) {
              unint64_t v55 = *((void *)this + 1);
            }
            while (2)
            {
              if (v55 == v54)
              {
                uint64_t v59 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v171 = v54 + 1;
                char v172 = *(_BYTE *)(v56 + v54);
                *((void *)this + 1) = v171;
                v59 |= (unint64_t)(v172 & 0x7F) << v169;
                if (v172 < 0)
                {
                  v169 += 7;
                  unint64_t v54 = v171;
                  BOOL v15 = v170++ > 8;
                  if (v15) {
                    goto LABEL_297;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v59 = 0LL;
                }
              }

              break;
            }

      uint64_t v5 = *((void *)this + 1);
      uint64_t v6 = *((void *)this + 2);
      char v7 = *((unsigned __int8 *)this + 24);
      if (v5 >= v6 || v7 != 0) {
        return v7 == 0;
      }
    }

    unint64_t v21 = 0;
    unint64_t v22 = 0;
    unint64_t v18 = 0LL;
    if (v5 > v6) {
      uint64_t v6 = v5;
    }
    while (v6 != v5)
    {
      unint64_t v23 = v5 + 1;
      int v24 = *(_BYTE *)(v15 + v5);
      *((void *)this + 1) = v23;
      v18 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v5 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v18 = 0LL;
        goto LABEL_21;
      }
    }

    char v7 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v7 == 0;
}

LABEL_356:
            *(void *)(a1 + 64) = v59;
            goto LABEL_336;
          case 9:
            *(void *)v8 |= 0x100uLL;
            unint64_t v62 = *((void *)this + 1);
            unint64_t v63 = *((void *)this + 2);
            uint64_t v64 = *(void *)this;
            if (v62 <= 0xFFFFFFFFFFFFFFF5LL && v62 + 10 <= v63)
            {
              char v65 = 0;
              unsigned int v66 = 0;
              uint64_t v67 = 0LL;
              do
              {
                unint64_t v68 = v62 + 1;
                *((void *)this + 1) = v62 + 1;
                char v69 = *(_BYTE *)(v64 + v62);
                v67 |= (unint64_t)(v69 & 0x7F) << v65;
                if ((v69 & 0x80) == 0) {
                  goto LABEL_360;
                }
                v65 += 7;
                unint64_t v62 = v68;
                BOOL v15 = v66++ > 8;
              }

              while (!v15);
LABEL_304:
              uint64_t v67 = 0LL;
              goto LABEL_360;
            }

            char v173 = 0;
            unsigned int v174 = 0;
            uint64_t v67 = 0LL;
            if (v63 <= v62) {
              unint64_t v63 = *((void *)this + 1);
            }
            while (2)
            {
              if (v63 == v62)
              {
                uint64_t v67 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v175 = v62 + 1;
                char v176 = *(_BYTE *)(v64 + v62);
                *((void *)this + 1) = v175;
                v67 |= (unint64_t)(v176 & 0x7F) << v173;
                if (v176 < 0)
                {
                  v173 += 7;
                  unint64_t v62 = v175;
                  BOOL v15 = v174++ > 8;
                  if (v15) {
                    goto LABEL_304;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v67 = 0LL;
                }
              }

              break;
            }

LABEL_364:
            *(void *)(a1 + 32) = v120;
            goto LABEL_336;
          case 56:
            *(void *)v8 |= 0x10uLL;
            unint64_t v123 = *((void *)this + 1);
            unint64_t v124 = *((void *)this + 2);
            uint64_t v125 = *(void *)this;
            if (v123 <= 0xFFFFFFFFFFFFFFF5LL && v123 + 10 <= v124)
            {
              char v126 = 0;
              unsigned int v127 = 0;
              uint64_t v128 = 0LL;
              do
              {
                unint64_t v129 = v123 + 1;
                *((void *)this + 1) = v123 + 1;
                char v130 = *(_BYTE *)(v125 + v123);
                v128 |= (unint64_t)(v130 & 0x7F) << v126;
                if ((v130 & 0x80) == 0) {
                  goto LABEL_368;
                }
                v126 += 7;
                unint64_t v123 = v129;
                BOOL v15 = v127++ > 8;
              }

              while (!v15);
LABEL_318:
              uint64_t v128 = 0LL;
              goto LABEL_368;
            }

            char v181 = 0;
            unsigned int v182 = 0;
            uint64_t v128 = 0LL;
            if (v124 <= v123) {
              unint64_t v124 = *((void *)this + 1);
            }
            break;
          case 57:
            *(void *)v8 |= 0x1000000uLL;
            unint64_t v131 = *((void *)this + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)this + 2)) {
              goto LABEL_251;
            }
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v131);
            goto LABEL_335;
          case 58:
            *(void *)v8 |= 0x2000000000000000uLL;
            unint64_t v132 = *((void *)this + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)this + 2)) {
              goto LABEL_251;
            }
            *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v132);
            goto LABEL_335;
          case 59:
            *(void *)v8 |= 0x40000000000uLL;
            unint64_t v133 = *((void *)this + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)this + 2)) {
              goto LABEL_251;
            }
            *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(void *)this + v133);
            goto LABEL_335;
          case 60:
            *(void *)v8 |= 0x40000uLL;
            unint64_t v134 = *((void *)this + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)this + 2)) {
              goto LABEL_251;
            }
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v134);
            goto LABEL_335;
          case 61:
            *(void *)v8 |= 0x80000000000000uLL;
            unint64_t v135 = *((void *)this + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((void *)this + 2)) {
              goto LABEL_251;
            }
            *(_DWORD *)(a1 + 264) = *(_DWORD *)(*(void *)this + v135);
            goto LABEL_335;
          case 62:
            *(void *)v8 |= 0x1000000000uLL;
            unint64_t v136 = *((void *)this + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((void *)this + 2)) {
              goto LABEL_251;
            }
            *(_DWORD *)(a1 + 18_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v136);
            goto LABEL_335;
          case 63:
            *(void *)v8 |= 0x200000uLL;
            unint64_t v137 = *((void *)this + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((void *)this + 2)) {
              goto LABEL_251;
            }
            *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v137);
            goto LABEL_335;
          case 64:
            *(void *)v8 |= 0x400000000000000uLL;
            unint64_t v138 = *((void *)this + 1);
            if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((void *)this + 2)) {
              goto LABEL_251;
            }
            *(_DWORD *)(a1 + 276) = *(_DWORD *)(*(void *)this + v138);
            goto LABEL_335;
          case 65:
            *(void *)v8 |= 0x8000000000uLL;
            unint64_t v139 = *((void *)this + 1);
            if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((void *)this + 2))
            {
LABEL_251:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_336;
            }

            *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(void *)this + v139);
            goto LABEL_335;
          default:
            goto LABEL_266;
        }

        while (1)
        {
          if (v124 == v123)
          {
            uint64_t v128 = 0LL;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_368;
          }

          unint64_t v183 = v123 + 1;
          char v184 = *(_BYTE *)(v125 + v123);
          *((void *)this + 1) = v183;
          v128 |= (unint64_t)(v184 & 0x7F) << v181;
          if ((v184 & 0x80) == 0) {
            break;
          }
          v181 += 7;
          unint64_t v123 = v183;
          BOOL v15 = v182++ > 8;
          if (v15) {
            goto LABEL_318;
          }
        }

        if (*((_BYTE *)this + 24)) {
          uint64_t v128 = 0LL;
        }
LABEL_368:
        *(void *)(a1 + 40) = v128;
      }

          *(_DWORD *)(a1 + 104) = v28;
          goto LABEL_356;
        case 4u:
          *(void *)(a1 + 184) |= 0x1000000000uLL;
          uint64_t v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_354;
        case 5u:
          *(void *)(a1 + 184) |= 0x100000000000uLL;
          char v32 = *((void *)this + 1);
          if (v32 >= *((void *)this + 2))
          {
            unint64_t v35 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unsigned int v33 = v32 + 1;
            uint64_t v34 = *(unsigned __int8 *)(*(void *)this + v32);
            *((void *)this + 1) = v33;
            unint64_t v35 = v34 != 0;
          }

          *(_BYTE *)(a1 + 181) = v35;
          goto LABEL_356;
        case 6u:
          *(void *)(a1 + 184) |= 0x800uLL;
          char v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_354;
        case 7u:
          *(void *)(a1 + 184) |= 0x10000000000uLL;
          unint64_t v37 = *((void *)this + 1);
          if (v37 >= *((void *)this + 2))
          {
            char v40 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v38 = v37 + 1;
            uint64_t v39 = *(unsigned __int8 *)(*(void *)this + v37);
            *((void *)this + 1) = v38;
            char v40 = v39 != 0;
          }

          *(_BYTE *)(a1 + 177) = v40;
          goto LABEL_356;
        case 8u:
          *(void *)(a1 + 184) |= 0x2000000uLL;
          unsigned int v41 = *((void *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v41);
          goto LABEL_354;
        case 9u:
          *(void *)(a1 + 184) |= 0x80000000000uLL;
          uint64_t v42 = *((void *)this + 1);
          if (v42 >= *((void *)this + 2))
          {
            unint64_t v45 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v43 = v42 + 1;
            char v44 = *(unsigned __int8 *)(*(void *)this + v42);
            *((void *)this + 1) = v43;
            unint64_t v45 = v44 != 0;
          }

          *(_BYTE *)(a1 + 180) = v45;
          goto LABEL_356;
        case 0xAu:
          *(void *)(a1 + 184) |= 0x4000uLL;
          unint64_t v46 = *((void *)this + 1);
          uint64_t v47 = *((void *)this + 2);
          char v48 = *(void *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5LL && v46 + 10 <= v47)
          {
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            unint64_t v51 = 0LL;
            do
            {
              char v52 = v46 + 1;
              *((void *)this + 1) = v46 + 1;
              unint64_t v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0) {
                goto LABEL_368;
              }
              v49 += 7;
              unint64_t v46 = v52;
              char v14 = v50++ > 8;
            }

            while (!v14);
LABEL_241:
            LODWORD(v51) = 0;
            goto LABEL_368;
          }

          char v208 = 0;
          unint64_t v209 = 0;
          unint64_t v51 = 0LL;
          if (v47 <= v46) {
            uint64_t v47 = *((void *)this + 1);
          }
          while (2)
          {
            if (v47 == v46)
            {
              LODWORD(v51) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v210 = v46 + 1;
              uint64_t v211 = *(_BYTE *)(v48 + v46);
              *((void *)this + 1) = v210;
              v51 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                unint64_t v46 = v210;
                char v14 = v209++ > 8;
                if (v14) {
                  goto LABEL_241;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v51) = 0;
              }
            }

            break;
          }

LABEL_336:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v12 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

uint64_t sub_1010B0E14(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = (uint64_t *)(result + 316);
  char v5 = *(_BYTE *)(result + 324);
  if ((v5 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(result + 312), 1u);
    uint64_t v6 = *v4;
    char v5 = *((_BYTE *)v4 + 8);
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v6 = *v4;
  if ((*(_BYTE *)(result + 324) & 2) != 0)
  {
LABEL_5:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 304), 2u);
    uint64_t v6 = *v4;
    char v5 = *((_BYTE *)v4 + 8);
  }

double sub_1010B1640(uint64_t a1)
{
  *(void *)a1 = &off_101899870;
  *(_DWORD *)(a1 + 204) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0LL;
  return result;
}

void sub_1010B1678(PB::Base *this)
{
  *(void *)this = &off_101899870;
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }

  int v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v4;
    operator delete(v4);
  }

  char v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }

  uint64_t v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }

  PB::Base::~Base(this);
}

void sub_1010B16F8(PB::Base *a1)
{
}

uint64_t sub_1010B170C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899870;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  char v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v6 = (char *)(a1 + 104);
  *(_DWORD *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 120) = 0LL;
  __int16 v7 = *(_WORD *)(a2 + 204);
  if ((v7 & 0x1000) != 0)
  {
    int v9 = *(_DWORD *)(a2 + 196);
    __int16 v8 = 4096;
    *(_WORD *)(a1 + 204) = 4096;
    *(_DWORD *)(a1 + 196) = v9;
    __int16 v7 = *(_WORD *)(a2 + 204);
    if ((v7 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v8 = 0;
  if ((*(_WORD *)(a2 + 204) & 0x800) != 0)
  {
LABEL_5:
    int v10 = *(_DWORD *)(a2 + 192);
    v8 |= 0x800u;
    *(_WORD *)(a1 + 204) = v8;
    *(_DWORD *)(a1 + 192) = v10;
    __int16 v7 = *(_WORD *)(a2 + 204);
  }

uint64_t sub_1010B199C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "deltaGravity", *(float *)(a1 + 168));
    __int16 v5 = *(_WORD *)(a1 + 204);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }

  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "epochFirstTimestamp", *(void *)(a1 + 128));
  __int16 v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }

BOOL sub_1010B1C98(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  int v7 = *((unsigned __int8 *)this + 24);
  if (v5 < v6 && v7 == 0)
  {
    uint64_t v292 = a1 + 48;
    unsigned int v293 = (void **)(a1 + 32);
    float v11 = (void **)(a1 + 56);
    unint64_t v12 = (void **)(a1 + 8);
    uint64_t v290 = a1 + 24;
    uint64_t v291 = a1 + 72;
    uint64_t v13 = (void *)(a1 + 120);
    char v288 = (void **)(a1 + 80);
    unsigned int v289 = (void **)(a1 + 104);
    float v14 = (void *)(a1 + 96);
    while (1)
    {
      uint64_t v15 = *(void *)this;
      if (v5 > 0xFFFFFFFFFFFFFFF5LL || v5 + 10 > v6) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0LL;
      while (1)
      {
        unint64_t v19 = v5 + 1;
        *((void *)this + 1) = v5 + 1;
        char v20 = *(_BYTE *)(v15 + v5);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v5 = v19;
        BOOL v104 = v17++ > 8;
        if (v104) {
          goto LABEL_20;
        }
      }

LABEL_377:
            *(void *)(a1 + 136) = v78;
            goto LABEL_460;
          case 203:
            *(_WORD *)(a1 + 204) |= 0x200u;
            unint64_t v81 = *((void *)this + 1);
            unint64_t v82 = *((void *)this + 2);
            uint64_t v83 = *(void *)this;
            if (v81 <= 0xFFFFFFFFFFFFFFF5LL && v81 + 10 <= v82)
            {
              char v84 = 0;
              unsigned int v85 = 0;
              uint64_t v86 = 0LL;
              do
              {
                unint64_t v87 = v81 + 1;
                *((void *)this + 1) = v81 + 1;
                char v88 = *(_BYTE *)(v83 + v81);
                v86 |= (unint64_t)(v88 & 0x7F) << v84;
                if ((v88 & 0x80) == 0) {
                  goto LABEL_380;
                }
                v84 += 7;
                unint64_t v81 = v87;
                BOOL v104 = v85++ > 8;
              }

              while (!v104);
LABEL_303:
              LODWORD(v86) = 0;
              goto LABEL_380;
            }

            char v203 = 0;
            unsigned int v204 = 0;
            uint64_t v86 = 0LL;
            if (v82 <= v81) {
              unint64_t v82 = *((void *)this + 1);
            }
            while (2)
            {
              if (v82 == v81)
              {
                LODWORD(v86) = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v205 = v81 + 1;
                char v206 = *(_BYTE *)(v83 + v81);
                *((void *)this + 1) = v205;
                v86 |= (unint64_t)(v206 & 0x7F) << v203;
                if (v206 < 0)
                {
                  v203 += 7;
                  unint64_t v81 = v205;
                  BOOL v104 = v204++ > 8;
                  if (v104) {
                    goto LABEL_303;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v86) = 0;
                }
              }

              break;
            }

          *(_DWORD *)(a1 + 116) = v101;
          goto LABEL_313;
        case 0x1Cu:
          *(void *)(a1 + 212) |= 0x4000uLL;
          BOOL v104 = *((void *)this + 1);
          char v105 = *((void *)this + 2);
          unsigned int v106 = *(void *)this;
          if (v104 <= 0xFFFFFFFFFFFFFFF5LL && v104 + 10 <= v105)
          {
            uint64_t v107 = 0;
            unint64_t v108 = 0;
            char v109 = 0LL;
            do
            {
              char v110 = v104 + 1;
              *((void *)this + 1) = v104 + 1;
              unsigned int v111 = *(_BYTE *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0) {
                goto LABEL_350;
              }
              v107 += 7;
              BOOL v104 = v110;
              float v14 = v108++ > 8;
            }

            while (!v14);
LABEL_264:
            LODWORD(v109) = 0;
            goto LABEL_350;
          }

          unsigned int v204 = 0;
          unint64_t v205 = 0;
          char v109 = 0LL;
          if (v105 <= v104) {
            char v105 = *((void *)this + 1);
          }
          while (2)
          {
            if (v105 == v104)
            {
              LODWORD(v109) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v206 = v104 + 1;
              unint64_t v207 = *(_BYTE *)(v106 + v104);
              *((void *)this + 1) = v206;
              v109 |= (unint64_t)(v207 & 0x7F) << v204;
              if (v207 < 0)
              {
                v204 += 7;
                BOOL v104 = v206;
                float v14 = v205++ > 8;
                if (v14) {
                  goto LABEL_264;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v109) = 0;
              }
            }

            break;
          }

LABEL_430:
              *(v209 - 1) = v264;
              goto LABEL_460;
            }

            uint64_t v90 = v4;
            if ((PB::Reader::placeMark(this, v294, v26, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              unint64_t v91 = *(char **)(a1 + 112);
              do
              {
                if ((unint64_t)v91 >= *v13)
                {
                  unint64_t v115 = (char *)*v289;
                  uint64_t v116 = (v91 - (_BYTE *)*v289) >> 3;
                  unint64_t v117 = v116 + 1;
                  uint64_t v118 = *v13 - (void)v115;
                  if (v118 >> 2 > v117) {
                    unint64_t v117 = v118 >> 2;
                  }
                  else {
                    unint64_t v119 = v117;
                  }
                  if (v119)
                  {
                    uint64_t v120 = (char *)sub_1000071BC((uint64_t)v13, v119);
                    unint64_t v115 = *(char **)(a1 + 104);
                    unint64_t v91 = *(char **)(a1 + 112);
                  }

                  else
                  {
                    uint64_t v120 = 0LL;
                  }

                  unint64_t v121 = &v120[8 * v116];
                  *(void *)unint64_t v121 = 0LL;
                  char v122 = v121 + 8;
                  while (v91 != v115)
                  {
                    uint64_t v123 = *((void *)v91 - 1);
                    v91 -= 8;
                    *((void *)v121 - 1) = v123;
                    v121 -= 8;
                  }

                  *(void *)(a1 + 104) = v121;
                  *(void *)(a1 + 112) = v122;
                  *(void *)(a1 + 120) = &v120[8 * v119];
                  if (v115) {
                    operator delete(v115);
                  }
                  unint64_t v91 = v122;
                }

                else
                {
                  *(void *)unint64_t v91 = 0LL;
                  v91 += 8;
                }

                *(void *)(a1 + 112) = v91;
                unint64_t v125 = *((void *)this + 1);
                unint64_t v124 = *((void *)this + 2);
                uint64_t v126 = *(void *)this;
                if (v125 <= 0xFFFFFFFFFFFFFFF5LL && v125 + 10 <= v124)
                {
                  char v133 = 0;
                  unsigned int v134 = 0;
                  uint64_t v135 = 0LL;
                  while (1)
                  {
                    unint64_t v136 = v125 + 1;
                    *((void *)this + 1) = v125 + 1;
                    char v137 = *(_BYTE *)(v126 + v125);
                    v135 |= (unint64_t)(v137 & 0x7F) << v133;
                    if ((v137 & 0x80) == 0) {
                      goto LABEL_178;
                    }
                    v133 += 7;
                    unint64_t v125 = v136;
                    BOOL v104 = v134++ > 8;
                    if (v104)
                    {
                      uint64_t v135 = 0LL;
                      goto LABEL_178;
                    }
                  }
                }

                char v128 = 0;
                unsigned int v129 = 0;
                uint64_t v135 = 0LL;
                if (v124 <= v125) {
                  uint64_t v130 = *((void *)this + 1);
                }
                else {
                  uint64_t v130 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v130 == v125)
                  {
LABEL_315:
                    *((_BYTE *)this + 24) = 1;
                    *((void *)v91 - 1) = 0LL;
                    goto LABEL_316;
                  }

                  unint64_t v131 = v125++;
                  char v132 = *(_BYTE *)(v126 + v131);
                  *((void *)this + 1) = v125;
                  v135 |= (unint64_t)(v132 & 0x7F) << v128;
                  if ((v132 & 0x80) == 0) {
                    break;
                  }
                  v128 += 7;
                  BOOL v104 = v129++ > 8;
                  if (v104)
                  {
                    uint64_t v135 = 0LL;
                    goto LABEL_177;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v135 = 0LL;
                }
LABEL_177:
                unint64_t v136 = v131 + 1;
LABEL_178:
                *((void *)v91 - 1) = v135;
              }

              while (v136 < v124 && !*((_BYTE *)this + 24));
            }

            goto LABEL_316;
          case 207:
            if ((_DWORD)v26 != 2)
            {
              unsigned int v213 = *(char **)(a1 + 16);
              unint64_t v212 = *(void *)(a1 + 24);
              if ((unint64_t)v213 >= v212)
              {
                unint64_t v233 = (char *)*v12;
                uint64_t v234 = (v213 - (_BYTE *)*v12) >> 2;
                unint64_t v235 = v234 + 1;
                if ((unint64_t)(v234 + 1) >> 62) {
LABEL_470:
                }
                  sub_100007008();
                uint64_t v236 = v4;
                uint64_t v237 = v212 - (void)v233;
                if (v237 >> 1 > v235) {
                  unint64_t v235 = v237 >> 1;
                }
                else {
                  unint64_t v238 = v235;
                }
                if (v238)
                {
                  char v239 = (char *)sub_10000956C(v290, v238);
                  unint64_t v233 = *(char **)(a1 + 8);
                  unsigned int v213 = *(char **)(a1 + 16);
                }

                else
                {
                  char v239 = 0LL;
                }

                char v279 = &v239[4 * v234];
                *(_DWORD *)char v279 = 0;
                uint64_t v214 = v279 + 4;
                while (v213 != v233)
                {
                  int v280 = *((_DWORD *)v213 - 1);
                  v213 -= 4;
                  *((_DWORD *)v279 - 1) = v280;
                  v279 -= 4;
                }

                *(void *)(a1 + _Block_object_dispose(va, 8) = v279;
                *(void *)(a1 + 16) = v214;
                *(void *)(a1 + 24) = &v239[4 * v238];
                if (v233) {
                  operator delete(v233);
                }
                uint64_t v4 = v236;
              }

              else
              {
                *(_DWORD *)unsigned int v213 = 0;
                uint64_t v214 = v213 + 4;
              }

              *(void *)(a1 + 16) = v214;
              goto LABEL_455;
            }

            uint64_t v90 = v4;
            if ((PB::Reader::placeMark(this, v294, v26, a4) & 1) != 0) {
              return 0LL;
            }
            unint64_t v138 = *((void *)this + 1);
            unint64_t v139 = *((void *)this + 2);
            while (v138 < v139 && !*((_BYTE *)this + 24))
            {
              unint64_t v141 = *(char **)(a1 + 16);
              unint64_t v140 = *(void *)(a1 + 24);
              if ((unint64_t)v141 >= v140)
              {
                char v143 = (char *)*v12;
                uint64_t v144 = (v141 - (_BYTE *)*v12) >> 2;
                unint64_t v145 = v144 + 1;
                uint64_t v146 = v140 - (void)v143;
                if (v146 >> 1 > v145) {
                  unint64_t v145 = v146 >> 1;
                }
                else {
                  unint64_t v147 = v145;
                }
                if (v147)
                {
                  unint64_t v148 = (char *)sub_10000956C(v290, v147);
                  char v143 = *(char **)(a1 + 8);
                  unint64_t v141 = *(char **)(a1 + 16);
                }

                else
                {
                  unint64_t v148 = 0LL;
                }

                unint64_t v149 = &v148[4 * v144];
                *(_DWORD *)unint64_t v149 = 0;
                uint64_t v142 = v149 + 4;
                while (v141 != v143)
                {
                  int v150 = *((_DWORD *)v141 - 1);
                  v141 -= 4;
                  *((_DWORD *)v149 - 1) = v150;
                  v149 -= 4;
                }

                *(void *)(a1 + _Block_object_dispose(va, 8) = v149;
                *(void *)(a1 + 16) = v142;
                *(void *)(a1 + 24) = &v148[4 * v147];
                if (v143) {
                  operator delete(v143);
                }
              }

              else
              {
                *(_DWORD *)unint64_t v141 = 0;
                uint64_t v142 = v141 + 4;
              }

              *(void *)(a1 + 16) = v142;
              unint64_t v151 = *((void *)this + 1);
              if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((void *)this + 2)) {
                goto LABEL_314;
              }
              *(v142 - 1) = *(_DWORD *)(*(void *)this + v151);
              unint64_t v139 = *((void *)this + 2);
              unint64_t v138 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v138;
            }

            goto LABEL_316;
          case 208:
            if ((_DWORD)v26 != 2)
            {
              char v216 = *(char **)(a1 + 64);
              unint64_t v215 = *(void *)(a1 + 72);
              if ((unint64_t)v216 >= v215)
              {
                unint64_t v240 = (char *)*v11;
                uint64_t v241 = (v216 - (_BYTE *)*v11) >> 2;
                unint64_t v242 = v241 + 1;
                if ((unint64_t)(v241 + 1) >> 62) {
LABEL_471:
                }
                  sub_100007008();
                uint64_t v243 = v4;
                uint64_t v244 = v215 - (void)v240;
                if (v244 >> 1 > v242) {
                  unint64_t v242 = v244 >> 1;
                }
                else {
                  unint64_t v245 = v242;
                }
                if (v245)
                {
                  unint64_t v246 = (char *)sub_10000956C(v291, v245);
                  unint64_t v240 = *(char **)(a1 + 56);
                  char v216 = *(char **)(a1 + 64);
                }

                else
                {
                  unint64_t v246 = 0LL;
                }

                unsigned int v281 = &v246[4 * v241];
                *(_DWORD *)unsigned int v281 = 0;
                uint64_t v214 = v281 + 4;
                while (v216 != v240)
                {
                  int v282 = *((_DWORD *)v216 - 1);
                  v216 -= 4;
                  *((_DWORD *)v281 - 1) = v282;
                  v281 -= 4;
                }

                *(void *)(a1 + 56) = v281;
                *(void *)(a1 + 64) = v214;
                *(void *)(a1 + 72) = &v246[4 * v245];
                if (v240) {
                  operator delete(v240);
                }
                uint64_t v4 = v243;
              }

              else
              {
                *(_DWORD *)char v216 = 0;
                uint64_t v214 = v216 + 4;
              }

              *(void *)(a1 + 64) = v214;
              goto LABEL_455;
            }

            uint64_t v90 = v4;
            if ((PB::Reader::placeMark(this, v294, v26, a4) & 1) != 0) {
              return 0LL;
            }
            unint64_t v152 = *((void *)this + 1);
            unint64_t v153 = *((void *)this + 2);
            while (v152 < v153 && !*((_BYTE *)this + 24))
            {
              char v155 = *(char **)(a1 + 64);
              unint64_t v154 = *(void *)(a1 + 72);
              if ((unint64_t)v155 >= v154)
              {
                char v157 = (char *)*v11;
                uint64_t v158 = (v155 - (_BYTE *)*v11) >> 2;
                unint64_t v159 = v158 + 1;
                uint64_t v160 = v154 - (void)v157;
                if (v160 >> 1 > v159) {
                  unint64_t v159 = v160 >> 1;
                }
                else {
                  unint64_t v161 = v159;
                }
                if (v161)
                {
                  unsigned int v162 = (char *)sub_10000956C(v291, v161);
                  char v157 = *(char **)(a1 + 56);
                  char v155 = *(char **)(a1 + 64);
                }

                else
                {
                  unsigned int v162 = 0LL;
                }

                unint64_t v163 = &v162[4 * v158];
                *(_DWORD *)unint64_t v163 = 0;
                unsigned int v156 = v163 + 4;
                while (v155 != v157)
                {
                  int v164 = *((_DWORD *)v155 - 1);
                  v155 -= 4;
                  *((_DWORD *)v163 - 1) = v164;
                  v163 -= 4;
                }

                *(void *)(a1 + 56) = v163;
                *(void *)(a1 + 64) = v156;
                *(void *)(a1 + 72) = &v162[4 * v161];
                if (v157) {
                  operator delete(v157);
                }
              }

              else
              {
                *(_DWORD *)char v155 = 0;
                unsigned int v156 = v155 + 4;
              }

              *(void *)(a1 + 64) = v156;
              unint64_t v165 = *((void *)this + 1);
              if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((void *)this + 2)) {
                goto LABEL_314;
              }
              *(v156 - 1) = *(_DWORD *)(*(void *)this + v165);
              unint64_t v153 = *((void *)this + 2);
              unint64_t v152 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v152;
            }

            goto LABEL_316;
          case 209:
            if ((_DWORD)v26 == 2)
            {
              uint64_t v90 = v4;
              if ((PB::Reader::placeMark(this, v294, v26, a4) & 1) != 0) {
                return 0LL;
              }
              unint64_t v166 = *((void *)this + 1);
              unint64_t v167 = *((void *)this + 2);
              while (v166 < v167 && !*((_BYTE *)this + 24))
              {
                char v169 = *(char **)(a1 + 40);
                unint64_t v168 = *(void *)(a1 + 48);
                if ((unint64_t)v169 >= v168)
                {
                  unint64_t v171 = (char *)*v293;
                  uint64_t v172 = (v169 - (_BYTE *)*v293) >> 2;
                  unint64_t v173 = v172 + 1;
                  uint64_t v174 = v168 - (void)v171;
                  if (v174 >> 1 > v173) {
                    unint64_t v173 = v174 >> 1;
                  }
                  else {
                    unint64_t v175 = v173;
                  }
                  if (v175)
                  {
                    char v176 = (char *)sub_10000956C(v292, v175);
                    unint64_t v171 = *(char **)(a1 + 32);
                    char v169 = *(char **)(a1 + 40);
                  }

                  else
                  {
                    char v176 = 0LL;
                  }

                  char v177 = &v176[4 * v172];
                  *(_DWORD *)char v177 = 0;
                  unsigned int v170 = v177 + 4;
                  while (v169 != v171)
                  {
                    int v178 = *((_DWORD *)v169 - 1);
                    v169 -= 4;
                    *((_DWORD *)v177 - 1) = v178;
                    v177 -= 4;
                  }

                  *(void *)(a1 + 32) = v177;
                  *(void *)(a1 + 40) = v170;
                  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v176[4 * v175];
                  if (v171) {
                    operator delete(v171);
                  }
                }

                else
                {
                  *(_DWORD *)char v169 = 0;
                  unsigned int v170 = v169 + 4;
                }

                *(void *)(a1 + 40) = v170;
                unint64_t v179 = *((void *)this + 1);
                if (v179 > 0xFFFFFFFFFFFFFFFBLL || v179 + 4 > *((void *)this + 2))
                {
LABEL_314:
                  *((_BYTE *)this + 24) = 1;
                  break;
                }

                *(v170 - 1) = *(_DWORD *)(*(void *)this + v179);
                unint64_t v167 = *((void *)this + 2);
                unint64_t v166 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v166;
              }

LABEL_316:
              PB::Reader::recallMark(this, v294);
              uint64_t v4 = v90;
              goto LABEL_460;
            }

            unint64_t v218 = *(char **)(a1 + 40);
            unint64_t v217 = *(void *)(a1 + 48);
            if ((unint64_t)v218 >= v217)
            {
              char v247 = (char *)*v293;
              uint64_t v248 = (v218 - (_BYTE *)*v293) >> 2;
              unint64_t v249 = v248 + 1;
              if ((unint64_t)(v248 + 1) >> 62) {
LABEL_472:
              }
                sub_100007008();
              uint64_t v250 = v4;
              uint64_t v251 = v217 - (void)v247;
              if (v251 >> 1 > v249) {
                unint64_t v249 = v251 >> 1;
              }
              else {
                unint64_t v252 = v249;
              }
              if (v252)
              {
                int v253 = (char *)sub_10000956C(v292, v252);
                char v247 = *(char **)(a1 + 32);
                unint64_t v218 = *(char **)(a1 + 40);
              }

              else
              {
                int v253 = 0LL;
              }

              char v283 = &v253[4 * v248];
              *(_DWORD *)char v283 = 0;
              uint64_t v214 = v283 + 4;
              while (v218 != v247)
              {
                int v284 = *((_DWORD *)v218 - 1);
                v218 -= 4;
                *((_DWORD *)v283 - 1) = v284;
                v283 -= 4;
              }

              *(void *)(a1 + 32) = v283;
              *(void *)(a1 + 40) = v214;
              *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v253[4 * v252];
              if (v247) {
                operator delete(v247);
              }
              uint64_t v4 = v250;
            }

            else
            {
              *(_DWORD *)unint64_t v218 = 0;
              uint64_t v214 = v218 + 4;
            }

            *(void *)(a1 + 40) = v214;
LABEL_455:
            unint64_t v285 = *((void *)this + 1);
            if (v285 <= 0xFFFFFFFFFFFFFFFBLL && v285 + 4 <= *((void *)this + 2))
            {
              *(v214 - 1) = *(_DWORD *)(*(void *)this + v285);
              goto LABEL_459;
            }

            break;
          default:
            goto LABEL_256;
        }
      }

      else
      {
        switch((int)v27)
        {
          case 'e':
            *(_WORD *)(a1 + 204) |= 0x10u;
            unint64_t v28 = *((void *)this + 1);
            unint64_t v29 = *((void *)this + 2);
            uint64_t v30 = *(void *)this;
            if (v28 <= 0xFFFFFFFFFFFFFFF5LL && v28 + 10 <= v29)
            {
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0LL;
              do
              {
                unint64_t v34 = v28 + 1;
                *((void *)this + 1) = v28 + 1;
                char v35 = *(_BYTE *)(v30 + v28);
                v33 |= (unint64_t)(v35 & 0x7F) << v31;
                if ((v35 & 0x80) == 0) {
                  goto LABEL_365;
                }
                v31 += 7;
                unint64_t v28 = v34;
                BOOL v104 = v32++ > 8;
              }

              while (!v104);
LABEL_264:
              uint64_t v33 = 0LL;
              goto LABEL_365;
            }

            char v183 = 0;
            unsigned int v184 = 0;
            uint64_t v33 = 0LL;
            if (v29 <= v28) {
              unint64_t v29 = *((void *)this + 1);
            }
            while (2)
            {
              if (v29 == v28)
              {
                uint64_t v33 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v185 = v28 + 1;
                char v186 = *(_BYTE *)(v30 + v28);
                *((void *)this + 1) = v185;
                v33 |= (unint64_t)(v186 & 0x7F) << v183;
                if (v186 < 0)
                {
                  v183 += 7;
                  unint64_t v28 = v185;
                  BOOL v104 = v184++ > 8;
                  if (v104) {
                    goto LABEL_264;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v33 = 0LL;
                }
              }

              break;
            }

LABEL_365:
            *(void *)(a1 + 160) = v33;
            goto LABEL_460;
          case 'f':
            *(_WORD *)(a1 + 204) |= 0x4000u;
            unint64_t v45 = *((void *)this + 1);
            if (v45 >= *((void *)this + 2))
            {
              BOOL v48 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v46 = v45 + 1;
              int v47 = *(unsigned __int8 *)(*(void *)this + v45);
              *((void *)this + 1) = v46;
              BOOL v48 = v47 != 0;
            }

            *(_BYTE *)(a1 + 201) = v48;
            goto LABEL_460;
          case 'g':
            *(_WORD *)(a1 + 204) |= 0x400u;
            unint64_t v49 = *((void *)this + 1);
            if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
              break;
            }
            *(_DWORD *)(a1 + 18_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v49);
            goto LABEL_459;
          case 'h':
            *(_WORD *)(a1 + 204) |= 0x2000u;
            unint64_t v50 = *((void *)this + 1);
            if (v50 >= *((void *)this + 2))
            {
              BOOL v53 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v51 = v50 + 1;
              int v52 = *(unsigned __int8 *)(*(void *)this + v50);
              *((void *)this + 1) = v51;
              BOOL v53 = v52 != 0;
            }

            *(_BYTE *)(a1 + 200) = v53;
            goto LABEL_460;
          case 'i':
            *(_WORD *)(a1 + 204) |= 4u;
            unint64_t v54 = *((void *)this + 1);
            unint64_t v55 = *((void *)this + 2);
            uint64_t v56 = *(void *)this;
            if (v54 <= 0xFFFFFFFFFFFFFFF5LL && v54 + 10 <= v55)
            {
              char v57 = 0;
              unsigned int v58 = 0;
              uint64_t v59 = 0LL;
              do
              {
                unint64_t v60 = v54 + 1;
                *((void *)this + 1) = v54 + 1;
                char v61 = *(_BYTE *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0) {
                  goto LABEL_371;
                }
                v57 += 7;
                unint64_t v54 = v60;
                BOOL v104 = v58++ > 8;
              }

              while (!v104);
LABEL_282:
              uint64_t v59 = 0LL;
              goto LABEL_371;
            }

            char v191 = 0;
            unsigned int v192 = 0;
            uint64_t v59 = 0LL;
            if (v55 <= v54) {
              unint64_t v55 = *((void *)this + 1);
            }
            while (2)
            {
              if (v55 == v54)
              {
                uint64_t v59 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v193 = v54 + 1;
                char v194 = *(_BYTE *)(v56 + v54);
                *((void *)this + 1) = v193;
                v59 |= (unint64_t)(v194 & 0x7F) << v191;
                if (v194 < 0)
                {
                  v191 += 7;
                  unint64_t v54 = v193;
                  BOOL v104 = v192++ > 8;
                  if (v104) {
                    goto LABEL_282;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v59 = 0LL;
                }
              }

              break;
            }

LABEL_371:
            *(void *)(a1 + 144) = v59;
            goto LABEL_460;
          case 'j':
            *(_WORD *)(a1 + 204) |= 8u;
            unint64_t v62 = *((void *)this + 1);
            unint64_t v63 = *((void *)this + 2);
            uint64_t v64 = *(void *)this;
            if (v62 <= 0xFFFFFFFFFFFFFFF5LL && v62 + 10 <= v63)
            {
              char v65 = 0;
              unsigned int v66 = 0;
              uint64_t v67 = 0LL;
              do
              {
                unint64_t v68 = v62 + 1;
                *((void *)this + 1) = v62 + 1;
                char v69 = *(_BYTE *)(v64 + v62);
                v67 |= (unint64_t)(v69 & 0x7F) << v65;
                if ((v69 & 0x80) == 0) {
                  goto LABEL_374;
                }
                v65 += 7;
                unint64_t v62 = v68;
                BOOL v104 = v66++ > 8;
              }

              while (!v104);
LABEL_289:
              uint64_t v67 = 0LL;
              goto LABEL_374;
            }

            char v195 = 0;
            unsigned int v196 = 0;
            uint64_t v67 = 0LL;
            if (v63 <= v62) {
              unint64_t v63 = *((void *)this + 1);
            }
            while (2)
            {
              if (v63 == v62)
              {
                uint64_t v67 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v197 = v62 + 1;
                char v198 = *(_BYTE *)(v64 + v62);
                *((void *)this + 1) = v197;
                v67 |= (unint64_t)(v198 & 0x7F) << v195;
                if (v198 < 0)
                {
                  v195 += 7;
                  unint64_t v62 = v197;
                  BOOL v104 = v196++ > 8;
                  if (v104) {
                    goto LABEL_289;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v67 = 0LL;
                }
              }

              break;
            }

LABEL_374:
            *(void *)(a1 + 152) = v67;
            goto LABEL_460;
          case 'k':
            *(_WORD *)(a1 + 204) |= 0x100u;
            unint64_t v70 = *((void *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
              break;
            }
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(void *)this + v70);
            goto LABEL_459;
          case 'l':
            *(_WORD *)(a1 + 204) |= 0x80u;
            unint64_t v71 = *((void *)this + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)this + 2)) {
              break;
            }
            *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v71);
            goto LABEL_459;
          case 'm':
            *(_WORD *)(a1 + 204) |= 0x40u;
            unint64_t v72 = *((void *)this + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)this + 2)) {
              break;
            }
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v72);
            goto LABEL_459;
          default:
            if ((_DWORD)v27 == 1)
            {
              *(_WORD *)(a1 + 204) |= 0x1000u;
              unint64_t v180 = *((void *)this + 1);
              if (v180 <= 0xFFFFFFFFFFFFFFFBLL && v180 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(void *)this + v180);
                goto LABEL_459;
              }
            }

            else
            {
              if ((_DWORD)v27 != 2)
              {
LABEL_256:
                uint64_t v181 = v4;
                char v182 = PB::Reader::skip(this, v27, v18 & 7, 0);
                uint64_t v4 = v181;
                if ((v182 & 1) == 0) {
                  return 0LL;
                }
                goto LABEL_460;
              }

              *(_WORD *)(a1 + 204) |= 0x800u;
              unint64_t v44 = *((void *)this + 1);
              if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(void *)this + v44);
LABEL_459:
                *((void *)this + 1) += 4LL;
                goto LABEL_460;
              }
            }

            break;
        }
      }

      *((_BYTE *)this + 24) = 1;
LABEL_460:
      unint64_t v5 = *((void *)this + 1);
      unint64_t v6 = *((void *)this + 2);
      int v7 = *((unsigned __int8 *)this + 24);
      if (v5 >= v6 || v7 != 0) {
        return v7 == 0;
      }
    }

    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v18 = 0LL;
    if (v5 > v6) {
      unint64_t v6 = v5;
    }
    while (v6 != v5)
    {
      unint64_t v23 = v5 + 1;
      char v24 = *(_BYTE *)(v15 + v5);
      *((void *)this + 1) = v23;
      v18 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v5 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v18 = 0LL;
        goto LABEL_21;
      }
    }

    int v7 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v7 == 0;
}

uint64_t sub_1010B3214(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 204);
  if ((v4 & 0x1000) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(result + 196), 1u);
    __int16 v4 = *(_WORD *)(v3 + 204);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }

  else if ((*(_WORD *)(result + 204) & 0x800) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 192), 2u);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }

void *sub_1010B3480(void *result)
{
  const char *result = &off_1018998A8;
  *(void *)((char *)result + 164) = 0LL;
  return result;
}

void sub_1010B3498(PB::Base *a1)
{
}

uint64_t sub_1010B34AC(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_1018998A8;
  *(void *)(result + 164) = 0LL;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x100000000LL) != 0)
  {
    char v4 = *(_BYTE *)(a2 + 160);
    unint64_t v3 = (unint64_t)&_mh_execute_header;
    *(void *)(result + 164) = &_mh_execute_header;
    *(_BYTE *)(result + 160) = v4;
    uint64_t v2 = *(void *)(a2 + 164);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  unint64_t v3 = 0LL;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 112);
    v3 |= 0x100000uLL;
    *(void *)(result + 164) = v3;
    *(_DWORD *)(result + 112) = v5;
    uint64_t v2 = *(void *)(a2 + 164);
  }

uint64_t sub_1010B3864(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "configAccelThresholdNorm", *(float *)(a1 + 56));
    uint64_t v5 = *(void *)(a1 + 164);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_38;
    }
  }

  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "configHardware", *(_DWORD *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_39;
  }

uint64_t sub_1010B3CB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

LABEL_294:
              *(_DWORD *)(a1 + 112) = v38;
              goto LABEL_282;
            case 3u:
              *(void *)(a1 + 164) |= 0x80000uLL;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v42 = *((void *)this + 2);
              uint64_t v43 = *(void *)this;
              if (v41 <= 0xFFFFFFFFFFFFFFF5LL && v41 + 10 <= v42)
              {
                char v44 = 0;
                unsigned int v45 = 0;
                uint64_t v46 = 0LL;
                do
                {
                  unint64_t v47 = v41 + 1;
                  *((void *)this + 1) = v41 + 1;
                  char v48 = *(_BYTE *)(v43 + v41);
                  v46 |= (unint64_t)(v48 & 0x7F) << v44;
                  if ((v48 & 0x80) == 0) {
                    goto LABEL_298;
                  }
                  v44 += 7;
                  unint64_t v41 = v47;
                  BOOL v14 = v45++ > 8;
                }

                while (!v14);
LABEL_202:
                LODWORD(v46) = 0;
                goto LABEL_298;
              }

              char v164 = 0;
              unsigned int v165 = 0;
              uint64_t v46 = 0LL;
              if (v42 <= v41) {
                unint64_t v42 = *((void *)this + 1);
              }
              while (2)
              {
                if (v42 == v41)
                {
                  LODWORD(v46) = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v166 = v41 + 1;
                  char v167 = *(_BYTE *)(v43 + v41);
                  *((void *)this + 1) = v166;
                  v46 |= (unint64_t)(v167 & 0x7F) << v164;
                  if (v167 < 0)
                  {
                    v164 += 7;
                    unint64_t v41 = v166;
                    BOOL v14 = v165++ > 8;
                    if (v14) {
                      goto LABEL_202;
                    }
                    continue;
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v46) = 0;
                  }
                }

                break;
              }

            *(void *)(a1 + 80) = v50;
            goto LABEL_352;
          case 3:
            *(_DWORD *)(a1 + 152) |= 0x800u;
            unint64_t v53 = *((void *)this + 1);
            unint64_t v54 = *((void *)this + 2);
            unint64_t v55 = *(void *)this;
            if (v53 <= 0xFFFFFFFFFFFFFFF5LL && v53 + 10 <= v54)
            {
              uint64_t v56 = 0;
              char v57 = 0;
              unsigned int v58 = 0LL;
              do
              {
                uint64_t v59 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                unint64_t v60 = *(_BYTE *)(v55 + v53);
                v58 |= (unint64_t)(v60 & 0x7F) << v56;
                if ((v60 & 0x80) == 0) {
                  goto LABEL_297;
                }
                v56 += 7;
                unint64_t v53 = v59;
                uint64_t v105 = v57++ > 8;
              }

              while (!v105);
LABEL_213:
              LODWORD(v5_Block_object_dispose(va, 8) = 0;
              goto LABEL_297;
            }

            char v167 = 0;
            char v168 = 0;
            unsigned int v58 = 0LL;
            if (v54 <= v53) {
              unint64_t v54 = *((void *)this + 1);
            }
            while (2)
            {
              if (v54 == v53)
              {
                LODWORD(v5_Block_object_dispose(va, 8) = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unsigned int v169 = v53 + 1;
                unint64_t v170 = *(_BYTE *)(v55 + v53);
                *((void *)this + 1) = v169;
                v58 |= (unint64_t)(v170 & 0x7F) << v167;
                if (v170 < 0)
                {
                  v167 += 7;
                  unint64_t v53 = v169;
                  uint64_t v105 = v168++ > 8;
                  if (v105) {
                    goto LABEL_213;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v5_Block_object_dispose(va, 8) = 0;
                }
              }

              break;
            }

          int v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 9u:
          *(_BYTE *)(a1 + 152) |= 4u;
          unint64_t v115 = *((void *)this + 1);
          uint64_t v116 = *((void *)this + 2);
          char v117 = *(void *)this;
          if (v115 <= 0xFFFFFFFFFFFFFFF5LL && v115 + 10 <= v116)
          {
            unsigned int v118 = 0;
            uint64_t v119 = 0;
            unint64_t v120 = 0LL;
            do
            {
              char v121 = v115 + 1;
              *((void *)this + 1) = v115 + 1;
              unint64_t v122 = *(_BYTE *)(v117 + v115);
              v120 |= (unint64_t)(v122 & 0x7F) << v118;
              if ((v122 & 0x80) == 0) {
                goto LABEL_253;
              }
              v118 += 7;
              unint64_t v115 = v121;
              unint64_t v20 = v119++ > 8;
            }

            while (!v20);
LABEL_201:
            LODWORD(v120) = 0;
            goto LABEL_253;
          }

          uint64_t v142 = 0;
          unint64_t v143 = 0;
          unint64_t v120 = 0LL;
          if (v116 <= v115) {
            uint64_t v116 = *((void *)this + 1);
          }
          while (2)
          {
            if (v116 == v115)
            {
              LODWORD(v120) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v144 = v115 + 1;
              unint64_t v145 = *(_BYTE *)(v117 + v115);
              *((void *)this + 1) = v144;
              v120 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                unint64_t v115 = v144;
                unint64_t v20 = v143++ > 8;
                if (v20) {
                  goto LABEL_201;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v120) = 0;
              }
            }

            break;
          }

LABEL_298:
              *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = v46;
              goto LABEL_282;
            case 4u:
              *(void *)(a1 + 164) |= 0x1000000uLL;
              unint64_t v49 = *((void *)this + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v49);
              goto LABEL_281;
            case 5u:
              *(void *)(a1 + 164) |= 0x20000000uLL;
              unint64_t v50 = *((void *)this + 1);
              if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v50);
              goto LABEL_281;
            case 6u:
              *(void *)(a1 + 164) |= 0x4000000uLL;
              unint64_t v51 = *((void *)this + 1);
              if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v51);
              goto LABEL_281;
            case 7u:
              *(void *)(a1 + 164) |= 0x80000000uLL;
              unint64_t v52 = *((void *)this + 1);
              if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v52);
              goto LABEL_281;
            case 8u:
              *(void *)(a1 + 164) |= 0x10000000uLL;
              unint64_t v53 = *((void *)this + 1);
              if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2)) {
                goto LABEL_170;
              }
              *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v53);
              goto LABEL_281;
            case 9u:
              *(void *)(a1 + 164) |= 0x200000uLL;
              unint64_t v54 = *((void *)this + 1);
              unint64_t v55 = *((void *)this + 2);
              uint64_t v56 = *(void *)this;
              if (v54 <= 0xFFFFFFFFFFFFFFF5LL && v54 + 10 <= v55)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v59 = 0LL;
                do
                {
                  unint64_t v60 = v54 + 1;
                  *((void *)this + 1) = v54 + 1;
                  char v61 = *(_BYTE *)(v56 + v54);
                  v59 |= (unint64_t)(v61 & 0x7F) << v57;
                  if ((v61 & 0x80) == 0) {
                    goto LABEL_302;
                  }
                  v57 += 7;
                  unint64_t v54 = v60;
                  BOOL v14 = v58++ > 8;
                }

                while (!v14);
LABEL_209:
                LODWORD(v59) = 0;
                goto LABEL_302;
              }

              char v168 = 0;
              unsigned int v169 = 0;
              uint64_t v59 = 0LL;
              if (v55 <= v54) {
                unint64_t v55 = *((void *)this + 1);
              }
              while (2)
              {
                if (v55 == v54)
                {
                  LODWORD(v59) = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v170 = v54 + 1;
                  char v171 = *(_BYTE *)(v56 + v54);
                  *((void *)this + 1) = v170;
                  v59 |= (unint64_t)(v171 & 0x7F) << v168;
                  if (v171 < 0)
                  {
                    v168 += 7;
                    unint64_t v54 = v170;
                    BOOL v14 = v169++ > 8;
                    if (v14) {
                      goto LABEL_209;
                    }
                    continue;
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v59) = 0;
                  }
                }

                break;
              }

uint64_t sub_1010B4F20(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 164);
  if ((v4 & 0x100000000LL) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(result + 160), 1u);
    uint64_t v4 = *(void *)(v3 + 164);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }

  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 2u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }

uint64_t sub_1010B52E0(uint64_t result)
{
  *(void *)uint64_t result = &off_1018998E0;
  *(_DWORD *)(result + 6_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010B52F8(PB::Base *a1)
{
}

uint64_t sub_1010B530C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018998E0;
  *(_DWORD *)(result + 6_Block_object_dispose(va, 8) = 0;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x400) != 0)
  {
    char v4 = *(_BYTE *)(a2 + 64);
    __int16 v3 = 1024;
    *(_WORD *)(result + 6_Block_object_dispose(va, 8) = 1024;
    *(_BYTE *)(result + 64) = v4;
    __int16 v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 52);
    v3 |= 0x80u;
    *(_WORD *)(result + 6_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(result + 52) = v5;
    __int16 v2 = *(_WORD *)(a2 + 68);
  }

uint64_t sub_1010B545C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "diffPeakTimestampTrigger", *(_DWORD *)(a1 + 40));
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "epochFirstTimestamp", *(void *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_1010B55EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010B5E14(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x400) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(result + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_1010B5F6C(uint64_t result)
{
  *(void *)uint64_t result = &off_101899918;
  *(void *)(result + 280) = 0LL;
  *(_DWORD *)(result + 28_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010B5F88(PB::Base *a1)
{
}

float sub_1010B5F9C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899918;
  unint64_t v2 = (uint64_t *)(a1 + 280);
  *(void *)(a1 + 280) = 0LL;
  *(_DWORD *)(a1 + 28_Block_object_dispose(va, 8) = 0;
  uint64_t v3 = (uint64_t *)(a2 + 280);
  uint64_t v4 = *(void *)(a2 + 280);
  if ((v4 & 1) != 0)
  {
    __int16 v6 = 0;
    uint64_t v8 = *(void *)(a2 + 8);
    *(_WORD *)(a1 + 28_Block_object_dispose(va, 8) = 0;
    uint64_t v5 = 1LL;
    *unint64_t v2 = 1LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
    uint64_t v4 = *v3;
    __int16 v7 = *(_WORD *)(a2 + 288);
    if ((*v3 & 0x8000000000000LL) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v5 = 0LL;
  __int16 v6 = 0;
  __int16 v7 = *(_WORD *)(a2 + 288);
  if ((v4 & 0x8000000000000LL) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 216);
    v5 |= 0x8000000000000uLL;
    *unint64_t v2 = v5;
    *(_WORD *)(a1 + 28_Block_object_dispose(va, 8) = 0;
    *(float *)(a1 + 216) = result;
    uint64_t v4 = *v3;
    __int16 v7 = *(_WORD *)(a2 + 288);
  }

LABEL_144:
  float result = *(float *)(a2 + 192);
  v5 |= 0x200000000000uLL;
  *unint64_t v2 = v5;
  *(_WORD *)(a1 + 28_Block_object_dispose(va, 8) = v6;
  *(float *)(a1 + 192) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x400000000000LL) == 0)
  {
LABEL_71:
    if ((v4 & 0x800000000000LL) == 0) {
      goto LABEL_72;
    }
    goto LABEL_146;
  }

  PB::TextFormatter::format(this, "maxAudioChaos", *(float *)(a1 + 232));
  __int16 v6 = *v5;
  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000000000000LL) == 0)
  {
LABEL_70:
    if ((v6 & 0x200000000000000LL) == 0) {
      goto LABEL_71;
    }
    goto LABEL_146;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 200), 0x41u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000000000LL) == 0)
  {
LABEL_70:
    if ((v5 & 0x1000000000000LL) == 0) {
      goto LABEL_71;
    }
    goto LABEL_146;
  }

  float result = *(float *)(a2 + 176);
  v5 |= 0x20000000000uLL;
  *unint64_t v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 176) = result;
  LOWORD(v_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000000LL) == 0)
  {
LABEL_64:
    if ((v4 & 0x1000000000LL) == 0) {
      goto LABEL_65;
    }
    goto LABEL_146;
  }

  PB::TextFormatter::format(this, "lowSenseWithAudiodvThreshold2", *(float *)(a1 + 212));
  __int16 v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  __int16 v6 = *v5;
  if ((*v5 & 0x8000000000000LL) == 0)
  {
LABEL_63:
    if ((v6 & 0x10000000000000LL) == 0) {
      goto LABEL_64;
    }
    goto LABEL_146;
  }

  float result = PB::Writer::write(this, *(float *)(v3 + 176), 0xFEu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000000LL) == 0)
  {
LABEL_64:
    if ((v5 & 0x1000000000LL) == 0) {
      goto LABEL_65;
    }
    goto LABEL_146;
  }

  uint64_t v33 = *(_BYTE *)(a2 + 340);
  v6 |= 0x20000000uLL;
  *unint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 340) = v33;
  uint64_t v4 = *v3;
  __int16 v7 = *(void *)(a2 + 364);
  if ((v7 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v7 & 0x2000000000LL) == 0) {
      goto LABEL_40;
    }
    goto LABEL_146;
  }

  PB::TextFormatter::format(this, "lastRemoteRealTriggerTimestamp", *(void *)(a1 + 32));
  __int16 v7 = *v5;
  __int16 v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x10) == 0)
  {
LABEL_43:
    if ((v7 & 0x20) == 0) {
      goto LABEL_44;
    }
    goto LABEL_146;
  }

  float result = PB::Writer::write(this, *(_BYTE *)(v3 + 340), 0x12Eu);
  uint64_t v5 = *v4;
  __int16 v6 = v4[1];
  if ((v6 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000LL) == 0) {
      goto LABEL_40;
    }
    goto LABEL_146;
  }

  unint64_t v77 = *(_BYTE *)(a2 + 175);
  v3 |= 0x10000000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 175) = v77;
  LOWORD(v5) = *(_WORD *)(a2 + 212);
  unint64_t v2 = *(void *)(a2 + 204);
  if ((v5 & 0x100) == 0)
  {
LABEL_66:
    if ((v2 & 0x100000000000000LL) == 0) {
      goto LABEL_67;
    }
    goto LABEL_146;
  }

  PB::TextFormatter::format(this, "maxEnergy1", *(float *)(a1 + 116));
  __int16 v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_146;
  }

  float result = PB::Writer::write(this, *(_BYTE *)(v3 + 190), 0x462u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_66:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_146;
  }

              *(void *)(a1 + _Block_object_dispose(va, 8) = v24;
              goto LABEL_165;
            case 2u:
              *(_DWORD *)(a1 + 84) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                char v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                char v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 80) = v28;
              goto LABEL_165;
            case 3u:
              *(_DWORD *)(a1 + 84) |= 4u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v33 = 0LL;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_149;
                  }

                  unint64_t v61 = v29++;
                  char v62 = *(_BYTE *)(v30 + v61);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  char v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_148:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_149;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_148;
              }

              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0LL;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_149;
                }
                v31 += 7;
                unint64_t v29 = v2;
                char v14 = v32++ > 8;
              }

              while (!v14);
              LODWORD(v33) = 0;
LABEL_149:
              *(_DWORD *)(a1 + 20) = v33;
              goto LABEL_165;
            case 4u:
              *(_DWORD *)(a1 + 84) |= 0x2000u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v39 = 0LL;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_154;
                  }

                  unint64_t v65 = v35++;
                  char v66 = *(_BYTE *)(v36 + v65);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  char v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_153:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_154;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_153;
              }

              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0LL;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_154;
                }
                v37 += 7;
                unint64_t v35 = v2;
                char v14 = v38++ > 8;
              }

              while (!v14);
              LODWORD(v39) = 0;
LABEL_154:
              *(_DWORD *)(a1 + 64) = v39;
              goto LABEL_165;
            case 5u:
              *(_DWORD *)(a1 + 84) |= 0x1000u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v45 = 0LL;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_159;
                  }

                  unint64_t v69 = v41++;
                  char v70 = *(_BYTE *)(v42 + v69);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  char v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_158:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_159;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_158;
              }

              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0LL;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_159;
                }
                v43 += 7;
                unint64_t v41 = v2;
                char v14 = v44++ > 8;
              }

              while (!v14);
              LODWORD(v45) = 0;
LABEL_159:
              *(_DWORD *)(a1 + 60) = v45;
              goto LABEL_165;
            case 6u:
              *(_DWORD *)(a1 + 84) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 7u:
              *(_DWORD *)(a1 + 84) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 8u:
              *(_DWORD *)(a1 + 84) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 9u:
              *(_DWORD *)(a1 + 84) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xAu:
              *(_DWORD *)(a1 + 84) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xBu:
              *(_DWORD *)(a1 + 84) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xCu:
              *(_DWORD *)(a1 + 84) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xDu:
              *(_DWORD *)(a1 + 84) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xEu:
              *(_DWORD *)(a1 + 84) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xFu:
              *(_DWORD *)(a1 + 84) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0x10u:
              *(_DWORD *)(a1 + 84) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0x11u:
              *(_DWORD *)(a1 + 84) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_139:
                unint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_89:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_165;
            case 0x12u:
              *(_DWORD *)(a1 + 84) |= 2u;
              unint64_t v47 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5LL || v47 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v51 = 0LL;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_164;
                  }

                  unint64_t v73 = v47++;
                  char v74 = *(_BYTE *)(v48 + v73);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  char v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_163:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_164;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_163;
              }

              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0LL;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                char v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_164;
                }
                v49 += 7;
                unint64_t v47 = v2;
                char v14 = v50++ > 8;
              }

              while (!v14);
              LODWORD(v51) = 0;
LABEL_164:
              *(_DWORD *)(a1 + 16) = v51;
LABEL_165:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x13u:
              *(_DWORD *)(a1 + 84) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v54 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v53 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v54 = v53 != 0;
              }

              *(_BYTE *)(a1 + 81) = v54;
              goto LABEL_165;
            default:
              float result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_165;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

uint64_t sub_1010B6A70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 280);
  uint64_t v6 = *(void *)(a1 + 280);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "audioDvChaosThreshold", *(float *)(a1 + 16));
    uint64_t v6 = *v5;
    __int16 v7 = *(_WORD *)(a1 + 288);
    if ((*v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v7 = *(_WORD *)(a1 + 288);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "audioDvChaosThresholdCenter", *(float *)(a1 + 20));
    uint64_t v6 = *v5;
    __int16 v7 = *(_WORD *)(a1 + 288);
  }

uint64_t sub_1010B7558(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = a1 + 280;
    do
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        unint64_t v12 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v18 = v2 + 1;
          char v19 = *(_BYTE *)(v9 + v2);
          *((void *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0) {
            goto LABEL_21;
          }
          v16 += 7;
          unint64_t v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            unint64_t v12 = 0LL;
            goto LABEL_21;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }

LABEL_313:
            *(void *)(a1 + _Block_object_dispose(va, 8) = v27;
            goto LABEL_305;
          case 2:
            *(void *)v8 |= 0x8000000000000uLL;
            unint64_t v31 = *((void *)this + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 216) = *(_DWORD *)(*(void *)this + v31);
            goto LABEL_304;
          case 3:
            *(_WORD *)(v8 + 8) |= 0x80u;
            unint64_t v32 = *((void *)this + 1);
            if (v32 >= *((void *)this + 2))
            {
              BOOL v35 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v33 = v32 + 1;
              int v34 = *(unsigned __int8 *)(*(void *)this + v32);
              *((void *)this + 1) = v33;
              BOOL v35 = v34 != 0;
            }

            *(_BYTE *)(a1 + 275) = v35;
            goto LABEL_305;
          case 4:
            *(_WORD *)(v8 + 8) |= 0x40u;
            unint64_t v36 = *((void *)this + 1);
            if (v36 >= *((void *)this + 2))
            {
              BOOL v39 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v37 = v36 + 1;
              int v38 = *(unsigned __int8 *)(*(void *)this + v36);
              *((void *)this + 1) = v37;
              BOOL v39 = v38 != 0;
            }

            *(_BYTE *)(a1 + 274) = v39;
            goto LABEL_305;
          case 5:
            *(_WORD *)(v8 + 8) |= 0x10u;
            unint64_t v40 = *((void *)this + 1);
            if (v40 >= *((void *)this + 2))
            {
              BOOL v43 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v41 = v40 + 1;
              int v42 = *(unsigned __int8 *)(*(void *)this + v40);
              *((void *)this + 1) = v41;
              BOOL v43 = v42 != 0;
            }

            *(_BYTE *)(a1 + 272) = v43;
            goto LABEL_305;
          case 6:
            *(_WORD *)(v8 + 8) |= 2u;
            unint64_t v44 = *((void *)this + 1);
            if (v44 >= *((void *)this + 2))
            {
              BOOL v47 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v45 = v44 + 1;
              int v46 = *(unsigned __int8 *)(*(void *)this + v44);
              *((void *)this + 1) = v45;
              BOOL v47 = v46 != 0;
            }

            *(_BYTE *)(a1 + 269) = v47;
            goto LABEL_305;
          case 7:
            *(_WORD *)(v8 + 8) |= 1u;
            unint64_t v48 = *((void *)this + 1);
            if (v48 >= *((void *)this + 2))
            {
              BOOL v51 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v49 = v48 + 1;
              int v50 = *(unsigned __int8 *)(*(void *)this + v48);
              *((void *)this + 1) = v49;
              BOOL v51 = v50 != 0;
            }

            *(_BYTE *)(a1 + 26_Block_object_dispose(va, 8) = v51;
            goto LABEL_305;
          case 8:
            *(void *)v8 |= 0x40000uLL;
            unint64_t v52 = *((void *)this + 1);
            unint64_t v53 = *((void *)this + 2);
            uint64_t v54 = *(void *)this;
            if (v52 <= 0xFFFFFFFFFFFFFFF5LL && v52 + 10 <= v53)
            {
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0LL;
              do
              {
                unint64_t v58 = v52 + 1;
                *((void *)this + 1) = v52 + 1;
                char v59 = *(_BYTE *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0) {
                  goto LABEL_317;
                }
                v55 += 7;
                unint64_t v52 = v58;
                BOOL v15 = v56++ > 8;
              }

              while (!v15);
LABEL_280:
              LODWORD(v57) = 0;
              goto LABEL_317;
            }

            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v57 = 0LL;
            if (v53 <= v52) {
              unint64_t v53 = *((void *)this + 1);
            }
            while (2)
            {
              if (v53 == v52)
              {
                LODWORD(v57) = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v162 = v52 + 1;
                char v163 = *(_BYTE *)(v54 + v52);
                *((void *)this + 1) = v162;
                v57 |= (unint64_t)(v163 & 0x7F) << v160;
                if (v163 < 0)
                {
                  v160 += 7;
                  unint64_t v52 = v162;
                  BOOL v15 = v161++ > 8;
                  if (v15) {
                    goto LABEL_280;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v57) = 0;
                }
              }

              break;
            }

LABEL_317:
            *(_DWORD *)(a1 + 84) = v57;
            goto LABEL_305;
          case 9:
            *(_WORD *)(v8 + 8) |= 0x100u;
            unint64_t v60 = *((void *)this + 1);
            if (v60 >= *((void *)this + 2))
            {
              BOOL v63 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v61 = v60 + 1;
              int v62 = *(unsigned __int8 *)(*(void *)this + v60);
              *((void *)this + 1) = v61;
              BOOL v63 = v62 != 0;
            }

            *(_BYTE *)(a1 + 276) = v63;
            goto LABEL_305;
          case 10:
            *(_WORD *)(v8 + 8) |= 8u;
            unint64_t v64 = *((void *)this + 1);
            if (v64 >= *((void *)this + 2))
            {
              BOOL v67 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v65 = v64 + 1;
              int v66 = *(unsigned __int8 *)(*(void *)this + v64);
              *((void *)this + 1) = v65;
              BOOL v67 = v66 != 0;
            }

            *(_BYTE *)(a1 + 271) = v67;
            goto LABEL_305;
          case 11:
            *(void *)v8 |= 0x20000uLL;
            unint64_t v68 = *((void *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v68);
            goto LABEL_304;
          case 12:
            *(void *)v8 |= 0x10000uLL;
            unint64_t v69 = *((void *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v69);
            goto LABEL_304;
          case 13:
            *(void *)v8 |= 0x400000uLL;
            unint64_t v70 = *((void *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v70);
            goto LABEL_304;
          case 14:
            *(void *)v8 |= 0x8000000uLL;
            unint64_t v71 = *((void *)this + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v71);
            goto LABEL_304;
          case 15:
            *(void *)v8 |= (unint64_t)&_mh_execute_header;
            unint64_t v72 = *((void *)this + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v72);
            goto LABEL_304;
          case 16:
            *(void *)v8 |= 0x10000000000000uLL;
            unint64_t v73 = *((void *)this + 1);
            if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 220) = *(_DWORD *)(*(void *)this + v73);
            goto LABEL_304;
          case 17:
            *(void *)v8 |= 0x800000uLL;
            unint64_t v74 = *((void *)this + 1);
            if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v74);
            goto LABEL_304;
          case 18:
            *(void *)v8 |= 0x10000000uLL;
            unint64_t v75 = *((void *)this + 1);
            if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v75);
            goto LABEL_304;
          case 19:
            *(void *)v8 |= 0x200000000uLL;
            unint64_t v76 = *((void *)this + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v76);
            goto LABEL_304;
          case 20:
            *(void *)v8 |= 0x20000000000000uLL;
            unint64_t v77 = *((void *)this + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 224) = *(_DWORD *)(*(void *)this + v77);
            goto LABEL_304;
          case 21:
            *(void *)v8 |= 0x1000000uLL;
            unint64_t v78 = *((void *)this + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v78);
            goto LABEL_304;
          case 22:
            *(void *)v8 |= 0x20000000uLL;
            unint64_t v79 = *((void *)this + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v79);
            goto LABEL_304;
          case 23:
            *(void *)v8 |= 0x400000000uLL;
            unint64_t v80 = *((void *)this + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v80);
            goto LABEL_304;
          case 24:
            *(void *)v8 |= 0x40000000000000uLL;
            unint64_t v81 = *((void *)this + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 22_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v81);
            goto LABEL_304;
          case 25:
            *(void *)v8 |= 0x100000000000000uLL;
            unint64_t v82 = *((void *)this + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(void *)this + v82);
            goto LABEL_304;
          case 26:
            *(void *)v8 |= 0x80000000000000uLL;
            unint64_t v83 = *((void *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(void *)this + v83);
            goto LABEL_304;
          case 27:
            *(void *)v8 |= 0x200000000000000uLL;
            unint64_t v84 = *((void *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 240) = *(_DWORD *)(*(void *)this + v84);
            goto LABEL_304;
          case 28:
            *(void *)v8 |= 0x40uLL;
            unint64_t v85 = *((void *)this + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v85);
            goto LABEL_304;
          case 29:
            *(void *)v8 |= 2uLL;
            unint64_t v86 = *((void *)this + 1);
            if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v86);
            goto LABEL_304;
          case 30:
            *(void *)v8 |= 0x8000uLL;
            unint64_t v87 = *((void *)this + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v87);
            goto LABEL_304;
          case 31:
            *(_WORD *)(v8 + 8) |= 0x800u;
            unint64_t v88 = *((void *)this + 1);
            if (v88 >= *((void *)this + 2))
            {
              BOOL v91 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v89 = v88 + 1;
              int v90 = *(unsigned __int8 *)(*(void *)this + v88);
              *((void *)this + 1) = v89;
              BOOL v91 = v90 != 0;
            }

            *(_BYTE *)(a1 + 279) = v91;
            goto LABEL_305;
          case 32:
            *(_WORD *)(v8 + 8) |= 4u;
            unint64_t v92 = *((void *)this + 1);
            if (v92 >= *((void *)this + 2))
            {
              BOOL v95 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v93 = v92 + 1;
              int v94 = *(unsigned __int8 *)(*(void *)this + v92);
              *((void *)this + 1) = v93;
              BOOL v95 = v94 != 0;
            }

            *(_BYTE *)(a1 + 270) = v95;
            goto LABEL_305;
          case 33:
            *(void *)v8 |= 0x80uLL;
            unint64_t v96 = *((void *)this + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v96);
            goto LABEL_304;
          case 34:
            *(void *)v8 |= 0x400uLL;
            unint64_t v97 = *((void *)this + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v97);
            goto LABEL_304;
          case 35:
            *(void *)v8 |= 0x200uLL;
            unint64_t v98 = *((void *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v98);
            goto LABEL_304;
          case 36:
            *(void *)v8 |= 0x100uLL;
            unint64_t v99 = *((void *)this + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v99);
            goto LABEL_304;
          case 37:
            *(void *)v8 |= 4uLL;
            unint64_t v100 = *((void *)this + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v100);
            goto LABEL_304;
          case 38:
            *(void *)v8 |= 0x20uLL;
            unint64_t v101 = *((void *)this + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v101);
            goto LABEL_304;
          case 39:
            *(void *)v8 |= 0x10uLL;
            unint64_t v102 = *((void *)this + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v102);
            goto LABEL_304;
          case 40:
            *(void *)v8 |= 8uLL;
            unint64_t v103 = *((void *)this + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v103);
            goto LABEL_304;
          case 41:
            *(void *)v8 |= 0x800uLL;
            unint64_t v104 = *((void *)this + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v104);
            goto LABEL_304;
          case 42:
            *(void *)v8 |= 0x4000uLL;
            unint64_t v105 = *((void *)this + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v105);
            goto LABEL_304;
          case 43:
            *(void *)v8 |= 0x2000uLL;
            unint64_t v106 = *((void *)this + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v106);
            goto LABEL_304;
          case 44:
            *(void *)v8 |= 0x1000uLL;
            unint64_t v107 = *((void *)this + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v107);
            goto LABEL_304;
          case 45:
            *(void *)v8 |= 0x2000000uLL;
            unint64_t v108 = *((void *)this + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v108);
            goto LABEL_304;
          case 46:
            *(void *)v8 |= 0x40000000uLL;
            unint64_t v109 = *((void *)this + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v109);
            goto LABEL_304;
          case 47:
            *(void *)v8 |= 0x800000000uLL;
            unint64_t v110 = *((void *)this + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v110);
            goto LABEL_304;
          case 48:
            *(void *)v8 |= 0x2000000000uLL;
            unint64_t v111 = *((void *)this + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v111);
            goto LABEL_304;
          case 49:
            *(void *)v8 |= 0x4000000uLL;
            unint64_t v112 = *((void *)this + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v112);
            goto LABEL_304;
          case 50:
            *(void *)v8 |= 0x80000000uLL;
            unint64_t v113 = *((void *)this + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v113);
            goto LABEL_304;
          case 51:
            *(void *)v8 |= 0x1000000000uLL;
            unint64_t v114 = *((void *)this + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v114);
            goto LABEL_304;
          case 52:
            *(void *)v8 |= 0x4000000000uLL;
            unint64_t v115 = *((void *)this + 1);
            if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v115);
            goto LABEL_304;
          case 53:
            *(_WORD *)(v8 + 8) |= 0x20u;
            unint64_t v116 = *((void *)this + 1);
            if (v116 >= *((void *)this + 2))
            {
              BOOL v119 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v117 = v116 + 1;
              int v118 = *(unsigned __int8 *)(*(void *)this + v116);
              *((void *)this + 1) = v117;
              BOOL v119 = v118 != 0;
            }

            *(_BYTE *)(a1 + 273) = v119;
            goto LABEL_305;
          case 54:
            *(void *)v8 |= 0x1000000000000000uLL;
            unint64_t v120 = *((void *)this + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 252) = *(_DWORD *)(*(void *)this + v120);
            goto LABEL_304;
          case 55:
            *(void *)v8 |= 0x400000000000000uLL;
            unint64_t v121 = *((void *)this + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 244) = *(_DWORD *)(*(void *)this + v121);
            goto LABEL_304;
          case 56:
            *(_WORD *)(v8 + 8) |= 0x200u;
            unint64_t v122 = *((void *)this + 1);
            if (v122 >= *((void *)this + 2))
            {
              BOOL v125 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v123 = v122 + 1;
              int v124 = *(unsigned __int8 *)(*(void *)this + v122);
              *((void *)this + 1) = v123;
              BOOL v125 = v124 != 0;
            }

            *(_BYTE *)(a1 + 277) = v125;
            goto LABEL_305;
          case 57:
            *(void *)v8 |= 0x8000000000uLL;
            unint64_t v126 = *((void *)this + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v126);
            goto LABEL_304;
          case 58:
            *(void *)v8 |= 0x10000000000uLL;
            unint64_t v127 = *((void *)this + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v127);
            goto LABEL_304;
          case 59:
            *(void *)v8 |= 0x20000000000uLL;
            unint64_t v128 = *((void *)this + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v128);
            goto LABEL_304;
          case 60:
            *(void *)v8 |= 0x80000000000uLL;
            unint64_t v129 = *((void *)this + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(void *)this + v129);
            goto LABEL_304;
          case 61:
            *(void *)v8 |= 0x40000000000uLL;
            unint64_t v130 = *((void *)this + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(void *)this + v130);
            goto LABEL_304;
          case 62:
            *(void *)v8 |= 0x100000000000uLL;
            unint64_t v131 = *((void *)this + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 18_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v131);
            goto LABEL_304;
          case 63:
            *(void *)v8 |= 0x200000000000uLL;
            unint64_t v132 = *((void *)this + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(void *)this + v132);
            goto LABEL_304;
          case 64:
            *(void *)v8 |= 0x400000000000uLL;
            unint64_t v133 = *((void *)this + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(void *)this + v133);
            goto LABEL_304;
          case 65:
            *(void *)v8 |= 0x800000000000uLL;
            unint64_t v134 = *((void *)this + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(void *)this + v134);
            goto LABEL_304;
          case 66:
            *(void *)v8 |= 0x2000000000000uLL;
            unint64_t v135 = *((void *)this + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v135);
            goto LABEL_304;
          case 67:
            *(void *)v8 |= 0x1000000000000uLL;
            unint64_t v136 = *((void *)this + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(void *)this + v136);
            goto LABEL_304;
          case 68:
            *(void *)v8 |= 0x4000000000000uLL;
            unint64_t v137 = *((void *)this + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(void *)this + v137);
            goto LABEL_304;
          case 69:
            *(void *)v8 |= 0x800000000000000uLL;
            unint64_t v138 = *((void *)this + 1);
            unint64_t v139 = *((void *)this + 2);
            uint64_t v140 = *(void *)this;
            if (v138 <= 0xFFFFFFFFFFFFFFF5LL && v138 + 10 <= v139)
            {
              char v141 = 0;
              unsigned int v142 = 0;
              uint64_t v143 = 0LL;
              do
              {
                unint64_t v144 = v138 + 1;
                *((void *)this + 1) = v138 + 1;
                char v145 = *(_BYTE *)(v140 + v138);
                v143 |= (unint64_t)(v145 & 0x7F) << v141;
                if ((v145 & 0x80) == 0) {
                  goto LABEL_321;
                }
                v141 += 7;
                unint64_t v138 = v144;
                BOOL v15 = v142++ > 8;
              }

              while (!v15);
LABEL_299:
              LODWORD(v143) = 0;
              goto LABEL_321;
            }

            char v164 = 0;
            unsigned int v165 = 0;
            uint64_t v143 = 0LL;
            if (v139 <= v138) {
              unint64_t v139 = *((void *)this + 1);
            }
            break;
          case 70:
            *(_WORD *)(v8 + 8) |= 0x400u;
            unint64_t v146 = *((void *)this + 1);
            if (v146 >= *((void *)this + 2))
            {
              BOOL v149 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v147 = v146 + 1;
              int v148 = *(unsigned __int8 *)(*(void *)this + v146);
              *((void *)this + 1) = v147;
              BOOL v149 = v148 != 0;
            }

            *(_BYTE *)(a1 + 27_Block_object_dispose(va, 8) = v149;
            goto LABEL_305;
          case 71:
            *(void *)v8 |= 0x4000000000000000uLL;
            unint64_t v150 = *((void *)this + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 260) = *(_DWORD *)(*(void *)this + v150);
            goto LABEL_304;
          case 72:
            *(void *)v8 |= 0x8000000000000000LL;
            unint64_t v151 = *((void *)this + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((void *)this + 2)) {
              goto LABEL_248;
            }
            *(_DWORD *)(a1 + 264) = *(_DWORD *)(*(void *)this + v151);
            goto LABEL_304;
          case 73:
            *(void *)v8 |= 0x2000000000000000uLL;
            unint64_t v152 = *((void *)this + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((void *)this + 2))
            {
LABEL_248:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_305;
            }

            *(_DWORD *)(a1 + 256) = *(_DWORD *)(*(void *)this + v152);
            goto LABEL_304;
          default:
            goto LABEL_255;
        }

        while (1)
        {
          if (v139 == v138)
          {
            LODWORD(v143) = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_321;
          }

          unint64_t v166 = v138 + 1;
          char v167 = *(_BYTE *)(v140 + v138);
          *((void *)this + 1) = v166;
          v143 |= (unint64_t)(v167 & 0x7F) << v164;
          if ((v167 & 0x80) == 0) {
            break;
          }
          v164 += 7;
          unint64_t v138 = v166;
          BOOL v15 = v165++ > 8;
          if (v15) {
            goto LABEL_299;
          }
        }

        if (*((_BYTE *)this + 24)) {
          LODWORD(v143) = 0;
        }
LABEL_321:
        *(_DWORD *)(a1 + 24_Block_object_dispose(va, 8) = v143;
        goto LABEL_305;
      }

      switch((_DWORD)v21)
      {
        case 0x186A1:
          *(void *)v8 |= 0x80000uLL;
          unint64_t v153 = *((void *)this + 1);
          if (v153 <= 0xFFFFFFFFFFFFFFFBLL && v153 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v153);
            goto LABEL_304;
          }

          break;
        case 0x186A2:
          *(void *)v8 |= 0x100000uLL;
          unint64_t v154 = *((void *)this + 1);
          if (v154 <= 0xFFFFFFFFFFFFFFFBLL && v154 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v154);
            goto LABEL_304;
          }

          break;
        case 0x186A3:
          *(void *)v8 |= 0x200000uLL;
          unint64_t v30 = *((void *)this + 1);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v30);
LABEL_304:
            *((void *)this + 1) += 4LL;
            goto LABEL_305;
          }

          break;
        default:
LABEL_255:
          uint64_t result = PB::Reader::skip(this, v21, v12 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_305;
      }

      *((_BYTE *)this + 24) = 1;
LABEL_305:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }

    while (v2 < v3 && v4 == 0);
  }

  return v4 == 0;
}

uint64_t sub_1010B8AA8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = (uint64_t *)(result + 280);
  uint64_t v5 = *(void *)(result + 280);
  if ((v5 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    uint64_t v5 = *v4;
    __int16 v6 = *((_WORD *)v4 + 4);
    if ((*v4 & 0x8000000000000LL) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v6 = *(_WORD *)(result + 288);
  if ((v5 & 0x8000000000000LL) != 0)
  {
LABEL_5:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 216), 2u);
    uint64_t v5 = *v4;
    __int16 v6 = *((_WORD *)v4 + 4);
  }

uint64_t sub_1010B9450(uint64_t result)
{
  *(void *)uint64_t result = &off_101899950;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010B9468(PB::Base *a1)
{
}

uint64_t sub_1010B947C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899950;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = 1;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(result + 20) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010B9524(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configThreshold1", *(float *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "debugX", *(float *)(a1 + 12));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "outputA", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010B95F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010B9A00(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8), 0x186A0u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 0x186A1u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1010B9AC8(uint64_t result)
{
  *(void *)uint64_t result = &off_101899988;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010B9AE0(PB::Base *a1)
{
}

uint64_t sub_1010B9AF4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899988;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = 1;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(result + 20) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010B9B9C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configThreshold1", *(float *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "debugX", *(float *)(a1 + 12));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "outputA", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010B9C6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010BA078(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8), 0x186A0u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 0x186A1u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1010BA140(uint64_t result)
{
  *(void *)uint64_t result = &off_1018999C0;
  *(_DWORD *)(result + 324) = 0;
  *(void *)(result + 316) = 0LL;
  return result;
}

void sub_1010BA160(PB::Base *a1)
{
}

float sub_1010BA174(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018999C0;
  unint64_t v2 = (uint64_t *)(a1 + 316);
  *(_DWORD *)(a1 + 324) = 0;
  *(void *)(a1 + 316) = 0LL;
  uint64_t v3 = (uint64_t *)(a2 + 316);
  uint64_t v4 = *(void *)(a2 + 316);
  if ((v4 & 1) != 0)
  {
    unint64_t v6 = 0LL;
    unint64_t v8 = *(void *)(a2 + 8);
    *(_BYTE *)(a1 + 326) = 0;
    *(_WORD *)(a1 + 324) = 0;
    uint64_t v5 = 1LL;
    *unint64_t v2 = 1LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
    LODWORD(v_Block_object_dispose(va, 8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
    uint64_t v4 = *v3;
    if ((*(_WORD *)(a2 + 324) & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v5 = 0LL;
  unint64_t v6 = 0LL;
  int v7 = *(unsigned __int16 *)(a2 + 324);
  LODWORD(v_Block_object_dispose(va, 8) = v7 | (*(unsigned __int8 *)(a2 + 326) << 16);
  if ((v7 & 0x4000) != 0)
  {
LABEL_5:
    char v9 = *(_BYTE *)(a2 + 309);
    unint64_t v6 = 0x4000LL;
    *unint64_t v2 = v5;
    *(_BYTE *)(a1 + 326) = 0;
    *(_WORD *)(a1 + 324) = 0x4000;
    *(_BYTE *)(a1 + 309) = v9;
    LODWORD(v_Block_object_dispose(va, 8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
    uint64_t v4 = *v3;
  }

uint64_t sub_1010BB270(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 316);
  uint64_t v6 = *(void *)(a1 + 316);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cumulativeRotation", *(float *)(a1 + 16));
    int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
    uint64_t v6 = *v5;
    if ((*v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "cumulativeRotationThreshold", *(float *)(a1 + 20));
    int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
    uint64_t v6 = *v5;
  }

uint64_t sub_1010BC0E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = a1 + 316;
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }

LABEL_331:
            *(_DWORD *)(a1 + 36) = v52;
            goto LABEL_323;
          case 108:
            char v55 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x400u;
            *(_BYTE *)(v8 + 10) = v55;
            unint64_t v56 = *((void *)this + 1);
            if (v56 >= *((void *)this + 2))
            {
              BOOL v59 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v57 = v56 + 1;
              int v58 = *(unsigned __int8 *)(*(void *)this + v56);
              *((void *)this + 1) = v57;
              BOOL v59 = v58 != 0;
            }

            *(_BYTE *)(a1 + 305) = v59;
            goto LABEL_323;
          case 109:
            *(void *)v8 |= 0x20uLL;
            unint64_t v60 = *((void *)this + 1);
            if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v60);
            goto LABEL_322;
          case 110:
            *(void *)v8 |= 0x2000000uLL;
            unint64_t v61 = *((void *)this + 1);
            if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v61);
            goto LABEL_322;
          case 111:
            *(void *)v8 |= 0x1000000uLL;
            unint64_t v62 = *((void *)this + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v62);
            goto LABEL_322;
          case 112:
            *(void *)v8 |= 0x4000000uLL;
            unint64_t v63 = *((void *)this + 1);
            if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v63);
            goto LABEL_322;
          case 113:
            *(void *)v8 |= 0x8000uLL;
            unint64_t v64 = *((void *)this + 1);
            if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v64);
            goto LABEL_322;
          case 114:
            *(void *)v8 |= 0x400uLL;
            unint64_t v65 = *((void *)this + 1);
            if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v65);
            goto LABEL_322;
          case 115:
            *(void *)v8 |= 0x200000uLL;
            unint64_t v66 = *((void *)this + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v66);
            goto LABEL_322;
          case 116:
            int v67 = *(unsigned __int16 *)(v8 + 8);
            unsigned int v68 = (v67 | (*(unsigned __int8 *)(v8 + 10) << 16) | 0x10000u) >> 16;
            *(_WORD *)(v8 + _Block_object_dispose(va, 8) = v67;
            *(_BYTE *)(v8 + 10) = v68;
            unint64_t v69 = *((void *)this + 1);
            if (v69 >= *((void *)this + 2))
            {
              BOOL v72 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v70 = v69 + 1;
              int v71 = *(unsigned __int8 *)(*(void *)this + v69);
              *((void *)this + 1) = v70;
              BOOL v72 = v71 != 0;
            }

            *(_BYTE *)(a1 + 311) = v72;
            goto LABEL_323;
          case 117:
            char v73 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x2000u;
            *(_BYTE *)(v8 + 10) = v73;
            unint64_t v74 = *((void *)this + 1);
            if (v74 >= *((void *)this + 2))
            {
              BOOL v77 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v75 = v74 + 1;
              int v76 = *(unsigned __int8 *)(*(void *)this + v74);
              *((void *)this + 1) = v75;
              BOOL v77 = v76 != 0;
            }

            *(_BYTE *)(a1 + 30_Block_object_dispose(va, 8) = v77;
            goto LABEL_323;
          case 118:
            char v78 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x1000u;
            *(_BYTE *)(v8 + 10) = v78;
            unint64_t v79 = *((void *)this + 1);
            if (v79 >= *((void *)this + 2))
            {
              BOOL v82 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v80 = v79 + 1;
              int v81 = *(unsigned __int8 *)(*(void *)this + v79);
              *((void *)this + 1) = v80;
              BOOL v82 = v81 != 0;
            }

            *(_BYTE *)(a1 + 307) = v82;
            goto LABEL_323;
          case 119:
            char v83 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 2u;
            *(_BYTE *)(v8 + 10) = v83;
            unint64_t v84 = *((void *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 272) = *(_DWORD *)(*(void *)this + v84);
            goto LABEL_322;
          case 120:
            *(void *)v8 |= 0x8000000000000000LL;
            unint64_t v85 = *((void *)this + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 264) = *(_DWORD *)(*(void *)this + v85);
            goto LABEL_322;
          case 121:
            char v86 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 1u;
            *(_BYTE *)(v8 + 10) = v86;
            unint64_t v87 = *((void *)this + 1);
            unint64_t v88 = *((void *)this + 2);
            uint64_t v89 = *(void *)this;
            if (v87 <= 0xFFFFFFFFFFFFFFF5LL && v87 + 10 <= v88)
            {
              char v90 = 0;
              unsigned int v91 = 0;
              uint64_t v92 = 0LL;
              do
              {
                unint64_t v93 = v87 + 1;
                *((void *)this + 1) = v87 + 1;
                char v94 = *(_BYTE *)(v89 + v87);
                v92 |= (unint64_t)(v94 & 0x7F) << v90;
                if ((v94 & 0x80) == 0) {
                  goto LABEL_335;
                }
                v90 += 7;
                unint64_t v87 = v93;
                BOOL v15 = v91++ > 8;
              }

              while (!v15);
LABEL_309:
              LODWORD(v92) = 0;
              goto LABEL_335;
            }

            char v183 = 0;
            unsigned int v184 = 0;
            uint64_t v92 = 0LL;
            if (v88 <= v87) {
              unint64_t v88 = *((void *)this + 1);
            }
            break;
          case 122:
            int v95 = *(unsigned __int16 *)(v8 + 8);
            unsigned int v96 = (v95 | (*(unsigned __int8 *)(v8 + 10) << 16) | 0x40000u) >> 16;
            *(_WORD *)(v8 + _Block_object_dispose(va, 8) = v95;
            *(_BYTE *)(v8 + 10) = v96;
            unint64_t v97 = *((void *)this + 1);
            if (v97 >= *((void *)this + 2))
            {
              BOOL v100 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v98 = v97 + 1;
              int v99 = *(unsigned __int8 *)(*(void *)this + v97);
              *((void *)this + 1) = v98;
              BOOL v100 = v99 != 0;
            }

            *(_BYTE *)(a1 + 313) = v100;
            goto LABEL_323;
          case 201:
            *(void *)v8 |= 0x8000000uLL;
            unint64_t v101 = *((void *)this + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v101);
            goto LABEL_322;
          case 202:
            *(void *)v8 |= 0x40000000uLL;
            unint64_t v102 = *((void *)this + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v102);
            goto LABEL_322;
          case 203:
            *(void *)v8 |= 4uLL;
            unint64_t v103 = *((void *)this + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v103);
            goto LABEL_322;
          case 204:
            *(void *)v8 |= 0x1000000000000000uLL;
            unint64_t v104 = *((void *)this + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 252) = *(_DWORD *)(*(void *)this + v104);
            goto LABEL_322;
          case 205:
            char v105 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x40u;
            *(_BYTE *)(v8 + 10) = v105;
            unint64_t v106 = *((void *)this + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 292) = *(_DWORD *)(*(void *)this + v106);
            goto LABEL_322;
          case 206:
            *(void *)v8 |= 0x10000000uLL;
            unint64_t v107 = *((void *)this + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v107);
            goto LABEL_322;
          case 207:
            *(void *)v8 |= 0x80000000uLL;
            unint64_t v108 = *((void *)this + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v108);
            goto LABEL_322;
          case 208:
            *(void *)v8 |= 8uLL;
            unint64_t v109 = *((void *)this + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v109);
            goto LABEL_322;
          case 209:
            *(void *)v8 |= 0x2000000000000000uLL;
            unint64_t v110 = *((void *)this + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 256) = *(_DWORD *)(*(void *)this + v110);
            goto LABEL_322;
          case 210:
            char v111 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x80u;
            *(_BYTE *)(v8 + 10) = v111;
            unint64_t v112 = *((void *)this + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 296) = *(_DWORD *)(*(void *)this + v112);
            goto LABEL_322;
          case 231:
            *(void *)v8 |= 0x20000000uLL;
            unint64_t v113 = *((void *)this + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v113);
            goto LABEL_322;
          case 232:
            *(void *)v8 |= (unint64_t)&_mh_execute_header;
            unint64_t v114 = *((void *)this + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v114);
            goto LABEL_322;
          case 233:
            *(void *)v8 |= 0x10uLL;
            unint64_t v115 = *((void *)this + 1);
            if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v115);
            goto LABEL_322;
          case 234:
            *(void *)v8 |= 0x4000000000000000uLL;
            unint64_t v116 = *((void *)this + 1);
            if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 260) = *(_DWORD *)(*(void *)this + v116);
            goto LABEL_322;
          case 235:
            char v117 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x100u;
            *(_BYTE *)(v8 + 10) = v117;
            unint64_t v118 = *((void *)this + 1);
            if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 300) = *(_DWORD *)(*(void *)this + v118);
            goto LABEL_322;
          case 236:
            *(void *)v8 |= 0x1000uLL;
            unint64_t v119 = *((void *)this + 1);
            if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v119);
            goto LABEL_322;
          case 237:
            *(void *)v8 |= 0x10000uLL;
            unint64_t v120 = *((void *)this + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v120);
            goto LABEL_322;
          case 238:
            *(void *)v8 |= 0x4000uLL;
            unint64_t v121 = *((void *)this + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v121);
            goto LABEL_322;
          case 239:
            *(void *)v8 |= 0x2000uLL;
            unint64_t v122 = *((void *)this + 1);
            if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v122);
            goto LABEL_322;
          case 240:
            *(void *)v8 |= 0x80uLL;
            unint64_t v123 = *((void *)this + 1);
            if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v123);
            goto LABEL_322;
          case 241:
            *(void *)v8 |= 0x800uLL;
            unint64_t v124 = *((void *)this + 1);
            if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v124);
            goto LABEL_322;
          case 242:
            *(void *)v8 |= 0x200uLL;
            unint64_t v125 = *((void *)this + 1);
            if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v125);
            goto LABEL_322;
          case 243:
            *(void *)v8 |= 0x100uLL;
            unint64_t v126 = *((void *)this + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v126);
            goto LABEL_322;
          case 244:
            *(void *)v8 |= 0x20000uLL;
            unint64_t v127 = *((void *)this + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v127);
            goto LABEL_322;
          case 245:
            *(void *)v8 |= 0x100000uLL;
            unint64_t v128 = *((void *)this + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v128);
            goto LABEL_322;
          case 246:
            *(void *)v8 |= 0x80000uLL;
            unint64_t v129 = *((void *)this + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v129);
            goto LABEL_322;
          case 247:
            *(void *)v8 |= 0x40000uLL;
            unint64_t v130 = *((void *)this + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v130);
            goto LABEL_322;
          case 248:
            *(void *)v8 |= 0x400000uLL;
            unint64_t v131 = *((void *)this + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v131);
            goto LABEL_322;
          case 249:
            *(void *)v8 |= 0x800000uLL;
            unint64_t v132 = *((void *)this + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v132);
            goto LABEL_322;
          case 250:
            *(void *)v8 |= 0x200000000uLL;
            unint64_t v133 = *((void *)this + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v133);
            goto LABEL_322;
          case 251:
            *(void *)v8 |= 0x800000000uLL;
            unint64_t v134 = *((void *)this + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v134);
            goto LABEL_322;
          case 252:
            *(void *)v8 |= 0x8000000000uLL;
            unint64_t v135 = *((void *)this + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v135);
            goto LABEL_322;
          case 253:
            *(void *)v8 |= 0x2000000000uLL;
            unint64_t v136 = *((void *)this + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v136);
            goto LABEL_322;
          case 254:
            *(void *)v8 |= 0x20000000000uLL;
            unint64_t v137 = *((void *)this + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v137);
            goto LABEL_322;
          case 255:
            *(void *)v8 |= 0x400000000uLL;
            unint64_t v138 = *((void *)this + 1);
            if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v138);
            goto LABEL_322;
          case 256:
            *(void *)v8 |= 0x1000000000uLL;
            unint64_t v139 = *((void *)this + 1);
            if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v139);
            goto LABEL_322;
          case 257:
            *(void *)v8 |= 0x10000000000uLL;
            unint64_t v140 = *((void *)this + 1);
            if (v140 > 0xFFFFFFFFFFFFFFFBLL || v140 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v140);
            goto LABEL_322;
          case 258:
            *(void *)v8 |= 0x4000000000uLL;
            unint64_t v141 = *((void *)this + 1);
            if (v141 > 0xFFFFFFFFFFFFFFFBLL || v141 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v141);
            goto LABEL_322;
          case 259:
            *(void *)v8 |= 0x40000000000uLL;
            unint64_t v142 = *((void *)this + 1);
            if (v142 > 0xFFFFFFFFFFFFFFFBLL || v142 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(void *)this + v142);
            goto LABEL_322;
          case 260:
            *(void *)v8 |= 0x2000000000000uLL;
            unint64_t v143 = *((void *)this + 1);
            if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 20_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v143);
            goto LABEL_322;
          case 261:
            *(void *)v8 |= 0x4000000000000uLL;
            unint64_t v144 = *((void *)this + 1);
            if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(void *)this + v144);
            goto LABEL_322;
          case 262:
            *(void *)v8 |= 0x100000000000uLL;
            unint64_t v145 = *((void *)this + 1);
            if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 18_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v145);
            goto LABEL_322;
          case 263:
            *(void *)v8 |= 0x80000000000uLL;
            unint64_t v146 = *((void *)this + 1);
            if (v146 > 0xFFFFFFFFFFFFFFFBLL || v146 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(void *)this + v146);
            goto LABEL_322;
          case 264:
            *(void *)v8 |= 0x1000000000000uLL;
            unint64_t v147 = *((void *)this + 1);
            if (v147 > 0xFFFFFFFFFFFFFFFBLL || v147 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(void *)this + v147);
            goto LABEL_322;
          case 265:
            *(void *)v8 |= 0x800000000000uLL;
            unint64_t v148 = *((void *)this + 1);
            if (v148 > 0xFFFFFFFFFFFFFFFBLL || v148 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(void *)this + v148);
            goto LABEL_322;
          case 266:
            *(void *)v8 |= 0x400000000000uLL;
            unint64_t v149 = *((void *)this + 1);
            if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(void *)this + v149);
            goto LABEL_322;
          case 267:
            *(void *)v8 |= 0x200000000000uLL;
            unint64_t v150 = *((void *)this + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(void *)this + v150);
            goto LABEL_322;
          case 268:
            *(void *)v8 |= 0x200000000000000uLL;
            unint64_t v151 = *((void *)this + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 240) = *(_DWORD *)(*(void *)this + v151);
            goto LABEL_322;
          case 269:
            *(void *)v8 |= 0x400000000000000uLL;
            unint64_t v152 = *((void *)this + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 244) = *(_DWORD *)(*(void *)this + v152);
            goto LABEL_322;
          case 270:
            *(void *)v8 |= 0x10000000000000uLL;
            unint64_t v153 = *((void *)this + 1);
            if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 220) = *(_DWORD *)(*(void *)this + v153);
            goto LABEL_322;
          case 271:
            *(void *)v8 |= 0x8000000000000uLL;
            unint64_t v154 = *((void *)this + 1);
            if (v154 > 0xFFFFFFFFFFFFFFFBLL || v154 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 216) = *(_DWORD *)(*(void *)this + v154);
            goto LABEL_322;
          case 272:
            *(void *)v8 |= 0x100000000000000uLL;
            unint64_t v155 = *((void *)this + 1);
            if (v155 > 0xFFFFFFFFFFFFFFFBLL || v155 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(void *)this + v155);
            goto LABEL_322;
          case 273:
            *(void *)v8 |= 0x80000000000000uLL;
            unint64_t v156 = *((void *)this + 1);
            if (v156 > 0xFFFFFFFFFFFFFFFBLL || v156 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(void *)this + v156);
            goto LABEL_322;
          case 274:
            *(void *)v8 |= 0x40000000000000uLL;
            unint64_t v157 = *((void *)this + 1);
            if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 22_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v157);
            goto LABEL_322;
          case 275:
            *(void *)v8 |= 0x20000000000000uLL;
            unint64_t v158 = *((void *)this + 1);
            if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 224) = *(_DWORD *)(*(void *)this + v158);
            goto LABEL_322;
          case 276:
            char v159 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 8u;
            *(_BYTE *)(v8 + 10) = v159;
            unint64_t v160 = *((void *)this + 1);
            if (v160 > 0xFFFFFFFFFFFFFFFBLL || v160 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 280) = *(_DWORD *)(*(void *)this + v160);
            goto LABEL_322;
          case 277:
            char v161 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x10u;
            *(_BYTE *)(v8 + 10) = v161;
            unint64_t v162 = *((void *)this + 1);
            if (v162 > 0xFFFFFFFFFFFFFFFBLL || v162 + 4 > *((void *)this + 2)) {
              goto LABEL_268;
            }
            *(_DWORD *)(a1 + 284) = *(_DWORD *)(*(void *)this + v162);
            goto LABEL_322;
          case 278:
            char v163 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 4u;
            *(_BYTE *)(v8 + 10) = v163;
            unint64_t v164 = *((void *)this + 1);
            if (v164 <= 0xFFFFFFFFFFFFFFFBLL && v164 + 4 <= *((void *)this + 2))
            {
              *(_DWORD *)(a1 + 276) = *(_DWORD *)(*(void *)this + v164);
LABEL_322:
              *((void *)this + 1) += 4LL;
            }

            else
            {
LABEL_268:
              *((_BYTE *)this + 24) = 1;
            }

            goto LABEL_323;
          default:
            goto LABEL_278;
        }

        while (1)
        {
          if (v88 == v87)
          {
            LODWORD(v92) = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_335;
          }

          unint64_t v185 = v87 + 1;
          char v186 = *(_BYTE *)(v89 + v87);
          *((void *)this + 1) = v185;
          v92 |= (unint64_t)(v186 & 0x7F) << v183;
          if ((v186 & 0x80) == 0) {
            break;
          }
          v183 += 7;
          unint64_t v87 = v185;
          BOOL v15 = v184++ > 8;
          if (v15) {
            goto LABEL_309;
          }
        }

        if (*((_BYTE *)this + 24)) {
          LODWORD(v92) = 0;
        }
LABEL_335:
        *(_DWORD *)(a1 + 26_Block_object_dispose(va, 8) = v92;
      }

LABEL_323:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v12 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(_BYTE *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v12 = 0LL;
        goto LABEL_21;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

uint64_t sub_1010BD850(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = (uint64_t *)(result + 316);
  uint64_t v5 = *(void *)(result + 316);
  if ((v5 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    uint64_t v5 = *v4;
    if ((v4[1] & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v6 = *(unsigned __int16 *)(result + 324);
  int v7 = v6 | (*(unsigned __int8 *)(result + 326) << 16);
  if ((v6 & 0x4000) != 0)
  {
LABEL_5:
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 309), 2u);
    int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    uint64_t v5 = *v4;
  }

uint64_t sub_1010BE570(uint64_t result)
{
  *(void *)uint64_t result = &off_1018999F8;
  *(_DWORD *)(result + 6_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010BE588(PB::Base *a1)
{
}

uint64_t sub_1010BE59C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018999F8;
  *(_DWORD *)(result + 6_Block_object_dispose(va, 8) = 0;
  int v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 4) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 20);
    int v3 = 4;
    *(_DWORD *)(result + 6_Block_object_dispose(va, 8) = 4;
    *(_DWORD *)(result + 20) = v4;
    int v2 = *(_DWORD *)(a2 + 68);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(result + 6_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(result + 16) = v5;
    int v2 = *(_DWORD *)(a2 + 68);
  }

uint64_t sub_1010BE804(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "detectorPostTriggerTimeOffsetWindow", *(float *)(a1 + 16));
    int v5 = *(_DWORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "detectorPreTriggerTimeOffsetWindow", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }

uint64_t sub_1010BEAD4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

LABEL_227:
              *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = v64;
              break;
            case 406:
              *(_DWORD *)(a1 + 68) |= 0x40u;
              unint64_t v66 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v67 = *(void *)this;
              if (v66 > 0xFFFFFFFFFFFFFFF5LL || v66 + 10 > v2)
              {
                char v114 = 0;
                unsigned int v115 = 0;
                uint64_t v70 = 0LL;
                if (v2 <= v66) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v66)
                  {
                    LODWORD(v70) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_232;
                  }

                  unint64_t v116 = v66++;
                  char v117 = *(_BYTE *)(v67 + v116);
                  *((void *)this + 1) = v66;
                  v70 |= (unint64_t)(v117 & 0x7F) << v114;
                  if ((v117 & 0x80) == 0) {
                    break;
                  }
                  v114 += 7;
                  BOOL v14 = v115++ > 8;
                  if (v14)
                  {
                    LODWORD(v70) = 0;
                    goto LABEL_231;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v70) = 0;
                }
LABEL_231:
                unint64_t v2 = v116 + 1;
              }

              else
              {
                char v68 = 0;
                unsigned int v69 = 0;
                uint64_t v70 = 0LL;
                while (1)
                {
                  unint64_t v2 = v66 + 1;
                  *((void *)this + 1) = v66 + 1;
                  char v71 = *(_BYTE *)(v67 + v66);
                  v70 |= (unint64_t)(v71 & 0x7F) << v68;
                  if ((v71 & 0x80) == 0) {
                    break;
                  }
                  v68 += 7;
                  unint64_t v66 = v2;
                  BOOL v14 = v69++ > 8;
                  if (v14)
                  {
                    LODWORD(v70) = 0;
                    break;
                  }
                }
              }

            PB::Reader::recallMark(this, v211);
          }

          else
          {
            unint64_t v152 = *(char **)(a1 + 64);
            unint64_t v151 = *(void *)(a1 + 72);
            if ((unint64_t)v152 >= v151)
            {
              unint64_t v171 = (char *)*v210;
              char v172 = (v152 - (_BYTE *)*v210) >> 2;
              char v173 = v172 + 1;
              if ((unint64_t)(v172 + 1) >> 62) {
LABEL_352:
              }
                sub_100007008();
              unint64_t v174 = v151 - (void)v171;
              if (v174 >> 1 > v173) {
                char v173 = v174 >> 1;
              }
              else {
                unint64_t v175 = v173;
              }
              if (v175)
              {
                int v176 = (char *)sub_10000956C((uint64_t)v10, v175);
                unint64_t v171 = *(char **)(a1 + 56);
                unint64_t v152 = *(char **)(a1 + 64);
              }

              else
              {
                int v176 = 0LL;
              }

              char v195 = &v176[4 * v172];
              *(_DWORD *)char v195 = 0;
              unint64_t v150 = v195 + 4;
              while (v152 != v171)
              {
                char v196 = *((_DWORD *)v152 - 1);
                v152 -= 4;
                *((_DWORD *)v195 - 1) = v196;
                v195 -= 4;
              }

              *(void *)(a1 + 56) = v195;
              *(void *)(a1 + 64) = v150;
              *(void *)(a1 + 72) = &v176[4 * v175];
              if (v171) {
                operator delete(v171);
              }
            }

            else
            {
              *(_DWORD *)unint64_t v152 = 0;
              unint64_t v150 = v152 + 4;
            }

            *(void *)(a1 + 64) = v150;
            unsigned int v197 = *((void *)this + 1);
            unint64_t v198 = *((void *)this + 2);
            char v199 = *(void *)this;
            char v200 = 0;
            unsigned int v201 = 0;
            if (v197 > 0xFFFFFFFFFFFFFFF5LL || v197 + 10 > v198)
            {
              char v192 = 0LL;
              if (v198 <= v197) {
                unint64_t v198 = *((void *)this + 1);
              }
              while (v198 != v197)
              {
                char v203 = v197 + 1;
                char v204 = *(_BYTE *)(v199 + v197);
                *((void *)this + 1) = v203;
                v192 |= (unint64_t)(v204 & 0x7F) << v200;
                if ((v204 & 0x80) == 0)
                {
LABEL_336:
                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v192) = 0;
                  }
                  goto LABEL_338;
                }

                v200 += 7;
                unsigned int v197 = v203;
                char v93 = v201++ > 8;
                if (v93)
                {
LABEL_334:
                  LODWORD(v192) = 0;
                  goto LABEL_338;
                }
              }

LABEL_237:
              *(_DWORD *)(a1 + 40) = v76;
              break;
            default:
              if ((_DWORD)v20 != 201) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 68) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v32 = v31 != 0;
              }

              *(_BYTE *)(a1 + 56) = v32;
              break;
          }

          break;
      }

      goto LABEL_238;
    }

    if ((int)v20 > 100)
    {
      switch((_DWORD)v20)
      {
        case 'e':
          *(_DWORD *)(a1 + 68) |= 1u;
          unint64_t v33 = *((void *)this + 1);
          unint64_t v2 = *((void *)this + 2);
          uint64_t v34 = *(void *)this;
          if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
          {
            char v90 = 0;
            unsigned int v91 = 0;
            uint64_t v37 = 0LL;
            if (v2 <= v33) {
              unint64_t v2 = *((void *)this + 1);
            }
            while (1)
            {
              if (v2 == v33)
              {
                uint64_t v37 = 0LL;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_202;
              }

              unint64_t v92 = v33++;
              char v93 = *(_BYTE *)(v34 + v92);
              *((void *)this + 1) = v33;
              v37 |= (unint64_t)(v93 & 0x7F) << v90;
              if ((v93 & 0x80) == 0) {
                break;
              }
              v90 += 7;
              BOOL v14 = v91++ > 8;
              if (v14)
              {
                uint64_t v37 = 0LL;
                goto LABEL_201;
              }
            }

            if (*((_BYTE *)this + 24)) {
              uint64_t v37 = 0LL;
            }
LABEL_201:
            unint64_t v2 = v92 + 1;
          }

          else
          {
            char v35 = 0;
            unsigned int v36 = 0;
            uint64_t v37 = 0LL;
            while (1)
            {
              unint64_t v2 = v33 + 1;
              *((void *)this + 1) = v33 + 1;
              char v38 = *(_BYTE *)(v34 + v33);
              v37 |= (unint64_t)(v38 & 0x7F) << v35;
              if ((v38 & 0x80) == 0) {
                break;
              }
              v35 += 7;
              unint64_t v33 = v2;
              BOOL v14 = v36++ > 8;
              if (v14)
              {
                uint64_t v37 = 0LL;
                break;
              }
            }
          }

uint64_t sub_1010BF774(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 68);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 20), 1u);
    int v4 = *(_DWORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }

uint64_t sub_1010BF9E4(uint64_t result)
{
  *(void *)uint64_t result = &off_101899A30;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010BF9FC(PB::Base *a1)
{
}

uint64_t sub_1010BFA10(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899A30;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = 1;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(result + 20) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010BFAB8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configThreshold1", *(float *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "debugX", *(float *)(a1 + 12));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "outputA", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010BFB88(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010BFF94(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8), 0x186A0u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 0x186A1u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1010C005C(uint64_t result)
{
  *(void *)uint64_t result = &off_101899A68;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_1010C0074(PB::Base *a1)
{
}

uint64_t sub_1010C0088(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899A68;
  *(_DWORD *)(result + 92) = 0;
  int v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x200) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 60);
    int v3 = 512;
    *(_DWORD *)(result + 92) = 512;
    *(_DWORD *)(result + 60) = v4;
    int v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 80);
    v3 |= 0x4000u;
    *(_DWORD *)(result + 92) = v3;
    *(_DWORD *)(result + 80) = v5;
    int v2 = *(_DWORD *)(a2 + 92);
  }

uint64_t sub_1010C02B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "gpsDeltaTimestamp", *(void *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 92);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "gpsDeltaTimestampSeconds", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }

uint64_t sub_1010C0548(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010C1100(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 92);
  if ((v4 & 0x200) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 60), 1u);
    int v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }

  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 2u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

void *sub_1010C1338(void *result)
{
  const char *result = &off_101899AA0;
  *(void *)((char *)result + 364) = 0LL;
  *(void *)((char *)result + 356) = 0LL;
  return result;
}

void sub_1010C135C(PB::Base *a1)
{
}

float sub_1010C1370(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899AA0;
  unint64_t v2 = (uint64_t *)(a1 + 356);
  *(void *)(a1 + 364) = 0LL;
  *(void *)(a1 + 356) = 0LL;
  uint64_t v3 = (uint64_t *)(a2 + 356);
  uint64_t v4 = *(void *)(a2 + 356);
  if ((v4 & 0x800000) != 0)
  {
    uint64_t v6 = 0LL;
    float result = *(float *)(a2 + 132);
    uint64_t v5 = 0x800000LL;
    *unint64_t v2 = 0x800000LL;
    *(void *)(a1 + 364) = 0LL;
    *(float *)(a1 + 132) = result;
    uint64_t v4 = *v3;
    uint64_t v7 = *(void *)(a2 + 364);
    if ((*v3 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v4 & 0x400000) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 128);
    v5 |= 0x400000uLL;
    *unint64_t v2 = v5;
    *(void *)(a1 + 364) = 0LL;
    *(float *)(a1 + 12_Block_object_dispose(va, 8) = result;
    uint64_t v4 = *v3;
    uint64_t v7 = *(void *)(a2 + 364);
  }

LABEL_184:
  uint64_t v69 = *(void *)(a2 + 56);
  v5 |= 0x40uLL;
  *unint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(void *)(a1 + 56) = v69;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x800000000000LL) == 0)
  {
LABEL_79:
    if ((v4 & 0x1000000000000LL) == 0) {
      goto LABEL_80;
    }
    goto LABEL_186;
  }

  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfSkiLiftCondition", *(_BYTE *)(a1 + 346));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x1000000000LL) == 0)
  {
LABEL_83:
    if ((v6 & 0x2000000000LL) == 0) {
      goto LABEL_84;
    }
    goto LABEL_186;
  }

  float result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 0x25Eu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x800000000000LL) == 0)
  {
LABEL_79:
    if ((v5 & 0x1000000000000LL) == 0) {
      goto LABEL_80;
    }
    goto LABEL_186;
  }

LABEL_185:
  int v70 = *(_DWORD *)(a2 + 228);
  v5 |= 0x800000000000uLL;
  *unint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 22_Block_object_dispose(va, 8) = v70;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x1000000000000LL) == 0)
  {
LABEL_80:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_187;
  }

  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfSkiingCondition", *(_BYTE *)(a1 + 347));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x2000000000LL) == 0)
  {
LABEL_84:
    if ((v6 & 0x4000000000LL) == 0) {
      goto LABEL_85;
    }
    goto LABEL_187;
  }

  float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 228), 0x2BDu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x1000000000000LL) == 0)
  {
LABEL_80:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_187;
  }

          *(_DWORD *)(a1 + 112) = v39;
          goto LABEL_216;
        case 7u:
          *(_WORD *)(a1 + 124) |= 0x10u;
          char v42 = *((void *)this + 1);
          char v43 = *((void *)this + 2);
          int v44 = *(void *)this;
          if (v42 <= 0xFFFFFFFFFFFFFFF5LL && v42 + 10 <= v43)
          {
            char v45 = 0;
            char v46 = 0;
            char v47 = 0LL;
            do
            {
              int v48 = v42 + 1;
              *((void *)this + 1) = v42 + 1;
              char v49 = *(_BYTE *)(v44 + v42);
              v47 |= (unint64_t)(v49 & 0x7F) << v45;
              if ((v49 & 0x80) == 0) {
                goto LABEL_188;
              }
              v45 += 7;
              char v42 = v48;
              char v21 = v46++ > 8;
            }

            while (!v21);
LABEL_148:
            LODWORD(v47) = 0;
            goto LABEL_188;
          }

          char v99 = 0;
          char v100 = 0;
          char v47 = 0LL;
          if (v43 <= v42) {
            char v43 = *((void *)this + 1);
          }
          while (2)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unsigned int v101 = v42 + 1;
              unint64_t v102 = *(_BYTE *)(v44 + v42);
              *((void *)this + 1) = v101;
              v47 |= (unint64_t)(v102 & 0x7F) << v99;
              if (v102 < 0)
              {
                v99 += 7;
                char v42 = v101;
                char v21 = v100++ > 8;
                if (v21) {
                  goto LABEL_148;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v47) = 0;
              }
            }

            break;
          }

LABEL_209:
  char v87 = *(_BYTE *)(a2 + 325);
  v6 |= 0x4000uLL;
  *unint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 325) = v87;
  if ((*v3 & 0x200000000LL) != 0)
  {
LABEL_104:
    int v9 = *(_DWORD *)(a2 + 172);
    *unint64_t v2 = v5 | 0x200000000LL;
    *(void *)(a1 + 364) = v6;
    *(_DWORD *)(a1 + 172) = v9;
  }

  float result = PB::Writer::write(this, *(_BYTE *)(v3 + 325), 0x51Cu);
  if ((*v4 & 0x200000000LL) != 0) {
LABEL_104:
  }
    float result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0x51Du);
LABEL_105:
  uint64_t v7 = *v4;
  if ((*v4 & 2) != 0)
  {
    float result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0x51Eu);
    uint64_t v7 = *v4;
    if ((*v4 & 0x20) == 0)
    {
LABEL_107:
      if ((v7 & 4) == 0) {
        goto LABEL_108;
      }
      goto LABEL_213;
    }
  }

  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_107;
  }

  float result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 0x51Fu);
  uint64_t v7 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_108:
    if ((v7 & 8) == 0) {
      goto LABEL_109;
    }
    goto LABEL_214;
  }

            PB::Reader::recallMark(this, v226);
          }

          else
          {
            unint64_t v165 = *(char **)(a1 + 136);
            unint64_t v164 = *(void *)(a1 + 144);
            if ((unint64_t)v165 >= v164)
            {
              char v196 = (char *)*v225;
              unsigned int v197 = (v165 - (_BYTE *)*v225) >> 2;
              unint64_t v198 = v197 + 1;
              if ((unint64_t)(v197 + 1) >> 62) {
LABEL_365:
              }
                sub_100007008();
              char v199 = v164 - (void)v196;
              if (v199 >> 1 > v198) {
                unint64_t v198 = v199 >> 1;
              }
              else {
                char v200 = v198;
              }
              if (v200)
              {
                unsigned int v201 = (char *)sub_10000956C(v222, v200);
                char v196 = *(char **)(a1 + 128);
                unint64_t v165 = *(char **)(a1 + 136);
              }

              else
              {
                unsigned int v201 = 0LL;
              }

              unint64_t v212 = &v201[4 * v197];
              *(_DWORD *)unint64_t v212 = 0;
              unint64_t v143 = v212 + 4;
              while (v165 != v196)
              {
                unsigned int v213 = *((_DWORD *)v165 - 1);
                v165 -= 4;
                *((_DWORD *)v212 - 1) = v213;
                v212 -= 4;
              }

              *(void *)(a1 + 12_Block_object_dispose(va, 8) = v212;
              *(void *)(a1 + 136) = v143;
              *(void *)(a1 + 144) = &v201[4 * v200];
              if (v196) {
                operator delete(v196);
              }
            }

            else
            {
              *(_DWORD *)unint64_t v165 = 0;
              unint64_t v143 = v165 + 4;
            }

            *(void *)(a1 + 136) = v143;
LABEL_345:
            uint64_t v214 = *((void *)this + 1);
            if (v214 <= 0xFFFFFFFFFFFFFFFBLL && v214 + 4 <= *((void *)this + 2))
            {
              *(v143 - 1) = *(_DWORD *)(*(void *)this + v214);
LABEL_349:
              char v27 = *((void *)this + 1) + 4LL;
LABEL_350:
              *((void *)this + 1) = v27;
            }

            else
            {
LABEL_347:
              *((_BYTE *)this + 24) = 1;
            }
          }

uint64_t sub_1010C1F78(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 356);
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "anyLowSense", *(_BYTE *)(a1 + 316));
    uint64_t v6 = *(void *)(a1 + 364);
  }

  uint64_t v7 = *v5;
  if ((*v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "autocorrelationPeriodicCount", *(float *)(a1 + 72));
    uint64_t v7 = *v5;
    uint64_t v6 = *(void *)(a1 + 364);
    if ((*v5 & 0x200) == 0)
    {
LABEL_5:
      if ((v7 & 1) == 0) {
        goto LABEL_6;
      }
      goto LABEL_108;
    }
  }

  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_5;
  }

  PB::TextFormatter::format(this, "autocorrelationPeriodicCountThreshold", *(float *)(a1 + 76));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((*v5 & 1) == 0)
  {
LABEL_6:
    if ((v7 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_109;
  }

uint64_t sub_1010C2D18( _DWORD *a1, PB::Reader *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = (unint64_t *)((char *)this + 8);
  unint64_t v9 = *((void *)this + 1);
  int v12 = (char *)this + 24;
  int v11 = *((unsigned __int8 *)this + 24);
  unint64_t v13 = *((void *)this + 2);
  if (v9 < v13 && v11 == 0)
  {
    int v17 = a1;
    int v18 = a1 + 89;
    v767 = (char *)this + 24;
    do
    {
      uint64_t v19 = *(void *)this;
      if (v9 > 0xFFFFFFFFFFFFFFF5LL || v9 + 10 > v13)
      {
        char v26 = 0;
        unsigned int v27 = 0;
        unint64_t v28 = 0LL;
        if (v9 > v13) {
          unint64_t v13 = v9;
        }
        while (1)
        {
          if (v13 == v9)
          {
            unint64_t v22 = 0LL;
            *int v12 = 1;
            goto LABEL_25;
          }

          unint64_t v29 = v9 + 1;
          char v30 = *(_BYTE *)(v19 + v9);
          *uint64_t v10 = v29;
          v28 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0) {
            break;
          }
          v26 += 7;
          unint64_t v9 = v29;
          BOOL v25 = v27++ > 8;
          if (v25)
          {
LABEL_20:
            unint64_t v22 = 0LL;
            goto LABEL_25;
          }
        }

        if (*v12) {
          unint64_t v22 = 0LL;
        }
        else {
          unint64_t v22 = v28;
        }
      }

      else
      {
        char v20 = 0;
        unsigned int v21 = 0;
        unint64_t v22 = 0LL;
        while (1)
        {
          unint64_t v23 = v9 + 1;
          *uint64_t v10 = v9 + 1;
          char v24 = *(_BYTE *)(v19 + v9);
          v22 |= (unint64_t)(v24 & 0x7F) << v20;
          if ((v24 & 0x80) == 0) {
            break;
          }
          v20 += 7;
          unint64_t v9 = v23;
          BOOL v25 = v21++ > 8;
          if (v25) {
            goto LABEL_20;
          }
        }
      }

LABEL_1070:
                    v17[57] = v466;
                  }

                  else
                  {
                    if ((_DWORD)v33 != 702) {
                      goto LABEL_141;
                    }
                    *v18 |= 0x1000000000000uLL;
                    unint64_t v78 = *((void *)this + 1);
                    unint64_t v79 = *((void *)this + 2);
                    uint64_t v80 = *(void *)this;
                    if (v78 > 0xFFFFFFFFFFFFFFF5LL || v78 + 10 > v79)
                    {
                      char v611 = 0;
                      unsigned int v612 = 0;
                      uint64_t v83 = 0LL;
                      if (v79 <= v78) {
                        unint64_t v79 = *((void *)this + 1);
                      }
                      int v12 = v767;
                      int v17 = a1;
                      while (1)
                      {
                        if (v79 == v78)
                        {
                          LODWORD(v83) = 0;
                          _BYTE *v767 = 1;
                          goto LABEL_998;
                        }

                        unint64_t v613 = v78 + 1;
                        char v614 = *(_BYTE *)(v80 + v78);
                        *uint64_t v10 = v613;
                        v83 |= (unint64_t)(v614 & 0x7F) << v611;
                        if ((v614 & 0x80) == 0) {
                          break;
                        }
                        v611 += 7;
                        unint64_t v78 = v613;
                        BOOL v25 = v612++ > 8;
                        if (v25)
                        {
LABEL_596:
                          LODWORD(v83) = 0;
                          goto LABEL_998;
                        }
                      }

                      if (*v767) {
                        LODWORD(v83) = 0;
                      }
                    }

                    else
                    {
                      char v81 = 0;
                      unsigned int v82 = 0;
                      uint64_t v83 = 0LL;
                      int v12 = v767;
                      int v17 = a1;
                      while (1)
                      {
                        unint64_t v84 = v78 + 1;
                        *uint64_t v10 = v78 + 1;
                        char v85 = *(_BYTE *)(v80 + v78);
                        v83 |= (unint64_t)(v85 & 0x7F) << v81;
                        if ((v85 & 0x80) == 0) {
                          break;
                        }
                        v81 += 7;
                        unint64_t v78 = v84;
                        BOOL v25 = v82++ > 8;
                        if (v25) {
                          goto LABEL_596;
                        }
                      }
                    }

LABEL_998:
                    v17[58] = v83;
                  }

                  break;
              }
            }

            else
            {
              switch((int)v33)
              {
                case 601:
                  v18[1] |= 0x100uLL;
                  unint64_t v56 = *((void *)this + 1);
                  if (v56 >= *((void *)this + 2))
                  {
                    BOOL v59 = 0;
                    int v12 = v767;
                    int v17 = a1;
                    _BYTE *v767 = 1;
                  }

                  else
                  {
                    unint64_t v57 = v56 + 1;
                    int v58 = *(unsigned __int8 *)(*(void *)this + v56);
                    *((void *)this + 1) = v57;
                    BOOL v59 = v58 != 0;
                    int v12 = v767;
                    int v17 = a1;
                  }

                  *((_BYTE *)v17 + 319) = v59;
                  goto LABEL_514;
                case 602:
                  *v18 |= 0x4000uLL;
                  unint64_t v407 = *((void *)this + 1);
                  unint64_t v408 = *((void *)this + 2);
                  uint64_t v409 = *(void *)this;
                  if (v407 <= 0xFFFFFFFFFFFFFFF5LL && v407 + 10 <= v408)
                  {
                    char v410 = 0;
                    unsigned int v411 = 0;
                    uint64_t v412 = 0LL;
                    int v12 = v767;
                    int v17 = a1;
                    do
                    {
                      unint64_t v413 = v407 + 1;
                      *uint64_t v10 = v407 + 1;
                      char v414 = *(_BYTE *)(v409 + v407);
                      v412 |= (unint64_t)(v414 & 0x7F) << v410;
                      if ((v414 & 0x80) == 0) {
                        goto LABEL_1052;
                      }
                      v410 += 7;
                      unint64_t v407 = v413;
                      BOOL v25 = v411++ > 8;
                    }

                    while (!v25);
LABEL_788:
                    LODWORD(v412) = 0;
                    goto LABEL_1052;
                  }

                  char v683 = 0;
                  unsigned int v684 = 0;
                  uint64_t v412 = 0LL;
                  if (v408 <= v407) {
                    unint64_t v408 = *((void *)this + 1);
                  }
                  int v12 = v767;
                  int v17 = a1;
                  while (2)
                  {
                    if (v408 == v407)
                    {
                      LODWORD(v412) = 0;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v685 = v407 + 1;
                      char v686 = *(_BYTE *)(v409 + v407);
                      *uint64_t v10 = v685;
                      v412 |= (unint64_t)(v686 & 0x7F) << v683;
                      if (v686 < 0)
                      {
                        v683 += 7;
                        unint64_t v407 = v685;
                        BOOL v25 = v684++ > 8;
                        if (v25) {
                          goto LABEL_788;
                        }
                        continue;
                      }

                      if (*v767) {
                        LODWORD(v412) = 0;
                      }
                    }

                    break;
                  }

LABEL_1052:
                  v17[24] = v412;
                  goto LABEL_514;
                case 603:
                  *v18 |= 0x1000uLL;
                  unint64_t v415 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v415 + 4 > *((void *)this + 2)) {
                    goto LABEL_401;
                  }
                  int v17 = a1;
                  a1[22] = *(_DWORD *)(*(void *)this + v415);
                  goto LABEL_940;
                case 604:
                  *v18 |= 0x100000000000uLL;
                  unint64_t v416 = *((void *)this + 1);
                  unint64_t v417 = *((void *)this + 2);
                  uint64_t v418 = *(void *)this;
                  if (v416 <= 0xFFFFFFFFFFFFFFF5LL && v416 + 10 <= v417)
                  {
                    char v419 = 0;
                    unsigned int v420 = 0;
                    uint64_t v421 = 0LL;
                    int v12 = v767;
                    int v17 = a1;
                    do
                    {
                      unint64_t v422 = v416 + 1;
                      *uint64_t v10 = v416 + 1;
                      char v423 = *(_BYTE *)(v418 + v416);
                      v421 |= (unint64_t)(v423 & 0x7F) << v419;
                      if ((v423 & 0x80) == 0) {
                        goto LABEL_1055;
                      }
                      v419 += 7;
                      unint64_t v416 = v422;
                      BOOL v25 = v420++ > 8;
                    }

                    while (!v25);
LABEL_796:
                    LODWORD(v421) = 0;
                    goto LABEL_1055;
                  }

                  char v687 = 0;
                  unsigned int v688 = 0;
                  uint64_t v421 = 0LL;
                  if (v417 <= v416) {
                    unint64_t v417 = *((void *)this + 1);
                  }
                  int v12 = v767;
                  int v17 = a1;
                  while (2)
                  {
                    if (v417 == v416)
                    {
                      LODWORD(v421) = 0;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v689 = v416 + 1;
                      char v690 = *(_BYTE *)(v418 + v416);
                      *uint64_t v10 = v689;
                      v421 |= (unint64_t)(v690 & 0x7F) << v687;
                      if (v690 < 0)
                      {
                        v687 += 7;
                        unint64_t v416 = v689;
                        BOOL v25 = v688++ > 8;
                        if (v25) {
                          goto LABEL_796;
                        }
                        continue;
                      }

                      if (*v767) {
                        LODWORD(v421) = 0;
                      }
                    }

                    break;
                  }

LABEL_1055:
                  v17[54] = v421;
                  goto LABEL_514;
                case 605:
                  *v18 |= 0x100000000000000uLL;
                  unint64_t v424 = *((void *)this + 1);
                  unint64_t v425 = *((void *)this + 2);
                  uint64_t v426 = *(void *)this;
                  if (v424 <= 0xFFFFFFFFFFFFFFF5LL && v424 + 10 <= v425)
                  {
                    char v427 = 0;
                    unsigned int v428 = 0;
                    uint64_t v429 = 0LL;
                    int v12 = v767;
                    int v17 = a1;
                    do
                    {
                      unint64_t v430 = v424 + 1;
                      *uint64_t v10 = v424 + 1;
                      char v431 = *(_BYTE *)(v426 + v424);
                      v429 |= (unint64_t)(v431 & 0x7F) << v427;
                      if ((v431 & 0x80) == 0) {
                        goto LABEL_1058;
                      }
                      v427 += 7;
                      unint64_t v424 = v430;
                      BOOL v25 = v428++ > 8;
                    }

                    while (!v25);
LABEL_804:
                    LODWORD(v429) = 0;
                    goto LABEL_1058;
                  }

                  char v691 = 0;
                  unsigned int v692 = 0;
                  uint64_t v429 = 0LL;
                  if (v425 <= v424) {
                    unint64_t v425 = *((void *)this + 1);
                  }
                  int v12 = v767;
                  int v17 = a1;
                  while (2)
                  {
                    if (v425 == v424)
                    {
                      LODWORD(v429) = 0;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v693 = v424 + 1;
                      char v694 = *(_BYTE *)(v426 + v424);
                      *uint64_t v10 = v693;
                      v429 |= (unint64_t)(v694 & 0x7F) << v691;
                      if (v694 < 0)
                      {
                        v691 += 7;
                        unint64_t v424 = v693;
                        BOOL v25 = v692++ > 8;
                        if (v25) {
                          goto LABEL_804;
                        }
                        continue;
                      }

                      if (*v767) {
                        LODWORD(v429) = 0;
                      }
                    }

                    break;
                  }

LABEL_1058:
                  v17[66] = v429;
                  goto LABEL_514;
                case 606:
                  *v18 |= 0x40uLL;
                  unint64_t v432 = *((void *)this + 1);
                  unint64_t v433 = *((void *)this + 2);
                  uint64_t v434 = *(void *)this;
                  if (v432 <= 0xFFFFFFFFFFFFFFF5LL && v432 + 10 <= v433)
                  {
                    char v435 = 0;
                    unsigned int v436 = 0;
                    uint64_t v437 = 0LL;
                    int v12 = v767;
                    int v17 = a1;
                    do
                    {
                      unint64_t v438 = v432 + 1;
                      *uint64_t v10 = v432 + 1;
                      char v439 = *(_BYTE *)(v434 + v432);
                      v437 |= (unint64_t)(v439 & 0x7F) << v435;
                      if ((v439 & 0x80) == 0) {
                        goto LABEL_1061;
                      }
                      v435 += 7;
                      unint64_t v432 = v438;
                      BOOL v25 = v436++ > 8;
                    }

                    while (!v25);
LABEL_812:
                    uint64_t v437 = 0LL;
                    goto LABEL_1061;
                  }

                  char v695 = 0;
                  unsigned int v696 = 0;
                  uint64_t v437 = 0LL;
                  if (v433 <= v432) {
                    unint64_t v433 = *((void *)this + 1);
                  }
                  int v12 = v767;
                  int v17 = a1;
                  break;
                default:
                  goto LABEL_141;
              }

              while (1)
              {
                if (v433 == v432)
                {
                  uint64_t v437 = 0LL;
                  _BYTE *v767 = 1;
                  goto LABEL_1061;
                }

                unint64_t v697 = v432 + 1;
                char v698 = *(_BYTE *)(v434 + v432);
                *uint64_t v10 = v697;
                v437 |= (unint64_t)(v698 & 0x7F) << v695;
                if ((v698 & 0x80) == 0) {
                  break;
                }
                v695 += 7;
                unint64_t v432 = v697;
                BOOL v25 = v696++ > 8;
                if (v25) {
                  goto LABEL_812;
                }
              }

              if (*v767) {
                uint64_t v437 = 0LL;
              }
LABEL_1061:
              *((void *)v17 + 7) = v437;
            }
          }

          else
          {
            switch((int)v33)
            {
              case 401:
                *v18 |= 0x20000000000000uLL;
                unint64_t v36 = *((void *)this + 1);
                unint64_t v37 = *((void *)this + 2);
                uint64_t v38 = *(void *)this;
                if (v36 <= 0xFFFFFFFFFFFFFFF5LL && v36 + 10 <= v37)
                {
                  char v39 = 0;
                  unsigned int v40 = 0;
                  uint64_t v41 = 0LL;
                  do
                  {
                    unint64_t v42 = v36 + 1;
                    *uint64_t v10 = v36 + 1;
                    char v43 = *(_BYTE *)(v38 + v36);
                    v41 |= (unint64_t)(v43 & 0x7F) << v39;
                    if ((v43 & 0x80) == 0) {
                      goto LABEL_992;
                    }
                    v39 += 7;
                    unint64_t v36 = v42;
                    BOOL v25 = v40++ > 8;
                  }

                  while (!v25);
LABEL_576:
                  LODWORD(v41) = 0;
                  goto LABEL_992;
                }

                char v603 = 0;
                unsigned int v604 = 0;
                uint64_t v41 = 0LL;
                if (v37 <= v36) {
                  unint64_t v37 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v37 == v36)
                  {
                    LODWORD(v41) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v605 = v36 + 1;
                    char v606 = *(_BYTE *)(v38 + v36);
                    *uint64_t v10 = v605;
                    v41 |= (unint64_t)(v606 & 0x7F) << v603;
                    if (v606 < 0)
                    {
                      v603 += 7;
                      unint64_t v36 = v605;
                      BOOL v25 = v604++ > 8;
                      if (v25) {
                        goto LABEL_576;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v41) = 0;
                    }
                  }

                  break;
                }

LABEL_992:
                v17[63] = v41;
                goto LABEL_514;
              case 402:
                *v18 |= 0x40000000000000uLL;
                unint64_t v207 = *((void *)this + 1);
                unint64_t v208 = *((void *)this + 2);
                uint64_t v209 = *(void *)this;
                if (v207 <= 0xFFFFFFFFFFFFFFF5LL && v207 + 10 <= v208)
                {
                  char v210 = 0;
                  unsigned int v211 = 0;
                  uint64_t v212 = 0LL;
                  do
                  {
                    unint64_t v213 = v207 + 1;
                    *uint64_t v10 = v207 + 1;
                    char v214 = *(_BYTE *)(v209 + v207);
                    v212 |= (unint64_t)(v214 & 0x7F) << v210;
                    if ((v214 & 0x80) == 0) {
                      goto LABEL_1025;
                    }
                    v210 += 7;
                    unint64_t v207 = v213;
                    BOOL v25 = v211++ > 8;
                  }

                  while (!v25);
LABEL_659:
                  LODWORD(v212) = 0;
                  goto LABEL_1025;
                }

                char v647 = 0;
                unsigned int v648 = 0;
                uint64_t v212 = 0LL;
                if (v208 <= v207) {
                  unint64_t v208 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v208 == v207)
                  {
                    LODWORD(v212) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v649 = v207 + 1;
                    char v650 = *(_BYTE *)(v209 + v207);
                    *uint64_t v10 = v649;
                    v212 |= (unint64_t)(v650 & 0x7F) << v647;
                    if (v650 < 0)
                    {
                      v647 += 7;
                      unint64_t v207 = v649;
                      BOOL v25 = v648++ > 8;
                      if (v25) {
                        goto LABEL_659;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v212) = 0;
                    }
                  }

                  break;
                }

LABEL_1025:
                v17[64] = v212;
                goto LABEL_514;
              case 403:
                *v18 |= 0x4000000uLL;
                unint64_t v215 = *((void *)this + 1);
                unint64_t v216 = *((void *)this + 2);
                uint64_t v217 = *(void *)this;
                if (v215 <= 0xFFFFFFFFFFFFFFF5LL && v215 + 10 <= v216)
                {
                  char v218 = 0;
                  unsigned int v219 = 0;
                  uint64_t v220 = 0LL;
                  do
                  {
                    unint64_t v221 = v215 + 1;
                    *uint64_t v10 = v215 + 1;
                    char v222 = *(_BYTE *)(v217 + v215);
                    v220 |= (unint64_t)(v222 & 0x7F) << v218;
                    if ((v222 & 0x80) == 0) {
                      goto LABEL_1028;
                    }
                    v218 += 7;
                    unint64_t v215 = v221;
                    BOOL v25 = v219++ > 8;
                  }

                  while (!v25);
LABEL_666:
                  LODWORD(v220) = 0;
                  goto LABEL_1028;
                }

                char v651 = 0;
                unsigned int v652 = 0;
                uint64_t v220 = 0LL;
                if (v216 <= v215) {
                  unint64_t v216 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v216 == v215)
                  {
                    LODWORD(v220) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v653 = v215 + 1;
                    char v654 = *(_BYTE *)(v217 + v215);
                    *uint64_t v10 = v653;
                    v220 |= (unint64_t)(v654 & 0x7F) << v651;
                    if (v654 < 0)
                    {
                      v651 += 7;
                      unint64_t v215 = v653;
                      BOOL v25 = v652++ > 8;
                      if (v25) {
                        goto LABEL_666;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v220) = 0;
                    }
                  }

                  break;
                }

LABEL_1028:
                v17[36] = v220;
                goto LABEL_514;
              case 404:
                *v18 |= 0x8000000uLL;
                unint64_t v223 = *((void *)this + 1);
                unint64_t v224 = *((void *)this + 2);
                uint64_t v225 = *(void *)this;
                if (v223 <= 0xFFFFFFFFFFFFFFF5LL && v223 + 10 <= v224)
                {
                  char v226 = 0;
                  unsigned int v227 = 0;
                  uint64_t v228 = 0LL;
                  do
                  {
                    unint64_t v229 = v223 + 1;
                    *uint64_t v10 = v223 + 1;
                    char v230 = *(_BYTE *)(v225 + v223);
                    v228 |= (unint64_t)(v230 & 0x7F) << v226;
                    if ((v230 & 0x80) == 0) {
                      goto LABEL_1031;
                    }
                    v226 += 7;
                    unint64_t v223 = v229;
                    BOOL v25 = v227++ > 8;
                  }

                  while (!v25);
LABEL_673:
                  LODWORD(v22_Block_object_dispose(va, 8) = 0;
                  goto LABEL_1031;
                }

                char v655 = 0;
                unsigned int v656 = 0;
                uint64_t v228 = 0LL;
                if (v224 <= v223) {
                  unint64_t v224 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v224 == v223)
                  {
                    LODWORD(v22_Block_object_dispose(va, 8) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v657 = v223 + 1;
                    char v658 = *(_BYTE *)(v225 + v223);
                    *uint64_t v10 = v657;
                    v228 |= (unint64_t)(v658 & 0x7F) << v655;
                    if (v658 < 0)
                    {
                      v655 += 7;
                      unint64_t v223 = v657;
                      BOOL v25 = v656++ > 8;
                      if (v25) {
                        goto LABEL_673;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v22_Block_object_dispose(va, 8) = 0;
                    }
                  }

                  break;
                }

LABEL_1031:
                v17[37] = v228;
                goto LABEL_514;
              case 405:
                v18[1] |= 0x2000uLL;
                unint64_t v231 = *((void *)this + 1);
                if (v231 >= *((void *)this + 2))
                {
                  BOOL v234 = 0;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v232 = v231 + 1;
                  int v233 = *(unsigned __int8 *)(*(void *)this + v231);
                  *((void *)this + 1) = v232;
                  BOOL v234 = v233 != 0;
                }

                *((_BYTE *)v17 + 324) = v234;
                goto LABEL_514;
              case 406:
                v18[1] |= 0x400uLL;
                unint64_t v235 = *((void *)this + 1);
                if (v235 >= *((void *)this + 2))
                {
                  BOOL v238 = 0;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v236 = v235 + 1;
                  int v237 = *(unsigned __int8 *)(*(void *)this + v235);
                  *((void *)this + 1) = v236;
                  BOOL v238 = v237 != 0;
                }

                *((_BYTE *)v17 + 321) = v238;
                goto LABEL_514;
              case 407:
                *v18 |= 0x2000000000uLL;
                unint64_t v239 = *((void *)this + 1);
                unint64_t v240 = *((void *)this + 2);
                uint64_t v241 = *(void *)this;
                if (v239 <= 0xFFFFFFFFFFFFFFF5LL && v239 + 10 <= v240)
                {
                  char v242 = 0;
                  unsigned int v243 = 0;
                  uint64_t v244 = 0LL;
                  do
                  {
                    unint64_t v245 = v239 + 1;
                    *uint64_t v10 = v239 + 1;
                    char v246 = *(_BYTE *)(v241 + v239);
                    v244 |= (unint64_t)(v246 & 0x7F) << v242;
                    if ((v246 & 0x80) == 0) {
                      goto LABEL_1034;
                    }
                    v242 += 7;
                    unint64_t v239 = v245;
                    BOOL v25 = v243++ > 8;
                  }

                  while (!v25);
LABEL_684:
                  LODWORD(v244) = 0;
                  goto LABEL_1034;
                }

                char v659 = 0;
                unsigned int v660 = 0;
                uint64_t v244 = 0LL;
                if (v240 <= v239) {
                  unint64_t v240 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v240 == v239)
                  {
                    LODWORD(v244) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v661 = v239 + 1;
                    char v662 = *(_BYTE *)(v241 + v239);
                    *uint64_t v10 = v661;
                    v244 |= (unint64_t)(v662 & 0x7F) << v659;
                    if (v662 < 0)
                    {
                      v659 += 7;
                      unint64_t v239 = v661;
                      BOOL v25 = v660++ > 8;
                      if (v25) {
                        goto LABEL_684;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v244) = 0;
                    }
                  }

                  break;
                }

LABEL_1034:
                v17[47] = v244;
                goto LABEL_514;
              case 408:
                *v18 |= 0x80000uLL;
                unint64_t v247 = *((void *)this + 1);
                unint64_t v248 = *((void *)this + 2);
                uint64_t v249 = *(void *)this;
                if (v247 <= 0xFFFFFFFFFFFFFFF5LL && v247 + 10 <= v248)
                {
                  char v250 = 0;
                  unsigned int v251 = 0;
                  uint64_t v252 = 0LL;
                  do
                  {
                    unint64_t v253 = v247 + 1;
                    *uint64_t v10 = v247 + 1;
                    char v254 = *(_BYTE *)(v249 + v247);
                    v252 |= (unint64_t)(v254 & 0x7F) << v250;
                    if ((v254 & 0x80) == 0) {
                      goto LABEL_1037;
                    }
                    v250 += 7;
                    unint64_t v247 = v253;
                    BOOL v25 = v251++ > 8;
                  }

                  while (!v25);
LABEL_691:
                  LODWORD(v252) = 0;
                  goto LABEL_1037;
                }

                char v663 = 0;
                unsigned int v664 = 0;
                uint64_t v252 = 0LL;
                if (v248 <= v247) {
                  unint64_t v248 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v248 == v247)
                  {
                    LODWORD(v252) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v665 = v247 + 1;
                    char v666 = *(_BYTE *)(v249 + v247);
                    *uint64_t v10 = v665;
                    v252 |= (unint64_t)(v666 & 0x7F) << v663;
                    if (v666 < 0)
                    {
                      v663 += 7;
                      unint64_t v247 = v665;
                      BOOL v25 = v664++ > 8;
                      if (v25) {
                        goto LABEL_691;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v252) = 0;
                    }
                  }

                  break;
                }

LABEL_1037:
                v17[29] = v252;
                goto LABEL_514;
              case 409:
                *v18 |= 0x1000000000uLL;
                unint64_t v255 = *((void *)this + 1);
                unint64_t v256 = *((void *)this + 2);
                uint64_t v257 = *(void *)this;
                if (v255 <= 0xFFFFFFFFFFFFFFF5LL && v255 + 10 <= v256)
                {
                  char v258 = 0;
                  unsigned int v259 = 0;
                  uint64_t v260 = 0LL;
                  do
                  {
                    unint64_t v261 = v255 + 1;
                    *uint64_t v10 = v255 + 1;
                    char v262 = *(_BYTE *)(v257 + v255);
                    v260 |= (unint64_t)(v262 & 0x7F) << v258;
                    if ((v262 & 0x80) == 0) {
                      goto LABEL_1040;
                    }
                    v258 += 7;
                    unint64_t v255 = v261;
                    BOOL v25 = v259++ > 8;
                  }

                  while (!v25);
LABEL_698:
                  LODWORD(v260) = 0;
                  goto LABEL_1040;
                }

                char v667 = 0;
                unsigned int v668 = 0;
                uint64_t v260 = 0LL;
                if (v256 <= v255) {
                  unint64_t v256 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v256 == v255)
                  {
                    LODWORD(v260) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v669 = v255 + 1;
                    char v670 = *(_BYTE *)(v257 + v255);
                    *uint64_t v10 = v669;
                    v260 |= (unint64_t)(v670 & 0x7F) << v667;
                    if (v670 < 0)
                    {
                      v667 += 7;
                      unint64_t v255 = v669;
                      BOOL v25 = v668++ > 8;
                      if (v25) {
                        goto LABEL_698;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v260) = 0;
                    }
                  }

                  break;
                }

LABEL_1040:
                v17[46] = v260;
                goto LABEL_514;
              default:
                switch((int)v33)
                {
                  case 501:
                    *v18 |= 0x4000000000000000uLL;
                    unint64_t v69 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2)) {
                      goto LABEL_401;
                    }
                    int v17 = a1;
                    a1[72] = *(_DWORD *)(*(void *)this + v69);
                    goto LABEL_940;
                  case 502:
                    *v18 |= 0x8000000000000000LL;
                    unint64_t v443 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v443 + 4 > *((void *)this + 2)) {
                      goto LABEL_401;
                    }
                    int v17 = a1;
                    a1[73] = *(_DWORD *)(*(void *)this + v443);
                    goto LABEL_940;
                  case 503:
                    *v18 |= 0x200000000000000uLL;
                    unint64_t v444 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v444 + 4 > *((void *)this + 2)) {
                      goto LABEL_401;
                    }
                    int v17 = a1;
                    a1[67] = *(_DWORD *)(*(void *)this + v444);
                    goto LABEL_940;
                  case 504:
                    *v18 |= 0x800000000000000uLL;
                    unint64_t v445 = *((void *)this + 1);
                    unint64_t v446 = *((void *)this + 2);
                    uint64_t v447 = *(void *)this;
                    if (v445 <= 0xFFFFFFFFFFFFFFF5LL && v445 + 10 <= v446)
                    {
                      char v448 = 0;
                      unsigned int v449 = 0;
                      uint64_t v450 = 0LL;
                      int v12 = v767;
                      int v17 = a1;
                      do
                      {
                        unint64_t v451 = v445 + 1;
                        *uint64_t v10 = v445 + 1;
                        char v452 = *(_BYTE *)(v447 + v445);
                        v450 |= (unint64_t)(v452 & 0x7F) << v448;
                        if ((v452 & 0x80) == 0) {
                          goto LABEL_1064;
                        }
                        v448 += 7;
                        unint64_t v445 = v451;
                        BOOL v25 = v449++ > 8;
                      }

                      while (!v25);
LABEL_820:
                      LODWORD(v450) = 0;
                      goto LABEL_1064;
                    }

                    char v699 = 0;
                    unsigned int v700 = 0;
                    uint64_t v450 = 0LL;
                    if (v446 <= v445) {
                      unint64_t v446 = *((void *)this + 1);
                    }
                    int v12 = v767;
                    int v17 = a1;
                    while (2)
                    {
                      if (v446 == v445)
                      {
                        LODWORD(v450) = 0;
                        _BYTE *v767 = 1;
                      }

                      else
                      {
                        unint64_t v701 = v445 + 1;
                        char v702 = *(_BYTE *)(v447 + v445);
                        *uint64_t v10 = v701;
                        v450 |= (unint64_t)(v702 & 0x7F) << v699;
                        if (v702 < 0)
                        {
                          v699 += 7;
                          unint64_t v445 = v701;
                          BOOL v25 = v700++ > 8;
                          if (v25) {
                            goto LABEL_820;
                          }
                          continue;
                        }

                        if (*v767) {
                          LODWORD(v450) = 0;
                        }
                      }

                      break;
                    }

LABEL_1064:
                    v17[69] = v450;
                    goto LABEL_514;
                  case 505:
                    *v18 |= 0x2000000000000000uLL;
                    unint64_t v453 = *((void *)this + 1);
                    unint64_t v454 = *((void *)this + 2);
                    uint64_t v455 = *(void *)this;
                    if (v453 <= 0xFFFFFFFFFFFFFFF5LL && v453 + 10 <= v454)
                    {
                      char v456 = 0;
                      unsigned int v457 = 0;
                      uint64_t v458 = 0LL;
                      int v12 = v767;
                      int v17 = a1;
                      do
                      {
                        unint64_t v459 = v453 + 1;
                        *uint64_t v10 = v453 + 1;
                        char v460 = *(_BYTE *)(v455 + v453);
                        v458 |= (unint64_t)(v460 & 0x7F) << v456;
                        if ((v460 & 0x80) == 0) {
                          goto LABEL_1067;
                        }
                        v456 += 7;
                        unint64_t v453 = v459;
                        BOOL v25 = v457++ > 8;
                      }

                      while (!v25);
LABEL_828:
                      LODWORD(v45_Block_object_dispose(va, 8) = 0;
                      goto LABEL_1067;
                    }

                    char v703 = 0;
                    unsigned int v704 = 0;
                    uint64_t v458 = 0LL;
                    if (v454 <= v453) {
                      unint64_t v454 = *((void *)this + 1);
                    }
                    int v12 = v767;
                    int v17 = a1;
                    break;
                  default:
                    goto LABEL_141;
                }

                break;
            }

            while (1)
            {
              if (v454 == v453)
              {
                LODWORD(v45_Block_object_dispose(va, 8) = 0;
                _BYTE *v767 = 1;
                goto LABEL_1067;
              }

              unint64_t v705 = v453 + 1;
              char v706 = *(_BYTE *)(v455 + v453);
              *uint64_t v10 = v705;
              v458 |= (unint64_t)(v706 & 0x7F) << v703;
              if ((v706 & 0x80) == 0) {
                break;
              }
              v703 += 7;
              unint64_t v453 = v705;
              BOOL v25 = v704++ > 8;
              if (v25) {
                goto LABEL_828;
              }
            }

            if (*v767) {
              LODWORD(v45_Block_object_dispose(va, 8) = 0;
            }
LABEL_1067:
            v17[71] = v458;
          }
        }

        else if ((int)v33 <= 1200)
        {
          if ((int)v33 <= 1100)
          {
            switch((_DWORD)v33)
            {
              case 0x385:
                *v18 |= 0x100uLL;
                unint64_t v123 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((void *)this + 2))
                {
LABEL_401:
                  int v12 = v767;
                  int v17 = a1;
LABEL_513:
                  *int v12 = 1;
                }

                else
                {
                  int v17 = a1;
                  a1[18] = *(_DWORD *)(*(void *)this + v123);
LABEL_940:
                  *((void *)this + 1) += 4LL;
                  int v12 = v767;
                }

                break;
              case 0x386:
                v18[1] |= 0x10000uLL;
                unint64_t v124 = *((void *)this + 1);
                if (v124 >= *((void *)this + 2))
                {
                  BOOL v127 = 0;
                  int v12 = v767;
                  int v17 = a1;
                  _BYTE *v767 = 1;
                }

                else
                {
                  unint64_t v125 = v124 + 1;
                  int v126 = *(unsigned __int8 *)(*(void *)this + v124);
                  *((void *)this + 1) = v125;
                  BOOL v127 = v126 != 0;
                  int v12 = v767;
                  int v17 = a1;
                }

                *((_BYTE *)v17 + 327) = v127;
                break;
              case 0x3E9:
                v18[1] |= 4uLL;
                unint64_t v70 = *((void *)this + 1);
                unint64_t v71 = *((void *)this + 2);
                uint64_t v72 = *(void *)this;
                if (v70 > 0xFFFFFFFFFFFFFFF5LL || v70 + 10 > v71)
                {
                  char v587 = 0;
                  unsigned int v588 = 0;
                  uint64_t v75 = 0LL;
                  if (v71 <= v70) {
                    unint64_t v71 = *((void *)this + 1);
                  }
                  int v12 = v767;
                  int v17 = a1;
                  while (1)
                  {
                    if (v71 == v70)
                    {
                      LODWORD(v75) = 0;
                      _BYTE *v767 = 1;
                      goto LABEL_953;
                    }

                    unint64_t v589 = v70 + 1;
                    char v590 = *(_BYTE *)(v72 + v70);
                    *uint64_t v10 = v589;
                    v75 |= (unint64_t)(v590 & 0x7F) << v587;
                    if ((v590 & 0x80) == 0) {
                      break;
                    }
                    v587 += 7;
                    unint64_t v70 = v589;
                    BOOL v25 = v588++ > 8;
                    if (v25)
                    {
LABEL_541:
                      LODWORD(v75) = 0;
                      goto LABEL_953;
                    }
                  }

                  if (*v767) {
                    LODWORD(v75) = 0;
                  }
                }

                else
                {
                  char v73 = 0;
                  unsigned int v74 = 0;
                  uint64_t v75 = 0LL;
                  int v12 = v767;
                  int v17 = a1;
                  while (1)
                  {
                    unint64_t v76 = v70 + 1;
                    *uint64_t v10 = v70 + 1;
                    char v77 = *(_BYTE *)(v72 + v70);
                    v75 |= (unint64_t)(v77 & 0x7F) << v73;
                    if ((v77 & 0x80) == 0) {
                      break;
                    }
                    v73 += 7;
                    unint64_t v70 = v76;
                    BOOL v25 = v74++ > 8;
                    if (v25) {
                      goto LABEL_541;
                    }
                  }
                }

LABEL_953:
                v17[76] = v75;
                break;
              default:
LABEL_141:
                uint64_t v128 = v7;
                uint64_t v129 = a6;
                unint64_t v130 = v18;
                uint64_t v131 = v8;
                uint64_t v132 = a7;
                uint64_t result = PB::Reader::skip(this, v33, v31, 0);
                a7 = v132;
                uint64_t v8 = v131;
                int v18 = v130;
                a6 = v129;
                uint64_t v7 = v128;
                int v12 = v767;
                int v17 = a1;
                if (!(_DWORD)result) {
                  return result;
                }
                break;
            }
          }

          else
          {
            switch((int)v33)
            {
              case 1101:
                *v18 |= 0x10000000uLL;
                unint64_t v60 = *((void *)this + 1);
                unint64_t v61 = *((void *)this + 2);
                uint64_t v62 = *(void *)this;
                if (v60 <= 0xFFFFFFFFFFFFFFF5LL && v60 + 10 <= v61)
                {
                  char v63 = 0;
                  unsigned int v64 = 0;
                  uint64_t v65 = 0LL;
                  int v12 = v767;
                  int v17 = a1;
                  do
                  {
                    unint64_t v66 = v60 + 1;
                    *uint64_t v10 = v60 + 1;
                    char v67 = *(_BYTE *)(v62 + v60);
                    v65 |= (unint64_t)(v67 & 0x7F) << v63;
                    if ((v67 & 0x80) == 0) {
                      goto LABEL_950;
                    }
                    v63 += 7;
                    unint64_t v60 = v66;
                    BOOL v25 = v64++ > 8;
                  }

                  while (!v25);
LABEL_533:
                  LODWORD(v65) = 0;
                  goto LABEL_950;
                }

                char v583 = 0;
                unsigned int v584 = 0;
                uint64_t v65 = 0LL;
                if (v61 <= v60) {
                  unint64_t v61 = *((void *)this + 1);
                }
                int v12 = v767;
                int v17 = a1;
                while (2)
                {
                  if (v61 == v60)
                  {
                    LODWORD(v65) = 0;
                    _BYTE *v767 = 1;
                  }

                  else
                  {
                    unint64_t v585 = v60 + 1;
                    char v586 = *(_BYTE *)(v62 + v60);
                    *uint64_t v10 = v585;
                    v65 |= (unint64_t)(v586 & 0x7F) << v583;
                    if (v586 < 0)
                    {
                      v583 += 7;
                      unint64_t v60 = v585;
                      BOOL v25 = v584++ > 8;
                      if (v25) {
                        goto LABEL_533;
                      }
                      continue;
                    }

                    if (*v767) {
                      LODWORD(v65) = 0;
                    }
                  }

                  break;
                }

LABEL_950:
                v17[38] = v65;
                goto LABEL_514;
              case 1102:
                *v18 |= 0x40000000uLL;
                unint64_t v94 = *((void *)this + 1);
                unint64_t v95 = *((void *)this + 2);
                uint64_t v96 = *(void *)this;
                if (v94 <= 0xFFFFFFFFFFFFFFF5LL && v94 + 10 <= v95)
                {
                  char v97 = 0;
                  unsigned int v98 = 0;
                  uint64_t v99 = 0LL;
                  int v12 = v767;
                  int v17 = a1;
                  do
                  {
                    unint64_t v100 = v94 + 1;
                    *uint64_t v10 = v94 + 1;
                    char v101 = *(_BYTE *)(v96 + v94);
                    v99 |= (unint64_t)(v101 & 0x7F) << v97;
                    if ((v101 & 0x80) == 0) {
                      goto LABEL_956;
                    }
                    v97 += 7;
                    unint64_t v94 = v100;
                    BOOL v25 = v98++ > 8;
                  }

                  while (!v25);
LABEL_549:
                  LODWORD(v99) = 0;
                  goto LABEL_956;
                }

                char v591 = 0;
                unsigned int v592 = 0;
                uint64_t v99 = 0LL;
                if (v95 <= v94) {
                  unint64_t v95 = *((void *)this + 1);
                }
                int v12 = v767;
                int v17 = a1;
                while (2)
                {
                  if (v95 == v94)
                  {
                    LODWORD(v99) = 0;
                    _BYTE *v767 = 1;
                  }

                  else
                  {
                    unint64_t v593 = v94 + 1;
                    char v594 = *(_BYTE *)(v96 + v94);
                    *uint64_t v10 = v593;
                    v99 |= (unint64_t)(v594 & 0x7F) << v591;
                    if (v594 < 0)
                    {
                      v591 += 7;
                      unint64_t v94 = v593;
                      BOOL v25 = v592++ > 8;
                      if (v25) {
                        goto LABEL_549;
                      }
                      continue;
                    }

                    if (*v767) {
                      LODWORD(v99) = 0;
                    }
                  }

                  break;
                }

LABEL_956:
                v17[40] = v99;
                goto LABEL_514;
              case 1103:
                v18[1] |= 0x1000000000uLL;
                unint64_t v102 = *((void *)this + 1);
                if (v102 >= *((void *)this + 2))
                {
                  BOOL v105 = 0;
                  int v12 = v767;
                  int v17 = a1;
                  _BYTE *v767 = 1;
                }

                else
                {
                  unint64_t v103 = v102 + 1;
                  int v104 = *(unsigned __int8 *)(*(void *)this + v102);
                  *((void *)this + 1) = v103;
                  BOOL v105 = v104 != 0;
                  int v12 = v767;
                  int v17 = a1;
                }

                *((_BYTE *)v17 + 347) = v105;
                goto LABEL_514;
              case 1104:
                *v18 |= 0x80000000uLL;
                unint64_t v106 = *((void *)this + 1);
                unint64_t v107 = *((void *)this + 2);
                uint64_t v108 = *(void *)this;
                if (v106 <= 0xFFFFFFFFFFFFFFF5LL && v106 + 10 <= v107)
                {
                  char v109 = 0;
                  unsigned int v110 = 0;
                  uint64_t v111 = 0LL;
                  int v12 = v767;
                  int v17 = a1;
                  do
                  {
                    unint64_t v112 = v106 + 1;
                    *uint64_t v10 = v106 + 1;
                    char v113 = *(_BYTE *)(v108 + v106);
                    v111 |= (unint64_t)(v113 & 0x7F) << v109;
                    if ((v113 & 0x80) == 0) {
                      goto LABEL_959;
                    }
                    v109 += 7;
                    unint64_t v106 = v112;
                    BOOL v25 = v110++ > 8;
                  }

                  while (!v25);
LABEL_559:
                  LODWORD(v111) = 0;
                  goto LABEL_959;
                }

                char v595 = 0;
                unsigned int v596 = 0;
                uint64_t v111 = 0LL;
                if (v107 <= v106) {
                  unint64_t v107 = *((void *)this + 1);
                }
                int v12 = v767;
                int v17 = a1;
                while (2)
                {
                  if (v107 == v106)
                  {
                    LODWORD(v111) = 0;
                    _BYTE *v767 = 1;
                  }

                  else
                  {
                    unint64_t v597 = v106 + 1;
                    char v598 = *(_BYTE *)(v108 + v106);
                    *uint64_t v10 = v597;
                    v111 |= (unint64_t)(v598 & 0x7F) << v595;
                    if (v598 < 0)
                    {
                      v595 += 7;
                      unint64_t v106 = v597;
                      BOOL v25 = v596++ > 8;
                      if (v25) {
                        goto LABEL_559;
                      }
                      continue;
                    }

                    if (*v767) {
                      LODWORD(v111) = 0;
                    }
                  }

                  break;
                }

LABEL_959:
                v17[41] = v111;
                goto LABEL_514;
              case 1105:
                *v18 |= 0x20000000uLL;
                unint64_t v114 = *((void *)this + 1);
                unint64_t v115 = *((void *)this + 2);
                uint64_t v116 = *(void *)this;
                if (v114 <= 0xFFFFFFFFFFFFFFF5LL && v114 + 10 <= v115)
                {
                  char v117 = 0;
                  unsigned int v118 = 0;
                  uint64_t v119 = 0LL;
                  int v12 = v767;
                  int v17 = a1;
                  do
                  {
                    unint64_t v120 = v114 + 1;
                    *uint64_t v10 = v114 + 1;
                    char v121 = *(_BYTE *)(v116 + v114);
                    v119 |= (unint64_t)(v121 & 0x7F) << v117;
                    if ((v121 & 0x80) == 0) {
                      goto LABEL_962;
                    }
                    v117 += 7;
                    unint64_t v114 = v120;
                    BOOL v25 = v118++ > 8;
                  }

                  while (!v25);
LABEL_567:
                  LODWORD(v119) = 0;
                  goto LABEL_962;
                }

                char v599 = 0;
                unsigned int v600 = 0;
                uint64_t v119 = 0LL;
                if (v115 <= v114) {
                  unint64_t v115 = *((void *)this + 1);
                }
                int v12 = v767;
                int v17 = a1;
                break;
              case 1106:
                *v18 |= 0x8000000000000uLL;
                unint64_t v122 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((void *)this + 2)) {
                  goto LABEL_401;
                }
                int v17 = a1;
                a1[61] = *(_DWORD *)(*(void *)this + v122);
                goto LABEL_940;
              default:
                goto LABEL_141;
            }

            while (1)
            {
              if (v115 == v114)
              {
                LODWORD(v119) = 0;
                _BYTE *v767 = 1;
                goto LABEL_962;
              }

              unint64_t v601 = v114 + 1;
              char v602 = *(_BYTE *)(v116 + v114);
              *uint64_t v10 = v601;
              v119 |= (unint64_t)(v602 & 0x7F) << v599;
              if ((v602 & 0x80) == 0) {
                break;
              }
              v599 += 7;
              unint64_t v114 = v601;
              BOOL v25 = v600++ > 8;
              if (v25) {
                goto LABEL_567;
              }
            }

            if (*v767) {
              LODWORD(v119) = 0;
            }
LABEL_962:
            v17[39] = v119;
          }
        }

        else
        {
          switch((int)v33)
          {
            case 1301:
              *v18 |= 0x8000uLL;
              unint64_t v35 = *v10;
              if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
                goto LABEL_513;
              }
              v17[25] = *(_DWORD *)(*(void *)this + v35);
              goto LABEL_942;
            case 1302:
              *v18 |= 0x40000000000uLL;
              unint64_t v469 = *((void *)this + 1);
              unint64_t v470 = *((void *)this + 2);
              uint64_t v471 = *(void *)this;
              if (v469 <= 0xFFFFFFFFFFFFFFF5LL && v469 + 10 <= v470)
              {
                char v472 = 0;
                unsigned int v473 = 0;
                uint64_t v474 = 0LL;
                do
                {
                  unint64_t v475 = v469 + 1;
                  *uint64_t v10 = v469 + 1;
                  char v476 = *(_BYTE *)(v471 + v469);
                  v474 |= (unint64_t)(v476 & 0x7F) << v472;
                  if ((v476 & 0x80) == 0) {
                    goto LABEL_1078;
                  }
                  v472 += 7;
                  unint64_t v469 = v475;
                  BOOL v25 = v473++ > 8;
                }

                while (!v25);
LABEL_850:
                LODWORD(v474) = 0;
                goto LABEL_1078;
              }

              char v715 = 0;
              unsigned int v716 = 0;
              uint64_t v474 = 0LL;
              if (v470 <= v469) {
                unint64_t v470 = *((void *)this + 1);
              }
              while (2)
              {
                if (v470 == v469)
                {
                  LODWORD(v474) = 0;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v717 = v469 + 1;
                  char v718 = *(_BYTE *)(v471 + v469);
                  *uint64_t v10 = v717;
                  v474 |= (unint64_t)(v718 & 0x7F) << v715;
                  if (v718 < 0)
                  {
                    v715 += 7;
                    unint64_t v469 = v717;
                    BOOL v25 = v716++ > 8;
                    if (v25) {
                      goto LABEL_850;
                    }
                    continue;
                  }

                  if (*v12) {
                    LODWORD(v474) = 0;
                  }
                }

                break;
              }

LABEL_1078:
              v17[52] = v474;
              break;
            case 1303:
              *v18 |= 0x10000000000uLL;
              unint64_t v477 = *((void *)this + 1);
              unint64_t v478 = *((void *)this + 2);
              uint64_t v479 = *(void *)this;
              if (v477 <= 0xFFFFFFFFFFFFFFF5LL && v477 + 10 <= v478)
              {
                char v480 = 0;
                unsigned int v481 = 0;
                uint64_t v482 = 0LL;
                do
                {
                  unint64_t v483 = v477 + 1;
                  *uint64_t v10 = v477 + 1;
                  char v484 = *(_BYTE *)(v479 + v477);
                  v482 |= (unint64_t)(v484 & 0x7F) << v480;
                  if ((v484 & 0x80) == 0) {
                    goto LABEL_1082;
                  }
                  v480 += 7;
                  unint64_t v477 = v483;
                  BOOL v25 = v481++ > 8;
                }

                while (!v25);
LABEL_857:
                LODWORD(v482) = 0;
                goto LABEL_1082;
              }

              char v719 = 0;
              unsigned int v720 = 0;
              uint64_t v482 = 0LL;
              if (v478 <= v477) {
                unint64_t v478 = *((void *)this + 1);
              }
              while (2)
              {
                if (v478 == v477)
                {
                  LODWORD(v482) = 0;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v721 = v477 + 1;
                  char v722 = *(_BYTE *)(v479 + v477);
                  *uint64_t v10 = v721;
                  v482 |= (unint64_t)(v722 & 0x7F) << v719;
                  if (v722 < 0)
                  {
                    v719 += 7;
                    unint64_t v477 = v721;
                    BOOL v25 = v720++ > 8;
                    if (v25) {
                      goto LABEL_857;
                    }
                    continue;
                  }

                  if (*v12) {
                    LODWORD(v482) = 0;
                  }
                }

                break;
              }

LABEL_1082:
              v17[50] = v482;
              break;
            case 1304:
              *v18 |= 0x800000000uLL;
              unint64_t v485 = *((void *)this + 1);
              unint64_t v486 = *((void *)this + 2);
              uint64_t v487 = *(void *)this;
              if (v485 <= 0xFFFFFFFFFFFFFFF5LL && v485 + 10 <= v486)
              {
                char v488 = 0;
                unsigned int v489 = 0;
                uint64_t v490 = 0LL;
                do
                {
                  unint64_t v491 = v485 + 1;
                  *uint64_t v10 = v485 + 1;
                  char v492 = *(_BYTE *)(v487 + v485);
                  v490 |= (unint64_t)(v492 & 0x7F) << v488;
                  if ((v492 & 0x80) == 0) {
                    goto LABEL_1086;
                  }
                  v488 += 7;
                  unint64_t v485 = v491;
                  BOOL v25 = v489++ > 8;
                }

                while (!v25);
LABEL_864:
                LODWORD(v490) = 0;
                goto LABEL_1086;
              }

              char v723 = 0;
              unsigned int v724 = 0;
              uint64_t v490 = 0LL;
              if (v486 <= v485) {
                unint64_t v486 = *((void *)this + 1);
              }
              while (2)
              {
                if (v486 == v485)
                {
                  LODWORD(v490) = 0;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v725 = v485 + 1;
                  char v726 = *(_BYTE *)(v487 + v485);
                  *uint64_t v10 = v725;
                  v490 |= (unint64_t)(v726 & 0x7F) << v723;
                  if (v726 < 0)
                  {
                    v723 += 7;
                    unint64_t v485 = v725;
                    BOOL v25 = v724++ > 8;
                    if (v25) {
                      goto LABEL_864;
                    }
                    continue;
                  }

                  if (*v12) {
                    LODWORD(v490) = 0;
                  }
                }

                break;
              }

LABEL_1086:
              v17[45] = v490;
              break;
            case 1305:
              *v18 |= (unint64_t)&_mh_execute_header;
              unint64_t v493 = *((void *)this + 1);
              unint64_t v494 = *((void *)this + 2);
              uint64_t v495 = *(void *)this;
              if (v493 <= 0xFFFFFFFFFFFFFFF5LL && v493 + 10 <= v494)
              {
                char v496 = 0;
                unsigned int v497 = 0;
                uint64_t v498 = 0LL;
                do
                {
                  unint64_t v499 = v493 + 1;
                  *uint64_t v10 = v493 + 1;
                  char v500 = *(_BYTE *)(v495 + v493);
                  v498 |= (unint64_t)(v500 & 0x7F) << v496;
                  if ((v500 & 0x80) == 0) {
                    goto LABEL_1090;
                  }
                  v496 += 7;
                  unint64_t v493 = v499;
                  BOOL v25 = v497++ > 8;
                }

                while (!v25);
LABEL_871:
                LODWORD(v49_Block_object_dispose(va, 8) = 0;
                goto LABEL_1090;
              }

              char v727 = 0;
              unsigned int v728 = 0;
              uint64_t v498 = 0LL;
              if (v494 <= v493) {
                unint64_t v494 = *((void *)this + 1);
              }
              while (2)
              {
                if (v494 == v493)
                {
                  LODWORD(v49_Block_object_dispose(va, 8) = 0;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v729 = v493 + 1;
                  char v730 = *(_BYTE *)(v495 + v493);
                  *uint64_t v10 = v729;
                  v498 |= (unint64_t)(v730 & 0x7F) << v727;
                  if (v730 < 0)
                  {
                    v727 += 7;
                    unint64_t v493 = v729;
                    BOOL v25 = v728++ > 8;
                    if (v25) {
                      goto LABEL_871;
                    }
                    continue;
                  }

                  if (*v12) {
                    LODWORD(v49_Block_object_dispose(va, 8) = 0;
                  }
                }

                break;
              }

LABEL_1090:
              v17[42] = v498;
              break;
            case 1306:
              *v18 |= 0x400000000uLL;
              unint64_t v501 = *((void *)this + 1);
              unint64_t v502 = *((void *)this + 2);
              uint64_t v503 = *(void *)this;
              if (v501 <= 0xFFFFFFFFFFFFFFF5LL && v501 + 10 <= v502)
              {
                char v504 = 0;
                unsigned int v505 = 0;
                uint64_t v506 = 0LL;
                do
                {
                  unint64_t v507 = v501 + 1;
                  *uint64_t v10 = v501 + 1;
                  char v508 = *(_BYTE *)(v503 + v501);
                  v506 |= (unint64_t)(v508 & 0x7F) << v504;
                  if ((v508 & 0x80) == 0) {
                    goto LABEL_1094;
                  }
                  v504 += 7;
                  unint64_t v501 = v507;
                  BOOL v25 = v505++ > 8;
                }

                while (!v25);
LABEL_878:
                LODWORD(v506) = 0;
                goto LABEL_1094;
              }

              char v731 = 0;
              unsigned int v732 = 0;
              uint64_t v506 = 0LL;
              if (v502 <= v501) {
                unint64_t v502 = *((void *)this + 1);
              }
              while (2)
              {
                if (v502 == v501)
                {
                  LODWORD(v506) = 0;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v733 = v501 + 1;
                  char v734 = *(_BYTE *)(v503 + v501);
                  *uint64_t v10 = v733;
                  v506 |= (unint64_t)(v734 & 0x7F) << v731;
                  if (v734 < 0)
                  {
                    v731 += 7;
                    unint64_t v501 = v733;
                    BOOL v25 = v732++ > 8;
                    if (v25) {
                      goto LABEL_878;
                    }
                    continue;
                  }

                  if (*v12) {
                    LODWORD(v506) = 0;
                  }
                }

                break;
              }

LABEL_1094:
              v17[44] = v506;
              break;
            case 1307:
              v18[1] |= 0x40uLL;
              unint64_t v509 = *((void *)this + 1);
              if (v509 >= *((void *)this + 2))
              {
                BOOL v512 = 0;
                *int v12 = 1;
              }

              else
              {
                unint64_t v510 = v509 + 1;
                int v511 = *(unsigned __int8 *)(*(void *)this + v509);
                *((void *)this + 1) = v510;
                BOOL v512 = v511 != 0;
              }

              *((_BYTE *)v17 + 317) = v512;
              break;
            case 1308:
              v18[1] |= 0x4000uLL;
              unint64_t v513 = *((void *)this + 1);
              if (v513 >= *((void *)this + 2))
              {
                BOOL v516 = 0;
                *int v12 = 1;
              }

              else
              {
                unint64_t v514 = v513 + 1;
                int v515 = *(unsigned __int8 *)(*(void *)this + v513);
                *((void *)this + 1) = v514;
                BOOL v516 = v515 != 0;
              }

              *((_BYTE *)v17 + 325) = v516;
              break;
            case 1309:
              *v18 |= 0x200000000uLL;
              unint64_t v517 = *((void *)this + 1);
              unint64_t v518 = *((void *)this + 2);
              uint64_t v519 = *(void *)this;
              if (v517 <= 0xFFFFFFFFFFFFFFF5LL && v517 + 10 <= v518)
              {
                char v520 = 0;
                unsigned int v521 = 0;
                uint64_t v522 = 0LL;
                do
                {
                  unint64_t v523 = v517 + 1;
                  *uint64_t v10 = v517 + 1;
                  char v524 = *(_BYTE *)(v519 + v517);
                  v522 |= (unint64_t)(v524 & 0x7F) << v520;
                  if ((v524 & 0x80) == 0) {
                    goto LABEL_1098;
                  }
                  v520 += 7;
                  unint64_t v517 = v523;
                  BOOL v25 = v521++ > 8;
                }

                while (!v25);
LABEL_889:
                LODWORD(v522) = 0;
                goto LABEL_1098;
              }

              char v735 = 0;
              unsigned int v736 = 0;
              uint64_t v522 = 0LL;
              if (v518 <= v517) {
                unint64_t v518 = *((void *)this + 1);
              }
              while (2)
              {
                if (v518 == v517)
                {
                  LODWORD(v522) = 0;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v737 = v517 + 1;
                  char v738 = *(_BYTE *)(v519 + v517);
                  *uint64_t v10 = v737;
                  v522 |= (unint64_t)(v738 & 0x7F) << v735;
                  if (v738 < 0)
                  {
                    v735 += 7;
                    unint64_t v517 = v737;
                    BOOL v25 = v736++ > 8;
                    if (v25) {
                      goto LABEL_889;
                    }
                    continue;
                  }

                  if (*v12) {
                    LODWORD(v522) = 0;
                  }
                }

                break;
              }

LABEL_1098:
              v17[43] = v522;
              break;
            case 1310:
              *v18 |= 2uLL;
              unint64_t v525 = *((void *)this + 1);
              unint64_t v526 = *((void *)this + 2);
              uint64_t v527 = *(void *)this;
              if (v525 <= 0xFFFFFFFFFFFFFFF5LL && v525 + 10 <= v526)
              {
                char v528 = 0;
                unsigned int v529 = 0;
                uint64_t v530 = 0LL;
                do
                {
                  unint64_t v531 = v525 + 1;
                  *uint64_t v10 = v525 + 1;
                  char v532 = *(_BYTE *)(v527 + v525);
                  v530 |= (unint64_t)(v532 & 0x7F) << v528;
                  if ((v532 & 0x80) == 0) {
                    goto LABEL_1102;
                  }
                  v528 += 7;
                  unint64_t v525 = v531;
                  BOOL v25 = v529++ > 8;
                }

                while (!v25);
LABEL_896:
                uint64_t v530 = 0LL;
                goto LABEL_1102;
              }

              char v739 = 0;
              unsigned int v740 = 0;
              uint64_t v530 = 0LL;
              if (v526 <= v525) {
                unint64_t v526 = *((void *)this + 1);
              }
              while (2)
              {
                if (v526 == v525)
                {
                  uint64_t v530 = 0LL;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v741 = v525 + 1;
                  char v742 = *(_BYTE *)(v527 + v525);
                  *uint64_t v10 = v741;
                  v530 |= (unint64_t)(v742 & 0x7F) << v739;
                  if (v742 < 0)
                  {
                    v739 += 7;
                    unint64_t v525 = v741;
                    BOOL v25 = v740++ > 8;
                    if (v25) {
                      goto LABEL_896;
                    }
                    continue;
                  }

                  if (*v12) {
                    uint64_t v530 = 0LL;
                  }
                }

                break;
              }

LABEL_1102:
              *((void *)v17 + 2) = v530;
              break;
            case 1311:
              *v18 |= 0x20uLL;
              unint64_t v533 = *((void *)this + 1);
              unint64_t v534 = *((void *)this + 2);
              uint64_t v535 = *(void *)this;
              if (v533 <= 0xFFFFFFFFFFFFFFF5LL && v533 + 10 <= v534)
              {
                char v536 = 0;
                unsigned int v537 = 0;
                uint64_t v538 = 0LL;
                do
                {
                  unint64_t v539 = v533 + 1;
                  *uint64_t v10 = v533 + 1;
                  char v540 = *(_BYTE *)(v535 + v533);
                  v538 |= (unint64_t)(v540 & 0x7F) << v536;
                  if ((v540 & 0x80) == 0) {
                    goto LABEL_1106;
                  }
                  v536 += 7;
                  unint64_t v533 = v539;
                  BOOL v25 = v537++ > 8;
                }

                while (!v25);
LABEL_903:
                uint64_t v538 = 0LL;
                goto LABEL_1106;
              }

              char v743 = 0;
              unsigned int v744 = 0;
              uint64_t v538 = 0LL;
              if (v534 <= v533) {
                unint64_t v534 = *((void *)this + 1);
              }
              while (2)
              {
                if (v534 == v533)
                {
                  uint64_t v538 = 0LL;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v745 = v533 + 1;
                  char v746 = *(_BYTE *)(v535 + v533);
                  *uint64_t v10 = v745;
                  v538 |= (unint64_t)(v746 & 0x7F) << v743;
                  if (v746 < 0)
                  {
                    v743 += 7;
                    unint64_t v533 = v745;
                    BOOL v25 = v744++ > 8;
                    if (v25) {
                      goto LABEL_903;
                    }
                    continue;
                  }

                  if (*v12) {
                    uint64_t v538 = 0LL;
                  }
                }

                break;
              }

LABEL_1106:
              *((void *)v17 + 6) = v538;
              break;
            case 1312:
              *v18 |= 4uLL;
              unint64_t v541 = *((void *)this + 1);
              unint64_t v542 = *((void *)this + 2);
              uint64_t v543 = *(void *)this;
              if (v541 <= 0xFFFFFFFFFFFFFFF5LL && v541 + 10 <= v542)
              {
                char v544 = 0;
                unsigned int v545 = 0;
                uint64_t v546 = 0LL;
                do
                {
                  unint64_t v547 = v541 + 1;
                  *uint64_t v10 = v541 + 1;
                  char v548 = *(_BYTE *)(v543 + v541);
                  v546 |= (unint64_t)(v548 & 0x7F) << v544;
                  if ((v548 & 0x80) == 0) {
                    goto LABEL_1110;
                  }
                  v544 += 7;
                  unint64_t v541 = v547;
                  BOOL v25 = v545++ > 8;
                }

                while (!v25);
LABEL_910:
                uint64_t v546 = 0LL;
                goto LABEL_1110;
              }

              char v747 = 0;
              unsigned int v748 = 0;
              uint64_t v546 = 0LL;
              if (v542 <= v541) {
                unint64_t v542 = *((void *)this + 1);
              }
              while (2)
              {
                if (v542 == v541)
                {
                  uint64_t v546 = 0LL;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v749 = v541 + 1;
                  char v750 = *(_BYTE *)(v543 + v541);
                  *uint64_t v10 = v749;
                  v546 |= (unint64_t)(v750 & 0x7F) << v747;
                  if (v750 < 0)
                  {
                    v747 += 7;
                    unint64_t v541 = v749;
                    BOOL v25 = v748++ > 8;
                    if (v25) {
                      goto LABEL_910;
                    }
                    continue;
                  }

                  if (*v12) {
                    uint64_t v546 = 0LL;
                  }
                }

                break;
              }

LABEL_1110:
              *((void *)v17 + 3) = v546;
              break;
            case 1313:
              *v18 |= 8uLL;
              unint64_t v549 = *((void *)this + 1);
              unint64_t v550 = *((void *)this + 2);
              uint64_t v551 = *(void *)this;
              if (v549 <= 0xFFFFFFFFFFFFFFF5LL && v549 + 10 <= v550)
              {
                char v552 = 0;
                unsigned int v553 = 0;
                uint64_t v554 = 0LL;
                do
                {
                  unint64_t v555 = v549 + 1;
                  *uint64_t v10 = v549 + 1;
                  char v556 = *(_BYTE *)(v551 + v549);
                  v554 |= (unint64_t)(v556 & 0x7F) << v552;
                  if ((v556 & 0x80) == 0) {
                    goto LABEL_1114;
                  }
                  v552 += 7;
                  unint64_t v549 = v555;
                  BOOL v25 = v553++ > 8;
                }

                while (!v25);
LABEL_917:
                uint64_t v554 = 0LL;
                goto LABEL_1114;
              }

              char v751 = 0;
              unsigned int v752 = 0;
              uint64_t v554 = 0LL;
              if (v550 <= v549) {
                unint64_t v550 = *((void *)this + 1);
              }
              while (2)
              {
                if (v550 == v549)
                {
                  uint64_t v554 = 0LL;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v753 = v549 + 1;
                  char v754 = *(_BYTE *)(v551 + v549);
                  *uint64_t v10 = v753;
                  v554 |= (unint64_t)(v754 & 0x7F) << v751;
                  if (v754 < 0)
                  {
                    v751 += 7;
                    unint64_t v549 = v753;
                    BOOL v25 = v752++ > 8;
                    if (v25) {
                      goto LABEL_917;
                    }
                    continue;
                  }

                  if (*v12) {
                    uint64_t v554 = 0LL;
                  }
                }

                break;
              }

LABEL_1114:
              *((void *)v17 + 4) = v554;
              break;
            case 1314:
              *v18 |= 0x10uLL;
              unint64_t v557 = *((void *)this + 1);
              unint64_t v558 = *((void *)this + 2);
              uint64_t v559 = *(void *)this;
              if (v557 <= 0xFFFFFFFFFFFFFFF5LL && v557 + 10 <= v558)
              {
                char v560 = 0;
                unsigned int v561 = 0;
                uint64_t v562 = 0LL;
                do
                {
                  unint64_t v563 = v557 + 1;
                  *uint64_t v10 = v557 + 1;
                  char v564 = *(_BYTE *)(v559 + v557);
                  v562 |= (unint64_t)(v564 & 0x7F) << v560;
                  if ((v564 & 0x80) == 0) {
                    goto LABEL_1118;
                  }
                  v560 += 7;
                  unint64_t v557 = v563;
                  BOOL v25 = v561++ > 8;
                }

                while (!v25);
LABEL_924:
                uint64_t v562 = 0LL;
                goto LABEL_1118;
              }

              char v755 = 0;
              unsigned int v756 = 0;
              uint64_t v562 = 0LL;
              if (v558 <= v557) {
                unint64_t v558 = *((void *)this + 1);
              }
              while (2)
              {
                if (v558 == v557)
                {
                  uint64_t v562 = 0LL;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v757 = v557 + 1;
                  char v758 = *(_BYTE *)(v559 + v557);
                  *uint64_t v10 = v757;
                  v562 |= (unint64_t)(v758 & 0x7F) << v755;
                  if (v758 < 0)
                  {
                    v755 += 7;
                    unint64_t v557 = v757;
                    BOOL v25 = v756++ > 8;
                    if (v25) {
                      goto LABEL_924;
                    }
                    continue;
                  }

                  if (*v12) {
                    uint64_t v562 = 0LL;
                  }
                }

                break;
              }

LABEL_1118:
              *((void *)v17 + 5) = v562;
              break;
            case 1315:
              *v18 |= 0x2000000000000uLL;
              unint64_t v565 = *((void *)this + 1);
              unint64_t v566 = *((void *)this + 2);
              uint64_t v567 = *(void *)this;
              if (v565 <= 0xFFFFFFFFFFFFFFF5LL && v565 + 10 <= v566)
              {
                char v568 = 0;
                unsigned int v569 = 0;
                uint64_t v570 = 0LL;
                do
                {
                  unint64_t v571 = v565 + 1;
                  *uint64_t v10 = v565 + 1;
                  char v572 = *(_BYTE *)(v567 + v565);
                  v570 |= (unint64_t)(v572 & 0x7F) << v568;
                  if ((v572 & 0x80) == 0) {
                    goto LABEL_1122;
                  }
                  v568 += 7;
                  unint64_t v565 = v571;
                  BOOL v25 = v569++ > 8;
                }

                while (!v25);
LABEL_931:
                LODWORD(v570) = 0;
                goto LABEL_1122;
              }

              char v759 = 0;
              unsigned int v760 = 0;
              uint64_t v570 = 0LL;
              if (v566 <= v565) {
                unint64_t v566 = *((void *)this + 1);
              }
              while (2)
              {
                if (v566 == v565)
                {
                  LODWORD(v570) = 0;
                  *int v12 = 1;
                }

                else
                {
                  unint64_t v761 = v565 + 1;
                  char v762 = *(_BYTE *)(v567 + v565);
                  *uint64_t v10 = v761;
                  v570 |= (unint64_t)(v762 & 0x7F) << v759;
                  if (v762 < 0)
                  {
                    v759 += 7;
                    unint64_t v565 = v761;
                    BOOL v25 = v760++ > 8;
                    if (v25) {
                      goto LABEL_931;
                    }
                    continue;
                  }

                  if (*v12) {
                    LODWORD(v570) = 0;
                  }
                }

                break;
              }

LABEL_1122:
              v17[59] = v570;
              break;
            case 1316:
              *v18 |= 0x2000uLL;
              unint64_t v573 = *v10;
              if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v573 + 4 > *((void *)this + 2)) {
                goto LABEL_513;
              }
              v17[23] = *(_DWORD *)(*(void *)this + v573);
              goto LABEL_942;
            default:
              if ((_DWORD)v33 == 1201)
              {
                *v18 |= 0x4000000000uLL;
                unint64_t v575 = *((void *)this + 1);
                unint64_t v576 = *((void *)this + 2);
                uint64_t v577 = *(void *)this;
                if (v575 > 0xFFFFFFFFFFFFFFF5LL || v575 + 10 > v576)
                {
                  char v763 = 0;
                  unsigned int v764 = 0;
                  uint64_t v580 = 0LL;
                  if (v576 <= v575) {
                    unint64_t v576 = *((void *)this + 1);
                  }
                  while (1)
                  {
                    if (v576 == v575)
                    {
                      LODWORD(v580) = 0;
                      *int v12 = 1;
                      goto LABEL_1126;
                    }

                    unint64_t v765 = v575 + 1;
                    char v766 = *(_BYTE *)(v577 + v575);
                    *uint64_t v10 = v765;
                    v580 |= (unint64_t)(v766 & 0x7F) << v763;
                    if ((v766 & 0x80) == 0) {
                      break;
                    }
                    v763 += 7;
                    unint64_t v575 = v765;
                    BOOL v25 = v764++ > 8;
                    if (v25)
                    {
LABEL_938:
                      LODWORD(v580) = 0;
                      goto LABEL_1126;
                    }
                  }

                  if (*v12) {
                    LODWORD(v580) = 0;
                  }
                }

                else
                {
                  char v578 = 0;
                  unsigned int v579 = 0;
                  uint64_t v580 = 0LL;
                  while (1)
                  {
                    unint64_t v581 = v575 + 1;
                    *uint64_t v10 = v575 + 1;
                    char v582 = *(_BYTE *)(v577 + v575);
                    v580 |= (unint64_t)(v582 & 0x7F) << v578;
                    if ((v582 & 0x80) == 0) {
                      break;
                    }
                    v578 += 7;
                    unint64_t v575 = v581;
                    BOOL v25 = v579++ > 8;
                    if (v25) {
                      goto LABEL_938;
                    }
                  }
                }

LABEL_1126:
                v17[48] = v580;
              }

              else
              {
                if ((_DWORD)v33 != 1202) {
                  goto LABEL_141;
                }
                *v18 |= 0x8000000000uLL;
                unint64_t v86 = *((void *)this + 1);
                unint64_t v87 = *((void *)this + 2);
                uint64_t v88 = *(void *)this;
                if (v86 > 0xFFFFFFFFFFFFFFF5LL || v86 + 10 > v87)
                {
                  char v711 = 0;
                  unsigned int v712 = 0;
                  uint64_t v91 = 0LL;
                  if (v87 <= v86) {
                    unint64_t v87 = *((void *)this + 1);
                  }
                  int v12 = v767;
                  int v17 = a1;
                  while (1)
                  {
                    if (v87 == v86)
                    {
                      LODWORD(v91) = 0;
                      _BYTE *v767 = 1;
                      goto LABEL_1074;
                    }

                    unint64_t v713 = v86 + 1;
                    char v714 = *(_BYTE *)(v88 + v86);
                    *uint64_t v10 = v713;
                    v91 |= (unint64_t)(v714 & 0x7F) << v711;
                    if ((v714 & 0x80) == 0) {
                      break;
                    }
                    v711 += 7;
                    unint64_t v86 = v713;
                    BOOL v25 = v712++ > 8;
                    if (v25)
                    {
LABEL_843:
                      LODWORD(v91) = 0;
                      goto LABEL_1074;
                    }
                  }

                  if (*v767) {
                    LODWORD(v91) = 0;
                  }
                }

                else
                {
                  char v89 = 0;
                  unsigned int v90 = 0;
                  uint64_t v91 = 0LL;
                  int v12 = v767;
                  int v17 = a1;
                  while (1)
                  {
                    unint64_t v92 = v86 + 1;
                    *uint64_t v10 = v86 + 1;
                    char v93 = *(_BYTE *)(v88 + v86);
                    v91 |= (unint64_t)(v93 & 0x7F) << v89;
                    if ((v93 & 0x80) == 0) {
                      break;
                    }
                    v89 += 7;
                    unint64_t v86 = v92;
                    BOOL v25 = v90++ > 8;
                    if (v25) {
                      goto LABEL_843;
                    }
                  }
                }

LABEL_1074:
                v17[49] = v91;
              }

              break;
          }
        }
      }

      else
      {
        switch((int)v33)
        {
          case 301:
            v18[1] |= 0x8000000uLL;
            unint64_t v44 = *((void *)this + 1);
            if (v44 >= *((void *)this + 2))
            {
              BOOL v47 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v45 = v44 + 1;
              int v46 = *(unsigned __int8 *)(*(void *)this + v44);
              *((void *)this + 1) = v45;
              BOOL v47 = v46 != 0;
            }

            *((_BYTE *)v17 + 33_Block_object_dispose(va, 8) = v47;
            goto LABEL_514;
          case 302:
            v18[1] |= 0x20000000uLL;
            unint64_t v263 = *((void *)this + 1);
            if (v263 >= *((void *)this + 2))
            {
              BOOL v266 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v264 = v263 + 1;
              int v265 = *(unsigned __int8 *)(*(void *)this + v263);
              *((void *)this + 1) = v264;
              BOOL v266 = v265 != 0;
            }

            *((_BYTE *)v17 + 340) = v266;
            goto LABEL_514;
          case 303:
            v18[1] |= 0x10000000uLL;
            unint64_t v267 = *((void *)this + 1);
            if (v267 >= *((void *)this + 2))
            {
              BOOL v270 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v268 = v267 + 1;
              int v269 = *(unsigned __int8 *)(*(void *)this + v267);
              *((void *)this + 1) = v268;
              BOOL v270 = v269 != 0;
            }

            *((_BYTE *)v17 + 339) = v270;
            goto LABEL_514;
          case 304:
            v18[1] |= 0x2000000000uLL;
            unint64_t v271 = *((void *)this + 1);
            if (v271 >= *((void *)this + 2))
            {
              BOOL v274 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v272 = v271 + 1;
              int v273 = *(unsigned __int8 *)(*(void *)this + v271);
              *((void *)this + 1) = v272;
              BOOL v274 = v273 != 0;
            }

            *((_BYTE *)v17 + 34_Block_object_dispose(va, 8) = v274;
            goto LABEL_514;
          case 305:
            v18[1] |= 0x200000000uLL;
            unint64_t v275 = *((void *)this + 1);
            if (v275 >= *((void *)this + 2))
            {
              BOOL v278 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v276 = v275 + 1;
              int v277 = *(unsigned __int8 *)(*(void *)this + v275);
              *((void *)this + 1) = v276;
              BOOL v278 = v277 != 0;
            }

            *((_BYTE *)v17 + 344) = v278;
            goto LABEL_514;
          case 306:
            v18[1] |= 0x4000000000uLL;
            unint64_t v279 = *((void *)this + 1);
            if (v279 >= *((void *)this + 2))
            {
              BOOL v282 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v280 = v279 + 1;
              int v281 = *(unsigned __int8 *)(*(void *)this + v279);
              *((void *)this + 1) = v280;
              BOOL v282 = v281 != 0;
            }

            *((_BYTE *)v17 + 349) = v282;
            goto LABEL_514;
          case 307:
            v18[1] |= 0x400000000uLL;
            unint64_t v283 = *((void *)this + 1);
            if (v283 >= *((void *)this + 2))
            {
              BOOL v286 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v284 = v283 + 1;
              int v285 = *(unsigned __int8 *)(*(void *)this + v283);
              *((void *)this + 1) = v284;
              BOOL v286 = v285 != 0;
            }

            *((_BYTE *)v17 + 345) = v286;
            goto LABEL_514;
          case 308:
            v18[1] |= 0x40000000uLL;
            unint64_t v287 = *((void *)this + 1);
            if (v287 >= *((void *)this + 2))
            {
              BOOL v290 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v288 = v287 + 1;
              int v289 = *(unsigned __int8 *)(*(void *)this + v287);
              *((void *)this + 1) = v288;
              BOOL v290 = v289 != 0;
            }

            *((_BYTE *)v17 + 341) = v290;
            goto LABEL_514;
          case 309:
            v18[1] |= 0x1000000uLL;
            unint64_t v291 = *((void *)this + 1);
            if (v291 >= *((void *)this + 2))
            {
              BOOL v294 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v292 = v291 + 1;
              int v293 = *(unsigned __int8 *)(*(void *)this + v291);
              *((void *)this + 1) = v292;
              BOOL v294 = v293 != 0;
            }

            *((_BYTE *)v17 + 335) = v294;
            goto LABEL_514;
          case 310:
            v18[1] |= 0x8000uLL;
            unint64_t v295 = *((void *)this + 1);
            if (v295 >= *((void *)this + 2))
            {
              BOOL v298 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v296 = v295 + 1;
              int v297 = *(unsigned __int8 *)(*(void *)this + v295);
              *((void *)this + 1) = v296;
              BOOL v298 = v297 != 0;
            }

            *((_BYTE *)v17 + 326) = v298;
            goto LABEL_514;
          case 311:
            v18[1] |= 0x8000000000uLL;
            unint64_t v299 = *((void *)this + 1);
            if (v299 >= *((void *)this + 2))
            {
              BOOL v302 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v300 = v299 + 1;
              int v301 = *(unsigned __int8 *)(*(void *)this + v299);
              *((void *)this + 1) = v300;
              BOOL v302 = v301 != 0;
            }

            *((_BYTE *)v17 + 350) = v302;
            goto LABEL_514;
          case 312:
            v18[1] |= 0x800000000uLL;
            unint64_t v303 = *((void *)this + 1);
            if (v303 >= *((void *)this + 2))
            {
              BOOL v306 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v304 = v303 + 1;
              int v305 = *(unsigned __int8 *)(*(void *)this + v303);
              *((void *)this + 1) = v304;
              BOOL v306 = v305 != 0;
            }

            *((_BYTE *)v17 + 346) = v306;
            goto LABEL_514;
          case 313:
            *v18 |= 0x20000uLL;
            unint64_t v307 = *((void *)this + 1);
            unint64_t v308 = *((void *)this + 2);
            uint64_t v309 = *(void *)this;
            if (v307 <= 0xFFFFFFFFFFFFFFF5LL && v307 + 10 <= v308)
            {
              char v310 = 0;
              unsigned int v311 = 0;
              uint64_t v312 = 0LL;
              do
              {
                unint64_t v313 = v307 + 1;
                *uint64_t v10 = v307 + 1;
                char v314 = *(_BYTE *)(v309 + v307);
                v312 |= (unint64_t)(v314 & 0x7F) << v310;
                if ((v314 & 0x80) == 0) {
                  goto LABEL_1043;
                }
                v310 += 7;
                unint64_t v307 = v313;
                BOOL v25 = v311++ > 8;
              }

              while (!v25);
LABEL_727:
              LODWORD(v312) = 0;
              goto LABEL_1043;
            }

            char v671 = 0;
            unsigned int v672 = 0;
            uint64_t v312 = 0LL;
            if (v308 <= v307) {
              unint64_t v308 = *((void *)this + 1);
            }
            while (2)
            {
              if (v308 == v307)
              {
                LODWORD(v312) = 0;
                *int v12 = 1;
              }

              else
              {
                unint64_t v673 = v307 + 1;
                char v674 = *(_BYTE *)(v309 + v307);
                *uint64_t v10 = v673;
                v312 |= (unint64_t)(v674 & 0x7F) << v671;
                if (v674 < 0)
                {
                  v671 += 7;
                  unint64_t v307 = v673;
                  BOOL v25 = v672++ > 8;
                  if (v25) {
                    goto LABEL_727;
                  }
                  continue;
                }

                if (*v12) {
                  LODWORD(v312) = 0;
                }
              }

              break;
            }

LABEL_1043:
            v17[27] = v312;
            goto LABEL_514;
          case 314:
            v18[1] |= 0x20000uLL;
            unint64_t v315 = *((void *)this + 1);
            if (v315 >= *((void *)this + 2))
            {
              BOOL v318 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v316 = v315 + 1;
              int v317 = *(unsigned __int8 *)(*(void *)this + v315);
              *((void *)this + 1) = v316;
              BOOL v318 = v317 != 0;
            }

            *((_BYTE *)v17 + 32_Block_object_dispose(va, 8) = v318;
            goto LABEL_514;
          case 315:
            v18[1] |= 0x40000uLL;
            unint64_t v319 = *((void *)this + 1);
            if (v319 >= *((void *)this + 2))
            {
              BOOL v322 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v320 = v319 + 1;
              int v321 = *(unsigned __int8 *)(*(void *)this + v319);
              *((void *)this + 1) = v320;
              BOOL v322 = v321 != 0;
            }

            *((_BYTE *)v17 + 329) = v322;
            goto LABEL_514;
          case 316:
            v18[1] |= 0x20uLL;
            unint64_t v323 = *((void *)this + 1);
            if (v323 >= *((void *)this + 2))
            {
              BOOL v326 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v324 = v323 + 1;
              int v325 = *(unsigned __int8 *)(*(void *)this + v323);
              *((void *)this + 1) = v324;
              BOOL v326 = v325 != 0;
            }

            *((_BYTE *)v17 + 316) = v326;
            goto LABEL_514;
          case 317:
            *v18 |= 0x40000uLL;
            unint64_t v327 = *((void *)this + 1);
            unint64_t v328 = *((void *)this + 2);
            uint64_t v329 = *(void *)this;
            if (v327 <= 0xFFFFFFFFFFFFFFF5LL && v327 + 10 <= v328)
            {
              char v330 = 0;
              unsigned int v331 = 0;
              uint64_t v332 = 0LL;
              do
              {
                unint64_t v333 = v327 + 1;
                *uint64_t v10 = v327 + 1;
                char v334 = *(_BYTE *)(v329 + v327);
                v332 |= (unint64_t)(v334 & 0x7F) << v330;
                if ((v334 & 0x80) == 0) {
                  goto LABEL_1046;
                }
                v330 += 7;
                unint64_t v327 = v333;
                BOOL v25 = v331++ > 8;
              }

              while (!v25);
LABEL_740:
              LODWORD(v332) = 0;
              goto LABEL_1046;
            }

            char v675 = 0;
            unsigned int v676 = 0;
            uint64_t v332 = 0LL;
            if (v328 <= v327) {
              unint64_t v328 = *((void *)this + 1);
            }
            while (2)
            {
              if (v328 == v327)
              {
                LODWORD(v332) = 0;
                *int v12 = 1;
              }

              else
              {
                unint64_t v677 = v327 + 1;
                char v678 = *(_BYTE *)(v329 + v327);
                *uint64_t v10 = v677;
                v332 |= (unint64_t)(v678 & 0x7F) << v675;
                if (v678 < 0)
                {
                  v675 += 7;
                  unint64_t v327 = v677;
                  BOOL v25 = v676++ > 8;
                  if (v25) {
                    goto LABEL_740;
                  }
                  continue;
                }

                if (*v12) {
                  LODWORD(v332) = 0;
                }
              }

              break;
            }

LABEL_1046:
            v17[28] = v332;
            goto LABEL_514;
          case 318:
            v18[1] |= 0x40000000000uLL;
            unint64_t v335 = *((void *)this + 1);
            if (v335 >= *((void *)this + 2))
            {
              BOOL v338 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v336 = v335 + 1;
              int v337 = *(unsigned __int8 *)(*(void *)this + v335);
              *((void *)this + 1) = v336;
              BOOL v338 = v337 != 0;
            }

            *((_BYTE *)v17 + 353) = v338;
            goto LABEL_514;
          case 319:
            v18[1] |= 0x10000000000uLL;
            unint64_t v339 = *((void *)this + 1);
            if (v339 >= *((void *)this + 2))
            {
              BOOL v342 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v340 = v339 + 1;
              int v341 = *(unsigned __int8 *)(*(void *)this + v339);
              *((void *)this + 1) = v340;
              BOOL v342 = v341 != 0;
            }

            *((_BYTE *)v17 + 351) = v342;
            goto LABEL_514;
          case 320:
            v18[1] |= 0x20000000000uLL;
            unint64_t v343 = *((void *)this + 1);
            if (v343 >= *((void *)this + 2))
            {
              BOOL v346 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v344 = v343 + 1;
              int v345 = *(unsigned __int8 *)(*(void *)this + v343);
              *((void *)this + 1) = v344;
              BOOL v346 = v345 != 0;
            }

            *((_BYTE *)v17 + 352) = v346;
            goto LABEL_514;
          case 321:
            v18[1] |= (unint64_t)&_mh_execute_header;
            unint64_t v347 = *((void *)this + 1);
            if (v347 >= *((void *)this + 2))
            {
              BOOL v350 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v348 = v347 + 1;
              int v349 = *(unsigned __int8 *)(*(void *)this + v347);
              *((void *)this + 1) = v348;
              BOOL v350 = v349 != 0;
            }

            *((_BYTE *)v17 + 343) = v350;
            goto LABEL_514;
          case 322:
            v18[1] |= 0x80000000uLL;
            unint64_t v351 = *((void *)this + 1);
            if (v351 >= *((void *)this + 2))
            {
              BOOL v354 = 0;
              *int v12 = 1;
            }

            else
            {
              unint64_t v352 = v351 + 1;
              int v353 = *(unsigned __int8 *)(*(void *)this + v351);
              *((void *)this + 1) = v352;
              BOOL v354 = v353 != 0;
            }

            *((_BYTE *)v17 + 342) = v354;
            goto LABEL_514;
          default:
            switch((int)v33)
            {
              case 1:
                *v18 |= 0x800000uLL;
                unint64_t v34 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)this + 2)) {
                  goto LABEL_513;
                }
                v17[33] = *(_DWORD *)(*(void *)this + v34);
                goto LABEL_942;
              case 2:
                *v18 |= 0x400000uLL;
                unint64_t v133 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)this + 2)) {
                  goto LABEL_513;
                }
                v17[32] = *(_DWORD *)(*(void *)this + v133);
                goto LABEL_942;
              case 3:
                *v18 |= 0x1000000uLL;
                unint64_t v134 = *((void *)this + 1);
                unint64_t v135 = *((void *)this + 2);
                uint64_t v136 = *(void *)this;
                if (v134 <= 0xFFFFFFFFFFFFFFF5LL && v134 + 10 <= v135)
                {
                  char v137 = 0;
                  unsigned int v138 = 0;
                  uint64_t v139 = 0LL;
                  do
                  {
                    unint64_t v140 = v134 + 1;
                    *uint64_t v10 = v134 + 1;
                    char v141 = *(_BYTE *)(v136 + v134);
                    v139 |= (unint64_t)(v141 & 0x7F) << v137;
                    if ((v141 & 0x80) == 0) {
                      goto LABEL_1001;
                    }
                    v137 += 7;
                    unint64_t v134 = v140;
                    BOOL v25 = v138++ > 8;
                  }

                  while (!v25);
LABEL_603:
                  LODWORD(v139) = 0;
                  goto LABEL_1001;
                }

                char v615 = 0;
                unsigned int v616 = 0;
                uint64_t v139 = 0LL;
                if (v135 <= v134) {
                  unint64_t v135 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v135 == v134)
                  {
                    LODWORD(v139) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v617 = v134 + 1;
                    char v618 = *(_BYTE *)(v136 + v134);
                    *uint64_t v10 = v617;
                    v139 |= (unint64_t)(v618 & 0x7F) << v615;
                    if (v618 < 0)
                    {
                      v615 += 7;
                      unint64_t v134 = v617;
                      BOOL v25 = v616++ > 8;
                      if (v25) {
                        goto LABEL_603;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v139) = 0;
                    }
                  }

                  break;
                }

LABEL_1001:
                v17[34] = v139;
                goto LABEL_514;
              case 4:
                *v18 |= 0x10000000000000uLL;
                unint64_t v142 = *((void *)this + 1);
                unint64_t v143 = *((void *)this + 2);
                uint64_t v144 = *(void *)this;
                if (v142 <= 0xFFFFFFFFFFFFFFF5LL && v142 + 10 <= v143)
                {
                  char v145 = 0;
                  unsigned int v146 = 0;
                  uint64_t v147 = 0LL;
                  do
                  {
                    unint64_t v148 = v142 + 1;
                    *uint64_t v10 = v142 + 1;
                    char v149 = *(_BYTE *)(v144 + v142);
                    v147 |= (unint64_t)(v149 & 0x7F) << v145;
                    if ((v149 & 0x80) == 0) {
                      goto LABEL_1004;
                    }
                    v145 += 7;
                    unint64_t v142 = v148;
                    BOOL v25 = v146++ > 8;
                  }

                  while (!v25);
LABEL_610:
                  LODWORD(v147) = 0;
                  goto LABEL_1004;
                }

                char v619 = 0;
                unsigned int v620 = 0;
                uint64_t v147 = 0LL;
                if (v143 <= v142) {
                  unint64_t v143 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v143 == v142)
                  {
                    LODWORD(v147) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v621 = v142 + 1;
                    char v622 = *(_BYTE *)(v144 + v142);
                    *uint64_t v10 = v621;
                    v147 |= (unint64_t)(v622 & 0x7F) << v619;
                    if (v622 < 0)
                    {
                      v619 += 7;
                      unint64_t v142 = v621;
                      BOOL v25 = v620++ > 8;
                      if (v25) {
                        goto LABEL_610;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v147) = 0;
                    }
                  }

                  break;
                }

LABEL_1004:
                v17[62] = v147;
                goto LABEL_514;
              case 5:
                v18[1] |= 1uLL;
                unint64_t v150 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((void *)this + 2)) {
                  goto LABEL_513;
                }
                v17[74] = *(_DWORD *)(*(void *)this + v150);
                goto LABEL_942;
              case 6:
                *v18 |= 0x400000000000000uLL;
                unint64_t v151 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((void *)this + 2)) {
                  goto LABEL_513;
                }
                v17[68] = *(_DWORD *)(*(void *)this + v151);
                goto LABEL_942;
              case 7:
                *v18 |= 0x400000000000uLL;
                unint64_t v152 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((void *)this + 2)) {
                  goto LABEL_513;
                }
                v17[56] = *(_DWORD *)(*(void *)this + v152);
                goto LABEL_942;
              case 8:
                *v18 |= 0x200000000000uLL;
                unint64_t v153 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((void *)this + 2)) {
                  goto LABEL_513;
                }
                v17[55] = *(_DWORD *)(*(void *)this + v153);
                goto LABEL_942;
              case 9:
                *v18 |= 0x200uLL;
                unint64_t v154 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v154 + 4 > *((void *)this + 2)) {
                  goto LABEL_513;
                }
                v17[19] = *(_DWORD *)(*(void *)this + v154);
                goto LABEL_942;
              case 10:
                *v18 |= 0x80000000000000uLL;
                unint64_t v155 = *((void *)this + 1);
                unint64_t v156 = *((void *)this + 2);
                uint64_t v157 = *(void *)this;
                if (v155 <= 0xFFFFFFFFFFFFFFF5LL && v155 + 10 <= v156)
                {
                  char v158 = 0;
                  unsigned int v159 = 0;
                  uint64_t v160 = 0LL;
                  do
                  {
                    unint64_t v161 = v155 + 1;
                    *uint64_t v10 = v155 + 1;
                    char v162 = *(_BYTE *)(v157 + v155);
                    v160 |= (unint64_t)(v162 & 0x7F) << v158;
                    if ((v162 & 0x80) == 0) {
                      goto LABEL_1007;
                    }
                    v158 += 7;
                    unint64_t v155 = v161;
                    BOOL v25 = v159++ > 8;
                  }

                  while (!v25);
LABEL_617:
                  LODWORD(v160) = 0;
                  goto LABEL_1007;
                }

                char v623 = 0;
                unsigned int v624 = 0;
                uint64_t v160 = 0LL;
                if (v156 <= v155) {
                  unint64_t v156 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v156 == v155)
                  {
                    LODWORD(v160) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v625 = v155 + 1;
                    char v626 = *(_BYTE *)(v157 + v155);
                    *uint64_t v10 = v625;
                    v160 |= (unint64_t)(v626 & 0x7F) << v623;
                    if (v626 < 0)
                    {
                      v623 += 7;
                      unint64_t v155 = v625;
                      BOOL v25 = v624++ > 8;
                      if (v25) {
                        goto LABEL_617;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v160) = 0;
                    }
                  }

                  break;
                }

LABEL_1007:
                v17[65] = v160;
                goto LABEL_514;
              case 11:
                *v18 |= 0x2000000uLL;
                unint64_t v163 = *((void *)this + 1);
                unint64_t v164 = *((void *)this + 2);
                uint64_t v165 = *(void *)this;
                if (v163 <= 0xFFFFFFFFFFFFFFF5LL && v163 + 10 <= v164)
                {
                  char v166 = 0;
                  unsigned int v167 = 0;
                  uint64_t v168 = 0LL;
                  do
                  {
                    unint64_t v169 = v163 + 1;
                    *uint64_t v10 = v163 + 1;
                    char v170 = *(_BYTE *)(v165 + v163);
                    v168 |= (unint64_t)(v170 & 0x7F) << v166;
                    if ((v170 & 0x80) == 0) {
                      goto LABEL_1010;
                    }
                    v166 += 7;
                    unint64_t v163 = v169;
                    BOOL v25 = v167++ > 8;
                  }

                  while (!v25);
LABEL_624:
                  LODWORD(v16_Block_object_dispose(va, 8) = 0;
                  goto LABEL_1010;
                }

                char v627 = 0;
                unsigned int v628 = 0;
                uint64_t v168 = 0LL;
                if (v164 <= v163) {
                  unint64_t v164 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v164 == v163)
                  {
                    LODWORD(v16_Block_object_dispose(va, 8) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v629 = v163 + 1;
                    char v630 = *(_BYTE *)(v165 + v163);
                    *uint64_t v10 = v629;
                    v168 |= (unint64_t)(v630 & 0x7F) << v627;
                    if (v630 < 0)
                    {
                      v627 += 7;
                      unint64_t v163 = v629;
                      BOOL v25 = v628++ > 8;
                      if (v25) {
                        goto LABEL_624;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v16_Block_object_dispose(va, 8) = 0;
                    }
                  }

                  break;
                }

LABEL_1010:
                v17[35] = v168;
                goto LABEL_514;
              case 12:
                *v18 |= 0x10000uLL;
                unint64_t v171 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v171 + 4 > *((void *)this + 2)) {
                  goto LABEL_513;
                }
                v17[26] = *(_DWORD *)(*(void *)this + v171);
                goto LABEL_942;
              case 13:
                v18[1] |= 8uLL;
                unint64_t v172 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v172 + 4 > *((void *)this + 2)) {
                  goto LABEL_513;
                }
                v17[77] = *(_DWORD *)(*(void *)this + v172);
                goto LABEL_942;
              case 14:
                v18[1] |= 0x10uLL;
                unint64_t v173 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v173 + 4 > *((void *)this + 2)) {
                  goto LABEL_513;
                }
                v17[78] = *(_DWORD *)(*(void *)this + v173);
                goto LABEL_942;
              case 15:
                *v18 |= 0x80000000000uLL;
                unint64_t v174 = *((void *)this + 1);
                unint64_t v175 = *((void *)this + 2);
                uint64_t v176 = *(void *)this;
                if (v174 <= 0xFFFFFFFFFFFFFFF5LL && v174 + 10 <= v175)
                {
                  char v177 = 0;
                  unsigned int v178 = 0;
                  uint64_t v179 = 0LL;
                  do
                  {
                    unint64_t v180 = v174 + 1;
                    *uint64_t v10 = v174 + 1;
                    char v181 = *(_BYTE *)(v176 + v174);
                    v179 |= (unint64_t)(v181 & 0x7F) << v177;
                    if ((v181 & 0x80) == 0) {
                      goto LABEL_1013;
                    }
                    v177 += 7;
                    unint64_t v174 = v180;
                    BOOL v25 = v178++ > 8;
                  }

                  while (!v25);
LABEL_631:
                  LODWORD(v179) = 0;
                  goto LABEL_1013;
                }

                char v631 = 0;
                unsigned int v632 = 0;
                uint64_t v179 = 0LL;
                if (v175 <= v174) {
                  unint64_t v175 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v175 == v174)
                  {
                    LODWORD(v179) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v633 = v174 + 1;
                    char v634 = *(_BYTE *)(v176 + v174);
                    *uint64_t v10 = v633;
                    v179 |= (unint64_t)(v634 & 0x7F) << v631;
                    if (v634 < 0)
                    {
                      v631 += 7;
                      unint64_t v174 = v633;
                      BOOL v25 = v632++ > 8;
                      if (v25) {
                        goto LABEL_631;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v179) = 0;
                    }
                  }

                  break;
                }

LABEL_1013:
                v17[53] = v179;
                goto LABEL_514;
              case 16:
                *v18 |= 0x20000000000uLL;
                unint64_t v182 = *((void *)this + 1);
                unint64_t v183 = *((void *)this + 2);
                uint64_t v184 = *(void *)this;
                if (v182 <= 0xFFFFFFFFFFFFFFF5LL && v182 + 10 <= v183)
                {
                  char v185 = 0;
                  unsigned int v186 = 0;
                  uint64_t v187 = 0LL;
                  do
                  {
                    unint64_t v188 = v182 + 1;
                    *uint64_t v10 = v182 + 1;
                    char v189 = *(_BYTE *)(v184 + v182);
                    v187 |= (unint64_t)(v189 & 0x7F) << v185;
                    if ((v189 & 0x80) == 0) {
                      goto LABEL_1016;
                    }
                    v185 += 7;
                    unint64_t v182 = v188;
                    BOOL v25 = v186++ > 8;
                  }

                  while (!v25);
LABEL_638:
                  LODWORD(v187) = 0;
                  goto LABEL_1016;
                }

                char v635 = 0;
                unsigned int v636 = 0;
                uint64_t v187 = 0LL;
                if (v183 <= v182) {
                  unint64_t v183 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v183 == v182)
                  {
                    LODWORD(v187) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v637 = v182 + 1;
                    char v638 = *(_BYTE *)(v184 + v182);
                    *uint64_t v10 = v637;
                    v187 |= (unint64_t)(v638 & 0x7F) << v635;
                    if (v638 < 0)
                    {
                      v635 += 7;
                      unint64_t v182 = v637;
                      BOOL v25 = v636++ > 8;
                      if (v25) {
                        goto LABEL_638;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v187) = 0;
                    }
                  }

                  break;
                }

LABEL_1016:
                v17[51] = v187;
                goto LABEL_514;
              case 17:
                *v18 |= 0x4000000000000uLL;
                unint64_t v190 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v190 + 4 > *((void *)this + 2)) {
                  goto LABEL_513;
                }
                v17[60] = *(_DWORD *)(*(void *)this + v190);
                goto LABEL_942;
              case 18:
                *v18 |= 0x1000000000000000uLL;
                unint64_t v191 = *((void *)this + 1);
                unint64_t v192 = *((void *)this + 2);
                uint64_t v193 = *(void *)this;
                if (v191 <= 0xFFFFFFFFFFFFFFF5LL && v191 + 10 <= v192)
                {
                  char v194 = 0;
                  unsigned int v195 = 0;
                  uint64_t v196 = 0LL;
                  do
                  {
                    unint64_t v197 = v191 + 1;
                    *uint64_t v10 = v191 + 1;
                    char v198 = *(_BYTE *)(v193 + v191);
                    v196 |= (unint64_t)(v198 & 0x7F) << v194;
                    if ((v198 & 0x80) == 0) {
                      goto LABEL_1019;
                    }
                    v194 += 7;
                    unint64_t v191 = v197;
                    BOOL v25 = v195++ > 8;
                  }

                  while (!v25);
LABEL_645:
                  LODWORD(v196) = 0;
                  goto LABEL_1019;
                }

                char v639 = 0;
                unsigned int v640 = 0;
                uint64_t v196 = 0LL;
                if (v192 <= v191) {
                  unint64_t v192 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v192 == v191)
                  {
                    LODWORD(v196) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v641 = v191 + 1;
                    char v642 = *(_BYTE *)(v193 + v191);
                    *uint64_t v10 = v641;
                    v196 |= (unint64_t)(v642 & 0x7F) << v639;
                    if (v642 < 0)
                    {
                      v639 += 7;
                      unint64_t v191 = v641;
                      BOOL v25 = v640++ > 8;
                      if (v25) {
                        goto LABEL_645;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v196) = 0;
                    }
                  }

                  break;
                }

LABEL_1019:
                v17[70] = v196;
                goto LABEL_514;
              case 19:
                v18[1] |= 2uLL;
                unint64_t v199 = *((void *)this + 1);
                unint64_t v200 = *((void *)this + 2);
                uint64_t v201 = *(void *)this;
                if (v199 <= 0xFFFFFFFFFFFFFFF5LL && v199 + 10 <= v200)
                {
                  char v202 = 0;
                  unsigned int v203 = 0;
                  uint64_t v204 = 0LL;
                  do
                  {
                    unint64_t v205 = v199 + 1;
                    *uint64_t v10 = v199 + 1;
                    char v206 = *(_BYTE *)(v201 + v199);
                    v204 |= (unint64_t)(v206 & 0x7F) << v202;
                    if ((v206 & 0x80) == 0) {
                      goto LABEL_1022;
                    }
                    v202 += 7;
                    unint64_t v199 = v205;
                    BOOL v25 = v203++ > 8;
                  }

                  while (!v25);
LABEL_652:
                  LODWORD(v204) = 0;
                  goto LABEL_1022;
                }

                char v643 = 0;
                unsigned int v644 = 0;
                uint64_t v204 = 0LL;
                if (v200 <= v199) {
                  unint64_t v200 = *((void *)this + 1);
                }
                while (2)
                {
                  if (v200 == v199)
                  {
                    LODWORD(v204) = 0;
                    *int v12 = 1;
                  }

                  else
                  {
                    unint64_t v645 = v199 + 1;
                    char v646 = *(_BYTE *)(v201 + v199);
                    *uint64_t v10 = v645;
                    v204 |= (unint64_t)(v646 & 0x7F) << v643;
                    if (v646 < 0)
                    {
                      v643 += 7;
                      unint64_t v199 = v645;
                      BOOL v25 = v644++ > 8;
                      if (v25) {
                        goto LABEL_652;
                      }
                      continue;
                    }

                    if (*v12) {
                      LODWORD(v204) = 0;
                    }
                  }

                  break;
                }

LABEL_1022:
                v17[75] = v204;
                goto LABEL_514;
              default:
                switch((int)v33)
                {
                  case 'e':
                    *v18 |= 0x80uLL;
                    unint64_t v48 = *((void *)this + 1);
                    unint64_t v49 = *((void *)this + 2);
                    uint64_t v50 = *(void *)this;
                    if (v48 <= 0xFFFFFFFFFFFFFFF5LL && v48 + 10 <= v49)
                    {
                      char v51 = 0;
                      unsigned int v52 = 0;
                      uint64_t v53 = 0LL;
                      int v12 = v767;
                      int v17 = a1;
                      do
                      {
                        unint64_t v54 = v48 + 1;
                        *uint64_t v10 = v48 + 1;
                        char v55 = *(_BYTE *)(v50 + v48);
                        v53 |= (unint64_t)(v55 & 0x7F) << v51;
                        if ((v55 & 0x80) == 0) {
                          goto LABEL_995;
                        }
                        v51 += 7;
                        unint64_t v48 = v54;
                        BOOL v25 = v52++ > 8;
                      }

                      while (!v25);
LABEL_586:
                      uint64_t v53 = 0LL;
                      goto LABEL_995;
                    }

                    char v607 = 0;
                    unsigned int v608 = 0;
                    uint64_t v53 = 0LL;
                    if (v49 <= v48) {
                      unint64_t v49 = *((void *)this + 1);
                    }
                    int v12 = v767;
                    int v17 = a1;
                    while (2)
                    {
                      if (v49 == v48)
                      {
                        uint64_t v53 = 0LL;
                        _BYTE *v767 = 1;
                      }

                      else
                      {
                        unint64_t v609 = v48 + 1;
                        char v610 = *(_BYTE *)(v50 + v48);
                        *uint64_t v10 = v609;
                        v53 |= (unint64_t)(v610 & 0x7F) << v607;
                        if (v610 < 0)
                        {
                          v607 += 7;
                          unint64_t v48 = v609;
                          BOOL v25 = v608++ > 8;
                          if (v25) {
                            goto LABEL_586;
                          }
                          continue;
                        }

                        if (*v767) {
                          uint64_t v53 = 0LL;
                        }
                      }

                      break;
                    }

LABEL_995:
                    *((void *)v17 + _Block_object_dispose(va, 8) = v53;
                    goto LABEL_514;
                  case 'f':
                    *v18 |= 1uLL;
                    unint64_t v355 = *((void *)this + 1);
                    unint64_t v356 = *((void *)this + 2);
                    uint64_t v357 = *(void *)this;
                    if (v355 <= 0xFFFFFFFFFFFFFFF5LL && v355 + 10 <= v356)
                    {
                      char v358 = 0;
                      unsigned int v359 = 0;
                      uint64_t v360 = 0LL;
                      int v12 = v767;
                      int v17 = a1;
                      do
                      {
                        unint64_t v361 = v355 + 1;
                        *uint64_t v10 = v355 + 1;
                        char v362 = *(_BYTE *)(v357 + v355);
                        v360 |= (unint64_t)(v362 & 0x7F) << v358;
                        if ((v362 & 0x80) == 0) {
                          goto LABEL_1049;
                        }
                        v358 += 7;
                        unint64_t v355 = v361;
                        BOOL v25 = v359++ > 8;
                      }

                      while (!v25);
LABEL_758:
                      uint64_t v360 = 0LL;
                      goto LABEL_1049;
                    }

                    char v679 = 0;
                    unsigned int v680 = 0;
                    uint64_t v360 = 0LL;
                    if (v356 <= v355) {
                      unint64_t v356 = *((void *)this + 1);
                    }
                    int v12 = v767;
                    int v17 = a1;
                    break;
                  case 'g':
                    v18[1] |= 0x4000000uLL;
                    unint64_t v363 = *((void *)this + 1);
                    if (v363 >= *((void *)this + 2))
                    {
                      BOOL v366 = 0;
                      int v12 = v767;
                      int v17 = a1;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v364 = v363 + 1;
                      int v365 = *(unsigned __int8 *)(*(void *)this + v363);
                      *((void *)this + 1) = v364;
                      BOOL v366 = v365 != 0;
                      int v12 = v767;
                      int v17 = a1;
                    }

                    *((_BYTE *)v17 + 337) = v366;
                    goto LABEL_514;
                  case 'h':
                    v18[1] |= 0x2000000uLL;
                    unint64_t v367 = *((void *)this + 1);
                    if (v367 >= *((void *)this + 2))
                    {
                      BOOL v370 = 0;
                      int v12 = v767;
                      int v17 = a1;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v368 = v367 + 1;
                      int v369 = *(unsigned __int8 *)(*(void *)this + v367);
                      *((void *)this + 1) = v368;
                      BOOL v370 = v369 != 0;
                      int v12 = v767;
                      int v17 = a1;
                    }

                    *((_BYTE *)v17 + 336) = v370;
                    goto LABEL_514;
                  case 'i':
                    v18[1] |= 0x800uLL;
                    unint64_t v371 = *((void *)this + 1);
                    if (v371 >= *((void *)this + 2))
                    {
                      BOOL v374 = 0;
                      int v12 = v767;
                      int v17 = a1;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v372 = v371 + 1;
                      int v373 = *(unsigned __int8 *)(*(void *)this + v371);
                      *((void *)this + 1) = v372;
                      BOOL v374 = v373 != 0;
                      int v12 = v767;
                      int v17 = a1;
                    }

                    *((_BYTE *)v17 + 322) = v374;
                    goto LABEL_514;
                  case 'j':
                    v18[1] |= 0x1000uLL;
                    unint64_t v375 = *((void *)this + 1);
                    if (v375 >= *((void *)this + 2))
                    {
                      BOOL v378 = 0;
                      int v12 = v767;
                      int v17 = a1;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v376 = v375 + 1;
                      int v377 = *(unsigned __int8 *)(*(void *)this + v375);
                      *((void *)this + 1) = v376;
                      BOOL v378 = v377 != 0;
                      int v12 = v767;
                      int v17 = a1;
                    }

                    *((_BYTE *)v17 + 323) = v378;
                    goto LABEL_514;
                  case 'k':
                    v18[1] |= 0x200000uLL;
                    unint64_t v379 = *((void *)this + 1);
                    if (v379 >= *((void *)this + 2))
                    {
                      BOOL v382 = 0;
                      int v12 = v767;
                      int v17 = a1;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v380 = v379 + 1;
                      int v381 = *(unsigned __int8 *)(*(void *)this + v379);
                      *((void *)this + 1) = v380;
                      BOOL v382 = v381 != 0;
                      int v12 = v767;
                      int v17 = a1;
                    }

                    *((_BYTE *)v17 + 332) = v382;
                    goto LABEL_514;
                  case 'l':
                    v18[1] |= 0x100000uLL;
                    unint64_t v383 = *((void *)this + 1);
                    if (v383 >= *((void *)this + 2))
                    {
                      BOOL v386 = 0;
                      int v12 = v767;
                      int v17 = a1;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v384 = v383 + 1;
                      int v385 = *(unsigned __int8 *)(*(void *)this + v383);
                      *((void *)this + 1) = v384;
                      BOOL v386 = v385 != 0;
                      int v12 = v767;
                      int v17 = a1;
                    }

                    *((_BYTE *)v17 + 331) = v386;
                    goto LABEL_514;
                  case 'm':
                    v18[1] |= 0x200uLL;
                    unint64_t v387 = *((void *)this + 1);
                    if (v387 >= *((void *)this + 2))
                    {
                      BOOL v390 = 0;
                      int v12 = v767;
                      int v17 = a1;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v388 = v387 + 1;
                      int v389 = *(unsigned __int8 *)(*(void *)this + v387);
                      *((void *)this + 1) = v388;
                      BOOL v390 = v389 != 0;
                      int v12 = v767;
                      int v17 = a1;
                    }

                    *((_BYTE *)v17 + 320) = v390;
                    goto LABEL_514;
                  case 'n':
                    v18[1] |= 0x400000uLL;
                    unint64_t v391 = *((void *)this + 1);
                    if (v391 >= *((void *)this + 2))
                    {
                      BOOL v394 = 0;
                      int v12 = v767;
                      int v17 = a1;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v392 = v391 + 1;
                      int v393 = *(unsigned __int8 *)(*(void *)this + v391);
                      *((void *)this + 1) = v392;
                      BOOL v394 = v393 != 0;
                      int v12 = v767;
                      int v17 = a1;
                    }

                    *((_BYTE *)v17 + 333) = v394;
                    goto LABEL_514;
                  case 'o':
                    v18[1] |= 0x800000uLL;
                    unint64_t v395 = *((void *)this + 1);
                    if (v395 >= *((void *)this + 2))
                    {
                      BOOL v398 = 0;
                      int v12 = v767;
                      int v17 = a1;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v396 = v395 + 1;
                      int v397 = *(unsigned __int8 *)(*(void *)this + v395);
                      *((void *)this + 1) = v396;
                      BOOL v398 = v397 != 0;
                      int v12 = v767;
                      int v17 = a1;
                    }

                    *((_BYTE *)v17 + 334) = v398;
                    goto LABEL_514;
                  case 'p':
                    v18[1] |= 0x80uLL;
                    unint64_t v399 = *((void *)this + 1);
                    if (v399 >= *((void *)this + 2))
                    {
                      BOOL v402 = 0;
                      int v12 = v767;
                      int v17 = a1;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v400 = v399 + 1;
                      int v401 = *(unsigned __int8 *)(*(void *)this + v399);
                      *((void *)this + 1) = v400;
                      BOOL v402 = v401 != 0;
                      int v12 = v767;
                      int v17 = a1;
                    }

                    *((_BYTE *)v17 + 31_Block_object_dispose(va, 8) = v402;
                    goto LABEL_514;
                  case 'q':
                    v18[1] |= 0x80000uLL;
                    unint64_t v403 = *((void *)this + 1);
                    if (v403 >= *((void *)this + 2))
                    {
                      BOOL v406 = 0;
                      int v12 = v767;
                      int v17 = a1;
                      _BYTE *v767 = 1;
                    }

                    else
                    {
                      unint64_t v404 = v403 + 1;
                      int v405 = *(unsigned __int8 *)(*(void *)this + v403);
                      *((void *)this + 1) = v404;
                      BOOL v406 = v405 != 0;
                      int v12 = v767;
                      int v17 = a1;
                    }

                    *((_BYTE *)v17 + 330) = v406;
                    goto LABEL_514;
                  default:
                    goto LABEL_141;
                }

                break;
            }

            break;
        }

        while (1)
        {
          if (v356 == v355)
          {
            uint64_t v360 = 0LL;
            _BYTE *v767 = 1;
            goto LABEL_1049;
          }

          unint64_t v681 = v355 + 1;
          char v682 = *(_BYTE *)(v357 + v355);
          *uint64_t v10 = v681;
          v360 |= (unint64_t)(v682 & 0x7F) << v679;
          if ((v682 & 0x80) == 0) {
            break;
          }
          v679 += 7;
          unint64_t v355 = v681;
          BOOL v25 = v680++ > 8;
          if (v25) {
            goto LABEL_758;
          }
        }

        if (*v767) {
          uint64_t v360 = 0LL;
        }
LABEL_1049:
        *((void *)v17 + 1) = v360;
      }

LABEL_514:
      unint64_t v9 = *((void *)this + 1);
      unint64_t v13 = *((void *)this + 2);
      int v11 = *((unsigned __int8 *)this + 24);
    }

    while (v9 < v13 && v11 == 0);
  }

  return v11 == 0;
}

uint64_t sub_1010C6B24(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = (uint64_t *)(result + 356);
  uint64_t v5 = *(void *)(result + 356);
  if ((v5 & 0x800000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 132), 1u);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    if ((*v4 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v6 = *(void *)(result + 364);
  if ((v5 & 0x400000) != 0)
  {
LABEL_5:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 2u);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
  }

uint64_t sub_1010C7710(uint64_t result)
{
  *(void *)uint64_t result = &off_101899AD8;
  *(void *)(result + 204) = 0LL;
  *(_DWORD *)(result + 212) = 0;
  return result;
}

void sub_1010C772C(PB::Base *a1)
{
}

uint64_t sub_1010C7740(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899AD8;
  *(void *)(result + 204) = 0LL;
  *(_DWORD *)(result + 212) = 0;
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 1) != 0)
  {
    unint64_t v4 = 0LL;
    uint64_t v6 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 214) = 0;
    *(_WORD *)(result + 212) = 0;
    uint64_t v3 = 1LL;
    *(void *)(result + 204) = 1LL;
    *(void *)(result + _Block_object_dispose(va, 8) = v6;
    int v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
    uint64_t v2 = *(void *)(a2 + 204);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v3 = 0LL;
  unint64_t v4 = 0LL;
  int v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 40);
    v3 |= 0x10uLL;
    *(void *)(result + 204) = v3;
    *(_WORD *)(result + 212) = 0;
    *(_BYTE *)(result + 214) = 0;
    *(_DWORD *)(result + 40) = v7;
    int v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
    uint64_t v2 = *(void *)(a2 + 204);
  }

uint64_t sub_1010C87C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x200000000LL) != 0)
  {
    PB::TextFormatter::format(this, "chaosMet", *(_BYTE *)(a1 + 156));
    int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
    uint64_t v5 = *(void *)(a1 + 204);
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  if ((v5 & 0x400000000LL) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "chaosMet0", *(_BYTE *)(a1 + 157));
    int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
    uint64_t v5 = *(void *)(a1 + 204);
  }

uint64_t sub_1010C95AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = a1 + 204;
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }

LABEL_398:
            *(void *)(a1 + 24) = v51;
            goto LABEL_378;
          case 1104:
            *(void *)v8 |= 0x8000000uLL;
            unint64_t v242 = *((void *)this + 1);
            if (v242 > 0xFFFFFFFFFFFFFFFBLL || v242 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v242);
            goto LABEL_377;
          case 1105:
            *(void *)v8 |= 0x800000uLL;
            unint64_t v243 = *((void *)this + 1);
            if (v243 > 0xFFFFFFFFFFFFFFFBLL || v243 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v243);
            goto LABEL_377;
          case 1106:
            *(void *)v8 |= 0x80000uLL;
            unint64_t v244 = *((void *)this + 1);
            if (v244 > 0xFFFFFFFFFFFFFFFBLL || v244 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v244);
            goto LABEL_377;
          case 1107:
            *(void *)v8 |= 0x80000000uLL;
            unint64_t v245 = *((void *)this + 1);
            if (v245 > 0xFFFFFFFFFFFFFFFBLL || v245 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v245);
            goto LABEL_377;
          case 1108:
            *(void *)v8 |= 0x800000000000uLL;
            unint64_t v246 = *((void *)this + 1);
            if (v246 >= *((void *)this + 2))
            {
              BOOL v249 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v247 = v246 + 1;
              int v248 = *(unsigned __int8 *)(*(void *)this + v246);
              *((void *)this + 1) = v247;
              BOOL v249 = v248 != 0;
            }

            *(_BYTE *)(a1 + 170) = v249;
            goto LABEL_378;
          case 1109:
            *(void *)v8 |= 0x800000000uLL;
            unint64_t v250 = *((void *)this + 1);
            if (v250 >= *((void *)this + 2))
            {
              BOOL v253 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v251 = v250 + 1;
              int v252 = *(unsigned __int8 *)(*(void *)this + v250);
              *((void *)this + 1) = v251;
              BOOL v253 = v252 != 0;
            }

            *(_BYTE *)(a1 + 15_Block_object_dispose(va, 8) = v253;
            goto LABEL_378;
          case 1110:
            char v254 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x8000u;
            *(_BYTE *)(v8 + 10) = v254;
            unint64_t v255 = *((void *)this + 1);
            if (v255 >= *((void *)this + 2))
            {
              BOOL v258 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v256 = v255 + 1;
              int v257 = *(unsigned __int8 *)(*(void *)this + v255);
              *((void *)this + 1) = v256;
              BOOL v258 = v257 != 0;
            }

            *(_BYTE *)(a1 + 202) = v258;
            goto LABEL_378;
          case 1111:
            *(void *)v8 |= 0x8000000000uLL;
            unint64_t v259 = *((void *)this + 1);
            if (v259 >= *((void *)this + 2))
            {
              BOOL v262 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v260 = v259 + 1;
              int v261 = *(unsigned __int8 *)(*(void *)this + v259);
              *((void *)this + 1) = v260;
              BOOL v262 = v261 != 0;
            }

            *(_BYTE *)(a1 + 162) = v262;
            goto LABEL_378;
          case 1112:
            *(void *)v8 |= 0x80000000000uLL;
            unint64_t v263 = *((void *)this + 1);
            if (v263 >= *((void *)this + 2))
            {
              BOOL v266 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v264 = v263 + 1;
              int v265 = *(unsigned __int8 *)(*(void *)this + v263);
              *((void *)this + 1) = v264;
              BOOL v266 = v265 != 0;
            }

            *(_BYTE *)(a1 + 166) = v266;
            goto LABEL_378;
          case 1113:
            char v267 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x800u;
            *(_BYTE *)(v8 + 10) = v267;
            unint64_t v268 = *((void *)this + 1);
            if (v268 >= *((void *)this + 2))
            {
              BOOL v271 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v269 = v268 + 1;
              int v270 = *(unsigned __int8 *)(*(void *)this + v268);
              *((void *)this + 1) = v269;
              BOOL v271 = v270 != 0;
            }

            *(_BYTE *)(a1 + 19_Block_object_dispose(va, 8) = v271;
            goto LABEL_378;
          case 1114:
            *(void *)v8 |= 0x800uLL;
            unint64_t v272 = *((void *)this + 1);
            if (v272 > 0xFFFFFFFFFFFFFFFBLL || v272 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v272);
            goto LABEL_377;
          case 1115:
            *(void *)v8 |= 0x80uLL;
            unint64_t v273 = *((void *)this + 1);
            if (v273 > 0xFFFFFFFFFFFFFFFBLL || v273 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v273);
            goto LABEL_377;
          case 1116:
            *(void *)v8 |= 0x8000uLL;
            unint64_t v274 = *((void *)this + 1);
            if (v274 <= 0xFFFFFFFFFFFFFFFBLL && v274 + 4 <= *((void *)this + 2))
            {
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v274);
LABEL_377:
              *((void *)this + 1) += 4LL;
            }

            else
            {
LABEL_232:
              *((_BYTE *)this + 24) = 1;
            }

            goto LABEL_378;
          case 1117:
            *(void *)v8 |= 0x8000000000000000LL;
            unint64_t v275 = *((void *)this + 1);
            if (v275 >= *((void *)this + 2))
            {
              BOOL v278 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v276 = v275 + 1;
              int v277 = *(unsigned __int8 *)(*(void *)this + v275);
              *((void *)this + 1) = v276;
              BOOL v278 = v277 != 0;
            }

            *(_BYTE *)(a1 + 186) = v278;
            goto LABEL_378;
          case 1118:
            *(void *)v8 |= 0x8000000000000uLL;
            unint64_t v279 = *((void *)this + 1);
            if (v279 >= *((void *)this + 2))
            {
              BOOL v282 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v280 = v279 + 1;
              int v281 = *(unsigned __int8 *)(*(void *)this + v279);
              *((void *)this + 1) = v280;
              BOOL v282 = v281 != 0;
            }

            *(_BYTE *)(a1 + 174) = v282;
            goto LABEL_378;
          case 1119:
            char v283 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x80u;
            *(_BYTE *)(v8 + 10) = v283;
            unint64_t v284 = *((void *)this + 1);
            if (v284 >= *((void *)this + 2))
            {
              BOOL v287 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v285 = v284 + 1;
              int v286 = *(unsigned __int8 *)(*(void *)this + v284);
              *((void *)this + 1) = v285;
              BOOL v287 = v286 != 0;
            }

            *(_BYTE *)(a1 + 194) = v287;
            goto LABEL_378;
          case 1120:
            *(void *)v8 |= 0x80000000000000uLL;
            unint64_t v288 = *((void *)this + 1);
            if (v288 >= *((void *)this + 2))
            {
              BOOL v291 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v289 = v288 + 1;
              int v290 = *(unsigned __int8 *)(*(void *)this + v288);
              *((void *)this + 1) = v289;
              BOOL v291 = v290 != 0;
            }

            *(_BYTE *)(a1 + 17_Block_object_dispose(va, 8) = v291;
            goto LABEL_378;
          case 1121:
            *(void *)v8 |= 0x800000000000000uLL;
            unint64_t v292 = *((void *)this + 1);
            if (v292 >= *((void *)this + 2))
            {
              BOOL v295 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v293 = v292 + 1;
              int v294 = *(unsigned __int8 *)(*(void *)this + v292);
              *((void *)this + 1) = v293;
              BOOL v295 = v294 != 0;
            }

            *(_BYTE *)(a1 + 182) = v295;
            goto LABEL_378;
          case 1122:
            char v296 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 8u;
            *(_BYTE *)(v8 + 10) = v296;
            unint64_t v297 = *((void *)this + 1);
            if (v297 >= *((void *)this + 2))
            {
              BOOL v300 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v298 = v297 + 1;
              int v299 = *(unsigned __int8 *)(*(void *)this + v297);
              *((void *)this + 1) = v298;
              BOOL v300 = v299 != 0;
            }

            *(_BYTE *)(a1 + 190) = v300;
            goto LABEL_378;
          default:
            switch((int)v21)
            {
              case 1203:
                *(void *)v8 |= 8uLL;
                unint64_t v30 = *((void *)this + 1);
                unint64_t v31 = *((void *)this + 2);
                uint64_t v32 = *(void *)this;
                if (v30 <= 0xFFFFFFFFFFFFFFF5LL && v30 + 10 <= v31)
                {
                  char v33 = 0;
                  unsigned int v34 = 0;
                  uint64_t v35 = 0LL;
                  do
                  {
                    unint64_t v36 = v30 + 1;
                    *((void *)this + 1) = v30 + 1;
                    char v37 = *(_BYTE *)(v32 + v30);
                    v35 |= (unint64_t)(v37 & 0x7F) << v33;
                    if ((v37 & 0x80) == 0) {
                      goto LABEL_390;
                    }
                    v33 += 7;
                    unint64_t v30 = v36;
                    BOOL v15 = v34++ > 8;
                  }

                  while (!v15);
LABEL_258:
                  uint64_t v35 = 0LL;
                  goto LABEL_390;
                }

                char v305 = 0;
                unsigned int v306 = 0;
                uint64_t v35 = 0LL;
                if (v31 <= v30) {
                  unint64_t v31 = *((void *)this + 1);
                }
                break;
              case 1204:
                *(void *)v8 |= 0x10000000uLL;
                unint64_t v121 = *((void *)this + 1);
                if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v121);
                goto LABEL_377;
              case 1205:
                *(void *)v8 |= 0x1000000uLL;
                unint64_t v122 = *((void *)this + 1);
                if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v122);
                goto LABEL_377;
              case 1206:
                *(void *)v8 |= 0x100000uLL;
                unint64_t v123 = *((void *)this + 1);
                if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v123);
                goto LABEL_377;
              case 1207:
                *(void *)v8 |= (unint64_t)&_mh_execute_header;
                unint64_t v124 = *((void *)this + 1);
                if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v124);
                goto LABEL_377;
              case 1208:
                *(void *)v8 |= 0x1000000000000uLL;
                unint64_t v125 = *((void *)this + 1);
                if (v125 >= *((void *)this + 2))
                {
                  BOOL v128 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v126 = v125 + 1;
                  int v127 = *(unsigned __int8 *)(*(void *)this + v125);
                  *((void *)this + 1) = v126;
                  BOOL v128 = v127 != 0;
                }

                *(_BYTE *)(a1 + 171) = v128;
                goto LABEL_378;
              case 1209:
                *(void *)v8 |= 0x1000000000uLL;
                unint64_t v129 = *((void *)this + 1);
                if (v129 >= *((void *)this + 2))
                {
                  BOOL v132 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v130 = v129 + 1;
                  int v131 = *(unsigned __int8 *)(*(void *)this + v129);
                  *((void *)this + 1) = v130;
                  BOOL v132 = v131 != 0;
                }

                *(_BYTE *)(a1 + 159) = v132;
                goto LABEL_378;
              case 1210:
                int v133 = *(unsigned __int16 *)(v8 + 8);
                unsigned int v134 = (v133 | (*(unsigned __int8 *)(v8 + 10) << 16) | 0x10000u) >> 16;
                *(_WORD *)(v8 + _Block_object_dispose(va, 8) = v133;
                *(_BYTE *)(v8 + 10) = v134;
                unint64_t v135 = *((void *)this + 1);
                if (v135 >= *((void *)this + 2))
                {
                  BOOL v138 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v136 = v135 + 1;
                  int v137 = *(unsigned __int8 *)(*(void *)this + v135);
                  *((void *)this + 1) = v136;
                  BOOL v138 = v137 != 0;
                }

                *(_BYTE *)(a1 + 203) = v138;
                goto LABEL_378;
              case 1211:
                *(void *)v8 |= 0x10000000000uLL;
                unint64_t v139 = *((void *)this + 1);
                if (v139 >= *((void *)this + 2))
                {
                  BOOL v142 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v140 = v139 + 1;
                  int v141 = *(unsigned __int8 *)(*(void *)this + v139);
                  *((void *)this + 1) = v140;
                  BOOL v142 = v141 != 0;
                }

                *(_BYTE *)(a1 + 163) = v142;
                goto LABEL_378;
              case 1212:
                *(void *)v8 |= 0x100000000000uLL;
                unint64_t v143 = *((void *)this + 1);
                if (v143 >= *((void *)this + 2))
                {
                  BOOL v146 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v144 = v143 + 1;
                  int v145 = *(unsigned __int8 *)(*(void *)this + v143);
                  *((void *)this + 1) = v144;
                  BOOL v146 = v145 != 0;
                }

                *(_BYTE *)(a1 + 167) = v146;
                goto LABEL_378;
              case 1213:
                char v147 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x1000u;
                *(_BYTE *)(v8 + 10) = v147;
                unint64_t v148 = *((void *)this + 1);
                if (v148 >= *((void *)this + 2))
                {
                  BOOL v151 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v149 = v148 + 1;
                  int v150 = *(unsigned __int8 *)(*(void *)this + v148);
                  *((void *)this + 1) = v149;
                  BOOL v151 = v150 != 0;
                }

                *(_BYTE *)(a1 + 199) = v151;
                goto LABEL_378;
              case 1214:
                *(void *)v8 |= 0x1000uLL;
                unint64_t v152 = *((void *)this + 1);
                if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v152);
                goto LABEL_377;
              case 1215:
                *(void *)v8 |= 0x100uLL;
                unint64_t v153 = *((void *)this + 1);
                if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v153);
                goto LABEL_377;
              case 1216:
                *(void *)v8 |= 0x10000uLL;
                unint64_t v154 = *((void *)this + 1);
                if (v154 > 0xFFFFFFFFFFFFFFFBLL || v154 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v154);
                goto LABEL_377;
              case 1217:
                char v155 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 1u;
                *(_BYTE *)(v8 + 10) = v155;
                unint64_t v156 = *((void *)this + 1);
                if (v156 >= *((void *)this + 2))
                {
                  BOOL v159 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v157 = v156 + 1;
                  int v158 = *(unsigned __int8 *)(*(void *)this + v156);
                  *((void *)this + 1) = v157;
                  BOOL v159 = v158 != 0;
                }

                *(_BYTE *)(a1 + 187) = v159;
                goto LABEL_378;
              case 1218:
                *(void *)v8 |= 0x10000000000000uLL;
                unint64_t v160 = *((void *)this + 1);
                if (v160 >= *((void *)this + 2))
                {
                  BOOL v163 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v161 = v160 + 1;
                  int v162 = *(unsigned __int8 *)(*(void *)this + v160);
                  *((void *)this + 1) = v161;
                  BOOL v163 = v162 != 0;
                }

                *(_BYTE *)(a1 + 175) = v163;
                goto LABEL_378;
              case 1219:
                char v164 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x100u;
                *(_BYTE *)(v8 + 10) = v164;
                unint64_t v165 = *((void *)this + 1);
                if (v165 >= *((void *)this + 2))
                {
                  BOOL v168 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v166 = v165 + 1;
                  int v167 = *(unsigned __int8 *)(*(void *)this + v165);
                  *((void *)this + 1) = v166;
                  BOOL v168 = v167 != 0;
                }

                *(_BYTE *)(a1 + 195) = v168;
                goto LABEL_378;
              case 1220:
                *(void *)v8 |= 0x100000000000000uLL;
                unint64_t v169 = *((void *)this + 1);
                if (v169 >= *((void *)this + 2))
                {
                  BOOL v172 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v170 = v169 + 1;
                  int v171 = *(unsigned __int8 *)(*(void *)this + v169);
                  *((void *)this + 1) = v170;
                  BOOL v172 = v171 != 0;
                }

                *(_BYTE *)(a1 + 179) = v172;
                goto LABEL_378;
              case 1221:
                *(void *)v8 |= 0x1000000000000000uLL;
                unint64_t v173 = *((void *)this + 1);
                if (v173 >= *((void *)this + 2))
                {
                  BOOL v176 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v174 = v173 + 1;
                  int v175 = *(unsigned __int8 *)(*(void *)this + v173);
                  *((void *)this + 1) = v174;
                  BOOL v176 = v175 != 0;
                }

                *(_BYTE *)(a1 + 183) = v176;
                goto LABEL_378;
              case 1222:
                char v177 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x10u;
                *(_BYTE *)(v8 + 10) = v177;
                unint64_t v178 = *((void *)this + 1);
                if (v178 >= *((void *)this + 2))
                {
                  BOOL v181 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v179 = v178 + 1;
                  int v180 = *(unsigned __int8 *)(*(void *)this + v178);
                  *((void *)this + 1) = v179;
                  BOOL v181 = v180 != 0;
                }

                *(_BYTE *)(a1 + 191) = v181;
                goto LABEL_378;
              default:
LABEL_153:
                uint64_t result = PB::Reader::skip(this, v21, v12 & 7, 0);
                if (!(_DWORD)result) {
                  return result;
                }
                goto LABEL_378;
            }

            break;
        }

        while (1)
        {
          if (v31 == v30)
          {
            uint64_t v35 = 0LL;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_390;
          }

          unint64_t v307 = v30 + 1;
          char v308 = *(_BYTE *)(v32 + v30);
          *((void *)this + 1) = v307;
          v35 |= (unint64_t)(v308 & 0x7F) << v305;
          if ((v308 & 0x80) == 0) {
            break;
          }
          v305 += 7;
          unint64_t v30 = v307;
          BOOL v15 = v306++ > 8;
          if (v15) {
            goto LABEL_258;
          }
        }

        if (*((_BYTE *)this + 24)) {
          uint64_t v35 = 0LL;
        }
LABEL_390:
        *(void *)(a1 + 32) = v35;
      }

      else
      {
        switch((int)v21)
        {
          case 'e':
            *(void *)v8 |= 1uLL;
            unint64_t v22 = *((void *)this + 1);
            unint64_t v23 = *((void *)this + 2);
            uint64_t v24 = *(void *)this;
            if (v22 <= 0xFFFFFFFFFFFFFFF5LL && v22 + 10 <= v23)
            {
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0LL;
              do
              {
                unint64_t v28 = v22 + 1;
                *((void *)this + 1) = v22 + 1;
                char v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0) {
                  goto LABEL_386;
                }
                v25 += 7;
                unint64_t v22 = v28;
                BOOL v15 = v26++ > 8;
              }

              while (!v15);
LABEL_251:
              uint64_t v27 = 0LL;
              goto LABEL_386;
            }

            char v301 = 0;
            unsigned int v302 = 0;
            uint64_t v27 = 0LL;
            if (v23 <= v22) {
              unint64_t v23 = *((void *)this + 1);
            }
            while (2)
            {
              if (v23 == v22)
              {
                uint64_t v27 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v303 = v22 + 1;
                char v304 = *(_BYTE *)(v24 + v22);
                *((void *)this + 1) = v303;
                v27 |= (unint64_t)(v304 & 0x7F) << v301;
                if (v304 < 0)
                {
                  v301 += 7;
                  unint64_t v22 = v303;
                  BOOL v15 = v302++ > 8;
                  if (v15) {
                    goto LABEL_251;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v27 = 0LL;
                }
              }

              break;
            }

LABEL_402:
            *(_DWORD *)(a1 + 40) = v59;
            goto LABEL_378;
          case 'g':
            char v62 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x200u;
            *(_BYTE *)(v8 + 10) = v62;
            unint64_t v63 = *((void *)this + 1);
            if (v63 >= *((void *)this + 2))
            {
              BOOL v66 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v64 = v63 + 1;
              int v65 = *(unsigned __int8 *)(*(void *)this + v63);
              *((void *)this + 1) = v64;
              BOOL v66 = v65 != 0;
            }

            *(_BYTE *)(a1 + 196) = v66;
            goto LABEL_378;
          case 'h':
            *(void *)v8 |= 0x2000000uLL;
            unint64_t v67 = *((void *)this + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v67);
            goto LABEL_377;
          case 'i':
            *(void *)v8 |= 0x200000uLL;
            unint64_t v68 = *((void *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v68);
            goto LABEL_377;
          case 'j':
            *(void *)v8 |= 0x20000uLL;
            unint64_t v69 = *((void *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v69);
            goto LABEL_377;
          case 'k':
            *(void *)v8 |= 0x20000000uLL;
            unint64_t v70 = *((void *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v70);
            goto LABEL_377;
          case 'l':
            *(void *)v8 |= 0x200000000000uLL;
            unint64_t v71 = *((void *)this + 1);
            if (v71 >= *((void *)this + 2))
            {
              BOOL v74 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v72 = v71 + 1;
              int v73 = *(unsigned __int8 *)(*(void *)this + v71);
              *((void *)this + 1) = v72;
              BOOL v74 = v73 != 0;
            }

            *(_BYTE *)(a1 + 16_Block_object_dispose(va, 8) = v74;
            goto LABEL_378;
          case 'm':
            *(void *)v8 |= 0x200000000uLL;
            unint64_t v75 = *((void *)this + 1);
            if (v75 >= *((void *)this + 2))
            {
              BOOL v78 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v76 = v75 + 1;
              int v77 = *(unsigned __int8 *)(*(void *)this + v75);
              *((void *)this + 1) = v76;
              BOOL v78 = v77 != 0;
            }

            *(_BYTE *)(a1 + 156) = v78;
            goto LABEL_378;
          case 'n':
            char v79 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x2000u;
            *(_BYTE *)(v8 + 10) = v79;
            unint64_t v80 = *((void *)this + 1);
            if (v80 >= *((void *)this + 2))
            {
              BOOL v83 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v81 = v80 + 1;
              int v82 = *(unsigned __int8 *)(*(void *)this + v80);
              *((void *)this + 1) = v81;
              BOOL v83 = v82 != 0;
            }

            *(_BYTE *)(a1 + 200) = v83;
            goto LABEL_378;
          case 'o':
            *(void *)v8 |= 0x2000000000uLL;
            unint64_t v84 = *((void *)this + 1);
            if (v84 >= *((void *)this + 2))
            {
              BOOL v87 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v85 = v84 + 1;
              int v86 = *(unsigned __int8 *)(*(void *)this + v84);
              *((void *)this + 1) = v85;
              BOOL v87 = v86 != 0;
            }

            *(_BYTE *)(a1 + 160) = v87;
            goto LABEL_378;
          case 'p':
            *(void *)v8 |= 0x20000000000uLL;
            unint64_t v88 = *((void *)this + 1);
            if (v88 >= *((void *)this + 2))
            {
              BOOL v91 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v89 = v88 + 1;
              int v90 = *(unsigned __int8 *)(*(void *)this + v88);
              *((void *)this + 1) = v89;
              BOOL v91 = v90 != 0;
            }

            *(_BYTE *)(a1 + 164) = v91;
            goto LABEL_378;
          case 'q':
            char v92 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 2u;
            *(_BYTE *)(v8 + 10) = v92;
            unint64_t v93 = *((void *)this + 1);
            if (v93 >= *((void *)this + 2))
            {
              BOOL v96 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v94 = v93 + 1;
              int v95 = *(unsigned __int8 *)(*(void *)this + v93);
              *((void *)this + 1) = v94;
              BOOL v96 = v95 != 0;
            }

            *(_BYTE *)(a1 + 18_Block_object_dispose(va, 8) = v96;
            goto LABEL_378;
          case 'r':
            *(void *)v8 |= 0x200uLL;
            unint64_t v97 = *((void *)this + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v97);
            goto LABEL_377;
          case 's':
            *(void *)v8 |= 0x20uLL;
            unint64_t v98 = *((void *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v98);
            goto LABEL_377;
          case 't':
            *(void *)v8 |= 0x2000uLL;
            unint64_t v99 = *((void *)this + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((void *)this + 2)) {
              goto LABEL_232;
            }
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v99);
            goto LABEL_377;
          case 'u':
            *(void *)v8 |= 0x2000000000000000uLL;
            unint64_t v100 = *((void *)this + 1);
            if (v100 >= *((void *)this + 2))
            {
              BOOL v103 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v101 = v100 + 1;
              int v102 = *(unsigned __int8 *)(*(void *)this + v100);
              *((void *)this + 1) = v101;
              BOOL v103 = v102 != 0;
            }

            *(_BYTE *)(a1 + 184) = v103;
            goto LABEL_378;
          case 'v':
            *(void *)v8 |= 0x2000000000000uLL;
            unint64_t v104 = *((void *)this + 1);
            if (v104 >= *((void *)this + 2))
            {
              BOOL v107 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v105 = v104 + 1;
              int v106 = *(unsigned __int8 *)(*(void *)this + v104);
              *((void *)this + 1) = v105;
              BOOL v107 = v106 != 0;
            }

            *(_BYTE *)(a1 + 172) = v107;
            goto LABEL_378;
          case 'w':
            char v108 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x20u;
            *(_BYTE *)(v8 + 10) = v108;
            unint64_t v109 = *((void *)this + 1);
            if (v109 >= *((void *)this + 2))
            {
              BOOL v112 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v110 = v109 + 1;
              int v111 = *(unsigned __int8 *)(*(void *)this + v109);
              *((void *)this + 1) = v110;
              BOOL v112 = v111 != 0;
            }

            *(_BYTE *)(a1 + 192) = v112;
            goto LABEL_378;
          case 'x':
            *(void *)v8 |= 0x20000000000000uLL;
            unint64_t v113 = *((void *)this + 1);
            if (v113 >= *((void *)this + 2))
            {
              BOOL v116 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v114 = v113 + 1;
              int v115 = *(unsigned __int8 *)(*(void *)this + v113);
              *((void *)this + 1) = v114;
              BOOL v116 = v115 != 0;
            }

            *(_BYTE *)(a1 + 176) = v116;
            goto LABEL_378;
          case 'y':
            *(void *)v8 |= 0x200000000000000uLL;
            unint64_t v117 = *((void *)this + 1);
            if (v117 >= *((void *)this + 2))
            {
              BOOL v120 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v118 = v117 + 1;
              int v119 = *(unsigned __int8 *)(*(void *)this + v117);
              *((void *)this + 1) = v118;
              BOOL v120 = v119 != 0;
            }

            *(_BYTE *)(a1 + 180) = v120;
            goto LABEL_378;
          default:
            switch((int)v21)
            {
              case 1003:
                *(void *)v8 |= 2uLL;
                unint64_t v38 = *((void *)this + 1);
                unint64_t v39 = *((void *)this + 2);
                uint64_t v40 = *(void *)this;
                if (v38 <= 0xFFFFFFFFFFFFFFF5LL && v38 + 10 <= v39)
                {
                  char v41 = 0;
                  unsigned int v42 = 0;
                  uint64_t v43 = 0LL;
                  do
                  {
                    unint64_t v44 = v38 + 1;
                    *((void *)this + 1) = v38 + 1;
                    char v45 = *(_BYTE *)(v40 + v38);
                    v43 |= (unint64_t)(v45 & 0x7F) << v41;
                    if ((v45 & 0x80) == 0) {
                      goto LABEL_394;
                    }
                    v41 += 7;
                    unint64_t v38 = v44;
                    BOOL v15 = v42++ > 8;
                  }

                  while (!v15);
LABEL_265:
                  uint64_t v43 = 0LL;
                  goto LABEL_394;
                }

                char v309 = 0;
                unsigned int v310 = 0;
                uint64_t v43 = 0LL;
                if (v39 <= v38) {
                  unint64_t v39 = *((void *)this + 1);
                }
                break;
              case 1004:
                *(void *)v8 |= 0x4000000uLL;
                unint64_t v183 = *((void *)this + 1);
                if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v183);
                goto LABEL_377;
              case 1005:
                *(void *)v8 |= 0x400000uLL;
                unint64_t v184 = *((void *)this + 1);
                if (v184 > 0xFFFFFFFFFFFFFFFBLL || v184 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v184);
                goto LABEL_377;
              case 1006:
                *(void *)v8 |= 0x40000uLL;
                unint64_t v185 = *((void *)this + 1);
                if (v185 > 0xFFFFFFFFFFFFFFFBLL || v185 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v185);
                goto LABEL_377;
              case 1007:
                *(void *)v8 |= 0x40000000uLL;
                unint64_t v186 = *((void *)this + 1);
                if (v186 > 0xFFFFFFFFFFFFFFFBLL || v186 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v186);
                goto LABEL_377;
              case 1008:
                *(void *)v8 |= 0x400000000000uLL;
                unint64_t v187 = *((void *)this + 1);
                if (v187 >= *((void *)this + 2))
                {
                  BOOL v190 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v188 = v187 + 1;
                  int v189 = *(unsigned __int8 *)(*(void *)this + v187);
                  *((void *)this + 1) = v188;
                  BOOL v190 = v189 != 0;
                }

                *(_BYTE *)(a1 + 169) = v190;
                goto LABEL_378;
              case 1009:
                *(void *)v8 |= 0x400000000uLL;
                unint64_t v191 = *((void *)this + 1);
                if (v191 >= *((void *)this + 2))
                {
                  BOOL v194 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v192 = v191 + 1;
                  int v193 = *(unsigned __int8 *)(*(void *)this + v191);
                  *((void *)this + 1) = v192;
                  BOOL v194 = v193 != 0;
                }

                *(_BYTE *)(a1 + 157) = v194;
                goto LABEL_378;
              case 1010:
                char v195 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x4000u;
                *(_BYTE *)(v8 + 10) = v195;
                unint64_t v196 = *((void *)this + 1);
                if (v196 >= *((void *)this + 2))
                {
                  BOOL v199 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v197 = v196 + 1;
                  int v198 = *(unsigned __int8 *)(*(void *)this + v196);
                  *((void *)this + 1) = v197;
                  BOOL v199 = v198 != 0;
                }

                *(_BYTE *)(a1 + 201) = v199;
                goto LABEL_378;
              case 1011:
                *(void *)v8 |= 0x4000000000uLL;
                unint64_t v200 = *((void *)this + 1);
                if (v200 >= *((void *)this + 2))
                {
                  BOOL v203 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v201 = v200 + 1;
                  int v202 = *(unsigned __int8 *)(*(void *)this + v200);
                  *((void *)this + 1) = v201;
                  BOOL v203 = v202 != 0;
                }

                *(_BYTE *)(a1 + 161) = v203;
                goto LABEL_378;
              case 1012:
                *(void *)v8 |= 0x40000000000uLL;
                unint64_t v204 = *((void *)this + 1);
                if (v204 >= *((void *)this + 2))
                {
                  BOOL v207 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v205 = v204 + 1;
                  int v206 = *(unsigned __int8 *)(*(void *)this + v204);
                  *((void *)this + 1) = v205;
                  BOOL v207 = v206 != 0;
                }

                *(_BYTE *)(a1 + 165) = v207;
                goto LABEL_378;
              case 1013:
                char v208 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x400u;
                *(_BYTE *)(v8 + 10) = v208;
                unint64_t v209 = *((void *)this + 1);
                if (v209 >= *((void *)this + 2))
                {
                  BOOL v212 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v210 = v209 + 1;
                  int v211 = *(unsigned __int8 *)(*(void *)this + v209);
                  *((void *)this + 1) = v210;
                  BOOL v212 = v211 != 0;
                }

                *(_BYTE *)(a1 + 197) = v212;
                goto LABEL_378;
              case 1014:
                *(void *)v8 |= 0x400uLL;
                unint64_t v213 = *((void *)this + 1);
                if (v213 > 0xFFFFFFFFFFFFFFFBLL || v213 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v213);
                goto LABEL_377;
              case 1015:
                *(void *)v8 |= 0x40uLL;
                unint64_t v214 = *((void *)this + 1);
                if (v214 > 0xFFFFFFFFFFFFFFFBLL || v214 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v214);
                goto LABEL_377;
              case 1016:
                *(void *)v8 |= 0x4000uLL;
                unint64_t v215 = *((void *)this + 1);
                if (v215 > 0xFFFFFFFFFFFFFFFBLL || v215 + 4 > *((void *)this + 2)) {
                  goto LABEL_232;
                }
                *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v215);
                goto LABEL_377;
              case 1017:
                *(void *)v8 |= 0x4000000000000000uLL;
                unint64_t v216 = *((void *)this + 1);
                if (v216 >= *((void *)this + 2))
                {
                  BOOL v219 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v217 = v216 + 1;
                  int v218 = *(unsigned __int8 *)(*(void *)this + v216);
                  *((void *)this + 1) = v217;
                  BOOL v219 = v218 != 0;
                }

                *(_BYTE *)(a1 + 185) = v219;
                goto LABEL_378;
              case 1018:
                *(void *)v8 |= 0x4000000000000uLL;
                unint64_t v220 = *((void *)this + 1);
                if (v220 >= *((void *)this + 2))
                {
                  BOOL v223 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v221 = v220 + 1;
                  int v222 = *(unsigned __int8 *)(*(void *)this + v220);
                  *((void *)this + 1) = v221;
                  BOOL v223 = v222 != 0;
                }

                *(_BYTE *)(a1 + 173) = v223;
                goto LABEL_378;
              case 1019:
                char v224 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x40u;
                *(_BYTE *)(v8 + 10) = v224;
                unint64_t v225 = *((void *)this + 1);
                if (v225 >= *((void *)this + 2))
                {
                  BOOL v228 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v226 = v225 + 1;
                  int v227 = *(unsigned __int8 *)(*(void *)this + v225);
                  *((void *)this + 1) = v226;
                  BOOL v228 = v227 != 0;
                }

                *(_BYTE *)(a1 + 193) = v228;
                goto LABEL_378;
              case 1020:
                *(void *)v8 |= 0x40000000000000uLL;
                unint64_t v229 = *((void *)this + 1);
                if (v229 >= *((void *)this + 2))
                {
                  BOOL v232 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v230 = v229 + 1;
                  int v231 = *(unsigned __int8 *)(*(void *)this + v229);
                  *((void *)this + 1) = v230;
                  BOOL v232 = v231 != 0;
                }

                *(_BYTE *)(a1 + 177) = v232;
                goto LABEL_378;
              case 1021:
                *(void *)v8 |= 0x400000000000000uLL;
                unint64_t v233 = *((void *)this + 1);
                if (v233 >= *((void *)this + 2))
                {
                  BOOL v236 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v234 = v233 + 1;
                  int v235 = *(unsigned __int8 *)(*(void *)this + v233);
                  *((void *)this + 1) = v234;
                  BOOL v236 = v235 != 0;
                }

                *(_BYTE *)(a1 + 181) = v236;
                goto LABEL_378;
              case 1022:
                char v237 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 4u;
                *(_BYTE *)(v8 + 10) = v237;
                unint64_t v238 = *((void *)this + 1);
                if (v238 >= *((void *)this + 2))
                {
                  BOOL v241 = 0;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v239 = v238 + 1;
                  int v240 = *(unsigned __int8 *)(*(void *)this + v238);
                  *((void *)this + 1) = v239;
                  BOOL v241 = v240 != 0;
                }

                *(_BYTE *)(a1 + 189) = v241;
                goto LABEL_378;
              default:
                goto LABEL_153;
            }

            break;
        }

        while (1)
        {
          if (v39 == v38)
          {
            uint64_t v43 = 0LL;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_394;
          }

          unint64_t v311 = v38 + 1;
          char v312 = *(_BYTE *)(v40 + v38);
          *((void *)this + 1) = v311;
          v43 |= (unint64_t)(v312 & 0x7F) << v309;
          if ((v312 & 0x80) == 0) {
            break;
          }
          v309 += 7;
          unint64_t v38 = v311;
          BOOL v15 = v310++ > 8;
          if (v15) {
            goto LABEL_265;
          }
        }

        if (*((_BYTE *)this + 24)) {
          uint64_t v43 = 0LL;
        }
LABEL_394:
        *(void *)(a1 + 16) = v43;
      }

uint64_t sub_1010CAFD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 204);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 0x65u);
    int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    uint64_t v4 = *(void *)(v3 + 204);
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v5 = *(unsigned __int16 *)(result + 212) | (*(unsigned __int8 *)(result + 214) << 16);
  if ((v4 & 0x10) != 0)
  {
LABEL_5:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x66u);
    int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    uint64_t v4 = *(void *)(v3 + 204);
  }

void *sub_1010CBC9C(void *result)
{
  const char *result = &off_101899B10;
  *(void *)((char *)result + 172) = 0LL;
  return result;
}

void sub_1010CBCB4(PB::Base *a1)
{
}

float sub_1010CBCC8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899B10;
  *(void *)(a1 + 172) = 0LL;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x80000000) != 0)
  {
    float result = *(float *)(a2 + 148);
    uint64_t v3 = 0x80000000LL;
    *(void *)(a1 + 172) = 0x80000000LL;
    *(float *)(a1 + 14_Block_object_dispose(va, 8) = result;
    uint64_t v2 = *(void *)(a2 + 172);
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 0x40000000) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 144);
    v3 |= 0x40000000uLL;
    *(void *)(a1 + 172) = v3;
    *(float *)(a1 + 144) = result;
    uint64_t v2 = *(void *)(a2 + 172);
  }

uint64_t sub_1010CC1EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "chaosAtMaxEnergy", *(float *)(a1 + 40));
    uint64_t v5 = *(void *)(a1 + 172);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x200000000LL) == 0) {
        goto LABEL_4;
      }
      goto LABEL_51;
    }
  }

  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "chaosAtMaxEnergyTimestamp", *(float *)(a1 + 44));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x200000000LL) == 0)
  {
LABEL_4:
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_5;
    }
    goto LABEL_52;
  }

uint64_t sub_1010CC7DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

LABEL_307:
              *(void *)(a1 + 24) = v135;
              goto LABEL_279;
            case 204:
              *(void *)(a1 + 172) |= 8uLL;
              unint64_t v138 = *((void *)this + 1);
              unint64_t v139 = *((void *)this + 2);
              uint64_t v140 = *(void *)this;
              if (v138 <= 0xFFFFFFFFFFFFFFF5LL && v138 + 10 <= v139)
              {
                char v141 = 0;
                unsigned int v142 = 0;
                uint64_t v143 = 0LL;
                do
                {
                  unint64_t v144 = v138 + 1;
                  *((void *)this + 1) = v138 + 1;
                  char v145 = *(_BYTE *)(v140 + v138);
                  v143 |= (unint64_t)(v145 & 0x7F) << v141;
                  if ((v145 & 0x80) == 0) {
                    goto LABEL_311;
                  }
                  v141 += 7;
                  unint64_t v138 = v144;
                  BOOL v14 = v142++ > 8;
                }

                while (!v14);
LABEL_262:
                uint64_t v143 = 0LL;
                goto LABEL_311;
              }

              char v194 = 0;
              unsigned int v195 = 0;
              uint64_t v143 = 0LL;
              if (v139 <= v138) {
                unint64_t v139 = *((void *)this + 1);
              }
              while (2)
              {
                if (v139 == v138)
                {
                  uint64_t v143 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                }

                else
                {
                  unint64_t v196 = v138 + 1;
                  char v197 = *(_BYTE *)(v140 + v138);
                  *((void *)this + 1) = v196;
                  v143 |= (unint64_t)(v197 & 0x7F) << v194;
                  if (v197 < 0)
                  {
                    v194 += 7;
                    unint64_t v138 = v196;
                    BOOL v14 = v195++ > 8;
                    if (v14) {
                      goto LABEL_262;
                    }
                    continue;
                  }

                  if (*((_BYTE *)this + 24)) {
                    uint64_t v143 = 0LL;
                  }
                }

                break;
              }

LABEL_319:
              *(void *)(a1 + 16) = v163;
              goto LABEL_279;
            case 211:
              *(void *)(a1 + 172) |= 0x100uLL;
              unint64_t v166 = *((void *)this + 1);
              if (v166 > 0xFFFFFFFFFFFFFFFBLL || v166 + 4 > *((void *)this + 2)) {
                goto LABEL_187;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v166);
              goto LABEL_278;
            case 212:
              *(void *)(a1 + 172) |= 0x200uLL;
              unint64_t v167 = *((void *)this + 1);
              if (v167 > 0xFFFFFFFFFFFFFFFBLL || v167 + 4 > *((void *)this + 2)) {
                goto LABEL_187;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v167);
              goto LABEL_278;
            case 213:
              *(void *)(a1 + 172) |= 0x400uLL;
              unint64_t v168 = *((void *)this + 1);
              if (v168 > 0xFFFFFFFFFFFFFFFBLL || v168 + 4 > *((void *)this + 2)) {
                goto LABEL_187;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v168);
              goto LABEL_278;
            case 214:
              *(void *)(a1 + 172) |= 0x800uLL;
              unint64_t v169 = *((void *)this + 1);
              if (v169 > 0xFFFFFFFFFFFFFFFBLL || v169 + 4 > *((void *)this + 2)) {
                goto LABEL_187;
              }
              *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v169);
              goto LABEL_278;
            default:
              switch((int)v20)
              {
                case 1:
                  *(void *)(a1 + 172) |= 0x80000000uLL;
                  unint64_t v21 = *((void *)this + 1);
                  if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((void *)this + 2)) {
                    goto LABEL_187;
                  }
                  *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v21);
                  goto LABEL_278;
                case 2:
                  *(void *)(a1 + 172) |= 0x40000000uLL;
                  unint64_t v31 = *((void *)this + 1);
                  if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
                    goto LABEL_187;
                  }
                  *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v31);
                  goto LABEL_278;
                case 3:
                  *(void *)(a1 + 172) |= 0x20000000uLL;
                  unint64_t v32 = *((void *)this + 1);
                  if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
                    goto LABEL_187;
                  }
                  *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v32);
                  goto LABEL_278;
                case 4:
                  *(void *)(a1 + 172) |= (unint64_t)&_mh_execute_header;
                  unint64_t v33 = *((void *)this + 1);
                  if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)this + 2)) {
                    goto LABEL_187;
                  }
                  *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v33);
                  goto LABEL_278;
                case 5:
                  *(void *)(a1 + 172) |= 0x4000000uLL;
                  unint64_t v34 = *((void *)this + 1);
                  unint64_t v35 = *((void *)this + 2);
                  uint64_t v36 = *(void *)this;
                  if (v34 <= 0xFFFFFFFFFFFFFFF5LL && v34 + 10 <= v35)
                  {
                    char v37 = 0;
                    unsigned int v38 = 0;
                    uint64_t v39 = 0LL;
                    do
                    {
                      unint64_t v40 = v34 + 1;
                      *((void *)this + 1) = v34 + 1;
                      char v41 = *(_BYTE *)(v36 + v34);
                      v39 |= (unint64_t)(v41 & 0x7F) << v37;
                      if ((v41 & 0x80) == 0) {
                        goto LABEL_287;
                      }
                      v37 += 7;
                      unint64_t v34 = v40;
                      BOOL v14 = v38++ > 8;
                    }

                    while (!v14);
LABEL_198:
                    LODWORD(v39) = 0;
                    goto LABEL_287;
                  }

                  char v170 = 0;
                  unsigned int v171 = 0;
                  uint64_t v39 = 0LL;
                  if (v35 <= v34) {
                    unint64_t v35 = *((void *)this + 1);
                  }
                  while (2)
                  {
                    if (v35 == v34)
                    {
                      LODWORD(v39) = 0;
                      *((_BYTE *)this + 24) = 1;
                    }

                    else
                    {
                      unint64_t v172 = v34 + 1;
                      char v173 = *(_BYTE *)(v36 + v34);
                      *((void *)this + 1) = v172;
                      v39 |= (unint64_t)(v173 & 0x7F) << v170;
                      if (v173 < 0)
                      {
                        v170 += 7;
                        unint64_t v34 = v172;
                        BOOL v14 = v171++ > 8;
                        if (v14) {
                          goto LABEL_198;
                        }
                        continue;
                      }

                      if (*((_BYTE *)this + 24)) {
                        LODWORD(v39) = 0;
                      }
                    }

                    break;
                  }

LABEL_291:
                  *(_DWORD *)(a1 + 124) = v47;
                  goto LABEL_279;
                case 7:
                  *(void *)(a1 + 172) |= 0x8000000uLL;
                  unint64_t v50 = *((void *)this + 1);
                  if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
                    goto LABEL_187;
                  }
                  *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v50);
                  goto LABEL_278;
                case 8:
                  *(void *)(a1 + 172) |= 0x80000uLL;
                  unint64_t v51 = *((void *)this + 1);
                  if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
                    goto LABEL_187;
                  }
                  *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v51);
                  goto LABEL_278;
                case 9:
                  *(void *)(a1 + 172) |= 0x40000uLL;
                  unint64_t v52 = *((void *)this + 1);
                  if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
                    goto LABEL_187;
                  }
                  *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v52);
                  goto LABEL_278;
                case 10:
                  *(void *)(a1 + 172) |= 0x20000uLL;
                  unint64_t v53 = *((void *)this + 1);
                  if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2)) {
                    goto LABEL_187;
                  }
                  *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v53);
                  goto LABEL_278;
                case 11:
                  *(void *)(a1 + 172) |= 0x100000uLL;
                  unint64_t v54 = *((void *)this + 1);
                  if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2)) {
                    goto LABEL_187;
                  }
                  *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v54);
                  goto LABEL_278;
                case 12:
                  *(void *)(a1 + 172) |= 0x8000uLL;
                  unint64_t v55 = *((void *)this + 1);
                  unint64_t v56 = *((void *)this + 2);
                  uint64_t v57 = *(void *)this;
                  if (v55 <= 0xFFFFFFFFFFFFFFF5LL && v55 + 10 <= v56)
                  {
                    char v58 = 0;
                    unsigned int v59 = 0;
                    uint64_t v60 = 0LL;
                    do
                    {
                      unint64_t v61 = v55 + 1;
                      *((void *)this + 1) = v55 + 1;
                      char v62 = *(_BYTE *)(v57 + v55);
                      v60 |= (unint64_t)(v62 & 0x7F) << v58;
                      if ((v62 & 0x80) == 0) {
                        goto LABEL_295;
                      }
                      v58 += 7;
                      unint64_t v55 = v61;
                      BOOL v14 = v59++ > 8;
                    }

                    while (!v14);
LABEL_212:
                    LODWORD(v60) = 0;
                    goto LABEL_295;
                  }

                  char v178 = 0;
                  unsigned int v179 = 0;
                  uint64_t v60 = 0LL;
                  if (v56 <= v55) {
                    unint64_t v56 = *((void *)this + 1);
                  }
                  while (2)
                  {
                    if (v56 == v55)
                    {
                      LODWORD(v60) = 0;
                      *((_BYTE *)this + 24) = 1;
                    }

                    else
                    {
                      unint64_t v180 = v55 + 1;
                      char v181 = *(_BYTE *)(v57 + v55);
                      *((void *)this + 1) = v180;
                      v60 |= (unint64_t)(v181 & 0x7F) << v178;
                      if (v181 < 0)
                      {
                        v178 += 7;
                        unint64_t v55 = v180;
                        BOOL v14 = v179++ > 8;
                        if (v14) {
                          goto LABEL_212;
                        }
                        continue;
                      }

                      if (*((_BYTE *)this + 24)) {
                        LODWORD(v60) = 0;
                      }
                    }

                    break;
                  }

              *(void *)(a1 + 104) = v42;
            }

            else
            {
LABEL_184:
              if ((PB::Reader::skip(this, v27, v18 & 7, 0) & 1) == 0) {
                return 0LL;
              }
            }

            break;
        }
      }

      else
      {
        switch((int)v27)
        {
          case 1:
            *(_DWORD *)(a1 + 152) |= 0x80u;
            int v28 = *((void *)this + 1);
            if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
              goto LABEL_96;
            }
            *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v28);
            goto LABEL_258;
          case 2:
            *(_DWORD *)(a1 + 152) |= 8u;
            char v45 = *((void *)this + 1);
            unsigned int v46 = *((void *)this + 2);
            uint64_t v47 = *(void *)this;
            if (v45 <= 0xFFFFFFFFFFFFFFF5LL && v45 + 10 <= v46)
            {
              unint64_t v48 = 0;
              char v49 = 0;
              unint64_t v50 = 0LL;
              do
              {
                unint64_t v51 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                unint64_t v52 = *(_BYTE *)(v47 + v45);
                v50 |= (unint64_t)(v52 & 0x7F) << v48;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_294;
                }
                v48 += 7;
                char v45 = v51;
                BOOL v105 = v49++ > 8;
              }

              while (!v105);
LABEL_206:
              unint64_t v50 = 0LL;
              goto LABEL_294;
            }

            uint64_t v163 = 0;
            unint64_t v164 = 0;
            unint64_t v50 = 0LL;
            if (v46 <= v45) {
              unsigned int v46 = *((void *)this + 1);
            }
            while (2)
            {
              if (v46 == v45)
              {
                unint64_t v50 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                char v165 = v45 + 1;
                unint64_t v166 = *(_BYTE *)(v47 + v45);
                *((void *)this + 1) = v165;
                v50 |= (unint64_t)(v166 & 0x7F) << v163;
                if (v166 < 0)
                {
                  v163 += 7;
                  char v45 = v165;
                  BOOL v105 = v164++ > 8;
                  if (v105) {
                    goto LABEL_206;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  unint64_t v50 = 0LL;
                }
              }

              break;
            }

        *(_DWORD *)(a1 + 116) = v122;
        goto LABEL_304;
      case 0x17u:
        *(_DWORD *)(a1 + 152) |= 0x200u;
        char v125 = *((void *)this + 1);
        unsigned int v126 = *((void *)this + 2);
        uint64_t v127 = *(void *)this;
        if (v125 <= 0xFFFFFFFFFFFFFFF5LL && v125 + 10 <= v126)
        {
          unint64_t v128 = 0;
          char v129 = 0;
          unint64_t v130 = 0LL;
          do
          {
            unint64_t v131 = v125 + 1;
            *((void *)this + 1) = v125 + 1;
            uint64_t v132 = *(_BYTE *)(v127 + v125);
            v130 |= (unint64_t)(v132 & 0x7F) << v128;
            if ((v132 & 0x80) == 0) {
              goto LABEL_295;
            }
            v128 += 7;
            char v125 = v131;
            char v15 = v129++ > 8;
          }

          while (!v15);
LABEL_235:
          LODWORD(v130) = 0;
          goto LABEL_295;
        }

        char v190 = 0;
        unsigned int v191 = 0;
        unint64_t v130 = 0LL;
        if (v126 <= v125) {
          unsigned int v126 = *((void *)this + 1);
        }
        while (2)
        {
          if (v126 == v125)
          {
            LODWORD(v130) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v192 = v125 + 1;
            char v193 = *(_BYTE *)(v127 + v125);
            *((void *)this + 1) = v192;
            v130 |= (unint64_t)(v193 & 0x7F) << v190;
            if (v193 < 0)
            {
              v190 += 7;
              char v125 = v192;
              char v15 = v191++ > 8;
              if (v15) {
                goto LABEL_235;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v130) = 0;
            }
          }

          break;
        }

          *(_DWORD *)(a1 + 96) = v143;
          goto LABEL_296;
        case 0x1Bu:
          *(_DWORD *)(a1 + 116) |= 0x2000u;
          unint64_t v146 = *((void *)this + 1);
          unint64_t v147 = *((void *)this + 2);
          unint64_t v148 = *(void *)this;
          if (v146 <= 0xFFFFFFFFFFFFFFF5LL && v146 + 10 <= v147)
          {
            unint64_t v149 = 0;
            unint64_t v150 = 0;
            unint64_t v151 = 0LL;
            do
            {
              uint64_t v152 = v146 + 1;
              *((void *)this + 1) = v146 + 1;
              char v153 = *(_BYTE *)(v148 + v146);
              v151 |= (unint64_t)(v153 & 0x7F) << v149;
              if ((v153 & 0x80) == 0) {
                goto LABEL_295;
              }
              v149 += 7;
              unint64_t v146 = v152;
              BOOL v14 = v150++ > 8;
            }

            while (!v14);
LABEL_244:
            LODWORD(v151) = 0;
            goto LABEL_295;
          }

          char v198 = 0;
          unsigned int v199 = 0;
          unint64_t v151 = 0LL;
          if (v147 <= v146) {
            unint64_t v147 = *((void *)this + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_296;
      }

      while (1)
      {
        if (v147 == v146)
        {
          LODWORD(v151) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_295;
        }

        unint64_t v200 = v146 + 1;
        char v201 = *(_BYTE *)(v148 + v146);
        *((void *)this + 1) = v200;
        v151 |= (unint64_t)(v201 & 0x7F) << v198;
        if ((v201 & 0x80) == 0) {
          break;
        }
        v198 += 7;
        unint64_t v146 = v200;
        BOOL v14 = v199++ > 8;
        if (v14) {
          goto LABEL_244;
        }
      }

      if (*((_BYTE *)this + 24)) {
        LODWORD(v151) = 0;
      }
LABEL_295:
      *(_DWORD *)(a1 + 80) = v151;
LABEL_296:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

LABEL_295:
                  *(_DWORD *)(a1 + 84) = v60;
                  goto LABEL_279;
                case 13:
                  *(void *)(a1 + 172) |= 0x10000uLL;
                  unint64_t v63 = *((void *)this + 1);
                  unint64_t v64 = *((void *)this + 2);
                  uint64_t v65 = *(void *)this;
                  if (v63 <= 0xFFFFFFFFFFFFFFF5LL && v63 + 10 <= v64)
                  {
                    char v66 = 0;
                    unsigned int v67 = 0;
                    uint64_t v68 = 0LL;
                    do
                    {
                      unint64_t v69 = v63 + 1;
                      *((void *)this + 1) = v63 + 1;
                      char v70 = *(_BYTE *)(v65 + v63);
                      v68 |= (unint64_t)(v70 & 0x7F) << v66;
                      if ((v70 & 0x80) == 0) {
                        goto LABEL_299;
                      }
                      v66 += 7;
                      unint64_t v63 = v69;
                      BOOL v14 = v67++ > 8;
                    }

                    while (!v14);
LABEL_219:
                    LODWORD(v6_Block_object_dispose(va, 8) = 0;
                    goto LABEL_299;
                  }

                  char v182 = 0;
                  unsigned int v183 = 0;
                  uint64_t v68 = 0LL;
                  if (v64 <= v63) {
                    unint64_t v64 = *((void *)this + 1);
                  }
                  break;
                default:
                  uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
                  if ((_DWORD)result) {
                    goto LABEL_279;
                  }
                  return result;
              }

              break;
          }

          break;
      }

      while (1)
      {
        if (v64 == v63)
        {
          LODWORD(v6_Block_object_dispose(va, 8) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_299;
        }

        unint64_t v184 = v63 + 1;
        char v185 = *(_BYTE *)(v65 + v63);
        *((void *)this + 1) = v184;
        v68 |= (unint64_t)(v185 & 0x7F) << v182;
        if ((v185 & 0x80) == 0) {
          break;
        }
        v182 += 7;
        unint64_t v63 = v184;
        BOOL v14 = v183++ > 8;
        if (v14) {
          goto LABEL_219;
        }
      }

      if (*((_BYTE *)this + 24)) {
        LODWORD(v6_Block_object_dispose(va, 8) = 0;
      }
LABEL_299:
      *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = v68;
LABEL_279:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 100) = v130;
        goto LABEL_304;
      case 0x18u:
        *(_DWORD *)(a1 + 152) |= 0x1000u;
        char v133 = *((void *)this + 1);
        unsigned int v134 = *((void *)this + 2);
        uint64_t v135 = *(void *)this;
        if (v133 <= 0xFFFFFFFFFFFFFFF5LL && v133 + 10 <= v134)
        {
          unint64_t v136 = 0;
          char v137 = 0;
          unint64_t v138 = 0LL;
          do
          {
            unint64_t v139 = v133 + 1;
            *((void *)this + 1) = v133 + 1;
            uint64_t v140 = *(_BYTE *)(v135 + v133);
            v138 |= (unint64_t)(v140 & 0x7F) << v136;
            if ((v140 & 0x80) == 0) {
              goto LABEL_299;
            }
            v136 += 7;
            char v133 = v139;
            char v15 = v137++ > 8;
          }

          while (!v15);
LABEL_242:
          LODWORD(v13_Block_object_dispose(va, 8) = 0;
          goto LABEL_299;
        }

        char v194 = 0;
        unsigned int v195 = 0;
        unint64_t v138 = 0LL;
        if (v134 <= v133) {
          unsigned int v134 = *((void *)this + 1);
        }
        while (2)
        {
          if (v134 == v133)
          {
            LODWORD(v13_Block_object_dispose(va, 8) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v196 = v133 + 1;
            char v197 = *(_BYTE *)(v135 + v133);
            *((void *)this + 1) = v196;
            v138 |= (unint64_t)(v197 & 0x7F) << v194;
            if (v197 < 0)
            {
              v194 += 7;
              char v133 = v196;
              char v15 = v195++ > 8;
              if (v15) {
                goto LABEL_242;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v13_Block_object_dispose(va, 8) = 0;
            }
          }

          break;
        }

uint64_t sub_1010CDA5C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 172);
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 148), 1u);
    uint64_t v4 = *(void *)(v3 + 172);
    if ((v4 & 0x40000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_50;
    }
  }

  else if ((v4 & 0x40000000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 2u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x100000000LL) == 0) {
      goto LABEL_5;
    }
    goto LABEL_51;
  }

uint64_t sub_1010CDF88(uint64_t result)
{
  *(void *)uint64_t result = &off_101899B48;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_1010CDFA0(PB::Base *a1)
{
}

uint64_t sub_1010CDFB4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899B48;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    uint64_t v2 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v2;
  }

  return result;
}

uint64_t sub_1010CDFE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010CE02C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010CE260(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_1010CE280(uint64_t result)
{
  *(void *)uint64_t result = &off_101899B80;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_1010CE298(PB::Base *a1)
{
}

double sub_1010CE2AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899B80;
  *(_DWORD *)(a1 + 80) = 0;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 72);
    __int16 v3 = 256;
    *(_WORD *)(a1 + 80) = 256;
    *(void *)(a1 + 72) = v4;
    __int16 v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 80) = v3;
    *(double *)(a1 + 16) = result;
    __int16 v2 = *(_WORD *)(a2 + 80);
  }

uint64_t sub_1010CE3C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "epochCounter", *(void *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "inertialAccelX", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_1010CE514(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010CE9F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 80);
  if ((v4 & 0x100) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 72), 1u);
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_1010CEB10(uint64_t result)
{
  *(void *)uint64_t result = &off_101899BB8;
  *(_DWORD *)(result + 104) = 0;
  return result;
}

void sub_1010CEB28(PB::Base *a1)
{
}

double sub_1010CEB3C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899BB8;
  *(_DWORD *)(a1 + 104) = 0;
  __int16 v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x800) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 96);
    __int16 v3 = 2048;
    *(_WORD *)(a1 + 104) = 2048;
    *(void *)(a1 + 96) = v4;
    __int16 v2 = *(_WORD *)(a2 + 104);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_WORD *)(a1 + 104) = v3;
    *(double *)(a1 + 40) = result;
    __int16 v2 = *(_WORD *)(a2 + 104);
  }

uint64_t sub_1010CECA8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "bodyAccelX", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 104);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "bodyAccelY", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_1010CEE58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010CF3DC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 104);
  if ((v4 & 0x800) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 96), 1u);
    __int16 v4 = *(_WORD *)(v3 + 104);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
  __int16 v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_1010CF550(uint64_t result)
{
  *(void *)uint64_t result = &off_101899BF0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_1010CF56C(PB::Base *a1)
{
}

uint64_t sub_1010CF580(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899BF0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 112) = 0;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 56);
    int v3 = 64;
    *(_DWORD *)(result + 112) = 64;
    *(void *)(result + 56) = v4;
    int v2 = *(_DWORD *)(a2 + 112);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 32);
    v3 |= 8u;
    *(_DWORD *)(result + 112) = v3;
    *(void *)(result + 32) = v5;
    int v2 = *(_DWORD *)(a2 + 112);
  }

uint64_t sub_1010CF7B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "accelMagnitude", *(float *)(a1 + 64));
    int v5 = *(_DWORD *)(a1 + 112);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }

  else if ((v5 & 0x100) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "deltaVThisImpact", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }

uint64_t sub_1010CFA44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010D05A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 112);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 56), 1u);
    int v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }

  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeSInt(this, *(void *)(v3 + 32), 2u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

uint64_t sub_1010D07D8(uint64_t result)
{
  *(void *)uint64_t result = &off_101899C28;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1010D07F0(PB::Base *a1)
{
}

uint64_t sub_1010D0804(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899C28;
  *(_DWORD *)(result + 60) = 0;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    __int16 v3 = 8;
    *(_WORD *)(result + 60) = 8;
    *(void *)(result + 32) = v4;
    __int16 v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 56);
    v3 |= 0x100u;
    *(_WORD *)(result + 60) = v3;
    *(_BYTE *)(result + 56) = v5;
    __int16 v2 = *(_WORD *)(a2 + 60);
  }

uint64_t sub_1010D091C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 40));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "deltaSteps", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_1010D0A6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010D1180(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 32), 0x65u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((*(_WORD *)(result + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 56), 0x66u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_1010D12A0(uint64_t result)
{
  *(void *)uint64_t result = &off_101899C60;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1010D12B8(PB::Base *a1)
{
}

uint64_t sub_1010D12CC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899C60;
  *(_DWORD *)(result + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_1010D1374(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "deltaSteps", *(_DWORD *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "stepCount", *(_DWORD *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 32) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010D1444(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010D19A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1010D1A58(uint64_t result)
{
  *(void *)uint64_t result = &off_101899C98;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1010D1A70(PB::Base *a1)
{
}

uint64_t sub_1010D1A84(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899C98;
  *(_DWORD *)(result + 64) = 0;
  __int16 v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 44);
    __int16 v3 = 64;
    *(_WORD *)(result + 64) = 64;
    *(_DWORD *)(result + 44) = v4;
    __int16 v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 36);
    v3 |= 0x10u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 36) = v5;
    __int16 v2 = *(_WORD *)(a2 + 64);
  }

uint64_t sub_1010D1BF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "autocorrelationRangeValCriticalThreshold", *(float *)(a1 + 32));
    __int16 v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "autocorrelationRangeValThreshold", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_1010D1DA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010D270C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 44), 0x65u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0x66u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_1010D2880(uint64_t result)
{
  *(void *)uint64_t result = &off_101899CD0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1010D2898(PB::Base *a1)
{
}

double sub_1010D28AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899CD0;
  *(_DWORD *)(a1 + 52) = 0;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(a1 + 52) = 1;
    *(double *)(a1 + _Block_object_dispose(va, 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 36);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 52) = v3;
    *(_DWORD *)(a1 + 36) = LODWORD(result);
    __int16 v2 = *(_WORD *)(a2 + 52);
  }

uint64_t sub_1010D29FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_1010D2B8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010D2F9C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 52);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 2u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

double sub_1010D30F4(uint64_t a1)
{
  *(void *)a1 = &off_101899D08;
  *(_DWORD *)(a1 + 140) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  return result;
}

void sub_1010D3124(PB::Base *this)
{
  *(void *)this = &off_101899D08;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  __int16 v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }

  __int16 v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

void sub_1010D3194(PB::Base *a1)
{
}

uint64_t sub_1010D31A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899D08;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  __int16 v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 140) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  if ((*(_BYTE *)(a2 + 140) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 104);
    *(_BYTE *)(a1 + 140) = 1;
    *(void *)(a1 + 104) = v5;
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 140) & 4) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 140) |= 4u;
    *(_DWORD *)(a1 + 120) = v6;
  }

  if (a1 != a2) {
    sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 140) & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 112);
    *(_BYTE *)(a1 + 140) |= 2u;
    *(void *)(a1 + 112) = v7;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  }

  char v8 = *(_BYTE *)(a2 + 140);
  if ((v8 & 0x20) != 0)
  {
    int v11 = *(_DWORD *)(a2 + 132);
    *(_BYTE *)(a1 + 140) |= 0x20u;
    *(_DWORD *)(a1 + 132) = v11;
    char v8 = *(_BYTE *)(a2 + 140);
    if ((v8 & 8) == 0)
    {
LABEL_15:
      if ((v8 & 0x10) == 0) {
        goto LABEL_16;
      }
LABEL_21:
      int v13 = *(_DWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 140) |= 0x10u;
      *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = v13;
      if ((*(_BYTE *)(a2 + 140) & 0x40) == 0) {
        return a1;
      }
      goto LABEL_17;
    }
  }

  else if ((*(_BYTE *)(a2 + 140) & 8) == 0)
  {
    goto LABEL_15;
  }

  int v12 = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 140) |= 8u;
  *(_DWORD *)(a1 + 124) = v12;
  char v8 = *(_BYTE *)(a2 + 140);
  if ((v8 & 0x10) != 0) {
    goto LABEL_21;
  }
LABEL_16:
  if ((v8 & 0x40) != 0)
  {
LABEL_17:
    int v9 = *(_DWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 140) |= 0x40u;
    *(_DWORD *)(a1 + 136) = v9;
  }

  return a1;
}

uint64_t sub_1010D3340(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 140) & 4) != 0) {
    PB::TextFormatter::format(this, "armTimeActivityHints", *(_DWORD *)(a1 + 120));
  }
  uint64_t v5 = *(float **)(a1 + 8);
  int v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "armTimeImuConfidences", v7);
  }

  char v8 = *(_BYTE *)(a1 + 140);
  if ((v8 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sessionBtHintPercentage", *(float *)(a1 + 124));
    char v8 = *(_BYTE *)(a1 + 140);
    if ((v8 & 0x10) == 0)
    {
LABEL_7:
      if ((v8 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(a1 + 140) & 0x10) == 0)
  {
    goto LABEL_7;
  }

  PB::TextFormatter::format(this, "sessionGpsHintPercentage", *(float *)(a1 + 128));
  if ((*(_BYTE *)(a1 + 140) & 0x20) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "sessionImuHintPercentage", *(float *)(a1 + 132));
LABEL_9:
  int v9 = *(unsigned int **)(a1 + 32);
  unsigned int v10 = *(unsigned int **)(a1 + 40);
  while (v9 != v10)
  {
    unsigned int v11 = *v9++;
    PB::TextFormatter::format(this, "sessionSwivelAngleDegHistogram", v11);
  }

  int v12 = *(unsigned int **)(a1 + 56);
  int v13 = *(unsigned int **)(a1 + 64);
  while (v12 != v13)
  {
    unsigned int v14 = *v12++;
    PB::TextFormatter::format(this, "sessionTiltAngleDegHistogram", v14);
  }

  char v15 = *(_BYTE *)(a1 + 140);
  if ((v15 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "sessionWifiHintPercentage", *(float *)(a1 + 136));
    char v15 = *(_BYTE *)(a1 + 140);
    if ((v15 & 1) == 0)
    {
LABEL_15:
      if ((v15 & 2) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }

  else if ((*(_BYTE *)(a1 + 140) & 1) == 0)
  {
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 104));
  if ((*(_BYTE *)(a1 + 140) & 2) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "triggerTimeLastHighImuDrivingConfidenceTimestamp", *(void *)(a1 + 112));
LABEL_17:
  unsigned int v16 = *(float **)(a1 + 80);
  unint64_t v17 = *(float **)(a1 + 88);
  while (v16 != v17)
  {
    float v18 = *v16++;
    PB::TextFormatter::format(this, "windowAfterArmImuConfidences", v18);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010D350C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void *)(a1 + 72);
    unint64_t v209 = (void **)(a1 + 32);
    unint64_t v210 = (void **)(a1 + 56);
    unsigned int v11 = (void *)(a1 + 48);
    int v12 = (void **)(a1 + 80);
    uint64_t v13 = a1 + 96;
    unsigned int v14 = (void **)(a1 + 8);
    uint64_t v15 = a1 + 24;
    while (1)
    {
      uint64_t v16 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v17 = 0;
      unsigned int v18 = 0;
      unint64_t v19 = 0LL;
      while (1)
      {
        unint64_t v20 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v21 = *(_BYTE *)(v16 + v4);
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          break;
        }
        v17 += 7;
        unint64_t v4 = v20;
        BOOL v93 = v18++ > 8;
        if (v93) {
          goto LABEL_20;
        }
      }

LABEL_268:
          *(_DWORD *)(a1 + 120) = v55;
          goto LABEL_339;
        case 4u:
          if ((_DWORD)v27 != 2)
          {
            uint64_t v143 = *(char **)(a1 + 88);
            unint64_t v142 = *(void *)(a1 + 96);
            if ((unint64_t)v143 >= v142)
            {
              unint64_t v159 = (char *)*v12;
              uint64_t v160 = (v143 - (_BYTE *)*v12) >> 2;
              unint64_t v161 = v160 + 1;
              if ((unint64_t)(v160 + 1) >> 62) {
LABEL_350:
              }
                sub_100007008();
              uint64_t v162 = v142 - (void)v159;
              if (v162 >> 1 > v161) {
                unint64_t v161 = v162 >> 1;
              }
              else {
                unint64_t v163 = v161;
              }
              if (v163)
              {
                unint64_t v164 = (char *)sub_10000956C(v13, v163);
                unint64_t v159 = *(char **)(a1 + 80);
                uint64_t v143 = *(char **)(a1 + 88);
              }

              else
              {
                unint64_t v164 = 0LL;
              }

              unsigned int v179 = &v164[4 * v160];
              *(_DWORD *)unsigned int v179 = 0;
              char v137 = v179 + 4;
              while (v143 != v159)
              {
                int v180 = *((_DWORD *)v143 - 1);
                v143 -= 4;
                *((_DWORD *)v179 - 1) = v180;
                v179 -= 4;
              }

              *(void *)(a1 + 80) = v179;
              *(void *)(a1 + 8_Block_object_dispose(va, 8) = v137;
              *(void *)(a1 + 96) = &v164[4 * v163];
              if (v159) {
                operator delete(v159);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v143 = 0;
              char v137 = v143 + 4;
            }

            *(void *)(a1 + 8_Block_object_dispose(va, 8) = v137;
LABEL_286:
            unint64_t v181 = *((void *)this + 1);
            if (v181 <= 0xFFFFFFFFFFFFFFFBLL && v181 + 4 <= *((void *)this + 2))
            {
              *(v137 - 1) = *(_DWORD *)(*(void *)this + v181);
LABEL_290:
              *((void *)this + 1) += 4LL;
            }

            else
            {
LABEL_288:
              *((_BYTE *)this + 24) = 1;
            }

            goto LABEL_339;
          }

          if ((PB::Reader::placeMark(this, v211, v27, a4) & 1) != 0) {
            return 0LL;
          }
          unint64_t v58 = *((void *)this + 1);
          unint64_t v59 = *((void *)this + 2);
          while (v58 < v59 && !*((_BYTE *)this + 24))
          {
            unint64_t v61 = *(char **)(a1 + 88);
            unint64_t v60 = *(void *)(a1 + 96);
            if ((unint64_t)v61 >= v60)
            {
              char v63 = (char *)*v12;
              uint64_t v64 = (v61 - (_BYTE *)*v12) >> 2;
              unint64_t v65 = v64 + 1;
              uint64_t v66 = v60 - (void)v63;
              if (v66 >> 1 > v65) {
                unint64_t v65 = v66 >> 1;
              }
              else {
                unint64_t v67 = v65;
              }
              if (v67)
              {
                char v68 = (char *)sub_10000956C(v13, v67);
                char v63 = *(char **)(a1 + 80);
                unint64_t v61 = *(char **)(a1 + 88);
              }

              else
              {
                char v68 = 0LL;
              }

              unsigned int v69 = &v68[4 * v64];
              *(_DWORD *)unsigned int v69 = 0;
              uint64_t v62 = v69 + 4;
              while (v61 != v63)
              {
                int v70 = *((_DWORD *)v61 - 1);
                v61 -= 4;
                *((_DWORD *)v69 - 1) = v70;
                v69 -= 4;
              }

              *(void *)(a1 + 80) = v69;
              *(void *)(a1 + 8_Block_object_dispose(va, 8) = v62;
              *(void *)(a1 + 96) = &v68[4 * v67];
              if (v63) {
                operator delete(v63);
              }
            }

            else
            {
              *(_DWORD *)unint64_t v61 = 0;
              uint64_t v62 = v61 + 4;
            }

            *(void *)(a1 + 8_Block_object_dispose(va, 8) = v62;
            unint64_t v71 = *((void *)this + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)this + 2))
            {
LABEL_226:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_227;
            }

            *(v62 - 1) = *(_DWORD *)(*(void *)this + v71);
            unint64_t v59 = *((void *)this + 2);
            unint64_t v58 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v58;
          }

          goto LABEL_227;
        case 5u:
          *(_BYTE *)(a1 + 140) |= 2u;
          unint64_t v72 = *((void *)this + 1);
          unint64_t v73 = *((void *)this + 2);
          uint64_t v74 = *(void *)this;
          if (v72 <= 0xFFFFFFFFFFFFFFF5LL && v72 + 10 <= v73)
          {
            char v75 = 0;
            unsigned int v76 = 0;
            uint64_t v77 = 0LL;
            do
            {
              unint64_t v78 = v72 + 1;
              *((void *)this + 1) = v72 + 1;
              char v79 = *(_BYTE *)(v74 + v72);
              v77 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0) {
                goto LABEL_271;
              }
              v75 += 7;
              unint64_t v72 = v78;
              BOOL v93 = v76++ > 8;
            }

            while (!v93);
LABEL_220:
            uint64_t v77 = 0LL;
            goto LABEL_271;
          }

          char v144 = 0;
          unsigned int v145 = 0;
          uint64_t v77 = 0LL;
          if (v73 <= v72) {
            unint64_t v73 = *((void *)this + 1);
          }
          while (2)
          {
            if (v73 == v72)
            {
              uint64_t v77 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v146 = v72 + 1;
              char v147 = *(_BYTE *)(v74 + v72);
              *((void *)this + 1) = v146;
              v77 |= (unint64_t)(v147 & 0x7F) << v144;
              if (v147 < 0)
              {
                v144 += 7;
                unint64_t v72 = v146;
                BOOL v93 = v145++ > 8;
                if (v93) {
                  goto LABEL_220;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v77 = 0LL;
              }
            }

            break;
          }

            *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = v91;
            break;
          case 'f':
            *(_WORD *)(a1 + 96) |= 0x800u;
            BOOL v93 = *((void *)this + 1);
            unint64_t v2 = *((void *)this + 2);
            char v94 = *(void *)this;
            if (v93 > 0xFFFFFFFFFFFFFFF5LL || v93 + 10 > v2)
            {
              char v144 = 0;
              unsigned int v145 = 0;
              unint64_t v97 = 0LL;
              if (v2 <= v93) {
                unint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v93)
                {
                  LODWORD(v97) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_273;
                }

                unint64_t v146 = v93++;
                char v147 = *(_BYTE *)(v94 + v146);
                *((void *)this + 1) = v93;
                v97 |= (unint64_t)(v147 & 0x7F) << v144;
                if ((v147 & 0x80) == 0) {
                  break;
                }
                v144 += 7;
                unsigned int v14 = v145++ > 8;
                if (v14)
                {
                  LODWORD(v97) = 0;
                  goto LABEL_272;
                }
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v97) = 0;
              }
LABEL_272:
              unint64_t v2 = v146 + 1;
            }

            else
            {
              unsigned int v95 = 0;
              uint64_t v96 = 0;
              unint64_t v97 = 0LL;
              while (1)
              {
                unint64_t v2 = v93 + 1;
                *((void *)this + 1) = v93 + 1;
                char v98 = *(_BYTE *)(v94 + v93);
                v97 |= (unint64_t)(v98 & 0x7F) << v95;
                if ((v98 & 0x80) == 0) {
                  break;
                }
                v95 += 7;
                BOOL v93 = v2;
                unsigned int v14 = v96++ > 8;
                if (v14)
                {
                  LODWORD(v97) = 0;
                  break;
                }
              }
            }

LABEL_271:
          *(void *)(a1 + 112) = v77;
          goto LABEL_339;
        case 6u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v211, v27, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              char v80 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v80 >= *v11)
                {
                  unsigned int v81 = (char *)*v209;
                  uint64_t v82 = (v80 - (_BYTE *)*v209) >> 2;
                  unint64_t v83 = v82 + 1;
                  uint64_t v84 = *v11 - (void)v81;
                  if (v84 >> 1 > v83) {
                    unint64_t v83 = v84 >> 1;
                  }
                  else {
                    unint64_t v85 = v83;
                  }
                  if (v85)
                  {
                    unint64_t v86 = (char *)sub_10000956C((uint64_t)v11, v85);
                    unsigned int v81 = *(char **)(a1 + 32);
                    char v80 = *(char **)(a1 + 40);
                  }

                  else
                  {
                    unint64_t v86 = 0LL;
                  }

                  char v87 = &v86[4 * v82];
                  *(_DWORD *)char v87 = 0;
                  char v88 = v87 + 4;
                  while (v80 != v81)
                  {
                    int v89 = *((_DWORD *)v80 - 1);
                    v80 -= 4;
                    *((_DWORD *)v87 - 1) = v89;
                    v87 -= 4;
                  }

                  *(void *)(a1 + 32) = v87;
                  *(void *)(a1 + 40) = v88;
                  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v86[4 * v85];
                  if (v81) {
                    operator delete(v81);
                  }
                  char v80 = v88;
                }

                else
                {
                  *(_DWORD *)char v80 = 0;
                  v80 += 4;
                }

                *(void *)(a1 + 40) = v80;
                unint64_t v91 = *((void *)this + 1);
                unint64_t v90 = *((void *)this + 2);
                uint64_t v92 = *(void *)this;
                BOOL v93 = v91 > 0xFFFFFFFFFFFFFFF5LL || v91 + 10 > v90;
                if (v93)
                {
                  char v94 = 0;
                  unsigned int v95 = 0;
                  uint64_t v101 = 0LL;
                  if (v90 <= v91) {
                    uint64_t v96 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v96 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v96 == v91) {
                      goto LABEL_225;
                    }
                    unint64_t v97 = v91++;
                    char v98 = *(_BYTE *)(v92 + v97);
                    *((void *)this + 1) = v91;
                    v101 |= (unint64_t)(v98 & 0x7F) << v94;
                    if ((v98 & 0x80) == 0) {
                      break;
                    }
                    v94 += 7;
                    BOOL v93 = v95++ > 8;
                    if (v93)
                    {
                      LODWORD(v101) = 0;
                      goto LABEL_135;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v101) = 0;
                  }
LABEL_135:
                  unint64_t v102 = v97 + 1;
                }

                else
                {
                  char v99 = 0;
                  unsigned int v100 = 0;
                  uint64_t v101 = 0LL;
                  while (1)
                  {
                    unint64_t v102 = v91 + 1;
                    *((void *)this + 1) = v91 + 1;
                    char v103 = *(_BYTE *)(v92 + v91);
                    v101 |= (unint64_t)(v103 & 0x7F) << v99;
                    if ((v103 & 0x80) == 0) {
                      break;
                    }
                    v99 += 7;
                    unint64_t v91 = v102;
                    BOOL v93 = v100++ > 8;
                    if (v93)
                    {
                      LODWORD(v101) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v80 - 1) = v101;
              }

              while (v102 < v90 && !*((_BYTE *)this + 24));
            }

            goto LABEL_227;
          }

          unint64_t v149 = *(char **)(a1 + 40);
          unint64_t v148 = *(void *)(a1 + 48);
          if ((unint64_t)v149 >= v148)
          {
            char v165 = (char *)*v209;
            uint64_t v166 = (v149 - (_BYTE *)*v209) >> 2;
            unint64_t v167 = v166 + 1;
            if ((unint64_t)(v166 + 1) >> 62) {
LABEL_351:
            }
              sub_100007008();
            uint64_t v168 = v148 - (void)v165;
            if (v168 >> 1 > v167) {
              unint64_t v167 = v168 >> 1;
            }
            else {
              unint64_t v169 = v167;
            }
            if (v169)
            {
              char v170 = (char *)sub_10000956C((uint64_t)v11, v169);
              char v165 = *(char **)(a1 + 32);
              unint64_t v149 = *(char **)(a1 + 40);
            }

            else
            {
              char v170 = 0LL;
            }

            char v182 = &v170[4 * v166];
            *(_DWORD *)char v182 = 0;
            unint64_t v150 = v182 + 4;
            while (v149 != v165)
            {
              int v183 = *((_DWORD *)v149 - 1);
              v149 -= 4;
              *((_DWORD *)v182 - 1) = v183;
              v182 -= 4;
            }

            *(void *)(a1 + 32) = v182;
            *(void *)(a1 + 40) = v150;
            *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v170[4 * v169];
            if (v165) {
              operator delete(v165);
            }
          }

          else
          {
            *(_DWORD *)unint64_t v149 = 0;
            unint64_t v150 = v149 + 4;
          }

          *(void *)(a1 + 40) = v150;
          unint64_t v184 = *((void *)this + 1);
          unint64_t v185 = *((void *)this + 2);
          uint64_t v186 = *(void *)this;
          char v187 = 0;
          unsigned int v188 = 0;
          if (v184 <= 0xFFFFFFFFFFFFFFF5LL && v184 + 10 <= v185)
          {
            uint64_t v192 = 0LL;
            while (1)
            {
              unint64_t v193 = v184 + 1;
              *((void *)this + 1) = v184 + 1;
              char v194 = *(_BYTE *)(v186 + v184);
              v192 |= (unint64_t)(v194 & 0x7F) << v187;
              if ((v194 & 0x80) == 0) {
                goto LABEL_338;
              }
              v187 += 7;
              unint64_t v184 = v193;
              BOOL v93 = v188++ > 8;
              if (v93) {
                goto LABEL_334;
              }
            }
          }

          uint64_t v192 = 0LL;
          if (v185 <= v184) {
            unint64_t v185 = *((void *)this + 1);
          }
          while (v185 != v184)
          {
            unint64_t v190 = v184 + 1;
            char v191 = *(_BYTE *)(v186 + v184);
            *((void *)this + 1) = v190;
            v192 |= (unint64_t)(v191 & 0x7F) << v187;
            if ((v191 & 0x80) == 0) {
              goto LABEL_336;
            }
            v187 += 7;
            unint64_t v184 = v190;
            BOOL v93 = v188++ > 8;
            if (v93) {
              goto LABEL_334;
            }
          }

          goto LABEL_335;
        case 7u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v211, v27, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              char v80 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v80 >= *v10)
                {
                  int v104 = (char *)*v210;
                  uint64_t v105 = (v80 - (_BYTE *)*v210) >> 2;
                  unint64_t v106 = v105 + 1;
                  uint64_t v107 = *v10 - (void)v104;
                  if (v107 >> 1 > v106) {
                    unint64_t v106 = v107 >> 1;
                  }
                  else {
                    unint64_t v108 = v106;
                  }
                  if (v108)
                  {
                    BOOL v109 = (char *)sub_10000956C((uint64_t)v10, v108);
                    int v104 = *(char **)(a1 + 56);
                    char v80 = *(char **)(a1 + 64);
                  }

                  else
                  {
                    BOOL v109 = 0LL;
                  }

                  unint64_t v110 = &v109[4 * v105];
                  *(_DWORD *)unint64_t v110 = 0;
                  unint64_t v111 = v110 + 4;
                  while (v80 != v104)
                  {
                    int v112 = *((_DWORD *)v80 - 1);
                    v80 -= 4;
                    *((_DWORD *)v110 - 1) = v112;
                    v110 -= 4;
                  }

                  *(void *)(a1 + 56) = v110;
                  *(void *)(a1 + 64) = v111;
                  *(void *)(a1 + 72) = &v109[4 * v108];
                  if (v104) {
                    operator delete(v104);
                  }
                  char v80 = v111;
                }

                else
                {
                  *(_DWORD *)char v80 = 0;
                  v80 += 4;
                }

                *(void *)(a1 + 64) = v80;
                unint64_t v114 = *((void *)this + 1);
                unint64_t v113 = *((void *)this + 2);
                uint64_t v115 = *(void *)this;
                if (v114 <= 0xFFFFFFFFFFFFFFF5LL && v114 + 10 <= v113)
                {
                  char v122 = 0;
                  unsigned int v123 = 0;
                  uint64_t v124 = 0LL;
                  while (1)
                  {
                    unint64_t v125 = v114 + 1;
                    *((void *)this + 1) = v114 + 1;
                    char v126 = *(_BYTE *)(v115 + v114);
                    v124 |= (unint64_t)(v126 & 0x7F) << v122;
                    if ((v126 & 0x80) == 0) {
                      goto LABEL_181;
                    }
                    v122 += 7;
                    unint64_t v114 = v125;
                    BOOL v93 = v123++ > 8;
                    if (v93)
                    {
                      LODWORD(v124) = 0;
                      goto LABEL_181;
                    }
                  }
                }

                char v117 = 0;
                unsigned int v118 = 0;
                uint64_t v124 = 0LL;
                if (v113 <= v114) {
                  uint64_t v119 = *((void *)this + 1);
                }
                else {
                  uint64_t v119 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v119 == v114)
                  {
LABEL_225:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v80 - 1) = 0;
                    goto LABEL_227;
                  }

                  unint64_t v120 = v114++;
                  char v121 = *(_BYTE *)(v115 + v120);
                  *((void *)this + 1) = v114;
                  v124 |= (unint64_t)(v121 & 0x7F) << v117;
                  if ((v121 & 0x80) == 0) {
                    break;
                  }
                  v117 += 7;
                  BOOL v93 = v118++ > 8;
                  if (v93)
                  {
                    LODWORD(v124) = 0;
                    goto LABEL_180;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v124) = 0;
                }
LABEL_180:
                unint64_t v125 = v120 + 1;
LABEL_181:
                *((_DWORD *)v80 - 1) = v124;
              }

              while (v125 < v113 && !*((_BYTE *)this + 24));
            }

          *(void *)(a1 + _Block_object_dispose(va, 8) = v91;
          goto LABEL_243;
        case 0x1Cu:
          *(void *)(a1 + 164) |= 0x80000000uLL;
          char v94 = *((void *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v94);
          goto LABEL_241;
        case 0x1Du:
          *(void *)(a1 + 164) |= 0x80000uLL;
          unsigned int v95 = *((void *)this + 1);
          uint64_t v96 = *((void *)this + 2);
          unint64_t v97 = *(void *)this;
          if (v95 <= 0xFFFFFFFFFFFFFFF5LL && v95 + 10 <= v96)
          {
            char v98 = 0;
            char v99 = 0;
            unsigned int v100 = 0LL;
            do
            {
              uint64_t v101 = v95 + 1;
              *((void *)this + 1) = v95 + 1;
              unint64_t v102 = *(_BYTE *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0) {
                goto LABEL_275;
              }
              v98 += 7;
              unsigned int v95 = v101;
              unsigned int v14 = v99++ > 8;
            }

            while (!v14);
LABEL_221:
            LODWORD(v100) = 0;
            goto LABEL_275;
          }

          uint64_t v156 = 0;
          unint64_t v157 = 0;
          unsigned int v100 = 0LL;
          if (v96 <= v95) {
            uint64_t v96 = *((void *)this + 1);
          }
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v158 = v95 + 1;
              unint64_t v159 = *(_BYTE *)(v97 + v95);
              *((void *)this + 1) = v158;
              v100 |= (unint64_t)(v159 & 0x7F) << v156;
              if (v159 < 0)
              {
                v156 += 7;
                unsigned int v95 = v158;
                unsigned int v14 = v157++ > 8;
                if (v14) {
                  goto LABEL_221;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v100) = 0;
              }
            }

            break;
          }

        *(_DWORD *)(a1 + 136) = v82;
        goto LABEL_304;
      case 0x12u:
        *(_DWORD *)(a1 + 152) |= 0x100000u;
        unint64_t v85 = *((void *)this + 1);
        unint64_t v86 = *((void *)this + 2);
        char v87 = *(void *)this;
        if (v85 <= 0xFFFFFFFFFFFFFFF5LL && v85 + 10 <= v86)
        {
          char v88 = 0;
          int v89 = 0;
          unint64_t v90 = 0LL;
          do
          {
            unint64_t v91 = v85 + 1;
            *((void *)this + 1) = v85 + 1;
            uint64_t v92 = *(_BYTE *)(v87 + v85);
            v90 |= (unint64_t)(v92 & 0x7F) << v88;
            if ((v92 & 0x80) == 0) {
              goto LABEL_275;
            }
            v88 += 7;
            unint64_t v85 = v91;
            uint64_t v15 = v89++ > 8;
          }

          while (!v15);
LABEL_200:
          LODWORD(v90) = 0;
          goto LABEL_275;
        }

        char v170 = 0;
        unsigned int v171 = 0;
        unint64_t v90 = 0LL;
        if (v86 <= v85) {
          unint64_t v86 = *((void *)this + 1);
        }
        while (2)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v172 = v85 + 1;
            unint64_t v173 = *(_BYTE *)(v87 + v85);
            *((void *)this + 1) = v172;
            v90 |= (unint64_t)(v173 & 0x7F) << v170;
            if (v173 < 0)
            {
              v170 += 7;
              unint64_t v85 = v172;
              uint64_t v15 = v171++ > 8;
              if (v15) {
                goto LABEL_200;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v90) = 0;
            }
          }

          break;
        }

          *(_DWORD *)(a1 + 76) = v78;
          goto LABEL_296;
        case 0xDu:
          *(_DWORD *)(a1 + 116) |= 0x800u;
          unsigned int v81 = *((void *)this + 1);
          uint64_t v82 = *((void *)this + 2);
          unint64_t v83 = *(void *)this;
          if (v81 <= 0xFFFFFFFFFFFFFFF5LL && v81 + 10 <= v82)
          {
            uint64_t v84 = 0;
            unint64_t v85 = 0;
            unint64_t v86 = 0LL;
            do
            {
              char v87 = v81 + 1;
              *((void *)this + 1) = v81 + 1;
              char v88 = *(_BYTE *)(v83 + v81);
              v86 |= (unint64_t)(v88 & 0x7F) << v84;
              if ((v88 & 0x80) == 0) {
                goto LABEL_275;
              }
              v84 += 7;
              unsigned int v81 = v87;
              unsigned int v14 = v85++ > 8;
            }

            while (!v14);
LABEL_199:
            LODWORD(v86) = 0;
            goto LABEL_275;
          }

          int v178 = 0;
          unsigned int v179 = 0;
          unint64_t v86 = 0LL;
          if (v82 <= v81) {
            uint64_t v82 = *((void *)this + 1);
          }
          while (2)
          {
            if (v82 == v81)
            {
              LODWORD(v86) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int v180 = v81 + 1;
              unint64_t v181 = *(_BYTE *)(v83 + v81);
              *((void *)this + 1) = v180;
              v86 |= (unint64_t)(v181 & 0x7F) << v178;
              if (v181 < 0)
              {
                v178 += 7;
                unsigned int v81 = v180;
                unsigned int v14 = v179++ > 8;
                if (v14) {
                  goto LABEL_199;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v86) = 0;
              }
            }

            break;
          }

LABEL_335:
              LODWORD(v192) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v192 = 0LL;
              while (1)
              {
                unint64_t v205 = v197 + 1;
                *((void *)this + 1) = v197 + 1;
                char v206 = *(_BYTE *)(v199 + v197);
                v192 |= (unint64_t)(v206 & 0x7F) << v200;
                if ((v206 & 0x80) == 0) {
                  break;
                }
                v200 += 7;
                unint64_t v197 = v205;
                BOOL v93 = v201++ > 8;
                if (v93) {
                  goto LABEL_334;
                }
              }
            }

uint64_t sub_1010D4470(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 140) & 1) != 0) {
    double result = PB::Writer::writeVarInt(this, *(void *)(result + 104), 1u);
  }
  unint64_t v4 = *(float **)(v3 + 8);
  unint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  if ((*(_BYTE *)(v3 + 140) & 4) != 0) {
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 3u);
  }
  float v7 = *(float **)(v3 + 80);
  char v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 4u);
  }

  if ((*(_BYTE *)(v3 + 140) & 2) != 0) {
    double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 112), 5u);
  }
  unsigned int v10 = *(unsigned int **)(v3 + 32);
  unsigned int v11 = *(unsigned int **)(v3 + 40);
  while (v10 != v11)
  {
    unsigned int v12 = *v10++;
    double result = PB::Writer::writeVarInt(this, v12, 6u);
  }

  uint64_t v13 = *(unsigned int **)(v3 + 56);
  unsigned int v14 = *(unsigned int **)(v3 + 64);
  while (v13 != v14)
  {
    unsigned int v15 = *v13++;
    double result = PB::Writer::writeVarInt(this, v15, 7u);
  }

  char v16 = *(_BYTE *)(v3 + 140);
  if ((v16 & 0x20) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 132), 8u);
    char v16 = *(_BYTE *)(v3 + 140);
    if ((v16 & 8) == 0)
    {
LABEL_21:
      if ((v16 & 0x10) == 0) {
        goto LABEL_22;
      }
      goto LABEL_26;
    }
  }

  else if ((*(_BYTE *)(v3 + 140) & 8) == 0)
  {
    goto LABEL_21;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 124), 9u);
  char v16 = *(_BYTE *)(v3 + 140);
  if ((v16 & 0x10) == 0)
  {
LABEL_22:
    if ((v16 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 136), 0xBu);
  }

double sub_1010D45D8(uint64_t a1)
{
  *(void *)a1 = &off_101899D40;
  *(_DWORD *)(a1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1010D45FC(PB::Base *this)
{
  *(void *)this = &off_101899D40;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1010D464C(PB::Base *a1)
{
}

uint64_t sub_1010D4660(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899D40;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  unint64_t v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_WORD *)(a2 + 104) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 104) = 1;
    *(void *)(a1 + 56) = v5;
  }

  if (a1 != a2) {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }
  __int16 v6 = *(_WORD *)(a2 + 104);
  if ((v6 & 0x100) != 0)
  {
    int v12 = *(_DWORD *)(a2 + 100);
    *(_WORD *)(a1 + 104) |= 0x100u;
    *(_DWORD *)(a1 + 100) = v12;
    __int16 v6 = *(_WORD *)(a2 + 104);
    if ((v6 & 0x40) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0) {
        goto LABEL_8;
      }
      goto LABEL_21;
    }
  }

  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_7;
  }

  int v13 = *(_DWORD *)(a2 + 92);
  *(_WORD *)(a1 + 104) |= 0x40u;
  *(_DWORD *)(a1 + 92) = v13;
  __int16 v6 = *(_WORD *)(a2 + 104);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

uint64_t sub_1010D4800(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sessionGreenFieldPercentage", *(float *)(a1 + 80));
    __int16 v5 = *(_WORD *)(a1 + 104);
  }

  if ((v5 & 0x10) != 0) {
    PB::TextFormatter::format(this, "sessionHighRotationPercentage", *(float *)(a1 + 84));
  }
  __int16 v6 = *(unsigned int **)(a1 + 8);
  uint64_t v7 = *(unsigned int **)(a1 + 16);
  while (v6 != v7)
  {
    unsigned int v8 = *v6++;
    PB::TextFormatter::format(this, "sessionMeanPoseAngleXHistogram", v8);
  }

  __int16 v9 = *(_WORD *)(a1 + 104);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 56));
    __int16 v9 = *(_WORD *)(a1 + 104);
    if ((v9 & 0x20) == 0)
    {
LABEL_9:
      if ((v9 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }

  else if ((v9 & 0x20) == 0)
  {
    goto LABEL_9;
  }

  PB::TextFormatter::format(this, "triggerTimeInternalDrivingState", *(_DWORD *)(a1 + 88));
  __int16 v9 = *(_WORD *)(a1 + 104);
  if ((v9 & 2) == 0)
  {
LABEL_10:
    if ((v9 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }

BOOL sub_1010D49B0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    int v10 = (void **)(a1 + 8);
    unsigned int v11 = (void *)(a1 + 24);
    unsigned int v12 = (void **)(a1 + 32);
    int v13 = (void *)(a1 + 48);
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v47 = v16++ > 8;
        if (v47) {
          goto LABEL_20;
        }
      }

LABEL_273:
            *(v116 - 1) = v153;
          }

            *(_DWORD *)(a1 + 84) = v97;
            break;
          case 'g':
            *(_WORD *)(a1 + 96) |= 0x100u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
            {
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v2;
            }

            else
            {
              *((_BYTE *)this + 24) = 1;
            }

            break;
          default:
LABEL_121:
            double result = PB::Reader::skip(this, v20, v11 & 7, 0);
            if (!(_DWORD)result) {
              return result;
            }
            unint64_t v2 = *((void *)this + 1);
            break;
        }
      }

      else
      {
        switch((int)v20)
        {
          case 201:
            *(_WORD *)(a1 + 96) |= 0x80u;
            unsigned int v21 = *((void *)this + 1);
            unint64_t v2 = *((void *)this + 2);
            unint64_t v22 = *(void *)this;
            if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
            {
              unsigned int v100 = 0;
              uint64_t v101 = 0;
              uint64_t v25 = 0LL;
              if (v2 <= v21) {
                unint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v21)
                {
                  uint64_t v25 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_218;
                }

                unint64_t v102 = v21++;
                char v103 = *(_BYTE *)(v22 + v102);
                *((void *)this + 1) = v21;
                v25 |= (unint64_t)(v103 & 0x7F) << v100;
                if ((v103 & 0x80) == 0) {
                  break;
                }
                v100 += 7;
                uint64_t v14 = v101++ > 8;
                if (v14)
                {
                  uint64_t v25 = 0LL;
LABEL_217:
                  unint64_t v2 = v102 + 1;
                  goto LABEL_218;
                }
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v25 = 0LL;
              }
              goto LABEL_217;
            }

            char v23 = 0;
            unint64_t v24 = 0;
            uint64_t v25 = 0LL;
            do
            {
              unint64_t v2 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              unint64_t v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                goto LABEL_218;
              }
              v23 += 7;
              unsigned int v21 = v2;
              uint64_t v14 = v24++ > 8;
            }

            while (!v14);
            uint64_t v25 = 0LL;
LABEL_218:
            *(void *)(a1 + 64) = v25;
            break;
          case 202:
            *(_WORD *)(a1 + 96) |= 0x8000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 >= *((void *)this + 2))
            {
              unint64_t v34 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v33 = *(unsigned __int8 *)(*(void *)this + v2++);
              *((void *)this + 1) = v2;
              unint64_t v34 = v33 != 0;
            }

            *(_BYTE *)(a1 + 94) = v34;
            break;
          case 203:
            *(_WORD *)(a1 + 96) |= 0x4000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 >= *((void *)this + 2))
            {
              uint64_t v36 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v35 = *(unsigned __int8 *)(*(void *)this + v2++);
              *((void *)this + 1) = v2;
              uint64_t v36 = v35 != 0;
            }

            *(_BYTE *)(a1 + 93) = v36;
            break;
          case 204:
            *(_WORD *)(a1 + 96) |= 0x2000u;
            unint64_t v2 = *((void *)this + 1);
            if (v2 >= *((void *)this + 2))
            {
              uint64_t v38 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v37 = *(unsigned __int8 *)(*(void *)this + v2++);
              *((void *)this + 1) = v2;
              uint64_t v38 = v37 != 0;
            }

            *(_BYTE *)(a1 + 92) = v38;
            break;
          case 205:
            *(_WORD *)(a1 + 96) |= 2u;
            unint64_t v39 = *((void *)this + 1);
            unint64_t v2 = *((void *)this + 2);
            unsigned int v40 = *(void *)this;
            if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
            {
              char v108 = 0;
              unint64_t v109 = 0;
              int v43 = 0LL;
              if (v2 <= v39) {
                unint64_t v2 = *((void *)this + 1);
              }
              while (1)
              {
                if (v2 == v39)
                {
                  int v43 = 0LL;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_228;
                }

                char v110 = v39++;
                unsigned int v111 = *(_BYTE *)(v40 + v110);
                *((void *)this + 1) = v39;
                v43 |= (unint64_t)(v111 & 0x7F) << v108;
                if ((v111 & 0x80) == 0) {
                  break;
                }
                v108 += 7;
                uint64_t v14 = v109++ > 8;
                if (v14)
                {
                  int v43 = 0LL;
LABEL_227:
                  unint64_t v2 = v110 + 1;
                  goto LABEL_228;
                }
              }

              if (*((_BYTE *)this + 24)) {
                int v43 = 0LL;
              }
              goto LABEL_227;
            }

            uint64_t v41 = 0;
            uint64_t v42 = 0;
            int v43 = 0LL;
            do
            {
              unint64_t v2 = v39 + 1;
              *((void *)this + 1) = v39 + 1;
              unint64_t v44 = *(_BYTE *)(v40 + v39);
              v43 |= (unint64_t)(v44 & 0x7F) << v41;
              if ((v44 & 0x80) == 0) {
                goto LABEL_228;
              }
              v41 += 7;
              unint64_t v39 = v2;
              uint64_t v14 = v42++ > 8;
            }

            while (!v14);
            int v43 = 0LL;
LABEL_228:
            *(void *)(a1 + 16) = v43;
            break;
          default:
            goto LABEL_121;
        }
      }

      uint64_t v3 = *((void *)this + 2);
      unint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v15 = 0;
    unsigned int v16 = 0;
    unsigned int v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      unint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unsigned int v11 = 0LL;
        goto LABEL_20;
      }
    }

    unint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

uint64_t sub_1010D5648(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_WORD *)(result + 104) & 1) != 0) {
    double result = PB::Writer::writeVarInt(this, *(void *)(result + 56), 1u);
  }
  unint64_t v4 = *(unsigned int **)(v3 + 32);
  unint64_t v5 = *(unsigned int **)(v3 + 40);
  while (v4 != v5)
  {
    unsigned int v6 = *v4++;
    double result = PB::Writer::writeVarInt(this, v6, 2u);
  }

  __int16 v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 0x100) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 100), 3u);
    __int16 v7 = *(_WORD *)(v3 + 104);
    if ((v7 & 0x40) == 0)
    {
LABEL_8:
      if ((v7 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }

  else if ((v7 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 92), 4u);
  __int16 v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 0x80) == 0)
  {
LABEL_9:
    if ((v7 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

uint64_t sub_1010D57AC(uint64_t result)
{
  *(void *)double result = &off_101899D78;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1010D57C4(PB::Base *a1)
{
}

uint64_t sub_1010D57D8(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_101899D78;
  *(_DWORD *)(result + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    char v3 = 8;
    *(_BYTE *)(result + 44) = 8;
    *(void *)(result + 32) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 44) = v3;
    *(void *)(result + _Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 44);
  }

uint64_t sub_1010D5880(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "epochFirstTimestamp", *(void *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "maxNormValue", *(float *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010D5950(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010D5EB4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

double sub_1010D5F64(uint64_t a1)
{
  *(void *)a1 = &off_101899DB0;
  *(_DWORD *)(a1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1010D5F88(PB::Base *this)
{
  *(void *)this = &off_101899DB0;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1010D5FD8(PB::Base *a1)
{
}

uint64_t sub_1010D5FEC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899DB0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  int v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x80) != 0)
  {
    int v7 = *(_DWORD *)(a2 + 112);
    int v6 = 128;
    *(_DWORD *)(a1 + 152) = 128;
    *(_DWORD *)(a1 + 112) = v7;
    int v5 = *(_DWORD *)(a2 + 152);
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v6 = 0;
  if ((v5 & 8) != 0)
  {
LABEL_5:
    uint64_t v8 = *(void *)(a2 + 80);
    v6 |= 8u;
    *(_DWORD *)(a1 + 152) = v6;
    *(void *)(a1 + 80) = v8;
    int v5 = *(_DWORD *)(a2 + 152);
  }

uint64_t sub_1010D626C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 152) & 0x80) != 0) {
    PB::TextFormatter::format(this, "accelPeakThreshold", *(float *)(a1 + 112));
  }
  int v5 = *(unint64_t **)(a1 + 8);
  int v6 = *(unint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    unint64_t v7 = *v5++;
    PB::TextFormatter::format(this, "allMaxNormTimestamps", v7);
  }

  uint64_t v8 = *(float **)(a1 + 32);
  int v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "allMaxNormValues", v10);
  }

  int v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 1) != 0)
  {
    PB::TextFormatter::format(this, "epochFirstTimestamp", *(void *)(a1 + 56));
    int v11 = *(_DWORD *)(a1 + 152);
    if ((v11 & 2) == 0)
    {
LABEL_9:
      if ((v11 & 0x10000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_28;
    }
  }

  else if ((v11 & 2) == 0)
  {
    goto LABEL_9;
  }

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 64));
  int v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x10000) == 0)
  {
LABEL_10:
    if ((v11 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }

BOOL sub_1010D6540(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  int v7 = *((unsigned __int8 *)this + 24);
  if (v5 < v6 && v7 == 0)
  {
    int v11 = (void **)(a1 + 32);
    uint64_t v12 = a1 + 48;
    int v13 = (void **)(a1 + 8);
    uint64_t v14 = (void *)(a1 + 24);
    while (1)
    {
      uint64_t v15 = *(void *)this;
      if (v5 > 0xFFFFFFFFFFFFFFF5LL || v5 + 10 > v6) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0LL;
      while (1)
      {
        unint64_t v19 = v5 + 1;
        *((void *)this + 1) = v5 + 1;
        char v20 = *(_BYTE *)(v15 + v5);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v5 = v19;
        BOOL v105 = v17++ > 8;
        if (v105) {
          goto LABEL_20;
        }
      }

LABEL_288:
            *(_DWORD *)(a1 + 132) = v34;
            break;
          case 202:
            *(_DWORD *)(a1 + 152) |= 4u;
            unint64_t v82 = *((void *)this + 1);
            unint64_t v83 = *((void *)this + 2);
            uint64_t v84 = *(void *)this;
            if (v82 <= 0xFFFFFFFFFFFFFFF5LL && v82 + 10 <= v83)
            {
              char v85 = 0;
              unsigned int v86 = 0;
              uint64_t v87 = 0LL;
              do
              {
                unint64_t v88 = v82 + 1;
                *((void *)this + 1) = v82 + 1;
                char v89 = *(_BYTE *)(v84 + v82);
                v87 |= (unint64_t)(v89 & 0x7F) << v85;
                if ((v89 & 0x80) == 0) {
                  goto LABEL_306;
                }
                v85 += 7;
                unint64_t v82 = v88;
                BOOL v105 = v86++ > 8;
              }

              while (!v105);
LABEL_234:
              uint64_t v87 = 0LL;
              goto LABEL_306;
            }

            char v179 = 0;
            unsigned int v180 = 0;
            uint64_t v87 = 0LL;
            if (v83 <= v82) {
              unint64_t v83 = *((void *)this + 1);
            }
            while (2)
            {
              if (v83 == v82)
              {
                uint64_t v87 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v181 = v82 + 1;
                char v182 = *(_BYTE *)(v84 + v82);
                *((void *)this + 1) = v181;
                v87 |= (unint64_t)(v182 & 0x7F) << v179;
                if (v182 < 0)
                {
                  v179 += 7;
                  unint64_t v82 = v181;
                  BOOL v105 = v180++ > 8;
                  if (v105) {
                    goto LABEL_234;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v87 = 0LL;
                }
              }

              break;
            }

LABEL_276:
              PB::Reader::recallMark(this, v229);
            }

            else
            {
              int v183 = v11;
              uint64_t v184 = v4;
              uint64_t v186 = *(char **)(a1 + 16);
              unint64_t v185 = *(void *)(a1 + 24);
              if ((unint64_t)v186 >= v185)
              {
                uint64_t v199 = (char *)*v13;
                uint64_t v200 = (v186 - (_BYTE *)*v13) >> 3;
                unint64_t v201 = v200 + 1;
                if ((unint64_t)(v200 + 1) >> 61) {
LABEL_363:
                }
                  sub_100007008();
                uint64_t v202 = v185 - (void)v199;
                if (v202 >> 2 > v201) {
                  unint64_t v201 = v202 >> 2;
                }
                else {
                  unint64_t v203 = v201;
                }
                if (v203)
                {
                  char v204 = (char *)sub_1000071BC((uint64_t)v14, v203);
                  uint64_t v199 = *(char **)(a1 + 8);
                  uint64_t v186 = *(char **)(a1 + 16);
                }

                else
                {
                  char v204 = 0LL;
                }

                int v211 = &v204[8 * v200];
                *(void *)int v211 = 0LL;
                char v187 = v211 + 8;
                while (v186 != v199)
                {
                  uint64_t v212 = *((void *)v186 - 1);
                  v186 -= 8;
                  *((void *)v211 - 1) = v212;
                  v211 -= 8;
                }

                *(void *)(a1 + _Block_object_dispose(va, 8) = v211;
                *(void *)(a1 + 16) = v187;
                *(void *)(a1 + 24) = &v204[8 * v203];
                if (v199) {
                  operator delete(v199);
                }
              }

              else
              {
                *(void *)uint64_t v186 = 0LL;
                char v187 = v186 + 8;
              }

              *(void *)(a1 + 16) = v187;
              unint64_t v213 = *((void *)this + 1);
              unint64_t v214 = *((void *)this + 2);
              uint64_t v215 = *(void *)this;
              char v216 = 0;
              unsigned int v217 = 0;
              if (v213 > 0xFFFFFFFFFFFFFFF5LL || v213 + 10 > v214)
              {
                uint64_t v221 = 0LL;
                if (v214 <= v213) {
                  unint64_t v214 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v214 == v213)
                  {
                    uint64_t v221 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_351;
                  }

                  unint64_t v219 = v213 + 1;
                  char v220 = *(_BYTE *)(v215 + v213);
                  *((void *)this + 1) = v219;
                  v221 |= (unint64_t)(v220 & 0x7F) << v216;
                  if ((v220 & 0x80) == 0) {
                    break;
                  }
                  v216 += 7;
                  unint64_t v213 = v219;
                  BOOL v105 = v217++ > 8;
                  if (v105)
                  {
LABEL_336:
                    uint64_t v221 = 0LL;
                    goto LABEL_351;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v221 = 0LL;
                }
              }

              else
              {
                uint64_t v221 = 0LL;
                while (1)
                {
                  unint64_t v222 = v213 + 1;
                  *((void *)this + 1) = v213 + 1;
                  char v223 = *(_BYTE *)(v215 + v213);
                  v221 |= (unint64_t)(v223 & 0x7F) << v216;
                  if ((v223 & 0x80) == 0) {
                    break;
                  }
                  v216 += 7;
                  unint64_t v213 = v222;
                  BOOL v105 = v217++ > 8;
                  if (v105) {
                    goto LABEL_336;
                  }
                }
              }

          uint64_t v4 = *((void *)this + 1);
          unint64_t v5 = *((void *)this + 2);
          unint64_t v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 6u:
          *(_BYTE *)(a1 + 144) |= 4u;
          unint64_t v97 = *((void *)this + 1);
          char v98 = *((void *)this + 2);
          char v99 = *(void *)this;
          if (v97 <= 0xFFFFFFFFFFFFFFF5LL && v97 + 10 <= v98)
          {
            unsigned int v100 = 0;
            uint64_t v101 = 0;
            unint64_t v102 = 0LL;
            do
            {
              unint64_t v103 = v97 + 1;
              *((void *)this + 1) = v97 + 1;
              uint64_t v104 = *(_BYTE *)(v99 + v97);
              v102 |= (unint64_t)(v104 & 0x7F) << v100;
              if ((v104 & 0x80) == 0) {
                goto LABEL_232;
              }
              v100 += 7;
              unint64_t v97 = v103;
              char v20 = v101++ > 8;
            }

            while (!v20);
LABEL_180:
            LODWORD(v102) = 0;
            goto LABEL_232;
          }

          uint64_t v125 = 0;
          unint64_t v126 = 0;
          unint64_t v102 = 0LL;
          if (v98 <= v97) {
            char v98 = *((void *)this + 1);
          }
          while (2)
          {
            if (v98 == v97)
            {
              LODWORD(v102) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v127 = v97 + 1;
              char v128 = *(_BYTE *)(v99 + v97);
              *((void *)this + 1) = v127;
              v102 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                unint64_t v97 = v127;
                char v20 = v126++ > 8;
                if (v20) {
                  goto LABEL_180;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v102) = 0;
              }
            }

            break;
          }

LABEL_309:
            *(void *)(a1 + 56) = v136;
            break;
          case 207:
            *(_DWORD *)(a1 + 152) |= 2u;
            unint64_t v139 = *((void *)this + 1);
            unint64_t v140 = *((void *)this + 2);
            uint64_t v141 = *(void *)this;
            if (v139 <= 0xFFFFFFFFFFFFFFF5LL && v139 + 10 <= v140)
            {
              char v142 = 0;
              unsigned int v143 = 0;
              uint64_t v144 = 0LL;
              do
              {
                unint64_t v145 = v139 + 1;
                *((void *)this + 1) = v139 + 1;
                char v146 = *(_BYTE *)(v141 + v139);
                v144 |= (unint64_t)(v146 & 0x7F) << v142;
                if ((v146 & 0x80) == 0) {
                  goto LABEL_312;
                }
                v142 += 7;
                unint64_t v139 = v145;
                BOOL v105 = v143++ > 8;
              }

              while (!v105);
LABEL_252:
              uint64_t v144 = 0LL;
              goto LABEL_312;
            }

            char v195 = 0;
            unsigned int v196 = 0;
            uint64_t v144 = 0LL;
            if (v140 <= v139) {
              unint64_t v140 = *((void *)this + 1);
            }
            while (2)
            {
              if (v140 == v139)
              {
                uint64_t v144 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v197 = v139 + 1;
                char v198 = *(_BYTE *)(v141 + v139);
                *((void *)this + 1) = v197;
                v144 |= (unint64_t)(v198 & 0x7F) << v195;
                if (v198 < 0)
                {
                  v195 += 7;
                  unint64_t v139 = v197;
                  BOOL v105 = v196++ > 8;
                  if (v105) {
                    goto LABEL_252;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v144 = 0LL;
                }
              }

              break;
            }

LABEL_312:
            *(void *)(a1 + 64) = v144;
            break;
          case 208:
            *(_DWORD *)(a1 + 152) |= 0x20000u;
            unint64_t v147 = *((void *)this + 1);
            if (v147 >= *((void *)this + 2))
            {
              BOOL v150 = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v148 = v147 + 1;
              int v149 = *(unsigned __int8 *)(*(void *)this + v147);
              *((void *)this + 1) = v148;
              BOOL v150 = v149 != 0;
            }

            *(_BYTE *)(a1 + 149) = v150;
            break;
          default:
            if ((_DWORD)v27 == 101)
            {
              *(_DWORD *)(a1 + 152) |= 0x10000u;
              unint64_t v151 = *((void *)this + 1);
              if (v151 >= *((void *)this + 2))
              {
                BOOL v154 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v152 = v151 + 1;
                int v153 = *(unsigned __int8 *)(*(void *)this + v151);
                *((void *)this + 1) = v152;
                BOOL v154 = v153 != 0;
              }

              *(_BYTE *)(a1 + 14_Block_object_dispose(va, 8) = v154;
            }

            else if ((_DWORD)v27 == 102)
            {
              *(_DWORD *)(a1 + 152) |= 0x40u;
              unint64_t v37 = *((void *)this + 1);
              unint64_t v38 = *((void *)this + 2);
              uint64_t v39 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5LL || v37 + 10 > v38)
              {
                char v159 = 0;
                unsigned int v160 = 0;
                uint64_t v42 = 0LL;
                if (v38 <= v37) {
                  unint64_t v38 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v38 == v37)
                  {
                    uint64_t v42 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_291;
                  }

                  unint64_t v161 = v37 + 1;
                  char v162 = *(_BYTE *)(v39 + v37);
                  *((void *)this + 1) = v161;
                  v42 |= (unint64_t)(v162 & 0x7F) << v159;
                  if ((v162 & 0x80) == 0) {
                    break;
                  }
                  v159 += 7;
                  unint64_t v37 = v161;
                  BOOL v105 = v160++ > 8;
                  if (v105)
                  {
LABEL_199:
                    uint64_t v42 = 0LL;
                    goto LABEL_291;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v42 = 0LL;
                }
              }

              else
              {
                char v40 = 0;
                unsigned int v41 = 0;
                uint64_t v42 = 0LL;
                while (1)
                {
                  unint64_t v43 = v37 + 1;
                  *((void *)this + 1) = v37 + 1;
                  char v44 = *(_BYTE *)(v39 + v37);
                  v42 |= (unint64_t)(v44 & 0x7F) << v40;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v40 += 7;
                  unint64_t v37 = v43;
                  BOOL v105 = v41++ > 8;
                  if (v105) {
                    goto LABEL_199;
                  }
                }
              }

LABEL_297:
            *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = v58;
            goto LABEL_352;
          case 4:
            *(_DWORD *)(a1 + 152) |= 0x10u;
            unint64_t v61 = *((void *)this + 1);
            unint64_t v62 = *((void *)this + 2);
            uint64_t v63 = *(void *)this;
            if (v61 <= 0xFFFFFFFFFFFFFFF5LL && v61 + 10 <= v62)
            {
              char v64 = 0;
              unsigned int v65 = 0;
              uint64_t v66 = 0LL;
              do
              {
                unint64_t v67 = v61 + 1;
                *((void *)this + 1) = v61 + 1;
                char v68 = *(_BYTE *)(v63 + v61);
                v66 |= (unint64_t)(v68 & 0x7F) << v64;
                if ((v68 & 0x80) == 0) {
                  goto LABEL_300;
                }
                v64 += 7;
                unint64_t v61 = v67;
                BOOL v105 = v65++ > 8;
              }

              while (!v105);
LABEL_220:
              uint64_t v66 = 0LL;
              goto LABEL_300;
            }

            char v171 = 0;
            unsigned int v172 = 0;
            uint64_t v66 = 0LL;
            if (v62 <= v61) {
              unint64_t v62 = *((void *)this + 1);
            }
            while (2)
            {
              if (v62 == v61)
              {
                uint64_t v66 = 0LL;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                unint64_t v173 = v61 + 1;
                char v174 = *(_BYTE *)(v63 + v61);
                *((void *)this + 1) = v173;
                v66 |= (unint64_t)(v174 & 0x7F) << v171;
                if (v174 < 0)
                {
                  v171 += 7;
                  unint64_t v61 = v173;
                  BOOL v105 = v172++ > 8;
                  if (v105) {
                    goto LABEL_220;
                  }
                  continue;
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v66 = 0LL;
                }
              }

              break;
            }

LABEL_300:
            *(void *)(a1 + 8_Block_object_dispose(va, 8) = v66;
            goto LABEL_352;
          case 5:
            *(_DWORD *)(a1 + 152) |= 0x4000u;
            unint64_t v69 = *((void *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2)) {
              goto LABEL_96;
            }
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v69);
            goto LABEL_258;
          case 6:
            *(_DWORD *)(a1 + 152) |= 0x8000u;
            unint64_t v70 = *((void *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
              goto LABEL_96;
            }
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v70);
            goto LABEL_258;
          case 7:
            *(_DWORD *)(a1 + 152) |= 0x200u;
            unint64_t v71 = *((void *)this + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)this + 2)) {
              goto LABEL_96;
            }
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v71);
            goto LABEL_258;
          case 8:
            *(_DWORD *)(a1 + 152) |= 0x400u;
            unint64_t v72 = *((void *)this + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)this + 2)) {
              goto LABEL_96;
            }
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v72);
            goto LABEL_258;
          case 9:
            *(_DWORD *)(a1 + 152) |= 0x20u;
            unint64_t v73 = *((void *)this + 1);
            unint64_t v74 = *((void *)this + 2);
            uint64_t v75 = *(void *)this;
            if (v73 <= 0xFFFFFFFFFFFFFFF5LL && v73 + 10 <= v74)
            {
              char v76 = 0;
              unsigned int v77 = 0;
              uint64_t v78 = 0LL;
              do
              {
                unint64_t v79 = v73 + 1;
                *((void *)this + 1) = v73 + 1;
                char v80 = *(_BYTE *)(v75 + v73);
                v78 |= (unint64_t)(v80 & 0x7F) << v76;
                if ((v80 & 0x80) == 0) {
                  goto LABEL_303;
                }
                v76 += 7;
                unint64_t v73 = v79;
                BOOL v105 = v77++ > 8;
              }

              while (!v105);
LABEL_227:
              uint64_t v78 = 0LL;
              goto LABEL_303;
            }

            char v175 = 0;
            unsigned int v176 = 0;
            uint64_t v78 = 0LL;
            if (v74 <= v73) {
              unint64_t v74 = *((void *)this + 1);
            }
            break;
          case 10:
            *(_DWORD *)(a1 + 152) |= 0x100u;
            unint64_t v81 = *((void *)this + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)this + 2)) {
              goto LABEL_96;
            }
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v81);
            goto LABEL_258;
          default:
            goto LABEL_184;
        }

        while (1)
        {
          if (v74 == v73)
          {
            uint64_t v78 = 0LL;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_303;
          }

          unint64_t v177 = v73 + 1;
          char v178 = *(_BYTE *)(v75 + v73);
          *((void *)this + 1) = v177;
          v78 |= (unint64_t)(v178 & 0x7F) << v175;
          if ((v178 & 0x80) == 0) {
            break;
          }
          v175 += 7;
          unint64_t v73 = v177;
          BOOL v105 = v176++ > 8;
          if (v105) {
            goto LABEL_227;
          }
        }

        if (*((_BYTE *)this + 24)) {
          uint64_t v78 = 0LL;
        }
LABEL_303:
        *(void *)(a1 + 96) = v78;
      }

uint64_t sub_1010D76CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 152);
  if ((v4 & 0x80) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(result + 112), 1u);
    int v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x800) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }

  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 80), 2u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }

uint64_t sub_1010D7934(uint64_t result)
{
  *(void *)double result = &off_101899DE8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1010D794C(PB::Base *a1)
{
}

uint64_t sub_1010D7960(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_101899DE8;
  *(_DWORD *)(result + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(result + 32) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 32) = v3;
    *(void *)(result + _Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_1010D79EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "distanceToNearestRoad", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "searchTimestamp", *(void *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "roadClass", *(_DWORD *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010D7A9C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010D7F14(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  }

uint64_t sub_1010D7FA8(uint64_t result)
{
  *(void *)uint64_t result = &off_101899E20;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1010D7FC0(PB::Base *a1)
{
}

uint64_t sub_1010D7FD4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899E20;
  *(_DWORD *)(result + 40) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(result + 40) = 4;
    *(void *)(result + 24) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 32) = v5;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_1010D807C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "distanceToNearestRoad", *(float *)(a1 + 32));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "epochFirstTimestamp", *(void *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "roadClass", *(_DWORD *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010D814C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_1010D86BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 24), 0x65u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0x67u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1010D876C(uint64_t result)
{
  *(void *)uint64_t result = &off_101899E58;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_1010D8784(PB::Base *a1)
{
}

uint64_t sub_1010D8798(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899E58;
  *(_DWORD *)(result + 96) = 0;
  __int16 v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x1000) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 88);
    __int16 v3 = 4096;
    *(_WORD *)(result + 96) = 4096;
    *(_DWORD *)(result + 8_Block_object_dispose(va, 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 96);
    if ((v2 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 96) & 0x800) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 84);
    v3 |= 0x800u;
    *(_WORD *)(result + 96) = v3;
    *(_DWORD *)(result + 84) = v5;
    __int16 v2 = *(_WORD *)(a2 + 96);
  }

uint64_t sub_1010D8974(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "armedDuration", *(void *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 96);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }

  else if ((*(_WORD *)(a1 + 96) & 0x100) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "armedDurationThreshold", *(float *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }

uint64_t sub_1010D8BA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010D9988(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 96);
  if ((v4 & 0x1000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 88), 0x65u);
    __int16 v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }

  else if ((*(_WORD *)(result + 96) & 0x800) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0x66u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }

uint64_t sub_1010D9B6C(uint64_t result)
{
  *(void *)uint64_t result = &off_101899E90;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010D9B84(PB::Base *a1)
{
}

uint64_t sub_1010D9B98(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899E90;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1010D9BE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "attached", *(_BYTE *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010D9C50(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010D9E34(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1010D9E8C(uint64_t result)
{
  *(void *)uint64_t result = &off_101899EC8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010D9EA4(PB::Base *a1)
{
}

uint64_t sub_1010D9EB8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899EC8;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1010D9F08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "keyPressedDown", *(_BYTE *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010D9F70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010DA154(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1010DA1AC(uint64_t result)
{
  *(void *)uint64_t result = &off_101899F00;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010DA1C4(PB::Base *a1)
{
}

float sub_1010DA1D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899F00;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010DA264(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "accelFilterX", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "accelFilterZ", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "accelFilterY", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 1) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010DA314(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010DA578(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  }

uint64_t sub_1010DA60C(uint64_t result)
{
  *(void *)uint64_t result = &off_101899F38;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010DA624(PB::Base *a1)
{
}

uint64_t sub_1010DA638(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899F38;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1010DA688(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010DA6F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010DA97C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1010DA9D4(uint64_t result)
{
  *(void *)uint64_t result = &off_101899F70;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010DA9EC(PB::Base *a1)
{
}

uint64_t sub_1010DAA00(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_101899F70;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1010DAA50(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "touchActive", *(_BYTE *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010DAAB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010DAC9C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

double sub_1010DACF4(uint64_t a1)
{
  *(void *)a1 = &off_101899FA8;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 184) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 192) = 0;
  return result;
}

void sub_1010DAD28(PB::Base *this)
{
  *(void *)this = &off_101899FA8;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }

  char v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_1010DAD88(PB::Base *a1)
{
}

uint64_t sub_1010DAD9C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899FA8;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  char v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 184) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 192) = 0;
  __int16 v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 0x4000) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 188);
    __int16 v7 = 0x4000;
    *(_WORD *)(a1 + 192) = 0x4000;
    *(_DWORD *)(a1 + 18_Block_object_dispose(va, 8) = v8;
    __int16 v6 = *(_WORD *)(a2 + 192);
    if ((v6 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v7 = 0;
  if ((*(_WORD *)(a2 + 192) & 0x1000) != 0)
  {
LABEL_5:
    uint64_t v9 = *(void *)(a2 + 176);
    v7 |= 0x1000u;
    *(_WORD *)(a1 + 192) = v7;
    *(void *)(a1 + 176) = v9;
    __int16 v6 = *(_WORD *)(a2 + 192);
  }

uint64_t sub_1010DB020(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 80));
    __int16 v5 = *(_WORD *)(a1 + 192);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 88));
  __int16 v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }

BOOL sub_1010DB2BC(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v10 = (void **)(a1 + 56);
    uint64_t v152 = a1 + 72;
    double v11 = (void **)(a1 + 8);
    uint64_t v12 = a1 + 24;
    char v13 = (void **)(a1 + 32);
    uint64_t v14 = a1 + 48;
    while (1)
    {
      uint64_t v15 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0LL;
      while (1)
      {
        unint64_t v19 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v4 = v19;
        BOOL v21 = v17++ > 8;
        if (v21) {
          goto LABEL_20;
        }
      }

LABEL_245:
          unint64_t v4 = *((void *)this + 1);
          unint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 7u:
          *(_WORD *)(a1 + 192) |= 2u;
          unint64_t v80 = *((void *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFF7LL || v80 + 8 > *((void *)this + 2)) {
            goto LABEL_242;
          }
          *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(*(void *)this + v80);
          goto LABEL_244;
        case 8u:
          *(_WORD *)(a1 + 192) |= 0x2000u;
          unint64_t v81 = *((void *)this + 1);
          unint64_t v82 = *((void *)this + 2);
          uint64_t v83 = *(void *)this;
          if (v81 <= 0xFFFFFFFFFFFFFFF5LL && v81 + 10 <= v82)
          {
            char v84 = 0;
            unsigned int v85 = 0;
            uint64_t v86 = 0LL;
            do
            {
              unint64_t v87 = v81 + 1;
              *((void *)this + 1) = v81 + 1;
              char v88 = *(_BYTE *)(v83 + v81);
              v86 |= (unint64_t)(v88 & 0x7F) << v84;
              if ((v88 & 0x80) == 0) {
                goto LABEL_215;
              }
              v84 += 7;
              unint64_t v81 = v87;
              BOOL v21 = v85++ > 8;
            }

            while (!v21);
LABEL_173:
            LODWORD(v86) = 0;
            goto LABEL_215;
          }

          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v86 = 0LL;
          if (v82 <= v81) {
            unint64_t v82 = *((void *)this + 1);
          }
          while (2)
          {
            if (v82 == v81)
            {
              LODWORD(v86) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v119 = v81 + 1;
              char v120 = *(_BYTE *)(v83 + v81);
              *((void *)this + 1) = v119;
              v86 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                unint64_t v81 = v119;
                BOOL v21 = v118++ > 8;
                if (v21) {
                  goto LABEL_173;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v86) = 0;
              }
            }

            break;
          }

uint64_t sub_1010DBF28(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 192);
  if ((v4 & 0x4000) == 0)
  {
    if ((*(_WORD *)(result + 192) & 0x1000) == 0) {
      goto LABEL_3;
    }
LABEL_28:
    double result = PB::Writer::write(this, *(double *)(v3 + 176), 2u);
    if ((*(_WORD *)(v3 + 192) & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 188), 1u);
  __int16 v4 = *(_WORD *)(v3 + 192);
  if ((v4 & 0x1000) != 0) {
    goto LABEL_28;
  }
LABEL_3:
  if ((v4 & 0x40) != 0) {
LABEL_4:
  }
    double result = PB::Writer::write(this, *(double *)(v3 + 128), 3u);
LABEL_5:
  unint64_t v5 = *(double **)(v3 + 32);
  int v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7, 4u);
  }

  double v8 = *(double **)(v3 + 8);
  uint64_t v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    double v10 = *v8++;
    double result = PB::Writer::write(this, v10, 5u);
  }

  double v11 = *(double **)(v3 + 56);
  uint64_t v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    double v13 = *v11++;
    double result = PB::Writer::write(this, v13, 6u);
  }

  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 88), 7u);
    __int16 v14 = *(_WORD *)(v3 + 192);
    if ((v14 & 0x2000) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0) {
        goto LABEL_17;
      }
      goto LABEL_32;
    }
  }

  else if ((*(_WORD *)(v3 + 192) & 0x2000) == 0)
  {
    goto LABEL_16;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 184), 8u);
  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }

uint64_t sub_1010DC15C(uint64_t result)
{
  *(void *)double result = &off_101899FE0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1010DC174(PB::Base *a1)
{
}

float sub_1010DC188(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101899FE0;
  *(_DWORD *)(a1 + 40) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_1010DC268(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "ch0", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "ch1", *(_DWORD *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_1010DC378(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010DCA08(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_1010DCAF0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189A018;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1010DCB08(PB::Base *a1)
{
}

float sub_1010DCB1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189A018;
  *(_DWORD *)(a1 + 40) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_1010DCBC4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "gravityBufferDeltaToCurrentMax", *(float *)(a1 + 32));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "gravityFilterDeltaToHeadUp", *(float *)(a1 + 36));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "timestampGravityBufferFront", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 40) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010DCC94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010DCF30(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1010DCFE0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189A050;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010DCFF8(PB::Base *a1)
{
}

double sub_1010DD00C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189A050;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = 1;
    *(double *)(a1 + _Block_object_dispose(va, 8) = result;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(a1 + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010DD07C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 24));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestampArrival", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010DD10C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_1010DD3D8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  }
  return result;
}

void sub_1010DD450(void ***a1, void **a2)
{
  unint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    free(*v2);
    operator delete(v2);
  }

void *sub_1010DD48C(_BYTE *__dst, void *__src, unint64_t a3)
{
  char v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8LL) {
      sub_10000C818();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000LL;
    *char v5 = v8;
    char v5 = v8;
  }

  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

id sub_1010DD518()
{
  if (qword_1019A0570 != -1) {
    dispatch_once(&qword_1019A0570, &stru_10189AB88);
  }
  return (id)qword_1019A4160;
}

void sub_1010DD558(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.Msl.DefaultsQueue", 0LL);
  unint64_t v2 = (void *)qword_1019A4160;
  qword_1019A4160 = (uint64_t)v1;
}

void sub_1010DD584(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 1048576000LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0x3200015180LL;
  sub_1010DDBC0((void *)(a2 + 16), "/tmp/");
  sub_1010DDBC0((void *)(a2 + 40), "");
  sub_1010DDBC0((void *)(a2 + 64), "msl");
  *(_DWORD *)(a2 + 8_Block_object_dispose(va, 8) = 2;
  *(void *)(a2 + 96) = 300LL;
  id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) allKeys]);
  if ([v12 containsObject:@"FilePrefix"])
  {
    id v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) valueForKey:@"FilePrefix"]);
    std::string::assign((std::string *)(a2 + 40), (const std::string::value_type *)[v4 UTF8String]);
  }

  if ([v12 containsObject:@"FileBasePath"])
  {
    id v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) valueForKey:@"FileBasePath"]);
    std::string::assign((std::string *)(a2 + 16), (const std::string::value_type *)[v5 UTF8String]);
  }

  if ([v12 containsObject:@"FileExtension"])
  {
    id v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) valueForKey:@"FileExtension"]);
    std::string::assign((std::string *)(a2 + 64), (const std::string::value_type *)[v6 UTF8String]);
  }

  if ([v12 containsObject:@"FileTimeInterval"])
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) valueForKey:@"FileTimeInterval"]);
    *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = [v7 unsignedIntValue];
  }

  if ([v12 containsObject:@"FilesToKeep"])
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) valueForKey:@"FilesToKeep"]);
    *(_DWORD *)(a2 + 12) = [v8 unsignedIntValue];
  }

  if ([v12 containsObject:@"FileSize"])
  {
    char v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) valueForKey:@"FileSize"]);
    *(void *)a2 = [v9 unsignedIntValue];
  }

  if ([v12 containsObject:@"ProtectionClass"])
  {
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) valueForKey:@"ProtectionClass"]);
    *(_DWORD *)(a2 + 8_Block_object_dispose(va, 8) = [v10 unsignedIntValue];
  }

  if ([v12 containsObject:@"FlushTimeout"])
  {
    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) valueForKey:@"FlushTimeout"]);
    *(void *)(a2 + 96) = [v11 longLongValue];
  }
}

void sub_1010DD814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  sub_1008EDE6C(v10);
  _Unwind_Resume(a1);
}

void sub_1010DD8A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 copy];
  [*(id *)(a1 + 16) setObject:v6 forKeyedSubscript:v5];

  if (!*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 1;
    dispatch_time_t v7 = dispatch_time(0LL, 10000000000LL);
    id v8 = sub_1010DD518();
    char v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1010DD998;
    block[3] = &unk_10181D3D0;
    block[4] = a1;
    dispatch_after(v7, v9, block);
  }
}

void sub_1010DD97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1010DD998(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = (std::mutex *)(*(void *)(v1 + 8) + 24LL);
  std::mutex::lock(v2);
  uint64_t v3 = *(void *)(v1 + 8);
  id v4 = operator new(0x98uLL);
  sub_1010DD584(v1, (uint64_t)v5);
  sub_10111CC08(v4, v5);
  sub_100B4FEB8((uint64_t *)(v3 + 16), (uint64_t)v4);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  *(_BYTE *)uint64_t v1 = 0;
  std::mutex::unlock(v2);
}

void sub_1010DDA44(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1010DDB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1010DDBC0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000C818();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    id v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    id v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_1010DDC70(id a1)
{
  os_log_t v1 = os_log_create("com.apple.MotionSensorLogging", "MSL");
  unint64_t v2 = (void *)qword_1019A0578;
  qword_1019A0578 = (uint64_t)v1;
}

uint64_t sub_1010DDCA0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189ABD8;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1010DDCB8(PB::Base *a1)
{
}

float sub_1010DDCCC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189ABD8;
  *(_DWORD *)(a1 + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    float result = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 12) = 1;
    *(float *)(a1 + _Block_object_dispose(va, 8) = result;
  }

  return result;
}

uint64_t sub_1010DDCF8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "alsTrustedLux", *(float *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010DDD44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010DDEDC(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::write(this, *(float *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_1010DDEF8(uint64_t result)
{
  *(void *)uint64_t result = &off_10189AC10;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010DDF10(PB::Base *a1)
{
}

float sub_1010DDF24(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189AC10;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(float *)(a1 + 16) = result;
  }

  return result;
}

uint64_t sub_1010DDF74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "lux", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010DDFDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010DE268(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  }
  return result;
}

void *sub_1010DE2C0(void *result)
{
  const char *result = &off_10189AC48;
  return result;
}

void sub_1010DE2D4(PB::Base *a1)
{
}

uint64_t sub_1010DE2E8(int a1, PB::TextFormatter *this, char *a3)
{
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010DE314(int a1, PB::Reader *this)
{
  while (1)
  {
    unint64_t v3 = *((void *)this + 1);
    unint64_t v4 = *((void *)this + 2);
    int v5 = *((unsigned __int8 *)this + 24);
    if (v3 >= v4 || v5 != 0) {
      return v5 == 0;
    }
    uint64_t v7 = *(void *)this;
    char v8 = 0;
    unsigned int v9 = 0;
    BOOL v10 = v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v4;
    if (v10)
    {
      unint64_t v14 = 0LL;
      if (v3 > v4) {
        unint64_t v4 = *((void *)this + 1);
      }
      while (v4 != v3)
      {
        unint64_t v11 = v3 + 1;
        char v12 = *(_BYTE *)(v7 + v3);
        *((void *)this + 1) = v11;
        v14 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          goto LABEL_22;
        }
        v8 += 7;
        unint64_t v3 = v11;
        if (v9++ >= 9)
        {
LABEL_21:
          unint64_t v14 = 0LL;
          goto LABEL_22;
        }
      }

      int v5 = 1;
      *((_BYTE *)this + 24) = 1;
      return v5 == 0;
    }

    unint64_t v14 = 0LL;
    while (1)
    {
      unint64_t v15 = v3 + 1;
      *((void *)this + 1) = v3 + 1;
      char v16 = *(_BYTE *)(v7 + v3);
      v14 |= (unint64_t)(v16 & 0x7F) << v8;
      if ((v16 & 0x80) == 0) {
        break;
      }
      v8 += 7;
      unint64_t v3 = v15;
      BOOL v10 = v9++ > 8;
      if (v10) {
        goto LABEL_21;
      }
    }

void *sub_1010DE42C(void *result)
{
  const char *result = &off_10189AC80;
  result[1] = 0LL;
  return result;
}

void sub_1010DE43C(PB::Base *this)
{
  *(void *)this = &off_10189AC80;
  unint64_t v4 = (void **)*((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  unint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  PB::Base::~Base(this);
}

void sub_1010DE47C(PB::Base *a1)
{
}

void *sub_1010DE490(void *a1, uint64_t a2)
{
  *a1 = &off_10189AC80;
  a1[1] = 0LL;
  unint64_t v3 = (void ***)(a1 + 1);
  unint64_t v4 = *(__int128 **)(a2 + 8);
  if (v4)
  {
    int v5 = (void **)operator new(0x18uLL);
    id v6 = v5;
    if (*((char *)v4 + 23) < 0)
    {
      sub_1010DD48C(v5, *(void **)v4, *((void *)v4 + 1));
      char v8 = *v3;
      void *v3 = v6;
      if (v8) {
        sub_10058A4FC((int)v3, v8);
      }
    }

    else
    {
      __int128 v7 = *v4;
      v5[2] = (void *)*((void *)v4 + 2);
      *(_OWORD *)int v5 = v7;
      void *v3 = v5;
    }
  }

  return a1;
}

uint64_t sub_1010DE528(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format(this, "wakeReason");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010DE570(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    __int128 v7 = (void ***)(a1 + 8);
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010DE700(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2) {
    return PB::Writer::write(a2, v2, 1LL);
  }
  return result;
}

uint64_t sub_1010DE71C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189ACB8;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_1010DE738(PB::Base *this)
{
  *(void *)this = &off_10189ACB8;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1010DE778(PB::Base *a1)
{
}

uint64_t sub_1010DE78C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  int v4 = (char *)(a1 + 8);
  *(void *)a1 = &off_10189ACB8;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  char v5 = *(_BYTE *)(a2 + 56);
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    char v6 = 1;
    *(_BYTE *)(a1 + 56) = 1;
    *(void *)(a1 + 32) = v7;
    char v5 = *(_BYTE *)(a2 + 56);
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v6 = 0;
  if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 44);
    v6 |= 4u;
    *(_BYTE *)(a1 + 56) = v6;
    *(_DWORD *)(a1 + 44) = v8;
    char v5 = *(_BYTE *)(a2 + 56);
  }

uint64_t sub_1010DE87C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(double **)(a1 + 8);
  char v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }

  char v8 = *(_BYTE *)(a1 + 56);
  if ((v8 & 2) != 0)
  {
    PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 40));
    char v8 = *(_BYTE *)(a1 + 56);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    goto LABEL_5;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  char v8 = *(_BYTE *)(a1 + 56);
  if ((v8 & 4) == 0)
  {
LABEL_6:
    if ((v8 & 8) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 48));
    if ((*(_BYTE *)(a1 + 56) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_8;
  }

BOOL sub_1010DE988(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010DEEE8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 56);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_13:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 3u);
      if ((*(_BYTE *)(v3 + 56) & 0x10) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 2u);
  char v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 8) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v4 & 0x10) != 0) {
LABEL_5:
  }
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 4u);
LABEL_6:
  unint64_t v5 = *(double **)(v3 + 8);
  int v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 5u);
  }

  if ((*(_BYTE *)(v3 + 56) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 6u);
  }
  return result;
}

void *sub_1010DEFC4(void *result)
{
  const char *result = &off_10189ACF0;
  result[1] = 0LL;
  return result;
}

void sub_1010DEFD8(PB::Base *a1)
{
}

uint64_t sub_1010DEFEC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189ACF0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v2;
  }

  return result;
}

uint64_t sub_1010DF014(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010DF060(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010DF294(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_1010DF2B4(uint64_t result)
{
  *(void *)uint64_t result = &off_10189AD28;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1010DF2CC(PB::Base *a1)
{
}

uint64_t sub_1010DF2E0(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189AD28;
  *(_DWORD *)(result + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 20) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_1010DF388(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010DF458(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010DF7A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

void *sub_1010DF858(void *result)
{
  const char *result = off_10189AD60;
  result[1] = 0LL;
  return result;
}

void sub_1010DF868(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189AD60;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010DF8A8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189AD60;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1010DF8EC(void *a1, uint64_t a2)
{
  *a1 = off_10189AD60;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x28uLL);
    a1[1] = sub_1010DF2E0((uint64_t)v4, v3);
  }

  return a1;
}

uint64_t sub_1010DF93C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010DF98C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010DFB50(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_1010DFB6C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189AD98;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1010DFB84(PB::Base *a1)
{
}

uint64_t sub_1010DFB98(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189AD98;
  *(_DWORD *)(result + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 20) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_1010DFC40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "batch", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010DFD10(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010E0060(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

void *sub_1010E0110(void *result)
{
  const char *result = off_10189ADD0;
  result[1] = 0LL;
  return result;
}

void sub_1010E0120(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189ADD0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010E0160(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189ADD0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1010E01A4(void *a1, uint64_t a2)
{
  *a1 = off_10189ADD0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x28uLL);
    a1[1] = sub_1010DF2E0((uint64_t)v4, v3);
  }

  return a1;
}

uint64_t sub_1010E01F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E0244(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010E0408(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_1010E0424(uint64_t result)
{
  *(void *)uint64_t result = &off_10189AE08;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010E043C(PB::Base *a1)
{
}

float sub_1010E0450(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189AE08;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010E04DC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E058C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010E07F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  }

void *sub_1010E0884(void *result)
{
  const char *result = off_10189AE40;
  result[1] = 0LL;
  return result;
}

void sub_1010E0894(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189AE40;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010E08D4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189AE40;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1010E0918(void *a1, uint64_t a2)
{
  *a1 = off_10189AE40;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x28uLL);
    a1[1] = sub_1010DF2E0((uint64_t)v4, v3);
  }

  return a1;
}

uint64_t sub_1010E0968(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E09B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010E0B7C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

_DWORD *sub_1010E0B98(_DWORD *result)
{
  if (!*((void *)result + 1))
  {
    os_log_t v1 = result;
    uint64_t result = operator new(0x28uLL);
    *(void *)uint64_t result = &off_10189AD28;
    result[8] = 0;
    *((void *)v1 + 1) = result;
  }

  return result;
}

double sub_1010E0BD8(uint64_t a1)
{
  *(void *)a1 = &off_10189AE78;
  *(_DWORD *)(a1 + 116) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

void sub_1010E0C04(PB::Base *this)
{
  *(void *)this = &off_10189AE78;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }

  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_1010E0C64(PB::Base *a1)
{
}

uint64_t sub_1010E0C78(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189AE78;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  char v5 = *(_BYTE *)(a2 + 116);
  if ((v5 & 2) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 88);
    *(_BYTE *)(a1 + 116) |= 2u;
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v8;
    char v5 = *(_BYTE *)(a2 + 116);
    if ((v5 & 1) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a2 + 116) & 1) == 0)
  {
    goto LABEL_5;
  }

  uint64_t v9 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 116) |= 1u;
  *(void *)(a1 + 80) = v9;
  char v5 = *(_BYTE *)(a2 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    char v11 = *(_BYTE *)(a2 + 112);
    *(_BYTE *)(a1 + 116) |= 0x10u;
    *(_BYTE *)(a1 + 112) = v11;
    if ((*(_BYTE *)(a2 + 116) & 4) == 0) {
      return a1;
    }
    goto LABEL_8;
  }

uint64_t sub_1010E0DBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "B", v7);
  }

  uint64_t v8 = *(float **)(a1 + 32);
  uint64_t v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "N", v10);
  }

  char v11 = *(float **)(a1 + 56);
  unint64_t v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "T", v13);
  }

  char v14 = *(_BYTE *)(a1 + 116);
  if ((v14 & 1) != 0)
  {
    PB::TextFormatter::format(this, "curvature", *(double *)(a1 + 80));
    char v14 = *(_BYTE *)(a1 + 116);
    if ((v14 & 0x10) == 0)
    {
LABEL_9:
      if ((v14 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_16;
    }
  }

  else if ((*(_BYTE *)(a1 + 116) & 0x10) == 0)
  {
    goto LABEL_9;
  }

  PB::TextFormatter::format(this, "isValid", *(_BYTE *)(a1 + 112));
  char v14 = *(_BYTE *)(a1 + 116);
  if ((v14 & 2) == 0)
  {
LABEL_10:
    if ((v14 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_17:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 96));
    if ((*(_BYTE *)(a1 + 116) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

BOOL sub_1010E0F20(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 8);
    char v11 = (void **)(a1 + 32);
    uint64_t v111 = a1 + 48;
    uint64_t v112 = a1 + 24;
    unint64_t v12 = (void **)(a1 + 56);
    uint64_t v110 = a1 + 72;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0LL;
      while (1)
      {
        unint64_t v17 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v18 = *(_BYTE *)(v13 + v4);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v4 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010E1748(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(float **)(result + 56);
  unint64_t v5 = *(float **)(result + 64);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 1u);
  }

  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 2u);
  }

  float v10 = *(float **)(v3 + 8);
  char v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12, 3u);
  }

  char v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 88), 4u);
    char v13 = *(_BYTE *)(v3 + 116);
    if ((v13 & 1) == 0)
    {
LABEL_12:
      if ((v13 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_18;
    }
  }

  else if ((*(_BYTE *)(v3 + 116) & 1) == 0)
  {
    goto LABEL_12;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 80), 5u);
  char v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 8) == 0)
  {
LABEL_13:
    if ((v13 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }

uint64_t sub_1010E1864(uint64_t result)
{
  *(void *)double result = &off_10189AEB0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1010E187C(PB::Base *a1)
{
}

double sub_1010E1890(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189AEB0;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + _Block_object_dispose(va, 8) = result;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 32) = v3;
    *(double *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_1010E1900(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "lowerBound", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 32) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "calibrated", *(double *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "upperBound", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E1990(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010E1BA8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(double *)(v3 + 24), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 32) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 32) & 4) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  }
  return result;
}

uint64_t sub_1010E1C20(uint64_t result)
{
  *(void *)uint64_t result = off_10189AEE8;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1010E1C34(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189AEE8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010E1C74(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189AEE8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1010E1CB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189AEE8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    char v5 = operator new(0x28uLL);
    *(void *)(a1 + _Block_object_dispose(va, 8) = sub_1010DF2E0((uint64_t)v5, v4);
  }

  char v6 = *(_BYTE *)(a2 + 32);
  if ((v6 & 2) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 24);
    char v7 = 2;
    *(_BYTE *)(a1 + 32) = 2;
    *(_DWORD *)(a1 + 24) = v8;
    char v6 = *(_BYTE *)(a2 + 32);
    if ((v6 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  char v7 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_7:
    int v9 = *(_DWORD *)(a2 + 28);
    v7 |= 4u;
    *(_BYTE *)(a1 + 32) = v7;
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v9;
    char v6 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_1010E1D6C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "accel");
  }
  char v6 = *(_BYTE *)(a1 + 32);
  if ((v6 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 32) & 1) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 32) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 24));
  char v6 = *(_BYTE *)(a1 + 32);
  if ((v6 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_5:
  if ((v6 & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E1E1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010E22B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  char v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
    char v5 = *(_BYTE *)(v3 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 1) == 0) {
        return result;
      }
      return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 4u);
    }
  }

  else if ((*(_BYTE *)(v3 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 4u);
  }
  return result;
}

void *sub_1010E2340(void *result)
{
  const char *result = off_10189AF20;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_1010E2354(uint64_t a1)
{
  *(void *)a1 = off_10189AF20;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;
  if (v3) {
    sub_10058A4FC(a1 + 16, v3);
  }
  sub_1010DD450((void ***)(a1 + 8), 0LL);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1010E23BC(uint64_t a1)
{
}

void *sub_1010E23D0(void *a1, void *a2)
{
  a1[1] = 0LL;
  int v4 = (void ***)(a1 + 1);
  *a1 = off_10189AF20;
  a1[2] = 0LL;
  char v5 = (void ***)(a1 + 2);
  a1[3] = 0LL;
  uint64_t v6 = a2[3];
  if (v6)
  {
    char v7 = operator new(0x28uLL);
    uint64_t v8 = sub_1010E379C((uint64_t)v7, v6);
    uint64_t v9 = a1[3];
    a1[3] = v8;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
  }

  unsigned int v10 = (const Data *)a2[1];
  if (v10)
  {
    unint64_t v11 = (PB::Data *)operator new(0x10uLL);
    PB::Data::Data(v11, v10);
    sub_1010DD450(v4, (void **)v11);
  }

  unint64_t v12 = (__int128 *)a2[2];
  if (v12)
  {
    char v13 = (void **)operator new(0x18uLL);
    BOOL v14 = v13;
    if (*((char *)v12 + 23) < 0)
    {
      sub_1010DD48C(v13, *(void **)v12, *((void *)v12 + 1));
    }

    else
    {
      __int128 v15 = *v12;
      v13[2] = (void *)*((void *)v12 + 2);
      *(_OWORD *)char v13 = v15;
    }

    unsigned int v16 = *v5;
    *char v5 = v14;
    if (v16) {
      sub_10058A4FC((int)v5, v16);
    }
  }

  return a1;
}

uint64_t sub_1010E24DC(void *a1, PB::TextFormatter *this, char *a3)
{
  char v5 = (const Data *)a1[1];
  if (v5) {
    PB::TextFormatter::format(this, "arsc", v5);
  }
  if (a1[2]) {
    PB::TextFormatter::format(this, "arscString");
  }
  uint64_t v6 = a1[3];
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "config");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E255C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void ***)(a1 + 16);
    uint64_t v9 = (void ***)(a1 + 8);
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0LL;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010E27B8(uint64_t result)
{
  *(void *)uint64_t result = &off_10189AFC8;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1010E27D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 24);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  char v5 = *(const PB::Data **)(v3 + 8);
  if (v5) {
    uint64_t result = PB::Writer::write(this, v5, 2u);
  }
  uint64_t v6 = *(void *)(v3 + 16);
  if (v6) {
    return PB::Writer::write(this, v6, 3LL);
  }
  return result;
}

void *sub_1010E2834(void *result)
{
  if (!result[3])
  {
    os_log_t v1 = result;
    uint64_t result = operator new(0x28uLL);
    const char *result = &off_10189AFC8;
    result[1] = 0LL;
    result[2] = 0LL;
    result[3] = 0LL;
    *((_DWORD *)result + _Block_object_dispose(va, 8) = 0;
    v1[3] = result;
  }

  return result;
}

uint64_t sub_1010E2878(uint64_t result)
{
  *(void *)uint64_t result = &off_10189AF58;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1010E2890(PB::Base *a1)
{
}

uint64_t sub_1010E28A4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189AF58;
  *(_DWORD *)(result + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(result + 32) = v3;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_1010E2968(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "asleep", *(_BYTE *)(a1 + 28));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "averageConfidence", *(_DWORD *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_1010E2A58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010E2F58(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 28), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_1010E3024(uint64_t result)
{
  *(void *)uint64_t result = &off_10189AF90;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010E303C(PB::Base *a1)
{
}

uint64_t sub_1010E3050(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189AF90;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(result + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010E30DC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "activity", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "confidenceLevel", *(_DWORD *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E318C(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(_BYTE *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010E36A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  }

void sub_1010E3734(PB::Base *this)
{
  *(void *)this = &off_10189AFC8;
  char v4 = (void **)*((void *)this + 2);
  unint64_t v2 = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  char v5 = (void **)*((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v5) {
    sub_10058A4FC((_DWORD)this + 8, v5);
  }
  PB::Base::~Base(this);
}

void sub_1010E3788(PB::Base *a1)
{
}

uint64_t sub_1010E379C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189AFC8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  char v4 = (void ***)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  char v5 = (void ***)(a1 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 28);
    *(_BYTE *)(a1 + 32) = 2;
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v6;
  }

  int v7 = *(__int128 **)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = (void **)operator new(0x18uLL);
    char v9 = v8;
    if (*((char *)v7 + 23) < 0)
    {
      sub_1010DD48C(v8, *(void **)v7, *((void *)v7 + 1));
      unint64_t v11 = *v5;
      *char v5 = v9;
      if (v11) {
        sub_10058A4FC((int)v5, v11);
      }
    }

    else
    {
      __int128 v10 = *v7;
      v8[2] = (void *)*((void *)v7 + 2);
      *(_OWORD *)uint64_t v8 = v10;
      *char v5 = v8;
    }
  }

  unint64_t v12 = *(__int128 **)(a2 + 8);
  if (v12)
  {
    char v13 = (void **)operator new(0x18uLL);
    BOOL v14 = v13;
    if (*((char *)v12 + 23) < 0)
    {
      sub_1010DD48C(v13, *(void **)v12, *((void *)v12 + 1));
    }

    else
    {
      __int128 v15 = *v12;
      v13[2] = (void *)*((void *)v12 + 2);
      *(_OWORD *)char v13 = v15;
    }

    unsigned int v16 = *v4;
    const PB::Base *v4 = v14;
    if (v16) {
      sub_10058A4FC((int)v4, v16);
    }
  }

  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    int v17 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) |= 1u;
    *(_DWORD *)(a1 + 24) = v17;
  }

  return a1;
}

uint64_t sub_1010E38D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format(this, "deviceConfiguration");
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0) {
    PB::TextFormatter::format(this, "hardwareModel", *(_DWORD *)(a1 + 24));
  }
  if (*(void *)(a1 + 16)) {
    PB::TextFormatter::format(this, "serialNumber");
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0) {
    PB::TextFormatter::format(this, "side", *(_DWORD *)(a1 + 28));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E3968(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void ***)(a1 + 8);
    char v9 = (void ***)(a1 + 16);
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0LL;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010E3D3C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 32) & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 28), 1u);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4) {
    uint64_t result = PB::Writer::write(this, v4, 2LL);
  }
  uint64_t v5 = *(void *)(v3 + 8);
  if (v5) {
    uint64_t result = PB::Writer::write(this, v5, 3LL);
  }
  if ((*(_BYTE *)(v3 + 32) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  }
  return result;
}

uint64_t sub_1010E3DBC(uint64_t result)
{
  *(void *)uint64_t result = off_10189B000;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1010E3DD0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B000;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010E3E10(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B000;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1010E3E54(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189B000;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = operator new(0x80uLL);
    sub_10110A480((uint64_t)v5, v4);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  }

  if ((*(_BYTE *)(a2 + 24) & 1) == 0)
  {
    char v7 = 2;
    if ((*(_BYTE *)(a2 + 24) & 2) == 0) {
      return a1;
    }
    goto LABEL_7;
  }

  int v8 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 16) = v8;
  char v7 = 3;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_7:
    int v9 = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 20) = v9;
  }

  return a1;
}

uint64_t sub_1010E3EF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "dm");
  }
  char v6 = *(_BYTE *)(a1 + 24);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 16));
    char v6 = *(_BYTE *)(a1 + 24);
  }

  if ((v6 & 2) != 0) {
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 20));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E3F7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010E4324(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C0D8;
  *(_DWORD *)(result + 124) = 0;
  return result;
}

uint64_t sub_1010E4338(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  char v5 = *(_BYTE *)(v3 + 24);
  if ((v5 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
    char v5 = *(_BYTE *)(v3 + 24);
  }

  if ((v5 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  }
  return result;
}

double sub_1010E43A4(uint64_t a1)
{
  *(void *)a1 = &off_10189B038;
  *(_DWORD *)(a1 + 44) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_1010E43C4(PB::Base *this)
{
  *(void *)this = &off_10189B038;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1010E441C(PB::Base *a1)
{
}

uint64_t sub_1010E4430(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B038;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    char v6 = operator new(0x28uLL);
    uint64_t v7 = sub_1010E379C((uint64_t)v6, v5);
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v7;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    char v9 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a1 + 44) |= 1u;
    *(_BYTE *)(a1 + 40) = v9;
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_1010E44F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "config");
  }
  char v6 = *(float **)(a1 + 8);
  uint64_t v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "headToHeadsetTransformation", v8);
  }

  if ((*(_BYTE *)(a1 + 44) & 1) != 0) {
    PB::TextFormatter::format(this, "isH2HValid", *(_BYTE *)(a1 + 40));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010E4598(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v21 = v4 + 1;
          char v22 = *(_BYTE *)(v12 + v4);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v4 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010E49CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base **)(result + 32);
  if (v4) {
    double result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if ((*(_BYTE *)(v3 + 44) & 1) != 0) {
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 40), 2u);
  }
  int v6 = *(float **)(v3 + 8);
  unint64_t v5 = *(float **)(v3 + 16);
  while (v6 != v5)
  {
    float v7 = *v6++;
    double result = PB::Writer::write(this, v7, 3u);
  }

  return result;
}

void *sub_1010E4A40(void *result)
{
  if (!result[4])
  {
    os_log_t v1 = result;
    double result = operator new(0x28uLL);
    const char *result = &off_10189AFC8;
    result[1] = 0LL;
    result[2] = 0LL;
    result[3] = 0LL;
    *((_DWORD *)result + _Block_object_dispose(va, 8) = 0;
    v1[4] = result;
  }

  return result;
}

uint64_t sub_1010E4A84(uint64_t result)
{
  *(void *)double result = off_10189B070;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_1010E4A98(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B070;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010E4AD8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B070;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1010E4B1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189B070;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 36) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    unint64_t v5 = operator new(0x30uLL);
    uint64_t v6 = sub_101082310((uint64_t)v5, v4);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  char v8 = *(_BYTE *)(a2 + 36);
  if ((v8 & 2) != 0)
  {
    int v11 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 36) |= 2u;
    *(_DWORD *)(a1 + 24) = v11;
    char v8 = *(_BYTE *)(a2 + 36);
    if ((v8 & 4) == 0)
    {
LABEL_6:
      if ((v8 & 8) == 0) {
        goto LABEL_7;
      }
LABEL_12:
      int v13 = *(_DWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 36) |= 8u;
      *(_DWORD *)(a1 + 32) = v13;
      if ((*(_BYTE *)(a2 + 36) & 1) == 0) {
        return a1;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(a2 + 36) & 4) == 0)
  {
    goto LABEL_6;
  }

  int v12 = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) |= 4u;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v12;
  char v8 = *(_BYTE *)(a2 + 36);
  if ((v8 & 8) != 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((v8 & 1) != 0)
  {
LABEL_8:
    uint64_t v9 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 36) |= 1u;
    *(void *)(a1 + 16) = v9;
  }

  return a1;
}

uint64_t sub_1010E4C14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "gyro");
  }
  char v6 = *(_BYTE *)(a1 + 36);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 24));
    char v6 = *(_BYTE *)(a1 + 36);
    if ((v6 & 1) == 0)
    {
LABEL_5:
      if ((v6 & 4) == 0) {
        goto LABEL_6;
      }
LABEL_11:
      PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 28));
      if ((*(_BYTE *)(a1 + 36) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_7;
    }
  }

  else if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    goto LABEL_5;
  }

  PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 16));
  char v6 = *(_BYTE *)(a1 + 36);
  if ((v6 & 4) != 0) {
    goto LABEL_11;
  }
LABEL_6:
  if ((v6 & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "temp", *(float *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E4CE4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010E51BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  char v5 = *(_BYTE *)(v3 + 36);
  if ((v5 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
    char v5 = *(_BYTE *)(v3 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(v3 + 36) & 4) == 0)
  {
    goto LABEL_5;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 3u);
  char v5 = *(_BYTE *)(v3 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 5u);
  }

void *sub_1010E5264(void *result)
{
  if (!result[1])
  {
    os_log_t v1 = result;
    unint64_t v2 = operator new(0x30uLL);
    sub_101082AAC((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_1010E52B8(void *result)
{
  const char *result = &off_10189B0A8;
  result[1] = 0LL;
  return result;
}

void sub_1010E52C8(PB::Base *this)
{
  *(void *)this = &off_10189B0A8;
  int v4 = (void **)*((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  PB::Base::~Base(this);
}

void sub_1010E5308(PB::Base *a1)
{
}

void *sub_1010E531C(void *a1, uint64_t a2)
{
  *a1 = &off_10189B0A8;
  a1[1] = 0LL;
  uint64_t v3 = (void ***)(a1 + 1);
  int v4 = *(__int128 **)(a2 + 8);
  if (v4)
  {
    char v5 = (void **)operator new(0x18uLL);
    char v6 = v5;
    if (*((char *)v4 + 23) < 0)
    {
      sub_1010DD48C(v5, *(void **)v4, *((void *)v4 + 1));
      uint64_t v8 = *v3;
      void *v3 = v6;
      if (v8) {
        sub_10058A4FC((int)v3, v8);
      }
    }

    else
    {
      __int128 v7 = *v4;
      v5[2] = (void *)*((void *)v4 + 2);
      *(_OWORD *)char v5 = v7;
      void *v3 = v5;
    }
  }

  return a1;
}

uint64_t sub_1010E53B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format(this, "gyroCachedBias");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E53FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    __int128 v7 = (void ***)(a1 + 8);
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010E558C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2) {
    return PB::Writer::write(a2, v2, 1LL);
  }
  return result;
}

void *sub_1010E55A8(void *result)
{
  const char *result = off_10189B0E0;
  result[1] = 0LL;
  return result;
}

void sub_1010E55B8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B0E0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010E55F8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B0E0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1010E563C(void *a1, uint64_t a2)
{
  *a1 = off_10189B0E0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x28uLL);
    uint64_t v5 = sub_1010E379C((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_1010E56A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "config");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E56F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010E58BC(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_1010E58D8(void *result)
{
  if (!result[1])
  {
    os_log_t v1 = result;
    uint64_t result = operator new(0x28uLL);
    const char *result = &off_10189AFC8;
    result[1] = 0LL;
    result[2] = 0LL;
    result[3] = 0LL;
    *((_DWORD *)result + _Block_object_dispose(va, 8) = 0;
    v1[1] = result;
  }

  return result;
}

void *sub_1010E591C(void *result)
{
  const char *result = &off_10189B118;
  result[1] = 0LL;
  return result;
}

void sub_1010E592C(PB::Base *this)
{
  *(void *)this = &off_10189B118;
  int v4 = (void **)*((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  unint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  PB::Base::~Base(this);
}

void sub_1010E596C(PB::Base *a1)
{
}

void *sub_1010E5980(void *a1, uint64_t a2)
{
  *a1 = &off_10189B118;
  a1[1] = 0LL;
  unint64_t v3 = (void ***)(a1 + 1);
  int v4 = *(__int128 **)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = (void **)operator new(0x18uLL);
    uint64_t v6 = v5;
    if (*((char *)v4 + 23) < 0)
    {
      sub_1010DD48C(v5, *(void **)v4, *((void *)v4 + 1));
      uint64_t v8 = *v3;
      void *v3 = v6;
      if (v8) {
        sub_10058A4FC((int)v3, v8);
      }
    }

    else
    {
      __int128 v7 = *v4;
      v5[2] = (void *)*((void *)v4 + 2);
      *(_OWORD *)uint64_t v5 = v7;
      void *v3 = v5;
    }
  }

  return a1;
}

uint64_t sub_1010E5A18(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format(this, "gyttString");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E5A60(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    __int128 v7 = (void ***)(a1 + 8);
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010E5BF0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2) {
    return PB::Writer::write(a2, v2, 1LL);
  }
  return result;
}

uint64_t sub_1010E5C0C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B150;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_1010E5C24(PB::Base *a1)
{
}

uint64_t sub_1010E5C38(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189B150;
  *(_DWORD *)(result + 36) = 0;
  char v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(result + 36) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 28);
    v3 |= 8u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 36);
  }

uint64_t sub_1010E5CE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 36) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "heartRate", *(_DWORD *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 36) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010E5DB0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010E61B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 36);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 36) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1010E6264(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B188;
  *(_DWORD *)(result + _Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_1010E6280(PB::Base *a1)
{
}

float sub_1010E6294(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B188;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    int v3 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = 1;
    *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 12);
    *(_BYTE *)(a1 + 16) = v2;
    *(float *)(a1 + 12) = result;
  }

  return result;
}

uint64_t sub_1010E62E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 16);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(float *)(a1 + 12));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E6350(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010E65DC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 16);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 12), 2u);
  }
  return result;
}

uint64_t sub_1010E6634(uint64_t result)
{
  *(void *)uint64_t result = off_10189B1C0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1010E6648(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B1C0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010E6688(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B1C0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1010E66CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189B1C0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    char v5 = operator new(0x28uLL);
    uint64_t v6 = sub_101174B14((uint64_t)v5, v4);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  char v8 = *(_BYTE *)(a2 + 32);
  if ((v8 & 2) == 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0) {
      goto LABEL_6;
    }
LABEL_10:
    int v12 = *(_DWORD *)(a2 + 28);
    *(_BYTE *)(a1 + 32) |= 4u;
    *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = v12;
    if ((*(_BYTE *)(a2 + 32) & 1) == 0) {
      return a1;
    }
    goto LABEL_7;
  }

  int v11 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) |= 2u;
  *(_DWORD *)(a1 + 24) = v11;
  char v8 = *(_BYTE *)(a2 + 32);
  if ((v8 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((v8 & 1) != 0)
  {
LABEL_7:
    uint64_t v9 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 32) |= 1u;
    *(void *)(a1 + 16) = v9;
  }

  return a1;
}

uint64_t sub_1010E67A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 32) & 2) != 0) {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 24));
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))( v5,  this,  "magnetometer");
  }
  char v6 = *(_BYTE *)(a1 + 32);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 16));
    char v6 = *(_BYTE *)(a1 + 32);
  }

  if ((v6 & 4) != 0) {
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 28));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E6848(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010E6CD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  char v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
    char v5 = *(_BYTE *)(v3 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 1) == 0) {
        return result;
      }
      return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 4u);
    }
  }

  else if ((*(_BYTE *)(v3 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 4u);
  }
  return result;
}

void *sub_1010E6D60(void *result)
{
  if (!result[1])
  {
    os_log_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_101174A28((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_1010E6DB4(void *result)
{
  const char *result = off_10189B1F8;
  result[1] = 0LL;
  return result;
}

void sub_1010E6DC4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B1F8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010E6E04(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B1F8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1010E6E48(void *a1, uint64_t a2)
{
  *a1 = off_10189B1F8;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x28uLL);
    uint64_t v5 = sub_1010E379C((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_1010E6EB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "config");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010E6F00(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010E70C8(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

double sub_1010E70E4(uint64_t a1)
{
  *(void *)a1 = &off_10189B230;
  *(_DWORD *)(a1 + 224) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return result;
}

void sub_1010E712C(PB::Base *this)
{
  *(void *)this = &off_10189B230;
  unint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }

  unint64_t v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }

  int v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }

  uint64_t v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }

  uint64_t v6 = (void *)*((void *)this + 10);
  if (v6)
  {
    *((void *)this + 11) = v6;
    operator delete(v6);
  }

  uint64_t v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v7;
    operator delete(v7);
  }

  uint64_t v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 5) = v8;
    operator delete(v8);
  }

  char v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    *((void *)this + 2) = v9;
    operator delete(v9);
  }

  PB::Base::~Base(this);
}

void sub_1010E71DC(PB::Base *a1)
{
}

uint64_t sub_1010E71F0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B230;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  char v5 = *(_BYTE *)(a2 + 224);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 208);
    char v6 = 2;
    *(_BYTE *)(a1 + 224) = 2;
    *(void *)(a1 + 20_Block_object_dispose(va, 8) = v7;
    char v5 = *(_BYTE *)(a2 + 224);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v6 = 0;
  if ((*(_BYTE *)(a2 + 224) & 1) != 0)
  {
LABEL_5:
    uint64_t v8 = *(void *)(a2 + 200);
    v6 |= 1u;
    *(_BYTE *)(a1 + 224) = v6;
    *(void *)(a1 + 200) = v8;
    char v5 = *(_BYTE *)(a2 + 224);
  }

uint64_t sub_1010E7394(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(unsigned int **)(a1 + 8);
  char v6 = *(unsigned int **)(a1 + 16);
  while (v5 != v6)
  {
    unsigned int v7 = *v5++;
    PB::TextFormatter::format(this, "dark0", v7);
  }

  uint64_t v8 = *(unsigned int **)(a1 + 32);
  int v9 = *(unsigned int **)(a1 + 40);
  while (v8 != v9)
  {
    unsigned int v10 = *v8++;
    PB::TextFormatter::format(this, "dark1", v10);
  }

  int v11 = *(unsigned int **)(a1 + 56);
  unint64_t v12 = *(unsigned int **)(a1 + 64);
  while (v11 != v12)
  {
    unsigned int v13 = *v11++;
    PB::TextFormatter::format(this, "dark2", v13);
  }

  BOOL v14 = *(unsigned int **)(a1 + 80);
  char v15 = *(unsigned int **)(a1 + 88);
  while (v14 != v15)
  {
    unsigned int v16 = *v14++;
    PB::TextFormatter::format(this, "dark3", v16);
  }

  char v17 = *(_BYTE *)(a1 + 224);
  if ((v17 & 4) != 0)
  {
    PB::TextFormatter::format(this, "error", *(_DWORD *)(a1 + 216));
    char v17 = *(_BYTE *)(a1 + 224);
  }

  if ((v17 & 8) != 0) {
    PB::TextFormatter::format(this, "frameNum", *(_DWORD *)(a1 + 220));
  }
  char v18 = *(unsigned int **)(a1 + 104);
  char v19 = *(unsigned int **)(a1 + 112);
  while (v18 != v19)
  {
    unsigned int v20 = *v18++;
    PB::TextFormatter::format(this, "ledCurrent", v20);
  }

  uint64_t v21 = *(unsigned int **)(a1 + 128);
  uint64_t v22 = *(unsigned int **)(a1 + 136);
  while (v21 != v22)
  {
    unsigned int v23 = *v21++;
    PB::TextFormatter::format(this, "light0", v23);
  }

  unsigned int v24 = *(unsigned int **)(a1 + 152);
  unint64_t v25 = *(unsigned int **)(a1 + 160);
  while (v24 != v25)
  {
    unsigned int v26 = *v24++;
    PB::TextFormatter::format(this, "light1", v26);
  }

  uint64_t v27 = *(unsigned int **)(a1 + 176);
  char v28 = *(unsigned int **)(a1 + 184);
  while (v27 != v28)
  {
    unsigned int v29 = *v27++;
    PB::TextFormatter::format(this, "rxGain", v29);
  }

  char v30 = *(_BYTE *)(a1 + 224);
  if ((v30 & 1) != 0)
  {
    PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 200));
    char v30 = *(_BYTE *)(a1 + 224);
  }

  if ((v30 & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 208));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010E75A4(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    char v423 = (void *)(a1 + 120);
    unsigned int v420 = (void **)(a1 + 176);
    uint64_t v421 = (void **)(a1 + 104);
    unint64_t v422 = (void *)(a1 + 192);
    unsigned int v10 = (void *)(a1 + 168);
    uint64_t v418 = (void **)(a1 + 128);
    char v419 = (void **)(a1 + 152);
    int v11 = (void *)(a1 + 144);
    unint64_t v12 = (void *)(a1 + 96);
    unint64_t v416 = (void **)(a1 + 56);
    unint64_t v417 = (void **)(a1 + 80);
    unsigned int v13 = (void *)(a1 + 72);
    BOOL v14 = (void *)(a1 + 48);
    char v414 = (void **)(a1 + 8);
    unint64_t v415 = (void **)(a1 + 32);
    char v15 = (void *)(a1 + 24);
    while (1)
    {
      uint64_t v16 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v17 = 0;
      unsigned int v18 = 0;
      unint64_t v19 = 0LL;
      while (1)
      {
        unint64_t v20 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v21 = *(_BYTE *)(v16 + v4);
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          break;
        }
        v17 += 7;
        unint64_t v4 = v20;
        BOOL v66 = v18++ > 8;
        if (v66) {
          goto LABEL_20;
        }
      }

LABEL_518:
          *(void *)(a1 + 200) = v34;
          goto LABEL_706;
        case 3u:
          *(_BYTE *)(a1 + 224) |= 8u;
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          uint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5LL && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0LL;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_521;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v66 = v41++ > 8;
            }

            while (!v66);
LABEL_424:
            LODWORD(v42) = 0;
            goto LABEL_521;
          }

          char v242 = 0;
          unsigned int v243 = 0;
          uint64_t v42 = 0LL;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v244 = v37 + 1;
              char v245 = *(_BYTE *)(v39 + v37);
              *((void *)this + 1) = v244;
              v42 |= (unint64_t)(v245 & 0x7F) << v242;
              if (v245 < 0)
              {
                v242 += 7;
                unint64_t v37 = v244;
                BOOL v66 = v243++ > 8;
                if (v66) {
                  goto LABEL_424;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v42) = 0;
              }
            }

            break;
          }

        *(_DWORD *)(a1 + 64) = v225;
        goto LABEL_522;
      case 0x24u:
        *(void *)(a1 + 192) |= 0x80000000uLL;
        char v228 = *((void *)this + 1);
        if (v228 > 0xFFFFFFFFFFFFFFFBLL || v228 + 4 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v228);
        goto LABEL_420;
      case 0x25u:
        *(void *)(a1 + 192) |= (unint64_t)&_mh_execute_header;
        unsigned int v229 = *((void *)this + 1);
        if (v229 > 0xFFFFFFFFFFFFFFFBLL || v229 + 4 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v229);
        goto LABEL_420;
      case 0x26u:
        *(void *)(a1 + 192) |= 0x200000000uLL;
        uint64_t v230 = *((void *)this + 1);
        if (v230 <= 0xFFFFFFFFFFFFFFFBLL && v230 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v230);
LABEL_420:
          char v95 = *((void *)this + 1) + 4LL;
LABEL_421:
          *((void *)this + 1) = v95;
        }

        else
        {
LABEL_236:
          *((_BYTE *)this + 24) = 1;
        }

        goto LABEL_522;
      case 0x27u:
        *(void *)(a1 + 192) |= 0x400000000uLL;
        unint64_t v231 = *((void *)this + 1);
        char v232 = *((void *)this + 2);
        char v233 = *(void *)this;
        if (v231 <= 0xFFFFFFFFFFFFFFF5LL && v231 + 10 <= v232)
        {
          unsigned int v234 = 0;
          uint64_t v235 = 0;
          unint64_t v236 = 0LL;
          do
          {
            char v237 = v231 + 1;
            *((void *)this + 1) = v231 + 1;
            char v238 = *(_BYTE *)(v233 + v231);
            v236 |= (unint64_t)(v238 & 0x7F) << v234;
            if ((v238 & 0x80) == 0) {
              goto LABEL_521;
            }
            v234 += 7;
            unint64_t v231 = v237;
            BOOL v14 = v235++ > 8;
          }

          while (!v14);
LABEL_418:
          LODWORD(v236) = 0;
          goto LABEL_521;
        }

        unint64_t v335 = 0;
        unint64_t v336 = 0;
        unint64_t v236 = 0LL;
        if (v232 <= v231) {
          char v232 = *((void *)this + 1);
        }
        while (2)
        {
          if (v232 == v231)
          {
            LODWORD(v236) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            char v337 = v231 + 1;
            unint64_t v338 = *(_BYTE *)(v233 + v231);
            *((void *)this + 1) = v337;
            v236 |= (unint64_t)(v338 & 0x7F) << v335;
            if (v338 < 0)
            {
              v335 += 7;
              unint64_t v231 = v337;
              BOOL v14 = v336++ > 8;
              if (v14) {
                goto LABEL_418;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v236) = 0;
            }
          }

          break;
        }

LABEL_521:
          *(_DWORD *)(a1 + 220) = v42;
          goto LABEL_706;
        case 4u:
          *(_BYTE *)(a1 + 224) |= 4u;
          unint64_t v45 = *((void *)this + 1);
          unint64_t v46 = *((void *)this + 2);
          uint64_t v47 = *(void *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5LL && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0LL;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              char v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_524;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v66 = v49++ > 8;
            }

            while (!v66);
LABEL_431:
            LODWORD(v50) = 0;
            goto LABEL_524;
          }

          char v246 = 0;
          unsigned int v247 = 0;
          uint64_t v50 = 0LL;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)this + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v248 = v45 + 1;
              char v249 = *(_BYTE *)(v47 + v45);
              *((void *)this + 1) = v248;
              v50 |= (unint64_t)(v249 & 0x7F) << v246;
              if (v249 < 0)
              {
                v246 += 7;
                unint64_t v45 = v248;
                BOOL v66 = v247++ > 8;
                if (v66) {
                  goto LABEL_431;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v50) = 0;
              }
            }

            break;
          }

        *(_DWORD *)(a1 + 176) = v236;
        goto LABEL_522;
      default:
        double result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_522;
    }
  }

LABEL_524:
          *(_DWORD *)(a1 + 216) = v50;
          goto LABEL_706;
        case 5u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              char v53 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v53 >= *v15)
                {
                  unsigned int v54 = (char *)*v414;
                  uint64_t v55 = (v53 - (_BYTE *)*v414) >> 2;
                  unint64_t v56 = v55 + 1;
                  uint64_t v57 = *v15 - (void)v54;
                  if (v57 >> 1 > v56) {
                    unint64_t v56 = v57 >> 1;
                  }
                  else {
                    unint64_t v58 = v56;
                  }
                  if (v58)
                  {
                    unint64_t v59 = (char *)sub_10000956C((uint64_t)v15, v58);
                    unsigned int v54 = *(char **)(a1 + 8);
                    char v53 = *(char **)(a1 + 16);
                  }

                  else
                  {
                    unint64_t v59 = 0LL;
                  }

                  char v60 = &v59[4 * v55];
                  *(_DWORD *)char v60 = 0;
                  char v61 = v60 + 4;
                  while (v53 != v54)
                  {
                    int v62 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v60 - 1) = v62;
                    v60 -= 4;
                  }

                  *(void *)(a1 + _Block_object_dispose(va, 8) = v60;
                  *(void *)(a1 + 16) = v61;
                  *(void *)(a1 + 24) = &v59[4 * v58];
                  if (v54) {
                    operator delete(v54);
                  }
                  char v53 = v61;
                }

                else
                {
                  *(_DWORD *)char v53 = 0;
                  v53 += 4;
                }

                *(void *)(a1 + 16) = v53;
                unint64_t v64 = *((void *)this + 1);
                unint64_t v63 = *((void *)this + 2);
                uint64_t v65 = *(void *)this;
                BOOL v66 = v64 > 0xFFFFFFFFFFFFFFF5LL || v64 + 10 > v63;
                if (v66)
                {
                  char v67 = 0;
                  unsigned int v68 = 0;
                  uint64_t v74 = 0LL;
                  if (v63 <= v64) {
                    uint64_t v69 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v69 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v69 == v64) {
                      goto LABEL_409;
                    }
                    unint64_t v70 = v64++;
                    char v71 = *(_BYTE *)(v65 + v70);
                    *((void *)this + 1) = v64;
                    v74 |= (unint64_t)(v71 & 0x7F) << v67;
                    if ((v71 & 0x80) == 0) {
                      break;
                    }
                    v67 += 7;
                    BOOL v66 = v68++ > 8;
                    if (v66)
                    {
                      LODWORD(v74) = 0;
                      goto LABEL_90;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v74) = 0;
                  }
LABEL_90:
                  unint64_t v75 = v70 + 1;
                }

                else
                {
                  char v72 = 0;
                  unsigned int v73 = 0;
                  uint64_t v74 = 0LL;
                  while (1)
                  {
                    unint64_t v75 = v64 + 1;
                    *((void *)this + 1) = v64 + 1;
                    char v76 = *(_BYTE *)(v65 + v64);
                    v74 |= (unint64_t)(v76 & 0x7F) << v72;
                    if ((v76 & 0x80) == 0) {
                      break;
                    }
                    v72 += 7;
                    unint64_t v64 = v75;
                    BOOL v66 = v73++ > 8;
                    if (v66)
                    {
                      LODWORD(v74) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v53 - 1) = v74;
              }

              while (v75 < v63 && !*((_BYTE *)this + 24));
            }

            goto LABEL_410;
          }

          unint64_t v251 = *(char **)(a1 + 16);
          unint64_t v250 = *(void *)(a1 + 24);
          if ((unint64_t)v251 >= v250)
          {
            char v267 = (char *)*v414;
            uint64_t v268 = (v251 - (_BYTE *)*v414) >> 2;
            unint64_t v269 = v268 + 1;
            if ((unint64_t)(v268 + 1) >> 62) {
LABEL_716:
            }
              sub_100007008();
            uint64_t v270 = v250 - (void)v267;
            if (v270 >> 1 > v269) {
              unint64_t v269 = v270 >> 1;
            }
            else {
              unint64_t v271 = v269;
            }
            if (v271)
            {
              unint64_t v272 = (char *)sub_10000956C((uint64_t)v15, v271);
              char v267 = *(char **)(a1 + 8);
              unint64_t v251 = *(char **)(a1 + 16);
            }

            else
            {
              unint64_t v272 = 0LL;
            }

            unint64_t v315 = &v272[4 * v268];
            *(_DWORD *)unint64_t v315 = 0;
            int v252 = v315 + 4;
            while (v251 != v267)
            {
              int v316 = *((_DWORD *)v251 - 1);
              v251 -= 4;
              *((_DWORD *)v315 - 1) = v316;
              v315 -= 4;
            }

            *(void *)(a1 + _Block_object_dispose(va, 8) = v315;
            *(void *)(a1 + 16) = v252;
            *(void *)(a1 + 24) = &v272[4 * v271];
            if (v267) {
              operator delete(v267);
            }
          }

          else
          {
            *(_DWORD *)unint64_t v251 = 0;
            int v252 = v251 + 4;
          }

          *(void *)(a1 + 16) = v252;
          unint64_t v317 = *((void *)this + 1);
          unint64_t v318 = *((void *)this + 2);
          uint64_t v319 = *(void *)this;
          char v320 = 0;
          unsigned int v321 = 0;
          if (v317 <= 0xFFFFFFFFFFFFFFF5LL && v317 + 10 <= v318)
          {
            uint64_t v325 = 0LL;
            while (1)
            {
              unint64_t v326 = v317 + 1;
              *((void *)this + 1) = v317 + 1;
              char v327 = *(_BYTE *)(v319 + v317);
              v325 |= (unint64_t)(v327 & 0x7F) << v320;
              if ((v327 & 0x80) == 0) {
                goto LABEL_705;
              }
              v320 += 7;
              unint64_t v317 = v326;
              BOOL v66 = v321++ > 8;
              if (v66) {
                goto LABEL_704;
              }
            }
          }

          uint64_t v325 = 0LL;
          if (v318 <= v317) {
            unint64_t v318 = *((void *)this + 1);
          }
          while (v318 != v317)
          {
            unint64_t v323 = v317 + 1;
            char v324 = *(_BYTE *)(v319 + v317);
            *((void *)this + 1) = v323;
            v325 |= (unint64_t)(v324 & 0x7F) << v320;
            if ((v324 & 0x80) == 0) {
              goto LABEL_698;
            }
            v320 += 7;
            unint64_t v317 = v323;
            BOOL v66 = v321++ > 8;
            if (v66) {
              goto LABEL_704;
            }
          }

          goto LABEL_697;
        case 6u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              char v53 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v53 >= *v14)
                {
                  unint64_t v77 = (char *)*v415;
                  uint64_t v78 = (v53 - (_BYTE *)*v415) >> 2;
                  unint64_t v79 = v78 + 1;
                  uint64_t v80 = *v14 - (void)v77;
                  if (v80 >> 1 > v79) {
                    unint64_t v79 = v80 >> 1;
                  }
                  else {
                    unint64_t v81 = v79;
                  }
                  if (v81)
                  {
                    unint64_t v82 = (char *)sub_10000956C((uint64_t)v14, v81);
                    unint64_t v77 = *(char **)(a1 + 32);
                    char v53 = *(char **)(a1 + 40);
                  }

                  else
                  {
                    unint64_t v82 = 0LL;
                  }

                  uint64_t v83 = &v82[4 * v78];
                  *(_DWORD *)uint64_t v83 = 0;
                  char v84 = v83 + 4;
                  while (v53 != v77)
                  {
                    int v85 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v83 - 1) = v85;
                    v83 -= 4;
                  }

                  *(void *)(a1 + 32) = v83;
                  *(void *)(a1 + 40) = v84;
                  *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v82[4 * v81];
                  if (v77) {
                    operator delete(v77);
                  }
                  char v53 = v84;
                }

                else
                {
                  *(_DWORD *)char v53 = 0;
                  v53 += 4;
                }

                *(void *)(a1 + 40) = v53;
                unint64_t v87 = *((void *)this + 1);
                unint64_t v86 = *((void *)this + 2);
                uint64_t v88 = *(void *)this;
                if (v87 > 0xFFFFFFFFFFFFFFF5LL || v87 + 10 > v86)
                {
                  char v90 = 0;
                  unsigned int v91 = 0;
                  uint64_t v97 = 0LL;
                  if (v86 <= v87) {
                    uint64_t v92 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v92 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v92 == v87) {
                      goto LABEL_409;
                    }
                    unint64_t v93 = v87++;
                    char v94 = *(_BYTE *)(v88 + v93);
                    *((void *)this + 1) = v87;
                    v97 |= (unint64_t)(v94 & 0x7F) << v90;
                    if ((v94 & 0x80) == 0) {
                      break;
                    }
                    v90 += 7;
                    BOOL v66 = v91++ > 8;
                    if (v66)
                    {
                      LODWORD(v97) = 0;
                      goto LABEL_135;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v97) = 0;
                  }
LABEL_135:
                  unint64_t v98 = v93 + 1;
                }

                else
                {
                  char v95 = 0;
                  unsigned int v96 = 0;
                  uint64_t v97 = 0LL;
                  while (1)
                  {
                    unint64_t v98 = v87 + 1;
                    *((void *)this + 1) = v87 + 1;
                    char v99 = *(_BYTE *)(v88 + v87);
                    v97 |= (unint64_t)(v99 & 0x7F) << v95;
                    if ((v99 & 0x80) == 0) {
                      break;
                    }
                    v95 += 7;
                    unint64_t v87 = v98;
                    BOOL v66 = v96++ > 8;
                    if (v66)
                    {
                      LODWORD(v97) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v53 - 1) = v97;
              }

              while (v98 < v86 && !*((_BYTE *)this + 24));
            }

            goto LABEL_410;
          }

          char v254 = *(char **)(a1 + 40);
          unint64_t v253 = *(void *)(a1 + 48);
          if ((unint64_t)v254 >= v253)
          {
            unint64_t v273 = (char *)*v415;
            uint64_t v274 = (v254 - (_BYTE *)*v415) >> 2;
            unint64_t v275 = v274 + 1;
            if ((unint64_t)(v274 + 1) >> 62) {
LABEL_717:
            }
              sub_100007008();
            uint64_t v276 = v253 - (void)v273;
            if (v276 >> 1 > v275) {
              unint64_t v275 = v276 >> 1;
            }
            else {
              unint64_t v277 = v275;
            }
            if (v277)
            {
              BOOL v278 = (char *)sub_10000956C((uint64_t)v14, v277);
              unint64_t v273 = *(char **)(a1 + 32);
              char v254 = *(char **)(a1 + 40);
            }

            else
            {
              BOOL v278 = 0LL;
            }

            unint64_t v328 = &v278[4 * v274];
            *(_DWORD *)unint64_t v328 = 0;
            int v252 = v328 + 4;
            while (v254 != v273)
            {
              int v329 = *((_DWORD *)v254 - 1);
              v254 -= 4;
              *((_DWORD *)v328 - 1) = v329;
              v328 -= 4;
            }

            *(void *)(a1 + 32) = v328;
            *(void *)(a1 + 40) = v252;
            *(void *)(a1 + 4_Block_object_dispose(va, 8) = &v278[4 * v277];
            if (v273) {
              operator delete(v273);
            }
          }

          else
          {
            *(_DWORD *)char v254 = 0;
            int v252 = v254 + 4;
          }

          *(void *)(a1 + 40) = v252;
          unint64_t v330 = *((void *)this + 1);
          unint64_t v331 = *((void *)this + 2);
          uint64_t v332 = *(void *)this;
          char v333 = 0;
          unsigned int v334 = 0;
          if (v330 <= 0xFFFFFFFFFFFFFFF5LL && v330 + 10 <= v331)
          {
            uint64_t v325 = 0LL;
            while (1)
            {
              unint64_t v338 = v330 + 1;
              *((void *)this + 1) = v330 + 1;
              char v339 = *(_BYTE *)(v332 + v330);
              v325 |= (unint64_t)(v339 & 0x7F) << v333;
              if ((v339 & 0x80) == 0) {
                goto LABEL_705;
              }
              v333 += 7;
              unint64_t v330 = v338;
              BOOL v66 = v334++ > 8;
              if (v66) {
                goto LABEL_704;
              }
            }
          }

          uint64_t v325 = 0LL;
          if (v331 <= v330) {
            unint64_t v331 = *((void *)this + 1);
          }
          while (v331 != v330)
          {
            unint64_t v336 = v330 + 1;
            char v337 = *(_BYTE *)(v332 + v330);
            *((void *)this + 1) = v336;
            v325 |= (unint64_t)(v337 & 0x7F) << v333;
            if ((v337 & 0x80) == 0) {
              goto LABEL_698;
            }
            v333 += 7;
            unint64_t v330 = v336;
            BOOL v66 = v334++ > 8;
            if (v66) {
              goto LABEL_704;
            }
          }

          goto LABEL_697;
        case 7u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              char v53 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v53 >= *v13)
                {
                  unint64_t v100 = (char *)*v416;
                  uint64_t v101 = (v53 - (_BYTE *)*v416) >> 2;
                  unint64_t v102 = v101 + 1;
                  uint64_t v103 = *v13 - (void)v100;
                  if (v103 >> 1 > v102) {
                    unint64_t v102 = v103 >> 1;
                  }
                  else {
                    unint64_t v104 = v102;
                  }
                  if (v104)
                  {
                    int v105 = (char *)sub_10000956C((uint64_t)v13, v104);
                    unint64_t v100 = *(char **)(a1 + 56);
                    char v53 = *(char **)(a1 + 64);
                  }

                  else
                  {
                    int v105 = 0LL;
                  }

                  char v106 = &v105[4 * v101];
                  *(_DWORD *)char v106 = 0;
                  int v107 = v106 + 4;
                  while (v53 != v100)
                  {
                    int v108 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v106 - 1) = v108;
                    v106 -= 4;
                  }

                  *(void *)(a1 + 56) = v106;
                  *(void *)(a1 + 64) = v107;
                  *(void *)(a1 + 72) = &v105[4 * v104];
                  if (v100) {
                    operator delete(v100);
                  }
                  char v53 = v107;
                }

                else
                {
                  *(_DWORD *)char v53 = 0;
                  v53 += 4;
                }

                *(void *)(a1 + 64) = v53;
                unint64_t v110 = *((void *)this + 1);
                unint64_t v109 = *((void *)this + 2);
                uint64_t v111 = *(void *)this;
                if (v110 > 0xFFFFFFFFFFFFFFF5LL || v110 + 10 > v109)
                {
                  char v113 = 0;
                  unsigned int v114 = 0;
                  uint64_t v120 = 0LL;
                  if (v109 <= v110) {
                    uint64_t v115 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v115 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v115 == v110) {
                      goto LABEL_409;
                    }
                    unint64_t v116 = v110++;
                    char v117 = *(_BYTE *)(v111 + v116);
                    *((void *)this + 1) = v110;
                    v120 |= (unint64_t)(v117 & 0x7F) << v113;
                    if ((v117 & 0x80) == 0) {
                      break;
                    }
                    v113 += 7;
                    BOOL v66 = v114++ > 8;
                    if (v66)
                    {
                      LODWORD(v120) = 0;
                      goto LABEL_180;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v120) = 0;
                  }
LABEL_180:
                  unint64_t v121 = v116 + 1;
                }

                else
                {
                  char v118 = 0;
                  unsigned int v119 = 0;
                  uint64_t v120 = 0LL;
                  while (1)
                  {
                    unint64_t v121 = v110 + 1;
                    *((void *)this + 1) = v110 + 1;
                    char v122 = *(_BYTE *)(v111 + v110);
                    v120 |= (unint64_t)(v122 & 0x7F) << v118;
                    if ((v122 & 0x80) == 0) {
                      break;
                    }
                    v118 += 7;
                    unint64_t v110 = v121;
                    BOOL v66 = v119++ > 8;
                    if (v66)
                    {
                      LODWORD(v120) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v53 - 1) = v120;
              }

              while (v121 < v109 && !*((_BYTE *)this + 24));
            }

            goto LABEL_410;
          }

          unint64_t v256 = *(char **)(a1 + 64);
          unint64_t v255 = *(void *)(a1 + 72);
          if ((unint64_t)v256 >= v255)
          {
            unint64_t v279 = (char *)*v416;
            uint64_t v280 = (v256 - (_BYTE *)*v416) >> 2;
            unint64_t v281 = v280 + 1;
            if ((unint64_t)(v280 + 1) >> 62) {
LABEL_718:
            }
              sub_100007008();
            uint64_t v282 = v255 - (void)v279;
            if (v282 >> 1 > v281) {
              unint64_t v281 = v282 >> 1;
            }
            else {
              unint64_t v283 = v281;
            }
            if (v283)
            {
              unint64_t v284 = (char *)sub_10000956C((uint64_t)v13, v283);
              unint64_t v279 = *(char **)(a1 + 56);
              unint64_t v256 = *(char **)(a1 + 64);
            }

            else
            {
              unint64_t v284 = 0LL;
            }

            unint64_t v340 = &v284[4 * v280];
            *(_DWORD *)unint64_t v340 = 0;
            int v252 = v340 + 4;
            while (v256 != v279)
            {
              int v341 = *((_DWORD *)v256 - 1);
              v256 -= 4;
              *((_DWORD *)v340 - 1) = v341;
              v340 -= 4;
            }

            *(void *)(a1 + 56) = v340;
            *(void *)(a1 + 64) = v252;
            *(void *)(a1 + 72) = &v284[4 * v283];
            if (v279) {
              operator delete(v279);
            }
          }

          else
          {
            *(_DWORD *)unint64_t v256 = 0;
            int v252 = v256 + 4;
          }

          *(void *)(a1 + 64) = v252;
          unint64_t v342 = *((void *)this + 1);
          unint64_t v343 = *((void *)this + 2);
          uint64_t v344 = *(void *)this;
          char v345 = 0;
          unsigned int v346 = 0;
          if (v342 <= 0xFFFFFFFFFFFFFFF5LL && v342 + 10 <= v343)
          {
            uint64_t v325 = 0LL;
            while (1)
            {
              unint64_t v350 = v342 + 1;
              *((void *)this + 1) = v342 + 1;
              char v351 = *(_BYTE *)(v344 + v342);
              v325 |= (unint64_t)(v351 & 0x7F) << v345;
              if ((v351 & 0x80) == 0) {
                goto LABEL_705;
              }
              v345 += 7;
              unint64_t v342 = v350;
              BOOL v66 = v346++ > 8;
              if (v66) {
                goto LABEL_704;
              }
            }
          }

          uint64_t v325 = 0LL;
          if (v343 <= v342) {
            unint64_t v343 = *((void *)this + 1);
          }
          while (v343 != v342)
          {
            unint64_t v348 = v342 + 1;
            char v349 = *(_BYTE *)(v344 + v342);
            *((void *)this + 1) = v348;
            v325 |= (unint64_t)(v349 & 0x7F) << v345;
            if ((v349 & 0x80) == 0) {
              goto LABEL_698;
            }
            v345 += 7;
            unint64_t v342 = v348;
            BOOL v66 = v346++ > 8;
            if (v66) {
              goto LABEL_704;
            }
          }

          goto LABEL_697;
        case 8u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              char v53 = *(char **)(a1 + 88);
              do
              {
                if ((unint64_t)v53 >= *v12)
                {
                  unint64_t v123 = (char *)*v417;
                  uint64_t v124 = (v53 - (_BYTE *)*v417) >> 2;
                  unint64_t v125 = v124 + 1;
                  uint64_t v126 = *v12 - (void)v123;
                  if (v126 >> 1 > v125) {
                    unint64_t v125 = v126 >> 1;
                  }
                  else {
                    unint64_t v127 = v125;
                  }
                  if (v127)
                  {
                    uint64_t v128 = (char *)sub_10000956C((uint64_t)v12, v127);
                    unint64_t v123 = *(char **)(a1 + 80);
                    char v53 = *(char **)(a1 + 88);
                  }

                  else
                  {
                    uint64_t v128 = 0LL;
                  }

                  unint64_t v129 = &v128[4 * v124];
                  *(_DWORD *)unint64_t v129 = 0;
                  unint64_t v130 = v129 + 4;
                  while (v53 != v123)
                  {
                    int v131 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v129 - 1) = v131;
                    v129 -= 4;
                  }

                  *(void *)(a1 + 80) = v129;
                  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v130;
                  *(void *)(a1 + 96) = &v128[4 * v127];
                  if (v123) {
                    operator delete(v123);
                  }
                  char v53 = v130;
                }

                else
                {
                  *(_DWORD *)char v53 = 0;
                  v53 += 4;
                }

                *(void *)(a1 + 8_Block_object_dispose(va, 8) = v53;
                unint64_t v133 = *((void *)this + 1);
                unint64_t v132 = *((void *)this + 2);
                uint64_t v134 = *(void *)this;
                if (v133 > 0xFFFFFFFFFFFFFFF5LL || v133 + 10 > v132)
                {
                  char v136 = 0;
                  unsigned int v137 = 0;
                  uint64_t v143 = 0LL;
                  if (v132 <= v133) {
                    uint64_t v138 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v138 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v138 == v133) {
                      goto LABEL_409;
                    }
                    unint64_t v139 = v133++;
                    char v140 = *(_BYTE *)(v134 + v139);
                    *((void *)this + 1) = v133;
                    v143 |= (unint64_t)(v140 & 0x7F) << v136;
                    if ((v140 & 0x80) == 0) {
                      break;
                    }
                    v136 += 7;
                    BOOL v66 = v137++ > 8;
                    if (v66)
                    {
                      LODWORD(v143) = 0;
                      goto LABEL_225;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v143) = 0;
                  }
LABEL_225:
                  unint64_t v144 = v139 + 1;
                }

                else
                {
                  char v141 = 0;
                  unsigned int v142 = 0;
                  uint64_t v143 = 0LL;
                  while (1)
                  {
                    unint64_t v144 = v133 + 1;
                    *((void *)this + 1) = v133 + 1;
                    char v145 = *(_BYTE *)(v134 + v133);
                    v143 |= (unint64_t)(v145 & 0x7F) << v141;
                    if ((v145 & 0x80) == 0) {
                      break;
                    }
                    v141 += 7;
                    unint64_t v133 = v144;
                    BOOL v66 = v142++ > 8;
                    if (v66)
                    {
                      LODWORD(v143) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v53 - 1) = v143;
              }

              while (v144 < v132 && !*((_BYTE *)this + 24));
            }

            goto LABEL_410;
          }

          BOOL v258 = *(char **)(a1 + 88);
          unint64_t v257 = *(void *)(a1 + 96);
          if ((unint64_t)v258 >= v257)
          {
            unint64_t v285 = (char *)*v417;
            uint64_t v286 = (v258 - (_BYTE *)*v417) >> 2;
            unint64_t v287 = v286 + 1;
            if ((unint64_t)(v286 + 1) >> 62) {
LABEL_719:
            }
              sub_100007008();
            uint64_t v288 = v257 - (void)v285;
            if (v288 >> 1 > v287) {
              unint64_t v287 = v288 >> 1;
            }
            else {
              unint64_t v289 = v287;
            }
            if (v289)
            {
              int v290 = (char *)sub_10000956C((uint64_t)v12, v289);
              unint64_t v285 = *(char **)(a1 + 80);
              BOOL v258 = *(char **)(a1 + 88);
            }

            else
            {
              int v290 = 0LL;
            }

            unint64_t v352 = &v290[4 * v286];
            *(_DWORD *)unint64_t v352 = 0;
            int v252 = v352 + 4;
            while (v258 != v285)
            {
              int v353 = *((_DWORD *)v258 - 1);
              v258 -= 4;
              *((_DWORD *)v352 - 1) = v353;
              v352 -= 4;
            }

            *(void *)(a1 + 80) = v352;
            *(void *)(a1 + 8_Block_object_dispose(va, 8) = v252;
            *(void *)(a1 + 96) = &v290[4 * v289];
            if (v285) {
              operator delete(v285);
            }
          }

          else
          {
            *(_DWORD *)BOOL v258 = 0;
            int v252 = v258 + 4;
          }

          *(void *)(a1 + 8_Block_object_dispose(va, 8) = v252;
          unint64_t v354 = *((void *)this + 1);
          unint64_t v355 = *((void *)this + 2);
          uint64_t v356 = *(void *)this;
          char v357 = 0;
          unsigned int v358 = 0;
          if (v354 <= 0xFFFFFFFFFFFFFFF5LL && v354 + 10 <= v355)
          {
            uint64_t v325 = 0LL;
            while (1)
            {
              unint64_t v362 = v354 + 1;
              *((void *)this + 1) = v354 + 1;
              char v363 = *(_BYTE *)(v356 + v354);
              v325 |= (unint64_t)(v363 & 0x7F) << v357;
              if ((v363 & 0x80) == 0) {
                goto LABEL_705;
              }
              v357 += 7;
              unint64_t v354 = v362;
              BOOL v66 = v358++ > 8;
              if (v66) {
                goto LABEL_704;
              }
            }
          }

          uint64_t v325 = 0LL;
          if (v355 <= v354) {
            unint64_t v355 = *((void *)this + 1);
          }
          while (v355 != v354)
          {
            unint64_t v360 = v354 + 1;
            char v361 = *(_BYTE *)(v356 + v354);
            *((void *)this + 1) = v360;
            v325 |= (unint64_t)(v361 & 0x7F) << v357;
            if ((v361 & 0x80) == 0) {
              goto LABEL_698;
            }
            v357 += 7;
            unint64_t v354 = v360;
            BOOL v66 = v358++ > 8;
            if (v66) {
              goto LABEL_704;
            }
          }

          goto LABEL_697;
        case 9u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              char v53 = *(char **)(a1 + 136);
              do
              {
                if ((unint64_t)v53 >= *v11)
                {
                  uint64_t v146 = (char *)*v418;
                  uint64_t v147 = (v53 - (_BYTE *)*v418) >> 2;
                  unint64_t v148 = v147 + 1;
                  uint64_t v149 = *v11 - (void)v146;
                  if (v149 >> 1 > v148) {
                    unint64_t v148 = v149 >> 1;
                  }
                  else {
                    unint64_t v150 = v148;
                  }
                  if (v150)
                  {
                    unint64_t v151 = (char *)sub_10000956C((uint64_t)v11, v150);
                    uint64_t v146 = *(char **)(a1 + 128);
                    char v53 = *(char **)(a1 + 136);
                  }

                  else
                  {
                    unint64_t v151 = 0LL;
                  }

                  uint64_t v152 = &v151[4 * v147];
                  *(_DWORD *)uint64_t v152 = 0;
                  int v153 = v152 + 4;
                  while (v53 != v146)
                  {
                    int v154 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v152 - 1) = v154;
                    v152 -= 4;
                  }

                  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v152;
                  *(void *)(a1 + 136) = v153;
                  *(void *)(a1 + 144) = &v151[4 * v150];
                  if (v146) {
                    operator delete(v146);
                  }
                  char v53 = v153;
                }

                else
                {
                  *(_DWORD *)char v53 = 0;
                  v53 += 4;
                }

                *(void *)(a1 + 136) = v53;
                unint64_t v156 = *((void *)this + 1);
                unint64_t v155 = *((void *)this + 2);
                uint64_t v157 = *(void *)this;
                if (v156 > 0xFFFFFFFFFFFFFFF5LL || v156 + 10 > v155)
                {
                  char v159 = 0;
                  unsigned int v160 = 0;
                  uint64_t v166 = 0LL;
                  if (v155 <= v156) {
                    uint64_t v161 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v161 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v161 == v156) {
                      goto LABEL_409;
                    }
                    unint64_t v162 = v156++;
                    char v163 = *(_BYTE *)(v157 + v162);
                    *((void *)this + 1) = v156;
                    v166 |= (unint64_t)(v163 & 0x7F) << v159;
                    if ((v163 & 0x80) == 0) {
                      break;
                    }
                    v159 += 7;
                    BOOL v66 = v160++ > 8;
                    if (v66)
                    {
                      LODWORD(v166) = 0;
                      goto LABEL_270;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v166) = 0;
                  }
LABEL_270:
                  unint64_t v167 = v162 + 1;
                }

                else
                {
                  char v164 = 0;
                  unsigned int v165 = 0;
                  uint64_t v166 = 0LL;
                  while (1)
                  {
                    unint64_t v167 = v156 + 1;
                    *((void *)this + 1) = v156 + 1;
                    char v168 = *(_BYTE *)(v157 + v156);
                    v166 |= (unint64_t)(v168 & 0x7F) << v164;
                    if ((v168 & 0x80) == 0) {
                      break;
                    }
                    v164 += 7;
                    unint64_t v156 = v167;
                    BOOL v66 = v165++ > 8;
                    if (v66)
                    {
                      LODWORD(v166) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v53 - 1) = v166;
              }

              while (v167 < v155 && !*((_BYTE *)this + 24));
            }

            goto LABEL_410;
          }

          unint64_t v260 = *(char **)(a1 + 136);
          unint64_t v259 = *(void *)(a1 + 144);
          if ((unint64_t)v260 >= v259)
          {
            BOOL v291 = (char *)*v418;
            uint64_t v292 = (v260 - (_BYTE *)*v418) >> 2;
            unint64_t v293 = v292 + 1;
            if ((unint64_t)(v292 + 1) >> 62) {
LABEL_720:
            }
              sub_100007008();
            uint64_t v294 = v259 - (void)v291;
            if (v294 >> 1 > v293) {
              unint64_t v293 = v294 >> 1;
            }
            else {
              unint64_t v295 = v293;
            }
            if (v295)
            {
              char v296 = (char *)sub_10000956C((uint64_t)v11, v295);
              BOOL v291 = *(char **)(a1 + 128);
              unint64_t v260 = *(char **)(a1 + 136);
            }

            else
            {
              char v296 = 0LL;
            }

            unint64_t v364 = &v296[4 * v292];
            *(_DWORD *)unint64_t v364 = 0;
            int v252 = v364 + 4;
            while (v260 != v291)
            {
              int v365 = *((_DWORD *)v260 - 1);
              v260 -= 4;
              *((_DWORD *)v364 - 1) = v365;
              v364 -= 4;
            }

            *(void *)(a1 + 12_Block_object_dispose(va, 8) = v364;
            *(void *)(a1 + 136) = v252;
            *(void *)(a1 + 144) = &v296[4 * v295];
            if (v291) {
              operator delete(v291);
            }
          }

          else
          {
            *(_DWORD *)unint64_t v260 = 0;
            int v252 = v260 + 4;
          }

          *(void *)(a1 + 136) = v252;
          unint64_t v366 = *((void *)this + 1);
          unint64_t v367 = *((void *)this + 2);
          uint64_t v368 = *(void *)this;
          char v369 = 0;
          unsigned int v370 = 0;
          if (v366 <= 0xFFFFFFFFFFFFFFF5LL && v366 + 10 <= v367)
          {
            uint64_t v325 = 0LL;
            while (1)
            {
              unint64_t v374 = v366 + 1;
              *((void *)this + 1) = v366 + 1;
              char v375 = *(_BYTE *)(v368 + v366);
              v325 |= (unint64_t)(v375 & 0x7F) << v369;
              if ((v375 & 0x80) == 0) {
                goto LABEL_705;
              }
              v369 += 7;
              unint64_t v366 = v374;
              BOOL v66 = v370++ > 8;
              if (v66) {
                goto LABEL_704;
              }
            }
          }

          uint64_t v325 = 0LL;
          if (v367 <= v366) {
            unint64_t v367 = *((void *)this + 1);
          }
          while (v367 != v366)
          {
            unint64_t v372 = v366 + 1;
            char v373 = *(_BYTE *)(v368 + v366);
            *((void *)this + 1) = v372;
            v325 |= (unint64_t)(v373 & 0x7F) << v369;
            if ((v373 & 0x80) == 0) {
              goto LABEL_698;
            }
            v369 += 7;
            unint64_t v366 = v372;
            BOOL v66 = v370++ > 8;
            if (v66) {
              goto LABEL_704;
            }
          }

          goto LABEL_697;
        case 0xAu:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              char v53 = *(char **)(a1 + 160);
              do
              {
                if ((unint64_t)v53 >= *v10)
                {
                  unint64_t v169 = (char *)*v419;
                  uint64_t v170 = (v53 - (_BYTE *)*v419) >> 2;
                  unint64_t v171 = v170 + 1;
                  uint64_t v172 = *v10 - (void)v169;
                  if (v172 >> 1 > v171) {
                    unint64_t v171 = v172 >> 1;
                  }
                  else {
                    unint64_t v173 = v171;
                  }
                  if (v173)
                  {
                    char v174 = (char *)sub_10000956C((uint64_t)v10, v173);
                    unint64_t v169 = *(char **)(a1 + 152);
                    char v53 = *(char **)(a1 + 160);
                  }

                  else
                  {
                    char v174 = 0LL;
                  }

                  char v175 = &v174[4 * v170];
                  *(_DWORD *)char v175 = 0;
                  unsigned int v176 = v175 + 4;
                  while (v53 != v169)
                  {
                    int v177 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v175 - 1) = v177;
                    v175 -= 4;
                  }

                  *(void *)(a1 + 152) = v175;
                  *(void *)(a1 + 160) = v176;
                  *(void *)(a1 + 16_Block_object_dispose(va, 8) = &v174[4 * v173];
                  if (v169) {
                    operator delete(v169);
                  }
                  char v53 = v176;
                }

                else
                {
                  *(_DWORD *)char v53 = 0;
                  v53 += 4;
                }

                *(void *)(a1 + 160) = v53;
                unint64_t v179 = *((void *)this + 1);
                unint64_t v178 = *((void *)this + 2);
                uint64_t v180 = *(void *)this;
                if (v179 > 0xFFFFFFFFFFFFFFF5LL || v179 + 10 > v178)
                {
                  char v182 = 0;
                  unsigned int v183 = 0;
                  uint64_t v189 = 0LL;
                  if (v178 <= v179) {
                    uint64_t v184 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v184 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v184 == v179) {
                      goto LABEL_409;
                    }
                    unint64_t v185 = v179++;
                    char v186 = *(_BYTE *)(v180 + v185);
                    *((void *)this + 1) = v179;
                    v189 |= (unint64_t)(v186 & 0x7F) << v182;
                    if ((v186 & 0x80) == 0) {
                      break;
                    }
                    v182 += 7;
                    BOOL v66 = v183++ > 8;
                    if (v66)
                    {
                      LODWORD(v189) = 0;
                      goto LABEL_315;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v189) = 0;
                  }
LABEL_315:
                  unint64_t v190 = v185 + 1;
                }

                else
                {
                  char v187 = 0;
                  unsigned int v188 = 0;
                  uint64_t v189 = 0LL;
                  while (1)
                  {
                    unint64_t v190 = v179 + 1;
                    *((void *)this + 1) = v179 + 1;
                    char v191 = *(_BYTE *)(v180 + v179);
                    v189 |= (unint64_t)(v191 & 0x7F) << v187;
                    if ((v191 & 0x80) == 0) {
                      break;
                    }
                    v187 += 7;
                    unint64_t v179 = v190;
                    BOOL v66 = v188++ > 8;
                    if (v66)
                    {
                      LODWORD(v189) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v53 - 1) = v189;
              }

              while (v190 < v178 && !*((_BYTE *)this + 24));
            }

            goto LABEL_410;
          }

          BOOL v262 = *(char **)(a1 + 160);
          unint64_t v261 = *(void *)(a1 + 168);
          if ((unint64_t)v262 >= v261)
          {
            unint64_t v297 = (char *)*v419;
            uint64_t v298 = (v262 - (_BYTE *)*v419) >> 2;
            unint64_t v299 = v298 + 1;
            if ((unint64_t)(v298 + 1) >> 62) {
LABEL_721:
            }
              sub_100007008();
            uint64_t v300 = v261 - (void)v297;
            if (v300 >> 1 > v299) {
              unint64_t v299 = v300 >> 1;
            }
            else {
              unint64_t v301 = v299;
            }
            if (v301)
            {
              unsigned int v302 = (char *)sub_10000956C((uint64_t)v10, v301);
              unint64_t v297 = *(char **)(a1 + 152);
              BOOL v262 = *(char **)(a1 + 160);
            }

            else
            {
              unsigned int v302 = 0LL;
            }

            unint64_t v376 = &v302[4 * v298];
            *(_DWORD *)unint64_t v376 = 0;
            int v252 = v376 + 4;
            while (v262 != v297)
            {
              int v377 = *((_DWORD *)v262 - 1);
              v262 -= 4;
              *((_DWORD *)v376 - 1) = v377;
              v376 -= 4;
            }

            *(void *)(a1 + 152) = v376;
            *(void *)(a1 + 160) = v252;
            *(void *)(a1 + 16_Block_object_dispose(va, 8) = &v302[4 * v301];
            if (v297) {
              operator delete(v297);
            }
          }

          else
          {
            *(_DWORD *)BOOL v262 = 0;
            int v252 = v262 + 4;
          }

          *(void *)(a1 + 160) = v252;
          unint64_t v378 = *((void *)this + 1);
          unint64_t v379 = *((void *)this + 2);
          uint64_t v380 = *(void *)this;
          char v381 = 0;
          unsigned int v382 = 0;
          if (v378 <= 0xFFFFFFFFFFFFFFF5LL && v378 + 10 <= v379)
          {
            uint64_t v325 = 0LL;
            while (1)
            {
              unint64_t v386 = v378 + 1;
              *((void *)this + 1) = v378 + 1;
              char v387 = *(_BYTE *)(v380 + v378);
              v325 |= (unint64_t)(v387 & 0x7F) << v381;
              if ((v387 & 0x80) == 0) {
                goto LABEL_705;
              }
              v381 += 7;
              unint64_t v378 = v386;
              BOOL v66 = v382++ > 8;
              if (v66) {
                goto LABEL_704;
              }
            }
          }

          uint64_t v325 = 0LL;
          if (v379 <= v378) {
            unint64_t v379 = *((void *)this + 1);
          }
          while (v379 != v378)
          {
            unint64_t v384 = v378 + 1;
            char v385 = *(_BYTE *)(v380 + v378);
            *((void *)this + 1) = v384;
            v325 |= (unint64_t)(v385 & 0x7F) << v381;
            if ((v385 & 0x80) == 0) {
              goto LABEL_698;
            }
            v381 += 7;
            unint64_t v378 = v384;
            BOOL v66 = v382++ > 8;
            if (v66) {
              goto LABEL_704;
            }
          }

          goto LABEL_697;
        case 0xBu:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              char v53 = *(char **)(a1 + 184);
              do
              {
                if ((unint64_t)v53 >= *v422)
                {
                  unsigned int v192 = (char *)*v420;
                  uint64_t v193 = (v53 - (_BYTE *)*v420) >> 2;
                  unint64_t v194 = v193 + 1;
                  uint64_t v195 = *v422 - (void)v192;
                  if (v195 >> 1 > v194) {
                    unint64_t v194 = v195 >> 1;
                  }
                  else {
                    unint64_t v196 = v194;
                  }
                  if (v196)
                  {
                    unint64_t v197 = (char *)sub_10000956C((uint64_t)v422, v196);
                    unsigned int v192 = *(char **)(a1 + 176);
                    char v53 = *(char **)(a1 + 184);
                  }

                  else
                  {
                    unint64_t v197 = 0LL;
                  }

                  char v198 = &v197[4 * v193];
                  *(_DWORD *)char v198 = 0;
                  uint64_t v199 = v198 + 4;
                  while (v53 != v192)
                  {
                    int v200 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v198 - 1) = v200;
                    v198 -= 4;
                  }

                  *(void *)(a1 + 176) = v198;
                  *(void *)(a1 + 184) = v199;
                  *(void *)(a1 + 192) = &v197[4 * v196];
                  if (v192) {
                    operator delete(v192);
                  }
                  char v53 = v199;
                }

                else
                {
                  *(_DWORD *)char v53 = 0;
                  v53 += 4;
                }

                *(void *)(a1 + 184) = v53;
                unint64_t v202 = *((void *)this + 1);
                unint64_t v201 = *((void *)this + 2);
                uint64_t v203 = *(void *)this;
                if (v202 > 0xFFFFFFFFFFFFFFF5LL || v202 + 10 > v201)
                {
                  char v205 = 0;
                  unsigned int v206 = 0;
                  uint64_t v212 = 0LL;
                  if (v201 <= v202) {
                    uint64_t v207 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v207 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v207 == v202) {
                      goto LABEL_409;
                    }
                    unint64_t v208 = v202++;
                    char v209 = *(_BYTE *)(v203 + v208);
                    *((void *)this + 1) = v202;
                    v212 |= (unint64_t)(v209 & 0x7F) << v205;
                    if ((v209 & 0x80) == 0) {
                      break;
                    }
                    v205 += 7;
                    BOOL v66 = v206++ > 8;
                    if (v66)
                    {
                      LODWORD(v212) = 0;
                      goto LABEL_360;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v212) = 0;
                  }
LABEL_360:
                  unint64_t v213 = v208 + 1;
                }

                else
                {
                  char v210 = 0;
                  unsigned int v211 = 0;
                  uint64_t v212 = 0LL;
                  while (1)
                  {
                    unint64_t v213 = v202 + 1;
                    *((void *)this + 1) = v202 + 1;
                    char v214 = *(_BYTE *)(v203 + v202);
                    v212 |= (unint64_t)(v214 & 0x7F) << v210;
                    if ((v214 & 0x80) == 0) {
                      break;
                    }
                    v210 += 7;
                    unint64_t v202 = v213;
                    BOOL v66 = v211++ > 8;
                    if (v66)
                    {
                      LODWORD(v212) = 0;
                      break;
                    }
                  }
                }

                *((_DWORD *)v53 - 1) = v212;
              }

              while (v213 < v201 && !*((_BYTE *)this + 24));
            }

            goto LABEL_410;
          }

          unint64_t v264 = *(char **)(a1 + 184);
          unint64_t v263 = *(void *)(a1 + 192);
          if ((unint64_t)v264 >= v263)
          {
            unint64_t v303 = (char *)*v420;
            uint64_t v304 = (v264 - (_BYTE *)*v420) >> 2;
            unint64_t v305 = v304 + 1;
            if ((unint64_t)(v304 + 1) >> 62) {
LABEL_722:
            }
              sub_100007008();
            uint64_t v306 = v263 - (void)v303;
            if (v306 >> 1 > v305) {
              unint64_t v305 = v306 >> 1;
            }
            else {
              unint64_t v307 = v305;
            }
            if (v307)
            {
              char v308 = (char *)sub_10000956C((uint64_t)v422, v307);
              unint64_t v303 = *(char **)(a1 + 176);
              unint64_t v264 = *(char **)(a1 + 184);
            }

            else
            {
              char v308 = 0LL;
            }

            unint64_t v388 = &v308[4 * v304];
            *(_DWORD *)unint64_t v388 = 0;
            int v252 = v388 + 4;
            while (v264 != v303)
            {
              int v389 = *((_DWORD *)v264 - 1);
              v264 -= 4;
              *((_DWORD *)v388 - 1) = v389;
              v388 -= 4;
            }

            *(void *)(a1 + 176) = v388;
            *(void *)(a1 + 184) = v252;
            *(void *)(a1 + 192) = &v308[4 * v307];
            if (v303) {
              operator delete(v303);
            }
          }

          else
          {
            *(_DWORD *)unint64_t v264 = 0;
            int v252 = v264 + 4;
          }

          *(void *)(a1 + 184) = v252;
          unint64_t v390 = *((void *)this + 1);
          unint64_t v391 = *((void *)this + 2);
          uint64_t v392 = *(void *)this;
          char v393 = 0;
          unsigned int v394 = 0;
          if (v390 <= 0xFFFFFFFFFFFFFFF5LL && v390 + 10 <= v391)
          {
            uint64_t v325 = 0LL;
            while (1)
            {
              unint64_t v398 = v390 + 1;
              *((void *)this + 1) = v390 + 1;
              char v399 = *(_BYTE *)(v392 + v390);
              v325 |= (unint64_t)(v399 & 0x7F) << v393;
              if ((v399 & 0x80) == 0) {
                goto LABEL_705;
              }
              v393 += 7;
              unint64_t v390 = v398;
              BOOL v66 = v394++ > 8;
              if (v66) {
                goto LABEL_704;
              }
            }
          }

          uint64_t v325 = 0LL;
          if (v391 <= v390) {
            unint64_t v391 = *((void *)this + 1);
          }
          while (v391 != v390)
          {
            unint64_t v396 = v390 + 1;
            char v397 = *(_BYTE *)(v392 + v390);
            *((void *)this + 1) = v396;
            v325 |= (unint64_t)(v397 & 0x7F) << v393;
            if ((v397 & 0x80) == 0) {
              goto LABEL_698;
            }
            v393 += 7;
            unint64_t v390 = v396;
            BOOL v66 = v394++ > 8;
            if (v66) {
              goto LABEL_704;
            }
          }

          goto LABEL_697;
        case 0xCu:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v424, v27, a4) & 1) != 0) {
              return 0LL;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((_BYTE *)this + 24))
            {
              char v53 = *(char **)(a1 + 112);
              do
              {
                if ((unint64_t)v53 >= *v423)
                {
                  uint64_t v215 = (char *)*v421;
                  uint64_t v216 = (v53 - (_BYTE *)*v421) >> 2;
                  unint64_t v217 = v216 + 1;
                  uint64_t v218 = *v423 - (void)v215;
                  if (v218 >> 1 > v217) {
                    unint64_t v217 = v218 >> 1;
                  }
                  else {
                    unint64_t v219 = v217;
                  }
                  if (v219)
                  {
                    char v220 = (char *)sub_10000956C((uint64_t)v423, v219);
                    uint64_t v215 = *(char **)(a1 + 104);
                    char v53 = *(char **)(a1 + 112);
                  }

                  else
                  {
                    char v220 = 0LL;
                  }

                  uint64_t v221 = &v220[4 * v216];
                  *(_DWORD *)uint64_t v221 = 0;
                  unint64_t v222 = v221 + 4;
                  while (v53 != v215)
                  {
                    int v223 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v221 - 1) = v223;
                    v221 -= 4;
                  }

                  *(void *)(a1 + 104) = v221;
                  *(void *)(a1 + 112) = v222;
                  *(void *)(a1 + 120) = &v220[4 * v219];
                  if (v215) {
                    operator delete(v215);
                  }
                  char v53 = v222;
                }

                else
                {
                  *(_DWORD *)char v53 = 0;
                  v53 += 4;
                }

                *(void *)(a1 + 112) = v53;
                unint64_t v225 = *((void *)this + 1);
                unint64_t v224 = *((void *)this + 2);
                uint64_t v226 = *(void *)this;
                if (v225 <= 0xFFFFFFFFFFFFFFF5LL && v225 + 10 <= v224)
                {
                  char v233 = 0;
                  unsigned int v234 = 0;
                  uint64_t v235 = 0LL;
                  while (1)
                  {
                    unint64_t v236 = v225 + 1;
                    *((void *)this + 1) = v225 + 1;
                    char v237 = *(_BYTE *)(v226 + v225);
                    v235 |= (unint64_t)(v237 & 0x7F) << v233;
                    if ((v237 & 0x80) == 0) {
                      goto LABEL_406;
                    }
                    v233 += 7;
                    unint64_t v225 = v236;
                    BOOL v66 = v234++ > 8;
                    if (v66)
                    {
                      LODWORD(v235) = 0;
                      goto LABEL_406;
                    }
                  }
                }

                char v228 = 0;
                unsigned int v229 = 0;
                uint64_t v235 = 0LL;
                if (v224 <= v225) {
                  uint64_t v230 = *((void *)this + 1);
                }
                else {
                  uint64_t v230 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v230 == v225)
                  {
LABEL_409:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v53 - 1) = 0;
                    goto LABEL_410;
                  }

                  unint64_t v231 = v225++;
                  char v232 = *(_BYTE *)(v226 + v231);
                  *((void *)this + 1) = v225;
                  v235 |= (unint64_t)(v232 & 0x7F) << v228;
                  if ((v232 & 0x80) == 0) {
                    break;
                  }
                  v228 += 7;
                  BOOL v66 = v229++ > 8;
                  if (v66)
                  {
                    LODWORD(v235) = 0;
                    goto LABEL_405;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v235) = 0;
                }
LABEL_405:
                unint64_t v236 = v231 + 1;
LABEL_406:
                *((_DWORD *)v53 - 1) = v235;
              }

              while (v236 < v224 && !*((_BYTE *)this + 24));
            }

LABEL_410:
            PB::Reader::recallMark(this, v424);
          }

          else
          {
            BOOL v266 = *(char **)(a1 + 112);
            unint64_t v265 = *(void *)(a1 + 120);
            if ((unint64_t)v266 >= v265)
            {
              char v309 = (char *)*v421;
              uint64_t v310 = (v266 - (_BYTE *)*v421) >> 2;
              unint64_t v311 = v310 + 1;
              if ((unint64_t)(v310 + 1) >> 62) {
LABEL_723:
              }
                sub_100007008();
              uint64_t v312 = v265 - (void)v309;
              if (v312 >> 1 > v311) {
                unint64_t v311 = v312 >> 1;
              }
              else {
                unint64_t v313 = v311;
              }
              if (v313)
              {
                unsigned int v314 = (char *)sub_10000956C((uint64_t)v423, v313);
                char v309 = *(char **)(a1 + 104);
                BOOL v266 = *(char **)(a1 + 112);
              }

              else
              {
                unsigned int v314 = 0LL;
              }

              unint64_t v400 = &v314[4 * v310];
              *(_DWORD *)unint64_t v400 = 0;
              int v252 = v400 + 4;
              while (v266 != v309)
              {
                int v401 = *((_DWORD *)v266 - 1);
                v266 -= 4;
                *((_DWORD *)v400 - 1) = v401;
                v400 -= 4;
              }

              *(void *)(a1 + 104) = v400;
              *(void *)(a1 + 112) = v252;
              *(void *)(a1 + 120) = &v314[4 * v313];
              if (v309) {
                operator delete(v309);
              }
            }

            else
            {
              *(_DWORD *)BOOL v266 = 0;
              int v252 = v266 + 4;
            }

            *(void *)(a1 + 112) = v252;
            unint64_t v402 = *((void *)this + 1);
            unint64_t v403 = *((void *)this + 2);
            uint64_t v404 = *(void *)this;
            char v405 = 0;
            unsigned int v406 = 0;
            if (v402 > 0xFFFFFFFFFFFFFFF5LL || v402 + 10 > v403)
            {
              uint64_t v325 = 0LL;
              if (v403 <= v402) {
                unint64_t v403 = *((void *)this + 1);
              }
              while (v403 != v402)
              {
                unint64_t v408 = v402 + 1;
                char v409 = *(_BYTE *)(v404 + v402);
                *((void *)this + 1) = v408;
                v325 |= (unint64_t)(v409 & 0x7F) << v405;
                if ((v409 & 0x80) == 0)
                {
LABEL_698:
                  if (*((_BYTE *)this + 24)) {
                    LODWORD(v325) = 0;
                  }
                  goto LABEL_705;
                }

                v405 += 7;
                unint64_t v402 = v408;
                BOOL v66 = v406++ > 8;
                if (v66)
                {
LABEL_704:
                  LODWORD(v325) = 0;
                  goto LABEL_705;
                }
              }

LABEL_697:
              LODWORD(v325) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v325 = 0LL;
              while (1)
              {
                unint64_t v410 = v402 + 1;
                *((void *)this + 1) = v402 + 1;
                char v411 = *(_BYTE *)(v404 + v402);
                v325 |= (unint64_t)(v411 & 0x7F) << v405;
                if ((v411 & 0x80) == 0) {
                  break;
                }
                v405 += 7;
                unint64_t v402 = v410;
                BOOL v66 = v406++ > 8;
                if (v66) {
                  goto LABEL_704;
                }
              }
            }

LABEL_705:
            *(v252 - 1) = v325;
          }

LABEL_706:
          unint64_t v4 = *((void *)this + 1);
          unint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this, v19 >> 3, v19 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_706;
      }
    }

    char v22 = 0;
    unsigned int v23 = 0;
    unint64_t v19 = 0LL;
    if (v4 > v5) {
      unint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      unint64_t v24 = v4 + 1;
      char v25 = *(_BYTE *)(v16 + v4);
      *((void *)this + 1) = v24;
      v19 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_21;
      }
      v22 += 7;
      unint64_t v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        unint64_t v19 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

uint64_t sub_1010E9358(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 224);
  if ((v4 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 208), 1u);
    char v4 = *(_BYTE *)(v3 + 224);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_33:
      double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 220), 3u);
      if ((*(_BYTE *)(v3 + 224) & 4) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(result + 224) & 1) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 200), 2u);
  char v4 = *(_BYTE *)(v3 + 224);
  if ((v4 & 8) != 0) {
    goto LABEL_33;
  }
LABEL_4:
  if ((v4 & 4) != 0) {
LABEL_5:
  }
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 216), 4u);
LABEL_6:
  unint64_t v5 = *(unsigned int **)(v3 + 8);
  int v6 = *(unsigned int **)(v3 + 16);
  while (v5 != v6)
  {
    unsigned int v7 = *v5++;
    double result = PB::Writer::writeVarInt(this, v7, 5u);
  }

  uint64_t v8 = *(unsigned int **)(v3 + 32);
  int v9 = *(unsigned int **)(v3 + 40);
  while (v8 != v9)
  {
    unsigned int v10 = *v8++;
    double result = PB::Writer::writeVarInt(this, v10, 6u);
  }

  int v11 = *(unsigned int **)(v3 + 56);
  unint64_t v12 = *(unsigned int **)(v3 + 64);
  while (v11 != v12)
  {
    unsigned int v13 = *v11++;
    double result = PB::Writer::writeVarInt(this, v13, 7u);
  }

  BOOL v14 = *(unsigned int **)(v3 + 80);
  char v15 = *(unsigned int **)(v3 + 88);
  while (v14 != v15)
  {
    unsigned int v16 = *v14++;
    double result = PB::Writer::writeVarInt(this, v16, 8u);
  }

  char v17 = *(unsigned int **)(v3 + 128);
  unsigned int v18 = *(unsigned int **)(v3 + 136);
  while (v17 != v18)
  {
    unsigned int v19 = *v17++;
    double result = PB::Writer::writeVarInt(this, v19, 9u);
  }

  unint64_t v20 = *(unsigned int **)(v3 + 152);
  char v21 = *(unsigned int **)(v3 + 160);
  while (v20 != v21)
  {
    unsigned int v22 = *v20++;
    double result = PB::Writer::writeVarInt(this, v22, 0xAu);
  }

  unsigned int v23 = *(unsigned int **)(v3 + 176);
  unint64_t v24 = *(unsigned int **)(v3 + 184);
  while (v23 != v24)
  {
    unsigned int v25 = *v23++;
    double result = PB::Writer::writeVarInt(this, v25, 0xBu);
  }

  uint64_t v27 = *(unsigned int **)(v3 + 104);
  unsigned int v26 = *(unsigned int **)(v3 + 112);
  while (v27 != v26)
  {
    unsigned int v28 = *v27++;
    double result = PB::Writer::writeVarInt(this, v28, 0xCu);
  }

  return result;
}

uint64_t sub_1010E94F0(uint64_t result)
{
  *(void *)double result = &off_10189B268;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_1010E9508(PB::Base *a1)
{
}

uint64_t sub_1010E951C(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10189B268;
  *(_DWORD *)(result + 56) = 0;
  __int16 v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 4) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 24);
    __int16 v3 = 4;
    *(_WORD *)(result + 56) = 4;
    *(_DWORD *)(result + 24) = v4;
    __int16 v2 = *(_WORD *)(a2 + 56);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 36);
    v3 |= 0x20u;
    *(_WORD *)(result + 56) = v3;
    *(_DWORD *)(result + 36) = v5;
    __int16 v2 = *(_WORD *)(a2 + 56);
  }

uint64_t sub_1010E9650(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "base", *(float *)(a1 + 24));
    __int16 v5 = *(_WORD *)(a1 + 56);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "broken", *(_DWORD *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_1010E97C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010E9FAC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 56);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 2u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

double sub_1010EA0E8(uint64_t a1)
{
  *(void *)a1 = off_10189B2A0;
  *(_DWORD *)(a1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

void sub_1010EA114(uint64_t a1)
{
  *(void *)a1 = off_10189B2A0;
  __int16 v4 = (void **)(a1 + 56);
  sub_1004CADB0(&v4);
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }

  PB::Base::~Base((PB::Base *)a1);
}

void sub_1010EA180(uint64_t a1)
{
}

uint64_t sub_1010EA194(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  __int16 v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  __int16 v5 = (char **)(a1 + 56);
  *(void *)a1 = off_10189B2A0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0LL;
  if ((*(_BYTE *)(a2 + 104) & 8) == 0)
  {
    char v6 = 4;
    if ((*(_BYTE *)(a2 + 104) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v7 = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 104) = 8;
  *(_DWORD *)(a1 + 92) = v7;
  char v6 = 12;
  if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = v6;
    *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = v8;
  }

uint64_t sub_1010EA310(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 104);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "conchaDropped", *(_DWORD *)(a1 + 80));
    char v5 = *(_BYTE *)(a1 + 104);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((*(_BYTE *)(a1 + 104) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "conchaRecovered", *(_DWORD *)(a1 + 84));
  char v5 = *(_BYTE *)(a1 + 104);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

BOOL sub_1010EA494(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    char v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    int v14 = (char **)(a1 + 56);
    while (1)
    {
      uint64_t v15 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0LL;
      while (1)
      {
        unint64_t v19 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v4 = v19;
        BOOL v21 = v17++ > 8;
        if (v21) {
          goto LABEL_20;
        }
      }

LABEL_224:
          unint64_t v4 = *((void *)this + 1);
          unint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 6u:
          *(_BYTE *)(a1 + 104) |= 1u;
          unint64_t v75 = *((void *)this + 1);
          unint64_t v76 = *((void *)this + 2);
          uint64_t v77 = *(void *)this;
          if (v75 <= 0xFFFFFFFFFFFFFFF5LL && v75 + 10 <= v76)
          {
            char v78 = 0;
            unsigned int v79 = 0;
            uint64_t v80 = 0LL;
            do
            {
              unint64_t v81 = v75 + 1;
              *((void *)this + 1) = v75 + 1;
              char v82 = *(_BYTE *)(v77 + v75);
              v80 |= (unint64_t)(v82 & 0x7F) << v78;
              if ((v82 & 0x80) == 0) {
                goto LABEL_196;
              }
              v78 += 7;
              unint64_t v75 = v81;
              BOOL v21 = v79++ > 8;
            }

            while (!v21);
LABEL_142:
            LODWORD(v80) = 0;
            goto LABEL_196;
          }

          char v120 = 0;
          unsigned int v121 = 0;
          uint64_t v80 = 0LL;
          if (v76 <= v75) {
            unint64_t v76 = *((void *)this + 1);
          }
          while (2)
          {
            if (v76 == v75)
            {
              LODWORD(v80) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v122 = v75 + 1;
              char v123 = *(_BYTE *)(v77 + v75);
              *((void *)this + 1) = v122;
              v80 |= (unint64_t)(v123 & 0x7F) << v120;
              if (v123 < 0)
              {
                v120 += 7;
                unint64_t v75 = v122;
                BOOL v21 = v121++ > 8;
                if (v21) {
                  goto LABEL_142;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v80) = 0;
              }
            }

            break;
          }

uint64_t sub_1010EAF98(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 104);
  if ((v4 & 8) != 0)
  {
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 92), 1u);
    char v4 = *(_BYTE *)(v3 + 104);
  }

  if ((v4 & 4) != 0) {
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 2u);
  }
  unint64_t v5 = *(const PB::Base ***)(v3 + 56);
  int v6 = *(const PB::Base ***)(v3 + 64);
  while (v5 != v6)
  {
    int v7 = *v5++;
    double result = PB::Writer::writeSubmessage(this, v7, 3u);
  }

  float v8 = *(float **)(v3 + 8);
  char v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    double result = PB::Writer::write(this, v10, 4u);
  }

  uint64_t v11 = *(float **)(v3 + 32);
  char v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    double result = PB::Writer::write(this, v13, 5u);
  }

  char v14 = *(_BYTE *)(v3 + 104);
  if ((v14 & 1) != 0)
  {
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 6u);
    char v14 = *(_BYTE *)(v3 + 104);
    if ((v14 & 0x10) == 0)
    {
LABEL_16:
      if ((v14 & 2) == 0) {
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }

  else if ((*(_BYTE *)(v3 + 104) & 0x10) == 0)
  {
    goto LABEL_16;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 7u);
  char v14 = *(_BYTE *)(v3 + 104);
  if ((v14 & 2) == 0)
  {
LABEL_17:
    if ((v14 & 0x20) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 9u);
  }

uint64_t sub_1010EB0C8(uint64_t result)
{
  *(void *)double result = &off_10189B2D8;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1010EB0E0(PB::Base *a1)
{
}

uint64_t sub_1010EB0F4(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10189B2D8;
  *(_DWORD *)(result + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 44) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 44) = v3;
    *(_DWORD *)(result + 20) = v5;
    char v2 = *(_BYTE *)(a2 + 44);
  }

uint64_t sub_1010EB1F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "conchaTemp", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_1010EB320(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010EBAA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

double sub_1010EBBA4(uint64_t a1)
{
  *(void *)a1 = off_10189B310;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0LL;
  return result;
}

void sub_1010EBBC4(uint64_t a1)
{
  *(void *)a1 = off_10189B310;
  char v4 = *(void ***)(a1 + 40);
  unint64_t v2 = (void *)(a1 + 40);
  uint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  sub_1010DD450((void ***)(a1 + 32), 0LL);
  char v5 = *(void ***)(a1 + 24);
  *(void *)(a1 + 24) = 0LL;
  if (v5) {
    sub_10058A4FC(a1 + 24, v5);
  }
  sub_1010DD450((void ***)(a1 + 16), 0LL);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1010EBC48(uint64_t a1)
{
}

uint64_t sub_1010EBC5C(uint64_t a1, void *a2)
{
  *(void *)a1 = off_10189B310;
  char v4 = (void ***)(a1 + 32);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v5 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v6 = (void ***)(a1 + 24);
  *(void *)(a1 + 40) = 0LL;
  int v7 = (void ***)(a1 + 40);
  uint64_t v8 = a2[1];
  if (v8)
  {
    char v9 = operator new(0x28uLL);
    uint64_t v10 = sub_1010E379C((uint64_t)v9, v8);
    uint64_t v11 = *v5;
    *char v5 = v10;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
  }

  unint64_t v12 = (const Data *)a2[2];
  if (v12)
  {
    char v13 = (PB::Data *)operator new(0x10uLL);
    PB::Data::Data(v13, v12);
    sub_1010DD450((void ***)(a1 + 16), (void **)v13);
  }

  BOOL v14 = (const Data *)a2[4];
  if (v14)
  {
    char v15 = (PB::Data *)operator new(0x10uLL);
    PB::Data::Data(v15, v14);
    sub_1010DD450(v4, (void **)v15);
  }

  unsigned int v16 = (__int128 *)a2[3];
  if (v16)
  {
    unint64_t v17 = (void **)operator new(0x18uLL);
    char v18 = v17;
    if (*((char *)v16 + 23) < 0)
    {
      sub_1010DD48C(v17, *(void **)v16, *((void *)v16 + 1));
    }

    else
    {
      __int128 v19 = *v16;
      v17[2] = (void *)*((void *)v16 + 2);
      *(_OWORD *)unint64_t v17 = v19;
    }

    char v20 = *v6;
    *uint64_t v6 = v18;
    if (v20) {
      sub_10058A4FC((int)v6, v20);
    }
  }

  unint64_t v21 = (__int128 *)a2[5];
  if (v21)
  {
    uint64_t v22 = (void **)operator new(0x18uLL);
    char v23 = v22;
    if (*((char *)v21 + 23) < 0)
    {
      sub_1010DD48C(v22, *(void **)v21, *((void *)v21 + 1));
    }

    else
    {
      __int128 v24 = *v21;
      v22[2] = (void *)*((void *)v21 + 2);
      *(_OWORD *)uint64_t v22 = v24;
    }

    uint64_t v25 = *v7;
    const PB::Base *v7 = v23;
    if (v25) {
      sub_10058A4FC((int)v7, v25);
    }
  }

  return a1;
}

uint64_t sub_1010EBDF0(void *a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = a1[1];
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "config");
  }
  uint64_t v6 = (const Data *)a1[2];
  if (v6) {
    PB::TextFormatter::format(this, "oscl", v6);
  }
  if (a1[3]) {
    PB::TextFormatter::format(this, "osclString");
  }
  int v7 = (const Data *)a1[4];
  if (v7) {
    PB::TextFormatter::format(this, "pdtc", v7);
  }
  if (a1[5]) {
    PB::TextFormatter::format(this, "pdtcString");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010EBEA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void ***)(a1 + 40);
    char v9 = (void ***)(a1 + 24);
    uint64_t v10 = (void ***)(a1 + 32);
    uint64_t v11 = (void ***)(a1 + 16);
    while (2)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(_BYTE *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0LL;
            goto LABEL_21;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v13 = 0;
        unsigned int v14 = 0;
        unint64_t v15 = 0LL;
        while (1)
        {
          unint64_t v16 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v17 = *(_BYTE *)(v12 + v2);
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            break;
          }
          v13 += 7;
          unint64_t v2 = v16;
          if (v14++ > 8) {
            goto LABEL_20;
          }
        }

uint64_t sub_1010EC184(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  uint64_t v5 = (const PB::Data *)v3[2];
  if (v5) {
    uint64_t result = PB::Writer::write(this, v5, 2u);
  }
  uint64_t v6 = (const PB::Data *)v3[4];
  if (v6) {
    uint64_t result = PB::Writer::write(this, v6, 3u);
  }
  uint64_t v7 = v3[3];
  if (v7) {
    uint64_t result = PB::Writer::write(this, v7, 4LL);
  }
  uint64_t v8 = v3[5];
  if (v8) {
    return PB::Writer::write(this, v8, 5LL);
  }
  return result;
}

uint64_t sub_1010EC210(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B348;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1010EC228(PB::Base *a1)
{
}

uint64_t sub_1010EC23C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189B348;
  *(_DWORD *)(result + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(result + 32) = v3;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_1010EC300(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "asleep", *(_BYTE *)(a1 + 28));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "averageConfidence", *(_DWORD *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_1010EC3F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010EC8F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 28), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_1010EC9BC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B380;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010EC9D4(PB::Base *a1)
{
}

uint64_t sub_1010EC9E8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189B380;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(result + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010ECA74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "activity", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "confidenceLevel", *(_DWORD *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "sequenceNumber", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010ECB24(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(_BYTE *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010ED038(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 4u);
  }

uint64_t sub_1010ED0CC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B3B8;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 40) = 0LL;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1010ED0E4(PB::Base *this)
{
  *(void *)this = &off_10189B3B8;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  PB::Base::~Base(this);
}

void sub_1010ED144(PB::Base *a1)
{
}

uint64_t sub_1010ED158(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B3B8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 60) = 0;
  char v4 = *(_BYTE *)(a2 + 60);
  if ((v4 & 4) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    char v5 = 4;
    *(_BYTE *)(a1 + 60) = 4;
    *(void *)(a1 + 32) = v6;
    char v4 = *(_BYTE *)(a2 + 60);
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v5 = 0;
  if ((*(_BYTE *)(a2 + 60) & 0x10) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 52);
    v5 |= 0x10u;
    *(_BYTE *)(a1 + 60) = v5;
    *(_DWORD *)(a1 + 52) = v7;
    char v4 = *(_BYTE *)(a2 + 60);
  }

uint64_t sub_1010ED2B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 60) & 0x20) != 0) {
    PB::TextFormatter::format(this, "detectedSteps", *(_BYTE *)(a1 + 56));
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))( v5,  this,  "firstStepFeatures");
  }
  char v6 = *(_BYTE *)(a1 + 60);
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(this, "fsmEndState", *(_DWORD *)(a1 + 48));
    char v6 = *(_BYTE *)(a1 + 60);
    if ((v6 & 0x10) == 0)
    {
LABEL_7:
      if ((v6 & 1) == 0) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
  }

  else if ((*(_BYTE *)(a1 + 60) & 0x10) == 0)
  {
    goto LABEL_7;
  }

  PB::TextFormatter::format(this, "fsmStartState", *(_DWORD *)(a1 + 52));
  char v6 = *(_BYTE *)(a1 + 60);
  if ((v6 & 1) == 0)
  {
LABEL_8:
    if ((v6 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }

uint64_t sub_1010ED3E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_1010ED8B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 60);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((*(_BYTE *)(result + 60) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 2u);
  char v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_1010ED9B0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B3F0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1010ED9C8(PB::Base *this)
{
  *(void *)this = &off_10189B3F0;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1010EDA08(PB::Base *a1)
{
}

uint64_t sub_1010EDA1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B3F0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v3 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 52) = 0;
  char v4 = *(_BYTE *)(a2 + 52);
  if ((v4 & 4) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 44);
    char v5 = 4;
    *(_BYTE *)(a1 + 52) = 4;
    *(_DWORD *)(a1 + 44) = v6;
    char v4 = *(_BYTE *)(a2 + 52);
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v5 = 0;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
LABEL_5:
    uint64_t v7 = *(void *)(a2 + 32);
    v5 |= 1u;
    *(_BYTE *)(a1 + 52) = v5;
    *(void *)(a1 + 32) = v7;
    char v4 = *(_BYTE *)(a2 + 52);
  }

uint64_t sub_1010EDAEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "hostState", *(_DWORD *)(a1 + 40));
    char v5 = *(_BYTE *)(a1 + 52);
  }

  if ((v5 & 4) != 0) {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 44));
  }
  int v6 = *(int **)(a1 + 8);
  uint64_t v7 = *(int **)(a1 + 16);
  while (v6 != v7)
  {
    int v8 = *v6++;
    PB::TextFormatter::format(this, "s7q8", v8);
  }

  char v9 = *(_BYTE *)(a1 + 52);
  if ((v9 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sensorState", *(_DWORD *)(a1 + 48));
    char v9 = *(_BYTE *)(a1 + 52);
  }

  if ((v9 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010EDBC8(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    int v10 = (void **)(a1 + 8);
    unint64_t v11 = (void *)(a1 + 24);
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        BOOL v62 = v14++ > 8;
        if (v62) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010EE390(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 52);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 44), 1u);
    char v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_12:
      uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 3u);
      if ((*(_BYTE *)(v3 + 52) & 2) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(result + 52) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  char v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) != 0) {
    goto LABEL_12;
  }
LABEL_4:
  if ((v4 & 2) != 0) {
LABEL_5:
  }
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 4u);
LABEL_6:
  int v6 = *(int **)(v3 + 8);
  unint64_t v5 = *(int **)(v3 + 16);
  while (v6 != v5)
  {
    int v7 = *v6++;
    uint64_t result = PB::Writer::writeVarInt(this, v7, 5u);
  }

  return result;
}

double sub_1010EE448(uint64_t a1)
{
  *(void *)a1 = &off_10189B428;
  *(_DWORD *)(a1 + 192) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

void sub_1010EE484(PB::Base *this)
{
  *(void *)this = &off_10189B428;
  unint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }

  char v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }

  unint64_t v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v5;
    operator delete(v5);
  }

  int v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }

  int v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }

  PB::Base::~Base(this);
}

void sub_1010EE514(PB::Base *a1)
{
}

uint64_t sub_1010EE528(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &off_10189B428;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if ((*(_WORD *)(a2 + 192) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 152);
    *(_WORD *)(a1 + 192) = 1;
    *(void *)(a1 + 152) = v5;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_10004C5F8( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  }

  __int16 v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 0x80) != 0)
  {
    int v9 = *(_DWORD *)(a2 + 184);
    *(_WORD *)(a1 + 192) |= 0x80u;
    *(_DWORD *)(a1 + 184) = v9;
    __int16 v6 = *(_WORD *)(a2 + 192);
    if ((v6 & 0x40) == 0)
    {
LABEL_7:
      if ((v6 & 0x100) == 0) {
        goto LABEL_8;
      }
      goto LABEL_19;
    }
  }

  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_7;
  }

  int v10 = *(_DWORD *)(a2 + 180);
  *(_WORD *)(a1 + 192) |= 0x40u;
  *(_DWORD *)(a1 + 180) = v10;
  __int16 v6 = *(_WORD *)(a2 + 192);
  if ((v6 & 0x100) == 0)
  {
LABEL_8:
    if ((v6 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

uint64_t sub_1010EE738(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(float **)(a1 + 8);
  __int16 v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "accelDecimated", v7);
  }

  if ((*(_WORD *)(a1 + 192) & 2) != 0) {
    PB::TextFormatter::format(this, "accelFrontVariance", *(float *)(a1 + 160));
  }
  int v8 = *(float **)(a1 + 32);
  int v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "accelMean", v10);
  }

  int v11 = *(float **)(a1 + 56);
  int v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "accelNormAutocorr", v13);
  }

  __int16 v14 = *(_WORD *)(a1 + 192);
  if ((v14 & 4) != 0)
  {
    PB::TextFormatter::format(this, "accelNormMean", *(float *)(a1 + 164));
    __int16 v14 = *(_WORD *)(a1 + 192);
  }

  if ((v14 & 8) != 0) {
    PB::TextFormatter::format(this, "accelNormVariance", *(float *)(a1 + 168));
  }
  int v15 = *(float **)(a1 + 80);
  unint64_t v16 = *(float **)(a1 + 88);
  while (v15 != v16)
  {
    float v17 = *v15++;
    PB::TextFormatter::format(this, "accelVariance", v17);
  }

  __int16 v18 = *(_WORD *)(a1 + 192);
  if ((v18 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "currentAngleDelta", *(float *)(a1 + 172));
    __int16 v18 = *(_WORD *)(a1 + 192);
    if ((v18 & 0x20) == 0)
    {
LABEL_17:
      if ((v18 & 0x40) == 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }

  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_17;
  }

  PB::TextFormatter::format(this, "currentMotionState", *(_DWORD *)(a1 + 176));
  if ((*(_WORD *)(a1 + 192) & 0x40) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(this, "lagAtMaxAutocorr", *(_DWORD *)(a1 + 180));
LABEL_19:
  unsigned int v19 = *(float **)(a1 + 104);
  unint64_t v20 = *(float **)(a1 + 112);
  while (v19 != v20)
  {
    float v21 = *v19++;
    PB::TextFormatter::format(this, "lastBaseline", v21);
  }

  __int16 v22 = *(_WORD *)(a1 + 192);
  if ((v22 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "maxAutocorr", *(float *)(a1 + 184));
    __int16 v22 = *(_WORD *)(a1 + 192);
  }

  if ((v22 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  }
  uint64_t v23 = *(float **)(a1 + 128);
  unint64_t v24 = *(float **)(a1 + 136);
  while (v23 != v24)
  {
    float v25 = *v23++;
    PB::TextFormatter::format(this, "walkingBaseline", v25);
  }

  if ((*(_WORD *)(a1 + 192) & 0x100) != 0) {
    PB::TextFormatter::format(this, "widthAtMaxAutocorr", *(_DWORD *)(a1 + 188));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010EE988(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v222 = a1 + 144;
    unint64_t v224 = (void **)(a1 + 104);
    unint64_t v225 = (void **)(a1 + 128);
    int v223 = (void **)(a1 + 56);
    uint64_t v220 = a1 + 72;
    uint64_t v221 = a1 + 120;
    float v10 = (void **)(a1 + 80);
    int v11 = (void **)(a1 + 32);
    uint64_t v218 = a1 + 48;
    uint64_t v219 = a1 + 96;
    int v12 = (void **)(a1 + 8);
    uint64_t v217 = a1 + 24;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0LL;
      while (1)
      {
        unint64_t v17 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v18 = *(_BYTE *)(v13 + v4);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v4 = v17;
        BOOL v19 = v15++ > 8;
        if (v19) {
          goto LABEL_20;
        }
      }

LABEL_299:
          *(_DWORD *)(a1 + 18_Block_object_dispose(va, 8) = v98;
          goto LABEL_351;
        case 9u:
          *(_WORD *)(a1 + 192) |= 4u;
          unint64_t v101 = *((void *)this + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)this + 2)) {
            goto LABEL_347;
          }
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v101);
          goto LABEL_349;
        case 0xAu:
          *(_WORD *)(a1 + 192) |= 8u;
          unint64_t v102 = *((void *)this + 1);
          if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((void *)this + 2)) {
            goto LABEL_347;
          }
          *(_DWORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v102);
          goto LABEL_349;
        case 0xBu:
          *(_WORD *)(a1 + 192) |= 0x20u;
          unint64_t v103 = *((void *)this + 1);
          unint64_t v104 = *((void *)this + 2);
          uint64_t v105 = *(void *)this;
          if (v103 <= 0xFFFFFFFFFFFFFFF5LL && v103 + 10 <= v104)
          {
            char v106 = 0;
            unsigned int v107 = 0;
            uint64_t v108 = 0LL;
            do
            {
              unint64_t v109 = v103 + 1;
              *((void *)this + 1) = v103 + 1;
              char v110 = *(_BYTE *)(v105 + v103);
              v108 |= (unint64_t)(v110 & 0x7F) << v106;
              if ((v110 & 0x80) == 0) {
                goto LABEL_302;
              }
              v106 += 7;
              unint64_t v103 = v109;
              BOOL v19 = v107++ > 8;
            }

            while (!v19);
LABEL_238:
            LODWORD(v10_Block_object_dispose(va, 8) = 0;
            goto LABEL_302;
          }

          char v158 = 0;
          unsigned int v159 = 0;
          uint64_t v108 = 0LL;
          if (v104 <= v103) {
            unint64_t v104 = *((void *)this + 1);
          }
          while (2)
          {
            if (v104 == v103)
            {
              LODWORD(v10_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v160 = v103 + 1;
              char v161 = *(_BYTE *)(v105 + v103);
              *((void *)this + 1) = v160;
              v108 |= (unint64_t)(v161 & 0x7F) << v158;
              if (v161 < 0)
              {
                v158 += 7;
                unint64_t v103 = v160;
                BOOL v19 = v159++ > 8;
                if (v19) {
                  goto LABEL_238;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v10_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

        *(_DWORD *)(a1 + 112) = v138;
        goto LABEL_304;
      case 0x19u:
        char v73 = operator new(0x10uLL);
        sub_101184490((uint64_t)v73);
        unint64_t v141 = *(void *)(a1 + 56);
        *(void *)(a1 + 56) = v73;
        if (v141)
        {
          (*(void (**)(uint64_t))(*(void *)v141 + 8LL))(v141);
          char v73 = *(void **)(a1 + 56);
        }

uint64_t sub_1010EF9C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_WORD *)(result + 192) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 152), 1u);
  }
  unint64_t v4 = *(float **)(v3 + 8);
  unint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  float v7 = *(float **)(v3 + 32);
  int v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  float v10 = *(float **)(v3 + 80);
  int v11 = *(float **)(v3 + 88);
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12, 4u);
  }

  uint64_t v13 = *(float **)(v3 + 56);
  char v14 = *(float **)(v3 + 64);
  while (v13 != v14)
  {
    float v15 = *v13++;
    double result = PB::Writer::write(this, v15, 5u);
  }

  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x80) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 184), 6u);
    __int16 v16 = *(_WORD *)(v3 + 192);
    if ((v16 & 0x40) == 0)
    {
LABEL_17:
      if ((v16 & 0x100) == 0) {
        goto LABEL_18;
      }
      goto LABEL_33;
    }
  }

  else if ((v16 & 0x40) == 0)
  {
    goto LABEL_17;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 180), 7u);
  __int16 v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x100) == 0)
  {
LABEL_18:
    if ((v16 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }

uint64_t sub_1010EFBA0(uint64_t result)
{
  *(void *)double result = &off_10189B460;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1010EFBBC(PB::Base *a1)
{
}

uint64_t sub_1010EFBD0(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10189B460;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  char v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 24) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 20) = v5;
    char v2 = *(_BYTE *)(a2 + 24);
  }

uint64_t sub_1010EFC44(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 24) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "eventTag", *(_DWORD *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 1) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010EFCD4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010F0054(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        return result;
      }
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 24) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  }
  return result;
}

uint64_t sub_1010F00CC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B498;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1010F00E4(PB::Base *a1)
{
}

double sub_1010F00F8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B498;
  *(_DWORD *)(a1 + 40) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    char v3 = 8;
    *(_BYTE *)(a1 + 40) = 8;
    *(double *)(a1 + 32) = result;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 24) = result;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_1010F0184(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "machAbsTimestamp", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "relativeAltitude", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "pressure", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010F0234(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010F0490(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  }

uint64_t sub_1010F0524(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B4D0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1010F053C(PB::Base *a1)
{
}

uint64_t sub_1010F0550(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189B4D0;
  *(_DWORD *)(result + 64) = 0;
  __int16 v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 32);
    __int16 v3 = 16;
    *(_WORD *)(result + 64) = 16;
    *(_DWORD *)(result + 32) = v4;
    __int16 v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 56);
    v3 |= 0x400u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 56) = v5;
    __int16 v2 = *(_WORD *)(a2 + 64);
  }

uint64_t sub_1010F06BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "accelBiasZ", *(float *)(a1 + 24));
    __int16 v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x800) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "accelZ", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_1010F086C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010F0DFC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 32), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((*(_WORD *)(result + 64) & 0x400) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_1010F0F70(uint64_t result)
{
  *(void *)uint64_t result = off_10189B508;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1010F0F84(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B508;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010F0FC4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B508;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1010F1008(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189B508;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    __int16 v5 = operator new(0xA8uLL);
    uint64_t v6 = sub_10110BCF4((uint64_t)v5, v4);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 24) |= 1u;
    *(void *)(a1 + 16) = v8;
  }

  return a1;
}

uint64_t sub_1010F10A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "correction");
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
    PB::TextFormatter::format(this, "lastConvergenceTimestamp", *(double *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010F110C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

double sub_1010F1358(uint64_t a1)
{
  *(void *)a1 = &off_10189C148;
  *(_DWORD *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

uint64_t sub_1010F1394(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    double result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if ((*(_BYTE *)(v3 + 24) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1010F13E8(uint64_t result)
{
  *(void *)double result = &off_10189B540;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1010F1400(PB::Base *a1)
{
}

double sub_1010F1414(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B540;
  *(_DWORD *)(a1 + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    char v3 = 8;
    *(_BYTE *)(a1 + 44) = 8;
    *(double *)(a1 + 32) = result;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 44) = v3;
    *(double *)(a1 + 24) = result;
    char v2 = *(_BYTE *)(a2 + 44);
  }

uint64_t sub_1010F14BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "dThetaNorm", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "lastCorrespondenceTimestamp", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "state", *(_BYTE *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010F158C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010F182C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

void *sub_1010F18DC(void *result)
{
  const char *result = off_10189B578;
  result[1] = 0LL;
  return result;
}

void sub_1010F18EC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B578;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010F192C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B578;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1010F1970(void *a1, uint64_t a2)
{
  *a1 = off_10189B578;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x60uLL);
    uint64_t v5 = sub_1010FEED4((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_1010F19D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010F1A28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010F1C04(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

double sub_1010F1C20(uint64_t a1)
{
  *(void *)a1 = &off_10189B5B0;
  *(void *)(a1 + 72) = 0LL;
  *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1010F1C4C(PB::Base *this)
{
  *(void *)this = &off_10189B5B0;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }

  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_1010F1CB4(PB::Base *a1)
{
}

uint64_t sub_1010F1CC8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B5B0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(void *)(a1 + 72) = 0LL;
  *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v5 = *(void *)(a2 + 72);
  if (v5)
  {
    uint64_t v6 = operator new(0xA0uLL);
    uint64_t v7 = sub_1010F3044((uint64_t)v6, v5);
    uint64_t v8 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v7;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  __int16 v9 = *(_WORD *)(a2 + 116);
  if ((v9 & 0x40) != 0)
  {
    int v15 = *(_DWORD *)(a2 + 96);
    *(_WORD *)(a1 + 116) |= 0x40u;
    *(_DWORD *)(a1 + 96) = v15;
    __int16 v9 = *(_WORD *)(a2 + 116);
    if ((v9 & 0x20) == 0)
    {
LABEL_8:
      if ((v9 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }

  else if ((v9 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  int v16 = *(_DWORD *)(a2 + 92);
  *(_WORD *)(a1 + 116) |= 0x20u;
  *(_DWORD *)(a1 + 92) = v16;
  __int16 v9 = *(_WORD *)(a2 + 116);
  if ((v9 & 0x10) == 0)
  {
LABEL_9:
    if ((v9 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

uint64_t sub_1010F1EF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "activity", *(_DWORD *)(a1 + 80));
    __int16 v5 = *(_WORD *)(a1 + 116);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "arrivalTimestamp", *(float *)(a1 + 84));
  if ((*(_WORD *)(a1 + 116) & 1) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "btcTimestamp", *(void *)(a1 + 56));
LABEL_5:
  uint64_t v6 = *(float **)(a1 + 8);
  uint64_t v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "filteredAcceleration", v8);
  }

  __int16 v9 = *(float **)(a1 + 32);
  int v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(this, "gyroBias", v11);
  }

  __int16 v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x400) != 0)
  {
    PB::TextFormatter::format(this, "isInEar", *(_BYTE *)(a1 + 112));
    __int16 v12 = *(_WORD *)(a1 + 116);
    if ((v12 & 0x10) == 0)
    {
LABEL_11:
      if ((v12 & 0x20) == 0) {
        goto LABEL_12;
      }
      goto LABEL_27;
    }
  }

  else if ((v12 & 0x10) == 0)
  {
    goto LABEL_11;
  }

  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 88));
  __int16 v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x20) == 0)
  {
LABEL_12:
    if ((v12 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

BOOL sub_1010F2104(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    int v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    __int16 v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

double sub_1010F2D60(uint64_t a1)
{
  *(void *)a1 = &off_10189B5E8;
  *(_DWORD *)(a1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0LL;
  return result;
}

uint64_t sub_1010F2D98(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base **)(result + 72);
  if (v4) {
    double result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  unint64_t v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7, 2u);
  }

  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x40) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 96), 3u);
    __int16 v8 = *(_WORD *)(v3 + 116);
    if ((v8 & 0x20) == 0)
    {
LABEL_8:
      if ((v8 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }

  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_8;
  }

  double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 4u);
  __int16 v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

double sub_1010F2F4C(uint64_t a1)
{
  if (!*(void *)(a1 + 72))
  {
    uint64_t v2 = (char *)operator new(0xA0uLL);
    *(void *)uint64_t v2 = &off_10189B5E8;
    *((_DWORD *)v2 + 3_Block_object_dispose(va, 8) = 0;
    double result = 0.0;
    *(_OWORD *)(v2 + _Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *((void *)v2 + 15) = 0LL;
    *(void *)(a1 + 72) = v2;
  }

  return result;
}

void sub_1010F2FB0(PB::Base *this)
{
  *(void *)this = &off_10189B5E8;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }

  unint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v4;
    operator delete(v4);
  }

  unint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }

  int v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }

  PB::Base::~Base(this);
}

void sub_1010F3030(PB::Base *a1)
{
}

uint64_t sub_1010F3044(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B5E8;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  unint64_t v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 120) = 0LL;
  if ((*(_BYTE *)(a2 + 152) & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 136);
    *(_BYTE *)(a1 + 152) = 2;
    *(void *)(a1 + 136) = v6;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  char v7 = *(_BYTE *)(a2 + 152);
  if ((v7 & 8) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 148);
    *(_BYTE *)(a1 + 152) |= 8u;
    *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = v8;
    char v7 = *(_BYTE *)(a2 + 152);
  }

  if ((v7 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 128);
    *(_BYTE *)(a1 + 152) |= 1u;
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = v9;
  }

  if (a1 != a2) {
    sub_10004C5F8( (char *)(a1 + 104),  *(char **)(a2 + 104),  *(void *)(a2 + 112),  (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 152) & 4) != 0)
  {
    int v10 = *(_DWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) |= 4u;
    *(_DWORD *)(a1 + 144) = v10;
  }

  return a1;
}

uint64_t sub_1010F318C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  unint64_t v5 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "acceleration", v7);
  }

  int v8 = *(float **)(a1 + 32);
  uint64_t v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "biasCovariance", v10);
  }

  float v11 = *(float **)(a1 + 56);
  __int16 v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "quaternion", v13);
  }

  uint64_t v14 = *(float **)(a1 + 80);
  char v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(this, "rotationRate", v16);
  }

  char v17 = *(_BYTE *)(a1 + 152);
  if ((v17 & 1) != 0)
  {
    PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 128));
    char v17 = *(_BYTE *)(a1 + 152);
    if ((v17 & 4) == 0)
    {
LABEL_11:
      if ((v17 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_19;
    }
  }

  else if ((*(_BYTE *)(a1 + 152) & 4) == 0)
  {
    goto LABEL_11;
  }

  PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 144));
  char v17 = *(_BYTE *)(a1 + 152);
  if ((v17 & 8) == 0)
  {
LABEL_12:
    if ((v17 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

BOOL sub_1010F3328(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v193 = a1 + 120;
    unint64_t v194 = (void **)(a1 + 104);
    float v10 = (void **)(a1 + 8);
    float v11 = (void **)(a1 + 32);
    uint64_t v191 = a1 + 48;
    uint64_t v192 = a1 + 24;
    __int16 v12 = (void **)(a1 + 80);
    float v13 = (void **)(a1 + 56);
    uint64_t v189 = a1 + 72;
    uint64_t v190 = a1 + 96;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010F408C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 152) & 2) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 136), 1u);
  }
  unint64_t v4 = *(float **)(v3 + 56);
  unint64_t v5 = *(float **)(v3 + 64);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  float v7 = *(float **)(v3 + 80);
  int v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  float v10 = *(float **)(v3 + 32);
  float v11 = *(float **)(v3 + 40);
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12, 4u);
  }

  float v13 = *(float **)(v3 + 8);
  uint64_t v14 = *(float **)(v3 + 16);
  while (v13 != v14)
  {
    float v15 = *v13++;
    double result = PB::Writer::write(this, v15, 5u);
  }

  char v16 = *(_BYTE *)(v3 + 152);
  if ((v16 & 8) != 0)
  {
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 6u);
    char v16 = *(_BYTE *)(v3 + 152);
  }

  if ((v16 & 1) != 0) {
    double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 128), 7u);
  }
  unint64_t v17 = *(float **)(v3 + 104);
  unint64_t v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    float v19 = *v17++;
    double result = PB::Writer::write(this, v19, 8u);
  }

  if ((*(_BYTE *)(v3 + 152) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 144), 9u);
  }
  return result;
}

uint64_t sub_1010F41C0(uint64_t result)
{
  *(void *)double result = &off_10189B620;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010F41D8(PB::Base *a1)
{
}

float sub_1010F41EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B620;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
    char v2 = 2;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return *(float *)&v3;
    }
    goto LABEL_5;
  }

  uint64_t v3 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 20) = 1;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  char v2 = 3;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }

  return *(float *)&v3;
}

uint64_t sub_1010F423C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "alsTrustedLux", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010F42A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010F4484(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1010F44DC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B658;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010F44F4(PB::Base *a1)
{
}

uint64_t sub_1010F4508(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189B658;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = v3;
    *(void *)(result + _Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010F4578(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "fEndTime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "fConnected", *(_BYTE *)(a1 + 24));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "fStartTime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010F4608(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010F482C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(_BYTE *)(v3 + 24), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 28) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 24), 3u);
  }
  return result;
}

uint64_t sub_1010F48A4(uint64_t result)
{
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = &off_10189B690;
  return result;
}

void sub_1010F48BC(PB::Base *this)
{
  *(void *)this = &off_10189B690;
  char v4 = (void **)*((void *)this + 2);
  unint64_t v2 = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  char v5 = (void **)*((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v5) {
    sub_10058A4FC((_DWORD)this + 8, v5);
  }
  PB::Base::~Base(this);
}

void sub_1010F4910(PB::Base *a1)
{
}

uint64_t sub_1010F4924(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  char v4 = (void ***)(a1 + 8);
  *(void *)a1 = &off_10189B690;
  *(void *)(a1 + 16) = 0LL;
  char v5 = (void ***)(a1 + 16);
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = 1;
    *(_DWORD *)(a1 + 24) = v6;
  }

  float v7 = *(__int128 **)(a2 + 8);
  if (v7)
  {
    uint64_t v8 = (void **)operator new(0x18uLL);
    char v9 = v8;
    if (*((char *)v7 + 23) < 0)
    {
      sub_1010DD48C(v8, *(void **)v7, *((void *)v7 + 1));
      unint64_t v11 = *v4;
      float *v4 = v9;
      if (v11) {
        sub_10058A4FC((int)v4, v11);
      }
    }

    else
    {
      __int128 v10 = *v7;
      v8[2] = (void *)*((void *)v7 + 2);
      *(_OWORD *)uint64_t v8 = v10;
      float *v4 = v8;
    }
  }

  unint64_t v12 = *(__int128 **)(a2 + 16);
  if (v12)
  {
    char v13 = (void **)operator new(0x18uLL);
    uint64_t v14 = v13;
    if (*((char *)v12 + 23) < 0)
    {
      sub_1010DD48C(v13, *(void **)v12, *((void *)v12 + 1));
    }

    else
    {
      __int128 v15 = *v12;
      v13[2] = (void *)*((void *)v12 + 2);
      *(_OWORD *)char v13 = v15;
    }

    unsigned int v16 = *v5;
    *char v5 = v14;
    if (v16) {
      sub_10058A4FC((int)v5, v16);
    }
  }

  return a1;
}

uint64_t sub_1010F4A3C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 28) & 1) != 0) {
    PB::TextFormatter::format(this, "backlightState", *(_DWORD *)(a1 + 24));
  }
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format(this, "backlightStateChangeSourceEvent");
  }
  if (*(void *)(a1 + 16)) {
    PB::TextFormatter::format(this, "backlightStateSuppressionEventReason");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010F4AB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void ***)(a1 + 16);
    char v9 = (void ***)(a1 + 8);
    do
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        unint64_t v13 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v19 = v2 + 1;
          char v20 = *(_BYTE *)(v10 + v2);
          *((void *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0) {
            goto LABEL_21;
          }
          v17 += 7;
          unint64_t v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            unint64_t v13 = 0LL;
            goto LABEL_21;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0LL;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010F4D9C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 28) & 1) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 24), 1u);
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4) {
    uint64_t result = PB::Writer::write(this, v4, 2LL);
  }
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5) {
    return PB::Writer::write(this, v5, 3LL);
  }
  return result;
}

uint64_t sub_1010F4E04(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B6C8;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010F4E1C(PB::Base *a1)
{
}

uint64_t sub_1010F4E30(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189B6C8;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(result + 20) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010F4EBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "inCoex", *(_BYTE *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "subType", *(_DWORD *)(a1 + 20));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "reserved", *(_DWORD *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 1) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010F4F6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010F533C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 4u);
  }

uint64_t sub_1010F53D0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B700;
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010F53E8(PB::Base *a1)
{
}

uint64_t sub_1010F53FC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189B700;
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = 0;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    __int16 v3 = 2;
    *(_WORD *)(result + 4_Block_object_dispose(va, 8) = 2;
    *(void *)(result + 16) = v4;
    __int16 v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 4_Block_object_dispose(va, 8) = v3;
    *(void *)(result + _Block_object_dispose(va, 8) = v5;
    __int16 v2 = *(_WORD *)(a2 + 48);
  }

uint64_t sub_1010F554C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "activeCoex", *(_BYTE *)(a1 + 44));
    __int16 v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "avgTemperature", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_1010F56DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010F5BAC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 48);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_1010F5D04(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B738;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1010F5D1C(PB::Base *a1)
{
}

uint64_t sub_1010F5D30(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189B738;
  *(_DWORD *)(result + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_1010F5DD8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "reserved", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "scaledValue", *(_DWORD *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "speedThreshold", *(_DWORD *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 32) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010F5EA8(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(_BYTE *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010F64A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1010F6558(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B770;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010F6570(PB::Base *a1)
{
}

float sub_1010F6584(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B770;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 25);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v3;
    *(_BYTE *)(a1 + 25) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010F662C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "lux", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "minPostSUIProx", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "resetTriggered", *(_BYTE *)(a1 + 25));
    if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010F66FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010F6A5C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 25), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1010F6B0C(uint64_t result)
{
  *(void *)uint64_t result = off_10189B7A8;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010F6B20(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B7A8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010F6B60(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B7A8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1010F6BA4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189B7A8;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    char v5 = operator new(0xB8uLL);
    uint64_t v6 = sub_10117D0B4(v5, v4);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) |= 1u;
    *(_DWORD *)(a1 + 16) = v8;
  }

  return a1;
}

uint64_t sub_1010F6C38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0) {
    PB::TextFormatter::format(this, "batchedLocationFixType", *(_DWORD *)(a1 + 16));
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010F6CA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010F6F4C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if ((*(_BYTE *)(v3 + 20) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

void *sub_1010F6FA0(void *result)
{
  if (!result[1])
  {
    os_log_t v1 = result;
    unint64_t v2 = operator new(0xB8uLL);
    sub_10117CCA4((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

uint64_t sub_1010F6FF4(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B7E0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1010F700C(PB::Base *a1)
{
}

uint64_t sub_1010F7020(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189B7E0;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    char v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + _Block_object_dispose(va, 8) = v2;
  }

  return result;
}

uint64_t sub_1010F704C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "isBatterySaverModeEnabled", *(_BYTE *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010F7098(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010F7224(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_1010F7244(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B818;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010F725C(PB::Base *a1)
{
}

uint64_t sub_1010F7270(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189B818;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 2_Block_object_dispose(va, 8) = v3;
    *(_BYTE *)(result + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010F7334(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "charged", *(_BYTE *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "chargerFamily", *(_DWORD *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_1010F7424(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010F787C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

void sub_1010F7948(PB::Base *this)
{
  *(void *)this = &off_10189B850;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1010F79A0(PB::Base *a1)
{
}

uint64_t sub_1010F79B4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  char v4 = (char *)(a1 + 8);
  *(void *)a1 = &off_10189B850;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 52) = 0;
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5)
  {
    char v6 = operator new(0x48uLL);
    uint64_t v7 = sub_10119A4C0(v6, v5);
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v7;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  if (a1 != a2) {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  char v9 = *(_BYTE *)(a2 + 52);
  if ((v9 & 1) != 0)
  {
    uint64_t v10 = *(void *)(a2 + 32);
    *(_BYTE *)(a1 + 52) |= 1u;
    *(void *)(a1 + 32) = v10;
    char v9 = *(_BYTE *)(a2 + 52);
  }

  if ((v9 & 2) != 0)
  {
    char v11 = *(_BYTE *)(a2 + 48);
    *(_BYTE *)(a1 + 52) |= 2u;
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = v11;
  }

  return a1;
}

uint64_t sub_1010F7A8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 52) & 1) != 0) {
    PB::TextFormatter::format(this, "bioMotionTimestamp", *(double *)(a1 + 32));
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "pose");
  }
  if ((*(_BYTE *)(a1 + 52) & 2) != 0) {
    PB::TextFormatter::format(this, "runSmoother", *(_BYTE *)(a1 + 48));
  }
  char v6 = *(double **)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010F7B48(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010F7FB0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base **)(result + 40);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  unint64_t v5 = *(double **)(v3 + 8);
  int v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 2u);
  }

  char v8 = *(_BYTE *)(v3 + 52);
  if ((v8 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
    char v8 = *(_BYTE *)(v3 + 52);
  }

  if ((v8 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 48), 4u);
  }
  return result;
}

void *sub_1010F8048(void *result)
{
  const char *result = off_10189B888;
  result[1] = 0LL;
  return result;
}

void sub_1010F8058(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B888;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010F8098(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B888;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1010F80DC(void *a1, uint64_t a2)
{
  *a1 = off_10189B888;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    unint64_t v4 = operator new(0x38uLL);
    uint64_t v5 = sub_1010F79B4((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_1010F8144(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010F8194(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010F8360(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_1010F837C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189B8C0;
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010F8394(PB::Base *a1)
{
}

double sub_1010F83A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B8C0;
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x10) != 0)
  {
    double result = *(double *)(a2 + 40);
    char v3 = 16;
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = 16;
    *(double *)(a1 + 40) = result;
    char v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = v3;
    *(double *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 48);
  }

uint64_t sub_1010F8450(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "probabilityGenericMotion", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "probabilityHeadMotion", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "probabilityTorsoMotion", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 48) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010F8520(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010F87B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 48);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    char v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 48) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

double sub_1010F8864(uint64_t a1)
{
  *(void *)a1 = &off_10189B8F8;
  *(_DWORD *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  return result;
}

void sub_1010F8894(PB::Base *this)
{
  *(void *)this = &off_10189B8F8;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }

  char v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

void sub_1010F8904(PB::Base *a1)
{
}

uint64_t sub_1010F8918(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B8F8;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  char v5 = (char *)(a1 + 56);
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  if ((*(_BYTE *)(a2 + 144) & 4) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 120);
    *(_BYTE *)(a1 + 144) = 4;
    *(void *)(a1 + 120) = v6;
  }

  if (a1 != a2)
  {
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_1000F9040( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }

  char v7 = *(_BYTE *)(a2 + 144);
  if ((v7 & 1) != 0)
  {
    uint64_t v10 = *(void *)(a2 + 104);
    *(_BYTE *)(a1 + 144) |= 1u;
    *(void *)(a1 + 104) = v10;
    char v7 = *(_BYTE *)(a2 + 144);
    if ((v7 & 2) == 0)
    {
LABEL_7:
      if ((v7 & 8) == 0) {
        goto LABEL_8;
      }
LABEL_13:
      uint64_t v12 = *(void *)(a2 + 128);
      *(_BYTE *)(a1 + 144) |= 8u;
      *(void *)(a1 + 12_Block_object_dispose(va, 8) = v12;
      if ((*(_BYTE *)(a2 + 144) & 0x10) == 0) {
        return a1;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(a2 + 144) & 2) == 0)
  {
    goto LABEL_7;
  }

  uint64_t v11 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 144) |= 2u;
  *(void *)(a1 + 112) = v11;
  char v7 = *(_BYTE *)(a2 + 144);
  if ((v7 & 8) != 0) {
    goto LABEL_13;
  }
LABEL_8:
  if ((v7 & 0x10) != 0)
  {
LABEL_9:
    uint64_t v8 = *(void *)(a2 + 136);
    *(_BYTE *)(a1 + 144) |= 0x10u;
    *(void *)(a1 + 136) = v8;
  }

  return a1;
}

uint64_t sub_1010F8A70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "centerOfRotationEstVars", v7);
  }

  uint64_t v8 = *(double **)(a1 + 32);
  char v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "centerOfRotationEsts", v10);
  }

  uint64_t v11 = *(double **)(a1 + 56);
  uint64_t v12 = *(double **)(a1 + 64);
  while (v11 != v12)
  {
    double v13 = *v11++;
    PB::TextFormatter::format(this, "linkLengthEstVars", v13);
  }

  unsigned int v14 = *(double **)(a1 + 80);
  char v15 = *(double **)(a1 + 88);
  while (v14 != v15)
  {
    double v16 = *v14++;
    PB::TextFormatter::format(this, "linkLengthEsts", v16);
  }

  char v17 = *(_BYTE *)(a1 + 144);
  if ((v17 & 1) != 0)
  {
    PB::TextFormatter::format(this, "positionResidualNormMean", *(double *)(a1 + 104));
    char v17 = *(_BYTE *)(a1 + 144);
    if ((v17 & 2) == 0)
    {
LABEL_11:
      if ((v17 & 4) == 0) {
        goto LABEL_12;
      }
      goto LABEL_18;
    }
  }

  else if ((*(_BYTE *)(a1 + 144) & 2) == 0)
  {
    goto LABEL_11;
  }

  PB::TextFormatter::format(this, "positionResidualNormVar", *(double *)(a1 + 112));
  char v17 = *(_BYTE *)(a1 + 144);
  if ((v17 & 4) == 0)
  {
LABEL_12:
    if ((v17 & 8) == 0) {
      goto LABEL_13;
    }
LABEL_19:
    PB::TextFormatter::format(this, "timestampBegin", *(double *)(a1 + 128));
    if ((*(_BYTE *)(a1 + 144) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_14;
  }

BOOL sub_1010F8C00(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    double v10 = (void **)(a1 + 56);
    uint64_t v11 = (void **)(a1 + 8);
    uint64_t v133 = a1 + 24;
    uint64_t v134 = a1 + 72;
    uint64_t v12 = (void **)(a1 + 80);
    double v13 = (void **)(a1 + 32);
    uint64_t v131 = a1 + 48;
    uint64_t v132 = a1 + 96;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010F95C8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 144) & 4) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 120), 1u);
  }
  unint64_t v4 = *(double **)(v3 + 32);
  unint64_t v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  double v7 = *(double **)(v3 + 80);
  uint64_t v8 = *(double **)(v3 + 88);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  double v10 = *(double **)(v3 + 8);
  uint64_t v11 = *(double **)(v3 + 16);
  while (v10 != v11)
  {
    double v12 = *v10++;
    double result = PB::Writer::write(this, v12, 4u);
  }

  double v13 = *(double **)(v3 + 56);
  uint64_t v14 = *(double **)(v3 + 64);
  while (v13 != v14)
  {
    double v15 = *v13++;
    double result = PB::Writer::write(this, v15, 5u);
  }

  char v16 = *(_BYTE *)(v3 + 144);
  if ((v16 & 1) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 104), 6u);
    char v16 = *(_BYTE *)(v3 + 144);
    if ((v16 & 2) == 0)
    {
LABEL_17:
      if ((v16 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_22;
    }
  }

  else if ((*(_BYTE *)(v3 + 144) & 2) == 0)
  {
    goto LABEL_17;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 112), 7u);
  char v16 = *(_BYTE *)(v3 + 144);
  if ((v16 & 8) == 0)
  {
LABEL_18:
    if ((v16 & 0x10) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 136), 9u);
  }

uint64_t sub_1010F9700(uint64_t result)
{
  *(void *)double result = &off_10189B930;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010F9718(PB::Base *a1)
{
}

uint64_t sub_1010F972C(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10189B930;
  *(_DWORD *)(result + 20) = 0;
  char v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 20) = v3;
    *(_BYTE *)(result + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 20);
  }

uint64_t sub_1010F97B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestampEnd", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "updatedLinkLengthY", *(_BYTE *)(a1 + 17));
      if ((*(_BYTE *)(a1 + 20) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 20) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "updatedLinkLengthX", *(_BYTE *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "updatedLinkLengthZ", *(_BYTE *)(a1 + 18));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010F9868(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010F9AE8(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (BOOL *)result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = v3[20];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 20) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, v3[16], 2u);
  char v4 = v3[20];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, v3[18], 4u);
  }

double sub_1010F9B7C(uint64_t a1)
{
  *(void *)a1 = &off_10189B968;
  *(_DWORD *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0LL;
  return result;
}

void sub_1010F9BB4(PB::Base *this)
{
  *(void *)this = &off_10189B968;
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }

  unint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }

  char v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v4;
    operator delete(v4);
  }

  char v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }

  char v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }

  PB::Base::~Base(this);
}

void sub_1010F9C34(PB::Base *a1)
{
}

uint64_t sub_1010F9C48(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189B968;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(void *)(a1 + 120) = 0LL;
  if (a1 != a2)
  {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_1000F9040( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_1000F9040( (char *)(a1 + 104),  *(char **)(a2 + 104),  *(void *)(a2 + 112),  (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  }

  char v5 = *(_BYTE *)(a2 + 144);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 1) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v9 = *(void *)(a2 + 128);
    *(_BYTE *)(a1 + 144) |= 1u;
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = v9;
    if ((*(_BYTE *)(a2 + 144) & 2) == 0) {
      return a1;
    }
    goto LABEL_6;
  }

  int v8 = *(_DWORD *)(a2 + 140);
  *(_BYTE *)(a1 + 144) |= 4u;
  *(_DWORD *)(a1 + 140) = v8;
  char v5 = *(_BYTE *)(a2 + 144);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_5:
  if ((v5 & 2) != 0)
  {
LABEL_6:
    int v6 = *(_DWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) |= 2u;
    *(_DWORD *)(a1 + 136) = v6;
  }

  return a1;
}

uint64_t sub_1010F9D80(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(double **)(a1 + 8);
  int v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }

  if ((*(_BYTE *)(a1 + 144) & 2) != 0) {
    PB::TextFormatter::format(this, "modelType", *(_DWORD *)(a1 + 136));
  }
  int v8 = *(double **)(a1 + 32);
  uint64_t v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "rotationRate", v10);
  }

  char v11 = *(_BYTE *)(a1 + 144);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(this, "status", *(_DWORD *)(a1 + 140));
    char v11 = *(_BYTE *)(a1 + 144);
  }

  if ((v11 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
  }
  unint64_t v12 = *(double **)(a1 + 56);
  char v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(this, "translation", v14);
  }

  char v15 = *(double **)(a1 + 80);
  unsigned int v16 = *(double **)(a1 + 88);
  while (v15 != v16)
  {
    double v17 = *v15++;
    PB::TextFormatter::format(this, "userAcceleration", v17);
  }

  char v18 = *(double **)(a1 + 104);
  char v19 = *(double **)(a1 + 112);
  while (v18 != v19)
  {
    double v20 = *v18++;
    PB::TextFormatter::format(this, "velocity", v20);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010F9EF0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v180 = a1 + 120;
    int v181 = (void **)(a1 + 104);
    double v10 = (void **)(a1 + 80);
    char v11 = (void **)(a1 + 32);
    uint64_t v178 = a1 + 48;
    uint64_t v179 = a1 + 96;
    unint64_t v12 = (void **)(a1 + 56);
    char v13 = (void **)(a1 + 8);
    uint64_t v176 = a1 + 24;
    uint64_t v177 = a1 + 72;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010FAB64(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(double **)(result + 8);
  unint64_t v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 1u);
  }

  double v7 = *(double **)(v3 + 56);
  int v8 = *(double **)(v3 + 64);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9, 2u);
  }

  double v10 = *(double **)(v3 + 32);
  char v11 = *(double **)(v3 + 40);
  while (v10 != v11)
  {
    double v12 = *v10++;
    double result = PB::Writer::write(this, v12, 3u);
  }

  char v13 = *(double **)(v3 + 80);
  uint64_t v14 = *(double **)(v3 + 88);
  while (v13 != v14)
  {
    double v15 = *v13++;
    double result = PB::Writer::write(this, v15, 4u);
  }

  unsigned int v16 = *(double **)(v3 + 104);
  unint64_t v17 = *(double **)(v3 + 112);
  while (v16 != v17)
  {
    double v18 = *v16++;
    double result = PB::Writer::write(this, v18, 5u);
  }

  char v19 = *(_BYTE *)(v3 + 144);
  if ((v19 & 4) != 0)
  {
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 140), 6u);
    char v19 = *(_BYTE *)(v3 + 144);
    if ((v19 & 1) == 0)
    {
LABEL_18:
      if ((v19 & 2) == 0) {
        return result;
      }
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 8u);
    }
  }

  else if ((*(_BYTE *)(v3 + 144) & 1) == 0)
  {
    goto LABEL_18;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 128), 7u);
  if ((*(_BYTE *)(v3 + 144) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 8u);
  }
  return result;
}

uint64_t sub_1010FAC88(uint64_t result)
{
  *(void *)double result = off_10189B9A0;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010FAC9C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B9A0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010FACDC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B9A0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1010FAD20(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189B9A0;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    unint64_t v5 = operator new(0x30uLL);
    uint64_t v6 = sub_10119ACB0(v5, v4);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  char v8 = *(_BYTE *)(a2 + 28);
  if ((v8 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 28) |= 1u;
    *(void *)(a1 + 16) = v9;
    char v8 = *(_BYTE *)(a2 + 28);
  }

  if ((v8 & 2) != 0)
  {
    int v10 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 28) |= 2u;
    *(_DWORD *)(a1 + 24) = v10;
  }

  return a1;
}

uint64_t sub_1010FADD0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 28) & 2) != 0) {
    PB::TextFormatter::format(this, "modelType", *(_DWORD *)(a1 + 24));
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "state");
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0) {
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010FAE58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010FB154(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  char v5 = *(_BYTE *)(v3 + 28);
  if ((v5 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
    char v5 = *(_BYTE *)(v3 + 28);
  }

  if ((v5 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  }
  return result;
}

void *sub_1010FB1C0(void *result)
{
  const char *result = off_10189B9D8;
  result[1] = 0LL;
  return result;
}

void sub_1010FB1D0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B9D8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010FB210(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189B9D8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1010FB254(void *a1, uint64_t a2)
{
  *a1 = off_10189B9D8;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x38uLL);
    uint64_t v5 = sub_1011A1268(v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_1010FB2BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010FB30C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010FB4C4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_1010FB4E0(uint64_t result)
{
  *(void *)uint64_t result = off_10189BA10;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010FB4F4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189BA10;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1010FB534(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189BA10;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1010FB578(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189BA10;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = operator new(0xA8uLL);
    uint64_t v6 = sub_10110BCF4((uint64_t)v5, v4);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    char v8 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a1 + 20) |= 1u;
    *(_BYTE *)(a1 + 16) = v8;
  }

  return a1;
}

uint64_t sub_1010FB60C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "correction");
  }
  if ((*(_BYTE *)(a1 + 20) & 1) != 0) {
    PB::TextFormatter::format(this, "withAnchoredStaticPose", *(_BYTE *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010FB678(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010FB8BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if ((*(_BYTE *)(v3 + 20) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1010FB910(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BA48;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1010FB928(PB::Base *a1)
{
}

float sub_1010FB93C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189BA48;
  *(_DWORD *)(a1 + 64) = 0;
  __int16 v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 24);
    __int16 v3 = 16;
    *(_WORD *)(a1 + 64) = 16;
    *(_DWORD *)(a1 + 24) = v4;
    __int16 v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 28);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 64) = v3;
    *(float *)(a1 + 2_Block_object_dispose(va, 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 64);
  }

uint64_t sub_1010FBAE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "adaptiveExerciseMinuteThreshold", *(float *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "age", *(float *)(a1 + 12));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }

uint64_t sub_1010FBCD0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010FC384(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

void *sub_1010FC530(void *result)
{
  const char *result = off_10189BA80;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_1010FC544(void **a1)
{
  *a1 = off_10189BA80;
  unint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1010FC58C(void **a1)
{
  *a1 = off_10189BA80;
  uint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

void *sub_1010FC5D8(void *a1, uint64_t a2)
{
  a1[1] = 0LL;
  uint64_t v3 = (char **)(a1 + 1);
  *a1 = off_10189BA80;
  a1[2] = 0LL;
  a1[3] = 0LL;
  __int16 v4 = *(uint64_t **)(a2 + 8);
  __int16 v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_1010FC63C(v3, *v4++);
  return a1;
}

uint64_t sub_1010FC63C(char **a1, uint64_t a2)
{
  __int16 v4 = operator new(0x28uLL);
  sub_1010DF2E0((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  char v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    uint64_t v24 = a1 + 2;
    if (v12) {
      char v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      char v13 = 0LL;
    }
    BOOL v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    unsigned int v23 = v15;
    *(void *)BOOL v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    unint64_t v17 = *a1;
    unsigned int v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)unsigned int v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      char v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    unint64_t v20 = a1[2];
    a1[2] = v15;
    unsigned int v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)char v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_1010FC760(_Unwind_Exception *a1)
{
}

uint64_t sub_1010FC780(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "accel");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010FC7EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010FC98C(char **a1)
{
  unint64_t v2 = operator new(0x28uLL);
  *(void *)unint64_t v2 = &off_10189AD28;
  v2[8] = 0;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  __int16 v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    uint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    char v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    uint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)__int16 v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_1010FCAB4(_Unwind_Exception *a1)
{
}

uint64_t sub_1010FCAD0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5, 1u))
    __int16 v5 = *v2++;
  return result;
}

void *sub_1010FCB18(void *result)
{
  const char *result = off_10189BAB8;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_1010FCB2C(void **a1)
{
  *a1 = off_10189BAB8;
  unint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1010FCB74(void **a1)
{
  *a1 = off_10189BAB8;
  unint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

void *sub_1010FCBC0(void *a1, uint64_t a2)
{
  a1[1] = 0LL;
  unint64_t v3 = (char **)(a1 + 1);
  *a1 = off_10189BAB8;
  a1[2] = 0LL;
  a1[3] = 0LL;
  unint64_t v4 = *(uint64_t **)(a2 + 8);
  __int16 v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_1010FCC24(v3, *v4++);
  return a1;
}

uint64_t sub_1010FCC24(char **a1, uint64_t a2)
{
  unint64_t v4 = operator new(0x80uLL);
  sub_10110A480((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    uint64_t v24 = a1 + 2;
    if (v12) {
      unint64_t v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    char v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    uint64_t v23 = v15;
    *(void *)char v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    int64x2_t v17 = *a1;
    uint64_t v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)uint64_t v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      char v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    int64x2_t v20 = a1[2];
    a1[2] = v15;
    uint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_1010FCD48(_Unwind_Exception *a1)
{
}

uint64_t sub_1010FCD68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))( v7,  this,  "deviceMotion");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010FCDD4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010FCF74(char **a1)
{
  unint64_t v2 = operator new(0x80uLL);
  *(void *)unint64_t v2 = &off_10189C0D8;
  v2[31] = 0;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  __int16 v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    uint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    char v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    uint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)__int16 v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_1010FD09C(_Unwind_Exception *a1)
{
}

uint64_t sub_1010FD0B8(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5, 1u))
    __int16 v5 = *v2++;
  return result;
}

uint64_t sub_1010FD100(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BAF0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1010FD118(PB::Base *a1)
{
}

uint64_t sub_1010FD12C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189BAF0;
  *(_DWORD *)(result + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    char v3 = 8;
    *(_BYTE *)(result + 44) = 8;
    *(void *)(result + 32) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 44) = v3;
    *(void *)(result + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 44);
  }

uint64_t sub_1010FD1D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "basalNatalies", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "session", *(_DWORD *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 8) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1010FD2A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1010FD5EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

void *sub_1010FD69C(void *result)
{
  const char *result = off_10189BB28;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_1010FD6B0(void **a1)
{
  *a1 = off_10189BB28;
  unint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1010FD6F8(void **a1)
{
  *a1 = off_10189BB28;
  uint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

void *sub_1010FD744(void *a1, uint64_t a2)
{
  a1[1] = 0LL;
  uint64_t v3 = (char **)(a1 + 1);
  *a1 = off_10189BB28;
  a1[2] = 0LL;
  a1[3] = 0LL;
  char v4 = *(uint64_t **)(a2 + 8);
  char v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_1010FD7A8(v3, *v4++);
  return a1;
}

uint64_t sub_1010FD7A8(char **a1, uint64_t a2)
{
  char v4 = operator new(0x60uLL);
  sub_10115A434((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    unsigned int v24 = a1 + 2;
    if (v12) {
      char v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      char v13 = 0LL;
    }
    BOOL v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    char v23 = v15;
    *(void *)BOOL v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    unint64_t v17 = *a1;
    unsigned int v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)unsigned int v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      char v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    int64x2_t v20 = a1[2];
    a1[2] = v15;
    char v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)uint64_t v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_1010FD8CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1010FD8EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "vo2MaxInput");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010FD958(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010FDAF8(char **a1)
{
  unint64_t v2 = operator new(0x60uLL);
  sub_10115A268((uint64_t)v2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  char v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    uint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    char v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    uint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)char v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_1010FDC14(_Unwind_Exception *a1)
{
}

uint64_t sub_1010FDC30(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5, 1u))
    char v5 = *v2++;
  return result;
}

uint64_t sub_1010FDC78(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BB60;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1010FDC90(PB::Base *a1)
{
}

double sub_1010FDCA4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189BB60;
  *(_DWORD *)(a1 + 24) = 0;
  char v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 4) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 20);
    char v3 = 4;
    *(_BYTE *)(a1 + 24) = 4;
    *(_DWORD *)(a1 + 20) = v4;
    char v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 24) = v3;
    *(_DWORD *)(a1 + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 24);
  }

uint64_t sub_1010FDD14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "eventType", *(_DWORD *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 24) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "eventTime", *(double *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010FDDA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010FE124(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 20), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  }
  return result;
}

uint64_t sub_1010FE19C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BB98;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1010FE1B4(PB::Base *a1)
{
}

uint64_t sub_1010FE1C8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189BB98;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1010FE218(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010FE280(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010FE5A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

double sub_1010FE600(uint64_t a1)
{
  *(void *)a1 = &off_10189BBD0;
  *(_DWORD *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1010FE624(PB::Base *this)
{
  *(void *)this = &off_10189BBD0;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1010FE674(PB::Base *a1)
{
}

uint64_t sub_1010FE688(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189BBD0;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = 2;
    *(void *)(a1 + 64) = v5;
  }

  if (a1 != a2)
  {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  }

  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(_BYTE *)(a1 + 72) |= 1u;
    *(void *)(a1 + 56) = v6;
  }

  return a1;
}

uint64_t sub_1010FE734(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "rotationMatrix", v7);
  }

  char v8 = *(_BYTE *)(a1 + 72);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 56));
    char v8 = *(_BYTE *)(a1 + 72);
  }

  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  }
  char v9 = *(double **)(a1 + 32);
  unsigned int v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(this, "translation", v11);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010FE804(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    unint64_t v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010FEDBC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 72) & 2) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 64), 1u);
  }
  unint64_t v4 = *(double **)(v3 + 8);
  unint64_t v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  double v7 = *(double **)(v3 + 32);
  char v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  if ((*(_BYTE *)(v3 + 72) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 56), 4u);
  }
  return result;
}

void sub_1010FEE60(PB::Base *this)
{
  *(void *)this = &off_10189BC08;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + _Block_object_dispose(va, 8) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }

  unint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_1010FEEC0(PB::Base *a1)
{
}

uint64_t sub_1010FEED4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = 0u;
  unint64_t v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &off_10189BC08;
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0LL;
  if ((*(_BYTE *)(a2 + 88) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 80);
    *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = 1;
    *(void *)(a1 + 80) = v5;
  }

  if (a1 != a2)
  {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_1000F9040( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }

  return a1;
}

uint64_t sub_1010FEF88(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(double **)(a1 + 8);
  double v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "rotationMatrix", v7);
  }

  if ((*(_BYTE *)(a1 + 88) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  }
  char v8 = *(double **)(a1 + 32);
  double v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }

  uint64_t v11 = *(double **)(a1 + 56);
  unint64_t v12 = *(double **)(a1 + 64);
  while (v11 != v12)
  {
    double v13 = *v11++;
    PB::TextFormatter::format(this, "velocity", v13);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1010FF068(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    double v10 = (void **)(a1 + 56);
    uint64_t v11 = (void **)(a1 + 32);
    uint64_t v103 = a1 + 48;
    uint64_t v104 = a1 + 72;
    unint64_t v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1010FF79C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = (void *)result;
  if ((*(_BYTE *)(result + 88) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 80), 1u);
  }
  unint64_t v4 = (double *)v3[1];
  unint64_t v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  double v7 = (double *)v3[4];
  char v8 = (double *)v3[5];
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  uint64_t v11 = (double *)v3[7];
  double v10 = (double *)v3[8];
  while (v11 != v10)
  {
    double v12 = *v11++;
    double result = PB::Writer::write(this, v12, 4u);
  }

  return result;
}

uint64_t sub_1010FF83C(uint64_t result)
{
  *(void *)double result = &off_10189BC40;
  *(_DWORD *)(result + 2_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1010FF854(PB::Base *a1)
{
}

double sub_1010FF868(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189BC40;
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = 4;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v3;
    *(double *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1010FF8D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "calories_kCal", *(float *)(a1 + 24));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010FF968(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1010FFB88(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  }
  return result;
}

void *sub_1010FFC00(void *result)
{
  const char *result = &off_10189BC78;
  *(void *)((char *)result + 164) = 0LL;
  return result;
}

void sub_1010FFC18(PB::Base *a1)
{
}

float sub_1010FFC2C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189BC78;
  *(void *)(a1 + 164) = 0LL;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x2000000) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 120);
    uint64_t v3 = 0x2000000LL;
    *(void *)(a1 + 164) = 0x2000000LL;
    *(_DWORD *)(a1 + 120) = v4;
    uint64_t v2 = *(void *)(a2 + 164);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 48);
    v3 |= 0x80uLL;
    *(void *)(a1 + 164) = v3;
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
    uint64_t v2 = *(void *)(a2 + 164);
  }

uint64_t sub_101100070(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activity", *(_DWORD *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 164);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "activityTypeWithoutOverride", *(_DWORD *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }

uint64_t sub_101100560(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

LABEL_251:
          *(_DWORD *)(a1 + 32) = v29;
          goto LABEL_243;
        case 5u:
          *(void *)(a1 + 164) |= 0x40000000uLL;
          unint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_241;
        case 6u:
          *(void *)(a1 + 164) |= 0x400000000uLL;
          unint64_t v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v33);
          goto LABEL_241;
        case 7u:
          *(void *)(a1 + 164) |= 0x400000uLL;
          unint64_t v34 = *((void *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v34);
          goto LABEL_241;
        case 8u:
          *(void *)(a1 + 164) |= 0x20uLL;
          unint64_t v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_241;
        case 9u:
          *(void *)(a1 + 164) |= 0x40uLL;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_241;
        case 0xAu:
          *(void *)(a1 + 164) |= 2uLL;
          unint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFF7LL || v37 + 8 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v37);
          uint64_t v38 = *((void *)this + 1) + 8LL;
          goto LABEL_242;
        case 0xBu:
          *(void *)(a1 + 164) |= 0x2000000000uLL;
          unint64_t v39 = *((void *)this + 1);
          if (v39 >= *((void *)this + 2))
          {
            BOOL v42 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v40 = v39 + 1;
            int v41 = *(unsigned __int8 *)(*(void *)this + v39);
            *((void *)this + 1) = v40;
            BOOL v42 = v41 != 0;
          }

          *(_BYTE *)(a1 + 162) = v42;
          goto LABEL_243;
        case 0xCu:
          *(void *)(a1 + 164) |= 0x800uLL;
          unint64_t v43 = *((void *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v43);
          goto LABEL_241;
        case 0xDu:
          *(void *)(a1 + 164) |= 0x10000000uLL;
          unint64_t v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v44);
          goto LABEL_241;
        case 0xEu:
          *(void *)(a1 + 164) |= 0x8000000uLL;
          unint64_t v45 = *((void *)this + 1);
          unint64_t v46 = *((void *)this + 2);
          uint64_t v47 = *(void *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5LL && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0LL;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              char v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_255;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v14 = v49++ > 8;
            }

            while (!v14);
LABEL_186:
            LODWORD(v50) = 0;
            goto LABEL_255;
          }

          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v50 = 0LL;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)this + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v138 = v45 + 1;
              char v139 = *(_BYTE *)(v47 + v45);
              *((void *)this + 1) = v138;
              v50 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                unint64_t v45 = v138;
                BOOL v14 = v137++ > 8;
                if (v14) {
                  goto LABEL_186;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v50) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 92) = v25;
          goto LABEL_296;
        case 2u:
          *(_DWORD *)(a1 + 116) |= 0x200u;
          uint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          char v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
          {
            unint64_t v32 = 0;
            unint64_t v33 = 0;
            unint64_t v34 = 0LL;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              unint64_t v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_255;
              }
              v32 += 7;
              uint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }

            while (!v14);
LABEL_160:
            LODWORD(v34) = 0;
            goto LABEL_255;
          }

          unint64_t v158 = 0;
          char v159 = 0;
          unint64_t v34 = 0LL;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              char v160 = v29 + 1;
              unsigned int v161 = *(_BYTE *)(v31 + v29);
              *((void *)this + 1) = v160;
              v34 |= (unint64_t)(v161 & 0x7F) << v158;
              if (v161 < 0)
              {
                v158 += 7;
                uint64_t v29 = v160;
                BOOL v14 = v159++ > 8;
                if (v14) {
                  goto LABEL_160;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v34) = 0;
              }
            }

            break;
          }

LABEL_267:
          *(void *)(a1 + 24) = v83;
          goto LABEL_243;
        case 0x1Bu:
          *(void *)(a1 + 164) |= 1uLL;
          unint64_t v86 = *((void *)this + 1);
          unint64_t v87 = *((void *)this + 2);
          uint64_t v88 = *(void *)this;
          if (v86 <= 0xFFFFFFFFFFFFFFF5LL && v86 + 10 <= v87)
          {
            char v89 = 0;
            unsigned int v90 = 0;
            uint64_t v91 = 0LL;
            do
            {
              unint64_t v92 = v86 + 1;
              *((void *)this + 1) = v86 + 1;
              char v93 = *(_BYTE *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0) {
                goto LABEL_271;
              }
              v89 += 7;
              unint64_t v86 = v92;
              BOOL v14 = v90++ > 8;
            }

            while (!v14);
LABEL_214:
            uint64_t v91 = 0LL;
            goto LABEL_271;
          }

          char v152 = 0;
          unsigned int v153 = 0;
          uint64_t v91 = 0LL;
          if (v87 <= v86) {
            unint64_t v87 = *((void *)this + 1);
          }
          while (2)
          {
            if (v87 == v86)
            {
              uint64_t v91 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v154 = v86 + 1;
              char v155 = *(_BYTE *)(v88 + v86);
              *((void *)this + 1) = v154;
              v91 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                unint64_t v86 = v154;
                BOOL v14 = v153++ > 8;
                if (v14) {
                  goto LABEL_214;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v91 = 0LL;
              }
            }

            break;
          }

        *(_DWORD *)(a1 + 140) = v59;
        goto LABEL_304;
      case 0xDu:
        uint64_t v62 = (void **)operator new(0x18uLL);
        v62[1] = 0LL;
        v62[2] = 0LL;
        *uint64_t v62 = 0LL;
        __p[0] = 0LL;
        unint64_t v63 = *v8;
        double *v8 = v62;
        if (v63)
        {
          sub_10058A4FC((int)v8, v63);
          char v64 = (void **)__p[0];
          __p[0] = 0LL;
          if (v64) {
            sub_10058A4FC((int)__p, v64);
          }
        }

        PB::Reader::read(this, *v8);
        goto LABEL_304;
      case 0xEu:
        *(_DWORD *)(a1 + 152) |= 0x200000u;
        unint64_t v65 = *((void *)this + 1);
        if (v65 >= *((void *)this + 2))
        {
          unint64_t v68 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          unint64_t v66 = v65 + 1;
          unint64_t v67 = *(unsigned __int8 *)(*(void *)this + v65);
          *((void *)this + 1) = v66;
          unint64_t v68 = v67 != 0;
        }

        *(_BYTE *)(a1 + 14_Block_object_dispose(va, 8) = v68;
        goto LABEL_304;
      case 0xFu:
        *(_DWORD *)(a1 + 152) |= 0x400000u;
        unint64_t v69 = *((void *)this + 1);
        if (v69 >= *((void *)this + 2))
        {
          unsigned int v72 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          uint64_t v70 = v69 + 1;
          char v71 = *(unsigned __int8 *)(*(void *)this + v69);
          *((void *)this + 1) = v70;
          unsigned int v72 = v71 != 0;
        }

        *(_BYTE *)(a1 + 149) = v72;
        goto LABEL_304;
      case 0x10u:
        uint64_t v73 = operator new(0x28uLL);
        sub_1010E1864((uint64_t)v73);
        unint64_t v76 = *(void *)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(va, 8) = v73;
        if (v76)
        {
          (*(void (**)(uint64_t))(*(void *)v76 + 8LL))(v76);
          uint64_t v73 = *(void **)(a1 + 8);
        }

        goto LABEL_145;
      case 0x11u:
        *(_DWORD *)(a1 + 152) |= 0x40000u;
        unint64_t v77 = *((void *)this + 1);
        unint64_t v78 = *((void *)this + 2);
        unint64_t v79 = *(void *)this;
        if (v77 <= 0xFFFFFFFFFFFFFFF5LL && v77 + 10 <= v78)
        {
          uint64_t v80 = 0;
          char v81 = 0;
          unsigned int v82 = 0LL;
          do
          {
            uint64_t v83 = v77 + 1;
            *((void *)this + 1) = v77 + 1;
            unint64_t v84 = *(_BYTE *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0) {
              goto LABEL_271;
            }
            v80 += 7;
            unint64_t v77 = v83;
            char v15 = v81++ > 8;
          }

          while (!v15);
LABEL_193:
          LODWORD(v82) = 0;
          goto LABEL_271;
        }

        unint64_t v166 = 0;
        char v167 = 0;
        unsigned int v82 = 0LL;
        if (v78 <= v77) {
          unint64_t v78 = *((void *)this + 1);
        }
        while (2)
        {
          if (v78 == v77)
          {
            LODWORD(v82) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v168 = v77 + 1;
            uint64_t v169 = *(_BYTE *)(v79 + v77);
            *((void *)this + 1) = v168;
            v82 |= (unint64_t)(v169 & 0x7F) << v166;
            if (v169 < 0)
            {
              v166 += 7;
              unint64_t v77 = v168;
              char v15 = v167++ > 8;
              if (v15) {
                goto LABEL_193;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v82) = 0;
            }
          }

          break;
        }

          *(_DWORD *)(a1 + 60) = v68;
          goto LABEL_296;
        case 0xAu:
          *(_DWORD *)(a1 + 116) |= 1u;
          char v71 = *((void *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFF7LL || v71 + 8 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(*(void *)this + v71);
          goto LABEL_246;
        case 0xBu:
          *(_DWORD *)(a1 + 116) |= 2u;
          unsigned int v72 = *((void *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFF7LL || v72 + 8 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v72);
          goto LABEL_246;
        case 0xCu:
          *(_DWORD *)(a1 + 116) |= 0x1000u;
          uint64_t v73 = *((void *)this + 1);
          unint64_t v74 = *((void *)this + 2);
          char v75 = *(void *)this;
          if (v73 <= 0xFFFFFFFFFFFFFFF5LL && v73 + 10 <= v74)
          {
            unint64_t v76 = 0;
            unint64_t v77 = 0;
            unint64_t v78 = 0LL;
            do
            {
              unint64_t v79 = v73 + 1;
              *((void *)this + 1) = v73 + 1;
              uint64_t v80 = *(_BYTE *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0) {
                goto LABEL_271;
              }
              v76 += 7;
              uint64_t v73 = v79;
              BOOL v14 = v77++ > 8;
            }

            while (!v14);
LABEL_192:
            LODWORD(v7_Block_object_dispose(va, 8) = 0;
            goto LABEL_271;
          }

          unint64_t v174 = 0;
          uint64_t v175 = 0;
          unint64_t v78 = 0LL;
          if (v74 <= v73) {
            unint64_t v74 = *((void *)this + 1);
          }
          while (2)
          {
            if (v74 == v73)
            {
              LODWORD(v7_Block_object_dispose(va, 8) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v176 = v73 + 1;
              uint64_t v177 = *(_BYTE *)(v75 + v73);
              *((void *)this + 1) = v176;
              v78 |= (unint64_t)(v177 & 0x7F) << v174;
              if (v177 < 0)
              {
                v174 += 7;
                uint64_t v73 = v176;
                BOOL v14 = v175++ > 8;
                if (v14) {
                  goto LABEL_192;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v7_Block_object_dispose(va, 8) = 0;
              }
            }

            break;
          }

          int v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          char v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 0x11u:
          *(_DWORD *)(a1 + 164) |= 0x8000000u;
          unint64_t v69 = *((void *)this + 1);
          if (v69 >= *((void *)this + 2))
          {
            unsigned int v72 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v70 = v69 + 1;
            char v71 = *(unsigned __int8 *)(*(void *)this + v69);
            *((void *)this + 1) = v70;
            unsigned int v72 = v71 != 0;
          }

          *(_BYTE *)(a1 + 157) = v72;
          goto LABEL_267;
        case 0x12u:
          *(_DWORD *)(a1 + 164) |= 0x400000u;
          uint64_t v73 = *((void *)this + 1);
          if (v73 >= *((void *)this + 2))
          {
            unint64_t v76 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v74 = v73 + 1;
            char v75 = *(unsigned __int8 *)(*(void *)this + v73);
            *((void *)this + 1) = v74;
            unint64_t v76 = v75 != 0;
          }

          *(_BYTE *)(a1 + 152) = v76;
          goto LABEL_267;
        case 0x13u:
          *(_DWORD *)(a1 + 164) |= 0x1000000u;
          unint64_t v77 = *((void *)this + 1);
          if (v77 >= *((void *)this + 2))
          {
            uint64_t v80 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v78 = v77 + 1;
            unint64_t v79 = *(unsigned __int8 *)(*(void *)this + v77);
            *((void *)this + 1) = v78;
            uint64_t v80 = v79 != 0;
          }

          *(_BYTE *)(a1 + 154) = v80;
          goto LABEL_267;
        case 0x14u:
          *(_DWORD *)(a1 + 164) |= 0x10u;
          char v81 = *((void *)this + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v81);
          goto LABEL_265;
        case 0x15u:
          *(_DWORD *)(a1 + 164) |= 8u;
          unsigned int v82 = *((void *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v82);
          goto LABEL_265;
        case 0x16u:
          *(_DWORD *)(a1 + 164) |= 4u;
          uint64_t v83 = *((void *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v83);
          goto LABEL_265;
        case 0x17u:
          *(_DWORD *)(a1 + 164) |= 0x20000000u;
          unint64_t v84 = *((void *)this + 1);
          if (v84 >= *((void *)this + 2))
          {
            unint64_t v87 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            char v85 = v84 + 1;
            unint64_t v86 = *(unsigned __int8 *)(*(void *)this + v84);
            *((void *)this + 1) = v85;
            unint64_t v87 = v86 != 0;
          }

          *(_BYTE *)(a1 + 159) = v87;
          goto LABEL_267;
        case 0x18u:
          *(_DWORD *)(a1 + 164) |= 0x80000000;
          uint64_t v88 = *((void *)this + 1);
          if (v88 >= *((void *)this + 2))
          {
            uint64_t v91 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            char v89 = v88 + 1;
            unsigned int v90 = *(unsigned __int8 *)(*(void *)this + v88);
            *((void *)this + 1) = v89;
            uint64_t v91 = v90 != 0;
          }

          *(_BYTE *)(a1 + 161) = v91;
          goto LABEL_267;
        case 0x19u:
          *(_DWORD *)(a1 + 164) |= 0x800000u;
          unint64_t v92 = *((void *)this + 1);
          if (v92 >= *((void *)this + 2))
          {
            unint64_t v95 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            char v93 = v92 + 1;
            unint64_t v94 = *(unsigned __int8 *)(*(void *)this + v92);
            *((void *)this + 1) = v93;
            unint64_t v95 = v94 != 0;
          }

          *(_BYTE *)(a1 + 153) = v95;
          goto LABEL_267;
        case 0x1Au:
          *(_DWORD *)(a1 + 164) |= 0x20u;
          unint64_t v96 = *((void *)this + 1);
          if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v96);
          goto LABEL_265;
        case 0x1Bu:
          *(_DWORD *)(a1 + 164) |= 0x40000u;
          uint64_t v97 = *((void *)this + 1);
          char v98 = *((void *)this + 2);
          unsigned int v99 = *(void *)this;
          if (v97 <= 0xFFFFFFFFFFFFFFF5LL && v97 + 10 <= v98)
          {
            uint64_t v100 = 0;
            unint64_t v101 = 0;
            char v102 = 0LL;
            do
            {
              unint64_t v103 = v97 + 1;
              *((void *)this + 1) = v97 + 1;
              unint64_t v104 = *(_BYTE *)(v99 + v97);
              v102 |= (unint64_t)(v104 & 0x7F) << v100;
              if ((v104 & 0x80) == 0) {
                goto LABEL_240;
              }
              v100 += 7;
              uint64_t v97 = v103;
              unint64_t v20 = v101++ > 8;
            }

            while (!v20);
LABEL_194:
            LODWORD(v102) = 0;
            goto LABEL_240;
          }

          char v144 = 0;
          unsigned int v145 = 0;
          char v102 = 0LL;
          if (v98 <= v97) {
            char v98 = *((void *)this + 1);
          }
          while (2)
          {
            if (v98 == v97)
            {
              LODWORD(v102) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v146 = v97 + 1;
              char v147 = *(_BYTE *)(v99 + v97);
              *((void *)this + 1) = v146;
              v102 |= (unint64_t)(v147 & 0x7F) << v144;
              if (v147 < 0)
              {
                v144 += 7;
                uint64_t v97 = v146;
                unint64_t v20 = v145++ > 8;
                if (v20) {
                  goto LABEL_194;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v102) = 0;
              }
            }

            break;
          }

LABEL_279:
          *(_DWORD *)(a1 + 36) = v108;
          goto LABEL_243;
        case 0x1Fu:
          *(void *)(a1 + 164) |= 0x1000000000uLL;
          unint64_t v111 = *((void *)this + 1);
          if (v111 >= *((void *)this + 2))
          {
            BOOL v114 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v112 = v111 + 1;
            int v113 = *(unsigned __int8 *)(*(void *)this + v111);
            *((void *)this + 1) = v112;
            BOOL v114 = v113 != 0;
          }

          *(_BYTE *)(a1 + 161) = v114;
          goto LABEL_243;
        case 0x20u:
          *(void *)(a1 + 164) |= 0x800000000uLL;
          unint64_t v115 = *((void *)this + 1);
          if (v115 >= *((void *)this + 2))
          {
            BOOL v118 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v116 = v115 + 1;
            int v117 = *(unsigned __int8 *)(*(void *)this + v115);
            *((void *)this + 1) = v116;
            BOOL v118 = v117 != 0;
          }

          *(_BYTE *)(a1 + 160) = v118;
          goto LABEL_243;
        case 0x21u:
          *(void *)(a1 + 164) |= 0x800000uLL;
          unint64_t v119 = *((void *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v119);
          goto LABEL_241;
        case 0x22u:
          *(void *)(a1 + 164) |= 0x20000uLL;
          unint64_t v120 = *((void *)this + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v120);
          goto LABEL_241;
        case 0x23u:
          *(void *)(a1 + 164) |= 0x40000uLL;
          unint64_t v121 = *((void *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v121);
          goto LABEL_241;
        case 0x24u:
          *(void *)(a1 + 164) |= 0x400uLL;
          unint64_t v122 = *((void *)this + 1);
          unint64_t v123 = *((void *)this + 2);
          uint64_t v124 = *(void *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5LL && v122 + 10 <= v123)
          {
            char v125 = 0;
            unsigned int v126 = 0;
            uint64_t v127 = 0LL;
            do
            {
              unint64_t v128 = v122 + 1;
              *((void *)this + 1) = v122 + 1;
              char v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0) {
                goto LABEL_283;
              }
              v125 += 7;
              unint64_t v122 = v128;
              BOOL v14 = v126++ > 8;
            }

            while (!v14);
LABEL_239:
            LODWORD(v127) = 0;
            goto LABEL_283;
          }

          char v164 = 0;
          unsigned int v165 = 0;
          uint64_t v127 = 0LL;
          if (v123 <= v122) {
            unint64_t v123 = *((void *)this + 1);
          }
          break;
        case 0x25u:
          *(void *)(a1 + 164) |= 0x100uLL;
          unint64_t v130 = *((void *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v130);
          goto LABEL_241;
        case 0x26u:
          *(void *)(a1 + 164) |= (unint64_t)&_mh_execute_header;
          unint64_t v131 = *((void *)this + 1);
          if (v131 <= 0xFFFFFFFFFFFFFFFBLL && v131 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)this + v131);
LABEL_241:
            uint64_t v38 = *((void *)this + 1) + 4LL;
LABEL_242:
            *((void *)this + 1) = v38;
          }

          else
          {
LABEL_170:
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_243;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_243;
      }

      while (1)
      {
        if (v123 == v122)
        {
          LODWORD(v127) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_283;
        }

        unint64_t v166 = v122 + 1;
        char v167 = *(_BYTE *)(v124 + v122);
        *((void *)this + 1) = v166;
        v127 |= (unint64_t)(v167 & 0x7F) << v164;
        if ((v167 & 0x80) == 0) {
          break;
        }
        v164 += 7;
        unint64_t v122 = v166;
        BOOL v14 = v165++ > 8;
        if (v14) {
          goto LABEL_239;
        }
      }

      if (*((_BYTE *)this + 24)) {
        LODWORD(v127) = 0;
      }
LABEL_283:
      *(_DWORD *)(a1 + 60) = v127;
LABEL_243:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 132) = v98;
        goto LABEL_304;
      case 0x14u:
        *(_DWORD *)(a1 + 152) |= 0x400u;
        unint64_t v101 = *((void *)this + 1);
        char v102 = *((void *)this + 2);
        unint64_t v103 = *(void *)this;
        if (v101 <= 0xFFFFFFFFFFFFFFF5LL && v101 + 10 <= v102)
        {
          unint64_t v104 = 0;
          uint64_t v105 = 0;
          char v106 = 0LL;
          do
          {
            unsigned int v107 = v101 + 1;
            *((void *)this + 1) = v101 + 1;
            uint64_t v108 = *(_BYTE *)(v103 + v101);
            v106 |= (unint64_t)(v108 & 0x7F) << v104;
            if ((v108 & 0x80) == 0) {
              goto LABEL_283;
            }
            v104 += 7;
            unint64_t v101 = v107;
            char v15 = v105++ > 8;
          }

          while (!v15);
LABEL_214:
          LODWORD(v106) = 0;
          goto LABEL_283;
        }

        uint64_t v178 = 0;
        uint64_t v179 = 0;
        char v106 = 0LL;
        if (v102 <= v101) {
          char v102 = *((void *)this + 1);
        }
        while (2)
        {
          if (v102 == v101)
          {
            LODWORD(v106) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v180 = v101 + 1;
            int v181 = *(_BYTE *)(v103 + v101);
            *((void *)this + 1) = v180;
            v106 |= (unint64_t)(v181 & 0x7F) << v178;
            if (v181 < 0)
            {
              v178 += 7;
              unint64_t v101 = v180;
              char v15 = v179++ > 8;
              if (v15) {
                goto LABEL_214;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v106) = 0;
            }
          }

          break;
        }

          *(_DWORD *)(a1 + 100) = v114;
          goto LABEL_296;
        case 0x14u:
          *(_DWORD *)(a1 + 116) |= 0x80u;
          int v117 = *((void *)this + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v117);
          goto LABEL_115;
        case 0x15u:
          *(_DWORD *)(a1 + 116) |= 0x40u;
          BOOL v118 = *((void *)this + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v118);
          goto LABEL_115;
        case 0x16u:
          *(_DWORD *)(a1 + 116) |= 0x4000u;
          unint64_t v119 = *((void *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v119);
LABEL_115:
          unint64_t v120 = *((void *)this + 1) + 4LL;
          goto LABEL_247;
        case 0x17u:
          *(_DWORD *)(a1 + 116) |= 0x80000u;
          unint64_t v121 = *((void *)this + 1);
          unint64_t v122 = *((void *)this + 2);
          unint64_t v123 = *(void *)this;
          if (v121 <= 0xFFFFFFFFFFFFFFF5LL && v121 + 10 <= v122)
          {
            uint64_t v124 = 0;
            char v125 = 0;
            unsigned int v126 = 0LL;
            do
            {
              uint64_t v127 = v121 + 1;
              *((void *)this + 1) = v121 + 1;
              unint64_t v128 = *(_BYTE *)(v123 + v121);
              v126 |= (unint64_t)(v128 & 0x7F) << v124;
              if ((v128 & 0x80) == 0) {
                goto LABEL_283;
              }
              v124 += 7;
              unint64_t v121 = v127;
              BOOL v14 = v125++ > 8;
            }

            while (!v14);
LABEL_223:
            LODWORD(v126) = 0;
            goto LABEL_283;
          }

          unint64_t v186 = 0;
          uint64_t v187 = 0;
          unsigned int v126 = 0LL;
          if (v122 <= v121) {
            unint64_t v122 = *((void *)this + 1);
          }
          while (2)
          {
            if (v122 == v121)
            {
              LODWORD(v126) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v188 = v121 + 1;
              uint64_t v189 = *(_BYTE *)(v123 + v121);
              *((void *)this + 1) = v188;
              v126 |= (unint64_t)(v189 & 0x7F) << v186;
              if (v189 < 0)
              {
                v186 += 7;
                unint64_t v121 = v188;
                BOOL v14 = v187++ > 8;
                if (v14) {
                  goto LABEL_223;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v126) = 0;
              }
            }

            break;
          }

uint64_t sub_101101590(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 164);
  if ((v4 & 0x2000000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 120), 1u);
    uint64_t v4 = *(void *)(v3 + 164);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_42;
    }
  }

  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 2u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }

uint64_t sub_1011019DC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BCB0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1011019F4(PB::Base *a1)
{
}

uint64_t sub_101101A08(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189BCB0;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    char v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + _Block_object_dispose(va, 8) = v2;
  }

  return result;
}

uint64_t sub_101101A34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "pause", *(_BYTE *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101101A80(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101101C0C(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_101101C2C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BCE8;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_101101C44(PB::Base *a1)
{
}

uint64_t sub_101101C58(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189BCE8;
  *(_DWORD *)(result + 36) = 0;
  char v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(result + 36) = 4;
    *(void *)(result + 24) = v4;
    char v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 36) = v3;
    *(void *)(result + _Block_object_dispose(va, 8) = v5;
    char v2 = *(_BYTE *)(a2 + 36);
  }

uint64_t sub_101101CE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "endDate", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "hr", *(double *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 36) & 4) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 36) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "hkType", *(_DWORD *)(a1 + 32));
  char v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 4) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101101D94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011020A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 36);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 36) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  }

uint64_t sub_101102138(uint64_t result)
{
  *(void *)uint64_t result = off_10189BD20;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_101102150(void **a1)
{
  *a1 = off_10189BD20;
  unint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_101102198(void **a1)
{
  *a1 = off_10189BD20;
  uint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

uint64_t sub_1011021E4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189BD20;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  uint64_t v3 = (char **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 64) = 0;
  char v4 = *(_BYTE *)(a2 + 64);
  if ((v4 & 2) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 36);
    char v5 = 2;
    *(_BYTE *)(a1 + 64) = 2;
    *(_DWORD *)(a1 + 36) = v6;
    char v4 = *(_BYTE *)(a2 + 64);
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v5 = 0;
  if ((*(_BYTE *)(a2 + 64) & 8) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 44);
    v5 |= 8u;
    *(_BYTE *)(a1 + 64) = v5;
    *(_DWORD *)(a1 + 44) = v7;
    char v4 = *(_BYTE *)(a2 + 64);
  }

uint64_t sub_101102330(char **a1, uint64_t a2)
{
  char v4 = operator new(0x18uLL);
  sub_1011030B4((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  int v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    unsigned int v24 = a1 + 2;
    if (v12) {
      int v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      int v13 = 0LL;
    }
    char v14 = &v13[8 * v9];
    int v15 = &v13[8 * v12];
    char v23 = v15;
    *(void *)char v14 = v4;
    int v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    unint64_t v17 = *a1;
    int v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)int v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      int v8 = (char *)v22.i64[1];
      int v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    int v20 = a1[2];
    a1[2] = v15;
    char v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)int v7 = v4;
    int v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_101102454(_Unwind_Exception *a1)
{
}

uint64_t sub_101102474(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "gain", *(_DWORD *)(a1 + 32));
    char v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 36));
  if ((*(_BYTE *)(a1 + 64) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "offset", *(_DWORD *)(a1 + 40));
LABEL_5:
  unint64_t v6 = *(uint64_t **)(a1 + 8);
  int v7 = *(uint64_t **)(a1 + 16);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32LL))(v8, this, "point");
  }

  char v9 = *(_BYTE *)(a1 + 64);
  if ((v9 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sensor", *(_DWORD *)(a1 + 44));
    char v9 = *(_BYTE *)(a1 + 64);
    if ((v9 & 0x10) == 0)
    {
LABEL_9:
      if ((v9 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
  }

  else if ((*(_BYTE *)(a1 + 64) & 0x10) == 0)
  {
    goto LABEL_9;
  }

  PB::TextFormatter::format(this, "tempCalA", *(_DWORD *)(a1 + 48));
  char v9 = *(_BYTE *)(a1 + 64);
  if ((v9 & 0x20) == 0)
  {
LABEL_10:
    if ((v9 & 0x80) == 0) {
      goto LABEL_11;
    }
LABEL_20:
    PB::TextFormatter::format(this, "tempCalEnabled", *(_BYTE *)(a1 + 60));
    if ((*(_BYTE *)(a1 + 64) & 0x40) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_12;
  }

uint64_t sub_1011025E8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  uint64_t v8 = (char **)(a1 + 8);
  while (2)
  {
    uint64_t v9 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v12 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v18 = v2 + 1;
        char v19 = *(_BYTE *)(v9 + v2);
        *((void *)this + 1) = v18;
        v12 |= (unint64_t)(v19 & 0x7F) << v16;
        if ((v19 & 0x80) == 0) {
          goto LABEL_21;
        }
        v16 += 7;
        unint64_t v2 = v18;
        if (v17++ >= 9)
        {
LABEL_20:
          unint64_t v12 = 0LL;
          goto LABEL_21;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v10 = 0;
    unsigned int v11 = 0;
    unint64_t v12 = 0LL;
    while (1)
    {
      unint64_t v13 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0) {
        break;
      }
      v10 += 7;
      unint64_t v2 = v13;
      BOOL v15 = v11++ > 8;
      if (v15) {
        goto LABEL_20;
      }
    }

uint64_t sub_101102E30(char **a1)
{
  unint64_t v2 = operator new(0x18uLL);
  *(void *)unint64_t v2 = &off_10189BD58;
  v2[5] = 0;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  char v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    unint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    unint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    BOOL v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    unint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)char v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_101102F58(_Unwind_Exception *a1)
{
}

uint64_t sub_101102F74(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 64);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 36), 1u);
    char v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((*(_BYTE *)(result + 64) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 2u);
  char v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

void sub_1011030A0(PB::Base *a1)
{
}

uint64_t sub_1011030B4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189BD58;
  *(_DWORD *)(result + 20) = 0;
  char v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 1) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 20) = 1;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v4;
    char v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 16);
    v3 |= 4u;
    *(_BYTE *)(result + 20) = v3;
    *(_DWORD *)(result + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 20);
  }

uint64_t sub_101103120(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 20) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "distance", *(_DWORD *)(a1 + 12));
    if ((*(_BYTE *)(a1 + 20) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "base", *(_DWORD *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "peak", *(_DWORD *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011031B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011035CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        return result;
      }
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 12), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 20) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 20) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 12), 3u);
  }
  return result;
}

uint64_t sub_101103644(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BD90;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_10110365C(PB::Base *a1)
{
}

float sub_101103670(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189BD90;
  *(_DWORD *)(a1 + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    float result = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = 1;
    *(float *)(a1 + _Block_object_dispose(va, 8) = result;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 12);
    *(_BYTE *)(a1 + 16) = v2;
    *(float *)(a1 + 12) = result;
  }

  return result;
}

uint64_t sub_1011036C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "concha", *(float *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 16);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "tragus", *(float *)(a1 + 12));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101103728(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101103900(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 16);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 12), 2u);
  }
  return result;
}

uint64_t sub_101103958(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BDC8;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_101103970(PB::Base *a1)
{
}

uint64_t sub_101103984(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189BDC8;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    int v3 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(_DWORD *)(result + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 12) = v4;
  }

  return result;
}

uint64_t sub_1011039D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "conchaTemp", *(_DWORD *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 16);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "tragusTemp", *(_DWORD *)(a1 + 12));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101103A3C(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101103D64(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 16);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 12), 2u);
  }
  return result;
}

uint64_t sub_101103DBC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BE00;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101103DD4(PB::Base *a1)
{
}

uint64_t sub_101103DE8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189BE00;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + _Block_object_dispose(va, 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_101103E38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "elevationAscended", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101103EA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10110412C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_101104184(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BE38;
  *(_DWORD *)(result + 6_Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_10110419C(PB::Base *a1)
{
}

float sub_1011041B0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189BE38;
  *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = 0;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(a1 + 6_Block_object_dispose(va, 8) = 1;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 56);
    v3 |= 0x800u;
    *(_WORD *)(a1 + 6_Block_object_dispose(va, 8) = v3;
    *(_DWORD *)(a1 + 56) = v4;
    __int16 v2 = *(_WORD *)(a2 + 68);
  }

uint64_t sub_101104354(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }