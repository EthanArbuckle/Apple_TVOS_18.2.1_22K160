void sub_100078A00(uint64_t a1, void *lpsrc)
{
  uint64_t v4;
  uint64_t v5;
    sub_1012279C0(0LL, v4, v5);
  sub_100077CB0(a1, (uint64_t)lpsrc);
}

void sub_100078A4C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100077CB0(a1, a2);
  }

uint64_t sub_100078A8C()
{
  return 1LL;
}

void *sub_100078A94@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.NowPlaying");
}

void sub_100078AA4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  11488LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_101227E44();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }

void sub_100078B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100078B70(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B440;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100078B80(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B440;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_100078BA0()
{
  v0 = operator new(0x18uLL);
  void *v0 = off_10181B440;
  *(void *)&double result = 31LL;
  v0[1] = 31LL;
  *((_DWORD *)v0 + 4) = 0;
  return result;
}

uint64_t sub_100078BD4(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_DWORD *)(result + 8) = 31;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100078BEC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      char v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v8 = v12;
      }

      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }

      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101227E44();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_100078D4C( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_100078D68(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11LL;
    }

    else if (v4 >= 0x80)
    {
    }

    else
    {
      uint64_t result = 2LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100078DC0(uint64_t a1, void *lpsrc)
{
}

void sub_100078E0C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100078AA4(a1, a2);
  }

uint64_t sub_100078E4C()
{
  return 1LL;
}

void *sub_100078E54@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.LearnModel");
}

void sub_100078E64(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  11658LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_101227E6C();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }

void sub_100078F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100078F30(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B4B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100078F40(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B4B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_100078F60()
{
  v0 = operator new(0x18uLL);
  void *v0 = off_10181B4B8;
  *(void *)&double result = 32LL;
  v0[1] = 32LL;
  *((_DWORD *)v0 + 4) = 0;
  return result;
}

uint64_t sub_100078F94(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_DWORD *)(result + 8) = 32;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100078FAC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      char v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v8 = v12;
      }

      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }

      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101227E6C();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_10007910C( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_100079128(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11LL;
    }

    else if (v4 >= 0x80)
    {
    }

    else
    {
      uint64_t result = 2LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100079180(uint64_t a1, void *lpsrc)
{
}

void sub_1000791CC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100078E64(a1, a2);
  }

uint64_t sub_10007920C()
{
  return 1LL;
}

void *sub_100079214@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.LearnCompleted");
}

void sub_100079224(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  11828LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_101227E94();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }

void sub_1000792D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000792F0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B530;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100079300(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B530;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_100079320()
{
  v0 = operator new(0x18uLL);
  void *v0 = off_10181B530;
  *(void *)&double result = 33LL;
  v0[1] = 33LL;
  *((_DWORD *)v0 + 4) = 0;
  return result;
}

uint64_t sub_100079354(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_DWORD *)(result + 8) = 33;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_10007936C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      char v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v8 = v12;
      }

      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }

      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101227E94();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_1000794CC( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_1000794E8(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11LL;
    }

    else if (v4 >= 0x80)
    {
    }

    else
    {
      uint64_t result = 2LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100079540(uint64_t a1, void *lpsrc)
{
}

void sub_10007958C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100079224(a1, a2);
  }

uint64_t sub_1000795CC()
{
  return 1LL;
}

void *sub_1000795D4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.SensorsScanComplete");
}

void sub_1000795E4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  11998LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_101227EBC();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }

void sub_100079698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000796B0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B5A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1000796C0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B5A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_1000796E0()
{
  v0 = operator new(0x18uLL);
  void *v0 = off_10181B5A8;
  *(void *)&double result = 34LL;
  v0[1] = 34LL;
  *((_DWORD *)v0 + 4) = 0;
  return result;
}

uint64_t sub_100079714(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_DWORD *)(result + 8) = 34;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_10007972C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      char v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v8 = v12;
      }

      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }

      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101227EBC();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_10007988C( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_1000798A8(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11LL;
    }

    else if (v4 >= 0x80)
    {
    }

    else
    {
      uint64_t result = 2LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100079900(uint64_t a1, void *lpsrc)
{
}

void sub_10007994C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_1000795E4(a1, a2);
  }

uint64_t sub_10007998C()
{
  return 1LL;
}

void *sub_100079994@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.StartSpectating");
}

void sub_1000799A4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  12168LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_101227EE4();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }

void sub_100079A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100079A70(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B620;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100079A80(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B620;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_100079AA0()
{
  v0 = operator new(0x18uLL);
  void *v0 = off_10181B620;
  *(void *)&double result = 35LL;
  v0[1] = 35LL;
  *((_DWORD *)v0 + 4) = 0;
  return result;
}

uint64_t sub_100079AD4(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_DWORD *)(result + 8) = 35;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100079AEC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      char v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v8 = v12;
      }

      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }

      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_101227EE4();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_100079C4C( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_100079C68(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11LL;
    }

    else if (v4 >= 0x80)
    {
    }

    else
    {
      uint64_t result = 2LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_100079CC0(uint64_t a1, void *lpsrc)
{
}

void sub_100079D0C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_1000799A4(a1, a2);
  }

uint64_t sub_100079D4C()
{
  return 1LL;
}

void *sub_100079D54@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.StopSpectating");
}

void sub_100079D64(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  12406LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 24);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101227F0C();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 2) != 0)
    {
      char v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      unsigned int v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unsigned int v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 4) != 0)
    {
      uint64_t v9 = *(void *)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      *(void *)(a1 + 16) = v9;
    }
  }

void sub_100079E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100079EA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B698;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100079ED0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B698;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_100079F04()
{
  v0 = operator new(0x28uLL);
  *(void *)&double result = 36LL;
  v0[3] = 36LL;
  void *v0 = off_10181B698;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[2] = 0LL;
  *((_DWORD *)v0 + 8) = 0;
  return result;
}

uint64_t sub_100079F44(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 36;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    *(void *)(result + 16) = 0LL;
  }

  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100079F98( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unint64_t *)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v8 = TagFallback >> 3;
        int v9 = TagFallback & 7;
        unsigned int v12 = (char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v13 = v21;
        }

        else
        {
          unsigned int v13 = *v12;
          *((void *)this + 1) = v12 + 1;
        }

        if (v13 - 31 < 0x19 || (v13 <= 0xE ? (BOOL v14 = ((1 << v13) & 0x76B6) == 0) : (BOOL v14 = 1), !v14))
        {
          if (v13 - 31 >= 0x19 && (v13 > 0xE || ((1 << v13) & 0x76B6) == 0)) {
            sub_101227F0C();
          }
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v13;
        }

        v16 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v16 < *((void *)this + 2) && *v16 == 18)
        {
          *((void *)this + 1) = v16 + 1;
          goto LABEL_38;
        }
      }

      if (v8 != 2) {
        break;
      }
      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_19;
      }
LABEL_38:
      *(_DWORD *)(a1 + 32) |= 2u;
      v17 = *(void **)(a1 + 8);
      if (v17 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        v17 = operator new(0x18uLL);
        v17[1] = 0LL;
        v17[2] = 0LL;
        void *v17 = 0LL;
        *(void *)(a1 + 8) = v17;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v17);
      if (!(_DWORD)result) {
        return result;
      }
      v18 = (_BYTE *)*((void *)this + 1);
      unint64_t v10 = *((void *)this + 2);
      if ((unint64_t)v18 < v10 && *v18 == 24)
      {
        v11 = v18 + 1;
        *((void *)this + 1) = v11;
LABEL_44:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          v19 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          *int v5 = *v11;
          v19 = (unsigned __int8 *)(v11 + 1);
          *((void *)this + 1) = v19;
        }

        *(_DWORD *)(a1 + 32) |= 4u;
        if (v19 == (unsigned __int8 *)v10
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (v8 == 3)
    {
      int v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_44;
      }
    }

    else
    {
      int v9 = TagFallback & 7;
    }

uint64_t sub_10007A208( uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 24),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(void *)(v5 + 16),  a2,  a4);
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(void *)(v5 + 16),  a2,  a4);
  }
  return result;
}

uint64_t sub_10007A280(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_24;
  }

  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 32);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 1;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }

  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }

    uint64_t v4 = 2LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

void sub_10007A36C(uint64_t a1, void *lpsrc)
{
}

void sub_10007A3B8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100079D64(a1, a2);
  }

uint64_t sub_10007A3F8()
{
  return 1LL;
}

void *sub_10007A400@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ServiceCreate");
}

void sub_10007A410(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  12658LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 24);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101227F34();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      char v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        char v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 4) != 0)
    {
      uint64_t v9 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      unint64_t v10 = *(std::string **)(a1 + 16);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unint64_t v10 = (std::string *)operator new(0x18uLL);
        v10->__r_.__value_.__l.__size_ = 0LL;
        v10->__r_.__value_.__l.__cap_ = 0LL;
        v10->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 16) = v10;
      }

      std::string::operator=(v10, v9);
    }
  }

void sub_10007A560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007A578(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = *(void *)(a1 + 16);
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

void sub_10007A600(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B710;
  sub_10007A578((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007A630(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B710;
  sub_10007A578((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10007A664()
{
  v0 = operator new(0x28uLL);
  *(void *)&double result = 37LL;
  v0[3] = 37LL;
  void *v0 = off_10181B710;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 8) = 0;
  return result;
}

uint64_t sub_10007A6A4(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 37;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 32) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10007A728( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v18;
        }

        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (BOOL v11 = ((1 << v10) & 0x76B6) == 0) : (BOOL v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
            sub_101227F34();
          }
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }

        unsigned int v13 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 18)
        {
          *((void *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }

      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_18;
      }
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      BOOL v14 = *(void **)(a1 + 8);
      if (v14 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        BOOL v14 = operator new(0x18uLL);
        v14[1] = 0LL;
        v14[2] = 0LL;
        *BOOL v14 = 0LL;
        *(void *)(a1 + 8) = v14;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
      if (!(_DWORD)result) {
        return result;
      }
      v15 = (_BYTE *)*((void *)this + 1);
      if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 26)
      {
        *((void *)this + 1) = v15 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        v16 = *(void **)(a1 + 16);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = 0LL;
          *(void *)(a1 + 16) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        goto LABEL_43;
      }
    }

    else
    {
      int v8 = TagFallback & 7;
    }

uint64_t sub_10007A990( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 24),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
  }
  return result;
}

uint64_t sub_10007AA08(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_32;
  }

  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 32);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 1;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }

  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }

    uint64_t v4 = 2LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

void sub_10007AB34(uint64_t a1, void *lpsrc)
{
}

void sub_10007AB80(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007A410(a1, a2);
  }

uint64_t sub_10007ABC0()
{
  return 1LL;
}

void *sub_10007ABC8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ServiceDelete");
}

void sub_10007ABD8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  12910LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 24);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101227F5C();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      char v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        char v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 4) != 0)
    {
      uint64_t v9 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      unint64_t v10 = *(std::string **)(a1 + 16);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unint64_t v10 = (std::string *)operator new(0x18uLL);
        v10->__r_.__value_.__l.__size_ = 0LL;
        v10->__r_.__value_.__l.__cap_ = 0LL;
        v10->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 16) = v10;
      }

      std::string::operator=(v10, v9);
    }
  }

void sub_10007AD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007AD40(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B788;
  sub_10007A578((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007AD70(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B788;
  sub_10007A578((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10007ADA4()
{
  v0 = operator new(0x28uLL);
  *(void *)&double result = 38LL;
  v0[3] = 38LL;
  void *v0 = off_10181B788;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 8) = 0;
  return result;
}

uint64_t sub_10007ADE4(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 38;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 32) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10007AE68( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v18;
        }

        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (BOOL v11 = ((1 << v10) & 0x76B6) == 0) : (BOOL v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
            sub_101227F5C();
          }
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }

        int v13 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 18)
        {
          *((void *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }

      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_18;
      }
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      char v14 = *(void **)(a1 + 8);
      if (v14 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        char v14 = operator new(0x18uLL);
        v14[1] = 0LL;
        v14[2] = 0LL;
        *char v14 = 0LL;
        *(void *)(a1 + 8) = v14;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v15 = (_BYTE *)*((void *)this + 1);
      if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 26)
      {
        *((void *)this + 1) = v15 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        unint64_t v16 = *(void **)(a1 + 16);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unint64_t v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = 0LL;
          *(void *)(a1 + 16) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        goto LABEL_43;
      }
    }

    else
    {
      int v8 = TagFallback & 7;
    }

uint64_t sub_10007B0D0( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 24),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
  }
  return result;
}

uint64_t sub_10007B148(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_32;
  }

  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 32);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 1;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }

  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }

    uint64_t v4 = 2LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

void sub_10007B274(uint64_t a1, void *lpsrc)
{
}

void sub_10007B2C0(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007ABD8(a1, a2);
  }

uint64_t sub_10007B300()
{
  return 1LL;
}

void *sub_10007B308@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ServiceConnect");
}

void sub_10007B318(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  13162LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 24);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101227F84();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      char v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        char v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 4) != 0)
    {
      uint64_t v9 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      unint64_t v10 = *(std::string **)(a1 + 16);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        unint64_t v10 = (std::string *)operator new(0x18uLL);
        v10->__r_.__value_.__l.__size_ = 0LL;
        v10->__r_.__value_.__l.__cap_ = 0LL;
        v10->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 16) = v10;
      }

      std::string::operator=(v10, v9);
    }
  }

void sub_10007B468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007B480(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B800;
  sub_10007A578((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007B4B0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B800;
  sub_10007A578((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10007B4E4()
{
  v0 = operator new(0x28uLL);
  *(void *)&double result = 39LL;
  v0[3] = 39LL;
  void *v0 = off_10181B800;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 8) = 0;
  return result;
}

uint64_t sub_10007B524(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 39;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 32) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10007B5A8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v18;
        }

        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (BOOL v11 = ((1 << v10) & 0x76B6) == 0) : (BOOL v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
            sub_101227F84();
          }
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }

        int v13 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 18)
        {
          *((void *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }

      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_18;
      }
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      char v14 = *(void **)(a1 + 8);
      if (v14 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        char v14 = operator new(0x18uLL);
        v14[1] = 0LL;
        v14[2] = 0LL;
        *char v14 = 0LL;
        *(void *)(a1 + 8) = v14;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v15 = (_BYTE *)*((void *)this + 1);
      if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 26)
      {
        *((void *)this + 1) = v15 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        unint64_t v16 = *(void **)(a1 + 16);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unint64_t v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = 0LL;
          *(void *)(a1 + 16) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        goto LABEL_43;
      }
    }

    else
    {
      int v8 = TagFallback & 7;
    }

uint64_t sub_10007B810( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 24),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
  }
  return result;
}

uint64_t sub_10007B888(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_32;
  }

  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 32);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 1;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }

  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }

    uint64_t v4 = 2LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

void sub_10007B9B4(uint64_t a1, void *lpsrc)
{
}

void sub_10007BA00(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007B318(a1, a2);
  }

uint64_t sub_10007BA40()
{
  return 1LL;
}

void *sub_10007BA48@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ServiceDisconnect");
}

void sub_10007BA58(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v13,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  13443LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v13,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101227FAC();
      }
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 36);
    }

    if ((v5 & 2) != 0)
    {
      char v8 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 2u;
      uint64_t v9 = *(std::string **)(a1 + 8);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v9 = (std::string *)operator new(0x18uLL);
        v9->__r_.__value_.__l.__size_ = 0LL;
        v9->__r_.__value_.__l.__cap_ = 0LL;
        v9->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v9;
      }

      std::string::operator=(v9, v8);
      int v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 4) == 0)
      {
LABEL_11:
        if ((v5 & 8) == 0) {
          return;
        }
        goto LABEL_12;
      }
    }

    else if ((v5 & 4) == 0)
    {
      goto LABEL_11;
    }

    unint64_t v10 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    int v11 = *(std::string **)(a1 + 24);
    if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      int v11 = (std::string *)operator new(0x18uLL);
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 24) = v11;
    }

    std::string::operator=(v11, v10);
    if ((*(_DWORD *)(a2 + 36) & 8) != 0)
    {
LABEL_12:
      char v7 = *(_BYTE *)(a2 + 20);
      *(_DWORD *)(a1 + 36) |= 8u;
      *(_BYTE *)(a1 + 20) = v7;
    }
  }

void sub_10007BBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007BBE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = *(void *)(a1 + 24);
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

void sub_10007BC70(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B878;
  sub_10007BBE8((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007BCA0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B878;
  sub_10007BBE8((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

_DWORD *sub_10007BCD4()
{
  uint64_t result = operator new(0x28uLL);
  result[4] = 40;
  *(void *)uint64_t result = off_10181B878;
  *((void *)result + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)result + 4) = 0LL;
  *((_BYTE *)result + 20) = 0;
  return result;
}

uint64_t sub_10007BD18(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 36);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 40;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 36) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    *(_BYTE *)(result + 20) = 0;
  }

  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_10007BDA0( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        char v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_23:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v12 = ((1 << v9) & 0x76B6) == 0) : (BOOL v12 = 1), !v12))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101227FAC();
            }
            *(_DWORD *)(a1 + 36) |= 1u;
            *(_DWORD *)(a1 + 16) = v9;
          }

          int v13 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 18)
          {
            *((void *)this + 1) = v13 + 1;
            goto LABEL_35;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
        if ((_DWORD)result)
        {
          unsigned int v9 = v21;
          goto LABEL_23;
        }

        break;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
LABEL_35:
        *(_DWORD *)(a1 + 36) |= 2u;
        char v14 = *(void **)(a1 + 8);
        if (v14 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          char v14 = operator new(0x18uLL);
          v14[1] = 0LL;
          v14[2] = 0LL;
          *char v14 = 0LL;
          *(void *)(a1 + 8) = v14;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v15 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v15 + 1;
LABEL_41:
        *(_DWORD *)(a1 + 36) |= 4u;
        unint64_t v16 = *(void **)(a1 + 24);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unint64_t v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = 0LL;
          *(void *)(a1 + 24) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        int v17 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        int v11 = v17 + 1;
        *((void *)this + 1) = v11;
LABEL_47:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v18 = v22;
          v19 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v18 = *v11;
          v19 = (unsigned __int8 *)(v11 + 1);
          *((void *)this + 1) = v19;
        }

        *(_BYTE *)(a1 + 20) = v18 != 0;
        *(_DWORD *)(a1 + 36) |= 8u;
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_41;
        }
        goto LABEL_18;
      case 4u:
        int v7 = TagFallback & 7;
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_47;
      default:
        int v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_10007C090( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(unsigned __int8 *)(v5 + 20),  a2,  a4);
  }

uint64_t sub_10007C124(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0LL;
    goto LABEL_35;
  }

  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    unsigned int v4 = 0;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v7 = *(void *)(a1 + 8);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    char v9 = v8;
    uint64_t v10 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >= 0x80)
    {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11,  a2);
      int v8 = *(unsigned __int8 *)(v7 + 23);
      uint64_t v10 = *(void *)(v7 + 8);
      int v3 = *(_DWORD *)(a1 + 36);
      char v9 = *(_BYTE *)(v7 + 23);
    }

    else
    {
      int v12 = 1;
    }

    if (v9 < 0) {
      int v8 = v10;
    }
    v4 += v12 + v8 + 1;
    goto LABEL_22;
  }

  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
  if ((v6 & 0x80000000) != 0)
  {
    unsigned int v4 = 11;
    if ((v3 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }

  if (v6 < 0x80)
  {
    unsigned int v4 = 2;
    if ((v3 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }

  unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  int v3 = *(_DWORD *)(a1 + 36);
  if ((v3 & 2) != 0) {
    goto LABEL_13;
  }
LABEL_22:
  if ((v3 & 4) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 24);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    char v15 = v14;
    uint64_t v16 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17,  a2);
      int v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v16 = *(void *)(v13 + 8);
      int v3 = *(_DWORD *)(a1 + 36);
      char v15 = *(_BYTE *)(v13 + 23);
    }

    else
    {
      int v18 = 1;
    }

    if (v15 < 0) {
      int v14 = v16;
    }
    v4 += v18 + v14 + 1;
  }

  if ((v3 & 8) != 0) {
    uint64_t result = v4 + 2;
  }
  else {
    uint64_t result = v4;
  }
LABEL_35:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

void sub_10007C25C(uint64_t a1, void *lpsrc)
{
}

void sub_10007C2A8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007BA58(a1, a2);
  }

uint64_t sub_10007C2E8()
{
  return 1LL;
}

void *sub_10007C2F0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ServiceStartUpdating");
}

void sub_10007C300(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  13699LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 24);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101227FD4();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 2) != 0)
    {
      uint64_t v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 2u;
      int v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 4) != 0)
    {
      char v9 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      uint64_t v10 = *(std::string **)(a1 + 16);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v10 = (std::string *)operator new(0x18uLL);
        v10->__r_.__value_.__l.__size_ = 0LL;
        v10->__r_.__value_.__l.__cap_ = 0LL;
        v10->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 16) = v10;
      }

      std::string::operator=(v10, v9);
    }
  }

void sub_10007C450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007C468(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B8F0;
  sub_10007A578((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007C498(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B8F0;
  sub_10007A578((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10007C4CC()
{
  v0 = operator new(0x28uLL);
  *(void *)&double result = 41LL;
  v0[3] = 41LL;
  void *v0 = off_10181B8F0;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 8) = 0;
  return result;
}

uint64_t sub_10007C50C(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 32);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 41;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 32) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10007C590( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        char v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v18;
        }

        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (BOOL v11 = ((1 << v10) & 0x76B6) == 0) : (BOOL v11 = 1), !v11))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
            sub_101227FD4();
          }
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }

        uint64_t v13 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v13 < *((void *)this + 2) && *v13 == 18)
        {
          *((void *)this + 1) = v13 + 1;
          goto LABEL_37;
        }
      }

      if (v7 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_18;
      }
LABEL_37:
      *(_DWORD *)(a1 + 32) |= 2u;
      int v14 = *(void **)(a1 + 8);
      if (v14 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v14 = operator new(0x18uLL);
        v14[1] = 0LL;
        v14[2] = 0LL;
        *int v14 = 0LL;
        *(void *)(a1 + 8) = v14;
      }

      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v14);
      if (!(_DWORD)result) {
        return result;
      }
      char v15 = (_BYTE *)*((void *)this + 1);
      if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 26)
      {
        *((void *)this + 1) = v15 + 1;
LABEL_43:
        *(_DWORD *)(a1 + 32) |= 4u;
        uint64_t v16 = *(void **)(a1 + 16);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = 0LL;
          *(void *)(a1 + 16) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        goto LABEL_43;
      }
    }

    else
    {
      int v8 = TagFallback & 7;
    }

uint64_t sub_10007C7F8( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 24),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
  }
  return result;
}

uint64_t sub_10007C870(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_32;
  }

  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
      goto LABEL_22;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      int v3 = *(_DWORD *)(a1 + 32);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 1;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
    goto LABEL_22;
  }

  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }

    uint64_t v4 = 2LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

void sub_10007C99C(uint64_t a1, void *lpsrc)
{
}

void sub_10007C9E8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007C300(a1, a2);
  }

uint64_t sub_10007CA28()
{
  return 1LL;
}

void *sub_10007CA30@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ServiceStopUpdating");
}

void sub_10007CA40(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v16,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  14025LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v16,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 48);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 40);
    if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
      sub_101227FFC();
    }
    *(_DWORD *)(a1 + 48) |= 1u;
    *(_DWORD *)(a1 + 40) = v6;
    int v5 = *(_DWORD *)(a2 + 48);
  }

  if ((v5 & 2) == 0)
  {
    if ((v5 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_17:
    uint64_t v9 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 4u;
    unint64_t v10 = *(std::string **)(a1 + 16);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unint64_t v10 = (std::string *)operator new(0x18uLL);
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 16) = v10;
    }

    std::string::operator=(v10, v9);
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_12:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_23;
    }

    goto LABEL_20;
  }

  int v7 = *(const std::string **)(a2 + 8);
  *(_DWORD *)(a1 + 48) |= 2u;
  char v8 = *(std::string **)(a1 + 8);
  if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    char v8 = (std::string *)operator new(0x18uLL);
    v8->__r_.__value_.__l.__size_ = 0LL;
    v8->__r_.__value_.__l.__cap_ = 0LL;
    v8->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 8) = v8;
  }

  std::string::operator=(v8, v7);
  int v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 4) != 0) {
    goto LABEL_17;
  }
LABEL_11:
  if ((v5 & 8) == 0) {
    goto LABEL_12;
  }
LABEL_20:
  int v11 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 48) |= 8u;
  uint64_t v12 = *(std::string **)(a1 + 24);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    uint64_t v12 = (std::string *)operator new(0x18uLL);
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 24) = v12;
  }

  std::string::operator=(v12, v11);
  if ((*(_DWORD *)(a2 + 48) & 0x10) != 0)
  {
LABEL_23:
    int v13 = *(const std::string **)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x10u;
    char v14 = *(std::string **)(a1 + 32);
    if (v14 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      char v14 = (std::string *)operator new(0x18uLL);
      v14->__r_.__value_.__l.__size_ = 0LL;
      v14->__r_.__value_.__l.__cap_ = 0LL;
      v14->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 32) = v14;
    }

    std::string::operator=(v14, v13);
  }

void sub_10007CC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007CC48(void *a1)
{
  uint64_t v2 = a1[1];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[2];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  uint64_t v6 = a1[3];
  if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v6 != 0)
  {
    operator delete((void *)v6);
  }

  uint64_t v8 = a1[4];
  if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v8 != 0)
  {
    operator delete((void *)v8);
  }

void sub_10007CD20(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B968;
  sub_10007CC48(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007CD50(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B968;
  sub_10007CC48(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10007CD84()
{
  v0 = operator new(0x38uLL);
  *(void *)&double result = 42LL;
  v0[5] = 42LL;
  void *v0 = off_10181B968;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 12) = 0;
  return result;
}

uint64_t sub_10007CDC8(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 48);
  if (v1)
  {
    *(_DWORD *)(result + 40) = 42;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 48) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 48) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 48) & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(result + 32);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10007CEB4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
LABEL_6:
      switch(TagFallback >> 3)
      {
        case 1u:
          int v7 = TagFallback & 7;
          uint64_t v8 = (char *)*((void *)this + 1);
          if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v9 = v20;
          }

          else
          {
            unsigned int v9 = *v8;
            *((void *)this + 1) = v8 + 1;
          }

          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101227FFC();
            }
            *(_DWORD *)(a1 + 48) |= 1u;
            *(_DWORD *)(a1 + 40) = v9;
          }

          int v11 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
          {
            *((void *)this + 1) = v11 + 1;
            goto LABEL_36;
          }

          continue;
        case 2u:
          int v7 = TagFallback & 7;
          if (v7 != 2) {
            goto LABEL_19;
          }
LABEL_36:
          *(_DWORD *)(a1 + 48) |= 2u;
          uint64_t v12 = *(void **)(a1 + 8);
          if (v12 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            uint64_t v12 = operator new(0x18uLL);
            v12[1] = 0LL;
            v12[2] = 0LL;
            *uint64_t v12 = 0LL;
            *(void *)(a1 + 8) = v12;
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v12);
          if (!(_DWORD)result) {
            return result;
          }
          int v13 = (_BYTE *)*((void *)this + 1);
          *((void *)this + 1) = v13 + 1;
LABEL_42:
          *(_DWORD *)(a1 + 48) |= 4u;
          char v14 = *(void **)(a1 + 16);
          if (v14 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            char v14 = operator new(0x18uLL);
            v14[1] = 0LL;
            v14[2] = 0LL;
            *char v14 = 0LL;
            *(void *)(a1 + 16) = v14;
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v14);
          if (!(_DWORD)result) {
            return result;
          }
          char v15 = (_BYTE *)*((void *)this + 1);
          *((void *)this + 1) = v15 + 1;
LABEL_48:
          *(_DWORD *)(a1 + 48) |= 8u;
          unint64_t v16 = *(void **)(a1 + 24);
          if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            unint64_t v16 = operator new(0x18uLL);
            v16[1] = 0LL;
            v16[2] = 0LL;
            void *v16 = 0LL;
            *(void *)(a1 + 24) = v16;
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
          if (!(_DWORD)result) {
            return result;
          }
          int v17 = (_BYTE *)*((void *)this + 1);
          *((void *)this + 1) = v17 + 1;
LABEL_54:
          *(_DWORD *)(a1 + 48) |= 0x10u;
          unsigned int v18 = *(void **)(a1 + 32);
          if (v18 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            unsigned int v18 = operator new(0x18uLL);
            v18[1] = 0LL;
            v18[2] = 0LL;
            void *v18 = 0LL;
            *(void *)(a1 + 32) = v18;
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v18);
          if (!(_DWORD)result) {
            return result;
          }
          if (*((void *)this + 1) != *((void *)this + 2)
            || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          {
            continue;
          }

          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        case 3u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_42;
          }
          goto LABEL_19;
        case 4u:
          int v7 = TagFallback & 7;
          if (v7 != 2) {
            goto LABEL_19;
          }
          goto LABEL_48;
        case 5u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_54;
          }
          goto LABEL_19;
        default:
          int v7 = TagFallback & 7;
LABEL_19:
          if (v7 == 4) {
            return 1LL;
          }
          return 0LL;
      }
    }

    break;
  }

  TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
  *((_DWORD *)this + 8) = (_DWORD)TagFallback;
  if ((_DWORD)TagFallback) {
    goto LABEL_6;
  }
  return 1LL;
}

uint64_t sub_10007D200( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 40),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_10007D2B0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_53;
  }

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 48) & 2) == 0) {
      goto LABEL_22;
    }
  }

  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 48);
    char v8 = *(_BYTE *)(v6 + 23);
  }

  else
  {
    int v11 = 1;
  }

  if (v8 < 0) {
    int v7 = v9;
  }
  uint64_t v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    char v14 = v13;
    uint64_t v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16,  a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v15 = *(void *)(v12 + 8);
      int v3 = *(_DWORD *)(a1 + 48);
      char v14 = *(_BYTE *)(v12 + 23);
    }

    else
    {
      int v17 = 1;
    }

    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_24:
      if ((v3 & 0x10) == 0) {
        goto LABEL_53;
      }
      goto LABEL_44;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_24;
  }

  uint64_t v18 = *(void *)(a1 + 24);
  int v19 = *(unsigned __int8 *)(v18 + 23);
  char v20 = v19;
  uint64_t v21 = *(void *)(v18 + 8);
  if ((v19 & 0x80u) == 0) {
    unint64_t v22 = *(unsigned __int8 *)(v18 + 23);
  }
  else {
    unint64_t v22 = v21;
  }
  if (v22 >= 0x80)
  {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22,  a2);
    int v19 = *(unsigned __int8 *)(v18 + 23);
    uint64_t v21 = *(void *)(v18 + 8);
    int v3 = *(_DWORD *)(a1 + 48);
    char v20 = *(_BYTE *)(v18 + 23);
  }

  else
  {
    int v23 = 1;
  }

  if (v20 < 0) {
    int v19 = v21;
  }
  uint64_t v4 = (v4 + v23 + v19 + 1);
  if ((v3 & 0x10) != 0)
  {
LABEL_44:
    uint64_t v24 = *(void *)(a1 + 32);
    int v25 = *(unsigned __int8 *)(v24 + 23);
    char v26 = v25;
    uint64_t v27 = *(void *)(v24 + 8);
    if ((v25 & 0x80u) == 0) {
      unint64_t v28 = *(unsigned __int8 *)(v24 + 23);
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28 >= 0x80)
    {
      int v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28,  a2);
      int v25 = *(unsigned __int8 *)(v24 + 23);
      uint64_t v27 = *(void *)(v24 + 8);
      char v26 = *(_BYTE *)(v24 + 23);
    }

    else
    {
      int v29 = 1;
    }

    if (v26 < 0) {
      int v25 = v27;
    }
    uint64_t v4 = (v4 + v29 + v25 + 1);
  }

void sub_10007D498(uint64_t a1, void *lpsrc)
{
}

void sub_10007D4E4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007CA40(a1, a2);
  }

uint64_t sub_10007D524()
{
  return 1LL;
}

void *sub_10007D52C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.RequestObservation");
}

void sub_10007D53C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  14322LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 32);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101228024();
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v6;
      int v5 = *(_DWORD *)(a2 + 40);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 40) |= 2u;
      char v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        char v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
      int v5 = *(_DWORD *)(a2 + 40);
      if ((v5 & 4) == 0)
      {
LABEL_11:
        if ((v5 & 8) == 0) {
          return;
        }
        goto LABEL_19;
      }
    }

    else if ((v5 & 4) == 0)
    {
      goto LABEL_11;
    }

    uint64_t v9 = *(const std::string **)(a2 + 16);
    *(_DWORD *)(a1 + 40) |= 4u;
    unint64_t v10 = *(std::string **)(a1 + 16);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      unint64_t v10 = (std::string *)operator new(0x18uLL);
      v10->__r_.__value_.__l.__size_ = 0LL;
      v10->__r_.__value_.__l.__cap_ = 0LL;
      v10->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 16) = v10;
    }

    std::string::operator=(v10, v9);
    if ((*(_DWORD *)(a2 + 40) & 8) != 0)
    {
LABEL_19:
      int v11 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 40) |= 8u;
      uint64_t v12 = *(std::string **)(a1 + 24);
      if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v12 = (std::string *)operator new(0x18uLL);
        v12->__r_.__value_.__l.__size_ = 0LL;
        v12->__r_.__value_.__l.__cap_ = 0LL;
        v12->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 24) = v12;
      }

      std::string::operator=(v12, v11);
    }
  }

void sub_10007D6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007D6F8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B9E0;
  sub_100073ED0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007D728(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181B9E0;
  sub_100073ED0(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10007D75C()
{
  v0 = operator new(0x30uLL);
  *(void *)&double result = 43LL;
  v0[4] = 43LL;
  void *v0 = off_10181B9E0;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 10) = 0;
  return result;
}

uint64_t sub_10007D79C(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 40);
  if (v1)
  {
    *(_DWORD *)(result + 32) = 43;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 40) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 40) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 24);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_10007D854( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
LABEL_6:
      switch(TagFallback >> 3)
      {
        case 1u:
          int v7 = TagFallback & 7;
          char v8 = (char *)*((void *)this + 1);
          if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v9 = v18;
          }

          else
          {
            unsigned int v9 = *v8;
            *((void *)this + 1) = v8 + 1;
          }

          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101228024();
            }
            *(_DWORD *)(a1 + 40) |= 1u;
            *(_DWORD *)(a1 + 32) = v9;
          }

          int v11 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
          {
            *((void *)this + 1) = v11 + 1;
            goto LABEL_35;
          }

          continue;
        case 2u:
          int v7 = TagFallback & 7;
          if (v7 != 2) {
            goto LABEL_18;
          }
LABEL_35:
          *(_DWORD *)(a1 + 40) |= 2u;
          uint64_t v12 = *(void **)(a1 + 8);
          if (v12 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            uint64_t v12 = operator new(0x18uLL);
            v12[1] = 0LL;
            v12[2] = 0LL;
            *uint64_t v12 = 0LL;
            *(void *)(a1 + 8) = v12;
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v12);
          if (!(_DWORD)result) {
            return result;
          }
          char v13 = (_BYTE *)*((void *)this + 1);
          *((void *)this + 1) = v13 + 1;
LABEL_41:
          *(_DWORD *)(a1 + 40) |= 4u;
          char v14 = *(void **)(a1 + 16);
          if (v14 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            char v14 = operator new(0x18uLL);
            v14[1] = 0LL;
            v14[2] = 0LL;
            *char v14 = 0LL;
            *(void *)(a1 + 16) = v14;
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v14);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v15 = (_BYTE *)*((void *)this + 1);
          *((void *)this + 1) = v15 + 1;
LABEL_47:
          *(_DWORD *)(a1 + 40) |= 8u;
          unint64_t v16 = *(void **)(a1 + 24);
          if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          {
            unint64_t v16 = operator new(0x18uLL);
            v16[1] = 0LL;
            v16[2] = 0LL;
            void *v16 = 0LL;
            *(void *)(a1 + 24) = v16;
          }

          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
          if (!(_DWORD)result) {
            return result;
          }
          if (*((void *)this + 1) != *((void *)this + 2)
            || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          {
            continue;
          }

          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        case 3u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_41;
          }
          goto LABEL_18;
        case 4u:
          int v7 = TagFallback & 7;
          if (v7 == 2) {
            goto LABEL_47;
          }
          goto LABEL_18;
        default:
          int v7 = TagFallback & 7;
LABEL_18:
          if (v7 == 4) {
            return 1LL;
          }
          return 0LL;
      }
    }

    break;
  }

  TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
  *((_DWORD *)this + 8) = (_DWORD)TagFallback;
  if ((_DWORD)TagFallback) {
    goto LABEL_6;
  }
  return 1LL;
}

uint64_t sub_10007DB34( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 32),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(4LL, *(void *)(v5 + 24), a2);
  }

uint64_t sub_10007DBC8(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_43;
  }

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0) {
      goto LABEL_22;
    }
  }

  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 40);
    char v8 = *(_BYTE *)(v6 + 23);
  }

  else
  {
    int v11 = 1;
  }

  if (v8 < 0) {
    int v7 = v9;
  }
  uint64_t v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }

  uint64_t v12 = *(void *)(a1 + 16);
  int v13 = *(unsigned __int8 *)(v12 + 23);
  char v14 = v13;
  uint64_t v15 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >= 0x80)
  {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16,  a2);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v15 = *(void *)(v12 + 8);
    int v3 = *(_DWORD *)(a1 + 40);
    char v14 = *(_BYTE *)(v12 + 23);
  }

  else
  {
    int v17 = 1;
  }

  if (v14 < 0) {
    int v13 = v15;
  }
  uint64_t v4 = (v4 + v17 + v13 + 1);
  if ((v3 & 8) != 0)
  {
LABEL_34:
    uint64_t v18 = *(void *)(a1 + 24);
    int v19 = *(unsigned __int8 *)(v18 + 23);
    char v20 = v19;
    uint64_t v21 = *(void *)(v18 + 8);
    if ((v19 & 0x80u) == 0) {
      unint64_t v22 = *(unsigned __int8 *)(v18 + 23);
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22 >= 0x80)
    {
      int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22,  a2);
      int v19 = *(unsigned __int8 *)(v18 + 23);
      uint64_t v21 = *(void *)(v18 + 8);
      char v20 = *(_BYTE *)(v18 + 23);
    }

    else
    {
      int v23 = 1;
    }

    if (v20 < 0) {
      int v19 = v21;
    }
    uint64_t v4 = (v4 + v23 + v19 + 1);
  }

void sub_10007DD54(uint64_t a1, void *lpsrc)
{
}

void sub_10007DDA0(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007D53C(a1, a2);
  }

uint64_t sub_10007DDE0()
{
  return 1LL;
}

void *sub_10007DDE8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.RequestPrediction");
}

void sub_10007DDF8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  14541LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_10122804C();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      char v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        char v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
    }
  }

void sub_10007DEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007DF10(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BA58;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007DF40(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BA58;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10007DF74()
{
  v0 = operator new(0x20uLL);
  *(void *)&double result = 44LL;
  v0[2] = 44LL;
  void *v0 = off_10181BA58;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 6) = 0;
  return result;
}

uint64_t sub_10007DFB0(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 24);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 44;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10007E000( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v7 = TagFallback & 7;
      char v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v9 = v15;
      }

      else
      {
        unsigned int v9 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
          sub_10122804C();
        }
        *(_DWORD *)(a1 + 24) |= 1u;
        *(_DWORD *)(a1 + 16) = v9;
      }

      uint64_t v12 = (_BYTE *)*((void *)this + 1);
      if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
      {
        *((void *)this + 1) = v12 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 24) |= 2u;
        int v13 = *(void **)(a1 + 8);
        if (v13 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v13 = operator new(0x18uLL);
          v13[1] = 0LL;
          v13[2] = 0LL;
          *int v13 = 0LL;
          *(void *)(a1 + 8) = v13;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v13);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if (v7 == 2) {
        goto LABEL_34;
      }
    }

    else
    {
      int v7 = TagFallback & 7;
    }

uint64_t sub_10007E1F4( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 24);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  }
  return result;
}

uint64_t sub_10007E24C(uint64_t a1, unsigned int a2)
{
  char v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11LL;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }

      else if (v5 >= 0x80)
      {
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_22;
        }
      }

      else
      {
        uint64_t v4 = 2LL;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
    }

    else
    {
      uint64_t v4 = 0LL;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0) {
        goto LABEL_22;
      }
    }

    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 1;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

void sub_10007E320(uint64_t a1, void *lpsrc)
{
}

void sub_10007E36C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007DDF8(a1, a2);
  }

uint64_t sub_10007E3AC()
{
  return 1LL;
}

void *sub_10007E3B4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.MiloInit");
}

BOOL sub_10007E3C4(unsigned int a1)
{
  return a1 < 0xB;
}

void sub_10007E3D0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v15,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  14942LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v15,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_1012280C4();
      }
      *(_DWORD *)(a1 + 44) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 44);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 44) |= 2u;
      char v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        char v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
      int v5 = *(_DWORD *)(a2 + 44);
    }

    if ((v5 & 4) != 0)
    {
      unsigned int v9 = *(_DWORD *)(a2 + 20);
      if (v9 >= 0xB) {
        sub_10122809C();
      }
      *(_DWORD *)(a1 + 44) |= 4u;
      *(_DWORD *)(a1 + 20) = v9;
      int v5 = *(_DWORD *)(a2 + 44);
    }

    if ((v5 & 8) != 0)
    {
      unint64_t v10 = *(const std::string **)(a2 + 24);
      *(_DWORD *)(a1 + 44) |= 8u;
      int v11 = *(std::string **)(a1 + 24);
      if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v11 = (std::string *)operator new(0x18uLL);
        v11->__r_.__value_.__l.__size_ = 0LL;
        v11->__r_.__value_.__l.__cap_ = 0LL;
        v11->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 24) = v11;
      }

      std::string::operator=(v11, v10);
      int v5 = *(_DWORD *)(a2 + 44);
    }

    if ((v5 & 0x10) != 0)
    {
      unsigned int v12 = *(_DWORD *)(a2 + 32);
      if (v12 >= 3) {
        sub_101228074();
      }
      *(_DWORD *)(a1 + 44) |= 0x10u;
      *(_DWORD *)(a1 + 32) = v12;
      int v5 = *(_DWORD *)(a2 + 44);
    }

    if ((v5 & 0x20) != 0)
    {
      int v13 = *(_DWORD *)(a2 + 36);
      *(_DWORD *)(a1 + 44) |= 0x20u;
      *(_DWORD *)(a1 + 36) = v13;
    }
  }

void sub_10007E58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007E5A4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BAD0;
  sub_10007BBE8((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007E5D4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BAD0;
  sub_10007BBE8((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10007E608()
{
  v0 = operator new(0x30uLL);
  void *v0 = off_10181BAD0;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)&double result = 45LL;
  v0[2] = 45LL;
  v0[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[4] = 0LL;
  v0[5] = 0LL;
  return result;
}

uint64_t sub_10007E648(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 44);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 45;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    *(_DWORD *)(result + 20) = 0;
    if ((*(_BYTE *)(result + 44) & 8) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    *(void *)(result + 32) = 0LL;
  }

  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t sub_10007E6D4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 36);
  while (2)
  {
    unsigned int v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        unsigned int v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && (*v9 & 0x80000000) == 0)
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
LABEL_28:
          if (v10 - 31 < 0x19 || (v10 <= 0xE ? (BOOL v17 = ((1 << v10) & 0x76B6) == 0) : (BOOL v17 = 1), !v17))
          {
            if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
              sub_1012280C4();
            }
            *(_DWORD *)(a1 + 44) |= 1u;
            *(_DWORD *)(a1 + 16) = v10;
          }

          uint64_t v18 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v18 < *((void *)this + 2) && *v18 == 18)
          {
            *((void *)this + 1) = v18 + 1;
            goto LABEL_40;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v31);
        if ((_DWORD)result)
        {
          unsigned int v10 = v31;
          goto LABEL_28;
        }

        break;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_22;
        }
LABEL_40:
        *(_DWORD *)(a1 + 44) |= 2u;
        int v19 = *(void **)(a1 + 8);
        if (v19 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v19 = operator new(0x18uLL);
          v19[1] = 0LL;
          v19[2] = 0LL;
          void *v19 = 0LL;
          *(void *)(a1 + 8) = v19;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v19);
        if (!(_DWORD)result) {
          return result;
        }
        char v20 = (_BYTE *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        unsigned int v12 = v20 + 1;
        *((void *)this + 1) = v12;
LABEL_46:
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v21 = v30;
        }

        else
        {
          unsigned int v21 = *v12;
          *((void *)this + 1) = v12 + 1;
        }

        if (v21 <= 0xA)
        {
          *(_DWORD *)(a1 + 44) |= 4u;
          *(_DWORD *)(a1 + 20) = v21;
        }

        unint64_t v22 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v22 + 1;
LABEL_56:
        *(_DWORD *)(a1 + 44) |= 8u;
        int v23 = *(void **)(a1 + 24);
        if (v23 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v23 = operator new(0x18uLL);
          v23[1] = 0LL;
          v23[2] = 0LL;
          *int v23 = 0LL;
          *(void *)(a1 + 24) = v23;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v23);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v24 = (_BYTE *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        char v14 = v24 + 1;
        *((void *)this + 1) = v14;
LABEL_62:
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v25 = v29;
        }

        else
        {
          unsigned int v25 = *v14;
          *((void *)this + 1) = v14 + 1;
        }

        if (v25 <= 2)
        {
          *(_DWORD *)(a1 + 44) |= 0x10u;
          *(_DWORD *)(a1 + 32) = v25;
        }

        char v26 = (_BYTE *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        unint64_t v16 = v26 + 1;
        *((void *)this + 1) = v16;
LABEL_72:
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v27 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          *int v5 = *v16;
          uint64_t v27 = (unsigned __int8 *)(v16 + 1);
          *((void *)this + 1) = v27;
        }

        *(_DWORD *)(a1 + 44) |= 0x20u;
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        int v8 = TagFallback & 7;
        unsigned int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_46;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_56;
        }
        goto LABEL_22;
      case 5u:
        int v8 = TagFallback & 7;
        char v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_62;
      case 6u:
        int v8 = TagFallback & 7;
        unint64_t v16 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_72;
      default:
        int v8 = TagFallback & 7;
LABEL_22:
        if (v8 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_10007EAC0( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 44);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_10007EB8C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 44);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_52;
  }

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v4 = 11LL;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 44) & 2) == 0) {
      goto LABEL_22;
    }
  }

  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(v6 + 23);
  char v8 = v7;
  uint64_t v9 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v9 = *(void *)(v6 + 8);
    int v3 = *(_DWORD *)(a1 + 44);
    char v8 = *(_BYTE *)(v6 + 23);
  }

  else
  {
    int v11 = 1;
  }

  if (v8 < 0) {
    int v7 = v9;
  }
  uint64_t v4 = (v4 + v11 + v7 + 1);
LABEL_22:
  if ((v3 & 4) != 0)
  {
    unsigned int v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v12 & 0x80000000) != 0)
    {
      int v13 = 11;
    }

    else if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 44);
    }

    else
    {
      int v13 = 2;
    }

    uint64_t v4 = (v13 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_24:
      if ((v3 & 0x10) == 0) {
        goto LABEL_25;
      }
      goto LABEL_42;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_24;
  }

  uint64_t v14 = *(void *)(a1 + 24);
  int v15 = *(unsigned __int8 *)(v14 + 23);
  char v16 = v15;
  uint64_t v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18,  a2);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v17 = *(void *)(v14 + 8);
    int v3 = *(_DWORD *)(a1 + 44);
    char v16 = *(_BYTE *)(v14 + 23);
  }

  else
  {
    int v19 = 1;
  }

  if (v16 < 0) {
    int v15 = v17;
  }
  uint64_t v4 = (v4 + v19 + v15 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_25:
    if ((v3 & 0x20) == 0) {
      goto LABEL_52;
    }
    goto LABEL_48;
  }

void sub_10007ED58(uint64_t a1, void *lpsrc)
{
}

void sub_10007EDA4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007E3D0(a1, a2);
  }

uint64_t sub_10007EDE4()
{
  return 1LL;
}

void *sub_10007EDEC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.MotionEvent");
}

void sub_10007EDFC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  15169LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_1012280EC();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      char v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        char v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
    }
  }

void sub_10007EEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007EF14(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BB48;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007EF44(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BB48;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10007EF78()
{
  v0 = operator new(0x20uLL);
  *(void *)&double result = 46LL;
  v0[2] = 46LL;
  void *v0 = off_10181BB48;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 6) = 0;
  return result;
}

uint64_t sub_10007EFB4(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 24);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 46;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10007F004( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v7 = TagFallback & 7;
      char v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v9 = v15;
      }

      else
      {
        unsigned int v9 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
          sub_1012280EC();
        }
        *(_DWORD *)(a1 + 24) |= 1u;
        *(_DWORD *)(a1 + 16) = v9;
      }

      unsigned int v12 = (_BYTE *)*((void *)this + 1);
      if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
      {
        *((void *)this + 1) = v12 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 24) |= 2u;
        int v13 = *(void **)(a1 + 8);
        if (v13 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v13 = operator new(0x18uLL);
          v13[1] = 0LL;
          v13[2] = 0LL;
          *int v13 = 0LL;
          *(void *)(a1 + 8) = v13;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v13);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if (v7 == 2) {
        goto LABEL_34;
      }
    }

    else
    {
      int v7 = TagFallback & 7;
    }

uint64_t sub_10007F1F8( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 24);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v5 + 8), a2);
  }
  return result;
}

uint64_t sub_10007F250(uint64_t a1, unsigned int a2)
{
  char v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11LL;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }

      else if (v5 >= 0x80)
      {
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_22;
        }
      }

      else
      {
        uint64_t v4 = 2LL;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
    }

    else
    {
      uint64_t v4 = 0LL;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0) {
        goto LABEL_22;
      }
    }

    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 1;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

void sub_10007F324(uint64_t a1, void *lpsrc)
{
}

void sub_10007F370(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007EDFC(a1, a2);
  }

uint64_t sub_10007F3B0()
{
  return 1LL;
}

void *sub_10007F3B8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.LegacyThrottle");
}

void sub_10007F3C8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v16,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  15517LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v16,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 48);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24);
    if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
      sub_10122813C();
    }
    *(_DWORD *)(a1 + 48) |= 1u;
    *(_DWORD *)(a1 + 24) = v6;
    int v5 = *(_DWORD *)(a2 + 48);
  }

  if ((v5 & 2) != 0)
  {
    char v8 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 48) |= 2u;
    uint64_t v9 = *(std::string **)(a1 + 8);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v9 = (std::string *)operator new(0x18uLL);
      v9->__r_.__value_.__l.__size_ = 0LL;
      v9->__r_.__value_.__l.__cap_ = 0LL;
      v9->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 8) = v9;
    }

    std::string::operator=(v9, v8);
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_11:
      if ((v5 & 8) == 0) {
        goto LABEL_12;
      }
LABEL_22:
      unsigned int v12 = *(const std::string **)(a2 + 32);
      *(_DWORD *)(a1 + 48) |= 8u;
      int v13 = *(std::string **)(a1 + 32);
      if (v13 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v13 = (std::string *)operator new(0x18uLL);
        v13->__r_.__value_.__l.__size_ = 0LL;
        v13->__r_.__value_.__l.__cap_ = 0LL;
        v13->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 32) = v13;
      }

      std::string::operator=(v13, v12);
      int v5 = *(_DWORD *)(a2 + 48);
      if ((v5 & 0x10) == 0)
      {
LABEL_13:
        if ((v5 & 0x20) == 0) {
          return;
        }
        goto LABEL_14;
      }

      goto LABEL_25;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_11;
  }

  unint64_t v10 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 48) |= 4u;
  int v11 = *(std::string **)(a1 + 16);
  if (v11 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v11 = (std::string *)operator new(0x18uLL);
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 16) = v11;
  }

  std::string::operator=(v11, v10);
  int v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_12:
  if ((v5 & 0x10) == 0) {
    goto LABEL_13;
  }
LABEL_25:
  int v14 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 48) |= 0x10u;
  *(_DWORD *)(a1 + 28) = v14;
  if ((*(_DWORD *)(a2 + 48) & 0x20) != 0)
  {
LABEL_14:
    char v7 = *(_BYTE *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(_BYTE *)(a1 + 40) = v7;
  }

void sub_10007F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10007F5D4(void *a1)
{
  uint64_t v2 = a1[1];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[2];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  uint64_t v6 = a1[4];
  if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v6 != 0)
  {
    operator delete((void *)v6);
  }

void sub_10007F684(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BBC0;
  sub_10007F5D4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10007F6B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BBC0;
  sub_10007F5D4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10007F6E8()
{
  v0 = operator new(0x38uLL);
  void *v0 = off_10181BBC0;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)&double result = 0x10000002FLL;
  v0[3] = 0x10000002FLL;
  *((_BYTE *)v0 + 40) = 0;
  *((_DWORD *)v0 + 11) = 0;
  *((_DWORD *)v0 + 12) = 0;
  return result;
}

uint64_t sub_10007F730(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 48);
  if (v1)
  {
    *(_DWORD *)(result + 24) = 47;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 48) & 4) != 0)
    {
      uint64_t v3 = *(void *)(result + 16);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 48) & 8) != 0)
    {
      uint64_t v4 = *(void *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }

    *(_DWORD *)(result + 28) = 1;
    *(_BYTE *)(result + 40) = 0;
  }

  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10007F7F4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        char v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_27:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v14 = ((1 << v9) & 0x76B6) == 0) : (BOOL v14 = 1), !v14))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_10122813C();
            }
            *(_DWORD *)(a1 + 48) |= 1u;
            *(_DWORD *)(a1 + 24) = v9;
          }

          char v15 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 18)
          {
            *((void *)this + 1) = v15 + 1;
            goto LABEL_39;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
        if ((_DWORD)result)
        {
          unsigned int v9 = v28;
          goto LABEL_27;
        }

        break;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_22;
        }
LABEL_39:
        *(_DWORD *)(a1 + 48) |= 2u;
        char v16 = *(void **)(a1 + 8);
        if (v16 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          char v16 = operator new(0x18uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = 0LL;
          *(void *)(a1 + 8) = v16;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v16);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v17 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v17 + 1;
LABEL_45:
        *(_DWORD *)(a1 + 48) |= 4u;
        unint64_t v18 = *(void **)(a1 + 16);
        if (v18 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          unint64_t v18 = operator new(0x18uLL);
          v18[1] = 0LL;
          v18[2] = 0LL;
          void *v18 = 0LL;
          *(void *)(a1 + 16) = v18;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v18);
        if (!(_DWORD)result) {
          return result;
        }
        int v19 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v19 + 1;
LABEL_51:
        *(_DWORD *)(a1 + 48) |= 8u;
        char v20 = *(void **)(a1 + 32);
        if (v20 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          char v20 = operator new(0x18uLL);
          v20[1] = 0LL;
          v20[2] = 0LL;
          *char v20 = 0LL;
          *(void *)(a1 + 32) = v20;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v20);
        if (!(_DWORD)result) {
          return result;
        }
        int v21 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        int v11 = v21 + 1;
        *((void *)this + 1) = v11;
LABEL_57:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v22 = v27;
        }

        else
        {
          unsigned int v22 = *v11;
          *((void *)this + 1) = v11 + 1;
        }

        if (v22 - 1 <= 0xA)
        {
          *(_DWORD *)(a1 + 48) |= 0x10u;
          *(_DWORD *)(a1 + 28) = v22;
        }

        int v23 = (_BYTE *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        int v13 = v23 + 1;
        *((void *)this + 1) = v13;
LABEL_67:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v24 = v29;
          unsigned int v25 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }

        else
        {
          unsigned int v24 = *v13;
          unsigned int v25 = (unsigned __int8 *)(v13 + 1);
          *((void *)this + 1) = v25;
        }

        *(_BYTE *)(a1 + 40) = v24 != 0;
        *(_DWORD *)(a1 + 48) |= 0x20u;
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_45;
        }
        goto LABEL_22;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_51;
        }
        goto LABEL_22;
      case 5u:
        int v7 = TagFallback & 7;
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_57;
      case 6u:
        int v7 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_67;
      default:
        int v7 = TagFallback & 7;
LABEL_22:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_10007FBD0( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 24),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(2LL, *(void *)(v5 + 8), a2);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_10007FC9C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t result = 0LL;
    goto LABEL_53;
  }

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v4 = 11;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else if (v6 >= 0x80)
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }

    else
    {
      unsigned int v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_22;
      }
    }
  }

  else
  {
    unsigned int v4 = 0;
    if ((*(_BYTE *)(a1 + 48) & 2) == 0) {
      goto LABEL_22;
    }
  }

  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(unsigned __int8 *)(v7 + 23);
  char v9 = v8;
  uint64_t v10 = *(void *)(v7 + 8);
  if ((v8 & 0x80u) == 0) {
    unint64_t v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v11,  a2);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v10 = *(void *)(v7 + 8);
    int v3 = *(_DWORD *)(a1 + 48);
    char v9 = *(_BYTE *)(v7 + 23);
  }

  else
  {
    int v12 = 1;
  }

  if (v9 < 0) {
    int v8 = v10;
  }
  v4 += v12 + v8 + 1;
LABEL_22:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_24;
    }
LABEL_35:
    uint64_t v19 = *(void *)(a1 + 32);
    int v20 = *(unsigned __int8 *)(v19 + 23);
    char v21 = v20;
    uint64_t v22 = *(void *)(v19 + 8);
    if ((v20 & 0x80u) == 0) {
      unint64_t v23 = *(unsigned __int8 *)(v19 + 23);
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23 >= 0x80)
    {
      int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23,  a2);
      int v20 = *(unsigned __int8 *)(v19 + 23);
      uint64_t v22 = *(void *)(v19 + 8);
      int v3 = *(_DWORD *)(a1 + 48);
      char v21 = *(_BYTE *)(v19 + 23);
    }

    else
    {
      int v24 = 1;
    }

    if (v21 < 0) {
      int v20 = v22;
    }
    v4 += v24 + v20 + 1;
    if ((v3 & 0x10) == 0) {
      goto LABEL_50;
    }
    goto LABEL_44;
  }

  uint64_t v13 = *(void *)(a1 + 16);
  int v14 = *(unsigned __int8 *)(v13 + 23);
  char v15 = v14;
  uint64_t v16 = *(void *)(v13 + 8);
  if ((v14 & 0x80u) == 0) {
    unint64_t v17 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    unint64_t v17 = v16;
  }
  if (v17 >= 0x80)
  {
    int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v17,  a2);
    int v14 = *(unsigned __int8 *)(v13 + 23);
    uint64_t v16 = *(void *)(v13 + 8);
    int v3 = *(_DWORD *)(a1 + 48);
    char v15 = *(_BYTE *)(v13 + 23);
  }

  else
  {
    int v18 = 1;
  }

  if (v15 < 0) {
    int v14 = v16;
  }
  v4 += v18 + v14 + 1;
  if ((v3 & 8) != 0) {
    goto LABEL_35;
  }
LABEL_24:
  if ((v3 & 0x10) != 0)
  {
LABEL_44:
    unsigned int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v25 & 0x80000000) != 0)
    {
      int v26 = 11;
    }

    else if (v25 >= 0x80)
    {
      int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }

    else
    {
      int v26 = 2;
    }

    v4 += v26;
  }

void sub_10007FE6C(uint64_t a1, void *lpsrc)
{
}

void sub_10007FEB8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007F3C8(a1, a2);
  }

uint64_t sub_10007FEF8()
{
  return 1LL;
}

void *sub_10007FF00@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.RetrievedLoi");
}

void sub_10007FF10(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  15744LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101228164();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
    }

    if ((v5 & 2) != 0)
    {
      uint64_t v7 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      int v8 = *(std::string **)(a1 + 8);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v8 = (std::string *)operator new(0x18uLL);
        v8->__r_.__value_.__l.__size_ = 0LL;
        v8->__r_.__value_.__l.__cap_ = 0LL;
        v8->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v8;
      }

      std::string::operator=(v8, v7);
    }
  }

void sub_100080010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100080028(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BC38;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100080058(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BC38;
  sub_10006AF90((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10008008C()
{
  v0 = operator new(0x20uLL);
  *(void *)&double result = 55LL;
  v0[2] = 55LL;
  void *v0 = off_10181BC38;
  v0[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 6) = 0;
  return result;
}

uint64_t sub_1000800C8(uint64_t result)
{
  char v1 = *(_BYTE *)(result + 24);
  if (v1)
  {
    *(_DWORD *)(result + 16) = 55;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100080118( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v7 = TagFallback & 7;
      int v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v9 = v15;
      }

      else
      {
        unsigned int v9 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v10 = ((1 << v9) & 0x76B6) == 0) : (BOOL v10 = 1), !v10))
      {
        if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
          sub_101228164();
        }
        *(_DWORD *)(a1 + 24) |= 1u;
        *(_DWORD *)(a1 + 16) = v9;
      }

      int v12 = (_BYTE *)*((void *)this + 1);
      if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
      {
        *((void *)this + 1) = v12 + 1;
LABEL_34:
        *(_DWORD *)(a1 + 24) |= 2u;
        uint64_t v13 = *(void **)(a1 + 8);
        if (v13 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v13 = operator new(0x18uLL);
          v13[1] = 0LL;
          v13[2] = 0LL;
          *uint64_t v13 = 0LL;
          *(void *)(a1 + 8) = v13;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v13);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if (v7 == 2) {
        goto LABEL_34;
      }
    }

    else
    {
      int v7 = TagFallback & 7;
    }

uint64_t sub_10008030C( uint64_t result, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 24);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(2LL, *(void *)(v5 + 8), a2);
  }
  return result;
}

uint64_t sub_100080364(uint64_t a1, unsigned int a2)
{
  char v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11LL;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }

      else if (v5 >= 0x80)
      {
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_22;
        }
      }

      else
      {
        uint64_t v4 = 2LL;
        if ((v3 & 2) == 0) {
          goto LABEL_22;
        }
      }
    }

    else
    {
      uint64_t v4 = 0LL;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0) {
        goto LABEL_22;
      }
    }

    uint64_t v6 = *(void *)(a1 + 8);
    int v7 = *(unsigned __int8 *)(v6 + 23);
    char v8 = v7;
    uint64_t v9 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 >= 0x80)
    {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10,  a2);
      int v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v9 = *(void *)(v6 + 8);
      char v8 = *(_BYTE *)(v6 + 23);
    }

    else
    {
      int v11 = 1;
    }

    if (v8 < 0) {
      int v7 = v9;
    }
    uint64_t v4 = (v4 + v11 + v7 + 1);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

void sub_100080438(uint64_t a1, void *lpsrc)
{
}

void sub_100080484(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10007FF10(a1, a2);
  }

uint64_t sub_1000804C4()
{
  return 1LL;
}

void *sub_1000804CC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.EnableAtCurrentLocation");
}

uint64_t sub_1000804DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10181BCB0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_100080570(a1, a2);
  return a1;
}

void sub_10008055C(_Unwind_Exception *a1)
{
}

void sub_100080570(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v78,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  17265LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v78,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v77, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v78);
  }

  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if (!(_BYTE)v5) {
    goto LABEL_53;
  }
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)(a1 + 292) |= 1u;
    uint64_t v6 = *(void **)(a1 + 8);
    if (!v6)
    {
      uint64_t v6 = operator new(0x30uLL);
      *uint64_t v6 = off_10181AF18;
      v6[1] = 0x100000001LL;
      v6[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v6[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v6[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v6[5] = 0LL;
      *(void *)(a1 + 8) = v6;
    }

    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A0978 + 8);
    }
    sub_100071588((uint64_t)v6, v7);
    unsigned int v5 = *(_DWORD *)(a2 + 292);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }

  *(_DWORD *)(a1 + 292) |= 2u;
  char v8 = *(void **)(a1 + 16);
  if (!v8)
  {
    char v8 = operator new(0x30uLL);
    v8[4] = 2LL;
    *char v8 = off_10181B008;
    v8[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v8[2] = 0LL;
    v8[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v8 + 10) = 0;
    *(void *)(a1 + 16) = v8;
  }

  uint64_t v9 = *(void *)(a2 + 16);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_1019A0978 + 16);
  }
  sub_100072990((uint64_t)v8, v9);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }

LABEL_78:
  *(_DWORD *)(a1 + 292) |= 0x800u;
  unsigned int v28 = *(void **)(a1 + 96);
  if (!v28)
  {
    unsigned int v28 = operator new(0x18uLL);
    *unsigned int v28 = off_10181B4B8;
    v28[1] = 32LL;
    *((_DWORD *)v28 + 4) = 0;
    *(void *)(a1 + 96) = v28;
  }

  uint64_t v29 = *(void *)(a2 + 96);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_1019A0978 + 96);
  }
  sub_100078E64((uint64_t)v28, v29);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x1000) == 0)
  {
LABEL_59:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_88;
  }

  v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 72);
  if ((v36 & 0x80000000) != 0)
  {
    uint64_t v37 = 11;
  }

  else if (v36 >= 0x80)
  {
    uint64_t v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36, a2) + 1;
    char v3 = *(_DWORD *)(a1 + 80);
  }

  else
  {
    uint64_t v37 = 2;
  }

  unsigned int v5 = (v37 + v5);
  if ((v3 & 0x800) != 0)
  {
LABEL_84:
    v38 = *(void *)(a1 + 64);
    uint64_t v39 = *(unsigned __int8 *)(v38 + 23);
    v40 = v39;
    uint64_t v41 = *(void *)(v38 + 8);
    if ((v39 & 0x80u) == 0) {
      v42 = *(unsigned __int8 *)(v38 + 23);
    }
    else {
      v42 = v41;
    }
    if (v42 >= 0x80)
    {
      uint64_t v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v42,  a2);
      uint64_t v39 = *(unsigned __int8 *)(v38 + 23);
      uint64_t v41 = *(void *)(v38 + 8);
      v40 = *(_BYTE *)(v38 + 23);
    }

    else
    {
      uint64_t v43 = 1;
    }

    if (v40 < 0) {
      uint64_t v39 = v41;
    }
    unsigned int v5 = (v5 + v43 + v39 + 1);
  }

    uint64_t v35 = *(_OWORD *)(v34 + 8);
    *(void *)&buf[16] = *(void *)(v34 + 24);
    *(_OWORD *)buf = v35;
    goto LABEL_80;
  }

  if ((v54 & 0xFF0000) == 0) {
    return result;
  }
  if ((v54 & 0x10000) != 0)
  {
    uint64_t result = *(double *)(a2 + 160);
    *(_DWORD *)(a1 + 292) |= 0x10000u;
    *(double *)(a1 + 160) = result;
    v54 = *(_DWORD *)(a2 + 292);
    if ((v54 & 0x20000) == 0)
    {
LABEL_81:
      if ((v54 & 0x40000) == 0) {
        goto LABEL_82;
      }
      goto LABEL_93;
    }
  }

  else if ((v54 & 0x20000) == 0)
  {
    goto LABEL_81;
  }

  uint64_t result = *(double *)(a2 + 168);
  *(_DWORD *)(a1 + 292) |= 0x20000u;
  *(double *)(a1 + 168) = result;
  v54 = *(_DWORD *)(a2 + 292);
  if ((v54 & 0x40000) == 0)
  {
LABEL_82:
    if ((v54 & 0x80000) == 0) {
      return result;
    }
    goto LABEL_83;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  *(unsigned __int8 *)(v5 + 113),  (BOOL)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_82;
  }

  v46 = v29;
  if ((has & 2) != 0)
  {
    estimatedHRRecoveryParam = self->_estimatedHRRecoveryParam;
    uint64_t v49 = -estimatedHRRecoveryParam;
    if (estimatedHRRecoveryParam >= 0.0) {
      uint64_t v49 = self->_estimatedHRRecoveryParam;
    }
    v50 = floor(v49 + 0.5);
    uint64_t v51 = (v49 - v50) * 1.84467441e19;
    uint64_t v47 = 2654435761u * (unint64_t)fmod(v50, 1.84467441e19);
    if (v51 >= 0.0)
    {
      if (v51 > 0.0) {
        v47 += (unint64_t)v51;
      }
    }

    else
    {
      v47 -= (unint64_t)fabs(v51);
    }
  }

  else
  {
    uint64_t v47 = 0LL;
  }

  if ((has & 0x80) != 0)
  {
    sessionVo2Max = self->_sessionVo2Max;
    v54 = -sessionVo2Max;
    if (sessionVo2Max >= 0.0) {
      v54 = self->_sessionVo2Max;
    }
    uint64_t v55 = floor(v54 + 0.5);
    v56 = (v54 - v55) * 1.84467441e19;
    v52 = 2654435761u * (unint64_t)fmod(v55, 1.84467441e19);
    if (v56 >= 0.0)
    {
      if (v56 > 0.0) {
        v52 += (unint64_t)v56;
      }
    }

    else
    {
      v52 -= (unint64_t)fabs(v56);
    }
  }

  else
  {
    v52 = 0LL;
  }

  return v64 ^ v4 ^ v63 ^ v62 ^ v61 ^ v39 ^ v46 ^ v34 ^ v60 ^ v59 ^ v58 ^ v40 ^ v45 ^ v47 ^ v52;
}

  uint64_t v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[15];
  if (v31 >= 0x80)
  {
    v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31, a2) + 1;
    char v3 = a1[20];
  }

  else
  {
    v32 = 2;
  }

  uint64_t v4 = (v32 + v4);
  if ((v3 & 0x4000) == 0)
  {
LABEL_55:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_88;
  }

  if (*(_BYTE *)(a1 + 57) && *(_DWORD *)(a1 + 20) == 5 && *(_BYTE *)(a1 + 220))
  {
    HIDWORD(v51) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
    LODWORD(v51) = HIDWORD(v51);
    if ((v51 >> 2) <= 0xCCCCCCC)
    {
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      v52 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEBUG,  "coasting vector is mature, no more updating",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        LOWORD(v113) = 0;
        LODWORD(v92) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "coasting vector is mature, no more updating",  &v113,  *(void *)&v92);
        int v12 = (char *)v53;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)",  "%s\n",  v53);
LABEL_102:
        if (v12 != buf) {
          free(v12);
        }
      }
    }
  }

  else
  {
    sub_10070D208((uint64_t)v100, a1 + 416);
    sub_10070D224(&v96, v100, (double *)a3);
    v54 = fabs(v96) + fabs(v97) + fabs(v98) + fabs(v99);
    if (v54 >= 1.001) {
      goto LABEL_105;
    }
    __asm { FMOV            V3.2S, #1.0 }

    v60 = vaddv_f32( vabs_f32( vdiv_f32( vsub_f32((float32x2_t)__PAIR64__(v93, v94), *(float32x2_t *)(a1 + 456)),  (float32x2_t)vbsl_s8( (int8x8_t)vceqz_f32((float32x2_t)__PAIR64__(v93, v94)),  _D3,  (int8x8_t)__PAIR64__(v93, v94)))));
    uint64_t v61 = 1.0;
    if (v25 != 0.0) {
      uint64_t v61 = v25;
    }
    v62 = (float)(v60 + fabsf((float)(v25 - *(float *)(a1 + 464)) / v61));
    if (v62 <= 0.2)
    {
LABEL_105:
      if (*(_BYTE *)(a1 + 57) && *(_DWORD *)(a1 + 20) == 5)
      {
        if ((v20 & 1) == 0)
        {
          ++*(_DWORD *)(a1 + 472);
          --*(_DWORD *)(a1 + 236);
          return;
        }

        if (!*(_BYTE *)(a1 + 184)
          && !*(_BYTE *)(a1 + 220)
          && (float)(*(float *)(a1 + 16) * 4.0) <= (float)*(int *)(a1 + 236))
        {
          *(_BYTE *)(a1 + 220) = 1;
        }
      }

      uint64_t v67 = 0LL;
      v68 = 0.0;
      do
      {
        v68 = v68 + *(float *)(*(void *)(a1 + 1568) + v67);
        v67 += 40LL;
      }

      while (v67 != 360);
      uint64_t v69 = exp(v68 * 5.0) * 15.0;
      if (v69 > 5000.0) {
        uint64_t v69 = 5000.0;
      }
      if (v69 < 300.0) {
        uint64_t v69 = 300.0;
      }
      int v70 = exp(-1.0 / *(float *)(a1 + 16) / v69);
      v71 = *(_DWORD *)(a1 + 472);
      if (v71 < 2)
      {
        v73 = v70;
      }

      else
      {
        uint64_t v72 = v71 - 1;
        v73 = v70;
        do
        {
          v73 = v70 * v73;
          --v72;
        }

        while (v72);
      }

      uint64_t v74 = *(_DWORD *)(a1 + 20);
      sub_1007ADE2C(a1, v73);
      sub_1007ADF50(a1, (float32x2_t *)&v105, a1 + 336, v74 > 0, 1.0);
      sub_1007AE53C(a1, (float *)&v101);
      if (*(_BYTE *)(a1 + 244))
      {
        sub_1007B1F6C(a1);
        sub_1007AA040(a1, 0);
        *(_BYTE *)(a1 + 244) = 0;
        *(_BYTE *)(a1 + 220) = 0;
      }

      *(_DWORD *)(a1 + 472) = 0;
      v75 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 432) = v75;
      *(_DWORD *)(a1 + 456) = v94;
      *(_DWORD *)(a1 + 460) = v93;
      *(float *)(a1 + 464) = v25;
    }

    else
    {
      ++*(_DWORD *)(a1 + 472);
      --*(_DWORD *)(a1 + 236);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_10184F718);
      }
      uint64_t v63 = (os_log_s *)qword_101934588;
      if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
      {
        v64 = *(_DWORD *)(a1 + 472);
        *(_DWORD *)buf = 67110400;
        *(_DWORD *)&buf[4] = v64;
        *(_WORD *)&buf[8] = 2048;
        *(double *)&buf[10] = v96;
        *(_WORD *)&buf[18] = 2048;
        *(double *)&buf[20] = v97;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = v98;
        *(_WORD *)&buf[38] = 2048;
        *(double *)&buf[40] = v99;
        *(_WORD *)&buf[48] = 2048;
        *(double *)&buf[50] = v62;
        _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEBUG,  "numSamplesSkipped (%d), deltaQ (%.3f/%.3f/%.3f/%.3f), deltaReadingM (%.3f)",  buf,  0x3Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_10184F718);
        }
        uint64_t v65 = *(_DWORD *)(a1 + 472);
        v113 = 67110400;
        *(_DWORD *)v114 = v65;
        *(_WORD *)&v114[4] = 2048;
        *(double *)&v114[6] = v96;
        *(_WORD *)&v114[14] = 2048;
        *(double *)&v114[16] = v97;
        *(_WORD *)&v114[24] = 2048;
        *(double *)&v114[26] = v98;
        *(_WORD *)&v114[34] = 2048;
        *(double *)&v114[36] = v99;
        *(_WORD *)&v114[44] = 2048;
        *(double *)&v114[46] = v62;
        LODWORD(v92) = 58;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "numSamplesSkipped (%d), deltaQ (%.3f/%.3f/%.3f/%.3f), deltaReadingM (%.3f)",  &v113,  v92,  *(double *)&v93,  *((double *)&v93 + 1),  *(double *)&v94,  *((double *)&v94 + 1));
        int v12 = (char *)v66;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)",  "%s\n",  v66);
        goto LABEL_102;
      }
    }
  }

              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_101862090);
              }
              uint64_t v41 = (os_log_s *)qword_101934988;
              if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "#SLC reporting a location change",  buf,  2u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934980 != -1) {
                  dispatch_once(&qword_101934980, &stru_101862090);
                }
                LOWORD(v187) = 0;
                LODWORD(v182) = 2;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "#SLC reporting a location change",  &v187,  *(void *)&v182);
                v166 = (char *)v165;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v165);
                if (v166 != buf) {
                  free(v166);
                }
              }

              *(void *)(a1 + 408) = 0LL;
              v42 = 1;
              uint64_t v31 = 1;
              goto LABEL_115;
            }

            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101862090);
            }
            v58 = (os_log_s *)qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v59 = *(void *)(a2 + 4);
              v60 = *(void *)(a2 + 12);
              uint64_t v61 = *(void *)(a2 + 20);
              v62 = *(void *)(a2 + 76);
              *(_DWORD *)buf = 134218752;
              *(void *)&buf[4] = v59;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v60;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&buf[24] = v61;
              *(_WORD *)&buf[32] = 2048;
              *(void *)&buf[34] = v62;
              _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "#SLC <%+.8f,%+.8f> acc %.2f timestamp %.2f is stale, discarding",  buf,  0x2Au);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_101862090);
              }
              v167 = *(const char **)(a2 + 4);
              v168 = *(void *)(a2 + 12);
              v169 = *(void *)(a2 + 20);
              v170 = *(void *)(a2 + 76);
              v187 = 134218752;
              v188 = v167;
              v189 = 2048;
              *(void *)v190 = v168;
              *(_WORD *)&v190[8] = 2048;
              *(void *)&v190[10] = v169;
              *(_WORD *)&v190[18] = 2048;
              *(void *)&v190[20] = v170;
              LODWORD(v182) = 42;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "#SLC <%+.8f,%+.8f> acc %.2f timestamp %.2f is stale, discarding",  COERCE_DOUBLE(&v187),  v182,  v183,  v184);
              v172 = (char *)v171;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v171);
              if (v172 != buf) {
                free(v172);
              }
            }

            v42 = 0;
          }

          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_101862090);
          }
          uint64_t v63 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEBUG,  "#SLC new location is not useful",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_101862090);
            }
            LOWORD(v187) = 0;
            LODWORD(v182) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "#SLC new location is not useful",  &v187,  *(void *)&v182);
            v153 = (char *)v152;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)",  "%s\n",  v152);
            if (v153 != buf) {
              free(v153);
            }
          }

          goto LABEL_115;
        }

        uint64_t v17 = *(double *)(a2 + 20);
      }

      else
      {
        uint64_t v19 = (double *)(a2 + 88);
        uint64_t v25 = *(double *)(a2 + 88);
        *(void *)(a2 + 20) = 0x408F400000000000LL;
        if (v25 >= 0.0) {
          goto LABEL_67;
        }
      }

      _BYTE *v19 = v17 / 250.0;
      goto LABEL_67;
    }

    if (v9 < 30.0) {
      goto LABEL_35;
    }
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101862090);
    }
    int v14 = qword_101934988;
    if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    uint64_t v4 = "{msg%{public}.0s:#SLC Ignoring inaccurate GPS location}";
LABEL_28:
    unsigned int v5 = (os_log_s *)v14;
    uint64_t v6 = OS_LOG_TYPE_INFO;
    goto LABEL_9;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_101862090);
  }
  uint64_t v2 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning #SLC Currently sending significant location changes read from defaults.}",  buf,  0x12u);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_101862090);
    }
  }

  char v3 = qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    uint64_t v4 = "{msg%{public}.0s:#Warning #SLC Delete 'SpoofSignificantLocationChange' from defaults to continue monitori"
         "ng SLC updates.}";
    unsigned int v5 = (os_log_s *)v3;
    uint64_t v6 = OS_LOG_TYPE_DEFAULT;
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v5, v6, v4, buf, 0x12u);
  }

      -[NSMutableArray removeObjectsInRange:](self->_events, "removeObjectsInRange:", 0LL, v37);
      v38 = (os_log_s *)qword_1019349A8;
      if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v39 = self->_events;
        buf = 68289538LL;
        uint64_t v49 = 2082;
        v50 = "";
        uint64_t v51 = 1026;
        v52 = v37;
        uint64_t v53 = 2114;
        *(void *)v54 = v39;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#cms modeproc end, processed:%{public}d, events:%{public, location:escape_only}@}",  (uint8_t *)&buf,  0x22u);
      }

      self->_lastEventHour = v3;
    }

    else
    {
      self->_lastEventHour = v3;
      if (qword_1019349A0 != -1) {
        dispatch_once(&qword_1019349A0, &stru_1018634D8);
      }
      uint64_t v7 = (os_log_s *)qword_1019349A8;
      if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEFAULT))
      {
        char v8 = (int)self->_eventStart;
        buf = 68289538LL;
        uint64_t v49 = 2082;
        v50 = "";
        uint64_t v51 = 1026;
        v52 = v8;
        uint64_t v53 = 1026;
        *(_DWORD *)v54 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#cms modeproc hour first, start:%{public}d, end:%{public}d}",  (uint8_t *)&buf,  0x1Eu);
      }
    }
  }

  v93 = *((void *)&v133 + 1);
  if (*((void *)&v133 + 1) == *(void *)v133) {
    v93 = *(void *)(v133 - 8) + 4032LL;
  }
  if (*(double *)(v93 - 192) - *(double *)(a1 + 1992) > 6.0)
  {
    sub_100CD6518(a1 + 48);
    *(_DWORD *)(a1 + 792) = 0;
  }

            uint64_t v25 = *(void (**)(void))(**(void **)(a1 + 1768) + 240LL);
LABEL_79:
            v25();
LABEL_80:
            ++*(_DWORD *)(a1 + 688);
            return;
          }
        }

        break;
      case 8:
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101866E28);
        }
        int v26 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "Fence: monitor, got kNotificationBackgroundEntry",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          LOWORD(v67) = 0;
          LODWORD(v66) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: monitor, got kNotificationBackgroundEntry",  &v67,  v66);
          uint64_t v55 = (uint8_t *)v54;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)",  "%s\n",  v54);
          if (v55 != buf) {
            free(v55);
          }
        }

        sub_100A0F768((double *)(a1 + 904), a4);
        return;
      case 9:
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101866E28);
        }
        uint64_t v27 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "Fence: monitor, got kNotificationBackgroundExit",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          LOWORD(v67) = 0;
          LODWORD(v66) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: monitor, got kNotificationBackgroundExit",  &v67,  v66);
          uint64_t v57 = (uint8_t *)v56;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleWifiNotification(const CFAbsoluteTime, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)",  "%s\n",  v56);
          if (v57 != buf) {
            free(v57);
          }
        }

        sub_100A0EEA0((double *)(a1 + 904), a4);
        return;
      default:
        return;
    }
  }

  uint64_t v39 = *(void *)(a1 + 80);
  if (!v39) {
    uint64_t v39 = *(void *)(qword_1019A1C80 + 80);
  }
  v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001FDDE0(v39, a2);
  uint64_t v41 = (int)v40;
  else {
    v42 = 1;
  }
  unsigned int v5 = (v5 + v41 + v42 + 1);
  char v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x1000) == 0)
  {
LABEL_58:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_96;
    }
    goto LABEL_90;
  }

  uint64_t v37 = *(void *)(a1 + 80);
  if (!v37) {
    uint64_t v37 = *(void *)(qword_1019A1D48 + 80);
  }
  v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1005069C0(v37, a2);
  uint64_t v39 = (int)v38;
  else {
    v40 = 1;
  }
  uint64_t v4 = (v4 + v39 + v40 + 2);
  char v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x800) == 0)
  {
LABEL_61:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_90;
  }

    uint64_t v16 = 0;
    goto LABEL_79;
  }

  return v14;
}

  v36 = *(void *)(a2 + 280);
  v5 |= 0x400000000uLL;
  void *v2 = v5;
  *(void *)(a1 + 280) = v36;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000000LL) == 0)
  {
LABEL_36:
    if ((v4 & 0x100000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_80;
  }

  PB::TextFormatter::format(this, "operatingMode", *(_DWORD *)(a1 + 360));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_80;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 272), 0x49u);
  unsigned int v5 = *v4;
  if ((*v4 & 0x100000000LL) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_80;
  }

  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostThreshold", *(double *)(a1 + 288));
  uint64_t v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x200) == 0)
  {
LABEL_30:
    if ((v15 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_80;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 344), 0x20u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_80;
  }

  unint64_t v10 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(void *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 76) = v10;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x100000000LL) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_80;
  }

  PB::TextFormatter::format(this, "pathLengthDelaySpread", *(float *)(a1 + 128));
  unsigned int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_80;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000000LL) == 0)
  {
LABEL_30:
    if ((v4 & 0x100) == 0) {
      goto LABEL_31;
    }
    goto LABEL_80;
  }

  uint64_t v13 = *(void *)(a2 + 64);
  v5 |= 0x80uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(void *)(a1 + 64) = v13;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x100) == 0)
  {
LABEL_13:
    if ((v7 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_80;
  }

  PB::TextFormatter::format(this, "configDecelPulseThreshold", *(float *)(a1 + 104));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 1) == 0)
  {
LABEL_12:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_80;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 64), 8u);
  uint64_t v6 = *v4;
  unsigned int v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_80;
  }

  if ((v5 & 0x80000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0x186A1u);
    unsigned int v5 = *v4;
    if ((*v4 & 0x100000) == 0)
    {
LABEL_80:
      if ((v5 & 0x200000) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(float *)(v3 + 96), 0x186A3u);
    }
  }

  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_80;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0x186A2u);
  if ((*v4 & 0x200000) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 96), 0x186A3u);
  }
  return result;
}

  int v18 = *(_BYTE *)(a2 + 166);
  v3 |= 0x80000000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 166) = v18;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x8000000000LL) == 0)
  {
LABEL_35:
    if ((v2 & 0x10000000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_80;
  }

  PB::TextFormatter::format(this, "kThresholdSaturationTimeRO", *(float *)(a1 + 104));
  unsigned int v5 = *(void *)(a1 + 172);
  if ((v5 & 0x200000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_80;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 162), 0x76u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x10000000000LL) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_80;
  }

  uint64_t v39 = *(_BYTE *)(a2 + 209);
  v3 |= 0x8000000000uLL;
  *(void *)(result + 212) = v3;
  *(_BYTE *)(result + 209) = v39;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x1000) == 0)
  {
LABEL_41:
    if ((v2 & 4) == 0) {
      goto LABEL_42;
    }
    goto LABEL_80;
  }

  PB::TextFormatter::format(this, "soundEnvelopeCount", *(float *)(a1 + 192));
  unsigned int v5 = *(void *)(a1 + 212);
  if ((v5 & 0x800000000LL) == 0)
  {
LABEL_38:
    if ((v5 & 0x1000000000LL) == 0) {
      goto LABEL_39;
    }
    goto LABEL_80;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0x25u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_39:
    if ((v4 & 2) == 0) {
      goto LABEL_40;
    }
    goto LABEL_80;
  }

  uint64_t v63 = *(void *)(a2 + 16);
  v6 |= 2u;
  *(_DWORD *)(a1 + 244) = v6;
  *(void *)(a1 + 16) = v63;
  uint64_t v39 = *(_DWORD *)(a2 + 244);
  if ((v39 & 0x10) == 0)
  {
LABEL_50:
    if ((v39 & 0x4000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_80;
  }

  PB::TextFormatter::format(this, "userHeight", *(float *)(a1 + 228));
  uint64_t v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x1000000) == 0)
  {
LABEL_51:
    if ((v19 & 0x2000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_80;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 212), 0x23u);
  uint64_t v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x2000) == 0)
  {
LABEL_49:
    if ((v16 & 0x20) == 0) {
      goto LABEL_50;
    }
    goto LABEL_80;
  }

  int v26 = *(_BYTE *)(a2 + 179);
  v3 |= 0x40000000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 179) = v26;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x20) == 0)
  {
LABEL_36:
    if ((v2 & 0x80) == 0) {
      goto LABEL_37;
    }
    goto LABEL_80;
  }

  PB::TextFormatter::format(this, "stepLengthEntropy", *(float *)(a1 + 124));
  unsigned int v5 = *(void *)(a1 + 184);
  if ((v5 & 0x80000000000LL) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_80;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x20u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_80;
  }

  uint64_t v45 = *(_DWORD *)(a2 + 188);
  *(void *)(a1 + 192) |= 0x2000000000uLL;
  *(_DWORD *)(a1 + 188) = v45;
  uint64_t v13 = *(void *)(a2 + 192);
  if ((v13 & 0x40) == 0)
  {
LABEL_42:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_80;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168), 0x25u);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x200000000LL) == 0)
  {
LABEL_41:
    if ((v6 & 0x400000000LL) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x27u);
  }

  uint64_t v29 = *(_DWORD *)(a2 + 152);
  v3 |= 0x800000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 152) = v29;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x4000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_80;
  }

  PB::TextFormatter::format(this, "longBodyTurnState", *(_BYTE *)(a1 + 185));
  unsigned int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000000000000LL) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_80;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000000000LL) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_80;
  }

LABEL_83:
  *(_DWORD *)(a1 + 292) |= 0x1000u;
  unsigned int v30 = *(void **)(a1 + 104);
  if (!v30)
  {
    unsigned int v30 = operator new(0x18uLL);
    *unsigned int v30 = off_10181B530;
    v30[1] = 33LL;
    *((_DWORD *)v30 + 4) = 0;
    *(void *)(a1 + 104) = v30;
  }

  uint64_t v31 = *(void *)(a2 + 104);
  if (!v31) {
    uint64_t v31 = *(void *)(qword_1019A0978 + 104);
  }
  sub_100079224((uint64_t)v30, v31);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x2000) == 0)
  {
LABEL_60:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_93;
  }

  uint64_t v45 = *(void *)(a1 + 88);
  if (!v45) {
    uint64_t v45 = *(void *)(qword_1019A0978 + 88);
  }
  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100078D68(v45, a2);
  uint64_t v47 = (int)v46;
  else {
    v48 = 1;
  }
  uint64_t v4 = (v4 + v47 + v48 + 1);
  char v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x800) == 0)
  {
LABEL_66:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_95;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  (int)a2,  *(float *)(v5 + 100),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_87;
  }

  int v26 = *(void *)(a1 + 80);
  if (!v26) {
    int v26 = *(void *)(qword_1019A0BF8 + 80);
  }
  uint64_t v27 = *(unsigned __int8 *)(v26 + 36);
  unsigned int v28 = (v27 << 31 >> 31) & 9;
  if ((v27 & 2) != 0) {
    v28 += 9;
  }
  if ((v27 & 4) != 0) {
    v28 += 9;
  }
  if (*(_BYTE *)(v26 + 36)) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  *(_DWORD *)(v26 + 32) = v29;
  unsigned int v5 = (v5 + v29 + 2);
  if ((*(_DWORD *)(a1 + 92) & 0x8000) != 0)
  {
LABEL_93:
    unsigned int v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 76);
    if ((v30 & 0x80000000) != 0)
    {
      uint64_t v31 = 12;
    }

    else if (v30 >= 0x80)
    {
      uint64_t v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2) + 2;
    }

    else
    {
      uint64_t v31 = 3;
    }

    unsigned int v5 = (v31 + v5);
  }

        *(_DWORD *)(a1 + 1064) = -1082130432;
LABEL_84:
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_10182B200);
        }
        v62 = (os_log_s *)qword_1019344E8;
        if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v63 = *(float *)(a1 + 1064);
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v63;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 2;
          _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEBUG,  "Historical median turns per session, median, %f, Nsessions, %lu",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344E0 != -1) {
            dispatch_once(&qword_1019344E0, &stru_10182B200);
          }
          uint64_t v65 = *(float *)(a1 + 1064);
          *(_DWORD *)v108 = 134218240;
          *(double *)&v108[4] = v65;
          *(_WORD *)&v108[12] = 2048;
          *(void *)&v108[14] = (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 2;
          LODWORD(v67) = 22;
          v66 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "Historical median turns per session, median, %f, Nsessions, %lu",  COERCE_DOUBLE(v108),  v67);
          sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLSwimDataStore::reloadStateFromPersistentStore()", "%s\n", v66);
          if (v66 != buf) {
            free(v66);
          }
        }

        if (*(void *)__p)
        {
          *(void *)&__p[8] = *(void *)__p;
          operator delete(*(void **)__p);
        }

        sub_1000229D4((uint64_t)&v71, v72);
        if (out[23] < 0) {
          operator delete(*(void **)out);
        }
        goto LABEL_93;
      }
    }

    memset(__p, 0, 24);
    goto LABEL_83;
  }

  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_10182B200);
  }
  uint64_t v13 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "Did not successfully load state from db! CMError, %d",  buf,  8u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10182B200);
    }
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v3;
    int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  17LL,  "Did not successfully load state from db! CMError, %d",  __p);
    sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL CLSwimDataStore::reloadStateFromPersistentStore()", "%s\n", v14);
    if (v14 != buf) {
      free(v14);
    }
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

  sub_100D57F8C(a1);
}

  if (a3 && *(_BYTE *)(a2 + 208))
  {
    uint64_t v15 = a1[17];
    int v14 = a1[18];
    goto LABEL_67;
  }

  if (v12 > 15329)
  {
    if (v12 > 15710)
    {
      if (v12 <= 19029)
      {
        if (v12 == 15711) {
          goto LABEL_110;
        }
        int v24 = 15733;
      }

      else
      {
        if (v12 == 19030 || v12 == 515652) {
          goto LABEL_110;
        }
        int v24 = 515621;
      }
    }

    else
    {
      if ((v12 - 15620) <= 0x37 && ((1LL << (v12 - 4)) & 0x80010100000001LL) != 0
        || v12 == 15330)
      {
        goto LABEL_110;
      }

      int v24 = 15360;
    }
  }

  else
  {
    if (v12 <= 2067)
    {
LABEL_113:
      uint64_t v15 = a1[13];
      int v14 = a1[14];
      goto LABEL_67;
    }

    if (v12 > 15054)
    {
      if (v12 == 15055 || v12 == 15100) {
        goto LABEL_110;
      }
      int v24 = 15150;
    }

    else
    {
      if (v12 == 2068 || v12 == 3016) {
        goto LABEL_110;
      }
      int v24 = 15030;
    }
  }

  if (v12 != v24) {
    goto LABEL_113;
  }
LABEL_110:
  if (v11)
  {
    uint64_t v15 = a1[27];
    int v14 = a1[28];
  }

  else
  {
    uint64_t v15 = a1[25];
    int v14 = a1[26];
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

  uint64_t v45 = *(void *)(a1 + 88);
  if (!v45) {
    uint64_t v45 = *(void *)(qword_1019A11B8 + 88);
  }
  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001EFA20(v45, a2);
  uint64_t v47 = (int)v46;
  else {
    v48 = 1;
  }
  uint64_t v4 = (v4 + v47 + v48 + 1);
  char v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x800) == 0)
  {
LABEL_66:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_95;
  }

  a1[16] = v4;
  return v4;
}

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

        if (v63 == v41) {
          break;
        }
        while (1)
        {
          uint64_t v69 = v32[1];
          v60 = v63 - 2;
          do
          {
            int v70 = v60[3];
            v60 += 2;
          }

          while (v69 >= v70);
          uint64_t v63 = v60 + 2;
          do
          {
            v71 = *(v41 - 1);
            v41 -= 2;
          }

          while (v69 < v71);
          if (v60 >= v41) {
            break;
          }
          uint64_t v72 = *v60;
          _DWORD *v60 = *v41;
          *uint64_t v41 = v72;
          v73 = *((void *)v60 + 1);
          v60[1] = v41[1];
          *((void *)v41 + 1) = v73;
        }

        if (v60 > v38) {
          break;
        }
      }

      else
      {
        uint64_t v45 = v33 - 2;
LABEL_51:
        v50 = v32 + 2;
        if (v32 + 2 >= v45)
        {
          uint64_t v53 = (unint64_t)(v32 + 2);
        }

        else
        {
          uint64_t v51 = v32 + 2;
          while (1)
          {
            v52 = v40[1];
            uint64_t v53 = (unint64_t)(v51 - 2);
            do
            {
              v54 = *(double *)(v53 + 24);
              v53 += 16LL;
            }

            while (v54 < v52);
            uint64_t v51 = (double *)(v53 + 16);
            do
            {
              uint64_t v55 = *(v45 - 1);
              v45 -= 2;
            }

            while (v55 >= v52);
            v56 = *(double *)v53;
            *(double *)uint64_t v53 = *v45;
            *uint64_t v45 = v56;
            uint64_t v57 = *(void *)(v53 + 8);
            *(double *)(v53 + 8) = v45[1];
            *((void *)v45 + 1) = v57;
            ++v42;
          }
        }

        if ((double *)v53 != v40 && v40[1] < *(double *)(v53 + 8))
        {
          v58 = *(double *)v53;
          *(double *)uint64_t v53 = *v40;
          void *v40 = v58;
          uint64_t v59 = *(void *)(v53 + 8);
          *(double *)(v53 + 8) = v40[1];
          *((void *)v40 + 1) = v59;
          ++v42;
        }

        if (!v42)
        {
          if (v53 <= (unint64_t)v38)
          {
            v64 = v53 + 16;
            while ((double *)v64 != v33)
            {
              uint64_t v65 = *(double *)(v64 + 8);
              v66 = *(double *)(v64 - 8);
              v64 += 16LL;
              if (v65 < v66) {
                goto LABEL_67;
              }
            }
          }

          else
          {
            while (v50 != (double *)v53)
            {
              uint64_t v61 = v50[1];
              v62 = *(v50 - 1);
              v50 += 2;
              if (v61 < v62) {
                goto LABEL_67;
              }
            }
          }

          break;
        }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

  sub_1002F0B04(&buf);
  v42 = sub_1002A6F64(buf, "EEDControlEnable", (BOOL *)&v79);
  if ((_BYTE)v79) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = 0;
  }
  v44 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)) {
    goto LABEL_90;
  }
  uint64_t v45 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    if (!v43) {
      goto LABEL_97;
    }
  }

  else
  {
LABEL_90:
    if (!v43) {
      goto LABEL_97;
    }
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  uint64_t v47 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "#EED2,sending x-eed-control-enabled as true",  (uint8_t *)&buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    LOWORD(v79) = 0;
    LODWORD(v78) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2,sending x-eed-control-enabled as true",  &v79,  v78);
    uint64_t v57 = (char *)v56;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const",  "%s\n",  v56);
  }

  [*a3 setValue:@"true" forHTTPHeaderField:@"x-eed-control-enabled"];
LABEL_97:
  sub_1002F0B04(&buf);
  v48 = sub_1002A6F64(buf, "EEDTestApplicationEnable", (BOOL *)&v79);
  if ((_BYTE)v79) {
    uint64_t v49 = v48;
  }
  else {
    uint64_t v49 = 0;
  }
  v50 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (!*((void *)&buf + 1)) {
    goto LABEL_104;
  }
  uint64_t v51 = (unint64_t *)(*((void *)&buf + 1) + 8LL);
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    if (!v49) {
      goto LABEL_111;
    }
  }

  else
  {
LABEL_104:
    if (!v49) {
      goto LABEL_111;
    }
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  uint64_t v53 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "#Warning #EED2,sending X-Apple-Test-Application as true",  (uint8_t *)&buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    LOWORD(v79) = 0;
    LODWORD(v78) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#Warning #EED2,sending X-Apple-Test-Application as true",  &v79,  v78);
    uint64_t v59 = (char *)v58;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const",  "%s\n",  v58);
  }

  [*a3 setValue:@"true" forHTTPHeaderField:@"X-Apple-Test-Application"];
LABEL_111:
}

  sub_10049108C(&v72);
  sub_10049108C(v76);
}

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

  uint64_t v43 = *(void *)(a1 + 80);
  if (!v43) {
    uint64_t v43 = *(void *)(qword_1019A1CE8 + 80);
  }
  v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B28A04(v43, a2);
  uint64_t v45 = (int)v44;
  else {
    v46 = 1;
  }
  uint64_t v4 = (v4 + v45 + v46 + 1);
  char v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x800) == 0)
  {
LABEL_66:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_95;
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

  uint64_t v22 = *(void *)(v5 + 160);
  if (!v22) {
    uint64_t v22 = *(void *)(qword_1019A1D48 + 160);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2A,  v22,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_89;
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

      uint64_t v7 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_workoutType);
      goto LABEL_84;
    }

    if (workoutType <= 11804)
    {
      if (workoutType <= 2070)
      {
        if (workoutType > 2060)
        {
          if (workoutType == 2061)
          {
            uint64_t v7 = @"kTypeCrossTraining";
            goto LABEL_84;
          }

          if (workoutType == 2065)
          {
            uint64_t v7 = @"kTypeStairClimbing";
            goto LABEL_84;
          }
        }

        else
        {
          if (workoutType == 2024)
          {
            uint64_t v7 = @"kTypeCoreTraining";
            goto LABEL_84;
          }

          if (workoutType == 2048)
          {
            uint64_t v7 = @"kTypeElliptical";
            goto LABEL_84;
          }
        }

        goto LABEL_83;
      }

      if (workoutType <= 2104)
      {
        if (workoutType == 2071)
        {
          uint64_t v7 = @"kTypeRowing";
          goto LABEL_84;
        }

        if (workoutType == 2101)
        {
          uint64_t v7 = @"kTypeCoolDown";
          goto LABEL_84;
        }

        goto LABEL_83;
      }

      if (workoutType == 2105)
      {
        uint64_t v7 = @"kTypePilates";
        goto LABEL_84;
      }

      if (workoutType == 2150)
      {
        uint64_t v7 = @"kTypeYoga";
        goto LABEL_84;
      }

      if (workoutType != 3015) {
        goto LABEL_83;
      }
      uint64_t v7 = @"kTypeDancing";
    }

    else
    {
      if (workoutType > 17149)
      {
        if (workoutType <= 18239)
        {
          if (workoutType == 17150)
          {
            uint64_t v7 = @"kTypeIndoorWalking";
            goto LABEL_84;
          }

          if (workoutType == 18200)
          {
            uint64_t v7 = @"kTypeScubaDiving";
            goto LABEL_84;
          }
        }

        else
        {
          switch(workoutType)
          {
            case 18240:
              uint64_t v7 = @"kTypeSwimming";
              goto LABEL_84;
            case 19150:
              uint64_t v7 = @"kTypeSummer";
              goto LABEL_84;
            case 90603:
              uint64_t v7 = @"kTypeOutdoorWheelchair";
              goto LABEL_84;
          }
        }

        goto LABEL_83;
      }

      if (workoutType <= 15109)
      {
        if (workoutType == 11805)
        {
          uint64_t v7 = @"kTypePushingWheelchair";
          goto LABEL_84;
        }

        if (workoutType == 12150)
        {
          uint64_t v7 = @"kTypeIndoorRunning";
          goto LABEL_84;
        }

        goto LABEL_83;
      }

      if (workoutType == 15110)
      {
        uint64_t v7 = @"kTypeKickboxing";
        goto LABEL_84;
      }

      if (workoutType == 15255)
      {
        uint64_t v7 = @"kTypeGolfing";
        goto LABEL_84;
      }

      if (workoutType != 15670) {
        goto LABEL_83;
      }
      uint64_t v7 = @"kTypeTaiChi";
    }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

  uint64_t v41 = *(void *)(a2 + 112);
  v5 |= 0x2000uLL;
  void *v2 = v5;
  *(void *)(a1 + 112) = v41;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000) == 0)
  {
LABEL_41:
    if ((v4 & 4) == 0) {
      goto LABEL_42;
    }
    goto LABEL_85;
  }

  PB::TextFormatter::format(this, "sosCanceledBecauseOfStand", *(void *)(a1 + 280));
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000000LL) == 0)
  {
LABEL_38:
    if ((v6 & 0x1000000000LL) == 0) {
      goto LABEL_39;
    }
    goto LABEL_85;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 136), 0x54u);
  unsigned int v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_39:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_85;
  }

  PB::TextFormatter::format(this, "lastMotionState", *(void *)(a1 + 328));
  uint64_t v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x4000) == 0)
  {
LABEL_35:
    if ((v15 & 0x8000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 248), 0x2Bu);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_85;
  }

  uint64_t result = *(float *)(a2 + 64);
  v3 |= 0x800uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 64) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x400) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_85;
  }

  PB::TextFormatter::format(this, "seq", *(_DWORD *)(a1 + 144));
  unsigned int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100000000LL) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_85;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0x21u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_85;
  }

      PB::Reader::recallMark(this, v81);
      goto LABEL_119;
    }

    uint64_t v59 = *(char **)(a1 + 40);
    v58 = *(void *)(a1 + 48);
    if ((unint64_t)v59 >= v58)
    {
      uint64_t v63 = (char *)*v10;
      v64 = (v59 - (_BYTE *)*v10) >> 2;
      uint64_t v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 62) {
LABEL_127:
      }
        sub_100007008();
      v66 = v58 - (void)v63;
      if (v66 >> 1 > v65) {
        uint64_t v65 = v66 >> 1;
      }
      else {
        uint64_t v67 = v65;
      }
      if (v67)
      {
        v68 = (char *)sub_10000956C(v11, v67);
        uint64_t v63 = *(char **)(a1 + 32);
        uint64_t v59 = *(char **)(a1 + 40);
      }

      else
      {
        v68 = 0LL;
      }

      v75 = &v68[4 * v64];
      *(_DWORD *)v75 = 0;
      v60 = v75 + 4;
      while (v59 != v63)
      {
        uint64_t v76 = *((_DWORD *)v59 - 1);
        v59 -= 4;
        *((_DWORD *)v75 - 1) = v76;
        v75 -= 4;
      }

      *(void *)(a1 + 32) = v75;
      *(void *)(a1 + 40) = v60;
      *(void *)(a1 + 48) = &v68[4 * v67];
      if (v63) {
        operator delete(v63);
      }
    }

    else
    {
      *(_DWORD *)uint64_t v59 = 0;
      v60 = v59 + 4;
    }

    *(void *)(a1 + 40) = v60;
    goto LABEL_114;
  }

  return v6 == 0;
}

          PB::Reader::recallMark(this, v80);
          goto LABEL_119;
        }

        v58 = *(char **)(a1 + 40);
        uint64_t v57 = *(void *)(a1 + 48);
        if ((unint64_t)v58 >= v57)
        {
          v62 = (char *)*v12;
          uint64_t v63 = (v58 - (_BYTE *)*v12) >> 2;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62) {
LABEL_127:
          }
            sub_100007008();
          uint64_t v65 = v57 - (void)v62;
          if (v65 >> 1 > v64) {
            v64 = v65 >> 1;
          }
          else {
            v66 = v64;
          }
          if (v66)
          {
            uint64_t v67 = (char *)sub_10000956C(v13, v66);
            v62 = *(char **)(a1 + 32);
            v58 = *(char **)(a1 + 40);
          }

          else
          {
            uint64_t v67 = 0LL;
          }

          uint64_t v74 = &v67[4 * v63];
          *(_DWORD *)uint64_t v74 = 0;
          uint64_t v59 = v74 + 4;
          while (v58 != v62)
          {
            v75 = *((_DWORD *)v58 - 1);
            v58 -= 4;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }

          *(void *)(a1 + 32) = v74;
          *(void *)(a1 + 40) = v59;
          *(void *)(a1 + 48) = &v67[4 * v66];
          if (v62) {
            operator delete(v62);
          }
        }

        else
        {
          *(_DWORD *)v58 = 0;
          uint64_t v59 = v58 + 4;
        }

        *(void *)(a1 + 40) = v59;
        goto LABEL_114;
      }

      if ((PB::Reader::skip(this, v27, v17 & 7, 0) & 1) == 0) {
        return 0LL;
      }
LABEL_119:
      uint64_t v4 = *((void *)this + 1);
      unsigned int v5 = *((void *)this + 2);
      uint64_t v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || *((_BYTE *)this + 24)) {
        return v6 == 0;
      }
    }

    *(_BYTE *)(a1 + 60) |= 1u;
    v42 = *((void *)this + 1);
    if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2))
    {
LABEL_116:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_119;
    }

    *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v42);
    goto LABEL_118;
  }

  return v6 == 0;
}

  uint64_t result = *(float *)(a2 + 80);
  v5 |= 0x200uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 80) = result;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x400) == 0)
  {
LABEL_18:
    if ((v7 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }

  PB::TextFormatter::format(this, "deltaVXYZBiggestImpact", *(float *)(a1 + 120));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_85;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0xDu);
  uint64_t v6 = *v4;
  unsigned int v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }

  int v12 = *(_BYTE *)(a2 + 272);
  v6 |= 0x10u;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 272) = v12;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 2) == 0)
  {
LABEL_10:
    if ((v7 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_85;
  }

  uint64_t v23 = *(void *)(a2 + 24);
  v3 |= 4uLL;
  *(void *)(a1 + 172) = v3;
  *(void *)(a1 + 24) = v23;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 8) == 0)
  {
LABEL_40:
    if ((v2 & 0x10) == 0) {
      goto LABEL_41;
    }
    goto LABEL_85;
  }

  PB::TextFormatter::format(this, "parameterRollingEnergyWindowSize", *(_DWORD *)(a1 + 124));
  unsigned int v5 = *(void *)(a1 + 172);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_85;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0xCCu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x10) == 0)
  {
LABEL_38:
    if ((v4 & 0x20) == 0) {
      goto LABEL_39;
    }
    goto LABEL_85;
  }

          *(_DWORD *)(a1 + 28) = v38;
          goto LABEL_87;
        case 4u:
          *(_BYTE *)(a1 + 36) |= 8u;
          uint64_t v41 = *((void *)this + 1);
          if (v41 <= 0xFFFFFFFFFFFFFFFBLL && v41 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v41);
            *((void *)this + 1) += 4LL;
          }

          else
          {
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_87;
        case 5u:
          *(_BYTE *)(a1 + 36) |= 1u;
          v42 = *((void *)this + 1);
          uint64_t v43 = *((void *)this + 2);
          v44 = *(void *)this;
          if (v42 <= 0xFFFFFFFFFFFFFFF5LL && v42 + 10 <= v43)
          {
            uint64_t v45 = 0;
            v46 = 0;
            uint64_t v47 = 0LL;
            do
            {
              v48 = v42 + 1;
              *((void *)this + 1) = v42 + 1;
              uint64_t v49 = *(_BYTE *)(v44 + v42);
              v47 |= (unint64_t)(v49 & 0x7F) << v45;
              if ((v49 & 0x80) == 0) {
                goto LABEL_86;
              }
              v45 += 7;
              v42 = v48;
              int v14 = v46++ > 8;
            }

            while (!v14);
LABEL_73:
            uint64_t v47 = 0LL;
            goto LABEL_86;
          }

          v58 = 0;
          uint64_t v59 = 0;
          uint64_t v47 = 0LL;
          if (v43 <= v42) {
            uint64_t v43 = *((void *)this + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_87;
      }

      while (1)
      {
        if (v43 == v42)
        {
          uint64_t v47 = 0LL;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_86;
        }

        v60 = v42 + 1;
        uint64_t v61 = *(_BYTE *)(v44 + v42);
        *((void *)this + 1) = v60;
        v47 |= (unint64_t)(v61 & 0x7F) << v58;
        if ((v61 & 0x80) == 0) {
          break;
        }
        v58 += 7;
        v42 = v60;
        int v14 = v59++ > 8;
        if (v14) {
          goto LABEL_73;
        }
      }

      if (*((_BYTE *)this + 24)) {
        uint64_t v47 = 0LL;
      }
LABEL_86:
      *(void *)(a1 + 16) = v47;
LABEL_87:
      uint64_t v2 = *((void *)this + 1);
      char v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      char v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      int v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

          uint64_t v4 = *((void *)this + 1);
          unsigned int v5 = *((void *)this + 2);
          uint64_t v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24)) {
            return v6 == 0;
          }
          break;
        case 3u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFF7LL || v44 + 8 > *((void *)this + 2)) {
            goto LABEL_80;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v44);
          goto LABEL_82;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          uint64_t v45 = *((void *)this + 1);
          if (v45 >= *((void *)this + 2))
          {
            v48 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v46 = v45 + 1;
            uint64_t v47 = *(unsigned __int8 *)(*(void *)this + v45);
            *((void *)this + 1) = v46;
            v48 = v47 != 0;
          }

          *(_BYTE *)(a1 + 48) = v48;
          goto LABEL_83;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_83;
      }
    }

    uint64_t v19 = 0;
    int v20 = 0;
    uint64_t v15 = 0LL;
    if (v4 > v5) {
      unsigned int v5 = v4;
    }
    while (v5 != v4)
    {
      uint64_t v21 = v4 + 1;
      uint64_t v22 = *(_BYTE *)(v12 + v4);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      uint64_t v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        uint64_t v15 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

      PB::Reader::recallMark(this, v81);
      goto LABEL_119;
    }

    uint64_t v59 = *(char **)(a1 + 16);
    v58 = *(void *)(a1 + 24);
    if ((unint64_t)v59 >= v58)
    {
      uint64_t v63 = (char *)*v10;
      v64 = (v59 - (_BYTE *)*v10) >> 2;
      uint64_t v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 62) {
LABEL_127:
      }
        sub_100007008();
      v66 = v58 - (void)v63;
      if (v66 >> 1 > v65) {
        uint64_t v65 = v66 >> 1;
      }
      else {
        uint64_t v67 = v65;
      }
      if (v67)
      {
        v68 = (char *)sub_10000956C(v11, v67);
        uint64_t v63 = *(char **)(a1 + 8);
        uint64_t v59 = *(char **)(a1 + 16);
      }

      else
      {
        v68 = 0LL;
      }

      v75 = &v68[4 * v64];
      *(_DWORD *)v75 = 0;
      v60 = v75 + 4;
      while (v59 != v63)
      {
        uint64_t v76 = *((_DWORD *)v59 - 1);
        v59 -= 4;
        *((_DWORD *)v75 - 1) = v76;
        v75 -= 4;
      }

      *(void *)(a1 + 8) = v75;
      *(void *)(a1 + 16) = v60;
      *(void *)(a1 + 24) = &v68[4 * v67];
      if (v63) {
        operator delete(v63);
      }
    }

    else
    {
      *(_DWORD *)uint64_t v59 = 0;
      v60 = v59 + 4;
    }

    *(void *)(a1 + 16) = v60;
    goto LABEL_114;
  }

  return v6 == 0;
}

          *(_DWORD *)(a1 + 36) = v30;
          goto LABEL_97;
        case 2u:
          if ((_DWORD)v24 == 2)
          {
            if ((PB::Reader::placeMark(this, v70, v24, a4) & 1) != 0) {
              return 0LL;
            }
            uint64_t v33 = *((void *)this + 1);
            v34 = *((void *)this + 2);
            while (v33 < v34 && !*((_BYTE *)this + 24))
            {
              v36 = *(char **)(a1 + 16);
              uint64_t v35 = *(void *)(a1 + 24);
              if ((unint64_t)v36 >= v35)
              {
                v38 = (char *)*v10;
                uint64_t v39 = (v36 - (_BYTE *)*v10) >> 2;
                v40 = v39 + 1;
                uint64_t v41 = v35 - (void)v38;
                if (v41 >> 1 > v40) {
                  v40 = v41 >> 1;
                }
                else {
                  v42 = v40;
                }
                if (v42)
                {
                  uint64_t v43 = (char *)sub_10000956C(v11, v42);
                  v38 = *(char **)(a1 + 8);
                  v36 = *(char **)(a1 + 16);
                }

                else
                {
                  uint64_t v43 = 0LL;
                }

                v44 = &v43[4 * v39];
                *(_DWORD *)v44 = 0;
                uint64_t v37 = v44 + 4;
                while (v36 != v38)
                {
                  uint64_t v45 = *((_DWORD *)v36 - 1);
                  v36 -= 4;
                  *((_DWORD *)v44 - 1) = v45;
                  v44 -= 4;
                }

                *(void *)(a1 + 8) = v44;
                *(void *)(a1 + 16) = v37;
                *(void *)(a1 + 24) = &v43[4 * v42];
                if (v38) {
                  operator delete(v38);
                }
              }

              else
              {
                *(_DWORD *)v36 = 0;
                uint64_t v37 = v36 + 4;
              }

              *(void *)(a1 + 16) = v37;
              v46 = *((void *)this + 1);
              if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v37 - 1) = *(_DWORD *)(*(void *)this + v46);
              v34 = *((void *)this + 2);
              uint64_t v33 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v33;
            }

            PB::Reader::recallMark(this, v70);
          }

          else
          {
            uint64_t v57 = *(char **)(a1 + 16);
            v56 = *(void *)(a1 + 24);
            if ((unint64_t)v57 >= v56)
            {
              uint64_t v59 = (char *)*v10;
              v60 = (v57 - (_BYTE *)*v10) >> 2;
              uint64_t v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62) {
LABEL_107:
              }
                sub_100007008();
              v62 = v56 - (void)v59;
              if (v62 >> 1 > v61) {
                uint64_t v61 = v62 >> 1;
              }
              else {
                uint64_t v63 = v61;
              }
              if (v63)
              {
                v64 = (char *)sub_10000956C(v11, v63);
                uint64_t v59 = *(char **)(a1 + 8);
                uint64_t v57 = *(char **)(a1 + 16);
              }

              else
              {
                v64 = 0LL;
              }

              uint64_t v65 = &v64[4 * v60];
              *(_DWORD *)uint64_t v65 = 0;
              v58 = v65 + 4;
              while (v57 != v59)
              {
                v66 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *((_DWORD *)v65 - 1) = v66;
                v65 -= 4;
              }

              *(void *)(a1 + 8) = v65;
              *(void *)(a1 + 16) = v58;
              *(void *)(a1 + 24) = &v64[4 * v63];
              if (v59) {
                operator delete(v59);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v57 = 0;
              v58 = v57 + 4;
            }

            *(void *)(a1 + 16) = v58;
            uint64_t v67 = *((void *)this + 1);
            if (v67 <= 0xFFFFFFFFFFFFFFFBLL && v67 + 4 <= *((void *)this + 2))
            {
              *(v58 - 1) = *(_DWORD *)(*(void *)this + v67);
LABEL_96:
              *((void *)this + 1) += 4LL;
            }

            else
            {
LABEL_94:
              *((_BYTE *)this + 24) = 1;
            }
          }

      PB::Reader::recallMark(this, v80);
      goto LABEL_119;
    }

    v58 = *(char **)(a1 + 40);
    uint64_t v57 = *(void *)(a1 + 48);
    if ((unint64_t)v58 >= v57)
    {
      v62 = (char *)*v10;
      uint64_t v63 = (v58 - (_BYTE *)*v10) >> 3;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61) {
LABEL_127:
      }
        sub_100007008();
      uint64_t v65 = v57 - (void)v62;
      if (v65 >> 2 > v64) {
        v64 = v65 >> 2;
      }
      else {
        v66 = v64;
      }
      if (v66)
      {
        uint64_t v67 = (char *)sub_1000071BC(v11, v66);
        v62 = *(char **)(a1 + 32);
        v58 = *(char **)(a1 + 40);
      }

      else
      {
        uint64_t v67 = 0LL;
      }

      uint64_t v74 = &v67[8 * v63];
      *(void *)uint64_t v74 = 0LL;
      uint64_t v59 = v74 + 8;
      while (v58 != v62)
      {
        v75 = *((void *)v58 - 1);
        v58 -= 8;
        *((void *)v74 - 1) = v75;
        v74 -= 8;
      }

      *(void *)(a1 + 32) = v74;
      *(void *)(a1 + 40) = v59;
      *(void *)(a1 + 48) = &v67[8 * v66];
      if (v62) {
        operator delete(v62);
      }
    }

    else
    {
      *(void *)v58 = 0LL;
      uint64_t v59 = v58 + 8;
    }

    *(void *)(a1 + 40) = v59;
    goto LABEL_114;
  }

  return v6 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 132) = v4;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x40) == 0)
  {
LABEL_41:
    if ((v2 & 0x100) == 0) {
      goto LABEL_42;
    }
    goto LABEL_85;
  }

  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 140));
  unsigned int v5 = *(void *)(a1 + 184);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x100000000LL) == 0) {
      goto LABEL_39;
    }
    goto LABEL_85;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0x25u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x100) == 0)
  {
LABEL_39:
    if ((v4 & 0x200) == 0) {
      goto LABEL_40;
    }
    goto LABEL_85;
  }

      PB::Reader::recallMark(this, v80);
      goto LABEL_119;
    }

    v58 = *(char **)(a1 + 40);
    uint64_t v57 = *(void *)(a1 + 48);
    if ((unint64_t)v58 >= v57)
    {
      v62 = (char *)*v10;
      uint64_t v63 = (v58 - (_BYTE *)*v10) >> 3;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61) {
LABEL_127:
      }
        sub_100007008();
      uint64_t v65 = v57 - (void)v62;
      if (v65 >> 2 > v64) {
        v64 = v65 >> 2;
      }
      else {
        v66 = v64;
      }
      if (v66)
      {
        uint64_t v67 = (char *)sub_1000071BC(v11, v66);
        v62 = *(char **)(a1 + 32);
        v58 = *(char **)(a1 + 40);
      }

      else
      {
        uint64_t v67 = 0LL;
      }

      uint64_t v74 = &v67[8 * v63];
      *(void *)uint64_t v74 = 0LL;
      uint64_t v59 = v74 + 8;
      while (v58 != v62)
      {
        v75 = *((void *)v58 - 1);
        v58 -= 8;
        *((void *)v74 - 1) = v75;
        v74 -= 8;
      }

      *(void *)(a1 + 32) = v74;
      *(void *)(a1 + 40) = v59;
      *(void *)(a1 + 48) = &v67[8 * v66];
      if (v62) {
        operator delete(v62);
      }
    }

    else
    {
      *(void *)v58 = 0LL;
      uint64_t v59 = v58 + 8;
    }

    *(void *)(a1 + 40) = v59;
    goto LABEL_114;
  }

  return v6 == 0;
}

  v34 = *(_DWORD *)(a2 + 76);
  v3 |= 0x10000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 76) = v34;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x8000000000LL) == 0)
  {
LABEL_36:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_85;
  }

  PB::TextFormatter::format(this, "srcOmegaInertial_Y", *(float *)(a1 + 108));
  unsigned int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_85;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168), 0x20u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_85;
  }

    os_activity_scope_leave(&state);
  }

    os_activity_scope_leave(&state);
  }

LABEL_88:
  *(_DWORD *)(a1 + 292) |= 0x2000u;
  v32 = *(void **)(a1 + 112);
  if (!v32)
  {
    v32 = operator new(0x18uLL);
    void *v32 = off_10181B5A8;
    v32[1] = 34LL;
    *((_DWORD *)v32 + 4) = 0;
    *(void *)(a1 + 112) = v32;
  }

  uint64_t v33 = *(void *)(a2 + 112);
  if (!v33) {
    uint64_t v33 = *(void *)(qword_1019A0978 + 112);
  }
  sub_1000795E4((uint64_t)v32, v33);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x4000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_98;
  }

  uint64_t v25 = *(void *)(v5 + 152);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_1019A0978 + 152);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  v25,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_94;
  }

  uint64_t result = *(double *)(a2 + 88);
  *(_DWORD *)(a1 + 292) |= 0x800u;
  *(double *)(a1 + 88) = result;
  v54 = *(_DWORD *)(a2 + 292);
  if ((v54 & 0x1000) == 0)
  {
LABEL_76:
    if ((v54 & 0x2000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  (int)a2,  *(double *)(v5 + 128),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_90;
  }

      sub_1002DDAD8((uint64_t)v75);
      return;
    default:
      goto LABEL_88;
  }

  if (([*(id *)(a1 + 136) isKeyPathRegisteredSystemService:v12] & 1) == 0
    && ![v12 subIdentityId])
  {
    v36 = *(void **)(a1 + 136);
    if (a3 == 4)
    {
      if (([v36 hasValueForKey:@"ConsumptionPeriodBegin" atKeyPath:v12] & 1) == 0) {
        [*(id *)(a1 + 136) setDouble:@"ConsumptionPeriodBegin" forKey:v12 atKeyPath:CFAbsoluteTimeGetCurrent()];
      }
      if (([*(id *)(a1 + 136) hasValueForKey:@"NextConsumptionThresholdScore" atKeyPath:v12] & 1) == 0) {
        [*(id *)(a1 + 136) setInt:0 forKey:@"NextConsumptionThresholdScore" atKeyPath:v12];
      }
      goto LABEL_97;
    }

    [v36 removeValueForKey:@"ConsumptionPeriodBegin" atKeyPath:v12];
    [*(id *)(a1 + 136) removeValueForKey:@"NextConsumptionThresholdScore" atKeyPath:v12];
    [*(id *)(a1 + 136) removeValueForKey:@"NextNextConsumptionThresholdScore" atKeyPath:v12];
  }

  if (a3) {
LABEL_97:
  }
    [*(id *)(a1 + 136) removeValueForKey:@"AuthorizationPromptOptionTypeNegative" atKeyPath:v12];
  [*(id *)(a1 + 136) persist];
  sub_1010DDBC0(buf, "");
  sub_100544214(a1, v12, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  return 1LL;
}

  uint64_t v25 = *(void *)(v5 + 152);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_1019A11B8 + 152);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  v25,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_94;
  }

  uint64_t v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[17];
  if (v35 >= 0x80)
  {
    v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35, a2) + 2;
    char v3 = a1[20];
  }

  else
  {
    v36 = 3;
  }

  uint64_t v4 = (v36 + v4);
  if ((v3 & 0x10000) != 0)
  {
LABEL_92:
    uint64_t v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[18];
    else {
      v38 = 3;
    }
    uint64_t v4 = (v38 + v4);
  }

      uint64_t v53 = 1LL;
      goto LABEL_96;
    }
  }

      v54 = 1LL;
      goto LABEL_96;
    }
  }

      uint64_t v53 = 1LL;
      goto LABEL_96;
    }
  }

      v54 = 1LL;
      goto LABEL_96;
    }
  }

      uint64_t v47 = (void *)v32[1];
      if (v47)
      {
        do
        {
          v48 = v47;
          uint64_t v47 = (void *)*v47;
        }

        while (v47);
      }

      else
      {
        do
        {
          v48 = (void *)v32[2];
          int v26 = *v48 == (void)v32;
          v32 = v48;
        }

        while (!v26);
      }

      v32 = v48;
      if (v48 == (void *)(a1 + 248)) {
        goto LABEL_98;
      }
    }
  }

  uint64_t v33 = 0;
  v95 = 0;
  v36 = 5000000.0;
LABEL_98:
  if (v93 == 13 || v23 == 11 || v23 == 4)
  {
    *(void *)(a1 + 696) = 0LL;
    v50 = a1 + 1312;
    uint64_t v49 = (double *)(a1 + 904);
  }

  else
  {
    v50 = a1 + 1312;
    uint64_t v49 = (double *)(a1 + 904);
    if (v24 && *(void *)(a1 + 256))
    {
      uint64_t v57 = *(double *)(a1 + 648);
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 1768) + 16LL))(*(void *)(a1 + 1768)))
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101866E28);
        }
        v58 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v59 = *(void *)(a1 + 256);
          *(_DWORD *)buf = 134349056;
          *(void *)&buf[4] = v59;
          _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "request a scan to comfirm cell location, fences, %{public}lu",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          v83 = *(void *)(a1 + 256);
          LODWORD(__p.__r_.__value_.__l.__data_) = 134349056;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v83;
          LODWORD(v90) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "request a scan to comfirm cell location, fences, %{public}lu",  &__p,  v90);
          v85 = (char *)v84;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)",  "%s\n",  v84);
          if (v85 != buf) {
            free(v85);
          }
          v50 = a1 + 1312;
          uint64_t v49 = (double *)(a1 + 904);
        }

        if (*(double *)&v100[20] > 1400.0 && v95)
        {
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          v60 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67240449;
            *(_DWORD *)&buf[4] = v95;
            *(_WORD *)&buf[8] = 2049;
            *(double *)&buf[10] = v98;
            _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEBUG,  "Fence: requesting a scan, numOfFencesNeedScan, %{public}d, minDistanceToFence, %{private}.1lf",  buf,  0x12u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101866E28);
            }
            LODWORD(__p.__r_.__value_.__l.__data_) = 67240449;
            HIDWORD(__p.__r_.__value_.__r.__words[0]) = v95;
            LOWORD(__p.__r_.__value_.__r.__words[1]) = 2049;
            *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = v98;
            LODWORD(v90) = 18;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: requesting a scan, numOfFencesNeedScan, %{public}d, minDistanceToFence, %{private}.1lf",  &__p,  v90);
            v89 = (char *)v88;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)",  "%s\n",  v88);
            if (v89 != buf) {
              free(v89);
            }
            v50 = a1 + 1312;
            uint64_t v49 = (double *)(a1 + 904);
          }

          (*(void (**)(uint64_t, const char *, void, double))(*(void *)a1 + 96LL))( a1,  "handleLocation.cell2wifi",  0LL,  a4);
          goto LABEL_107;
        }
      }

      else if (v36 <= 25000.0)
      {
        uint64_t v63 = (*(uint64_t (**)(void))(**(void **)(a1 + 1768) + 400LL))(*(void *)(a1 + 1768));
        if (vabdd_f64(a4, v57) <= 756.0) {
          v64 = 1;
        }
        else {
          v64 = v63;
        }
        if ((v64 & 1) == 0 && sub_1009F4C34(a1))
        {
          *(double *)(a1 + 648) = a4;
          *(void *)(a1 + 684) = 0x300000001LL;
          (*(void (**)(void, void *))(**(void **)(a1 + 1768) + 240LL))( *(void *)(a1 + 1768),  &unk_1013435F8);
        }
      }

      else
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101866E28);
        }
        v62 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134283521;
          *(double *)&buf[4] = v36;
          _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEBUG,  "cancelLocationWatchdog, wifi off, minDistance, %{private}lf",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 134283521;
          *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v36;
          LODWORD(v90) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "cancelLocationWatchdog, wifi off, minDistance, %{private}lf",  &__p,  v90);
          v87 = (char *)v86;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)",  "%s\n",  v86);
          if (v87 != buf) {
            free(v87);
          }
          v50 = a1 + 1312;
          uint64_t v49 = (double *)(a1 + 904);
        }

        (*(void (**)(void))(**(void **)(a1 + 1768) + 280LL))(*(void *)(a1 + 1768));
        *(void *)(a1 + 684) = 0LL;
      }
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  uint64_t v51 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240449;
    *(_DWORD *)&buf[4] = v95;
    *(_WORD *)&buf[8] = 2049;
    *(double *)&buf[10] = v98;
    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "Fence: avoid a scan, numOfFencesNeedScan, %{public}d, minDistanceToFence, %{private}.1lf",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 67240449;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v95;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 2049;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = v98;
    LODWORD(v90) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: avoid a scan, numOfFencesNeedScan, %{public}d, minDistanceToFence, %{private}.1lf",  &__p,  v90);
    v75 = (char *)v74;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)",  "%s\n",  v74);
    if (v75 != buf) {
      free(v75);
    }
    v50 = a1 + 1312;
    uint64_t v49 = (double *)(a1 + 904);
  }

  *(_DWORD *)(a1 + 92) = v4;
  return v4;
}

        free(v13);
        goto LABEL_67;
      }

      self->fClassificationInProgress = 1;
      Current = CFAbsoluteTimeGetCurrent();
      uint64_t v47 = 0LL;
      v48 = (double *)&v47;
      uint64_t v49 = 0x2020000000LL;
      v50 = 0LL;
      uint64_t v43 = 0LL;
      v44 = &v43;
      uint64_t v45 = 0x2020000000LL;
      v46 = 0;
      uint64_t v15 = sub_1006E27E8();
      sub_100413284(v15, buf);
      sub_1002A82BC(*(uint64_t *)buf, "steadinessClassificationNextClassificationTime", v48 + 3);
      uint64_t v16 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v17 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          int v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }

      uint64_t v19 = v48[3];
      if (v19 <= Current + -7776000.0)
      {
        v48[3] = Current + -7776000.0;
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_101872F38);
        }
        uint64_t v25 = (os_log_s *)qword_101934488;
        if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = *((void *)v48 + 3);
          *(_DWORD *)buf = 134349056;
          *(void *)&buf[4] = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Checking for historical samples -- setting classification time in the past: (%{public}.2f)",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934480 != -1) {
            dispatch_once(&qword_101934480, &stru_101872F38);
          }
          uint64_t v35 = *((void *)v48 + 3);
          uint64_t v51 = 134349056;
          v52 = v35;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "Checking for historical samples -- setting classification time in the past: (%{public}.2f)",  &v51,  12);
          uint64_t v37 = (char *)v36;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]",  "%s\n",  v36);
          if (v37 != buf) {
            free(v37);
          }
        }

        *((_BYTE *)v44 + 24) = 1;
      }

      else if (v19 > Current)
      {
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_101872F38);
        }
        int v20 = (os_log_s *)qword_101934488;
        if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = *((void *)v48 + 3);
          *(_DWORD *)buf = 134349056;
          *(void *)&buf[4] = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Trying to classify a time period in the future (%{public}.2f)",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934480 != -1) {
            dispatch_once(&qword_101934480, &stru_101872F38);
          }
          uint64_t v22 = *((void *)v48 + 3);
          uint64_t v51 = 134349056;
          v52 = v22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  16LL,  "Trying to classify a time period in the future (%{public}.2f)",  &v51,  12);
          int v24 = (char *)v23;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]",  "%s\n",  v23);
          if (v24 != buf) {
            free(v24);
          }
        }
      }

      uint64_t v27 = sub_1010484B4((double *)&v51, v48[3], Current);
      unsigned int v28 = (void *)(*(uint64_t (**)(BoutMetricsRecorderDb *, double))(*(void *)self->fBoutMetricsDb.__ptr_
                                                                               + 176LL))( self->fBoutMetricsDb.__ptr_,  v27);
      if (v28)
      {
        [v28 copy];
      }

      else
      {
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_101872F38);
        }
        uint64_t v29 = (os_log_s *)qword_101934488;
        if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Missing Database UUID", buf, 2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934480 != -1) {
            dispatch_once(&qword_101934480, &stru_101872F38);
          }
          v42[0] = 0;
          LODWORD(v41) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  17LL,  "Missing Database UUID",  v42,  v41);
          uint64_t v39 = (char *)v38;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]",  "%s\n",  v38);
          if (v39 != buf) {
            free(v39);
          }
        }
      }

      ptr = self->fHKQueryDelegate.__ptr_;
      objc_msgSend(-[CLMobilityWalkingBoutService universe](self, "universe"), "silo");
      nullsub_10(ptr);
      _Block_object_dispose(&v43, 8);
      _Block_object_dispose(&v47, 8);
    }

    else
    {
      if (qword_101934480 != -1) {
        dispatch_once(&qword_101934480, &stru_101872F38);
      }
      uint64_t v9 = (os_log_s *)qword_101934488;
      if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "#warning: HealthKit: Walking Steadiness unavailable",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934480 != -1) {
          dispatch_once(&qword_101934480, &stru_101872F38);
        }
        LOWORD(v51) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "#warning: HealthKit: Walking Steadiness unavailable",  &v51,  2);
        uint64_t v33 = (char *)v32;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]",  "%s\n",  v32);
        if (v33 != buf) {
          free(v33);
        }
      }

      (*((void (**)(id, uint64_t, uint64_t))a3 + 2))(a3, 1LL, 1LL);
    }
  }

  else
  {
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_101872F38);
    }
    char v8 = (os_log_s *)qword_101934488;
    if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(void *)&buf[10] = "";
      v54 = 2082;
      uint64_t v55 = "Migration is not complete";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:classifySteadinessWithCompletion: NO, reason:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    (*((void (**)(id, uint64_t, void))a3 + 2))(a3, 1LL, 0LL);
  }

  int v24 = *(void *)(v5 + 160);
  if (!v24) {
    int v24 = *(void *)(qword_1019A1D38 + 160);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  v24,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_94;
  }

  uint64_t v45 = *(void *)(a1 + 96);
  if (!v45) {
    uint64_t v45 = *(void *)(qword_1019A1D38 + 96);
  }
  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC2B08(v45, a2);
  uint64_t v47 = (int)v46;
  else {
    v48 = 1;
  }
  v4 += v47 + v48 + 1;
  char v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x2000) == 0)
  {
LABEL_61:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_100;
  }

  if (*(double *)(a1 + 264) == 0.0 && !*(_BYTE *)(a1 + 396) && (v21 <= 0.0 || *(double *)(a1 + 272) < 0.0))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    v56 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v57 = *(void *)(a1 + 176);
      *(_DWORD *)buf = 134349056;
      v108 = v57;
      _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,position dependent",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      uint64_t v74 = *(void *)(a1 + 176);
      v91 = 134349056;
      v92 = v74;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,position dependent",  &v91,  12);
      uint64_t v76 = (uint8_t *)v75;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnv ironmentInfo &) const",  "%s\n",  v75);
      if (v76 != buf) {
        free(v76);
      }
    }

    goto LABEL_98;
  }

  uint64_t v2 = 0LL;
LABEL_99:
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188A8E0);
  }
  v58 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v59 = *(void *)(a1 + 176);
    v60 = *(void *)(a1 + 336);
    uint64_t v61 = *(void *)(a1 + 768);
    v62 = *(void *)(a1 + 272);
    uint64_t v63 = *(void *)(a1 + 1048);
    v64 = *(void *)(a1 + 360);
    *(_DWORD *)buf = 134351360;
    v108 = v59;
    v109 = 2050;
    *(void *)v110 = v60;
    *(_WORD *)&v110[8] = 2050;
    v111 = v61;
    v112 = 2050;
    v113 = v62;
    v114 = 2050;
    *(void *)v115 = v63;
    *(_WORD *)&v115[8] = 1026;
    *(_DWORD *)v116 = v2;
    *(_WORD *)&v116[4] = 2050;
    *(void *)&v116[6] = v64;
    v117 = 1026;
    v118 = v20 >= 45.0;
    v119 = 1026;
    v120 = v23;
    v121 = 1026;
    v122 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoi ngDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCour seChange,%{public}d,isCrumbCourseAlignedWithOutgoing,%{public}d, isCrumbCourseAlignedWithIncoming,%{public}d",  buf,  0x56u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    v66 = *(void *)(a1 + 176);
    uint64_t v67 = *(void *)(a1 + 336);
    v68 = *(void *)(a1 + 768);
    uint64_t v69 = *(void *)(a1 + 272);
    int v70 = *(void *)(a1 + 1048);
    v71 = *(void *)(a1 + 360);
    v91 = 134351360;
    v92 = v66;
    v93 = 2050;
    *(void *)v94 = v67;
    *(_WORD *)&v94[8] = 2050;
    v95 = v68;
    v96 = 2050;
    v97 = v69;
    v98 = 2050;
    *(void *)v99 = v70;
    *(_WORD *)&v99[8] = 1026;
    *(_DWORD *)v100 = v2;
    *(_WORD *)&v100[4] = 2050;
    *(void *)&v100[6] = v71;
    v101 = 1026;
    v102 = v20 >= 45.0;
    v103 = 1026;
    v104 = v23;
    v105 = 1026;
    v106 = v25;
    LODWORD(v90) = 86;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoi ngDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCour seChange,%{public}d,isCrumbCourseAlignedWithOutgoing,%{public}d, isCrumbCourseAlignedWithIncoming,%{public}d",  &v91,  v90);
    v73 = (uint8_t *)v72;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvir onmentInfo &) const",  "%s\n",  v72);
    if (v73 != buf) {
      free(v73);
    }
  }

  return v2;
}

        [v3 setObject:v8 forKey:@"workoutType"];
        if ((*(_BYTE *)&self->_has & 2) == 0) {
          goto LABEL_93;
        }
LABEL_89:
        locationType = self->_locationType;
        if (locationType >= 3) {
          unint64_t v10 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_locationType);
        }
        else {
          unint64_t v10 = (NSString *)*(&off_101890A08 + locationType);
        }
        [v3 setObject:v10 forKey:@"locationType"];
        goto LABEL_93;
      }

      if (workoutType > 99)
      {
        if (workoutType > 2019)
        {
          if (workoutType == 2020)
          {
            char v8 = @"kTypeCalisthenics";
            goto LABEL_88;
          }

          if (workoutType == 2022)
          {
            char v8 = @"kTypeFunctionalStrength";
            goto LABEL_88;
          }
        }

        else
        {
          if (workoutType == 100)
          {
            char v8 = @"kTypeCyclingLeg";
            goto LABEL_88;
          }

          if (workoutType == 2010)
          {
            char v8 = @"kTypeStationaryCycling";
            goto LABEL_88;
          }
        }
      }

      else if (workoutType > 55)
      {
        if (workoutType == 56)
        {
          char v8 = @"kTypeDrivingOther";
          goto LABEL_88;
        }

        if (workoutType == 63)
        {
          char v8 = @"kTypeMultiSportTransition";
          goto LABEL_88;
        }
      }

      else
      {
        if (workoutType == 41)
        {
          char v8 = @"kTypeWalkingSlow";
          goto LABEL_88;
        }

        if (workoutType == 52)
        {
          char v8 = @"kTypeVehicularInHand";
          goto LABEL_88;
        }
      }
    }

            v34 = 1;
            if (v210 && (LOBYTE(v197) & 1) == 0)
            {
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894CB8);
              }
              v75 = (os_log_s *)qword_101934A78;
              if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "TILE: getEntriesForArea, asked not to use index",  buf,  2u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934A70 != -1) {
                  dispatch_once(&qword_101934A70, &stru_101894CB8);
                }
                *(_WORD *)v241 = 0;
                LODWORD(v191) = 2;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: getEntriesForArea, asked not to use index",  v241,  *(void *)&v191);
                v166 = (char *)v165;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManage r_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, con st double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendat ionIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v165);
                if (v166 != buf) {
                  free(v166);
                }
                v210 = 0LL;
                v34 = 1;
              }

              else
              {
                v210 = 0LL;
              }
            }

            goto LABEL_102;
          }

          v38 = v234 + (unint64_t)HIDWORD(v234) + 12;
          if (v38 > 0x640000B) {
            break;
          }
          uint64_t v33 = v36;
          switch(HIWORD(v233))
          {
            case 4:
              sub_100DD8D1C(v37, (uint64_t)&v251);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894CB8);
              }
              uint64_t v39 = (os_log_s *)qword_101934A78;
              if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
              {
                v40 = *(_DWORD *)v253;
                uint64_t v41 = *(_DWORD *)&v253[4];
                v42 = *(_DWORD *)&v253[8];
                uint64_t v43 = *(float *)&v253[12];
                v44 = *(float *)&v253[16];
                uint64_t v45 = *((void *)&v254 + 1);
                v46 = v254;
                uint64_t v47 = v259;
                Current = CFAbsoluteTimeGetCurrent();
                *(_DWORD *)buf = 67111424;
                *(_DWORD *)&buf[4] = v40;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v41;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v42;
                *(_WORD *)&buf[20] = 2048;
                *(double *)&buf[22] = v43;
                *(_WORD *)&buf[30] = 2048;
                *(double *)&buf[32] = v44;
                *(_WORD *)&buf[40] = 2048;
                *(double *)&buf[42] = *(float *)&v46;
                *(_WORD *)v262 = 2048;
                *(double *)&v262[2] = *((float *)&v46 + 1);
                *(_WORD *)&v262[10] = 2048;
                *(double *)&v262[12] = (double)v45 - kCFAbsoluteTimeIntervalSince1970;
                v263 = 1024;
                v264 = v47;
                v265 = 2048;
                v266 = Current - ((double)*((unint64_t *)&v254 + 1) - kCFAbsoluteTimeIntervalSince1970);
                _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "TILE: getEntriesForArea, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, genTime, % .2lf, expAge, %d, age, %.2lf",  buf,  0x56u);
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_56;
              }
              bzero(buf, 0x65CuLL);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894CB8);
              }
              uint64_t v49 = qword_101934A78;
              v50 = *(_DWORD *)v253;
              uint64_t v51 = *(_DWORD *)&v253[4];
              v52 = *(_DWORD *)&v253[8];
              uint64_t v53 = *(float *)&v253[12];
              v54 = *(float *)&v253[16];
              uint64_t v55 = *((void *)&v254 + 1);
              v56 = v254;
              uint64_t v57 = v259;
              v58 = CFAbsoluteTimeGetCurrent();
              *(_DWORD *)v241 = 67111424;
              *(_DWORD *)&v241[4] = v50;
              *(_WORD *)&v241[8] = 1024;
              *(_DWORD *)&v241[10] = v51;
              *(_WORD *)&v241[14] = 1024;
              *(_DWORD *)&v241[16] = v52;
              *(_WORD *)&v241[20] = 2048;
              *(double *)&v241[22] = v53;
              *(_WORD *)&v241[30] = 2048;
              *(double *)&v241[32] = v54;
              *(_WORD *)v242 = 2048;
              *(double *)&v242[2] = *(float *)&v56;
              v243 = 2048;
              v244 = *((float *)&v56 + 1);
              v245 = 2048;
              v246 = (double)v55 - kCFAbsoluteTimeIntervalSince1970;
              v247 = 1024;
              v248 = v57;
              v249 = 2048;
              v250 = v58 - ((double)*((unint64_t *)&v254 + 1) - kCFAbsoluteTimeIntervalSince1970);
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v49,  2LL,  "TILE: getEntriesForArea, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, genTime, %.2 lf, expAge, %d, age, %.2lf",  v241,  86,  LODWORD(v192),  v193,  v196,  v197,  *(double *)&v198,  v199,  v200,  v201);
              v60 = (char *)v59;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_ Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const d ouble &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationInd exEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v59);
              break;
            case 8:
              sub_100C0C23C((uint64_t)v37, (uint64_t)&v235);
              v64 = v236;
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894CB8);
              }
              uint64_t v65 = (os_log_s *)qword_101934A78;
              if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&buf[4] = DWORD2(v236);
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIDWORD(v236);
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v237;
                _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "TILE: getEntriesForArea, numEntriesHeight, %d, numEntriesWidth, %d, entrySizeInBytes, %d",  buf,  0x14u);
              }

              v210 = (uint64_t)v37 + v64 + 12;
              if (!sub_1002921D0(115, 2)) {
                goto LABEL_56;
              }
              bzero(buf, 0x65CuLL);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894CB8);
              }
              *(_DWORD *)v241 = 67109632;
              *(_DWORD *)&v241[4] = DWORD2(v236);
              *(_WORD *)&v241[8] = 1024;
              *(_DWORD *)&v241[10] = HIDWORD(v236);
              *(_WORD *)&v241[14] = 1024;
              *(_DWORD *)&v241[16] = v237;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: getEntriesForArea, numEntriesHeight, %d, numEntriesWidth, %d, entrySizeInBytes, %d",  v241,  20,  LODWORD(v192));
              v60 = (char *)v68;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_ Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const d ouble &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationInd exEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v68);
              break;
            case 9:
              sub_100C0C278((uint64_t)v37, (uint64_t)&v230);
              uint64_t v61 = v231;
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894CB8);
              }
              v62 = (os_log_s *)qword_101934A78;
              if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&buf[4] = DWORD2(v231);
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIDWORD(v231);
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v232;
                _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEBUG,  "TILE: getEntriesForArea, numOfEntries, %d, entrySizeInBytes, %d, numOfLargeEntries, %d",  buf,  0x14u);
              }

              v221 = (uint64_t)v37 + v61 + 12;
              if (!sub_1002921D0(115, 2)) {
                goto LABEL_56;
              }
              bzero(buf, 0x65CuLL);
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894CB8);
              }
              *(_DWORD *)v241 = 67109632;
              *(_DWORD *)&v241[4] = DWORD2(v231);
              *(_WORD *)&v241[8] = 1024;
              *(_DWORD *)&v241[10] = HIDWORD(v231);
              *(_WORD *)&v241[14] = 1024;
              *(_DWORD *)&v241[16] = v232;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: getEntriesForArea, numOfEntries, %d, entrySizeInBytes, %d, numOfLargeEntries, %d",  v241,  20,  LODWORD(v192));
              v60 = (char *)v63;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_ Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const d ouble &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationInd exEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v63);
              break;
            case 0xA:
              sub_100C0C158((uint64_t)v37, (uint64_t)&v228);
              v66 = v229;
              if (qword_101934A70 != -1) {
                dispatch_once(&qword_101934A70, &stru_101894CB8);
              }
              uint64_t v67 = (os_log_s *)qword_101934A78;
              if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = DWORD2(v229);
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIDWORD(v229);
                _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "TILE: getEntriesForArea, numOfRegionalEntries, %d, entrySizeInBytes, %d",  buf,  0xEu);
              }

              uint64_t v33 = (uint64_t)v37 + v66 + 12;
              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934A70 != -1) {
                  dispatch_once(&qword_101934A70, &stru_101894CB8);
                }
                *(_DWORD *)v241 = 67109376;
                *(_DWORD *)&v241[4] = DWORD2(v229);
                *(_WORD *)&v241[8] = 1024;
                *(_DWORD *)&v241[10] = HIDWORD(v229);
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: getEntriesForArea, numOfRegionalEntries, %d, entrySizeInBytes, %d",  v241,  14);
                int v70 = (char *)v69;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManage r_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, con st double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendat ionIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v69);
                if (v70 != buf) {
                  free(v70);
                }
              }

              goto LABEL_62;
            default:
              goto LABEL_62;
          }

          if (v60 != buf) {
            free(v60);
          }
LABEL_56:
          uint64_t v33 = v36;
LABEL_62:
          v35 += v234 + (unint64_t)HIDWORD(v234) + 12;
          if (v35 >= v238) {
            goto LABEL_88;
          }
        }

        if (qword_101934A70 != -1) {
          dispatch_once(&qword_101934A70, &stru_101894CB8);
        }
        uint64_t v76 = (os_log_s *)qword_101934A78;
        if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&buf[4] = v38;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = 104857612LL;
          _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_FAULT,  "TILE: getEntriesForArea, invalid tile file, bad allocation size, totalBytesInSection, %lu, maxSectionSize, %lu",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934A70 != -1) {
            dispatch_once(&qword_101934A70, &stru_101894CB8);
          }
          *(_DWORD *)v241 = 134218240;
          *(void *)&v241[4] = v38;
          *(_WORD *)&v241[12] = 2048;
          *(void *)&v241[14] = 104857612LL;
          LODWORD(v191) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "TILE: getEntriesForArea, invalid tile file, bad allocation size, totalBytesInSection, %lu, maxSectionSize, %lu",  v241,  *(void *)&v191);
          v168 = (char *)v167;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type ::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, BOOL, BOOL, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, Dat aEntry_T = CLTilesManager_Type::AppRecommendationEntry]",  "%s\n",  v167);
          if (v168 != buf) {
            free(v168);
          }
        }

        v34 = 0;
        uint64_t v33 = v36;
      }
    }

    else
    {
      v221 = 0LL;
      v210 = 0LL;
    }

              *(void *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unsigned int v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v49 = 0;
                v50 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }

                  uint64_t v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  int v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }

              uint64_t v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                uint64_t v27 = v2;
                int v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v53 = 0;
                v54 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }

                  uint64_t v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  int v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }

              uint64_t v35 = 0;
              v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                uint64_t v33 = v2;
                int v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v57 = 0;
                v58 = 0;
                uint64_t v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }

                  uint64_t v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  int v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }

              uint64_t v41 = 0;
              v42 = 0;
              uint64_t v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                uint64_t v39 = v2;
                int v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 20) = v43;
LABEL_104:
              char v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_104;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  v46 = *(void *)(a2 + 64);
  v5 |= 0x80uLL;
  void *v2 = v5;
  *(void *)(a1 + 64) = v46;
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000) == 0)
  {
LABEL_46:
    if ((v4 & 0x4000000000LL) == 0) {
      goto LABEL_47;
    }
    goto LABEL_90;
  }

  PB::TextFormatter::format(this, "workoutId", *(void *)(a1 + 320));
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000000LL) == 0)
  {
LABEL_43:
    if ((v6 & 0x20000000000LL) == 0) {
      goto LABEL_44;
    }
    goto LABEL_90;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 104), 0x59u);
  unsigned int v5 = *v4;
  if ((*v4 & 0x4000000000LL) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000LL) == 0) {
      goto LABEL_45;
    }
    goto LABEL_90;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 387), 0x37u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_90;
  }

  uint64_t result = *(float *)(a2 + 160);
  v3 |= 0x800000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 160) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x400000000LL) == 0)
  {
LABEL_42:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_90;
  }

  PB::TextFormatter::format(this, "trialCount", *(_DWORD *)(a1 + 164));
  unsigned int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x2000000000LL) == 0)
  {
LABEL_39:
    if ((v5 & 0x4000000000LL) == 0) {
      goto LABEL_40;
    }
    goto LABEL_90;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156), 0x26u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_90;
  }

        *(_DWORD *)(a1 + 32) = v27;
        goto LABEL_89;
      case 3u:
        unsigned int v30 = operator new(0x18uLL);
        sub_101103644((uint64_t)v30);
        uint64_t v33 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v30;
        if (v33)
        {
          (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
          unsigned int v30 = *(void **)(a1 + 8);
        }

        goto LABEL_38;
      case 4u:
        unsigned int v30 = operator new(0x18uLL);
        sub_101103644((uint64_t)v30);
        v34 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v30;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
          unsigned int v30 = *(void **)(a1 + 16);
        }

  uint64_t result = *(float *)(a2 + 96);
  v5 |= 0x2000uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 96) = result;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v7 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_90;
  }

  PB::TextFormatter::format(this, "deltaVZUnconditional", *(float *)(a1 + 140));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_90;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0x12u);
  uint64_t v6 = *v4;
  unsigned int v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_90;
  }

  uint64_t v17 = *(_BYTE *)(a2 + 271);
  v6 |= 8u;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 271) = v17;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_90;
  }

  PB::TextFormatter::format(this, "audioDvEnergyThresholdMin", *(float *)(a1 + 48));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_90;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 276), 9u);
  unsigned int v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((v6 & 8) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_90;
  }

  unint64_t v10 = *(_BYTE *)(a2 + 188);
  uint64_t v11 = v4 >> 16;
  v4 |= 2uLL;
  *(void *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v11;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 188) = v10;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_90;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x69u);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x20000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_90;
  }

  uint64_t result = *(float *)(a2 + 52);
  v3 |= 0x80uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 52) = result;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 1) == 0)
  {
LABEL_45:
    if ((v2 & 2) == 0) {
      goto LABEL_46;
    }
    goto LABEL_90;
  }

  PB::TextFormatter::format(this, "saturationMet", *(_BYTE *)(a1 + 168));
  unsigned int v5 = *(void *)(a1 + 172);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_90;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0xD1u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 2) == 0)
  {
LABEL_43:
    if ((v4 & 0x100) == 0) {
      goto LABEL_44;
    }
    goto LABEL_90;
  }

              *(void *)(a1 + 96) = v24;
              goto LABEL_94;
            case 2u:
              *(_WORD *)(a1 + 104) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_67;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_83;
            case 3u:
              *(_WORD *)(a1 + 104) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_67;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_83;
            case 4u:
              *(_WORD *)(a1 + 104) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_67;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_83;
            case 5u:
              *(_WORD *)(a1 + 104) |= 8u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unsigned int v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }

                  uint64_t v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  int v14 = v38++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_92:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_93;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_92;
              }

              uint64_t v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                uint64_t v27 = v2;
                int v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_93:
              *(void *)(a1 + 32) = v31;
LABEL_94:
              char v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(_WORD *)(a1 + 104) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_67;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_83;
            case 7u:
              *(_WORD *)(a1 + 104) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_67;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_83;
            case 8u:
              *(_WORD *)(a1 + 104) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_67;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_83;
            case 9u:
              *(_WORD *)(a1 + 104) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_67;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_83;
            case 0xAu:
              *(_WORD *)(a1 + 104) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_67;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_83;
            case 0xBu:
              *(_WORD *)(a1 + 104) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_67;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_83;
            case 0xCu:
              *(_WORD *)(a1 + 104) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_83:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_67:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_94;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_94;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

              *(void *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unsigned int v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v49 = 0;
                v50 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }

                  uint64_t v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  int v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }

              uint64_t v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                uint64_t v27 = v2;
                int v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v53 = 0;
                v54 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }

                  uint64_t v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  int v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }

              uint64_t v35 = 0;
              v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                uint64_t v33 = v2;
                int v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v57 = 0;
                v58 = 0;
                uint64_t v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }

                  uint64_t v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  int v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }

              uint64_t v41 = 0;
              v42 = 0;
              uint64_t v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                uint64_t v39 = v2;
                int v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 24) = v43;
LABEL_104:
              char v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

              *(void *)(a1 + 32) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 1u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unsigned int v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v49 = 0;
                v50 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }

                  uint64_t v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  int v14 = v50++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_92:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_92;
              }

              uint64_t v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                uint64_t v27 = v2;
                int v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_93:
              *(void *)(a1 + 8) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 2u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v53 = 0;
                v54 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }

                  uint64_t v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  int v14 = v54++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0LL;
LABEL_97:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v37 = 0LL;
                }
                goto LABEL_97;
              }

              uint64_t v35 = 0;
              v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                uint64_t v33 = v2;
                int v14 = v36++ > 8;
              }

              while (!v14);
              uint64_t v37 = 0LL;
LABEL_98:
              *(void *)(a1 + 16) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 4u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v57 = 0;
                v58 = 0;
                uint64_t v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    uint64_t v43 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }

                  uint64_t v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  int v14 = v58++ > 8;
                  if (v14)
                  {
                    uint64_t v43 = 0LL;
LABEL_102:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v43 = 0LL;
                }
                goto LABEL_102;
              }

              uint64_t v41 = 0;
              v42 = 0;
              uint64_t v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                uint64_t v39 = v2;
                int v14 = v42++ > 8;
              }

              while (!v14);
              uint64_t v43 = 0LL;
LABEL_103:
              *(void *)(a1 + 24) = v43;
LABEL_104:
              char v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

              *(void *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 2u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unsigned int v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v49 = 0;
                v50 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  char v3 = *((void *)this + 1);
                }
                else {
                  char v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }

                  uint64_t v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  int v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    char v3 = v51 + 1;
                    goto LABEL_93;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }

              uint64_t v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                char v3 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                uint64_t v27 = v3;
                int v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 16) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 4u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v53 = 0;
                v54 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  char v3 = *((void *)this + 1);
                }
                else {
                  char v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }

                  uint64_t v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  int v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    char v3 = v55 + 1;
                    goto LABEL_98;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }

              uint64_t v35 = 0;
              v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                char v3 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                uint64_t v33 = v3;
                int v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 8u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v57 = 0;
                v58 = 0;
                uint64_t v43 = 0LL;
                if (v2 <= v39) {
                  char v3 = *((void *)this + 1);
                }
                else {
                  char v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }

                  uint64_t v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  int v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    char v3 = v59 + 1;
                    goto LABEL_103;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }

              uint64_t v41 = 0;
              v42 = 0;
              uint64_t v43 = 0LL;
              do
              {
                char v3 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                uint64_t v39 = v3;
                int v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 24) = v43;
LABEL_104:
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              char v3 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              goto LABEL_104;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

              *(void *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 2u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unsigned int v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v49 = 0;
                v50 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  char v3 = *((void *)this + 1);
                }
                else {
                  char v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }

                  uint64_t v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  int v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    char v3 = v51 + 1;
                    goto LABEL_93;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }

              uint64_t v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                char v3 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                uint64_t v27 = v3;
                int v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 16) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 4u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v53 = 0;
                v54 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  char v3 = *((void *)this + 1);
                }
                else {
                  char v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }

                  uint64_t v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  int v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    char v3 = v55 + 1;
                    goto LABEL_98;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }

              uint64_t v35 = 0;
              v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                char v3 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                uint64_t v33 = v3;
                int v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 8u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v57 = 0;
                v58 = 0;
                uint64_t v43 = 0LL;
                if (v2 <= v39) {
                  char v3 = *((void *)this + 1);
                }
                else {
                  char v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }

                  uint64_t v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  int v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    char v3 = v59 + 1;
                    goto LABEL_103;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }

              uint64_t v41 = 0;
              v42 = 0;
              uint64_t v43 = 0LL;
              do
              {
                char v3 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                uint64_t v39 = v3;
                int v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 24) = v43;
LABEL_104:
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              char v3 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              goto LABEL_104;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unsigned int v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v49 = 0;
                v50 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }

                  uint64_t v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  int v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }

              uint64_t v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                uint64_t v27 = v2;
                int v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 24) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v53 = 0;
                v54 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }

                  uint64_t v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  int v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    uint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }

              uint64_t v35 = 0;
              v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                uint64_t v33 = v2;
                int v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v57 = 0;
                v58 = 0;
                uint64_t v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }

                  uint64_t v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  int v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }

              uint64_t v41 = 0;
              v42 = 0;
              uint64_t v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                uint64_t v39 = v2;
                int v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 16) = v43;
LABEL_104:
              char v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_90;
  }

  PB::TextFormatter::format(this, "userWeight", *(float *)(a1 + 160));
  unsigned int v5 = *(void *)(a1 + 184);
  if ((v5 & 0x1000000000LL) == 0)
  {
LABEL_43:
    if ((v5 & 0x100000000000LL) == 0) {
      goto LABEL_44;
    }
    goto LABEL_90;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x2Au);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_90;
  }

  uint64_t v39 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 60) = v39;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x100000000000LL) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000000LL) == 0) {
      goto LABEL_42;
    }
    goto LABEL_90;
  }

  PB::TextFormatter::format(this, "srcVertToHrzRotRatio", *(float *)(a1 + 128));
  unsigned int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_90;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 182), 0x25u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000000000LL) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_90;
  }

LABEL_93:
  *(_DWORD *)(a1 + 292) |= 0x4000u;
  v34 = *(void **)(a1 + 120);
  if (!v34)
  {
    v34 = operator new(0x18uLL);
    void *v34 = off_10181B620;
    v34[1] = 35LL;
    *((_DWORD *)v34 + 4) = 0;
    *(void *)(a1 + 120) = v34;
  }

  uint64_t v35 = *(void *)(a2 + 120);
  if (!v35) {
    uint64_t v35 = *(void *)(qword_1019A0978 + 120);
  }
  sub_1000799A4((uint64_t)v34, v35);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x8000) != 0)
  {
LABEL_98:
    *(_DWORD *)(a1 + 292) |= 0x8000u;
    v36 = *(void **)(a1 + 128);
    if (!v36)
    {
      v36 = operator new(0x28uLL);
      v36[3] = 36LL;
      void *v36 = off_10181B698;
      v36[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v36[2] = 0LL;
      *((_DWORD *)v36 + 8) = 0;
      *(void *)(a1 + 128) = v36;
    }

    uint64_t v37 = *(void *)(a2 + 128);
    if (!v37) {
      uint64_t v37 = *(void *)(qword_1019A0978 + 128);
    }
    sub_100079D64((uint64_t)v36, v37);
    unsigned int v5 = *(_DWORD *)(a2 + 292);
  }

  *(_DWORD *)(a1 + 76) = v5;
  return v5;
}

  uint64_t result = *(double *)(a2 + 176);
  *(_DWORD *)(a1 + 292) |= 0x40000u;
  *(double *)(a1 + 176) = result;
  if ((*(_DWORD *)(a2 + 292) & 0x80000) != 0)
  {
LABEL_83:
    v60 = *(void *)(a2 + 184);
    *(_DWORD *)(a1 + 292) |= 0x80000u;
    *(void *)(a1 + 184) = v60;
  }

  return result;
}

  if (v74)
  {
    v75 = (char *)v74;
    operator delete(v74);
  }

  return v3 == 100;
}

        int v12 = 2;
LABEL_119:
        if (__p)
        {
          __dst = __p;
          operator delete(__p);
        }

        if (v101)
        {
          v102 = v101;
          operator delete(v101);
        }

        if (SHIBYTE(v130) < 0) {
          operator delete((void *)__src);
        }
        if ((void)v125)
        {
          *((void *)&v125 + 1) = v125;
          operator delete((void *)v125);
        }

        return v12;
      }

  (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8), a1 + 552, a2);
  (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 104) + 24LL))( *(void *)(a1 + 104),  a1 + 1304,  a2);
  (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 24) + 24LL))(*(void *)(a1 + 24), a1 + 808, a2);
  (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 32) + 24LL))(*(void *)(a1 + 32), a1 + 1024, a2);
  (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 56) + 24LL))(*(void *)(a1 + 56), a1 + 872, a2);
  (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16), a1 + 616, a2);
  if (*(double *)(a1 + 616) > 0.0)
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_1018363D0);
    }
    v85 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      v86 = *(void *)(a1 + 616);
      v87 = *(void *)(a1 + 624);
      v88 = *(void *)(a1 + 648);
      v89 = *(void *)(a1 + 640);
      *(_DWORD *)buf = 134219008;
      v119 = a2;
      v120 = 2048;
      v121 = v86;
      v122 = 2048;
      v123 = v87;
      v124 = 2048;
      v125 = v88;
      v126 = 2048;
      v127 = v89;
      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEBUG,  "ModelInput, Event time, %.2f, GPS sample time, %.2f, distance, %.2f, speed, %.2f, altitude, %.2f",  buf,  0x34u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_1018363D0);
      }
      v91 = *(void *)(a1 + 616);
      v92 = *(void *)(a1 + 624);
      v93 = *(void *)(a1 + 648);
      v94 = *(void *)(a1 + 640);
      v108 = 134219008;
      v109 = a2;
      v110 = 2048;
      v111 = v91;
      v112 = 2048;
      v113 = v92;
      v114 = 2048;
      v115 = v93;
      v116 = 2048;
      v117 = v94;
      LODWORD(v99) = 52;
      v95 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "ModelInput, Event time, %.2f, GPS sample time, %.2f, distance, %.2f, speed, %.2f, altitude, %.2f",  COERCE_DOUBLE(&v108),  v99,  *(double *)&v100,  *((double *)&v100 + 1),  *(double *)&v101);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLNatalieModelInput::setTime(CFAbsoluteTime)", "%s\n", v95);
    }
  }

  (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 64) + 24LL))(*(void *)(a1 + 64), a1 + 1040, a2);
  (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 80) + 24LL))(*(void *)(a1 + 80), a1 + 1224, a2);
  (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 72) + 24LL))(*(void *)(a1 + 72), a1 + 1208, a2);
  (*(void (**)(void, uint64_t, double))(**(void **)(a1 + 88) + 24LL))(*(void *)(a1 + 88), a1 + 1248, a2);
  return (*(uint64_t (**)(void, uint64_t, double))(**(void **)(a1 + 96) + 24LL))( *(void *)(a1 + 96),  a1 + 1280,  a2);
}

  uint64_t v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
  if ((v31 & 0x80000000) != 0)
  {
    v32 = 10;
  }

  else if (v31 >= 0x80)
  {
    v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31, a2);
    char v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    v32 = 1;
  }

  uint64_t v4 = (v4 + v32 + 1);
  if ((v3 & 0x4000) == 0)
  {
LABEL_65:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_109;
    }
    goto LABEL_105;
  }

  if (v94) {
    objc_msgSend( *(id *)(*(void *)(v146 + 32) + 240),  "writeSteadinessEvent:startDate:endDate:source:",  v89,  +[NSDate dateWithTimeIntervalSinceReferenceDate:]( NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v90),  +[NSDate dateWithTimeIntervalSinceReferenceDate:]( NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v88),  *(void *)(v146 + 40));
  }
LABEL_95:
  if (qword_101934480 != -1) {
    dispatch_once(&qword_101934480, &stru_101872F38);
  }
  uint64_t v69 = (void *)v146;
  int v70 = (os_log_s *)qword_101934488;
  if (os_log_type_enabled((os_log_t)qword_101934488, OS_LOG_TYPE_DEFAULT))
  {
    v71 = *(void *)(*(void *)(*(void *)(v146 + 64) + 8LL) + 24LL);
    *(_DWORD *)buf = 134218240;
    *(void *)&buf[4] = v71;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "Finishing Classification: nextClassificationTime=%{}.2f, nextFireInterval=%{}.2f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934480 != -1) {
      dispatch_once(&qword_101934480, &stru_101872F38);
    }
    uint64_t v76 = *(void *)(*(void *)(*(void *)(v146 + 64) + 8LL) + 24LL);
    *(_DWORD *)v363 = 134218240;
    *(void *)&v363[4] = v76;
    *(_WORD *)&v363[12] = 2048;
    *(double *)&v363[14] = v13;
    LODWORD(v84) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934488,  0LL,  "Finishing Classification: nextClassificationTime=%{}.2f, nextFireInterval=%{}.2f",  v363,  v84);
    v78 = (char *)v77;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLMobilityWalkingBoutService classifySteadinessWithCompletion:activity:]_block_invoke",  "%s\n",  v77);
    if (v78 != buf) {
      free(v78);
    }
    uint64_t v69 = (void *)v146;
  }

  uint64_t v72 = sub_1006E27E8();
  sub_100413284(v72, buf);
  sub_1002AC7B8( *(uint64_t *)buf,  "steadinessClassificationNextClassificationTime",  (const void *)(*(void *)(v69[8] + 8LL) + 24LL));
  v73 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v74 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }

  (*(void (**)(void))(v69[7] + 16LL))();
  *(_BYTE *)(v69[4] + 208LL) = 0;
  if (__p)
  {
    v275 = (char *)__p;
    operator delete(__p);
  }

  if (__src)
  {
    v103 = (char *)__src;
    operator delete(__src);
  }

  uint64_t result = *(float *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 128) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x20) == 0)
  {
LABEL_47:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_95;
  }

  PB::TextFormatter::format(this, "yJerkScalarMagMax", *(float *)(a1 + 184));
  unsigned int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40000000000LL) == 0)
  {
LABEL_44:
    if ((v5 & 0x80000000000LL) == 0) {
      goto LABEL_45;
    }
    goto LABEL_95;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x2Bu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_95;
  }

  uint64_t result = *(float *)(a2 + 88);
  v5 |= 0x800uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 88) = result;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v7 & 0x40000000000000LL) == 0) {
      goto LABEL_29;
    }
    goto LABEL_95;
  }

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 24));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 8) == 0)
  {
LABEL_27:
    if ((v6 & 0x10) == 0) {
      goto LABEL_28;
    }
    goto LABEL_95;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0x17u);
  uint64_t v6 = *v4;
  unsigned int v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000000000000LL) == 0) {
      goto LABEL_29;
    }
    goto LABEL_95;
  }

  uint64_t result = *(float *)(a2 + 140);
  v5 |= (unint64_t)&_mh_execute_header;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 140) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x10000000000000LL) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_95;
  }

  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdStretch", *(float *)(a1 + 68));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_95;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 0xEu);
  unsigned int v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000LL) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000000000000LL) == 0) {
      goto LABEL_20;
    }
    goto LABEL_95;
  }

  int v14 = *(_BYTE *)(a2 + 310);
  uint64_t v15 = v6 >> 16;
  v6 |= 0x8000uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 326) = v15;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 310) = v14;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_95;
  }

  PB::TextFormatter::format(this, "hasAudioInEpoch", *(_BYTE *)(a1 + 304));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x400) == 0)
  {
LABEL_12:
    if ((v7 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_95;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 310), 0x69u);
  uint64_t v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  unsigned int v5 = *v4;
  if ((v4[1] & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_95;
  }

  uint64_t v16 = *(_DWORD *)(a2 + 144);
  v3 |= 0x40000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 144) = v16;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x400000000000LL) == 0)
  {
LABEL_15:
    if ((v2 & 0x400000000LL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_95;
  }

  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet", *(_BYTE *)(a1 + 164));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  unsigned int v5 = *(void *)(a1 + 204);
  if ((v5 & 0x40000000000LL) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000000LL) == 0) {
      goto LABEL_15;
    }
    goto LABEL_95;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 200), 0x6Eu);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x2000000000LL) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000000000LL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_95;
  }

  uint64_t result = *(float *)(a2 + 64);
  v3 |= 0x400uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 64) = result;
  if ((*(void *)(a2 + 172) & 0x800) != 0) {
    goto LABEL_94;
  }
  return result;
}

          *(void *)(a1 + 16) = v25;
          break;
        default:
          goto LABEL_58;
      }
    }

  v44 = *(_DWORD *)(a2 + 144);
  v3 |= 0x200000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 144) = v44;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x1000000000000LL) == 0)
  {
LABEL_46:
    if ((v2 & 0x80000000000LL) == 0) {
      goto LABEL_47;
    }
    goto LABEL_95;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  unsigned int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400000000LL) == 0)
  {
LABEL_43:
    if ((v5 & 0x800000000LL) == 0) {
      goto LABEL_44;
    }
    goto LABEL_95;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 186), 0x2Au);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000000000LL) == 0)
  {
LABEL_44:
    if ((v4 & 0x40000000000LL) == 0) {
      goto LABEL_45;
    }
    goto LABEL_95;
  }

LABEL_103:
  if ((v5 & 0xFF0000) == 0) {
    goto LABEL_153;
  }
  if ((v5 & 0x10000) != 0)
  {
    *(_DWORD *)(a1 + 292) |= 0x10000u;
    v38 = *(void **)(a1 + 136);
    if (!v38)
    {
      v38 = operator new(0x28uLL);
      v38[3] = 37LL;
      void *v38 = off_10181B710;
      v38[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v38[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_DWORD *)v38 + 8) = 0;
      *(void *)(a1 + 136) = v38;
    }

    uint64_t v39 = *(void *)(a2 + 136);
    if (!v39) {
      uint64_t v39 = *(void *)(qword_1019A0978 + 136);
    }
    sub_10007A410((uint64_t)v38, v39);
    unsigned int v5 = *(_DWORD *)(a2 + 292);
    if ((v5 & 0x20000) == 0)
    {
LABEL_106:
      if ((v5 & 0x40000) == 0) {
        goto LABEL_107;
      }
      goto LABEL_123;
    }
  }

  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_106;
  }

  *(_DWORD *)(a1 + 292) |= 0x20000u;
  v40 = *(void **)(a1 + 144);
  if (!v40)
  {
    v40 = operator new(0x28uLL);
    v40[3] = 38LL;
    void *v40 = off_10181B788;
    v40[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v40[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v40 + 8) = 0;
    *(void *)(a1 + 144) = v40;
  }

  uint64_t v41 = *(void *)(a2 + 144);
  if (!v41) {
    uint64_t v41 = *(void *)(qword_1019A0978 + 144);
  }
  sub_10007ABD8((uint64_t)v40, v41);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x40000) == 0)
  {
LABEL_107:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_128;
  }

  unsigned int v30 = *(void *)(v5 + 192);
  if (!v30) {
    unsigned int v30 = *(void *)(qword_1019A0978 + 192);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B,  v30,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_109;
  }

          v42 = (_BYTE *)*((void *)this + 1);
          v54 = *v42;
        }

        while (v54 == 49);
        if (v54 == 57) {
          goto LABEL_106;
        }
        continue;
      case 3u:
        char v8 = TagFallback & 7;
        int v12 = (char *)*((void *)this + 1);
        uint64_t v11 = *((void *)this + 2);
        goto LABEL_61;
      case 4u:
        char v8 = TagFallback & 7;
        uint64_t v13 = (char *)*((void *)this + 1);
        uint64_t v11 = *((void *)this + 2);
        goto LABEL_69;
      case 5u:
        char v8 = TagFallback & 7;
        uint64_t v15 = (char *)*((void *)this + 1);
        int v14 = *((void *)this + 2);
        goto LABEL_79;
      case 6u:
        char v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_87;
        }
        if (v8 != 2) {
          goto LABEL_34;
        }
        uint64_t result = sub_10006E130(this, v70);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_103;
      case 7u:
        char v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_107;
        }
        if (v8 != 2)
        {
LABEL_34:
          if (v8 == 4) {
            return 1LL;
          }
          continue;
        }

        uint64_t result = sub_10006E130(this, v5);
        if (!(_DWORD)result) {
          return result;
        }
LABEL_123:
        v42 = (_BYTE *)*((void *)this + 1);
        uint64_t v17 = *((void *)this + 2);
        v66 = *v42;
        if (v66 != 57)
        {
          if (v66 == 64)
          {
            int v18 = v42 + 1;
            *((void *)this + 1) = v18;
LABEL_127:
            if ((unint64_t)v18 >= v17 || *v18 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v72);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v67 = v72[0];
              v68 = (_BYTE *)*((void *)this + 1);
              uint64_t v17 = *((void *)this + 2);
            }

            else
            {
              uint64_t v67 = *v18;
              v68 = v18 + 1;
              *((void *)this + 1) = v68;
            }

            *(_BYTE *)(a1 + 52) = v67 != 0;
            *(_DWORD *)(a1 + 80) |= 0x80u;
            if ((unint64_t)v68 < v17 && *v68 == 72)
            {
              uint64_t v19 = v68 + 1;
              *((void *)this + 1) = v19;
LABEL_135:
              if ((unint64_t)v19 >= v17 || *v19 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v72);
                if (!(_DWORD)result) {
                  return result;
                }
                uint64_t v69 = v72[0];
              }

              else
              {
                uint64_t v69 = *v19;
                *((void *)this + 1) = v19 + 1;
              }

              if (v69 <= 1)
              {
                *(_DWORD *)(a1 + 80) |= 0x100u;
                *(_DWORD *)(a1 + 72) = v69;
              }

              if (*((void *)this + 1) == *((void *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1LL;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
            }
          }

          continue;
        }

      if (*(_BYTE *)a1)
      {
        uint64_t v31 = 3;
        goto LABEL_148;
      }

      *(void *)(a1 + 32) = 0xBFF0000000000000LL;
      *(double *)(a1 + 8) = v13;
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10183E5D0);
      }
      v60 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        v102 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,operatingDynamics, cycling map-matching not allowed, setting unknown",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10183E5D0);
        }
        *(_DWORD *)v98 = 134349056;
        *(void *)&v98[4] = v12;
        LODWORD(v97) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,operatingDynamics, cycling map-matching not allowed, setting unknown",  v98,  v97,  *(void *)v98,  *(_OWORD *)&v98[8],  *(void *)&v98[24]);
        goto LABEL_227;
      }

  *(_BYTE *)(v5 + 296) = 0;
  v79 = (os_log_s *)v9[335];
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, done", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    v86 = v9[335];
    LOWORD(v108) = 0;
    LODWORD(v92) = 2;
    v87 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v86,  2LL,  "TILE: traverseTileFile, done",  &v108,  v92);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v87);
    uint64_t v6 = v101;
  }

  unsigned int v30 = *(void *)(v5 + 192);
  if (!v30) {
    unsigned int v30 = *(void *)(qword_1019A11B8 + 192);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18,  v30,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_109;
  }

      if (++v6 == a3[1]) {
        return;
      }
    }

    uint64_t v19 = vabdd_f64(v16, v14);
    int v20 = 180.0;
    if (v19 == 180.0) {
      goto LABEL_6;
    }
    uint64_t v21 = v16 - v14;
    if (COERCE__INT64(fabs(v16 - v14)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v40 = fabs(v19 + -180.0);
      if (v19 < 180.0) {
        uint64_t v19 = 180.0;
      }
      uint64_t v41 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
      v42 = v40 > v41;
      int v20 = 180.0;
      if (!v42) {
        goto LABEL_6;
      }
    }

    if (v21 <= 180.0)
    {
      if (v21 < -180.0)
      {
        int v20 = fmod(v21 + -180.0, 360.0) + 180.0;
LABEL_6:
        uint64_t v21 = v20;
      }
    }

    else
    {
      uint64_t v21 = fmod(v21 + 180.0, 360.0) + -180.0;
      int v20 = 180.0;
      if (v21 == -180.0) {
        goto LABEL_6;
      }
      v42 = ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
         && (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (!v42 || *(void *)&v21 == 0LL)
      {
        v44 = fabs(v21 + 180.0);
        uint64_t v45 = fabs(v21);
        if (v45 < 180.0) {
          uint64_t v45 = 180.0;
        }
        v46 = v45 >= 1.0 ? v45 * 2.22044605e-16 : 2.22044605e-16;
        v42 = v44 > v46;
        int v20 = 180.0;
        if (!v42) {
          goto LABEL_6;
        }
      }
    }

    if (v21 < 0.0) {
      uint64_t v21 = v21 + 360.0;
    }
    uint64_t v22 = v14 + v21;
    uint64_t v23 = v18 + v14 + v21 + -360.0;
    if (vabdd_f64(v23, v17) < 180.0) {
      uint64_t v23 = v17;
    }
    if (v22 > v15 && v23 < v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  fclose(v5);
LABEL_57:
  *(_DWORD *)(a1 + 40) = (int)((*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) / *(_DWORD *)a1;
}

  uint64_t v29 = *(void *)(v5 + 200);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_1019A1D38 + 200);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A,  v29,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_109;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v33 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    v34 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfPeaksIQR";
    v193 = 2048;
    v194 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v114 = *(void *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfPeaksIQR";
    v189 = 2048;
    v190 = v114;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v116 = (uint8_t *)v115;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v115);
    if (v116 != buf) {
      free(v116);
    }
  }

  a4[4] = 1;
  unint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v10 & 0x4000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_115;
  }

  -[CMHealthColdStorageCompanionSyncService resetCoreAnalyticsTimer](self, "resetCoreAnalyticsTimer");
}

                sub_100DBA374(a1, 4LL);
                goto LABEL_104;
              }
            }

            else
            {
              sub_100DBA374(a1, 1LL);
            }

            sub_100DBA374(a1, 2LL);
            goto LABEL_103;
          }

          if (v126 == 2147483650.0)
          {
            uint64_t v31 = 0;
            v32 = 5LL;
            goto LABEL_87;
          }

          if (v126 == 2147483640.0)
          {
LABEL_80:
            uint64_t v31 = 0;
            v32 = 22LL;
            goto LABEL_87;
          }

          if (v126 == 2147483640.0)
          {
            *(_DWORD *)__p = 3600;
            *(_WORD *)&__p[4] = 257;
            *(void *)&__p[8] = "bundle";
            v40 = *(void *)sub_100DAFBF8(a1);
            [*(id *)(v40 + 16) register:*(void *)(v40 + 8) forNotification:12 registrationInfo:sub_10039E77C(__p)];
            goto LABEL_80;
          }

          if (v126 == 2147483640.0)
          {
            uint64_t v31 = 0;
            v32 = 39LL;
            goto LABEL_87;
          }

          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101883130);
          }
          v95 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
          {
            v96 = *(void *)(a1 + 24);
            *(void *)__p = 68289282LL;
            *(_WORD *)&__p[8] = 2082;
            *(void *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2114;
            *(void *)&__p[20] = v96;
            _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Not registering for location updates; the planets don't align, Client:%{publi"
              "c, location:escape_only}@}",
              __p,
              0x1Cu);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_101883130);
            }
          }

          uint64_t v35 = (os_log_s *)qword_101934978;
          if (!os_signpost_enabled((os_log_t)qword_101934978))
          {
LABEL_70:
            uint64_t v31 = 0;
            uint64_t v39 = 0;
            v32 = 48LL;
            goto LABEL_88;
          }

          v97 = *(void *)(a1 + 24);
          *(void *)__p = 68289282LL;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2114;
          *(void *)&__p[20] = v97;
          uint64_t v37 = "Not registering for location updates; the planets don't align";
          v38 = "{msg%{public}.0s:Not registering for location updates; the planets don't align, Client:%{pub"
                "lic, location:escape_only}@}";
LABEL_69:
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v35,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v37,  v38,  __p,  0x1Cu);
          goto LABEL_70;
        }

        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_101883130);
        }
        uint64_t v33 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
        {
          v34 = *(void *)(a1 + 24);
          *(void *)__p = 68289282LL;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2114;
          *(void *)&__p[20] = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Not registering for location updates; desiredAccuracy is too high, Client:%{pub"
            "lic, location:escape_only}@}",
            __p,
            0x1Cu);
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_101883130);
          }
        }

        uint64_t v35 = (os_log_s *)qword_101934978;
        if (!os_signpost_enabled((os_log_t)qword_101934978)) {
          goto LABEL_70;
        }
        v36 = *(void *)(a1 + 24);
        *(void *)__p = 68289282LL;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2114;
        *(void *)&__p[20] = v36;
        uint64_t v37 = "Not registering for location updates; desiredAccuracy is too high";
        v38 = "{msg%{public}.0s:Not registering for location updates; desiredAccuracy is too high, Client:%{p"
              "ublic, location:escape_only}@}";
        goto LABEL_69;
      }
    }

    v126 = 2147483650.0;
    goto LABEL_57;
  }

  if ([*(id *)(a1 + 16) transientAwareRegistrationResult] == 2)
  {
    sub_100DBA068((uint64_t)v128);
  }

  else if ([*(id *)(a1 + 16) transientAwareRegistrationResult] == 3)
  {
    v129((uint64_t)v128);
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_101883130);
    }
    uint64_t v13 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(void *)(a1 + 24);
      uint64_t v15 = sub_1000F0F58(a1);
      *(void *)__p = 68289538LL;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2114;
      *(void *)&__p[20] = v14;
      v140 = 2050;
      *(void *)v141 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:client not authorized for location; not starting yet, Client:%{public, location:esc"
        "ape_only}@, DC:%{public}p}",
        __p,
        0x26u);
    }

    if (!*(void *)(a1 + 576))
    {
      uint64_t v16 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
      *(void *)(a1 + 576) = v16;
      v127[0] = _NSConcreteStackBlock;
      v127[1] = 3221225472LL;
      v127[2] = sub_100DBA254;
      v127[3] = &unk_10184AF10;
      v127[4] = v128;
      v127[5] = a1;
      [v16 setHandler:v127];
      [*(id *)(a1 + 576) setNextFireDelay:2.0 interval:1.79769313e308];
    }
  }

  sub_100DB444C(a1);
}

          uint64_t v72 = *((void *)v14 + 8);
          *(void *)&v262 = k;
          for (v54 -= 80LL; ; v54 -= 80LL)
          {
            v73 = v62 - v61;
            if (v60 == v73 >> 3) {
              break;
            }
            if (v60 <= v73 >> 3) {
              goto LABEL_113;
            }
LABEL_112:
            uint64_t v61 = *(void *)(v54 - 80);
            v62 = *(void *)(v54 - 72);
          }

          uint64_t v74 = *(double *)(v54 + 56);
          v75 = v19 <= v74;
          if (v19 == v74) {
            v75 = v59 <= *(_DWORD *)(v54 + 72);
          }
          if (!v75) {
            goto LABEL_112;
          }
LABEL_113:
          v264[0] = v54;
LABEL_114:
          if ((unint64_t)k >= v54)
          {
            v82 = (void **)(k - 5);
            if (k - 5 != v14)
            {
              sub_100007664((uint64_t)v14, (__n128 *)k - 5);
              *((_DWORD *)v14 + 6) = *((_DWORD *)k - 14);
              sub_100007664((uint64_t)(v14 + 2), (__n128 *)k - 3);
              v83 = *(__int128 *)((char *)k - 24);
              *((_DWORD *)v14 + 18) = *((_DWORD *)k - 2);
              *(__int128 *)((char *)v14 + 56) = v83;
            }

            v84 = *v82;
            if (*v82)
            {
              *((void *)k - 9) = v84;
              operator delete(v84);
            }

            *((void *)k - 10) = v55;
            *((void *)k - 9) = v15;
            *((void *)k - 8) = v56;
            *((_DWORD *)k - 14) = v57;
            v85 = (void *)*((void *)k - 6);
            if (v85)
            {
              *((void *)k - 5) = v85;
              operator delete(v85);
            }

            a4 = 0;
            *(k - 3) = v255;
            *((void *)k - 4) = v58;
            *((double *)k - 3) = v19;
            *((void *)k - 2) = v72;
            *((_DWORD *)k - 2) = v59;
            uint64_t v6 = (__int128 *)v262;
            v261 = (__int128 *)v262;
            a3 = v251;
            goto LABEL_139;
          }

          sub_100F4A8B0((__int128 **)&v262, v264);
          for (k = (__int128 *)(v262 + 80); ; k += 5)
          {
            uint64_t v76 = *((void *)k + 1) - *(void *)k;
            if (v60 == v76 >> 3)
            {
              char v77 = *((double *)k + 7);
              v78 = v19 <= v77;
              if (v19 == v77) {
                v78 = v59 <= *((_DWORD *)k + 18);
              }
              if (!v78)
              {
LABEL_123:
                *(void *)&v262 = k;
                v54 = v264[0];
                do
                {
                  while (1)
                  {
                    v54 -= 80LL;
                    v264[0] = v54;
                    v79 = *(void *)(v54 + 8) - *(void *)v54;
                    if (v60 == v79 >> 3) {
                      break;
                    }
                    if (v60 <= v79 >> 3) {
                      goto LABEL_114;
                    }
                  }

                  v80 = *(double *)(v54 + 56);
                  v81 = v19 <= v80;
                  if (v19 == v80) {
                    v81 = v59 <= *(_DWORD *)(v54 + 72);
                  }
                }

                while (!v81);
                goto LABEL_114;
              }
            }

            else if (v60 > v76 >> 3)
            {
              goto LABEL_123;
            }
          }
        }

        v225 = a4;
        uint64_t v15 = *((void *)v261 + 1);
LABEL_18:
        uint64_t v21 = 0LL;
        uint64_t v22 = (unint64_t)v260;
        v264[0] = (uint64_t)v260;
        uint64_t v23 = *(void *)v261;
        int v24 = *((void *)v261 + 2);
        *((void *)v261 + 1) = 0LL;
        *((void *)v14 + 2) = 0LL;
        *(void *)int v14 = 0LL;
        v230 = *((_DWORD *)v14 + 6);
        v245 = v14[2];
        v235 = v24;
        v240 = *((void *)v14 + 6);
        *((void *)v14 + 4) = 0LL;
        *((void *)v14 + 5) = 0LL;
        *((void *)v14 + 6) = 0LL;
        uint64_t v25 = *(__int128 *)((char *)v14 + 56);
        int v26 = *((_DWORD *)v14 + 18);
        uint64_t v27 = (v15 - v23) >> 3;
        while (1)
        {
          unsigned int v28 = (uint64_t)(*((void *)&v14[v21 + 5] + 1) - *(void *)&v14[v21 + 5]) >> 3;
          if (v28 == v27) {
            break;
          }
          if (v28 <= v27) {
            goto LABEL_27;
          }
LABEL_26:
          v21 += 5LL;
        }

        uint64_t v29 = *((double *)&v14[v21 + 8] + 1);
        unsigned int v30 = v29 <= *(double *)&v25;
        if (!v30) {
          goto LABEL_26;
        }
LABEL_27:
        uint64_t v31 = (unint64_t)&v14[v21 + 5];
        *(void *)&v262 = v31;
        if (v21 * 16)
        {
          do
          {
            while (1)
            {
              uint64_t v33 = *(void *)(v22 - 80);
              v32 = *(void *)(v22 - 72);
              v22 -= 80LL;
              v34 = (v32 - v33) >> 3;
              if (v34 == v27) {
                break;
              }
              if (v34 > v27) {
                goto LABEL_34;
              }
            }

            uint64_t v35 = *(double *)(v22 + 56);
            v36 = v35 <= *(double *)&v25;
          }

          while (v36);
          goto LABEL_34;
        }

        if (v31 < v22)
        {
          do
          {
            while (1)
            {
              uint64_t v51 = *(void *)(v22 - 80);
              v50 = *(void *)(v22 - 72);
              v22 -= 80LL;
              v52 = (v50 - v51) >> 3;
              if (v52 != v27) {
                break;
              }
              uint64_t v53 = *(double *)(v22 + 56);
              if (v53 == *(double *)&v25)
              {
                if (v31 >= v22 || *(_DWORD *)(v22 + 72) > v26) {
                  goto LABEL_34;
                }
              }

              else if (v31 >= v22 || v53 > *(double *)&v25)
              {
                goto LABEL_34;
              }
            }
          }

          while (v31 < v22 && v52 <= v27);
LABEL_34:
          v264[0] = v22;
        }

        uint64_t v6 = (__int128 *)v31;
        v254 = v25;
        if (v31 >= v22) {
          goto LABEL_53;
        }
        while (2)
        {
          sub_100F4A8B0((__int128 **)&v262, v264);
          uint64_t v6 = (__int128 *)(v262 + 80);
          while (2)
          {
            uint64_t v37 = (uint64_t)(*((void *)v6 + 1) - *(void *)v6) >> 3;
            if (v37 != v27)
            {
              if (v37 <= v27) {
                break;
              }
              goto LABEL_44;
            }

            v38 = *((double *)v6 + 7);
            uint64_t v39 = v38 <= *(double *)&v254;
            if (!v39)
            {
LABEL_44:
              v6 += 5;
              continue;
            }

            break;
          }

          *(void *)&v262 = v6;
          v40 = v264[0];
          do
          {
            while (1)
            {
              v40 -= 80LL;
              v264[0] = v40;
              uint64_t v41 = (uint64_t)(*(void *)(v40 + 8) - *(void *)v40) >> 3;
              if (v41 == v27) {
                break;
              }
              if (v41 > v27) {
                goto LABEL_52;
              }
            }

            v42 = *(double *)(v40 + 56);
            uint64_t v43 = v42 <= *(double *)&v254;
          }

          while (v43);
LABEL_52:
          break;
        }

  uint64_t result = *(float *)(a2 + 248);
  v5 |= 0x8000000000000uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 248) = result;
  uint64_t v7 = *v3;
  if ((*(_BYTE *)(a2 + 324) & 1) == 0)
  {
LABEL_38:
    if ((v7 & 0x200000000000000LL) == 0) {
      goto LABEL_39;
    }
    goto LABEL_105;
  }

  PB::TextFormatter::format(this, "hgDeltaVXYOverEpoch", *(float *)(a1 + 184));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x1000000000LL) == 0)
  {
LABEL_37:
    if ((v6 & 0x2000000000LL) == 0) {
      goto LABEL_38;
    }
    goto LABEL_105;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 248), 0x21u);
  uint64_t v6 = *v4;
  if ((v4[1] & 1) == 0)
  {
LABEL_38:
    if ((v6 & 0x200000000000000LL) == 0) {
      goto LABEL_39;
    }
    goto LABEL_105;
  }

  uint64_t result = *(float *)(a2 + 88);
  v5 |= 0x80000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 88) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_105;
  }

  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithoutAudio", *(float *)(a1 + 108));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_105;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 228), 0x18u);
  unsigned int v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000000LL) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000000000LL) == 0) {
      goto LABEL_30;
    }
    goto LABEL_105;
  }

  uint64_t result = *(float *)(a2 + 96);
  v5 |= 0x200000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 96) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((v8 & 0x10000) == 0)
  {
LABEL_23:
    if ((v8 & 0x2000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_105;
  }

  PB::TextFormatter::format(this, "kAudioDvEnergyThresholdMaxRO", *(float *)(a1 + 64));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_22:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_105;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0x73u);
  uint64_t v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  unsigned int v5 = *v4;
  if ((v7 & 0x10000) == 0)
  {
LABEL_23:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_105;
  }

  unsigned int v28 = *(_BYTE *)(a2 + 185);
  v3 |= 0x4000000000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 185) = v28;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x4000000000000LL) == 0)
  {
LABEL_25:
    if ((v5 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_105;
  }

  PB::TextFormatter::format(this, "kChaosMetRO0", *(_BYTE *)(a1 + 173));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  unsigned int v5 = *(void *)(a1 + 204);
  if ((v5 & 0x8000000000000LL) == 0)
  {
LABEL_24:
    if ((v5 & 0x10000000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_105;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 176), 0x78u);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x200000000000000LL) == 0)
  {
LABEL_25:
    if ((v4 & 2) == 0) {
      goto LABEL_26;
    }
    goto LABEL_105;
  }

          *(void *)(a1 + 8) = v37;
          break;
        case 0xCA:
          *(_BYTE *)(a1 + 40) |= 2u;
          uint64_t v21 = *((void *)this + 1);
          uint64_t v2 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
          {
            v46 = 0;
            uint64_t v47 = 0;
            uint64_t v25 = 0LL;
            if (v2 <= v21) {
              uint64_t v2 = *((void *)this + 1);
            }
            while (1)
            {
              if (v2 == v21)
              {
                uint64_t v25 = 0LL;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_93;
              }

              v48 = v21++;
              uint64_t v49 = *(_BYTE *)(v22 + v48);
              *((void *)this + 1) = v21;
              v25 |= (unint64_t)(v49 & 0x7F) << v46;
              if ((v49 & 0x80) == 0) {
                break;
              }
              v46 += 7;
              int v14 = v47++ > 8;
              if (v14)
              {
                uint64_t v25 = 0LL;
                goto LABEL_92;
              }
            }

            if (*((_BYTE *)this + 24)) {
              uint64_t v25 = 0LL;
            }
LABEL_92:
            uint64_t v2 = v48 + 1;
          }

          else
          {
            uint64_t v23 = 0;
            int v24 = 0;
            uint64_t v25 = 0LL;
            while (1)
            {
              uint64_t v2 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              int v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              uint64_t v21 = v2;
              int v14 = v24++ > 8;
              if (v14)
              {
                uint64_t v25 = 0LL;
                break;
              }
            }
          }

              *(void *)(a1 + 8) = v24;
              goto LABEL_124;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unsigned int v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v55 = 0;
                v56 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  char v3 = *((void *)this + 1);
                }
                else {
                  char v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }

                  uint64_t v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  int v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_107:
                    char v3 = v57 + 1;
                    goto LABEL_108;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_107;
              }

              uint64_t v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                char v3 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v29 += 7;
                uint64_t v27 = v3;
                int v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_124;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v59 = 0;
                v60 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  char v3 = *((void *)this + 1);
                }
                else {
                  char v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_113;
                  }

                  uint64_t v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  int v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    char v3 = v61 + 1;
                    goto LABEL_113;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_112;
              }

              uint64_t v35 = 0;
              v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                char v3 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v35 += 7;
                uint64_t v33 = v3;
                int v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_124;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                uint64_t v63 = 0;
                v64 = 0;
                uint64_t v43 = 0LL;
                if (v2 <= v39) {
                  char v3 = *((void *)this + 1);
                }
                else {
                  char v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_118;
                  }

                  uint64_t v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  int v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    char v3 = v65 + 1;
                    goto LABEL_118;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_117;
              }

              uint64_t v41 = 0;
              v42 = 0;
              uint64_t v43 = 0LL;
              do
              {
                char v3 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_118;
                }
                v41 += 7;
                uint64_t v39 = v3;
                int v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 20) = v43;
              goto LABEL_124;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                uint64_t v67 = 0;
                v68 = 0;
                uint64_t v49 = 0LL;
                if (v2 <= v45) {
                  char v3 = *((void *)this + 1);
                }
                else {
                  char v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_123;
                  }

                  uint64_t v69 = v45++;
                  int v70 = *(_BYTE *)(v46 + v69);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  int v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_122:
                    char v3 = v69 + 1;
                    goto LABEL_123;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_122;
              }

              uint64_t v47 = 0;
              v48 = 0;
              uint64_t v49 = 0LL;
              do
              {
                char v3 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_123;
                }
                v47 += 7;
                uint64_t v45 = v3;
                int v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_123:
              *(_DWORD *)(a1 + 16) = v49;
LABEL_124:
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              char v3 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              goto LABEL_124;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

            while (v10 < v41)
            {
              uint64_t v43 = *(_OWORD *)v10;
              v130 = *(void **)(v10 + 16);
              *(_OWORD *)v129 = v43;
              v44 = *(_OWORD *)v41;
              *(void *)(v10 + 16) = *(void *)(v41 + 16);
              *(_OWORD *)unint64_t v10 = v44;
              uint64_t v45 = *(_OWORD *)v129;
              *(void *)(v41 + 16) = v130;
              *(_OWORD *)uint64_t v41 = v45;
              do
              {
                while (1)
                {
                  sub_101123E50(*a3, (void **)&v125, v129);
                  v10 += 24LL;
                  sub_101123E50(*a3, (void **)v10, __p);
                  v46 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0) {
                    operator delete(__p[0]);
                  }
                  if (SHIBYTE(v130) < 0) {
                    break;
                  }
                  if (v46) {
                    goto LABEL_99;
                  }
                }

                operator delete(v129[0]);
              }

              while (!v46);
              do
              {
                while (1)
                {
LABEL_99:
                  sub_101123E50(*a3, (void **)&v125, v129);
                  v41 -= 24LL;
                  sub_101123E50(*a3, (void **)v41, __p);
                  uint64_t v47 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0) {
                    operator delete(__p[0]);
                  }
                  if ((SHIBYTE(v130) & 0x80000000) == 0) {
                    break;
                  }
                  operator delete(v129[0]);
                  if (!v47) {
                    goto LABEL_103;
                  }
                }
              }

              while (v47);
            }

            v48 = (__int128 *)(v10 - 24);
            if (v10 - 24 == a1)
            {
            }

            else
            {
              uint64_t v49 = *v48;
              *(void *)(a1 + 16) = *(void *)(v10 - 8);
              *(_OWORD *)a1 = v49;
              *(_BYTE *)(v10 - 1) = 0;
              *(_BYTE *)(v10 - 24) = 0;
            }

            a5 = 0;
            v50 = v125;
            *(void *)(v10 - 8) = v126;
            void *v48 = v50;
            continue;
          }
        }

        uint64_t v19 = 0LL;
        int v20 = *(_OWORD *)a1;
        v126 = *(void **)(a1 + 16);
        v125 = v20;
        *(void *)(a1 + 8) = 0LL;
        *(void *)(a1 + 16) = 0LL;
        *(void *)a1 = 0LL;
        do
        {
          sub_101123E50(*a3, (void **)(a1 + v19 + 24), v129);
          sub_101123E50(*a3, (void **)&v125, __p);
          uint64_t v21 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
          if (v128 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v130) < 0) {
            operator delete(v129[0]);
          }
          v19 += 24LL;
        }

        while (v21);
        uint64_t v22 = a1 + v19;
        uint64_t v23 = (void **)v122;
        if (v19 == 24)
        {
          uint64_t v23 = (void **)v122;
          while (v22 < (unint64_t)v23)
          {
            v23 -= 3;
            sub_101123E50(*a3, v23, v129);
            sub_101123E50(*a3, (void **)&v125, __p);
            uint64_t v25 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
            if (v128 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v130) < 0)
            {
              operator delete(v129[0]);
              if (v25) {
                break;
              }
            }

            else if (v25)
            {
              break;
            }
          }
        }

        else
        {
          do
          {
            while (1)
            {
              v23 -= 3;
              sub_101123E50(*a3, v23, v129);
              sub_101123E50(*a3, (void **)&v125, __p);
              int v24 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
              if (v128 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v130) < 0) {
                break;
              }
              if (v24) {
                goto LABEL_36;
              }
            }

            operator delete(v129[0]);
          }

          while (!v24);
        }

LABEL_123:
  *(_DWORD *)(a1 + 292) |= 0x40000u;
  v42 = *(void **)(a1 + 152);
  if (!v42)
  {
    v42 = operator new(0x28uLL);
    v42[3] = 39LL;
    void *v42 = off_10181B800;
    v42[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v42[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v42 + 8) = 0;
    *(void *)(a1 + 152) = v42;
  }

  uint64_t v43 = *(void *)(a2 + 152);
  if (!v43) {
    uint64_t v43 = *(void *)(qword_1019A0978 + 152);
  }
  sub_10007B318((uint64_t)v42, v43);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x80000) == 0)
  {
LABEL_108:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_109;
    }
    goto LABEL_133;
  }

        if (v92 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v39 = (uint64_t *)*v39;
        if (!v39) {
          goto LABEL_126;
        }
      }

      *(void *)buf = v38;
      uint64_t v67 = sub_1001508C4((uint64_t)&v98, v38, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
      *(void *)buf = __p;
      v68 = sub_100150B64((uint64_t)(v67 + 4), (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)buf);
      *((double *)v68 + 5) = v33 + *((double *)v68 + 5);
      *(void *)buf = v38;
      uint64_t v69 = sub_1001508C4((uint64_t)&v98, v38, (uint64_t)&unk_1012CF090, (_OWORD **)buf);
      *(void *)buf = __p;
      uint64_t v51 = sub_100150B64((uint64_t)(v69 + 4), (unsigned __int8 *)__p, (uint64_t)&unk_1012CF090, (__int128 **)buf);
      goto LABEL_97;
    }

  uint64_t v51 = *(void *)(a2 + 232);
  *(_DWORD *)(a1 + 368) |= 0x40u;
  *(void *)(a1 + 232) = v51;
  v36 = *(_DWORD *)(a2 + 368);
  if ((v36 & 0x80) != 0)
  {
LABEL_91:
    uint64_t v37 = *(void *)(a2 + 240);
    *(_DWORD *)(a1 + 368) |= 0x80u;
    *(void *)(a1 + 240) = v37;
    v36 = *(_DWORD *)(a2 + 368);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x33,  (int)a2,  *(double *)(v5 + 336),  a3);
  uint64_t v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x80000) == 0)
  {
LABEL_56:
    if ((v9 & 0x100000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_125;
  }

  uint64_t result = sub_100E575B0();
  if ((result & 1) != 0)
  {
    sub_1002A5370(&v47);
    uint64_t v43 = *(void *)(a4 + 8);
    if (v43 != a4)
    {
      while (*a3 != 1)
      {
        if (!*a3)
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)(v43 + 16) + 16LL))(&__p, v43 + 16);
          sub_1002AEC14((uint64_t)&v47, "btle_fence_resume", (char *)&__p);
          goto LABEL_129;
        }

  *(_DWORD *)(a1 + 184) |= 0x80000u;
  uint64_t v43 = *(void **)(a1 + 152);
  if (!v43)
  {
    uint64_t v43 = operator new(0x20uLL);
    *uint64_t v43 = &off_1018721D0;
    v43[1] = 0LL;
    v43[2] = 0LL;
    v43[3] = 0LL;
    *(void *)(a1 + 152) = v43;
  }

  v44 = *(void *)(a2 + 152);
  if (!v44) {
    v44 = *(void *)(qword_1019A1CE8 + 152);
  }
  sub_100B30300((uint64_t)v43, v44);
  unsigned int v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x100000) == 0)
  {
LABEL_106:
    if ((v5 & 0x200000) == 0) {
      return;
    }
    goto LABEL_133;
  }

  unsigned int v30 = 0LL;
LABEL_124:
  sub_1001B4C40(v97);
  sub_100BDC958((uint64_t)v113);
LABEL_125:
  sub_100890314(v99);
  if (SHIBYTE(v122) < 0) {
    operator delete(*((void **)&v121 + 1));
  }
  return v30;
}

          sub_100D53CE4(&v114);
          return 0;
        }

        uint64_t v21 = v115;
        if (v115 != &v114)
        {
          uint64_t v22 = 0;
          v109 = 0;
          v101 = v4 + 23;
          v102 = v4 + 146;
          v105 = v4 + 82;
          while (1)
          {
            uint64_t v23 = (std::__shared_weak_count *)v21[5];
            v112 = v21[4];
            v113 = v23;
            if (v23)
            {
              p_shared_owners = (unint64_t *)&v23->__shared_owners_;
              do
                uint64_t v25 = __ldxr(p_shared_owners);
              while (__stxr(v25 + 1, p_shared_owners));
            }

            sub_100BDA324((uint64_t)v118, (uint64_t)&v112, *((_BYTE *)v21 + 24));
            int v26 = v113;
            if (v113)
            {
              uint64_t v27 = (unint64_t *)&v113->__shared_owners_;
              do
                unsigned int v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
            }

            if (!sub_100BDA328((uint64_t)v118, (uint64_t)(v4 + 4)))
            {
              uint64_t v29 = v4[4] != *(void *)v118 || *((unsigned __int8 *)v4 + 48) == v118[16];
              if (v29) {
                ++v22;
              }
              if (sub_100D734E8((uint64_t)v110, (uint64_t)v118))
              {
                *(void *)buf = v118;
                unsigned int v30 = sub_100ECB1EC(v110, (uint64_t)v118, (uint64_t)&unk_1012CF090, (__int128 **)buf);
                uint64_t v31 = v30[143];
                sub_1001AC068((void *)v31);
                v32 = (double **)(v30 + 143);
                if (*(double *)(v31 + 40) >= 40.0)
                {
                  uint64_t v35 = *v32;
                  sub_1001AC068(*v32);
                  uint64_t v33 = 1.0 - 40.0 / v35[5];
                  if (v118[16])
                  {
                    uint64_t v33 = 0.0;
                    v34 = 40.0 / v35[5];
                  }

                  else
                  {
                    v34 = 1.0;
                  }
                }

                else
                {
                  uint64_t v33 = 0.0;
                  v34 = 1.0;
                }

                v36 = v30[140];
                uint64_t v37 = v30[141];
                if (v36 != v37)
                {
                  v38 = 0;
                  uint64_t v39 = 0.0;
                  do
                  {
                    v40 = *(double *)(v36 + 48);
                    uint64_t v41 = v40 >= v33 && v40 <= v34;
                    if (v40 < v33 || v40 > v34) {
                      v40 = -0.0;
                    }
                    uint64_t v39 = v39 + v40;
                    v38 += v41;
                    v36 += 112LL;
                  }

                  while (v36 != v37);
                  if (v38)
                  {
                    ++*((_DWORD *)v4 + 274);
                    *((_BYTE *)v4 + 209) = 1;
                    v42 = v38 - 1227133513 * ((v4[141] - v4[140]) >> 4);
                    if (v42 <= v109)
                    {
                      if (v42 == v109 || v42 > *((_DWORD *)v4 + 290))
                      {
                        *v102 = *(_OWORD *)v118;
                        *((_BYTE *)v4 + 1184) = v118[16];
                        *((_DWORD *)v4 + 290) = v42;
                      }

                      v42 = v109;
                    }

                    else
                    {
                      uint64_t v43 = v39 / (double)v38;
                      v111 = v43;
                      *v102 = *v101;
                      *((_BYTE *)v4 + 1184) = *((_BYTE *)v4 + 200);
                      *v101 = *(_OWORD *)v118;
                      v44 = v118[16];
                      *((_BYTE *)v4 + 200) = v118[16];
                      *((_DWORD *)v4 + 275) = v38;
                      *((_DWORD *)v4 + 290) = *((_DWORD *)v4 + 45);
                      *((_DWORD *)v4 + 45) = v42;
                      *((double *)v4 + 139) = v43;
                      uint64_t v45 = *v32;
                      sub_1001AC068(*v32);
                      v46 = 1.0 - v43;
                      if (v44) {
                        v46 = v43;
                      }
                      *((double *)v4 + 138) = v46 * v45[5];
                      uint64_t v47 = a3[7];
                      uint64_t v49 = a3[4];
                      v48 = a3[5];
                      *((_OWORD *)v4 + 47) = a3[6];
                      *((_OWORD *)v4 + 48) = v47;
                      *((_OWORD *)v4 + 45) = v49;
                      *((_OWORD *)v4 + 46) = v48;
                      v50 = *a3;
                      uint64_t v51 = a3[1];
                      v52 = a3[3];
                      *((_OWORD *)v4 + 43) = a3[2];
                      *((_OWORD *)v4 + 44) = v52;
                      *v105 = v50;
                      *((_OWORD *)v4 + 42) = v51;
                      std::string::operator=((std::string *)(v4 + 98), __str);
                      memcpy(v4 + 101, __src, 0x118uLL);
                      if (!sub_100D3F3A8(*a2, (uint64_t)v105, v32, v118[16], &v111, 1))
                      {
                        if (qword_1019348B0 != -1) {
                          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
                        }
                        v94 = (os_log_s *)qword_1019348B8;
                        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 134349056;
                          *(void *)&buf[4] = v3;
                          _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining outgoing road position",  buf,  0xCu);
                        }

                        if (sub_1002921D0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1019348B0 != -1) {
                            dispatch_once(&qword_1019348B0, &stru_10188A8E0);
                          }
                          v145 = 134349056;
                          v146 = v3;
                          LODWORD(v100) = 12;
                          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,interpolateOnRoad returned false, determining outgoing road position",  &v145,  v100);
                          v96 = (char *)v95;
                          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)",  "%s\n",  v95);
                          goto LABEL_129;
                        }

                        goto LABEL_123;
                      }
                    }

                    v109 = v42;
                  }
                }
              }
            }

            uint64_t v21 = (uint64_t *)v21[1];
            if (v21 == &v114) {
              goto LABEL_60;
            }
          }
        }
      }

      v109 = 0;
      uint64_t v22 = 0;
LABEL_60:
      *((_BYTE *)v4 + 208) = v22 > 1;
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      v54 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v55 = v4[4];
        v56 = *((unsigned __int8 *)v4 + 48);
        uint64_t v57 = v4[15];
        v58 = *((unsigned __int8 *)v4 + 209);
        uint64_t v59 = *((unsigned __int8 *)v4 + 208);
        v60 = v4[23];
        uint64_t v61 = *((unsigned __int8 *)v4 + 200);
        v62 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v4[141] - v4[140]) >> 4);
        uint64_t v63 = *((_DWORD *)v4 + 275);
        uint64_t v65 = *((_DWORD *)v4 + 44);
        v64 = *((_DWORD *)v4 + 45);
        v66 = *((_DWORD *)v4 + 290);
        uint64_t v67 = v4[146];
        *(_DWORD *)buf = 134352641;
        *(void *)&buf[4] = v3;
        v148 = 2049;
        v149 = v55;
        v150 = 1026;
        v151 = v56;
        v152 = 1026;
        v153 = v65;
        v154 = 2050;
        v155 = v57;
        v156 = 1026;
        v157 = v58;
        v158 = 1026;
        v159 = v59;
        v160 = 2049;
        v161 = v60;
        v162 = 1026;
        v163 = v61;
        v164 = 2050;
        v165 = v62;
        v166 = 1026;
        v167 = v63;
        v168 = 1026;
        v169 = v64;
        v170 = 1026;
        v171 = v109;
        v172 = 1026;
        v173 = v66;
        v174 = 2049;
        v175 = v67;
        _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,candidate,ID,%{private}llu,fwd,%{public}d,countArndMean,%{public}d,bestParticleScore,%{p ublic}.9lf,isCombined,%{public}d,isMulti,%{public}d,combinedWith,%{private}llu,fwd,%{public}d,incomingCnt,%{pu blic}lu,outgoingCnt,%{public}d,combinedCnt,%{public}d,bestCombinedCnt,%{public}d,secondBestCombinedCnt,%{publi c}d,secondCombinedWith,%{private}llu",  buf,  0x74u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        int v70 = v4[4];
        v71 = *((unsigned __int8 *)v4 + 48);
        uint64_t v72 = v4[15];
        v73 = *((unsigned __int8 *)v4 + 209);
        uint64_t v74 = *((unsigned __int8 *)v4 + 208);
        v75 = v4[23];
        uint64_t v76 = *((unsigned __int8 *)v4 + 200);
        char v77 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v4[141] - v4[140]) >> 4);
        v78 = *((_DWORD *)v4 + 275);
        v80 = *((_DWORD *)v4 + 44);
        v79 = *((_DWORD *)v4 + 45);
        v81 = *((_DWORD *)v4 + 290);
        v82 = v4[146];
        *(_DWORD *)v118 = 134352641;
        *(void *)&v118[4] = v3;
        *(_WORD *)&v118[12] = 2049;
        *(void *)&v118[14] = v70;
        v119 = 1026;
        v120 = v71;
        v121 = 1026;
        v122 = v80;
        v123 = 2050;
        v124 = v72;
        v125 = 1026;
        v126 = v73;
        v127 = 1026;
        v128 = v74;
        v129 = 2049;
        v130 = v75;
        v131 = 1026;
        v132 = v76;
        v133 = 2050;
        v134 = v77;
        v135 = 1026;
        v136 = v78;
        v137 = 1026;
        v138 = v79;
        v139 = 1026;
        v140 = v109;
        v141 = 1026;
        v142 = v81;
        v143 = 2049;
        v144 = v82;
        LODWORD(v100) = 116;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,candidate,ID,%{private}llu,fwd,%{public}d,countArndMean,%{public}d,bestParticleScore,%{p ublic}.9lf,isCombined,%{public}d,isMulti,%{public}d,combinedWith,%{private}llu,fwd,%{public}d,incomingCnt,%{pu blic}lu,outgoingCnt,%{public}d,combinedCnt,%{public}d,bestCombinedCnt,%{public}d,secondBestCombinedCnt,%{publi c}d,secondCombinedWith,%{private}llu",  v118,  v100);
        v84 = (char *)v83;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)",  "%s\n",  v83);
        if (v84 != buf) {
          free(v84);
        }
      }

      sub_100D53CE4(&v114);
      v68 = (void *)v4[1];
      if (v68)
      {
        do
        {
          uint64_t v69 = v68;
          v68 = (void *)*v68;
        }

        while (v68);
      }

      else
      {
        do
        {
          uint64_t v69 = (void *)v4[2];
          uint64_t v29 = *v69 == (void)v4;
          uint64_t v4 = v69;
        }

        while (!v29);
      }

      uint64_t v4 = v69;
      if (v69 == v103) {
        return 1;
      }
    }

    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    v90 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(void *)&buf[4] = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_ERROR,  "CLMMPED,%{public}.1lf,unable to determine best particle",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      *(_DWORD *)v118 = 134349056;
      *(void *)&v118[4] = v3;
      LODWORD(v100) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMMPED,%{public}.1lf,unable to determine best particle",  v118,  v100);
      v87 = (char *)v91;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLParticleMM::MMCandidateVector::assessCandidates(CLMapGeometryPtr, const CLMapCrumb &)",  "%s\n",  v91);
      goto LABEL_108;
    }

    return 0;
  }

  return v104;
}

        if (v74 < 0) {
          operator delete(__p[0]);
        }
        return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
      default:
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10188D488);
        }
        unsigned int v30 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = a3;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "#Warning,HRSE,onAvlFileUpdated,avl download status,%{public}d",  buf,  8u);
        }

        if (!sub_1002921D0(115, 2)) {
          return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
        }
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_10188D488);
        }
        LODWORD(__p[0]) = 67240192;
        HIDWORD(__p[0]) = a3;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#Warning,HRSE,onAvlFileUpdated,avl download status,%{public}d",  __p,  8);
        uint64_t v9 = (char *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLHighResolutionSignalEnvironmentDataManager::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v31);
        break;
    }

          uint64_t v4 = *((void *)this + 1);
          unsigned int v5 = *((void *)this + 2);
          uint64_t v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24)) {
            return v6 == 0;
          }
          break;
        case 4u:
          *(_BYTE *)(a1 + 80) |= 2u;
          v56 = *((void *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFF7LL || v56 + 8 > *((void *)this + 2)) {
            goto LABEL_120;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v56);
          goto LABEL_122;
        case 5u:
          *(_BYTE *)(a1 + 80) |= 1u;
          uint64_t v57 = *((void *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFF7LL || v57 + 8 > *((void *)this + 2)) {
            goto LABEL_120;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v57);
          goto LABEL_122;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_123;
      }
    }

    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v17 = 0LL;
    if (v4 > v5) {
      unsigned int v5 = v4;
    }
    while (v5 != v4)
    {
      uint64_t v23 = v4 + 1;
      int v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        uint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

  uint64_t result = *(float *)(a2 + 164);
  v5 |= 0x40000000uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 164) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x100000000000LL) == 0)
  {
LABEL_58:
    if ((v7 & 8) == 0) {
      goto LABEL_59;
    }
    goto LABEL_125;
  }

  PB::TextFormatter::format(this, "lgDeltaVXYOverEpoch", *(float *)(a1 + 260));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x80000000000000LL) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000000LL) == 0) {
      goto LABEL_58;
    }
    goto LABEL_125;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 164), 0x35u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x100000000000LL) == 0)
  {
LABEL_58:
    if ((v6 & 8) == 0) {
      goto LABEL_59;
    }
    goto LABEL_125;
  }

  uint64_t result = *(float *)(a2 + 68);
  v5 |= 0x4000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 68) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x2000) == 0)
  {
LABEL_50:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_125;
  }

  PB::TextFormatter::format(this, "isPulse", *(_BYTE *)(a1 + 275));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x100) == 0)
  {
LABEL_49:
    if ((v6 & 0x2000000000LL) == 0) {
      goto LABEL_50;
    }
    goto LABEL_125;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0x2Cu);
  unsigned int v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_125;
  }

  uint64_t result = *(float *)(a2 + 28);
  v5 |= 0x10uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 28) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000000000000LL) == 0)
  {
LABEL_43:
    if ((v8 & 0x100) == 0) {
      goto LABEL_44;
    }
    goto LABEL_125;
  }

  PB::TextFormatter::format(this, "kRegimeDeltaVThreshold2RO", *(float *)(a1 + 132));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x100000000LL) == 0) {
      goto LABEL_43;
    }
    goto LABEL_125;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0xE9u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  unsigned int v5 = *v4;
  if ((*v4 & 0x4000000000000000LL) == 0)
  {
LABEL_43:
    if ((v7 & 0x100) == 0) {
      goto LABEL_44;
    }
    goto LABEL_125;
  }

  uint64_t result = *(float *)(a2 + 308);
  v6 |= 8uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(float *)(a1 + 308) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000000LL) == 0) {
      goto LABEL_19;
    }
    goto LABEL_125;
  }

  PB::TextFormatter::format(this, "isDecisionMadeAtBoundary", *(_BYTE *)(a1 + 321));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x800) == 0)
  {
LABEL_22:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_125;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 308), 0xDu);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x10) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000000000LL) == 0) {
      goto LABEL_19;
    }
    goto LABEL_125;
  }

  v52 = *(_BYTE *)(a2 + 186);
  v3 |= 0x8000000000000000LL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 186) = v52;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x8000000000000LL) == 0)
  {
LABEL_45:
    if ((v5 & 0x80) == 0) {
      goto LABEL_46;
    }
    goto LABEL_125;
  }

  PB::TextFormatter::format(this, "kMaxEnergyRO0", *(float *)(a1 + 64));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  unsigned int v5 = *(void *)(a1 + 204);
  if ((v5 & 0x800) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_125;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 181), 0x3FDu);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 4) == 0)
  {
LABEL_45:
    if ((v4 & 4) == 0) {
      goto LABEL_46;
    }
    goto LABEL_125;
  }

LABEL_128:
  *(_DWORD *)(a1 + 292) |= 0x80000u;
  v44 = *(_DWORD **)(a1 + 160);
  if (!v44)
  {
    v44 = operator new(0x28uLL);
    v44[4] = 40;
    *(void *)v44 = off_10181B878;
    *((void *)v44 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v44 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v44 + 4) = 0LL;
    *((_BYTE *)v44 + 20) = 0;
    *(void *)(a1 + 160) = v44;
  }

  uint64_t v45 = *(void *)(a2 + 160);
  if (!v45) {
    uint64_t v45 = *(void *)(qword_1019A0978 + 160);
  }
  sub_10007BA58((uint64_t)v44, v45);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x100000) == 0)
  {
LABEL_109:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_110;
    }
    goto LABEL_138;
  }

      if ((v34 & (v34 - 1)) != 0)
      {
        if (v33 >= v34) {
          int v12 = v33 % v34;
        }
        else {
          int v12 = v33;
        }
      }

      else
      {
        int v12 = (v34 - 1) & v33;
      }
    }

    v71 = __p[0];
    uint64_t v72 = (void *)*((void *)__p[0] + v12);
    if (v72)
    {
      void *v54 = *v72;
LABEL_141:
      *uint64_t v72 = v54;
      goto LABEL_142;
    }

    void *v54 = v98;
    *(void *)&v98 = v54;
    v71[v12] = &v98;
    if (*v54)
    {
      v73 = *(void *)(*v54 + 8LL);
      if ((v34 & (v34 - 1)) != 0)
      {
        if (v73 >= v34) {
          v73 %= v34;
        }
      }

      else
      {
        v73 &= v34 - 1;
      }

      uint64_t v72 = (char *)__p[0] + 8 * v73;
      goto LABEL_141;
    }

    sub_10014E5C4(a1, (uint64_t)&v98, 5);
    sub_10014E5C4(a1, (uint64_t)v96, 6);
    sub_10001AA60((uint64_t)&v93);
    sub_1000A8728((uint64_t)v96);
    sub_1000A8728((uint64_t)&v98);
    sub_10001D8F4((uint64_t)&v101);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_101821128);
    }
    int v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v105 = 2082;
      v106 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:most recent model is not valid, will not calculate per cluster per anchor statistics}",  buf,  0x12u);
    }
  }

  return a1;
}

  uint64_t v55 = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 368) |= 0x800u;
  *(void *)(a1 + 264) = v55;
  v36 = *(_DWORD *)(a2 + 368);
  if ((v36 & 0x1000) == 0)
  {
LABEL_98:
    if ((v36 & 0x4000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_130;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x38,  *(unsigned __int8 *)(v5 + 279),  (BOOL)a2,  a4);
  if ((*(_DWORD *)(v5 + 368) & 0x1000000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x39,  *(unsigned __int8 *)(v5 + 356),  (BOOL)a2,  a4);
  }
  return result;
}

  *(_DWORD *)(a1 + 184) |= 0x100000u;
  uint64_t v45 = *(void **)(a1 + 160);
  if (!v45)
  {
    uint64_t v45 = operator new(0x20uLL);
    *uint64_t v45 = &off_1018722C0;
    v45[1] = 0LL;
    v45[2] = 0LL;
    v45[3] = 0LL;
    *(void *)(a1 + 160) = v45;
  }

  v46 = *(void *)(a2 + 160);
  if (!v46) {
    v46 = *(void *)(qword_1019A1CE8 + 160);
  }
  sub_100B31090((uint64_t)v45, v46);
  if ((*(_DWORD *)(a2 + 184) & 0x200000) != 0)
  {
LABEL_133:
    *(_DWORD *)(a1 + 184) |= 0x200000u;
    uint64_t v47 = *(void **)(a1 + 168);
    if (!v47)
    {
      uint64_t v47 = operator new(0x20uLL);
      *uint64_t v47 = &off_1018723B0;
      v47[1] = 0LL;
      v47[2] = 0LL;
      v47[3] = 0LL;
      *(void *)(a1 + 168) = v47;
    }

    v48 = *(void *)(a2 + 168);
    if (!v48) {
      v48 = *(void *)(qword_1019A1CE8 + 168);
    }
    sub_100B31B50((uint64_t)v47, v48);
  }

  uint64_t result = *(float *)(a2 + 288);
  v5 |= 0x2000000000000000uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 288) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x40000000000LL) == 0)
  {
LABEL_63:
    if ((v7 & 0x40000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_130;
  }

  PB::TextFormatter::format(this, "lgDeltaVZBiggestImpact", *(float *)(a1 + 280));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x1000000000000000LL) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_63;
    }
    goto LABEL_130;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 288), 0x3Au);
  uint64_t v6 = *v4;
  if ((*v4 & 0x40000000000LL) == 0)
  {
LABEL_63:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_130;
  }

  uint64_t result = *(float *)(a2 + 152);
  v5 |= 0x800000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 152) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x2000000000LL) == 0)
  {
LABEL_55:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_130;
  }

  PB::TextFormatter::format(this, "lowSenseWithAudioDeltaVThreshold1", *(float *)(a1 + 168));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000000000LL) == 0)
  {
LABEL_54:
    if ((v6 & 0x20000000000LL) == 0) {
      goto LABEL_55;
    }
    goto LABEL_130;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x31u);
  unsigned int v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_54:
    if ((v5 & 0x1000000000LL) == 0) {
      goto LABEL_55;
    }
    goto LABEL_130;
  }

  uint64_t result = *(float *)(a2 + 68);
  v5 |= 0x4000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 68) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_48:
    if ((v4 & 0x80) == 0) {
      goto LABEL_49;
    }
    goto LABEL_130;
  }

  PB::TextFormatter::format(this, "kRegimeDvThreshold2ROWOASB", *(float *)(a1 + 152));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000000LL) == 0)
  {
LABEL_47:
    if ((v6 & 0x2000000000LL) == 0) {
      goto LABEL_48;
    }
    goto LABEL_130;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0xEEu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  unsigned int v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_48:
    if ((v5 & 0x80) == 0) {
      goto LABEL_49;
    }
    goto LABEL_130;
  }

  uint64_t v17 = *(_DWORD *)(a2 + 280);
  v5 |= 0x1000000000000000uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 280) = v17;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 2) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_130;
  }

  PB::TextFormatter::format(this, "isHighSpeedCrashDetectedOverWindow", *(_BYTE *)(a1 + 326));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x10000) == 0)
  {
LABEL_27:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_130;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 280), 0x12u);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 2) == 0)
  {
LABEL_23:
    if ((v5 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_130;
  }

  v58 = *(_BYTE *)(a2 + 190);
  uint64_t v59 = v4 >> 16;
  v4 |= 8uLL;
  *(void *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v59;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 190) = v58;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 8) == 0)
  {
LABEL_50:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_130;
  }

  PB::TextFormatter::format(this, "kMaxSaturationRO1", *(float *)(a1 + 84));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  unsigned int v5 = *(void *)(a1 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_49:
    if ((v6 & 2) == 0) {
      goto LABEL_50;
    }
    goto LABEL_130;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0x452u);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_50:
    if ((v4 & 0x800000000000LL) == 0) {
      goto LABEL_51;
    }
    goto LABEL_130;
  }

LABEL_133:
  *(_DWORD *)(a1 + 292) |= 0x100000u;
  v46 = *(void **)(a1 + 168);
  if (!v46)
  {
    v46 = operator new(0x28uLL);
    v46[3] = 41LL;
    void *v46 = off_10181B8F0;
    v46[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v46[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v46 + 8) = 0;
    *(void *)(a1 + 168) = v46;
  }

  uint64_t v47 = *(void *)(a2 + 168);
  if (!v47) {
    uint64_t v47 = *(void *)(qword_1019A0978 + 168);
  }
  sub_10007C300((uint64_t)v46, v47);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x200000) == 0)
  {
LABEL_110:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_111;
    }
    goto LABEL_143;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v43 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    v44 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "alertCanceledBecauseOfOffWristPost";
    v193 = 2048;
    v194 = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v129 = *(void *)(a1 + 8);
    v187 = 136315394;
    v188 = "alertCanceledBecauseOfOffWristPost";
    v189 = 2048;
    v190 = v129;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v131 = (uint8_t *)v130;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v130);
    if (v131 != buf) {
      free(v131);
    }
  }

  a4[9] = 1;
  unint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_19:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_145;
  }

  uint64_t result = *(float *)(a2 + 128);
  v5 |= 0x200000uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 128) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x400000000000000LL) == 0)
  {
LABEL_68:
    if ((v7 & 0x8000000000LL) == 0) {
      goto LABEL_69;
    }
    goto LABEL_135;
  }

  PB::TextFormatter::format(this, "lgDurationZBiggestImpact", *(float *)(a1 + 300));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((v7 & 2) == 0)
  {
LABEL_67:
    if ((v7 & 4) == 0) {
      goto LABEL_68;
    }
    goto LABEL_135;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0x3Fu);
  uint64_t v6 = *v4;
  if ((*v4 & 0x400000000000000LL) == 0)
  {
LABEL_68:
    if ((v6 & 0x8000000000LL) == 0) {
      goto LABEL_69;
    }
    goto LABEL_135;
  }

  uint64_t result = *(float *)(a2 + 164);
  v5 |= 0x4000000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 164) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 0x20) == 0)
  {
LABEL_60:
    if ((v4 & 0x1000000000000000LL) == 0) {
      goto LABEL_61;
    }
    goto LABEL_135;
  }

  PB::TextFormatter::format(this, "lowSenseWithAudioPeakPressureThreshold", *(float *)(a1 + 188));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000000000LL) == 0)
  {
LABEL_59:
    if ((v6 & 0x400000000000LL) == 0) {
      goto LABEL_60;
    }
    goto LABEL_135;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 252), 0x36u);
  unsigned int v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000000LL) == 0)
  {
LABEL_59:
    if ((v6 & 0x200) == 0) {
      goto LABEL_60;
    }
    goto LABEL_135;
  }

  uint64_t result = *(float *)(a2 + 44);
  v5 |= 0x100uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 44) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000) == 0)
  {
LABEL_53:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_135;
  }

  PB::TextFormatter::format(this, "kRegimeRotThresholdROWOASF", *(float *)(a1 + 172));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000000LL) == 0)
  {
LABEL_52:
    if ((v6 & 0x40000000000LL) == 0) {
      goto LABEL_53;
    }
    goto LABEL_135;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0xF3u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  unsigned int v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_53:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_135;
  }

  uint64_t v22 = *(_BYTE *)(a2 + 336);
  v6 |= 0x2000000uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 336) = v22;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x800) == 0)
  {
LABEL_28:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_135;
  }

  PB::TextFormatter::format(this, "isQuiescenceDecided", *(_BYTE *)(a1 + 331));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x200000) == 0)
  {
LABEL_32:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_135;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 336), 0x68u);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x800) == 0)
  {
LABEL_28:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_135;
  }

  v64 = *(_DWORD *)(a2 + 152);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 152) = v64;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x1000000000000LL) == 0)
  {
LABEL_55:
    if ((v2 & 0x1000000000LL) == 0) {
      goto LABEL_56;
    }
    goto LABEL_135;
  }

  PB::TextFormatter::format(this, "kPassthruRO2", *(_BYTE *)(a1 + 191));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  unsigned int v5 = *(void *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x20) == 0)
  {
LABEL_54:
    if ((v6 & 0x40) == 0) {
      goto LABEL_55;
    }
    goto LABEL_135;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 162), 0x457u);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x80000000000LL) == 0)
  {
LABEL_55:
    if ((v5 & 0x800) == 0) {
      goto LABEL_56;
    }
    goto LABEL_135;
  }

          *(_DWORD *)(a1 + 44) = v29;
          goto LABEL_166;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v32 = *((void *)this + 1);
          if (v32 <= 0xFFFFFFFFFFFFFFF7LL && v32 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 32) = *(void *)(*(void *)this + v32);
            *((void *)this + 1) += 8LL;
          }

          else
          {
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_166;
        case 3u:
          *(_BYTE *)(a1 + 52) |= 8u;
          uint64_t v33 = *((void *)this + 1);
          v34 = *((void *)this + 2);
          uint64_t v35 = *(void *)this;
          if (v33 <= 0xFFFFFFFFFFFFFFF5LL && v33 + 10 <= v34)
          {
            v36 = 0;
            uint64_t v37 = 0;
            v38 = 0LL;
            do
            {
              uint64_t v39 = v33 + 1;
              *((void *)this + 1) = v33 + 1;
              v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_136;
              }
              v36 += 7;
              uint64_t v33 = v39;
              v62 = v37++ > 8;
            }

            while (!v62);
LABEL_107:
            LODWORD(v38) = 0;
            goto LABEL_136;
          }

          char v77 = 0;
          v78 = 0;
          v38 = 0LL;
          if (v34 <= v33) {
            v34 = *((void *)this + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              v79 = v33 + 1;
              v80 = *(_BYTE *)(v35 + v33);
              *((void *)this + 1) = v79;
              v38 |= (unint64_t)(v80 & 0x7F) << v77;
              if (v80 < 0)
              {
                v77 += 7;
                uint64_t v33 = v79;
                v62 = v78++ > 8;
                if (v62) {
                  goto LABEL_107;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v38) = 0;
              }
            }

            break;
          }

      uint64_t v4 = *((void *)this + 1);
      unsigned int v5 = *((void *)this + 2);
      uint64_t v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || v6 != 0) {
        return v6 == 0;
      }
    }

    if ((_DWORD)v26 != 2)
    {
      uint64_t v69 = *(char **)(a1 + 40);
      v68 = *(void *)(a1 + 48);
      if ((unint64_t)v69 >= v68)
      {
        v73 = (char *)*v10;
        uint64_t v74 = (v69 - (_BYTE *)*v10) >> 2;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 62) {
LABEL_143:
        }
          sub_100007008();
        uint64_t v76 = v68 - (void)v73;
        if (v76 >> 1 > v75) {
          v75 = v76 >> 1;
        }
        else {
          char v77 = v75;
        }
        if (v77)
        {
          v78 = (char *)sub_10000956C(v11, v77);
          v73 = *(char **)(a1 + 32);
          uint64_t v69 = *(char **)(a1 + 40);
        }

        else
        {
          v78 = 0LL;
        }

        v85 = &v78[4 * v74];
        *(_DWORD *)v85 = 0;
        int v70 = v85 + 4;
        while (v69 != v73)
        {
          v86 = *((_DWORD *)v69 - 1);
          v69 -= 4;
          *((_DWORD *)v85 - 1) = v86;
          v85 -= 4;
        }

        *(void *)(a1 + 32) = v85;
        *(void *)(a1 + 40) = v70;
        *(void *)(a1 + 48) = &v78[4 * v77];
        if (v73) {
          operator delete(v73);
        }
      }

      else
      {
        *(_DWORD *)uint64_t v69 = 0;
        int v70 = v69 + 4;
      }

      *(void *)(a1 + 40) = v70;
      goto LABEL_129;
    }

    if ((PB::Reader::placeMark(this, v92, v26, a4) & 1) != 0) {
      return 0LL;
    }
    v36 = *((void *)this + 1);
    uint64_t v37 = *((void *)this + 2);
    while (v36 < v37 && !*((_BYTE *)this + 24))
    {
      uint64_t v39 = *(char **)(a1 + 40);
      v38 = *(void *)(a1 + 48);
      if ((unint64_t)v39 >= v38)
      {
        uint64_t v41 = (char *)*v10;
        v42 = (v39 - (_BYTE *)*v10) >> 2;
        uint64_t v43 = v42 + 1;
        v44 = v38 - (void)v41;
        if (v44 >> 1 > v43) {
          uint64_t v43 = v44 >> 1;
        }
        else {
          uint64_t v45 = v43;
        }
        if (v45)
        {
          v46 = (char *)sub_10000956C(v11, v45);
          uint64_t v41 = *(char **)(a1 + 32);
          uint64_t v39 = *(char **)(a1 + 40);
        }

        else
        {
          v46 = 0LL;
        }

        uint64_t v47 = &v46[4 * v42];
        *(_DWORD *)uint64_t v47 = 0;
        v40 = v47 + 4;
        while (v39 != v41)
        {
          v48 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v47 - 1) = v48;
          v47 -= 4;
        }

        *(void *)(a1 + 32) = v47;
        *(void *)(a1 + 40) = v40;
        *(void *)(a1 + 48) = &v46[4 * v45];
        if (v41) {
          operator delete(v41);
        }
      }

      else
      {
        *(_DWORD *)uint64_t v39 = 0;
        v40 = v39 + 4;
      }

      *(void *)(a1 + 40) = v40;
      uint64_t v49 = *((void *)this + 1);
      if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2))
      {
LABEL_93:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_94;
      }

      *(v40 - 1) = *(_DWORD *)(*(void *)this + v49);
      uint64_t v37 = *((void *)this + 2);
      v36 = *((void *)this + 1) + 4LL;
      *((void *)this + 1) = v36;
    }

    goto LABEL_94;
  }

  return v6 == 0;
}

LABEL_138:
  *(_DWORD *)(a1 + 292) |= 0x200000u;
  v48 = *(void **)(a1 + 176);
  if (!v48)
  {
    v48 = operator new(0x38uLL);
    v48[5] = 42LL;
    void *v48 = off_10181B968;
    v48[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v48[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v48[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v48[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v48 + 12) = 0;
    *(void *)(a1 + 176) = v48;
  }

  uint64_t v49 = *(void *)(a2 + 176);
  if (!v49) {
    uint64_t v49 = *(void *)(qword_1019A0978 + 176);
  }
  sub_10007CA40((uint64_t)v48, v49);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x400000) == 0)
  {
LABEL_111:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_153;
    }
    goto LABEL_148;
  }

          v102 = *(_OWORD *)(v89 + 24);
          *v94 = *v92;
          v94[1] = v102;
          v103 = *(_OWORD *)(v89 + 40);
          v104 = *(_OWORD *)(v89 + 56);
          v105 = *(_OWORD *)(v89 + 88);
          v94[4] = *(_OWORD *)(v89 + 72);
          v94[5] = v105;
          v94[2] = v103;
          v94[3] = v104;
          v106 = v94 + 6;
          goto LABEL_158;
        }

        ++v90;
        v91 = v91 + *((float *)v89 + 23);
LABEL_159:
        v89 += 104;
      }

      v94 = a2[1];
      v101 = (unint64_t)a2[2];
      v107 = 0xAAAAAAAAAAAAAAABLL * (((char *)v94 - (_BYTE *)*a2) >> 5);
      v108 = v107 + 1;
      if (v107 + 1 > 0x2AAAAAAAAAAAAAALL) {
LABEL_193:
      }
        sub_100007008();
      v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - (void)*a2) >> 5);
      if (2 * v109 > v108) {
        v108 = 2 * v109;
      }
      if (v109 >= 0x155555555555555LL) {
        v99 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        v99 = v108;
      }
      if (v99) {
        v100 = (char *)sub_1003F6AEC((uint64_t)(a2 + 2), v99);
      }
      else {
        v100 = 0LL;
      }
      v110 = &v100[96 * v107];
      v111 = *(_OWORD *)(v89 + 24);
      *(_OWORD *)v110 = *v92;
      *((_OWORD *)v110 + 1) = v111;
      v112 = *(_OWORD *)(v89 + 40);
      v113 = *(_OWORD *)(v89 + 56);
      v114 = *(_OWORD *)(v89 + 88);
      *((_OWORD *)v110 + 4) = *(_OWORD *)(v89 + 72);
      *((_OWORD *)v110 + 5) = v114;
      *((_OWORD *)v110 + 2) = v112;
      *((_OWORD *)v110 + 3) = v113;
      v116 = (char *)*a2;
      v115 = (char *)a2[1];
      v117 = v110;
      if (v115 != *a2)
      {
        do
        {
          v118 = *((_OWORD *)v115 - 5);
          *(v117 - 6) = *((_OWORD *)v115 - 6);
          *(v117 - 5) = v118;
          v119 = *((_OWORD *)v115 - 4);
          v120 = *((_OWORD *)v115 - 3);
          v121 = *((_OWORD *)v115 - 2);
          *(_OWORD *)((char *)v117 - 23) = *(_OWORD *)(v115 - 23);
          *(v117 - 3) = v120;
          *(v117 - 2) = v121;
          *(v117 - 4) = v119;
          v117 -= 6;
          v115 -= 96;
        }

        while (v115 != v116);
LABEL_155:
        v115 = (char *)*a2;
      }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3D,  *(_DWORD *)(v5 + 304),  a2,  a4);
  v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 8) == 0)
  {
LABEL_128:
    if ((v36 & 0x10) == 0) {
      goto LABEL_129;
    }
    goto LABEL_142;
  }

  uint64_t v21 = 0LL;
LABEL_139:
  *(void *)buf = &v123;
  sub_10004CC28((void ***)buf);
  objc_autoreleasePoolPop(v7);
  return v21;
}

  uint64_t result = *(float *)(a2 + 168);
  v5 |= 0x8000000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 168) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x10000000000LL) == 0)
  {
LABEL_65:
    if ((v4 & 0x20000000000LL) == 0) {
      goto LABEL_66;
    }
    goto LABEL_140;
  }

  PB::TextFormatter::format(this, "lowSenseWithoutAudioMaxaccelnormThreshold", *(float *)(a1 + 208));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000000000LL) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000LL) == 0) {
      goto LABEL_65;
    }
    goto LABEL_140;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176), 0x3Bu);
  unsigned int v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000LL) == 0)
  {
LABEL_64:
    if ((v5 & 0x40000000000LL) == 0) {
      goto LABEL_65;
    }
    goto LABEL_140;
  }

  uint64_t result = *(float *)(a2 + 100);
  v5 |= 0x400000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 100) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_58:
    if ((v4 & 0x200000000LL) == 0) {
      goto LABEL_59;
    }
    goto LABEL_140;
  }

  PB::TextFormatter::format(this, "lowSenseWithAudioMaxAccelNormThreshold", *(float *)(a1 + 188));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000000000LL) == 0)
  {
LABEL_57:
    if ((v6 & 0x400000000000LL) == 0) {
      goto LABEL_58;
    }
    goto LABEL_140;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0xF8u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  unsigned int v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_58:
    if ((v5 & 0x200000000LL) == 0) {
      goto LABEL_59;
    }
    goto LABEL_140;
  }

  uint64_t v27 = *(_BYTE *)(a2 + 320);
  v6 |= 0x200uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 320) = v27;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x400000) == 0)
  {
LABEL_33:
    if ((v7 & 0x800000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_140;
  }

  PB::TextFormatter::format(this, "kEarlyDecision", *(_BYTE *)(a1 + 336));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_140;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 320), 0x6Du);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x400000) == 0)
  {
LABEL_33:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_140;
  }

  uint64_t v69 = *(_BYTE *)(a2 + 167);
  v3 |= 0x100000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 167) = v69;
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v5 & 0x1000) == 0)
  {
LABEL_60:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_140;
  }

  PB::TextFormatter::format(this, "maxChaos", *(float *)(a1 + 92));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  unsigned int v5 = *(void *)(a1 + 204);
  if ((v5 & 0x40000) == 0)
  {
LABEL_59:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_140;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x45Cu);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x8000000000000000LL) == 0)
  {
LABEL_60:
    if ((v4 & 0x8000000000000LL) == 0) {
      goto LABEL_61;
    }
    goto LABEL_140;
  }

          uint64_t v4 = *((void *)this + 1);
          unsigned int v5 = *((void *)this + 2);
          uint64_t v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 3u:
          *(_WORD *)(a1 + 104) |= 0x80u;
          v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2)) {
            goto LABEL_134;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v44);
          goto LABEL_136;
        case 4u:
          *(_WORD *)(a1 + 104) |= 0x40u;
          uint64_t v45 = *((void *)this + 1);
          v46 = *((void *)this + 2);
          uint64_t v47 = *(void *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5LL && v45 + 10 <= v46)
          {
            v48 = 0;
            uint64_t v49 = 0;
            v50 = 0LL;
            do
            {
              uint64_t v51 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_121;
              }
              v48 += 7;
              uint64_t v45 = v51;
              int v18 = v49++ > 8;
            }

            while (!v18);
LABEL_101:
            LODWORD(v50) = 0;
            goto LABEL_121;
          }

          uint64_t v72 = 0;
          v73 = 0;
          v50 = 0LL;
          if (v46 <= v45) {
            v46 = *((void *)this + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v74 = v45 + 1;
              v75 = *(_BYTE *)(v47 + v45);
              *((void *)this + 1) = v74;
              v50 |= (unint64_t)(v75 & 0x7F) << v72;
              if (v75 < 0)
              {
                v72 += 7;
                uint64_t v45 = v74;
                int v18 = v73++ > 8;
                if (v18) {
                  goto LABEL_101;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v50) = 0;
              }
            }

            break;
          }

LABEL_143:
  *(_DWORD *)(a1 + 292) |= 0x400000u;
  v50 = *(void **)(a1 + 184);
  if (!v50)
  {
    v50 = operator new(0x30uLL);
    v50[4] = 43LL;
    void *v50 = off_10181B9E0;
    v50[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v50[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v50[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v50 + 10) = 0;
    *(void *)(a1 + 184) = v50;
  }

  uint64_t v51 = *(void *)(a2 + 184);
  if (!v51) {
    uint64_t v51 = *(void *)(qword_1019A0978 + 184);
  }
  sub_10007D53C((uint64_t)v50, v51);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x800000) != 0)
  {
LABEL_148:
    *(_DWORD *)(a1 + 292) |= 0x800000u;
    v52 = *(void **)(a1 + 192);
    if (!v52)
    {
      v52 = operator new(0x20uLL);
      v52[2] = 44LL;
      void *v52 = off_10181BA58;
      v52[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_DWORD *)v52 + 6) = 0;
      *(void *)(a1 + 192) = v52;
    }

    uint64_t v53 = *(void *)(a2 + 192);
    if (!v53) {
      uint64_t v53 = *(void *)(qword_1019A0978 + 192);
    }
    sub_10007DDF8((uint64_t)v52, v53);
    unsigned int v5 = *(_DWORD *)(a2 + 292);
  }

    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    uint64_t v63 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = Count;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEBUG,  "WsbMetric, groupresult, discard, %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      *(_DWORD *)v115 = 67240192;
      *(_DWORD *)&v115[4] = Count;
      LODWORD(v80) = 8;
      v78 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, groupresult, discard, %{public}d",  v115,  v80);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v78);
      if (v78 != buf) {
        free(v78);
      }
    }

    v91 = _NSConcreteStackBlock;
    v92 = v15[328];
    v64 = v92;
    v93 = sub_100346154;
    v94 = &unk_1018333B8;
    v95 = Count;
    AnalyticsSendEventLazy(@"com.apple.clx.wsb.groupresult", &v91);
    v89[0] = _NSConcreteStackBlock;
    v89[1] = v64;
    v89[2] = sub_1003461E8;
    v89[3] = &unk_1018333B8;
    v90 = Count;
    AnalyticsSendEventLazy(@"com.apple.clx.wsb.groupresult", v89);
    sub_1000234D8((uint64_t *)(v4 + 496));
LABEL_149:
    v83 = 0;
    goto LABEL_150;
  }

  uint64_t v23 = sub_1004F2598();
  int v24 = sub_1004F91BC(v23);
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  uint64_t v25 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = Count;
    *(_WORD *)&buf[8] = 2050;
    *(double *)&buf[10] = Current;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "@WsbCb, count, %{public}d, currtime, %{public}.1f",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    *(_DWORD *)v115 = 67240448;
    *(_DWORD *)&v115[4] = Count;
    *(_WORD *)&v115[8] = 2050;
    *(double *)&v115[10] = Current;
    LODWORD(v80) = 18;
    char v77 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WsbCb, count, %{public}d, currtime, %{public}.1f",  v115,  v80);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v77);
    if (v77 != buf) {
      free(v77);
    }
    if ((Count & 0x80000000) == 0)
    {
LABEL_29:
    }
  }

  else if ((Count & 0x80000000) == 0)
  {
    goto LABEL_29;
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  int v26 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = Count;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "@WsbCb, out of range, %{public}d, max, %{public}d, #CloneMe",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    *(_DWORD *)v115 = 67240448;
    *(_DWORD *)&v115[4] = Count;
    *(_WORD *)&v115[8] = 1026;
    *(_DWORD *)&v115[10] = v24;
    LODWORD(v80) = 14;
    v79 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  16LL,  "@WsbCb, out of range, %{public}d, max, %{public}d, #CloneMe",  v115,  v80);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v79);
    if (v79 != buf) {
      free(v79);
    }
  }

  uint64_t v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 88);
  if (v45 >= 0x80)
  {
    v46 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v45, a2);
    char v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    v46 = 1;
  }

  uint64_t v4 = (v4 + v46 + 2);
  if ((v3 & 0x200000) == 0)
  {
LABEL_116:
    if ((v3 & 0x400000) == 0) {
      goto LABEL_117;
    }
    goto LABEL_151;
  }

    uint64_t result = 1LL;
    *a18 = 1;
    return result;
  }

  uint64_t result = *(float *)(a2 + 188);
  v5 |= 0x100000000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 188) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x200000000000LL) == 0)
  {
LABEL_70:
    if ((v4 & 0x400000000000LL) == 0) {
      goto LABEL_71;
    }
    goto LABEL_145;
  }

  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudio", *(float *)(a1 + 228));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000000000000LL) == 0)
  {
LABEL_69:
    if ((v6 & 0x100000000000000LL) == 0) {
      goto LABEL_70;
    }
    goto LABEL_145;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 196), 0x40u);
  unsigned int v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000LL) == 0)
  {
LABEL_69:
    if ((v5 & 0x2000000000000LL) == 0) {
      goto LABEL_70;
    }
    goto LABEL_145;
  }

  uint64_t result = *(float *)(a2 + 160);
  v5 |= 0x2000000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 160) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000000000LL) == 0)
  {
LABEL_63:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_64;
    }
    goto LABEL_145;
  }

  PB::TextFormatter::format(this, "lowSenseWithAudiodvThreshold1", *(float *)(a1 + 208));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000000000LL) == 0)
  {
LABEL_62:
    if ((v6 & 0x8000000000000LL) == 0) {
      goto LABEL_63;
    }
    goto LABEL_145;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160), 0xFDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  unsigned int v5 = *v4;
  if ((*v4 & 0x20000000000LL) == 0)
  {
LABEL_63:
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_64;
    }
    goto LABEL_145;
  }

  v32 = *(_BYTE *)(a2 + 338);
  v6 |= 0x8000000uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 338) = v32;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v7 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_145;
  }

  PB::TextFormatter::format(this, "lastLocalRealTriggerTimestamp", *(void *)(a1 + 24));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((*v5 & 8) == 0)
  {
LABEL_42:
    if ((v7 & 0x10) == 0) {
      goto LABEL_43;
    }
    goto LABEL_145;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 338), 0x12Du);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_145;
  }

  v75 = *(_BYTE *)(a2 + 187);
  uint64_t v76 = v4 >> 16;
  v4 |= 1uLL;
  *(void *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v76;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 187) = v75;
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x10000000000000LL) == 0)
  {
LABEL_65:
    if ((v5 & 0x100) == 0) {
      goto LABEL_66;
    }
    goto LABEL_145;
  }

  PB::TextFormatter::format(this, "maxEnergy0", *(float *)(a1 + 112));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  unsigned int v5 = *(void *)(a1 + 204);
  if ((v5 & 0x800000) == 0)
  {
LABEL_64:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_145;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 182), 0x461u);
  unsigned int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 8) == 0)
  {
LABEL_65:
    if ((v4 & 8) == 0) {
      goto LABEL_66;
    }
    goto LABEL_145;
  }

LABEL_153:
  if (!HIBYTE(v5)) {
    goto LABEL_203;
  }
  if ((v5 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 292) |= 0x1000000u;
    v54 = *(void **)(a1 + 200);
    if (!v54)
    {
      v54 = operator new(0x30uLL);
      void *v54 = off_10181BAD0;
      v54[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v54[2] = 45LL;
      v54[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      v54[4] = 0LL;
      v54[5] = 0LL;
      *(void *)(a1 + 200) = v54;
    }

    uint64_t v55 = *(void *)(a2 + 200);
    if (!v55) {
      uint64_t v55 = *(void *)(qword_1019A0978 + 200);
    }
    sub_10007E3D0((uint64_t)v54, v55);
    unsigned int v5 = *(_DWORD *)(a2 + 292);
    if ((v5 & 0x2000000) == 0)
    {
LABEL_156:
      if ((v5 & 0x4000000) == 0) {
        goto LABEL_157;
      }
      goto LABEL_173;
    }
  }

  else if ((v5 & 0x2000000) == 0)
  {
    goto LABEL_156;
  }

  *(_DWORD *)(a1 + 292) |= 0x2000000u;
  v56 = *(void **)(a1 + 208);
  if (!v56)
  {
    v56 = operator new(0x20uLL);
    v56[2] = 46LL;
    void *v56 = off_10181BB48;
    v56[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v56 + 6) = 0;
    *(void *)(a1 + 208) = v56;
  }

  uint64_t v57 = *(void *)(a2 + 208);
  if (!v57) {
    uint64_t v57 = *(void *)(qword_1019A0978 + 208);
  }
  sub_10007EDFC((uint64_t)v56, v57);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_157:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_158;
    }
    goto LABEL_178;
  }

  v85 = *(void *)(a1 + 168);
  if (!v85) {
    v85 = *(void *)(qword_1019A0978 + 168);
  }
  v86 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007C870(v85, a2);
  v87 = (int)v86;
  else {
    v88 = 1;
  }
  uint64_t v4 = (v4 + v87 + v88 + 2);
  char v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x200000) == 0)
  {
LABEL_126:
    if ((v3 & 0x400000) == 0) {
      goto LABEL_127;
    }
    goto LABEL_165;
  }
}

    ++v22;
    v21 += 24LL;
  }

  while (v12 + v21 != v104);
  v101 = HIBYTE(v119);
  v102 = v23 != 0;
  sub_100036DAC((uint64_t)v114);
  if (v101) {
    goto LABEL_156;
  }
LABEL_159:
  if (HIBYTE(v122))
  {
    if ((_BYTE)v122) {
      pthread_mutex_unlock(v121);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v120 + 24LL))(v120);
    }
  }

  return v102;
}

  v85 = *(void *)(a1 + 168);
  if (!v85) {
    v85 = *(void *)(qword_1019A11B8 + 168);
  }
  v86 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001EA2C4(v85, a2);
  v87 = (int)v86;
  else {
    v88 = 1;
  }
  uint64_t v4 = (v4 + v87 + v88 + 2);
  char v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x200000) == 0)
  {
LABEL_126:
    if ((v3 & 0x400000) == 0) {
      goto LABEL_127;
    }
    goto LABEL_165;
  }

            free(v127);
            goto LABEL_118;
          }
        }
      }

      else
      {
        v194 = 0LL;
        v195 = 0LL;
      }

      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101889870);
      }
      v89 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        v90 = *(_DWORD *)(a1 + 652);
        v91 = *(_DWORD *)(v17 + 128);
        v92 = *(void *)(a1 + 40);
        LODWORD(buf) = 67240960;
        DWORD1(buf) = v90;
        WORD4(buf) = 1026;
        *(_DWORD *)((char *)&buf + 10) = v91;
        HIWORD(buf) = 1026;
        *(_DWORD *)v226 = v2;
        *(_WORD *)&v226[4] = 2050;
        *(void *)&v226[6] = v92;
        _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEBUG,  "FusedLoc,hID,%{public}d,DataFusion with no valid previous raw location,type,%{public}d,index,%{public}d,buffer Size,%{public}zu",  (uint8_t *)&buf,  0x1Eu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_118;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101889870);
      }
      v123 = *(_DWORD *)(a1 + 652);
      v124 = *(_DWORD *)(v17 + 128);
      v125 = *(void *)(a1 + 40);
      LODWORD(v205) = 67240960;
      HIDWORD(v205) = v123;
      *(_WORD *)v206 = 1026;
      *(_DWORD *)&v206[2] = v124;
      *(_WORD *)&v206[6] = 1026;
      *(_DWORD *)&v206[8] = v2;
      *(_WORD *)&v206[12] = 2050;
      *(void *)&v206[14] = v125;
      LODWORD(v184) = 30;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "FusedLoc,hID,%{public}d,DataFusion with no valid previous raw location,type,%{public}d,index,%{public}d,bufferSize,%{public}zu",  &v205,  v184);
      v127 = (__int128 *)v126;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()",  "%s\n",  v126);
      if (v127 == &buf) {
        goto LABEL_118;
      }
      goto LABEL_153;
    }
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_101889870);
  }
  v152 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
  {
    v153 = *(_DWORD *)(a1 + 652);
    v154 = *(_DWORD *)(a1 + 648);
    v155 = *(void *)(a1 + 40);
    LODWORD(buf) = 67240704;
    DWORD1(buf) = v153;
    WORD4(buf) = 1026;
    *(_DWORD *)((char *)&buf + 10) = v154;
    HIWORD(buf) = 2050;
    *(void *)v226 = v155;
    _os_log_impl( (void *)&_mh_execute_header,  v152,  OS_LOG_TYPE_DEBUG,  "FusedLoc,hID,%{public}d,DataFusion called with invalid start fusion,index,%{public}d,bufferSize,%{public}zu",  (uint8_t *)&buf,  0x18u);
  }

  uint64_t result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101889870);
    }
    v157 = *(_DWORD *)(a1 + 652);
    v158 = *(_DWORD *)(a1 + 648);
    v159 = *(void *)(a1 + 40);
    LODWORD(v215) = 67240704;
    HIDWORD(v215) = v157;
    LOWORD(v216) = 1026;
    *(_DWORD *)((char *)&v216 + 2) = v158;
    WORD3(v216) = 2050;
    *((void *)&v216 + 1) = v159;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "FusedLoc,hID,%{public}d,DataFusion called with invalid start fusion,index,%{public}d,bufferSize,%{public}zu",  &v215,  24);
    v161 = (__int128 *)v160;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::LCFusionLocationHypothesis::performLocationDataFusion()",  "%s\n",  v160);
    goto LABEL_178;
  }

  return result;
}

              *(void *)(a1 + 8) = v24;
              goto LABEL_169;
            case 2u:
              *(_DWORD *)(a1 + 100) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              unsigned int v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v63 = 0;
                v64 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_158;
                  }

                  uint64_t v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  int v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0LL;
LABEL_157:
                    uint64_t v2 = v65 + 1;
                    goto LABEL_158;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v31 = 0LL;
                }
                goto LABEL_157;
              }

              uint64_t v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_158;
                }
                v29 += 7;
                uint64_t v27 = v2;
                int v14 = v30++ > 8;
              }

              while (!v14);
              uint64_t v31 = 0LL;
LABEL_158:
              *(void *)(a1 + 24) = v31;
              goto LABEL_169;
            case 3u:
              *(_DWORD *)(a1 + 100) |= 2u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                uint64_t v67 = 0;
                v68 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_163;
                  }

                  uint64_t v69 = v33++;
                  int v70 = *(_BYTE *)(v34 + v69);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  int v14 = v68++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0LL;
LABEL_162:
                    uint64_t v2 = v69 + 1;
                    goto LABEL_163;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v37 = 0LL;
                }
                goto LABEL_162;
              }

              uint64_t v35 = 0;
              v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_163;
                }
                v35 += 7;
                uint64_t v33 = v2;
                int v14 = v36++ > 8;
              }

              while (!v14);
              uint64_t v37 = 0LL;
LABEL_163:
              *(void *)(a1 + 16) = v37;
              goto LABEL_169;
            case 4u:
              *(_DWORD *)(a1 + 100) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 5u:
              *(_DWORD *)(a1 + 100) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 6u:
              *(_DWORD *)(a1 + 100) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 7u:
              *(_DWORD *)(a1 + 100) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 8u:
              *(_DWORD *)(a1 + 100) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 9u:
              *(_DWORD *)(a1 + 100) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xAu:
              *(_DWORD *)(a1 + 100) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xBu:
              *(_DWORD *)(a1 + 100) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xCu:
              *(_DWORD *)(a1 + 100) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xDu:
              *(_DWORD *)(a1 + 100) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xEu:
              *(_DWORD *)(a1 + 100) |= 0x800000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v40 = v39 != 0;
              }

              *(_BYTE *)(a1 + 98) = v40;
              goto LABEL_169;
            case 0xFu:
              *(_DWORD *)(a1 + 100) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0x10u:
              *(_DWORD *)(a1 + 100) |= 0x400000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v41 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v42 = v41 != 0;
              }

              *(_BYTE *)(a1 + 97) = v42;
              goto LABEL_169;
            case 0x11u:
              *(_DWORD *)(a1 + 100) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v43 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v44 = v43 != 0;
              }

              *(_BYTE *)(a1 + 94) = v44;
              goto LABEL_169;
            case 0x12u:
              *(_DWORD *)(a1 + 100) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v46 = v45 != 0;
              }

              *(_BYTE *)(a1 + 93) = v46;
              goto LABEL_169;
            case 0x13u:
              *(_DWORD *)(a1 + 100) |= 0x100000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v48 = v47 != 0;
              }

              *(_BYTE *)(a1 + 95) = v48;
              goto LABEL_169;
            case 0x14u:
              *(_DWORD *)(a1 + 100) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0x15u:
              *(_DWORD *)(a1 + 100) |= 0x200000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v49 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v50 = v49 != 0;
              }

              *(_BYTE *)(a1 + 96) = v50;
              goto LABEL_169;
            case 0x16u:
              *(_DWORD *)(a1 + 100) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v51 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                v52 = v51 != 0;
              }

              *(_BYTE *)(a1 + 92) = v52;
              goto LABEL_169;
            case 0x17u:
              *(_DWORD *)(a1 + 100) |= 8u;
              uint64_t v53 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5LL || v53 + 10 > v2)
              {
                v71 = 0;
                uint64_t v72 = 0;
                uint64_t v57 = 0LL;
                if (v2 <= v53) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_168;
                  }

                  v73 = v53++;
                  uint64_t v74 = *(_BYTE *)(v54 + v73);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  int v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0LL;
LABEL_167:
                    uint64_t v2 = v73 + 1;
                    goto LABEL_168;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v57 = 0LL;
                }
                goto LABEL_167;
              }

              uint64_t v55 = 0;
              v56 = 0;
              uint64_t v57 = 0LL;
              do
              {
                uint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_168;
                }
                v55 += 7;
                uint64_t v53 = v2;
                int v14 = v56++ > 8;
              }

              while (!v14);
              uint64_t v57 = 0LL;
LABEL_168:
              *(void *)(a1 + 32) = v57;
LABEL_169:
              char v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x18u:
              *(_DWORD *)(a1 + 100) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
LABEL_148:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_104:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_169;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_169;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

            PB::Reader::recallMark(this, v151);
          }

          else
          {
            v111 = *(char **)(a1 + 16);
            v110 = *(void *)(a1 + 24);
            if ((unint64_t)v111 >= v110)
            {
              v130 = (char *)*v10;
              v131 = (v111 - (_BYTE *)*v10) >> 3;
              v132 = v131 + 1;
              if ((unint64_t)(v131 + 1) >> 61) {
LABEL_251:
              }
                sub_100007008();
              v133 = v110 - (void)v130;
              if (v133 >> 2 > v132) {
                v132 = v133 >> 2;
              }
              else {
                v134 = v132;
              }
              if (v134)
              {
                v135 = (char *)sub_1000071BC(v150, v134);
                v130 = *(char **)(a1 + 8);
                v111 = *(char **)(a1 + 16);
              }

              else
              {
                v135 = 0LL;
              }

              v142 = &v135[8 * v131];
              *(void *)v142 = 0LL;
              v105 = v142 + 8;
              while (v111 != v130)
              {
                v143 = *((void *)v111 - 1);
                v111 -= 8;
                *((void *)v142 - 1) = v143;
                v142 -= 8;
              }

              *(void *)(a1 + 8) = v142;
              *(void *)(a1 + 16) = v105;
              *(void *)(a1 + 24) = &v135[8 * v134];
              if (v130) {
                operator delete(v130);
              }
            }

            else
            {
              *(void *)v111 = 0LL;
              v105 = v111 + 8;
            }

            *(void *)(a1 + 16) = v105;
LABEL_233:
            v144 = *((void *)this + 1);
            if (v144 <= 0xFFFFFFFFFFFFFFF7LL && v144 + 8 <= *((void *)this + 2))
            {
              *(v105 - 1) = *(void *)(*(void *)this + v144);
LABEL_237:
              *((void *)this + 1) += 8LL;
            }

            else
            {
LABEL_235:
              *((_BYTE *)this + 24) = 1;
            }
          }

  uint64_t result = *(float *)(a2 + 264);
  v5 |= 0x8000000000000000LL;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 264) = result;
  if ((*v3 & 0x2000000000000000LL) != 0) {
    goto LABEL_154;
  }
  return result;
}

  PB::TextFormatter::format(this, "shortAudioPeakPressureThreshold", *(float *)(a1 + 264));
  uint64_t v6 = *v5;
  if ((*(_WORD *)(a1 + 288) & 0x800) != 0) {
    goto LABEL_154;
  }
LABEL_79:
  if ((v6 & 1) != 0) {
LABEL_80:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = *(float *)(a2 + 184);
  v5 |= 0x80000000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 184) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000000000000LL) == 0)
  {
LABEL_73:
    if ((v4 & 0x800000000000LL) == 0) {
      goto LABEL_74;
    }
    goto LABEL_155;
  }

  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 248));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000000000000LL) == 0)
  {
LABEL_72:
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_73;
    }
    goto LABEL_155;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 184), 0x107u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  unsigned int v5 = *v4;
  if ((*v4 & 0x1000000000000LL) == 0)
  {
LABEL_73:
    if ((v5 & 0x800000000000LL) == 0) {
      goto LABEL_74;
    }
    goto LABEL_155;
  }

  v42 = *(_BYTE *)(a2 + 350);
  v6 |= 0x8000000000uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 350) = v42;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x800000000LL) == 0)
  {
LABEL_48:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_155;
  }

  PB::TextFormatter::format(this, "movingCountThresholdFromSydneyB", *(_DWORD *)(a1 + 140));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_52:
    if ((v7 & 0x8000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_155;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 350), 0x137u);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x800000000LL) == 0)
  {
LABEL_48:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_155;
  }

  v88 = *(_BYTE *)(a2 + 156);
  v3 |= 0x200000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 156) = v88;
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v5 & 0x2000) == 0)
  {
LABEL_75:
    if ((v2 & 0x2000000000LL) == 0) {
      goto LABEL_76;
    }
    goto LABEL_155;
  }

  PB::TextFormatter::format(this, "maxSaturation2", *(float *)(a1 + 152));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  unsigned int v5 = *(void *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x200) == 0)
  {
LABEL_74:
    if ((v6 & 0x400) == 0) {
      goto LABEL_75;
    }
    goto LABEL_155;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 163), 0x4BBu);
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(v3 + 212);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x100000000000LL) == 0)
  {
LABEL_75:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_155;
  }

            PB::Reader::recallMark(this, v125);
          }

          else
          {
            v97 = *(char **)(a1 + 40);
            v96 = *(void *)(a1 + 48);
            if ((unint64_t)v97 >= v96)
            {
              v112 = (char *)*v10;
              v113 = (v97 - (_BYTE *)*v10) >> 2;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 62) {
LABEL_209:
              }
                sub_100007008();
              v115 = v96 - (void)v112;
              if (v115 >> 1 > v114) {
                v114 = v115 >> 1;
              }
              else {
                v116 = v114;
              }
              if (v116)
              {
                v117 = (char *)sub_10000956C(v11, v116);
                v112 = *(char **)(a1 + 32);
                v97 = *(char **)(a1 + 40);
              }

              else
              {
                v117 = 0LL;
              }

              v120 = &v117[4 * v113];
              *(_DWORD *)v120 = 0;
              v95 = v120 + 4;
              while (v97 != v112)
              {
                v121 = *((_DWORD *)v97 - 1);
                v97 -= 4;
                *((_DWORD *)v120 - 1) = v121;
                v120 -= 4;
              }

              *(void *)(a1 + 32) = v120;
              *(void *)(a1 + 40) = v95;
              *(void *)(a1 + 48) = &v117[4 * v116];
              if (v112) {
                operator delete(v112);
              }
            }

            else
            {
              *(_DWORD *)v97 = 0;
              v95 = v97 + 4;
            }

            *(void *)(a1 + 40) = v95;
LABEL_192:
            v122 = *((void *)this + 1);
            if (v122 <= 0xFFFFFFFFFFFFFFFBLL && v122 + 4 <= *((void *)this + 2))
            {
              *(v95 - 1) = *(_DWORD *)(*(void *)this + v122);
LABEL_196:
              unsigned int v28 = *((void *)this + 1) + 4LL;
LABEL_197:
              *((void *)this + 1) = v28;
            }

            else
            {
LABEL_194:
              *((_BYTE *)this + 24) = 1;
            }
          }

          *(_DWORD *)(a1 + 88) = v79;
          goto LABEL_180;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_180;
      }
    }

    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v17 = 0LL;
    if (v4 > v5) {
      unsigned int v5 = v4;
    }
    while (v5 != v4)
    {
      uint64_t v23 = v4 + 1;
      int v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        uint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    uint64_t v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

LABEL_173:
  *(_DWORD *)(a1 + 292) |= 0x4000000u;
  v58 = *(void **)(a1 + 216);
  if (!v58)
  {
    v58 = operator new(0x38uLL);
    void *v58 = off_10181BBC0;
    v58[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v58[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v58[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v58[3] = 0x10000002FLL;
    *((_BYTE *)v58 + 40) = 0;
    *((_DWORD *)v58 + 11) = 0;
    *((_DWORD *)v58 + 12) = 0;
    *(void *)(a1 + 216) = v58;
  }

  uint64_t v59 = *(void *)(a2 + 216);
  if (!v59) {
    uint64_t v59 = *(void *)(qword_1019A0978 + 216);
  }
  sub_10007F3C8((uint64_t)v58, v59);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_158:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_159;
    }
    goto LABEL_183;
  }

  uint64_t v72 = 0LL;
  *(_BYTE *)a6 = 1;
LABEL_174:
  if (__p)
  {
    v83 = (double ****)__p;
    operator delete(__p);
  }

  if (v85)
  {
    v86 = (double ****)v85;
    operator delete(v85);
  }

  if (v88)
  {
    v89 = (double ****)v88;
    operator delete(v88);
  }

  if (v91)
  {
    v92 = (uint64_t *)v91;
    operator delete(v91);
  }

  if (v94)
  {
    v95 = (double ****)v94;
    operator delete(v94);
  }

  if (v97)
  {
    v98 = (double ****)v97;
    operator delete(v97);
  }

  return v72;
}

  v73 = 0LL;
  *(_BYTE *)a6 = 1;
LABEL_174:
  if (__p)
  {
    v84 = (double ****)__p;
    operator delete(__p);
  }

  if (v86)
  {
    v87 = (double ****)v86;
    operator delete(v86);
  }

  if (v89)
  {
    v90 = (double ****)v89;
    operator delete(v89);
  }

  if (v92)
  {
    v93 = (uint64_t *)v92;
    operator delete(v92);
  }

  if (v95)
  {
    v96 = (double ****)v95;
    operator delete(v95);
  }

  if (v98)
  {
    v99 = (double ****)v98;
    operator delete(v98);
  }

  return v73;
}

              uint64_t v61 = *(_OWORD *)a2;
              v62 = *(_OWORD *)(a2 + 16);
              uint64_t v63 = *(_OWORD *)(a2 + 48);
              *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 32);
              *(_OWORD *)(a1 + 168) = v63;
              *uint64_t v25 = v61;
              *(_OWORD *)(a1 + 136) = v62;
              v64 = *(_OWORD *)(a2 + 64);
              uint64_t v65 = *(_OWORD *)(a2 + 80);
              v66 = *(_OWORD *)(a2 + 112);
              *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 96);
              *(_OWORD *)(a1 + 232) = v66;
              *(_OWORD *)(a1 + 184) = v64;
              *(_OWORD *)(a1 + 200) = v65;
              std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 128));
              memcpy((void *)(a1 + 272), (const void *)(a2 + 152), 0x118uLL);
              *(_BYTE *)(a1 + 384) = v34;
              return *(_BYTE *)(a1 + 652) != 0;
            }

            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_101881720);
            }
            v92 = *(void *)(a2 + 256);
            *(_DWORD *)v104 = 134349312;
            *(void *)&v104[4] = v92;
            *(_WORD *)&v104[12] = 2050;
            *(double *)&v104[14] = v56;
            LODWORD(v94) = 22;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,stopSnapping,isAmbiguous,1,acrossTrack,%{public}.1lf,acrossTrackThreshold,%{public}.1lf",  v104,  v94);
          }

          else
          {
            if (!*(_BYTE *)(a1 + 96)) {
              goto LABEL_155;
            }
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_101881720);
            }
            uint64_t v53 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
            {
              v54 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)&buf[4] = v54;
              *(_WORD *)&buf[8] = 2050;
              *(void *)&buf[10] = 0x4032000000000000LL;
              _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEBUG,  "CLMM,stopSnapping,offRoadCount,%{public}d,threshold,%{public}.0f",  buf,  0x12u);
            }

            if (!sub_1002921D0(115, 2)) {
              goto LABEL_155;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_101881720);
            }
            uint64_t v55 = *(_DWORD *)(a1 + 648);
            *(_DWORD *)v104 = 67240448;
            *(_DWORD *)&v104[4] = v55;
            *(_WORD *)&v104[8] = 2050;
            *(void *)&v104[10] = 0x4032000000000000LL;
            LODWORD(v94) = 18;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,stopSnapping,offRoadCount,%{public}d,threshold,%{public}.0f",  v104,  v94);
          }
        }

        else
        {
          if (!*(_BYTE *)(a1 + 96)) {
            goto LABEL_155;
          }
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101881720);
          }
          v48 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v49 = *(void *)(a2 + 232);
            *(_DWORD *)buf = 134349312;
            *(void *)&buf[4] = v49;
            *(_WORD *)&buf[12] = 2050;
            *(void *)&buf[14] = 0x4051800000000000LL;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEBUG,  "CLMM,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf",  buf,  0x16u);
          }

          if (!sub_1002921D0(115, 2)) {
            goto LABEL_155;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101881720);
          }
          v50 = *(void *)(a2 + 232);
          *(_DWORD *)v104 = 134349312;
          *(void *)&v104[4] = v50;
          *(_WORD *)&v104[12] = 2050;
          *(void *)&v104[14] = 0x4051800000000000LL;
          LODWORD(v94) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf",  v104,  v94);
        }

        v93 = (char *)v51;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)",  "%s\n",  v51);
        if (v93 != buf) {
          free(v93);
        }
        goto LABEL_155;
      }
    }

    *(void *)v104 = 0x4079000000000000LL;
    v97 = 0x4034000000000000LL;
    if (*(_BYTE *)(a2 + 348))
    {
      if (v20 > 7.5) {
        goto LABEL_158;
      }
      v52 = 0x401E000000000000LL;
    }

    else if (*(_BYTE *)(a1 + 600) || v21 >= 30.0)
    {
      *(void *)v104 = 0x4093240000000000LL;
      v52 = 0x4041800000000000LL;
    }

    else
    {
      if (v20 > 7.5) {
        goto LABEL_158;
      }
      v52 = 0x402B000000000000LL;
    }

    v97 = v52;
LABEL_158:
    uint64_t v59 = sub_100D53194( a1,  a2,  &v98,  (double *)v104,  (double *)&v97,  (_BYTE *)&v100 + 1,  &v100,  &v99,  &v102,  &v101,  &v103);
    *(_BYTE *)(a1 + 652) = v59;
    if (v59)
    {
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_101881720);
        }
        v60 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLMM,startSnapping", buf, 2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101881720);
          }
          v96 = 0;
          LODWORD(v95) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,startSnapping",  &v96,  v95);
          v88 = (char *)v87;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)",  "%s\n",  v87);
          if (v88 != buf) {
            free(v88);
          }
        }
      }

      *(_DWORD *)(a1 + 648) = 0;
    }

    goto LABEL_166;
  }

  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101881720);
    }
    uint64_t v35 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      v36 = *(unsigned __int8 *)(a2 + 228);
      *(_DWORD *)buf = 134349824;
      *(double *)&buf[4] = v28;
      *(_WORD *)&buf[12] = 2050;
      *(void *)&buf[14] = 0x401399999999999ALL;
      v110 = 2050;
      v111 = 0x4052C00000000000LL;
      v112 = 1026;
      v113 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "CLMM,stopSnapping,timeout,dT,%{public}.1lf,threshold1,%{public}.1lf,threshold2,%{public}.1lf,static,%{public}d",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101881720);
      }
      uint64_t v76 = *(unsigned __int8 *)(a2 + 228);
      *(_DWORD *)v104 = 134349824;
      *(double *)&v104[4] = v28;
      *(_WORD *)&v104[12] = 2050;
      *(void *)&v104[14] = 0x401399999999999ALL;
      v105 = 2050;
      v106 = 0x4052C00000000000LL;
      v107 = 1026;
      v108 = v76;
      LODWORD(v94) = 38;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,stopSnapping,timeout,dT,%{public}.1lf,threshold1,%{public}.1lf,threshold2,%{public}.1lf,static,%{public}d",  v104,  v94);
      v78 = (char *)v77;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)",  "%s\n",  v77);
      if (v78 != buf) {
        free(v78);
      }
    }
  }

  *(_BYTE *)(a1 + 652) = 0;
  uint64_t v37 = *(_OWORD *)a2;
  v38 = *(_OWORD *)(a2 + 16);
  uint64_t v39 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 168) = v39;
  *uint64_t v25 = v37;
  *(_OWORD *)(a1 + 136) = v38;
  v40 = *(_OWORD *)(a2 + 64);
  uint64_t v41 = *(_OWORD *)(a2 + 80);
  v42 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 232) = v42;
  *(_OWORD *)(a1 + 184) = v40;
  *(_OWORD *)(a1 + 200) = v41;
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 128));
  memcpy((void *)(a1 + 272), (const void *)(a2 + 152), 0x118uLL);
  *(_BYTE *)(a1 + 384) = 0;
  return *(_BYTE *)(a1 + 652) != 0;
}

  v62 = *(_DWORD *)(a2 + 184);
  v5 |= 0x1000000000uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 184) = v62;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x4000000000000000LL) == 0)
  {
LABEL_68:
    if ((v4 & 0x8000000000000000LL) == 0) {
      goto LABEL_69;
    }
    goto LABEL_175;
  }

  PB::TextFormatter::format(this, "quiescenceCumulativeRotationHarmonicMeanThreshold", *(float *)(a1 + 220));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x400000000000LL) == 0)
  {
LABEL_72:
    if ((v7 & 0x800000000000LL) == 0) {
      goto LABEL_73;
    }
    goto LABEL_175;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 184), 0x199u);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x4000000000000000LL) == 0)
  {
LABEL_68:
    if ((v5 & 0x8000000000000000LL) == 0) {
      goto LABEL_69;
    }
    goto LABEL_175;
  }

            PB::Reader::recallMark(this, v184);
          }

          else
          {
            v125 = *(char **)(a1 + 136);
            v124 = *(void *)(a1 + 144);
            if ((unint64_t)v125 >= v124)
            {
              v156 = (char *)*v183;
              v157 = (v125 - (_BYTE *)*v183) >> 2;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62) {
LABEL_294:
              }
                sub_100007008();
              v159 = v124 - (void)v156;
              if (v159 >> 1 > v158) {
                v158 = v159 >> 1;
              }
              else {
                v160 = v158;
              }
              if (v160)
              {
                v161 = (char *)sub_10000956C(v181, v160);
                v156 = *(char **)(a1 + 128);
                v125 = *(char **)(a1 + 136);
              }

              else
              {
                v161 = 0LL;
              }

              v172 = &v161[4 * v157];
              *(_DWORD *)v172 = 0;
              v115 = v172 + 4;
              while (v125 != v156)
              {
                v173 = *((_DWORD *)v125 - 1);
                v125 -= 4;
                *((_DWORD *)v172 - 1) = v173;
                v172 -= 4;
              }

              *(void *)(a1 + 128) = v172;
              *(void *)(a1 + 136) = v115;
              *(void *)(a1 + 144) = &v161[4 * v160];
              if (v156) {
                operator delete(v156);
              }
            }

            else
            {
              *(_DWORD *)v125 = 0;
              v115 = v125 + 4;
            }

            *(void *)(a1 + 136) = v115;
LABEL_276:
            v174 = *((void *)this + 1);
            if (v174 <= 0xFFFFFFFFFFFFFFFBLL && v174 + 4 <= *((void *)this + 2))
            {
              *(v115 - 1) = *(_DWORD *)(*(void *)this + v174);
              unsigned int v28 = *((void *)this + 1) + 4LL;
LABEL_280:
              *((void *)this + 1) = v28;
            }

            else
            {
LABEL_278:
              *((_BYTE *)this + 24) = 1;
            }
          }

LABEL_178:
  *(_DWORD *)(a1 + 292) |= 0x8000000u;
  v60 = *(_DWORD **)(a1 + 224);
  if (!v60)
  {
    v60 = operator new(0x58uLL);
    v60[6] = 48;
    *(void *)v60 = off_10181BDA0;
    *((void *)v60 + 1) = 0LL;
    *((_WORD *)v60 + 14) = 0;
    *((void *)v60 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v60 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v60 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v60 + 6) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((void *)v60 + 7) = 0LL;
    *((void *)v60 + 9) = 0LL;
    *((void *)v60 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v60[20] = 0;
    *(void *)(a1 + 224) = v60;
  }

  uint64_t v61 = *(void *)(a2 + 224);
  if (!v61) {
    uint64_t v61 = *(void *)(qword_1019A0978 + 224);
  }
  sub_100085604((uint64_t)v60, v61);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_159:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_160;
    }
    goto LABEL_188;
  }

  v64 = *(_DWORD *)(a2 + 284);
  v5 |= 0x2000000000000000uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 284) = v64;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((v7 & 0x100) == 0)
  {
LABEL_73:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_180;
  }

  PB::TextFormatter::format(this, "secondDeescalationHoldDuration", *(float *)(a1 + 240));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_180;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 284), 0x1F9u);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x100) == 0)
  {
LABEL_73:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_180;
  }

LABEL_183:
  *(_DWORD *)(a1 + 292) |= 0x10000000u;
  v62 = *(char **)(a1 + 232);
  if (!v62)
  {
    v62 = (char *)operator new(0x18uLL);
    *(void *)v62 = off_10181BE18;
    *(_OWORD *)(v62 + 8) = xmmword_1012CA3E0;
    *(void *)(a1 + 232) = v62;
  }

  uint64_t v63 = *(void *)(a2 + 232);
  if (!v63) {
    uint64_t v63 = *(void *)(qword_1019A0978 + 232);
  }
  sub_100085938(v62, v63);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_160:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_161;
    }
    goto LABEL_193;
  }

  v48 = *(void *)(v5 + 328);
  if (!v48) {
    v48 = *(void *)(qword_1019A11B8 + 328);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F4,  v48,  a2,  a4);
  uint64_t v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x200) == 0)
  {
LABEL_140:
    if ((v39 & 0x400) == 0) {
      goto LABEL_141;
    }
    goto LABEL_189;
  }

  uint64_t v59 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 116);
  if ((v59 & 0x80000000) != 0)
  {
    v60 = 12;
  }

  else if (v59 >= 0x80)
  {
    v60 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v59, a2) + 2;
    char v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    v60 = 3;
  }

  uint64_t v4 = (v60 + v4);
  if ((v3 & 0x10000000) == 0)
  {
LABEL_167:
    if ((v3 & 0x20000000) == 0) {
      goto LABEL_168;
    }
    goto LABEL_193;
  }

    if (v87) {
      return 1LL;
    }
    return !*(_BYTE *)(a1 + 333) && *(_BYTE *)(a1 + 184) && *((float *)&v151 + 1) > (float)((float)(v13 + 1.0) * 0.1875);
  }

  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10184F718);
  }
  int v14 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Coasting vector not set.", buf, 2u);
  }

  uint64_t result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10184F718);
    }
    LOWORD(v152) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  17LL,  "Coasting vector not set.",  &v152,  2);
    uint64_t v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
    return 0LL;
  }

  return result;
}

            if (!v39)
            {
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_10185A798);
              }
              v104 = (os_log_s *)qword_101934878;
              if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
              {
                else {
                  v105 = *(void *)(a4 + 8);
                }
                v106 = &v202;
                sub_1000392EC((uint64_t)&v202, v105 + 1);
                if ((v202.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  v106 = (std::stringbuf::string_type *)v202.__r_.__value_.__r.__words[0];
                }
                if (v105)
                {
                  else {
                    v107 = *(const void **)a4;
                  }
                  memmove(v106, v107, v105);
                }

                *(_WORD *)((char *)&v106->__r_.__value_.__l.__data_ + v105) = 47;
                v108 = *(char *)(a4 + 47);
                if (v108 >= 0) {
                  v109 = (const std::string::value_type *)(a4 + 24);
                }
                else {
                  v109 = *(const std::string::value_type **)(a4 + 24);
                }
                if (v108 >= 0) {
                  v110 = *(unsigned __int8 *)(a4 + 47);
                }
                else {
                  v110 = *(void *)(a4 + 32);
                }
                v111 = std::string::append(&v202, v109, v110);
                v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
                buf.__r_.__value_.__l.__cap_ = v111->__r_.__value_.__l.__cap_;
                *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v112;
                v111->__r_.__value_.__l.__size_ = 0LL;
                v111->__r_.__value_.__l.__cap_ = 0LL;
                v111->__r_.__value_.__r.__words[0] = 0LL;
                v113 = &buf;
                if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  v113 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
                }
                LODWORD(v202.__r_.__value_.__l.__data_) = 134283779;
                *(double *)((char *)v202.__r_.__value_.__r.__words + 4) = a2;
                WORD2(v202.__r_.__value_.__r.__words[1]) = 2081;
                *(std::string::size_type *)((char *)&v202.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v113;
                _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEBUG,  "Fence status changed to Inside, distToCenter, %{private}.1lf, %{private}s",  (uint8_t *)&v202,  0x16u);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(&v202, 0x65CuLL);
                if (qword_101934870 != -1) {
                  dispatch_once(&qword_101934870, &stru_10185A798);
                }
                v140 = qword_101934878;
                sub_10065EF44((const void **)a4, &buf);
                if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  v141 = &buf;
                }
                else {
                  v141 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
                }
                LODWORD(v201.__r_.__value_.__l.__data_) = 134283779;
                *(double *)((char *)v201.__r_.__value_.__r.__words + 4) = a2;
                WORD2(v201.__r_.__value_.__r.__words[1]) = 2081;
                *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v141;
                LODWORD(v160) = 22;
                _os_log_send_and_compose_impl( 2LL,  0LL,  &v202,  1628LL,  &_mh_execute_header,  v140,  2LL,  "Fence status changed to Inside, distToCenter, %{private}.1lf, %{private}s",  &v201,  v160);
                v143 = v142;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocatio nPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, co nst double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)",  "%s\n",  (const char *)v143);
                if (v143 != &v202) {
                  free(v143);
                }
              }

              int v14 = 0;
              goto LABEL_31;
            }

            goto LABEL_211;
          }

          uint64_t v49 = 1;
        }

        v164 = v49;
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_10185A798);
        }
        v50 = qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
        {
          log = (os_log_s *)v50;
          else {
            uint64_t v51 = *(void *)(a4 + 8);
          }
          v52 = &buf;
          sub_1000392EC((uint64_t)&buf, v51 + 1);
          if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            v52 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
          }
          if (v51)
          {
            else {
              uint64_t v53 = *(const void **)a4;
            }
            memmove(v52, v53, v51);
          }

          *(_WORD *)((char *)&v52->__r_.__value_.__l.__data_ + v51) = 47;
          v54 = *(char *)(a4 + 47);
          if (v54 >= 0) {
            uint64_t v55 = (const std::string::value_type *)(a4 + 24);
          }
          else {
            uint64_t v55 = *(const std::string::value_type **)(a4 + 24);
          }
          if (v54 >= 0) {
            v56 = *(unsigned __int8 *)(a4 + 47);
          }
          else {
            v56 = *(void *)(a4 + 32);
          }
          uint64_t v57 = std::string::append(&buf, v55, v56);
          v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v201.__r_.__value_.__l.__cap_ = v57->__r_.__value_.__l.__cap_;
          *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v58;
          v57->__r_.__value_.__l.__size_ = 0LL;
          v57->__r_.__value_.__l.__cap_ = 0LL;
          v57->__r_.__value_.__r.__words[0] = 0LL;
          uint64_t v59 = (char)v201.__r_.__value_.__s.__size_;
          v60 = v201.__r_.__value_.__r.__words[0];
          uint64_t v61 = sub_1009232CC(a4);
          v62 = *(void *)(a1 + 20);
          uint64_t v63 = &v201;
          if (v59 < 0) {
            uint64_t v63 = (std::string *)v60;
          }
          v64 = *(void *)(a4 + 72);
          uint64_t v65 = *(void *)(a4 + 80);
          if (v166) {
            v66 = 76;
          }
          else {
            v66 = 46;
          }
          uint64_t v67 = *(void *)(a1 + 4);
          v68 = *(void *)(a1 + 12);
          if (v165) {
            uint64_t v69 = 67;
          }
          else {
            uint64_t v69 = 46;
          }
          LODWORD(v202.__r_.__value_.__l.__data_) = 136385027;
          *(std::string::size_type *)((char *)v202.__r_.__value_.__r.__words + 4) = (std::string::size_type)v63;
          WORD2(v202.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v202.__r_.__value_.__r.__words[1] + 6) = v167;
          WORD1(v202.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v202.__r_.__value_.__r.__words[2]) = v168;
          v203 = 1024;
          v204 = v169;
          v205 = 1024;
          v206 = v69;
          v207 = 1024;
          v208 = v66;
          v209 = 1026;
          v210 = a6;
          v211 = 2050;
          v212 = v61;
          v213 = 2050;
          v214 = a2;
          v215 = 2049;
          v216 = v30;
          v217 = 2049;
          v218 = v31;
          v219 = 2049;
          v220 = v42;
          v221 = 2049;
          v222 = v29;
          v223 = 2050;
          v224 = v62;
          v225 = 2049;
          v226 = v64;
          v227 = 2049;
          v228 = v65;
          v229 = 2049;
          v230 = v67;
          v231 = 2049;
          v232 = v68;
          _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "getStatusFromLocation, %{private}s, fix, %c%c%c%c%c, isWifiPowered, %{public}d,  effectiveDistance, %{public }.2lf, distance, %{public}.1f, entryRadius, %{private}.1f, exitRadius, %{private}.1f, adjDist, %{private}.1l f, adjHorAcc, %{private}.1lf, origHorAcc, %{public}.1lf, fenceCenter, %{private}f, %{private}f, currentLocat ion, %{private}f, %{private}f,",  (uint8_t *)&v202,  0x9Eu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(&v202, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_10185A798);
          }
          loga = (os_log_t)qword_101934878;
          sub_10065EF44((const void **)a4, &v201);
          int v70 = (char)v201.__r_.__value_.__s.__size_;
          v71 = v201.__r_.__value_.__r.__words[0];
          uint64_t v72 = sub_1009232CC(a4);
          v73 = *(void *)(a1 + 20);
          uint64_t v74 = &v201;
          if (v70 < 0) {
            uint64_t v74 = (std::string *)v71;
          }
          v75 = *(void *)(a4 + 72);
          uint64_t v76 = *(void *)(a4 + 80);
          if (v166) {
            char v77 = 76;
          }
          else {
            char v77 = 46;
          }
          v78 = *(void *)(a1 + 4);
          v79 = *(void *)(a1 + 12);
          if (v165) {
            v80 = 67;
          }
          else {
            v80 = 46;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136385027;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v167;
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = v168;
          v171 = 1024;
          v172 = v169;
          v173 = 1024;
          v174 = v80;
          v175 = 1024;
          v176 = v77;
          v177 = 1026;
          v178 = a6;
          v179 = 2050;
          v180 = v72;
          v181 = 2050;
          v182 = a2;
          v183 = 2049;
          v184 = v30;
          v185 = 2049;
          v186 = v31;
          v187 = 2049;
          v188 = v42;
          v189 = 2049;
          v190 = v29;
          v191 = 2050;
          v192 = v73;
          v193 = 2049;
          v194 = v75;
          v195 = 2049;
          v196 = v76;
          v197 = 2049;
          v198 = v78;
          v199 = 2049;
          v200 = v79;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v202,  1628LL,  &_mh_execute_header,  loga,  0LL,  "getStatusFromLocation, %{private}s, fix, %c%c%c%c%c, isWifiPowered, %{public}d,  effectiveDistance, %{public }.2lf, distance, %{public}.1f, entryRadius, %{private}.1f, exitRadius, %{private}.1f, adjDist, %{private}.1l f, adjHorAcc, %{private}.1lf, origHorAcc, %{public}.1lf, fenceCenter, %{private}f, %{private}f, currentLocat ion, %{private}f, %{private}f,",  &buf,  158);
          v82 = v81;
LABEL_319:
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPriva te &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)",  "%s\n",  (const char *)v82);
          if (v82 != &v202) {
            free(v82);
          }
          goto LABEL_171;
        }

        goto LABEL_171;
      }
    }

  v68 = *(_DWORD *)(a2 + 264);
  v5 |= 0x100000000000000uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 264) = v68;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x40) == 0)
  {
LABEL_78:
    if ((v4 & 0x800000000000LL) == 0) {
      goto LABEL_79;
    }
    goto LABEL_185;
  }

  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfQuiescenceCondition", *(_BYTE *)(a1 + 345));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x800000000LL) == 0)
  {
LABEL_82:
    if ((v6 & 0x1000000000LL) == 0) {
      goto LABEL_83;
    }
    goto LABEL_185;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 264), 0x25Du);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x40) == 0)
  {
LABEL_78:
    if ((v5 & 0x800000000000LL) == 0) {
      goto LABEL_79;
    }
    goto LABEL_185;
  }

            PB::Reader::recallMark(this, v164);
          }

          else
          {
            v140 = *(char **)(a1 + 40);
            v139 = *(void *)(a1 + 48);
            if ((unint64_t)v140 >= v139)
            {
              v151 = (char *)*v10;
              v152 = (v140 - (_BYTE *)*v10) >> 2;
              v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62) {
LABEL_254:
              }
                sub_100007008();
              v154 = v139 - (void)v151;
              if (v154 >> 1 > v153) {
                v153 = v154 >> 1;
              }
              else {
                v155 = v153;
              }
              if (v155)
              {
                v156 = (char *)sub_10000956C(v11, v155);
                v151 = *(char **)(a1 + 32);
                v140 = *(char **)(a1 + 40);
              }

              else
              {
                v156 = 0LL;
              }

              v159 = &v156[4 * v152];
              *(_DWORD *)v159 = 0;
              v118 = v159 + 4;
              while (v140 != v151)
              {
                v160 = *((_DWORD *)v140 - 1);
                v140 -= 4;
                *((_DWORD *)v159 - 1) = v160;
                v159 -= 4;
              }

              *(void *)(a1 + 32) = v159;
              *(void *)(a1 + 40) = v118;
              *(void *)(a1 + 48) = &v156[4 * v155];
              if (v151) {
                operator delete(v151);
              }
            }

            else
            {
              *(_DWORD *)v140 = 0;
              v118 = v140 + 4;
            }

            *(void *)(a1 + 40) = v118;
LABEL_238:
            v161 = *((void *)this + 1);
            if (v161 <= 0xFFFFFFFFFFFFFFFBLL && v161 + 4 <= *((void *)this + 2))
            {
              *(v118 - 1) = *(_DWORD *)(*(void *)this + v161);
LABEL_242:
              v71 = *((void *)this + 1) + 4LL;
LABEL_243:
              *((void *)this + 1) = v71;
            }

            else
            {
LABEL_240:
              *((_BYTE *)this + 24) = 1;
            }
          }

LABEL_188:
  *(_DWORD *)(a1 + 292) |= 0x20000000u;
  v64 = *(_DWORD **)(a1 + 240);
  if (!v64)
  {
    v64 = operator new(0x18uLL);
    *(void *)v64 = off_10181BE90;
    v64[2] = 50;
    *((_BYTE *)v64 + 12) = 0;
    *((void *)v64 + 2) = 0LL;
    *(void *)(a1 + 240) = v64;
  }

  uint64_t v65 = *(void *)(a2 + 240);
  if (!v65) {
    uint64_t v65 = *(void *)(qword_1019A0978 + 240);
  }
  sub_100085A3C((uint64_t)v64, v65);
  unsigned int v5 = *(_DWORD *)(a2 + 292);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_161:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_203;
    }
    goto LABEL_198;
  }

      v96 = ++v91 < v92;
      if (v91 == v95) {
        goto LABEL_191;
      }
    }

    uint64_t v35 = 5;
    v36 = 1;
    goto LABEL_193;
  }

  v96 = 0;
LABEL_191:
  uint64_t v35 = 0;
LABEL_192:
  if ((v89 & 0x80) != 0) {
LABEL_193:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v96) {
    goto LABEL_200;
  }
LABEL_195:
  if (v35) {
    goto LABEL_220;
  }
  uint64_t v37 = 2LL;
LABEL_59:
  uint64_t v39 = **(_BYTE **)(a2 + 16);
  v121 = v39;
  if (*(_BYTE *)(a1 + 169))
  {
    uint64_t v39 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40LL))( *(void *)(a1 + 24),  (char)v39);
    v121 = v39;
  }

  v40 = *(unsigned __int8 **)(a1 + 40);
  uint64_t v41 = *(void *)(a1 + 48) - (void)v40;
  if (v41)
  {
    if (v41 <= 1) {
      uint64_t v41 = 1LL;
    }
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_66;
      }
    }

  uint64_t result = *(float *)(a2 + 80);
  v5 |= 0x400uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(float *)(a1 + 80) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x200000) == 0)
  {
LABEL_83:
    if ((v4 & 0x800) == 0) {
      goto LABEL_84;
    }
    goto LABEL_190;
  }

  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfTriggerClustersCondition", *(_BYTE *)(a1 + 350));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x10000000000LL) == 0)
  {
LABEL_87:
    if ((v6 & 0x20000000000LL) == 0) {
      goto LABEL_88;
    }
    goto LABEL_190;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x322u);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x200000) == 0)
  {
LABEL_83:
    if ((v5 & 0x800) == 0) {
      goto LABEL_84;
    }
    goto LABEL_190;
  }

          *(_DWORD *)(a1 + 100) = v47;
          goto LABEL_216;
        case 8u:
          if ((_DWORD)v27 != 2)
          {
            v104 = *(char **)(a1 + 16);
            v103 = *(void *)(a1 + 24);
            if ((unint64_t)v104 >= v103)
            {
              v110 = (char *)*v13;
              v111 = (v104 - (_BYTE *)*v13) >> 2;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62) {
LABEL_226:
              }
                sub_100007008();
              v113 = v103 - (void)v110;
              if (v113 >> 1 > v112) {
                v112 = v113 >> 1;
              }
              else {
                v114 = v112;
              }
              if (v114)
              {
                v115 = (char *)sub_10000956C(v14, v114);
                v110 = *(char **)(a1 + 8);
                v104 = *(char **)(a1 + 16);
              }

              else
              {
                v115 = 0LL;
              }

              v128 = &v115[4 * v111];
              *(_DWORD *)v128 = 0;
              v105 = v128 + 4;
              while (v104 != v110)
              {
                v129 = *((_DWORD *)v104 - 1);
                v104 -= 4;
                *((_DWORD *)v128 - 1) = v129;
                v128 -= 4;
              }

              *(void *)(a1 + 8) = v128;
              *(void *)(a1 + 16) = v105;
              *(void *)(a1 + 24) = &v115[4 * v114];
              if (v110) {
                operator delete(v110);
              }
            }

            else
            {
              *(_DWORD *)v104 = 0;
              v105 = v104 + 4;
            }

            *(void *)(a1 + 16) = v105;
            goto LABEL_210;
          }

          if ((PB::Reader::placeMark(this, v138, v27, a4) & 1) != 0) {
            return 0LL;
          }
          v50 = *((void *)this + 1);
          uint64_t v51 = *((void *)this + 2);
          while (v50 < v51 && !*((_BYTE *)this + 24))
          {
            uint64_t v53 = *(char **)(a1 + 16);
            v52 = *(void *)(a1 + 24);
            if ((unint64_t)v53 >= v52)
            {
              uint64_t v55 = (char *)*v13;
              v56 = (v53 - (_BYTE *)*v13) >> 2;
              uint64_t v57 = v56 + 1;
              v58 = v52 - (void)v55;
              if (v58 >> 1 > v57) {
                uint64_t v57 = v58 >> 1;
              }
              else {
                uint64_t v59 = v57;
              }
              if (v59)
              {
                v60 = (char *)sub_10000956C(v14, v59);
                uint64_t v55 = *(char **)(a1 + 8);
                uint64_t v53 = *(char **)(a1 + 16);
              }

              else
              {
                v60 = 0LL;
              }

              uint64_t v61 = &v60[4 * v56];
              *(_DWORD *)uint64_t v61 = 0;
              v54 = v61 + 4;
              while (v53 != v55)
              {
                v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }

              *(void *)(a1 + 8) = v61;
              *(void *)(a1 + 16) = v54;
              *(void *)(a1 + 24) = &v60[4 * v59];
              if (v55) {
                operator delete(v55);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v53 = 0;
              v54 = v53 + 4;
            }

            *(void *)(a1 + 16) = v54;
            uint64_t v63 = *((void *)this + 1);
            if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)this + 2)) {
              goto LABEL_155;
            }
            *(v54 - 1) = *(_DWORD *)(*(void *)this + v63);
            uint64_t v51 = *((void *)this + 2);
            v50 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v50;
          }

          goto LABEL_156;
        case 9u:
          *(_WORD *)(a1 + 124) |= 8u;
          v64 = *((void *)this + 1);
          if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v64);
          goto LABEL_214;
        case 0xAu:
          *(_WORD *)(a1 + 124) |= 0x100u;
          uint64_t v65 = *((void *)this + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v65);
          goto LABEL_214;
        case 0xBu:
          *(_WORD *)(a1 + 124) |= 4u;
          v66 = *((void *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v66);
          goto LABEL_214;
        case 0xCu:
          if ((_DWORD)v27 != 2)
          {
            v107 = *(char **)(a1 + 40);
            v106 = *(void *)(a1 + 48);
            if ((unint64_t)v107 >= v106)
            {
              v116 = (char *)*v11;
              v117 = (v107 - (_BYTE *)*v11) >> 2;
              v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 62) {
LABEL_227:
              }
                sub_100007008();
              v119 = v106 - (void)v116;
              if (v119 >> 1 > v118) {
                v118 = v119 >> 1;
              }
              else {
                v120 = v118;
              }
              if (v120)
              {
                v121 = (char *)sub_10000956C(v12, v120);
                v116 = *(char **)(a1 + 32);
                v107 = *(char **)(a1 + 40);
              }

              else
              {
                v121 = 0LL;
              }

              v130 = &v121[4 * v117];
              *(_DWORD *)v130 = 0;
              v105 = v130 + 4;
              while (v107 != v116)
              {
                v131 = *((_DWORD *)v107 - 1);
                v107 -= 4;
                *((_DWORD *)v130 - 1) = v131;
                v130 -= 4;
              }

              *(void *)(a1 + 32) = v130;
              *(void *)(a1 + 40) = v105;
              *(void *)(a1 + 48) = &v121[4 * v120];
              if (v116) {
                operator delete(v116);
              }
            }

            else
            {
              *(_DWORD *)v107 = 0;
              v105 = v107 + 4;
            }

            *(void *)(a1 + 40) = v105;
            goto LABEL_210;
          }

          if ((PB::Reader::placeMark(this, v138, v27, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v67 = *((void *)this + 1);
          v68 = *((void *)this + 2);
          while (v67 < v68 && !*((_BYTE *)this + 24))
          {
            int v70 = *(char **)(a1 + 40);
            uint64_t v69 = *(void *)(a1 + 48);
            if ((unint64_t)v70 >= v69)
            {
              uint64_t v72 = (char *)*v11;
              v73 = (v70 - (_BYTE *)*v11) >> 2;
              uint64_t v74 = v73 + 1;
              v75 = v69 - (void)v72;
              if (v75 >> 1 > v74) {
                uint64_t v74 = v75 >> 1;
              }
              else {
                uint64_t v76 = v74;
              }
              if (v76)
              {
                char v77 = (char *)sub_10000956C(v12, v76);
                uint64_t v72 = *(char **)(a1 + 32);
                int v70 = *(char **)(a1 + 40);
              }

              else
              {
                char v77 = 0LL;
              }

              v78 = &v77[4 * v73];
              *(_DWORD *)v78 = 0;
              v71 = v78 + 4;
              while (v70 != v72)
              {
                v79 = *((_DWORD *)v70 - 1);
                v70 -= 4;
                *((_DWORD *)v78 - 1) = v79;
                v78 -= 4;
              }

              *(void *)(a1 + 32) = v78;
              *(void *)(a1 + 40) = v71;
              *(void *)(a1 + 48) = &v77[4 * v76];
              if (v72) {
                operator delete(v72);
              }
            }

            else
            {
              *(_DWORD *)int v70 = 0;
              v71 = v70 + 4;
            }

            *(void *)(a1 + 40) = v71;
            v80 = *((void *)this + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)this + 2)) {
              goto LABEL_155;
            }
            *(v71 - 1) = *(_DWORD *)(*(void *)this + v80);
            v68 = *((void *)this + 2);
            uint64_t v67 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v67;
          }

          goto LABEL_156;
        case 0xDu:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v138, v27, a4) & 1) != 0) {
              return 0LL;
            }
            v81 = *((void *)this + 1);
            v82 = *((void *)this + 2);
            while (v81 < v82 && !*((_BYTE *)this + 24))
            {
              v84 = *(char **)(a1 + 64);
              v83 = *(void *)(a1 + 72);
              if ((unint64_t)v84 >= v83)
              {
                v86 = (char *)*v10;
                v87 = (v84 - (_BYTE *)*v10) >> 2;
                v88 = v87 + 1;
                v89 = v83 - (void)v86;
                if (v89 >> 1 > v88) {
                  v88 = v89 >> 1;
                }
                else {
                  v90 = v88;
                }
                if (v90)
                {
                  v91 = (char *)sub_10000956C(v137, v90);
                  v86 = *(char **)(a1 + 56);
                  v84 = *(char **)(a1 + 64);
                }

                else
                {
                  v91 = 0LL;
                }

                v92 = &v91[4 * v87];
                *(_DWORD *)v92 = 0;
                v85 = v92 + 4;
                while (v84 != v86)
                {
                  v93 = *((_DWORD *)v84 - 1);
                  v84 -= 4;
                  *((_DWORD *)v92 - 1) = v93;
                  v92 -= 4;
                }

                *(void *)(a1 + 56) = v92;
                *(void *)(a1 + 64) = v85;
                *(void *)(a1 + 72) = &v91[4 * v90];
                if (v86) {
                  operator delete(v86);
                }
              }

              else
              {
                *(_DWORD *)v84 = 0;
                v85 = v84 + 4;
              }

              *(void *)(a1 + 64) = v85;
              v94 = *((void *)this + 1);
              if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((void *)this + 2))
              {
LABEL_155:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v85 - 1) = *(_DWORD *)(*(void *)this + v94);
              v82 = *((void *)this + 2);
              v81 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v81;
            }

LABEL_193:
  *(_DWORD *)(a1 + 292) |= 0x40000000u;
  v66 = *(void **)(a1 + 248);
  if (!v66)
  {
    v66 = operator new(0x20uLL);
    void *v66 = off_10181BF08;
    v66[1] = 51LL;
    *((_DWORD *)v66 + 5) = 0;
    *((_DWORD *)v66 + 6) = 0;
    *((_WORD *)v66 + 8) = 0;
    *(void *)(a1 + 248) = v66;
  }

  uint64_t v67 = *(void *)(a2 + 248);
  if (!v67) {
    uint64_t v67 = *(void *)(qword_1019A0978 + 248);
  }
  sub_100085B28((uint64_t)v66, v67);
  if ((*(_DWORD *)(a2 + 292) & 0x80000000) != 0)
  {
LABEL_198:
    *(_DWORD *)(a1 + 292) |= 0x80000000;
    v68 = *(_DWORD **)(a1 + 256);
    if (!v68)
    {
      v68 = operator new(0x18uLL);
      *(void *)v68 = off_10181BF80;
      v68[2] = 52;
      *((_BYTE *)v68 + 12) = 0;
      *((void *)v68 + 2) = 0LL;
      *(void *)(a1 + 256) = v68;
    }

    uint64_t v69 = *(void *)(a2 + 256);
    if (!v69) {
      uint64_t v69 = *(void *)(qword_1019A0978 + 256);
    }
    sub_100085CB8((uint64_t)v68, v69);
  }

  uint64_t v63 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 124);
  if (v63 >= 0x80)
  {
    v64 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v63, a2) + 2;
    char v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    v64 = 3;
  }

  uint64_t v4 = (v64 + v4);
  if ((v3 & 0x40000000) == 0)
  {
LABEL_169:
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_205;
    }
    goto LABEL_201;
  }

  *(_BYTE *)(a2 + 2) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v63 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    v64 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    v192 = "sosCanceledBecauseUserResponse";
    v193 = 2048;
    v194 = v64;
    _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v159 = *(void *)(a1 + 8);
    v187 = 136315394;
    v188 = "sosCanceledBecauseUserResponse";
    v189 = 2048;
    v190 = v159;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v161 = (uint8_t *)v160;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v160);
    if (v161 != buf) {
      free(v161);
    }
  }

  a5[5] = 1;
  unint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x8000000000000LL) == 0)
  {
LABEL_29:
    if ((v10 & 0x10000000000000LL) == 0) {
      goto LABEL_30;
    }
    goto LABEL_205;
  }

  v73 = *(_DWORD *)(a2 + 304);
  v6 |= 4uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 304) = v73;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_88:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_195;
  }

  PB::TextFormatter::format(this, "staticCountThreshold", *(_DWORD *)(a1 + 248));
  uint64_t v7 = *v5;
  if ((*v5 & 0x20000000000000LL) == 0)
  {
LABEL_92:
    if ((v7 & 0x40000000000000LL) == 0) {
      goto LABEL_93;
    }
    goto LABEL_195;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 304), 0x3E9u);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_88:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_195;
  }

          *(_DWORD *)(a1 + 88) = v41;
          goto LABEL_224;
        case 3u:
          sub_10109B308(v14);
          v44 = *(void *)(*(void *)(a1 + 64) - 8LL);
          if (!PB::Reader::placeMark(this, v155, v45, v46)
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(void *)v44 + 16LL))(v44, this) & 1) == 0)
          {
            return 0LL;
          }

          goto LABEL_165;
        case 4u:
          if ((_DWORD)v27 != 2)
          {
            v116 = *(char **)(a1 + 16);
            v115 = *(void *)(a1 + 24);
            if ((unint64_t)v116 >= v115)
            {
              v136 = (char *)*v12;
              v137 = (v116 - (_BYTE *)*v12) >> 2;
              v138 = v137 + 1;
              if ((unint64_t)(v137 + 1) >> 62) {
LABEL_234:
              }
                sub_100007008();
              v139 = v115 - (void)v136;
              if (v139 >> 1 > v138) {
                v138 = v139 >> 1;
              }
              else {
                v140 = v138;
              }
              if (v140)
              {
                v141 = (char *)sub_10000956C(v13, v140);
                v136 = *(char **)(a1 + 8);
                v116 = *(char **)(a1 + 16);
              }

              else
              {
                v141 = 0LL;
              }

              v148 = &v141[4 * v137];
              *(_DWORD *)v148 = 0;
              v117 = v148 + 4;
              while (v116 != v136)
              {
                v149 = *((_DWORD *)v116 - 1);
                v116 -= 4;
                *((_DWORD *)v148 - 1) = v149;
                v148 -= 4;
              }

              *(void *)(a1 + 8) = v148;
              *(void *)(a1 + 16) = v117;
              *(void *)(a1 + 24) = &v141[4 * v140];
              if (v136) {
                operator delete(v136);
              }
            }

            else
            {
              *(_DWORD *)v116 = 0;
              v117 = v116 + 4;
            }

            *(void *)(a1 + 16) = v117;
            goto LABEL_220;
          }

          if ((PB::Reader::placeMark(this, v155, v27, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v47 = *((void *)this + 1);
          v48 = *((void *)this + 2);
          while (v47 < v48 && !*((_BYTE *)this + 24))
          {
            v50 = *(char **)(a1 + 16);
            uint64_t v49 = *(void *)(a1 + 24);
            if ((unint64_t)v50 >= v49)
            {
              v52 = (char *)*v12;
              uint64_t v53 = (v50 - (_BYTE *)*v12) >> 2;
              v54 = v53 + 1;
              uint64_t v55 = v49 - (void)v52;
              if (v55 >> 1 > v54) {
                v54 = v55 >> 1;
              }
              else {
                v56 = v54;
              }
              if (v56)
              {
                uint64_t v57 = (char *)sub_10000956C(v13, v56);
                v52 = *(char **)(a1 + 8);
                v50 = *(char **)(a1 + 16);
              }

              else
              {
                uint64_t v57 = 0LL;
              }

              v58 = &v57[4 * v53];
              *(_DWORD *)v58 = 0;
              uint64_t v51 = v58 + 4;
              while (v50 != v52)
              {
                uint64_t v59 = *((_DWORD *)v50 - 1);
                v50 -= 4;
                *((_DWORD *)v58 - 1) = v59;
                v58 -= 4;
              }

              *(void *)(a1 + 8) = v58;
              *(void *)(a1 + 16) = v51;
              *(void *)(a1 + 24) = &v57[4 * v56];
              if (v52) {
                operator delete(v52);
              }
            }

            else
            {
              *(_DWORD *)v50 = 0;
              uint64_t v51 = v50 + 4;
            }

            *(void *)(a1 + 16) = v51;
            v60 = *((void *)this + 1);
            if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)this + 2)) {
              goto LABEL_164;
            }
            *(v51 - 1) = *(_DWORD *)(*(void *)this + v60);
            v48 = *((void *)this + 2);
            uint64_t v47 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v47;
          }

          goto LABEL_165;
        case 5u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v155, v27, a4) & 1) != 0) {
              return 0LL;
            }
            uint64_t v61 = *((void *)this + 1);
            v62 = *((void *)this + 2);
            while (v61 < v62 && !*((_BYTE *)this + 24))
            {
              v64 = *(char **)(a1 + 40);
              uint64_t v63 = *(void *)(a1 + 48);
              if ((unint64_t)v64 >= v63)
              {
                v66 = (char *)*v10;
                uint64_t v67 = (v64 - (_BYTE *)*v10) >> 2;
                v68 = v67 + 1;
                uint64_t v69 = v63 - (void)v66;
                if (v69 >> 1 > v68) {
                  v68 = v69 >> 1;
                }
                else {
                  int v70 = v68;
                }
                if (v70)
                {
                  v71 = (char *)sub_10000956C(v11, v70);
                  v66 = *(char **)(a1 + 32);
                  v64 = *(char **)(a1 + 40);
                }

                else
                {
                  v71 = 0LL;
                }

                uint64_t v72 = &v71[4 * v67];
                *(_DWORD *)uint64_t v72 = 0;
                uint64_t v65 = v72 + 4;
                while (v64 != v66)
                {
                  v73 = *((_DWORD *)v64 - 1);
                  v64 -= 4;
                  *((_DWORD *)v72 - 1) = v73;
                  v72 -= 4;
                }

                *(void *)(a1 + 32) = v72;
                *(void *)(a1 + 40) = v65;
                *(void *)(a1 + 48) = &v71[4 * v70];
                if (v66) {
                  operator delete(v66);
                }
              }

              else
              {
                *(_DWORD *)v64 = 0;
                uint64_t v65 = v64 + 4;
              }

              *(void *)(a1 + 40) = v65;
              uint64_t v74 = *((void *)this + 1);
              if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((void *)this + 2))
              {
LABEL_164:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v65 - 1) = *(_DWORD *)(*(void *)this + v74);
              v62 = *((void *)this + 2);
              uint64_t v61 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v61;
            }

LABEL_203:
  LOBYTE(v70) = *(_BYTE *)(a2 + 296);
  if (!(_BYTE)v70) {
    return;
  }
  if ((*(_BYTE *)(a2 + 296) & 1) != 0)
  {
    *(_DWORD *)(a1 + 296) |= 1u;
    v71 = *(void **)(a1 + 264);
    if (!v71)
    {
      v71 = operator new(0x18uLL);
      void *v71 = off_10181BFF8;
      v71[1] = 53LL;
      *((_DWORD *)v71 + 4) = 0;
      *(void *)(a1 + 264) = v71;
    }

    uint64_t v72 = *(void *)(a2 + 264);
    if (!v72) {
      uint64_t v72 = *(void *)(qword_1019A0978 + 264);
    }
    sub_100085DA4((uint64_t)v71, v72);
    int v70 = *(_DWORD *)(a2 + 296);
    if ((v70 & 2) == 0)
    {
LABEL_206:
      if ((v70 & 4) == 0) {
        return;
      }
      goto LABEL_218;
    }
  }

  else if ((*(_BYTE *)(a2 + 296) & 2) == 0)
  {
    goto LABEL_206;
  }

  *(_DWORD *)(a1 + 296) |= 2u;
  v73 = *(void **)(a1 + 272);
  if (!v73)
  {
    v73 = operator new(0x18uLL);
    void *v73 = off_10181C070;
    v73[1] = 54LL;
    *((_DWORD *)v73 + 4) = 0;
    *(void *)(a1 + 272) = v73;
  }

  uint64_t v74 = *(void *)(a2 + 272);
  if (!v74) {
    uint64_t v74 = *(void *)(qword_1019A0978 + 272);
  }
  sub_100085E70((uint64_t)v73, v74);
  if ((*(_DWORD *)(a2 + 296) & 4) != 0)
  {
LABEL_218:
    *(_DWORD *)(a1 + 296) |= 4u;
    v75 = *(void **)(a1 + 280);
    if (!v75)
    {
      v75 = operator new(0x20uLL);
      v75[2] = 55LL;
      void *v75 = off_10181BC38;
      v75[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_DWORD *)v75 + 6) = 0;
      *(void *)(a1 + 280) = v75;
    }

    uint64_t v76 = *(void *)(a2 + 280);
    if (!v76) {
      uint64_t v76 = *(void *)(qword_1019A0978 + 280);
    }
    sub_10007FF10((uint64_t)v75, v76);
  }

      v62 = v77;
    }

    while (v77 != (uint64_t *)(a1 + 3848));
  }

  v113 = *(uint64_t **)(a1 + 3864);
  if (v113 != (uint64_t *)(a1 + 3872))
  {
    do
    {
      if (*((double *)v113 + 35) + 20.0 < v7)
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101847D40);
        }
        v114 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          else {
            v115 = v113[5];
          }
          sub_1000392EC((uint64_t)v163, v115 + 1);
          if (v165[9] >= 0) {
            v116 = v163;
          }
          else {
            v116 = *(_BYTE **)v163;
          }
          if (v115)
          {
            else {
              v117 = (const void *)v113[4];
            }
            memmove(v116, v117, v115);
          }

          *(_WORD *)&v116[v115] = 47;
          v118 = *((char *)v113 + 79);
          if (v118 >= 0) {
            v119 = (const std::string::value_type *)(v113 + 7);
          }
          else {
            v119 = (const std::string::value_type *)v113[7];
          }
          if (v118 >= 0) {
            v120 = *((unsigned __int8 *)v113 + 79);
          }
          else {
            v120 = v113[8];
          }
          v121 = std::string::append((std::string *)v163, v119, v120);
          v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = v121->__r_.__value_.__l.__cap_;
          *(_OWORD *)__p = v122;
          v121->__r_.__value_.__l.__size_ = 0LL;
          v121->__r_.__value_.__l.__cap_ = 0LL;
          v121->__r_.__value_.__r.__words[0] = 0LL;
          if ((v165[9] & 0x80000000) != 0) {
            operator delete(*(void **)v163);
          }
          v123 = __p;
          if (__p[23] < 0) {
            v123 = *(_BYTE **)__p;
          }
          v124 = v113[35];
          *(_DWORD *)v163 = 136381187;
          *(void *)&v163[4] = v123;
          v164 = 1026;
          *(_DWORD *)v165 = a3;
          *(_WORD *)&v165[4] = 2050;
          *(void *)&v165[6] = v124;
          _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEBUG,  "#Warning Fence: avoid sendFenceFailureNotification, fence, %{private}s, client, %{public}d, timestamp,%{public}.1lf",  v163,  0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(v163, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101847D40);
          }
          v143 = qword_101934878;
          sub_10065EF44((const void **)v113 + 4, &v157);
          v144 = &v157;
          if ((v157.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            v144 = (std::string *)v157.__r_.__value_.__r.__words[0];
          }
          v145 = v113[35];
          *(_DWORD *)__p = 136381187;
          *(void *)&__p[4] = v144;
          *(_WORD *)&__p[12] = 1026;
          *(_DWORD *)&__p[14] = a3;
          *(_WORD *)&__p[18] = 2050;
          *(void *)&__p[20] = v145;
          LODWORD(v152) = 28;
          _os_log_send_and_compose_impl( 2LL,  0LL,  v163,  1628LL,  &_mh_execute_header,  v143,  2LL,  "#Warning Fence: avoid sendFenceFailureNotification, fence, %{private}s, client, %{public}d, timestamp,%{public}.1lf",  __p,  v152);
          v147 = v146;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceManager::pendingFenceMaintenanceOnClientRegistration(CFAbsoluteTime, CLFenceManager_Type::FenceS tatus, int, const std::string &)",  "%s\n",  v147);
          if (v147 != v163) {
            free(v147);
          }
        }

        v125 = sub_1000087E8((uint64_t **)(a1 + 3864), v113);
        sub_1006686F0((uint64_t)(v113 + 4));
        operator delete(v113);
        goto LABEL_308;
      }

      v126 = *((unsigned __int8 *)v113 + 55);
      if ((v126 & 0x80u) == 0LL) {
        v127 = *((unsigned __int8 *)v113 + 55);
      }
      else {
        v127 = v113[5];
      }
      v128 = a4[23];
      v129 = (char)v128;
      if ((v128 & 0x80u) != 0LL) {
        v128 = *((void *)a4 + 1);
      }
      if (v127 == v128)
      {
        if (v129 >= 0) {
          v130 = a4;
        }
        else {
          v130 = *(unsigned __int8 **)a4;
        }
        if ((v126 & 0x80) == 0)
        {
          if (*((_BYTE *)v113 + 55))
          {
            v131 = (unsigned __int8 *)(v113 + 4);
            while (*v131 == *v130)
            {
              ++v131;
              ++v130;
              if (!--v126) {
                goto LABEL_275;
              }
            }

            goto LABEL_303;
          }

  if (HIBYTE(v171))
  {
    if ((_BYTE)v171) {
      pthread_mutex_unlock(v170);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v169 + 24LL))(v169);
    }
  }

  return v27;
}

  v81 = *(_DWORD *)(a2 + 208);
  v5 |= 0x40000000000uLL;
  void *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 208) = v81;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x10000000000LL) == 0)
  {
LABEL_98:
    if ((v4 & 0x800000000LL) == 0) {
      goto LABEL_99;
    }
    goto LABEL_205;
  }

  PB::TextFormatter::format(this, "stepsDeescalatedAtOpp", *(_DWORD *)(a1 + 284));
  if ((*v5 & 0x4000000000000000LL) != 0) {
LABEL_102:
  }
    PB::TextFormatter::format(this, "stepsEpochCount", *(float *)(a1 + 288));
LABEL_103:
  char v8 = *v5;
  if (*v5 < 0)
  {
    PB::TextFormatter::format(this, "stepsPerMinute", *(float *)(a1 + 292));
    char v8 = *v5;
    uint64_t v9 = *(void *)(a1 + 364);
    if ((v9 & 1) == 0) {
      goto LABEL_207;
    }
    goto LABEL_206;
  }

  uint64_t v9 = *(void *)(a1 + 364);
  if ((v9 & 1) != 0)
  {
LABEL_206:
    PB::TextFormatter::format(this, "stepsPerMinuteThreshold", *(float *)(a1 + 296));
    char v8 = *v5;
    uint64_t v9 = *(void *)(a1 + 364);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 208), 0x516u);
  unsigned int v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x10000000000LL) == 0)
  {
LABEL_98:
    if ((v5 & 0x800000000LL) == 0) {
      goto LABEL_99;
    }
    goto LABEL_205;
  }

  else {
    v105 = v1 + 96;
  }
  v106 = v1 + 192;
  if (v1 + 192 != v2)
  {
    v107 = v1 + 192;
    while (1)
    {
      v108 = v107 + 96;
      if (v107 + 96 == v2) {
        break;
      }
      v109 = *(unsigned __int8 *)(v107 + 160);
      if (v109 >= *(unsigned __int8 *)(v107 + 64))
      {
        v109 = *(unsigned __int8 *)(v107 + 64);
        v108 = v107;
      }

      v107 += 192LL;
      if (v107 == v2) {
        goto LABEL_219;
      }
    }

void sub_100081454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_100081470(void *result)
{
  if ((void *)qword_1019A0978 != result)
  {
    char v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t v4 = v1[3];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v5 = v1[4];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    uint64_t v6 = v1[5];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    uint64_t v7 = v1[6];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    uint64_t v8 = v1[7];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
    uint64_t v9 = v1[8];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    uint64_t v10 = v1[9];
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
    uint64_t v11 = v1[10];
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
    uint64_t v12 = v1[11];
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    uint64_t v13 = v1[12];
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    }
    uint64_t v14 = v1[13];
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
    uint64_t v15 = v1[14];
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    }
    uint64_t v16 = v1[15];
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
    uint64_t v17 = v1[16];
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
    }
    uint64_t v18 = v1[17];
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    uint64_t v19 = v1[18];
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
    uint64_t v20 = v1[19];
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
    }
    uint64_t v21 = v1[20];
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    }
    uint64_t v22 = v1[21];
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
    }
    uint64_t v23 = v1[22];
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
    }
    uint64_t v24 = v1[23];
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    }
    uint64_t v25 = v1[24];
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
    }
    uint64_t v26 = v1[25];
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
    }
    uint64_t v27 = v1[26];
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
    }
    uint64_t v28 = v1[27];
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    }
    uint64_t v29 = v1[28];
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
    }
    uint64_t v30 = v1[29];
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
    }
    uint64_t v31 = v1[30];
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
    uint64_t v32 = v1[31];
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
    }
    uint64_t v33 = v1[32];
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
    }
    uint64_t v34 = v1[33];
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
    }
    uint64_t v35 = v1[34];
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
    }
    uint64_t result = (void *)v1[35];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_100081760(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BCB0;
  sub_100081470(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100081790(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BCB0;
  sub_100081470(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_1000817C4()
{
  v0 = (char *)operator new(0x130uLL);
  *(void *)v0 = off_10181BCB0;
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *((_DWORD *)v0 + 74) = 0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  return result;
}

uint64_t sub_100081838(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = (unsigned int *)(result + 292);
  unsigned int v3 = *(_DWORD *)(result + 292);
  if ((_BYTE)v3)
  {
    if ((v3 & 1) != 0)
    {
      double result = *(void *)(result + 8);
      if (result)
      {
        double result = sub_1000718B0(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 2) != 0)
    {
      double result = *(void *)(v1 + 16);
      if (result)
      {
        double result = sub_100072CA8(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 4) != 0)
    {
      double result = *(void *)(v1 + 24);
      if (result)
      {
        double result = sub_100073540(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 8) != 0)
    {
      uint64_t v4 = *(void *)(v1 + 32);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 16)) {
          *(_DWORD *)(v4 + 8) = 5;
        }
        *(_DWORD *)(v4 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(v1 + 40);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 16)) {
          *(_DWORD *)(v5 + 8) = 7;
        }
        *(_DWORD *)(v5 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x20) != 0)
    {
      double result = *(void *)(v1 + 48);
      if (result)
      {
        double result = sub_1000751C0(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x40) != 0)
    {
      double result = *(void *)(v1 + 56);
      if (result)
      {
        double result = sub_100076914(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x80) != 0)
    {
      double result = *(void *)(v1 + 64);
      if (result)
      {
        double result = sub_1000780C8(result);
        unsigned int v3 = *v2;
      }
    }
  }

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      double result = *(void *)(v1 + 72);
      if (result)
      {
        double result = sub_10007225C(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x200) != 0)
    {
      double result = *(void *)(v1 + 80);
      if (result)
      {
        double result = sub_100074024(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x400) != 0)
    {
      uint64_t v6 = *(void *)(v1 + 88);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 16)) {
          *(_DWORD *)(v6 + 8) = 31;
        }
        *(_DWORD *)(v6 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x800) != 0)
    {
      uint64_t v7 = *(void *)(v1 + 96);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 16)) {
          *(_DWORD *)(v7 + 8) = 32;
        }
        *(_DWORD *)(v7 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x1000) != 0)
    {
      uint64_t v8 = *(void *)(v1 + 104);
      if (v8)
      {
        if (*(_BYTE *)(v8 + 16)) {
          *(_DWORD *)(v8 + 8) = 33;
        }
        *(_DWORD *)(v8 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x2000) != 0)
    {
      uint64_t v9 = *(void *)(v1 + 112);
      if (v9)
      {
        if (*(_BYTE *)(v9 + 16)) {
          *(_DWORD *)(v9 + 8) = 34;
        }
        *(_DWORD *)(v9 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x4000) != 0)
    {
      uint64_t v10 = *(void *)(v1 + 120);
      if (v10)
      {
        if (*(_BYTE *)(v10 + 16)) {
          *(_DWORD *)(v10 + 8) = 35;
        }
        *(_DWORD *)(v10 + 16) = 0;
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x8000) != 0)
    {
      double result = *(void *)(v1 + 128);
      if (result)
      {
        double result = sub_100079F44(result);
        unsigned int v3 = *v2;
      }
    }
  }

  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      double result = *(void *)(v1 + 136);
      if (result)
      {
        double result = sub_10007A6A4(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x20000) != 0)
    {
      double result = *(void *)(v1 + 144);
      if (result)
      {
        double result = sub_10007ADE4(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x40000) != 0)
    {
      double result = *(void *)(v1 + 152);
      if (result)
      {
        double result = sub_10007B524(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x80000) != 0)
    {
      double result = *(void *)(v1 + 160);
      if (result)
      {
        double result = sub_10007BD18(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x100000) != 0)
    {
      double result = *(void *)(v1 + 168);
      if (result)
      {
        double result = sub_10007C50C(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x200000) != 0)
    {
      double result = *(void *)(v1 + 176);
      if (result)
      {
        double result = sub_10007CDC8(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x400000) != 0)
    {
      double result = *(void *)(v1 + 184);
      if (result)
      {
        double result = sub_10007D79C(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x800000) != 0)
    {
      double result = *(void *)(v1 + 192);
      if (result)
      {
        double result = sub_10007DFB0(result);
        unsigned int v3 = *v2;
      }
    }
  }

  if (HIBYTE(v3))
  {
    if ((v3 & 0x1000000) != 0)
    {
      double result = *(void *)(v1 + 200);
      if (result)
      {
        double result = sub_10007E648(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x2000000) != 0)
    {
      double result = *(void *)(v1 + 208);
      if (result)
      {
        double result = sub_10007EFB4(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x4000000) != 0)
    {
      double result = *(void *)(v1 + 216);
      if (result)
      {
        double result = sub_10007F730(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x8000000) != 0)
    {
      double result = *(void *)(v1 + 224);
      if (result)
      {
        double result = sub_100081C1C(result);
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x10000000) != 0)
    {
      uint64_t v11 = *(void *)(v1 + 232);
      if (v11)
      {
        if (*(_BYTE *)(v11 + 20)) {
          *(void *)(v11 + 8) = 0x100000031LL;
        }
        *(_DWORD *)(v11 + 20) = 0;
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x20000000) != 0)
    {
      uint64_t v12 = *(void *)(v1 + 240);
      if (v12)
      {
        if (*(_BYTE *)(v12 + 20))
        {
          *(_DWORD *)(v12 + 8) = 50;
          *(_BYTE *)(v12 + 12) = 0;
        }

        *(_DWORD *)(v12 + 20) = 0;
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x40000000) != 0)
    {
      uint64_t v13 = *(void *)(v1 + 248);
      if (v13)
      {
        if (*(_BYTE *)(v13 + 24))
        {
          *(void *)(v13 + 8) = 51LL;
          *(_WORD *)(v13 + 16) = 0;
        }

        *(_DWORD *)(v13 + 24) = 0;
        unsigned int v3 = *v2;
      }
    }

    if ((v3 & 0x80000000) != 0)
    {
      uint64_t v14 = *(void *)(v1 + 256);
      if (v14)
      {
        if (*(_BYTE *)(v14 + 20))
        {
          *(_DWORD *)(v14 + 8) = 52;
          *(_BYTE *)(v14 + 12) = 0;
        }

        *(_DWORD *)(v14 + 20) = 0;
      }
    }
  }

  LOBYTE(v15) = *(_BYTE *)(v1 + 296);
  if ((_BYTE)v15)
  {
    if ((*(_BYTE *)(v1 + 296) & 1) != 0)
    {
      uint64_t v16 = *(void *)(v1 + 264);
      if (v16)
      {
        if (*(_BYTE *)(v16 + 16)) {
          *(_DWORD *)(v16 + 8) = 53;
        }
        *(_DWORD *)(v16 + 16) = 0;
        int v15 = *(_DWORD *)(v1 + 296);
      }
    }

    if ((v15 & 2) != 0)
    {
      uint64_t v17 = *(void *)(v1 + 272);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 16)) {
          *(_DWORD *)(v17 + 8) = 54;
        }
        *(_DWORD *)(v17 + 16) = 0;
        int v15 = *(_DWORD *)(v1 + 296);
      }
    }

    if ((v15 & 4) != 0)
    {
      double result = *(void *)(v1 + 280);
      if (result) {
        double result = sub_1000800C8(result);
      }
    }
  }

  *(void *)uint64_t v2 = 0LL;
  return result;
}

uint64_t sub_100081C1C(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 80);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(result + 24) = 48;
    *(void *)(result + 8) = 0LL;
    *(_BYTE *)(result + 28) = 0;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 80) & 0x10) != 0)
    {
      uint64_t v3 = *(void *)(result + 32);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 80) & 0x20) != 0)
    {
      uint64_t v4 = *(void *)(result + 40);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 80) & 0x40) != 0)
    {
      uint64_t v5 = *(void *)(result + 48);
      if ((_UNKNOWN *)v5 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)uint64_t v5 = 0;
          *(void *)(v5 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }

    *(_BYTE *)(result + 29) = 0;
    int v1 = *(_DWORD *)(result + 80);
  }

  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_DWORD *)(result + 72) = 0;
    if ((v1 & 0x800) != 0)
    {
      uint64_t v6 = *(void *)(result + 64);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 80) = 0;
  return result;
}

uint64_t sub_100081D64(uint64_t result)
{
  if (*(_BYTE *)(result + 20)) {
    *(void *)(result + 8) = 0x100000031LL;
  }
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100081D80(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
  {
    *(_DWORD *)(result + 8) = 50;
    *(_BYTE *)(result + 12) = 0;
  }

  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100081D9C(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(void *)(result + 8) = 51LL;
    *(_WORD *)(result + 16) = 0;
  }

  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100081DB8(uint64_t result)
{
  if (*(_BYTE *)(result + 20))
  {
    *(_DWORD *)(result + 8) = 52;
    *(_BYTE *)(result + 12) = 0;
  }

  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_100081DD4(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_DWORD *)(result + 8) = 53;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100081DEC(uint64_t result)
{
  if (*(_BYTE *)(result + 16)) {
    *(_DWORD *)(result + 8) = 54;
  }
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100081E04( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_6;
    }

    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_81;
        }
        *(_DWORD *)(a1 + 292) |= 1u;
        uint64_t v8 = *(void **)(a1 + 8);
        if (!v8)
        {
          uint64_t v8 = operator new(0x30uLL);
          *uint64_t v8 = off_10181AF18;
          v8[1] = 0x100000001LL;
          v8[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v8[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v8[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v8[5] = 0LL;
          *(void *)(a1 + 8) = v8;
        }

        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        int v10 = *((_DWORD *)this + 14);
        int v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0LL;
        }
        int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        int v14 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v14, 1);
        int v16 = v14 - 1;
        if (v16 < 0 == v15) {
          *((_DWORD *)this + 14) = v16;
        }
        uint64_t v17 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v17 + 1;
        goto LABEL_93;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_81;
        }
LABEL_93:
        *(_DWORD *)(a1 + 292) |= 2u;
        uint64_t v18 = *(void **)(a1 + 16);
        if (!v18)
        {
          uint64_t v18 = operator new(0x30uLL);
          v18[4] = 2LL;
          void *v18 = off_10181B008;
          v18[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v18[2] = 0LL;
          v18[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v18 + 10) = 0;
          *(void *)(a1 + 16) = v18;
        }

        uint64_t v19 = (char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v19;
          *((void *)this + 1) = v19 + 1;
        }

        int v20 = *((_DWORD *)this + 14);
        int v21 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v20 + 1;
        if (v20 >= v21) {
          return 0LL;
        }
        int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
        int v24 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v24, 1);
        int v25 = v24 - 1;
        if (v25 < 0 == v15) {
          *((_DWORD *)this + 14) = v25;
        }
        uint64_t v26 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v26 + 1;
LABEL_107:
        *(_DWORD *)(a1 + 292) |= 4u;
        uint64_t v27 = *(void **)(a1 + 24);
        if (!v27)
        {
          uint64_t v27 = operator new(0x20uLL);
          v27[2] = 4LL;
          *uint64_t v27 = off_10181B080;
          v27[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v27 + 6) = 0;
          *(void *)(a1 + 24) = v27;
        }

        uint64_t v28 = (char *)*((void *)this + 1);
        if ((unint64_t)v28 >= *((void *)this + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v28;
          *((void *)this + 1) = v28 + 1;
        }

        int v29 = *((_DWORD *)this + 14);
        int v30 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v29 + 1;
        if (v29 >= v30) {
          return 0LL;
        }
        int v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v31);
        int v33 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v33, 1);
        int v34 = v33 - 1;
        if (v34 < 0 == v15) {
          *((_DWORD *)this + 14) = v34;
        }
        uint64_t v35 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v35 + 1;
LABEL_121:
        *(_DWORD *)(a1 + 292) |= 8u;
        v36 = *(void **)(a1 + 32);
        if (!v36)
        {
          v36 = operator new(0x18uLL);
          void *v36 = off_10181B0F8;
          v36[1] = 5LL;
          *((_DWORD *)v36 + 4) = 0;
          *(void *)(a1 + 32) = v36;
        }

        uint64_t v37 = (char *)*((void *)this + 1);
        if ((unint64_t)v37 >= *((void *)this + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v37;
          *((void *)this + 1) = v37 + 1;
        }

        int v38 = *((_DWORD *)this + 14);
        int v39 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v38 + 1;
        if (v38 >= v39) {
          return 0LL;
        }
        int v40 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v40);
        int v42 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v42, 1);
        int v43 = v42 - 1;
        if (v43 < 0 == v15) {
          *((_DWORD *)this + 14) = v43;
        }
        v44 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v44 + 1;
LABEL_135:
        *(_DWORD *)(a1 + 292) |= 0x10u;
        uint64_t v45 = *(void **)(a1 + 40);
        if (!v45)
        {
          uint64_t v45 = operator new(0x18uLL);
          *uint64_t v45 = off_10181B1E8;
          v45[1] = 7LL;
          *((_DWORD *)v45 + 4) = 0;
          *(void *)(a1 + 40) = v45;
        }

        v46 = (char *)*((void *)this + 1);
        if ((unint64_t)v46 >= *((void *)this + 2) || *v46 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v46;
          *((void *)this + 1) = v46 + 1;
        }

        int v47 = *((_DWORD *)this + 14);
        int v48 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v47 + 1;
        if (v47 >= v48) {
          return 0LL;
        }
        int v49 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v49);
        int v51 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v51, 1);
        int v52 = v51 - 1;
        if (v52 < 0 == v15) {
          *((_DWORD *)this + 14) = v52;
        }
        uint64_t v53 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v53 + 1;
LABEL_149:
        *(_DWORD *)(a1 + 292) |= 0x20u;
        v54 = *(_DWORD **)(a1 + 48);
        if (!v54)
        {
          v54 = operator new(0x78uLL);
          v54[16] = 9;
          *(void *)v54 = off_10181B260;
          *((void *)v54 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v54 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v54 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v54 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v54 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v54 + 6) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v54 + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v54 + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v54 + 10) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_WORD *)v54 + 34) = 0;
          *((void *)v54 + 11) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v54 + 12) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v54 + 13) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v54 + 14) = 0LL;
          *(void *)(a1 + 48) = v54;
        }

        uint64_t v55 = (char *)*((void *)this + 1);
        if ((unint64_t)v55 >= *((void *)this + 2) || *v55 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v55;
          *((void *)this + 1) = v55 + 1;
        }

        int v56 = *((_DWORD *)this + 14);
        int v57 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v56 + 1;
        if (v56 >= v57) {
          return 0LL;
        }
        int v58 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v58);
        int v60 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v60, 1);
        int v61 = v60 - 1;
        if (v61 < 0 == v15) {
          *((_DWORD *)this + 14) = v61;
        }
        v62 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v62 + 1;
LABEL_163:
        *(_DWORD *)(a1 + 292) |= 0x40u;
        uint64_t v63 = *(_DWORD **)(a1 + 56);
        if (!v63)
        {
          uint64_t v63 = operator new(0x58uLL);
          v63[12] = 10;
          *(void *)uint64_t v63 = off_10181B2D8;
          *((void *)v63 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v63 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v63 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v63 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v63 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v63 + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v63 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_WORD *)v63 + 26) = 0;
          *((void *)v63 + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v63 + 10) = 0LL;
          *(void *)(a1 + 56) = v63;
        }

        v64 = (char *)*((void *)this + 1);
        if ((unint64_t)v64 >= *((void *)this + 2) || *v64 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v64;
          *((void *)this + 1) = v64 + 1;
        }

        int v65 = *((_DWORD *)this + 14);
        int v66 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v65 + 1;
        if (v65 >= v66) {
          return 0LL;
        }
        int v67 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v67);
        int v69 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v69, 1);
        int v70 = v69 - 1;
        if (v70 < 0 == v15) {
          *((_DWORD *)this + 14) = v70;
        }
        v71 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v71 + 1;
LABEL_177:
        *(_DWORD *)(a1 + 292) |= 0x80u;
        uint64_t v72 = *(void **)(a1 + 64);
        if (!v72)
        {
          uint64_t v72 = operator new(0x48uLL);
          v72[5] = 0LL;
          *((_DWORD *)v72 + 12) = 0;
          *uint64_t v72 = off_10181B3C8;
          v72[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v72[2] = 12LL;
          v72[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v72[4] = 0LL;
          v72[7] = 0LL;
          v72[8] = 0LL;
          *(void *)(a1 + 64) = v72;
        }

        v73 = (char *)*((void *)this + 1);
        if ((unint64_t)v73 >= *((void *)this + 2) || *v73 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v73;
          *((void *)this + 1) = v73 + 1;
        }

        int v74 = *((_DWORD *)this + 14);
        int v75 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v74 + 1;
        if (v74 >= v75) {
          return 0LL;
        }
        int v76 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v76);
        int v78 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v78, 1);
        int v79 = v78 - 1;
        if (v79 < 0 == v15) {
          *((_DWORD *)this + 14) = v79;
        }
        v80 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v80 + 1;
LABEL_191:
        *(_DWORD *)(a1 + 292) |= 0x100u;
        v81 = *(void **)(a1 + 72);
        if (!v81)
        {
          v81 = operator new(0x30uLL);
          void *v81 = off_10181AF90;
          v81[1] = 0x10000000DLL;
          v81[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v81[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v81[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v81[5] = 0LL;
          *(void *)(a1 + 72) = v81;
        }

        v82 = (char *)*((void *)this + 1);
        if ((unint64_t)v82 >= *((void *)this + 2) || *v82 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v82;
          *((void *)this + 1) = v82 + 1;
        }

        int v83 = *((_DWORD *)this + 14);
        int v84 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v83 + 1;
        if (v83 >= v84) {
          return 0LL;
        }
        int v85 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v85);
        int v87 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v87, 1);
        int v88 = v87 - 1;
        if (v88 < 0 == v15) {
          *((_DWORD *)this + 14) = v88;
        }
        v89 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v89 + 1;
LABEL_205:
        *(_DWORD *)(a1 + 292) |= 0x200u;
        v90 = *(void **)(a1 + 80);
        if (!v90)
        {
          v90 = operator new(0x30uLL);
          v90[4] = 14LL;
          void *v90 = off_10181B170;
          v90[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v90[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v90[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v90 + 10) = 0;
          *(void *)(a1 + 80) = v90;
        }

        v91 = (char *)*((void *)this + 1);
        if ((unint64_t)v91 >= *((void *)this + 2) || *v91 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v91;
          *((void *)this + 1) = v91 + 1;
        }

        int v92 = *((_DWORD *)this + 14);
        int v93 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v92 + 1;
        if (v92 >= v93) {
          return 0LL;
        }
        int v94 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v94);
        int v96 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v96, 1);
        int v97 = v96 - 1;
        if (v97 < 0 == v15) {
          *((_DWORD *)this + 14) = v97;
        }
        v98 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v98 + 1;
LABEL_219:
        *(_DWORD *)(a1 + 292) |= 0x400u;
        v99 = *(void **)(a1 + 88);
        if (!v99)
        {
          v99 = operator new(0x18uLL);
          void *v99 = off_10181B440;
          v99[1] = 31LL;
          *((_DWORD *)v99 + 4) = 0;
          *(void *)(a1 + 88) = v99;
        }

        v100 = (char *)*((void *)this + 1);
        if ((unint64_t)v100 >= *((void *)this + 2) || *v100 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v100;
          *((void *)this + 1) = v100 + 1;
        }

        int v101 = *((_DWORD *)this + 14);
        int v102 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v101 + 1;
        if (v101 >= v102) {
          return 0LL;
        }
        int v103 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v103);
        int v105 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v105, 1);
        int v106 = v105 - 1;
        if (v106 < 0 == v15) {
          *((_DWORD *)this + 14) = v106;
        }
        v107 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v107 + 1;
LABEL_233:
        *(_DWORD *)(a1 + 292) |= 0x800u;
        v108 = *(void **)(a1 + 96);
        if (!v108)
        {
          v108 = operator new(0x18uLL);
          void *v108 = off_10181B4B8;
          v108[1] = 32LL;
          *((_DWORD *)v108 + 4) = 0;
          *(void *)(a1 + 96) = v108;
        }

        v109 = (char *)*((void *)this + 1);
        if ((unint64_t)v109 >= *((void *)this + 2) || *v109 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v109;
          *((void *)this + 1) = v109 + 1;
        }

        int v110 = *((_DWORD *)this + 14);
        int v111 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v110 + 1;
        if (v110 >= v111) {
          return 0LL;
        }
        int v112 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v112);
        int v114 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v114, 1);
        int v115 = v114 - 1;
        if (v115 < 0 == v15) {
          *((_DWORD *)this + 14) = v115;
        }
        v116 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v116 + 2;
LABEL_248:
        *(_DWORD *)(a1 + 292) |= 0x1000u;
        v117 = *(void **)(a1 + 104);
        if (!v117)
        {
          v117 = operator new(0x18uLL);
          void *v117 = off_10181B530;
          v117[1] = 33LL;
          *((_DWORD *)v117 + 4) = 0;
          *(void *)(a1 + 104) = v117;
        }

        v118 = (char *)*((void *)this + 1);
        if ((unint64_t)v118 >= *((void *)this + 2) || *v118 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v118;
          *((void *)this + 1) = v118 + 1;
        }

        int v119 = *((_DWORD *)this + 14);
        int v120 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v119 + 1;
        if (v119 >= v120) {
          return 0LL;
        }
        int v121 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v121);
        int v123 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v123, 1);
        int v124 = v123 - 1;
        if (v124 < 0 == v15) {
          *((_DWORD *)this + 14) = v124;
        }
        v125 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v125 + 2;
LABEL_263:
        *(_DWORD *)(a1 + 292) |= 0x2000u;
        v126 = *(void **)(a1 + 112);
        if (!v126)
        {
          v126 = operator new(0x18uLL);
          void *v126 = off_10181B5A8;
          v126[1] = 34LL;
          *((_DWORD *)v126 + 4) = 0;
          *(void *)(a1 + 112) = v126;
        }

        v127 = (char *)*((void *)this + 1);
        if ((unint64_t)v127 >= *((void *)this + 2) || *v127 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v127;
          *((void *)this + 1) = v127 + 1;
        }

        int v128 = *((_DWORD *)this + 14);
        int v129 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v128 + 1;
        if (v128 >= v129) {
          return 0LL;
        }
        int v130 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v130);
        int v132 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v132, 1);
        int v133 = v132 - 1;
        if (v133 < 0 == v15) {
          *((_DWORD *)this + 14) = v133;
        }
        v134 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v134 + 2;
LABEL_278:
        *(_DWORD *)(a1 + 292) |= 0x4000u;
        v135 = *(void **)(a1 + 120);
        if (!v135)
        {
          v135 = operator new(0x18uLL);
          void *v135 = off_10181B620;
          v135[1] = 35LL;
          *((_DWORD *)v135 + 4) = 0;
          *(void *)(a1 + 120) = v135;
        }

        v136 = (char *)*((void *)this + 1);
        if ((unint64_t)v136 >= *((void *)this + 2) || *v136 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v136;
          *((void *)this + 1) = v136 + 1;
        }

        int v137 = *((_DWORD *)this + 14);
        int v138 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v137 + 1;
        if (v137 >= v138) {
          return 0LL;
        }
        int v139 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v139);
        int v141 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v141, 1);
        int v142 = v141 - 1;
        if (v142 < 0 == v15) {
          *((_DWORD *)this + 14) = v142;
        }
        v143 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v143 + 2;
LABEL_293:
        *(_DWORD *)(a1 + 292) |= 0x8000u;
        v144 = *(void **)(a1 + 128);
        if (!v144)
        {
          v144 = operator new(0x28uLL);
          v144[3] = 36LL;
          void *v144 = off_10181B698;
          v144[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v144[2] = 0LL;
          *((_DWORD *)v144 + 8) = 0;
          *(void *)(a1 + 128) = v144;
        }

        v145 = (char *)*((void *)this + 1);
        if ((unint64_t)v145 >= *((void *)this + 2) || *v145 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v145;
          *((void *)this + 1) = v145 + 1;
        }

        int v146 = *((_DWORD *)this + 14);
        int v147 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v146 + 1;
        if (v146 >= v147) {
          return 0LL;
        }
        int v148 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v148);
        int v150 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v150, 1);
        int v151 = v150 - 1;
        if (v151 < 0 == v15) {
          *((_DWORD *)this + 14) = v151;
        }
        v152 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v152 + 2;
LABEL_308:
        *(_DWORD *)(a1 + 292) |= 0x10000u;
        v153 = *(void **)(a1 + 136);
        if (!v153)
        {
          v153 = operator new(0x28uLL);
          v153[3] = 37LL;
          void *v153 = off_10181B710;
          v153[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v153[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v153 + 8) = 0;
          *(void *)(a1 + 136) = v153;
        }

        v154 = (char *)*((void *)this + 1);
        if ((unint64_t)v154 >= *((void *)this + 2) || *v154 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v154;
          *((void *)this + 1) = v154 + 1;
        }

        int v155 = *((_DWORD *)this + 14);
        int v156 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v155 + 1;
        if (v155 >= v156) {
          return 0LL;
        }
        int v157 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v157);
        int v159 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v159, 1);
        int v160 = v159 - 1;
        if (v160 < 0 == v15) {
          *((_DWORD *)this + 14) = v160;
        }
        v161 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v161 + 2;
LABEL_323:
        *(_DWORD *)(a1 + 292) |= 0x20000u;
        v162 = *(void **)(a1 + 144);
        if (!v162)
        {
          v162 = operator new(0x28uLL);
          v162[3] = 38LL;
          void *v162 = off_10181B788;
          v162[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v162[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v162 + 8) = 0;
          *(void *)(a1 + 144) = v162;
        }

        v163 = (char *)*((void *)this + 1);
        if ((unint64_t)v163 >= *((void *)this + 2) || *v163 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v163;
          *((void *)this + 1) = v163 + 1;
        }

        int v164 = *((_DWORD *)this + 14);
        int v165 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v164 + 1;
        if (v164 >= v165) {
          return 0LL;
        }
        int v166 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v166);
        int v168 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v168, 1);
        int v169 = v168 - 1;
        if (v169 < 0 == v15) {
          *((_DWORD *)this + 14) = v169;
        }
        v170 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v170 + 2;
LABEL_338:
        *(_DWORD *)(a1 + 292) |= 0x40000u;
        v171 = *(void **)(a1 + 152);
        if (!v171)
        {
          v171 = operator new(0x28uLL);
          v171[3] = 39LL;
          void *v171 = off_10181B800;
          v171[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v171[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v171 + 8) = 0;
          *(void *)(a1 + 152) = v171;
        }

        v172 = (char *)*((void *)this + 1);
        if ((unint64_t)v172 >= *((void *)this + 2) || *v172 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v172;
          *((void *)this + 1) = v172 + 1;
        }

        int v173 = *((_DWORD *)this + 14);
        int v174 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v173 + 1;
        if (v173 >= v174) {
          return 0LL;
        }
        int v175 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v175);
        int v177 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v177, 1);
        int v178 = v177 - 1;
        if (v178 < 0 == v15) {
          *((_DWORD *)this + 14) = v178;
        }
        v179 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v179 + 2;
LABEL_353:
        *(_DWORD *)(a1 + 292) |= 0x80000u;
        v180 = *(_DWORD **)(a1 + 160);
        if (!v180)
        {
          v180 = operator new(0x28uLL);
          v180[4] = 40;
          *(void *)v180 = off_10181B878;
          *((void *)v180 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v180 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v180 + 4) = 0LL;
          *((_BYTE *)v180 + 20) = 0;
          *(void *)(a1 + 160) = v180;
        }

        v181 = (char *)*((void *)this + 1);
        if ((unint64_t)v181 >= *((void *)this + 2) || *v181 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v181;
          *((void *)this + 1) = v181 + 1;
        }

        int v182 = *((_DWORD *)this + 14);
        int v183 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v182 + 1;
        if (v182 >= v183) {
          return 0LL;
        }
        int v184 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v184);
        int v186 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v186, 1);
        int v187 = v186 - 1;
        if (v187 < 0 == v15) {
          *((_DWORD *)this + 14) = v187;
        }
        v188 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v188 + 2;
LABEL_368:
        *(_DWORD *)(a1 + 292) |= 0x100000u;
        v189 = *(void **)(a1 + 168);
        if (!v189)
        {
          v189 = operator new(0x28uLL);
          v189[3] = 41LL;
          void *v189 = off_10181B8F0;
          v189[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v189[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v189 + 8) = 0;
          *(void *)(a1 + 168) = v189;
        }

        v190 = (char *)*((void *)this + 1);
        if ((unint64_t)v190 >= *((void *)this + 2) || *v190 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v190;
          *((void *)this + 1) = v190 + 1;
        }

        int v191 = *((_DWORD *)this + 14);
        int v192 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v191 + 1;
        if (v191 >= v192) {
          return 0LL;
        }
        int v193 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v193);
        int v195 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v195, 1);
        int v196 = v195 - 1;
        if (v196 < 0 == v15) {
          *((_DWORD *)this + 14) = v196;
        }
        v197 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v197 + 2;
LABEL_383:
        *(_DWORD *)(a1 + 292) |= 0x200000u;
        v198 = *(void **)(a1 + 176);
        if (!v198)
        {
          v198 = operator new(0x38uLL);
          v198[5] = 42LL;
          void *v198 = off_10181B968;
          v198[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v198[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v198[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v198[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v198 + 12) = 0;
          *(void *)(a1 + 176) = v198;
        }

        v199 = (char *)*((void *)this + 1);
        if ((unint64_t)v199 >= *((void *)this + 2) || *v199 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v199;
          *((void *)this + 1) = v199 + 1;
        }

        int v200 = *((_DWORD *)this + 14);
        int v201 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v200 + 1;
        if (v200 >= v201) {
          return 0LL;
        }
        int v202 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v202);
        int v204 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v204, 1);
        int v205 = v204 - 1;
        if (v205 < 0 == v15) {
          *((_DWORD *)this + 14) = v205;
        }
        v206 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v206 + 2;
LABEL_398:
        *(_DWORD *)(a1 + 292) |= 0x400000u;
        v207 = *(void **)(a1 + 184);
        if (!v207)
        {
          v207 = operator new(0x30uLL);
          v207[4] = 43LL;
          void *v207 = off_10181B9E0;
          v207[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v207[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v207[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v207 + 10) = 0;
          *(void *)(a1 + 184) = v207;
        }

        v208 = (char *)*((void *)this + 1);
        if ((unint64_t)v208 >= *((void *)this + 2) || *v208 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v208;
          *((void *)this + 1) = v208 + 1;
        }

        int v209 = *((_DWORD *)this + 14);
        int v210 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v209 + 1;
        if (v209 >= v210) {
          return 0LL;
        }
        int v211 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v211);
        int v213 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v213, 1);
        int v214 = v213 - 1;
        if (v214 < 0 == v15) {
          *((_DWORD *)this + 14) = v214;
        }
        v215 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v215 + 2;
LABEL_413:
        *(_DWORD *)(a1 + 292) |= 0x800000u;
        v216 = *(void **)(a1 + 192);
        if (!v216)
        {
          v216 = operator new(0x20uLL);
          v216[2] = 44LL;
          void *v216 = off_10181BA58;
          v216[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v216 + 6) = 0;
          *(void *)(a1 + 192) = v216;
        }

        v217 = (char *)*((void *)this + 1);
        if ((unint64_t)v217 >= *((void *)this + 2) || *v217 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v217;
          *((void *)this + 1) = v217 + 1;
        }

        int v218 = *((_DWORD *)this + 14);
        int v219 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v218 + 1;
        if (v218 >= v219) {
          return 0LL;
        }
        int v220 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v220);
        int v222 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v222, 1);
        int v223 = v222 - 1;
        if (v223 < 0 == v15) {
          *((_DWORD *)this + 14) = v223;
        }
        v224 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v224 + 2;
LABEL_428:
        *(_DWORD *)(a1 + 292) |= 0x1000000u;
        v225 = *(void **)(a1 + 200);
        if (!v225)
        {
          v225 = operator new(0x30uLL);
          void *v225 = off_10181BAD0;
          v225[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v225[2] = 45LL;
          v225[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v225[4] = 0LL;
          v225[5] = 0LL;
          *(void *)(a1 + 200) = v225;
        }

        v226 = (char *)*((void *)this + 1);
        if ((unint64_t)v226 >= *((void *)this + 2) || *v226 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v226;
          *((void *)this + 1) = v226 + 1;
        }

        int v227 = *((_DWORD *)this + 14);
        int v228 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v227 + 1;
        if (v227 >= v228) {
          return 0LL;
        }
        int v229 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v229);
        int v231 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v231, 1);
        int v232 = v231 - 1;
        if (v232 < 0 == v15) {
          *((_DWORD *)this + 14) = v232;
        }
        v233 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v233 + 2;
LABEL_443:
        *(_DWORD *)(a1 + 292) |= 0x2000000u;
        v234 = *(void **)(a1 + 208);
        if (!v234)
        {
          v234 = operator new(0x20uLL);
          v234[2] = 46LL;
          void *v234 = off_10181BB48;
          v234[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v234 + 6) = 0;
          *(void *)(a1 + 208) = v234;
        }

        v235 = (char *)*((void *)this + 1);
        if ((unint64_t)v235 >= *((void *)this + 2) || *v235 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v235;
          *((void *)this + 1) = v235 + 1;
        }

        int v236 = *((_DWORD *)this + 14);
        int v237 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v236 + 1;
        if (v236 >= v237) {
          return 0LL;
        }
        int v238 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v238);
        int v240 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v240, 1);
        int v241 = v240 - 1;
        if (v241 < 0 == v15) {
          *((_DWORD *)this + 14) = v241;
        }
        v242 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v242 + 2;
LABEL_458:
        *(_DWORD *)(a1 + 292) |= 0x4000000u;
        v243 = *(void **)(a1 + 216);
        if (!v243)
        {
          v243 = operator new(0x38uLL);
          void *v243 = off_10181BBC0;
          v243[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v243[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v243[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v243[3] = 0x10000002FLL;
          *((_BYTE *)v243 + 40) = 0;
          *((_DWORD *)v243 + 11) = 0;
          *((_DWORD *)v243 + 12) = 0;
          *(void *)(a1 + 216) = v243;
        }

        v244 = (char *)*((void *)this + 1);
        if ((unint64_t)v244 >= *((void *)this + 2) || *v244 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v244;
          *((void *)this + 1) = v244 + 1;
        }

        int v245 = *((_DWORD *)this + 14);
        int v246 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v245 + 1;
        if (v245 >= v246) {
          return 0LL;
        }
        int v247 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v247);
        int v249 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v249, 1);
        int v250 = v249 - 1;
        if (v250 < 0 == v15) {
          *((_DWORD *)this + 14) = v250;
        }
        v251 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v251 + 2;
LABEL_473:
        *(_DWORD *)(a1 + 292) |= 0x8000000u;
        v252 = *(_DWORD **)(a1 + 224);
        if (!v252)
        {
          v252 = operator new(0x58uLL);
          v252[6] = 48;
          *(void *)v252 = off_10181BDA0;
          *((void *)v252 + 1) = 0LL;
          *((_WORD *)v252 + 14) = 0;
          *((void *)v252 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v252 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v252 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v252 + 6) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v252 + 7) = 0LL;
          *((void *)v252 + 9) = 0LL;
          *((void *)v252 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v252[20] = 0;
          *(void *)(a1 + 224) = v252;
        }

        v253 = (char *)*((void *)this + 1);
        if ((unint64_t)v253 >= *((void *)this + 2) || *v253 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v253;
          *((void *)this + 1) = v253 + 1;
        }

        int v254 = *((_DWORD *)this + 14);
        int v255 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v254 + 1;
        if (v254 >= v255) {
          return 0LL;
        }
        int v256 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v256);
        int v258 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v258, 1);
        int v259 = v258 - 1;
        if (v259 < 0 == v15) {
          *((_DWORD *)this + 14) = v259;
        }
        v260 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v260 + 2;
LABEL_488:
        *(_DWORD *)(a1 + 292) |= 0x10000000u;
        v261 = *(char **)(a1 + 232);
        if (!v261)
        {
          v261 = (char *)operator new(0x18uLL);
          *(void *)v261 = off_10181BE18;
          *(_OWORD *)(v261 + 8) = xmmword_1012CA3E0;
          *(void *)(a1 + 232) = v261;
        }

        v262 = (char *)*((void *)this + 1);
        if ((unint64_t)v262 >= *((void *)this + 2) || *v262 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v262;
          *((void *)this + 1) = v262 + 1;
        }

        int v263 = *((_DWORD *)this + 14);
        int v264 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v263 + 1;
        if (v263 >= v264) {
          return 0LL;
        }
        int v265 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v265);
        int v267 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v267, 1);
        int v268 = v267 - 1;
        if (v268 < 0 == v15) {
          *((_DWORD *)this + 14) = v268;
        }
        v269 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v269 + 2;
LABEL_503:
        *(_DWORD *)(a1 + 292) |= 0x20000000u;
        v270 = *(_DWORD **)(a1 + 240);
        if (!v270)
        {
          v270 = operator new(0x18uLL);
          *(void *)v270 = off_10181BE90;
          v270[2] = 50;
          *((_BYTE *)v270 + 12) = 0;
          *((void *)v270 + 2) = 0LL;
          *(void *)(a1 + 240) = v270;
        }

        v271 = (char *)*((void *)this + 1);
        if ((unint64_t)v271 >= *((void *)this + 2) || *v271 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v271;
          *((void *)this + 1) = v271 + 1;
        }

        int v272 = *((_DWORD *)this + 14);
        int v273 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v272 + 1;
        if (v272 >= v273) {
          return 0LL;
        }
        int v274 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v274);
        int v276 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v276, 1);
        int v277 = v276 - 1;
        if (v277 < 0 == v15) {
          *((_DWORD *)this + 14) = v277;
        }
        v278 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v278 + 2;
LABEL_518:
        *(_DWORD *)(a1 + 292) |= 0x40000000u;
        v279 = *(void **)(a1 + 248);
        if (!v279)
        {
          v279 = operator new(0x20uLL);
          void *v279 = off_10181BF08;
          v279[1] = 51LL;
          *((_DWORD *)v279 + 5) = 0;
          *((_DWORD *)v279 + 6) = 0;
          *((_WORD *)v279 + 8) = 0;
          *(void *)(a1 + 248) = v279;
        }

        v280 = (char *)*((void *)this + 1);
        if ((unint64_t)v280 >= *((void *)this + 2) || *v280 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v280;
          *((void *)this + 1) = v280 + 1;
        }

        int v281 = *((_DWORD *)this + 14);
        int v282 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v281 + 1;
        if (v281 >= v282) {
          return 0LL;
        }
        int v283 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v283);
        int v285 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v285, 1);
        int v286 = v285 - 1;
        if (v286 < 0 == v15) {
          *((_DWORD *)this + 14) = v286;
        }
        v287 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v287 + 2;
LABEL_533:
        *(_DWORD *)(a1 + 292) |= 0x80000000;
        v288 = *(_DWORD **)(a1 + 256);
        if (!v288)
        {
          v288 = operator new(0x18uLL);
          *(void *)v288 = off_10181BF80;
          v288[2] = 52;
          *((_BYTE *)v288 + 12) = 0;
          *((void *)v288 + 2) = 0LL;
          *(void *)(a1 + 256) = v288;
        }

        v289 = (char *)*((void *)this + 1);
        if ((unint64_t)v289 >= *((void *)this + 2) || *v289 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v289;
          *((void *)this + 1) = v289 + 1;
        }

        int v290 = *((_DWORD *)this + 14);
        int v291 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v290 + 1;
        if (v290 >= v291) {
          return 0LL;
        }
        int v292 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v292);
        int v294 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v294, 1);
        int v295 = v294 - 1;
        if (v295 < 0 == v15) {
          *((_DWORD *)this + 14) = v295;
        }
        v296 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v296 + 2;
LABEL_548:
        *(_DWORD *)(a1 + 296) |= 1u;
        v297 = *(void **)(a1 + 264);
        if (!v297)
        {
          v297 = operator new(0x18uLL);
          void *v297 = off_10181BFF8;
          v297[1] = 53LL;
          *((_DWORD *)v297 + 4) = 0;
          *(void *)(a1 + 264) = v297;
        }

        v298 = (char *)*((void *)this + 1);
        if ((unint64_t)v298 >= *((void *)this + 2) || *v298 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v298;
          *((void *)this + 1) = v298 + 1;
        }

        int v299 = *((_DWORD *)this + 14);
        int v300 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v299 + 1;
        if (v299 >= v300) {
          return 0LL;
        }
        int v301 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v301);
        int v303 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v303, 1);
        int v304 = v303 - 1;
        if (v304 < 0 == v15) {
          *((_DWORD *)this + 14) = v304;
        }
        v305 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v305 + 2;
LABEL_563:
        *(_DWORD *)(a1 + 296) |= 2u;
        v306 = *(void **)(a1 + 272);
        if (!v306)
        {
          v306 = operator new(0x18uLL);
          void *v306 = off_10181C070;
          v306[1] = 54LL;
          *((_DWORD *)v306 + 4) = 0;
          *(void *)(a1 + 272) = v306;
        }

        v307 = (char *)*((void *)this + 1);
        if ((unint64_t)v307 >= *((void *)this + 2) || *v307 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v307;
          *((void *)this + 1) = v307 + 1;
        }

        int v308 = *((_DWORD *)this + 14);
        int v309 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v308 + 1;
        if (v308 >= v309) {
          return 0LL;
        }
        int v310 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v310);
        int v312 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v312, 1);
        int v313 = v312 - 1;
        if (v313 < 0 == v15) {
          *((_DWORD *)this + 14) = v313;
        }
        v314 = (unsigned __int8 *)*((void *)this + 1);
        *((void *)this + 1) = v314 + 2;
LABEL_578:
        *(_DWORD *)(a1 + 296) |= 4u;
        v315 = *(void **)(a1 + 280);
        if (!v315)
        {
          v315 = operator new(0x20uLL);
          v315[2] = 55LL;
          void *v315 = off_10181BC38;
          v315[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v315 + 6) = 0;
          *(void *)(a1 + 280) = v315;
        }

        v316 = (char *)*((void *)this + 1);
        if ((unint64_t)v316 >= *((void *)this + 2) || *v316 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v324)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v324 = *v316;
          *((void *)this + 1) = v316 + 1;
        }

        int v317 = *((_DWORD *)this + 14);
        int v318 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v317 + 1;
        if (v317 >= v318) {
          return 0LL;
        }
        int v319 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v324);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v319);
        int v321 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v321, 1);
        int v322 = v321 - 1;
        if (v322 < 0 == v15) {
          *((_DWORD *)this + 14) = v322;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }

        break;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_107;
        }
        goto LABEL_81;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_121;
        }
        goto LABEL_81;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_135;
        }
        goto LABEL_81;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_149;
        }
        goto LABEL_81;
      case 0xAu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_163;
        }
        goto LABEL_81;
      case 0xBu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_177;
        }
        goto LABEL_81;
      case 0xCu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_191;
        }
        goto LABEL_81;
      case 0xDu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_205;
        }
        goto LABEL_81;
      case 0xEu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_219;
        }
        goto LABEL_81;
      case 0xFu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_233;
        }
        goto LABEL_81;
      case 0x10u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_248;
        }
        goto LABEL_81;
      case 0x11u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_263;
        }
        goto LABEL_81;
      case 0x12u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_278;
        }
        goto LABEL_81;
      case 0x13u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_293;
        }
        goto LABEL_81;
      case 0x14u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_308;
        }
        goto LABEL_81;
      case 0x15u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_323;
        }
        goto LABEL_81;
      case 0x16u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_338;
        }
        goto LABEL_81;
      case 0x17u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_353;
        }
        goto LABEL_81;
      case 0x18u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_368;
        }
        goto LABEL_81;
      case 0x19u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_383;
        }
        goto LABEL_81;
      case 0x1Au:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_398;
        }
        goto LABEL_81;
      case 0x1Bu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_413;
        }
        goto LABEL_81;
      case 0x1Cu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_428;
        }
        goto LABEL_81;
      case 0x1Du:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_443;
        }
        goto LABEL_81;
      case 0x1Eu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_458;
        }
        goto LABEL_81;
      case 0x1Fu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_473;
        }
        goto LABEL_81;
      case 0x20u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_488;
        }
        goto LABEL_81;
      case 0x21u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_503;
        }
        goto LABEL_81;
      case 0x22u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_518;
        }
        goto LABEL_81;
      case 0x23u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_533;
        }
        goto LABEL_81;
      case 0x24u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_548;
        }
        goto LABEL_81;
      case 0x25u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_563;
        }
        goto LABEL_81;
      case 0x26u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_81;
        }
        goto LABEL_578;
      default:
        int v7 = TagFallback & 7;
LABEL_81:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_1000844D4( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 292);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A0978 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 292);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A0978 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }

LABEL_49:
  uint64_t v12 = *(void *)(v5 + 48);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A0978 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v12,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_55;
  }

  uint64_t v29 = *(void *)(a1 + 56);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_1019A0978 + 56);
  }
  uint64_t v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100077230(v29, a2);
  uint64_t v31 = (int)v30;
  else {
    uint64_t v32 = 1;
  }
  uint64_t v4 = (v4 + v31 + v32 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x80) != 0)
  {
LABEL_55:
    uint64_t v33 = *(void *)(a1 + 64);
    if (!v33) {
      uint64_t v33 = *(void *)(qword_1019A0978 + 64);
    }
    uint64_t v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100078808(v33, a2);
    uint64_t v35 = (int)v34;
    else {
      uint64_t v36 = 1;
    }
    uint64_t v4 = (v4 + v35 + v36 + 1);
    uint64_t v3 = *(_DWORD *)(a1 + 292);
  }

  *(void *)buf = &v54;
  sub_10001A350((void ***)buf);
  sub_100019CEC((uint64_t)v56);
  *(void *)buf = &v61;
  sub_10001A350((void ***)buf);
  *(void *)buf = v64;
  sub_100012948((void ***)buf);
  return sub_100019CEC((uint64_t)v65);
}

  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, std::string *, uint64_t, uint64_t))(*(void *)v54 + 16LL))( __p,  v54,  a1,  a2,  &v58,  a3,  a4);
  uint64_t v42 = *(void **)a6;
  if (*(void *)a6)
  {
    *(void *)(a6 + 8) = v42;
    operator delete(v42);
    *(void *)a6 = 0LL;
    *(void *)(a6 + 8) = 0LL;
    *(void *)(a6 + 16) = 0LL;
  }

  *(_OWORD *)a6 = *(_OWORD *)__p;
  *(void **)(a6 + 16) = __p[2];
  memset(__p, 0, 24);
  *(_DWORD *)(a6 + 24) = __p[3];
  int v43 = *(void **)(a6 + 32);
  if (v43)
  {
    *(void *)(a6 + 40) = v43;
    operator delete(v43);
    *(void *)(a6 + 32) = 0LL;
    *(void *)(a6 + 40) = 0LL;
    *(void *)(a6 + 48) = 0LL;
  }

  *(_OWORD *)(a6 + 32) = *(_OWORD *)&__p[4];
  *(void **)(a6 + 48) = __p[6];
  memset(&__p[4], 0, 24);
  v44 = sub_10004ABE4(a6 + 56, &v62);
  if (v63 && v62.n128_u64[0])
  {
    v62.n128_u64[1] = v62.n128_u64[0];
    operator delete((void *)v62.n128_u64[0]);
  }

  if (__p[4])
  {
    __p[5] = __p[4];
    operator delete(__p[4]);
  }

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (v33)
  {
    uint64_t v45 = sub_10000C6AC(a3);
    sub_100041380((uint64_t *)a6, v45);
  }

  if (v60)
  {
    v46 = v59;
    if (v59 == &v58)
    {
      int v47 = 4LL;
      v46 = &v58;
    }

    else
    {
      if (!v59) {
        goto LABEL_68;
      }
      int v47 = 5LL;
    }

    (*(void (**)(__n128))(v46->__r_.__value_.__r.__words[0] + 8 * v47))(v44);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(void *)(v5 + 56),  (unint64_t)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_51;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A,  (int)a2,  *(double *)(v5 + 104),  a3);
  int v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }

  uint64_t v29 = *(void *)(a1 + 56);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_1019A0AF0 + 56);
  }
  uint64_t v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001CC354(v29, a2);
  uint64_t v31 = (int)v30;
  else {
    uint64_t v32 = 1;
  }
  uint64_t v4 = (v4 + v31 + v32 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 0x80) != 0)
  {
LABEL_55:
    uint64_t v33 = *(void *)(a1 + 64);
    if (!v33) {
      uint64_t v33 = *(void *)(qword_1019A0AF0 + 64);
    }
    uint64_t v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001CCB6C(v33, a2);
    uint64_t v35 = (int)v34;
    else {
      uint64_t v36 = 1;
    }
    uint64_t v4 = (v4 + v35 + v36 + 1);
    uint64_t v3 = *(_DWORD *)(a1 + 92);
  }

  uint64_t v18 = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 152) |= 0x800u;
  *(void *)(a1 + 88) = v18;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x1000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }

  uint64_t v28 = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 364) |= 0x2000u;
  *(_DWORD *)(a1 + 84) = v28;
  uint64_t v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x4000) == 0)
  {
LABEL_32:
    if ((v13 & 0x8000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_51;
  }

  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

  uint64_t v5 = v4 + 2;
  if ((v3 & 0x20) == 0) {
    uint64_t v5 = v4;
  }
  if ((v3 & 0x40) != 0) {
    v5 += 2;
  }
  if ((v3 & 0x80) != 0) {
    v5 += 2;
  }
LABEL_55:
  if ((v3 & 0x100) != 0) {
    uint64_t result = v5 + 5;
  }
  else {
    uint64_t result = v5;
  }
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

      uint64_t v29 = (void *)v9[1];
      if (v29)
      {
        do
        {
          uint64_t v30 = v29;
          uint64_t v29 = (void *)*v29;
        }

        while (v29);
      }

      else
      {
        do
        {
          uint64_t v30 = (void *)v9[2];
          uint64_t v13 = *v30 == (void)v9;
          uint64_t v9 = v30;
        }

        while (!v13);
      }

      uint64_t v9 = v30;
      if (v30 == (void *)(a1 + 248))
      {
        if ((v10 & 1) != 0) {
          sub_10042AFE8(a1);
        }
        return;
      }
    }

    if (*((_DWORD *)v9 + 224) != 1) {
      goto LABEL_34;
    }
    if ((a3 & 1) != 0 || *(_BYTE *)(a1 + 667)) {
      goto LABEL_20;
    }
    uint64_t v21 = sub_10042CC1C();
    if (!v21)
    {
      LOBYTE(v12) = *a2;
      goto LABEL_34;
    }

    LOBYTE(v12) = *a2;
    if (v21[1])
    {
      if (*v21)
      {
LABEL_20:
        if (v12 == 5)
        {
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101838C20);
          }
          uint64_t v15 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v16 = (char)*a2;
            uint64_t v17 = *((char *)v9 + 901);
            *(_DWORD *)buf = 67240448;
            v46 = v16;
            int v47 = 1026;
            int v48 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "got better location provider,%{public}d,NOT stopping worse location provider,%{public}d,isAccessorySpecialCase,1",  buf,  0xEu);
          }

          if (!sub_1002921D0(115, 2)) {
            goto LABEL_49;
          }
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101838C20);
          }
          uint64_t v18 = (char)*a2;
          uint64_t v19 = *((char *)v9 + 901);
          uint64_t v41 = 67240448;
          uint64_t v42 = v18;
          int v43 = 1026;
          v44 = v19;
          LODWORD(v40) = 14;
          uint64_t v20 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "got better location provider,%{public}d,NOT stopping worse location provider,%{public}d, isAccessorySpecialCase,1",  &v41,  v40);
          goto LABEL_63;
        }
      }
    }

  uint64_t v41 = v148;
  (*(void (**)(void, BOOL))(**(void **)(a1 + 288) + 376LL))(*(void *)(a1 + 288), v148 != 0);
  uint64_t v42 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 288) + 112LL))(*(void *)(a1 + 288), a3);
  int v43 = v42;
  if (!*(_BYTE *)(a1 + 666) || v18 == v17 || *(_BYTE *)(v18 + 903))
  {
    if (((v33 | v42 ^ 1) & 1) != 0)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      v44 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
      {
        uint64_t v45 = *(void *)(a3 + 76);
        v46 = *(_DWORD *)(a3 + 96);
        int v47 = sub_100832C40(v46);
        int v48 = *(void *)(a3 + 4);
        int v49 = *(void *)(a3 + 12);
        unsigned int v50 = *(void *)(a3 + 20);
        *(_DWORD *)buf = 134350339;
        *(void *)&buf[4] = v45;
        int v186 = 1026;
        *(_DWORD *)int v187 = v46;
        *(_WORD *)&v187[4] = 2082;
        *(void *)&v187[6] = v47;
        *(_WORD *)&v187[14] = 2049;
        *(void *)&v187[16] = v48;
        *(_WORD *)&v187[24] = 2049;
        *(void *)&v187[26] = v49;
        *(_WORD *)&v187[34] = 2050;
        *(void *)&v187[36] = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "location rejected by LCFusion,iosTime,%{public}.3f,type,%{public}d,%{public}s,lat,%{private}.7lf,lon,%{private }.7lf,hunc,%{public}.2f",  buf,  0x3Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101838C20);
        }
        int v101 = qword_101934838;
        int v102 = *(void *)(a3 + 76);
        int v103 = *(_DWORD *)(a3 + 96);
        unsigned int v104 = sub_100832C40(v103);
        int v105 = *(void *)(a3 + 4);
        int v106 = *(void *)(a3 + 12);
        v107 = *(void *)(a3 + 20);
        *(_DWORD *)v152 = 134350339;
        *(void *)&v152[4] = v102;
        v153 = 1026;
        *(_DWORD *)v154 = v103;
        *(_WORD *)&v154[4] = 2082;
        *(void *)&v154[6] = v104;
        *(_WORD *)&v154[14] = 2049;
        *(void *)&v154[16] = v105;
        *(_WORD *)&v154[24] = 2049;
        *(void *)&v154[26] = v106;
        *(_WORD *)&v154[34] = 2050;
        *(void *)&v154[36] = v107;
        LODWORD(v128) = 58;
        v108 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v101,  1LL,  "location rejected by LCFusion,iosTime,%{public}.3f,type,%{public}d,%{public}s,lat,%{private}.7l f,lon,%{private}.7lf,hunc,%{public}.2f",  v152,  v128);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLocationController::updateFusionLCLocationFilter(CLDaemonLocation &, const CLLocationProvider_Type::Not ificationData &, BOOL &)",  "%s\n",  v108);
        if (v108 != buf) {
          free(v108);
        }
      }

      int v51 = 0;
      uint64_t v41 = v148;
    }

    else
    {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 288) + 120LL))(*(void *)(a1 + 288), a2);
      int v51 = 1;
    }

    *a4 = v51;
    if (!*(_BYTE *)(a1 + 658)) {
      int v51 = v41;
    }
    *a4 = v51;
    if (v43)
    {
      if (qword_101934A90 != -1) {
        dispatch_once(&qword_101934A90, &stru_101838CA0);
      }
      int v52 = (os_log_s *)qword_101934A98;
      if (os_log_type_enabled((os_log_t)qword_101934A98, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v53 = *(void *)(a2 + 4);
        int v129 = *(void *)(a2 + 12);
        int v133 = *(void *)(a2 + 20);
        v54 = *(_DWORD *)(a2 + 96);
        unsigned int v131 = sub_100832C40(v54);
        int v139 = *(void *)(a2 + 44);
        int v141 = *(void *)(a2 + 60);
        v143 = *(_DWORD *)(a2 + 84);
        int v146 = *(void *)(a2 + 88);
        unsigned int v149 = *(void *)(a2 + 76);
        uint64_t v55 = sub_10080E94C();
        *(_DWORD *)buf = 0;
        int v56 = sub_10080EB58(v55, buf) - *(double *)(a2 + 76);
        int v57 = *(void *)(a2 + 28);
        int v58 = *(void *)(a2 + 36);
        unsigned int v59 = *(void *)(a2 + 52);
        int v60 = *(void *)(a2 + 68);
        int v61 = *(void *)(a3 + 184);
        int v130 = *(_DWORD *)(a2 + 128);
        v135 = *(_DWORD *)(a2 + 132);
        int v137 = *(_DWORD *)(a2 + 136);
        v62 = sub_10080E94C();
        uint64_t v63 = sub_10080EF30(v62);
        *(_DWORD *)buf = 136320515;
        *(void *)&buf[4] = "CL-filtered";
        int v186 = 1024;
        *(_DWORD *)int v187 = 0;
        *(_WORD *)&v187[4] = 2048;
        *(void *)&v187[6] = v53;
        *(_WORD *)&v187[14] = 2048;
        *(void *)&v187[16] = v129;
        *(_WORD *)&v187[24] = 2048;
        *(void *)&v187[26] = v133;
        *(_WORD *)&v187[34] = 1026;
        *(_DWORD *)&v187[36] = v54;
        *(_WORD *)&v187[40] = 2082;
        *(void *)&v187[42] = v131;
        v188 = 2050;
        v189 = v139;
        v190 = 2050;
        int v191 = v141;
        int v192 = 1026;
        int v193 = v143;
        unsigned int v194 = 2050;
        int v195 = v146;
        int v196 = 2050;
        v197 = v149;
        v198 = 2050;
        v199 = v56;
        int v200 = 2049;
        int v201 = v57;
        int v202 = 2050;
        unsigned int v203 = v58;
        int v204 = 2050;
        int v205 = v59;
        v206 = 2050;
        v207 = v60;
        v208 = 2050;
        int v209 = v61;
        int v210 = 1026;
        int v211 = v130;
        unsigned int v212 = 1026;
        int v213 = v135;
        int v214 = 1026;
        v215 = v137;
        v216 = 2050;
        v217 = v63;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEBUG,  "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%{public}d,%{public}s,Speed,%{public}.2f,Course,%{public}.2f,C onfidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{public}.3f,Altitude,%{private} .3f,AltitudeAccuracy,%{public}.3f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{public}.1f,timestampGps,%{public }.3lf,integrity,%{public}d,referenceFrame,%{public}d,rawReferenceFrame,%{public}d,propagation_us,%{public}.3f",  buf,  0xC6u);
      }

      if (sub_1002921D0(117, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A90 != -1) {
          dispatch_once(&qword_101934A90, &stru_101838CA0);
        }
        int v150 = qword_101934A98;
        v109 = *(void *)(a2 + 4);
        int v110 = *(void *)(a2 + 12);
        int v111 = *(void *)(a2 + 20);
        int v112 = *(_DWORD *)(a2 + 96);
        unsigned int v113 = sub_100832C40(v112);
        int v114 = *(void *)(a2 + 44);
        int v115 = *(void *)(a2 + 60);
        v116 = *(_DWORD *)(a2 + 84);
        v136 = *(void *)(a2 + 88);
        unsigned int v140 = *(double *)(a2 + 76);
        v117 = sub_10037FE24() - v140;
        int v132 = *(void *)(a2 + 28);
        v134 = *(void *)(a2 + 36);
        int v138 = *(void *)(a2 + 52);
        int v142 = *(void *)(a2 + 68);
        v118 = *(void *)(a3 + 184);
        int v119 = *(_DWORD *)(a2 + 128);
        int v120 = *(_DWORD *)(a2 + 132);
        int v121 = *(_DWORD *)(a2 + 136);
        v144 = v119;
        int v147 = v120;
        unsigned int v122 = sub_10080E94C();
        int v123 = sub_10080EF30(v122);
        *(_DWORD *)v152 = 136320515;
        *(void *)&v152[4] = "CL-filtered";
        v153 = 1024;
        *(_DWORD *)v154 = 0;
        *(_WORD *)&v154[4] = 2048;
        *(void *)&v154[6] = v109;
        *(_WORD *)&v154[14] = 2048;
        *(void *)&v154[16] = v110;
        *(_WORD *)&v154[24] = 2048;
        *(void *)&v154[26] = v111;
        *(_WORD *)&v154[34] = 1026;
        *(_DWORD *)&v154[36] = v112;
        *(_WORD *)&v154[40] = 2082;
        *(void *)&v154[42] = v113;
        int v155 = 2050;
        int v156 = v114;
        int v157 = 2050;
        unsigned int v158 = v115;
        int v159 = 1026;
        int v160 = v116;
        v161 = 2050;
        v162 = v136;
        v163 = 2050;
        int v164 = v140;
        int v165 = 2050;
        int v166 = v117;
        unsigned int v167 = 2049;
        int v168 = v132;
        int v169 = 2050;
        v170 = v134;
        v171 = 2050;
        v172 = v138;
        int v173 = 2050;
        int v174 = v142;
        int v175 = 2050;
        unsigned int v176 = v118;
        int v177 = 1026;
        int v178 = v144;
        v179 = 1026;
        v180 = v147;
        v181 = 1026;
        int v182 = v121;
        int v183 = 2050;
        int v184 = v123;
        LODWORD(v128) = 198;
        int v124 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v150,  2LL,  "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%{public}d,%{public}s,Speed,%{public}.2f,Course ,%{public}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{ public}.3f,Altitude,%{private}.3f,AltitudeAccuracy,%{public}.3f,SpeedAccuracy,%{public}.3f,Cour seAccuracy,%{public}.1f,timestampGps,%{public}.3lf,integrity,%{public}d,referenceFrame,%{public }d,rawReferenceFrame,%{public}d,propagation_us,%{public}.3f",  v152,  v128);
        sub_10029211C( "LOCATION",  1LL,  0,  2LL,  "BOOL CLLocationController::updateFusionLCLocationFilter(CLDaemonLocation &, const CLLocationProvider_Type::Not ificationData &, BOOL &)",  "%s\n",  v124);
        if (v124 != buf) {
          free(v124);
        }
      }

      return 1LL;
    }

    return 0LL;
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101838C20);
  }
  v64 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
  {
    int v65 = *(unsigned __int8 *)(a1 + 666);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v65;
    _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEBUG,  "#Warning, LCFusion, not notifying clients when device is sleeping,%d",  buf,  8u);
  }

  uint64_t result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101838C20);
    }
    uint64_t v31 = qword_101934838;
    int v66 = *(unsigned __int8 *)(a1 + 666);
    *(_DWORD *)v152 = 67109120;
    *(_DWORD *)&v152[4] = v66;
    LODWORD(v128) = 8;
    uint64_t v32 = "#Warning, LCFusion, not notifying clients when device is sleeping,%d";
    goto LABEL_77;
  }

  return result;
}

  v109 = objc_msgSend( objc_msgSend(-[NSMutableArray reverseObjectEnumerator](v127, "reverseObjectEnumerator"), "allObjects"),  "mutableCopy");
  -[NSMutableArray removeAllObjects](v127, "removeAllObjects");
  -[NSMutableArray addObjectsFromArray:](v127, "addObjectsFromArray:", v109);
  (*((void (**)(id, NSMutableArray *))a4 + 2))(a4, v127);
}

  uint64_t v23 = (const void **)(a1 + 88);
  uint64_t v24 = *(unsigned __int8 *)(a1 + 111);
  uint64_t v25 = *(void *)(a1 + 96);
  if ((v24 & 0x80u) == 0LL) {
    uint64_t v26 = *(unsigned __int8 *)(a1 + 111);
  }
  else {
    uint64_t v26 = *(void *)(a1 + 96);
  }
  uint64_t v29 = *(unsigned __int8 **)(a2 + 88);
  uint64_t v28 = (unsigned __int8 *)(a2 + 88);
  uint64_t v27 = v29;
  uint64_t v30 = (char)v28[23];
  if (v30 >= 0) {
    uint64_t v31 = v28[23];
  }
  else {
    uint64_t v31 = *((void *)v28 + 1);
  }
  if (v30 < 0) {
    uint64_t v28 = v27;
  }
  if (v26 == v31)
  {
    if ((v24 & 0x80) != 0)
    {
      uint64_t result = memcmp(*v23, v28, v25);
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      if (!(_DWORD)v24) {
        return 0LL;
      }
      uint64_t v32 = v28;
      uint64_t v33 = v23;
      uint64_t v34 = v24;
      while (*(unsigned __int8 *)v33 == *v32)
      {
        uint64_t result = 0LL;
        uint64_t v33 = (const void **)((char *)v33 + 1);
        ++v32;
        if (!--v34) {
          return result;
        }
      }
    }
  }

  if ((v24 & 0x80u) == 0LL) {
    uint64_t v35 = v23;
  }
  else {
    uint64_t v35 = *v23;
  }
  if (v31 >= v26) {
    uint64_t v36 = v26;
  }
  else {
    uint64_t v36 = v31;
  }
  uint64_t v19 = memcmp(v35, v28, v36);
  uint64_t v20 = v26 >= v31;
LABEL_42:
  uint64_t v21 = !v20;
  if (v19) {
    return v19 < 0;
  }
  else {
    return v21;
  }
}

  uint64_t v12 = *(void *)(v5 + 48);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A11B8 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  v12,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_55;
  }

  uint64_t v29 = *(void *)(a1 + 56);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_1019A11B8 + 56);
  }
  uint64_t v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E6E00(v29, a2);
  uint64_t v31 = (int)v30;
  else {
    uint64_t v32 = 1;
  }
  uint64_t v4 = (v4 + v31 + v32 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x80) != 0)
  {
LABEL_55:
    uint64_t v33 = *(void *)(a1 + 64);
    if (!v33) {
      uint64_t v33 = *(void *)(qword_1019A11B8 + 64);
    }
    uint64_t v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E7308(v33);
    uint64_t v35 = (int)v34;
    else {
      uint64_t v36 = 1;
    }
    uint64_t v4 = (v4 + v35 + v36 + 1);
    uint64_t v3 = *(_DWORD *)(a1 + 488);
  }

        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      unsigned int v50 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( fLatestCalDataArray,  "countByEnumeratingWithState:objects:count:",  &v60,  v74,  16LL);
      int v6 = v50;
    }

    while (v50);
  }

  -[NSMutableArray removeObjectsInArray:](self->fLatestCalDataArray, "removeObjectsInArray:", v52);
}

  uint64_t v29 = *(void *)(a1 + 56);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_1019A1328 + 56);
  }
  uint64_t v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062AA4C(v29, a2);
  uint64_t v31 = (int)v30;
  else {
    uint64_t v32 = 1;
  }
  uint64_t v4 = (v4 + v31 + v32 + 1);
  if ((*(_DWORD *)(a1 + 72) & 0x80) != 0)
  {
LABEL_55:
    uint64_t v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    else {
      uint64_t v34 = 2;
    }
    uint64_t v4 = (v34 + v4);
  }

  uint64_t v25 = *(void *)(a1 + 48);
  if (!v25) {
    uint64_t v25 = *(void *)(qword_1019A1368 + 48);
  }
  uint64_t v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062E954(v25, a2);
  uint64_t v27 = (int)v26;
  else {
    uint64_t v28 = 1;
  }
  uint64_t v4 = (v4 + v27 + v28 + 1);
  if ((*(_DWORD *)(a1 + 64) & 0x80) != 0)
  {
LABEL_55:
    uint64_t v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
    if ((v29 & 0x80000000) != 0)
    {
      uint64_t v30 = 11;
    }

    else if (v29 >= 0x80)
    {
      uint64_t v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2) + 1;
    }

    else
    {
      uint64_t v30 = 2;
    }

    uint64_t v4 = (v30 + v4);
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  v5[14],  a2,  a4);
  int v6 = v5[37];
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }

  uint64_t v27 = (const void **)(a1 + 24);
  uint64_t v28 = a1[47];
  uint64_t v29 = *((void *)a1 + 4);
  if ((v28 & 0x80u) == 0LL) {
    uint64_t v30 = a1[47];
  }
  else {
    uint64_t v30 = *((void *)a1 + 4);
  }
  uint64_t v33 = (unsigned __int8 *)*((void *)a2 + 3);
  uint64_t v32 = a2 + 24;
  uint64_t v31 = v33;
  uint64_t v34 = (char)v32[23];
  if (v34 >= 0) {
    uint64_t v35 = v32[23];
  }
  else {
    uint64_t v35 = *((void *)v32 + 1);
  }
  if (v34 < 0) {
    uint64_t v32 = v31;
  }
  if (v30 == v35)
  {
    if ((v28 & 0x80) != 0)
    {
      uint64_t result = memcmp(*v27, v32, v29);
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      if (!(_DWORD)v28) {
        return 0LL;
      }
      uint64_t v36 = v32;
      uint64_t v37 = v27;
      uint64_t v38 = v28;
      while (*(unsigned __int8 *)v37 == *v36)
      {
        uint64_t result = 0LL;
        uint64_t v37 = (const void **)((char *)v37 + 1);
        ++v36;
        if (!--v38) {
          return result;
        }
      }
    }
  }

  if ((v28 & 0x80u) == 0LL) {
    uint64_t v40 = v27;
  }
  else {
    uint64_t v40 = *v27;
  }
  if (v35 >= v30) {
    uint64_t v41 = v30;
  }
  else {
    uint64_t v41 = v35;
  }
  uint64_t v15 = memcmp(v40, v32, v41);
  uint64_t v16 = v30 >= v35;
LABEL_72:
  uint64_t v42 = !v16;
  if (v15) {
    return v15 < 0;
  }
  else {
    return v42;
  }
}

  uint64_t v32 = *(void *)(a1 + 48);
  if (!v32) {
    uint64_t v32 = *(void *)(qword_1019A1A48 + 48);
  }
  uint64_t v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A44834(v32);
  uint64_t v35 = (int)v33;
  else {
    uint64_t v36 = 1;
  }
  uint64_t v4 = (v4 + v35 + v36 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 96);
  if ((v3 & 0x80) != 0)
  {
LABEL_55:
    uint64_t v37 = *(void *)(a1 + 56);
    if (!v37) {
      uint64_t v37 = *(void *)(qword_1019A1A48 + 56);
    }
    uint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A44DA4(v37);
    uint64_t v40 = (int)v38;
    else {
      uint64_t v41 = 1;
    }
    uint64_t v4 = (v4 + v40 + v41 + 1);
    uint64_t v3 = *(_DWORD *)(a1 + 96);
  }

  uint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v21 >= 0x80)
  {
    uint64_t v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
    uint64_t v3 = *(_DWORD *)(a1 + 116);
  }

  else
  {
    uint64_t v22 = 1;
  }

  v4 += v22 + 1;
  if ((v3 & 0x80) != 0)
  {
LABEL_53:
    uint64_t v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if (v23 >= 0x80)
    {
      uint64_t v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 1;
      uint64_t v3 = *(_DWORD *)(a1 + 116);
    }

    else
    {
      uint64_t v24 = 2;
    }

    v4 += v24;
  }

  uint64_t v15 = *(void *)(v5 + 72);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_1019A1CE8 + 72);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v15,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_55;
  }

  uint64_t v27 = *(void *)(a1 + 48);
  if (!v27) {
    uint64_t v27 = *(void *)(qword_1019A1CE8 + 48);
  }
  uint64_t v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B24E5C(v27, a2);
  uint64_t v29 = (int)v28;
  else {
    uint64_t v30 = 1;
  }
  uint64_t v4 = (v4 + v29 + v30 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x80) != 0)
  {
LABEL_55:
    uint64_t v31 = *(void *)(a1 + 56);
    if (!v31) {
      uint64_t v31 = *(void *)(qword_1019A1CE8 + 56);
    }
    uint64_t v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2601C(v31, a2);
    uint64_t v33 = (int)v32;
    else {
      uint64_t v34 = 1;
    }
    uint64_t v4 = (v4 + v33 + v34 + 1);
    uint64_t v3 = *(_DWORD *)(a1 + 184);
  }

  uint64_t v11 = *(void *)(v5 + 56);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_1019A1D38 + 56);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v11,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_55;
  }

    operator delete(v28[0]);
    goto LABEL_50;
  }

    sub_100007008();
  }

  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24), a2);
  int v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40LL))(*(void *)(a1 + 24), a3);
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v8 = v5 | (unsigned __int16)(v6 << 8);
  uint64_t v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *uint64_t v9 = v8;
    uint64_t v26 = v9 + 1;
    goto LABEL_48;
  }

  uint64_t v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  uint64_t v13 = v12 >> 1;
  uint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    uint64_t v15 = v13 + 1;
  }
  else {
    uint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)sub_1008DB604(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0LL;
  }
  uint64_t v27 = &v17[2 * v13];
  uint64_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  uint64_t v26 = v27 + 2;
  uint64_t v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    uint64_t v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }

  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 120) = v26;
  *(void *)(a1 + 128) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 120) = v26;
}

  *(_BYTE *)a2 = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v15 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "impactCanceledBecauseOfMultiPeaks";
    int v193 = 2048;
    unsigned int v194 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v87 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "impactCanceledBecauseOfMultiPeaks";
    v189 = 2048;
    v190 = v87;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v89 = (uint8_t *)v88;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v88);
    if (v89 != buf) {
      free(v89);
    }
  }

  a3[2] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x100) == 0)
  {
LABEL_5:
    if ((v10 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_61;
  }

          uint64_t v38 = sub_101171D4C();
          sub_1010DDBC0(v87, "aPosteriori");
          int v39 = (v38 - v22) * 1000.0;
          sub_100F1F648((uint64_t *)v104, (uint64_t *)v87, v39);
          if (v88 < 0) {
            operator delete(v87[0]);
          }
          *(_WORD *)(a3 + 120) = WORD2(v108[9]);
          *(_BYTE *)(a3 + 610) = *(_BYTE *)(a1 + 520);
          *(_BYTE *)(a3 + 609) = 0;
          if ((v36 & 1) != 0)
          {
            if (!BYTE1(v108[14]) && (*(_BYTE *)(a1 + 369) || *(_BYTE *)(a1 + 370)) && LOBYTE(v108[14])) {
              *(_OWORD *)(a2 + 4) = *(_OWORD *)&v108[29];
            }
            sub_100D81B6C((void *)a1, a2, a3);
            if (*(_BYTE *)(a1 + 368)
              && LOBYTE(v108[14])
              && !BYTE1(v108[14])
              && (*(double *)&v106[48] < 18.0
               || sub_1004F6D00()
               || (sub_1004F6CDC() & 1) != 0
               || sub_1004F6D2C()))
            {
              sub_100D81E50(a1, a2);
              sub_100D821F8((void *)a1, a2);
            }

            if (*(_BYTE *)(a1 + 376) && !*(_BYTE *)(a3 + 356)) {
              sub_100D8227C((void *)a1, a2, 1);
            }
            if (LOBYTE(v108[14]) && !BYTE5(v108[24]))
            {
              *(_OWORD *)(a3 + 64) = *(_OWORD *)&v108[17];
              uint64_t v40 = v108[19];
              if (BYTE1(v108[14])) {
                uint64_t v41 = 3;
              }
              else {
                uint64_t v41 = 2;
              }
              *(_DWORD *)(a3 + 56) = v41;
              uint64_t v42 = vrev64_s32(*(int32x2_t *)&v106[72]);
              *(void *)(a3 + 80) = v40;
              *(int32x2_t *)(a3 + 88) = v42;
              *(_BYTE *)(a3 + 96) = HIBYTE(v108[24]);
            }

            sub_100D80484((void *)a1, (double *)v104, *(_DWORD *)(a1 + 436));
            int v43 = *(_OWORD *)&v106[32];
            *(_OWORD *)(a1 + 704) = *(_OWORD *)&v106[16];
            *(_OWORD *)(a1 + 720) = v43;
            v44 = *(_OWORD *)&v106[64];
            *(_OWORD *)(a1 + 736) = *(_OWORD *)&v106[48];
            *(_OWORD *)(a1 + 752) = v44;
            uint64_t v45 = *(_OWORD *)&v104[16];
            *(_OWORD *)(a1 + 640) = *(_OWORD *)v104;
            *(_OWORD *)(a1 + 656) = v45;
            v46 = *(_OWORD *)v106;
            *(_OWORD *)(a1 + 672) = v105;
            *(_OWORD *)(a1 + 688) = v46;
            std::string::operator=((std::string *)(a1 + 768), (const std::string *)&v106[80]);
            memcpy((void *)(a1 + 792), v108, 0x118uLL);
            int v47 = sub_101171D4C();
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_101881F60);
            }
            int v48 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_INFO))
            {
              int v49 = *(unsigned __int8 *)(a3 + 609);
              *(_DWORD *)buf = 134350336;
              *(void *)int v110 = *(void *)&v104[8];
              *(_WORD *)&v110[8] = 2050;
              *(double *)int v111 = (v47 - v22) * 1000.0;
              *(_WORD *)&v111[8] = 2050;
              *(double *)int v112 = v39;
              *(_WORD *)&v112[8] = 1026;
              unsigned int v113 = v49;
              int v114 = 1026;
              int v115 = LOBYTE(v108[14]);
              v116 = 1026;
              v117 = BYTE1(v108[14]);
              _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_INFO,  "CLMM,%{public}.3lf,Match,latency,%{public}.2lf,filterLatency,%{public}.2lf,mmType,%{public}d,usable,%{pu blic}d,amb,%{public}d",  buf,  0x32u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_101881F60);
              }
              int v79 = *(unsigned __int8 *)(a3 + 609);
              int v94 = 134350336;
              unsigned int v95 = *(void *)&v104[8];
              int v96 = 2050;
              *(double *)int v97 = (v47 - v22) * 1000.0;
              *(_WORD *)&v97[8] = 2050;
              *(double *)v98 = v39;
              *(_WORD *)&v98[8] = 1026;
              v99 = v79;
              v100 = 1026;
              int v101 = LOBYTE(v108[14]);
              int v102 = 1026;
              int v103 = BYTE1(v108[14]);
              LODWORD(v86) = 50;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  1LL,  "CLMM,%{public}.3lf,Match,latency,%{public}.2lf,filterLatency,%{public}.2lf,mmType,%{public}d,usable,%{pu blic}d,amb,%{public}d",  &v94,  v86);
              v81 = (uint8_t *)v80;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)",  "%s\n",  v80);
              if (v81 != buf) {
                free(v81);
              }
            }

            uint64_t v16 = 1LL;
            goto LABEL_36;
          }

          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101881F60);
          }
          unsigned int v50 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
          {
            int v51 = *(unsigned __int8 *)(a3 + 610);
            int v52 = *(unsigned __int8 *)(a3 + 609);
            *(_DWORD *)buf = 134349824;
            *(void *)int v110 = *(void *)&v104[8];
            *(_WORD *)&v110[8] = 2050;
            *(double *)int v111 = v39;
            *(_WORD *)&v111[8] = 1026;
            *(_DWORD *)int v112 = v51;
            *(_WORD *)&v112[4] = 1026;
            *(_DWORD *)&v112[6] = v52;
            _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,MMFilter,latency,%{public}.3lf,triggeredByRouteHints,%{public}d,mmtype,%{public}d",  buf,  0x22u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_101881F60);
            }
            int v75 = *(unsigned __int8 *)(a3 + 610);
            int v76 = *(unsigned __int8 *)(a3 + 609);
            int v94 = 134349824;
            unsigned int v95 = *(void *)&v104[8];
            int v96 = 2050;
            *(double *)int v97 = v39;
            *(_WORD *)&v97[8] = 1026;
            *(_DWORD *)v98 = v75;
            *(_WORD *)&v98[4] = 1026;
            *(_DWORD *)&v98[6] = v76;
            LODWORD(v86) = 34;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,MMFilter,latency,%{public}.3lf,triggeredByRouteHints,%{public}d,mmtype,%{public}d",  &v94,  v86);
            int v78 = (uint8_t *)v77;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)",  "%s\n",  v77);
            if (v78 != buf) {
              free(v78);
            }
          }

          sub_100D80484((void *)a1, (double *)v104, *(_DWORD *)(a1 + 436));
        }

        else
        {
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_101881F60);
          }
          int v61 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
          {
            v62 = *(void *)(a2 + 76);
            *(_DWORD *)buf = 134349056;
            *(void *)int v110 = v62;
            _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,null pointers for cycling matcher",  buf,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_101881F60);
            }
            uint64_t v63 = *(void *)(a2 + 76);
            int v94 = 134349056;
            unsigned int v95 = v63;
            LODWORD(v86) = 12;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,null pointers for cycling matcher",  &v94,  v86);
            uint64_t v31 = (uint8_t *)v64;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)",  "%s\n",  v64);
            goto LABEL_131;
          }
        }

        break;
      default:
        goto LABEL_48;
    }
  }

  else
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101881F60);
    }
    uint64_t v32 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v33 = *(void *)(a2 + 76);
      *(_DWORD *)buf = 134349056;
      *(void *)int v110 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,Unable to fill crumb,no matching",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_101881F60);
      }
      v73 = *(void *)(a2 + 76);
      int v94 = 134349056;
      unsigned int v95 = v73;
      LODWORD(v86) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,Unable to fill crumb,no matching",  &v94,  v86);
      uint64_t v31 = (uint8_t *)v74;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)",  "%s\n",  v74);
LABEL_131:
      if (v31 != buf) {
        free(v31);
      }
    }
  }

  uint64_t v16 = 0LL;
LABEL_36:
  if (SHIBYTE(v107) < 0) {
    operator delete(*(void **)&v106[80]);
  }
LABEL_38:
  if (HIBYTE(v93))
  {
    if ((_BYTE)v93) {
      pthread_mutex_unlock(v92);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v91 + 24LL))(v91);
    }
  }

  return v16;
}

  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
}

  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x10uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "isNearFall", *(_BYTE *)(a1 + 153));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0xBu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 160), 0x15u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_51;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 140);
  v3 |= 0x20000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 140) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "isStand", *(_BYTE *)(a1 + 154));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 0xCu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }

  uint64_t v24 = *(void *)(a2 + 272);
  v10 |= 0x40u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 272) = v24;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x1000) == 0)
  {
LABEL_17:
    if ((v9 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }

  uint64_t v15 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 100) = v3;
  *(void *)(a1 + 32) = v15;
  if ((*(_DWORD *)(a2 + 100) & 0x1000) != 0) {
    goto LABEL_50;
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 120);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 120) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v2 & 4) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 120));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 0x16u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_24:
    if ((v4 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }

  uint64_t v21 = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 212) |= 0x8000u;
  *(_DWORD *)(a1 + 156) = v21;
  uint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x4000) == 0)
  {
LABEL_20:
    if ((v10 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 184), 9u);
  uint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 0x80000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 40);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 40) = v12;
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "papr", *(float *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x20) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }

  uint64_t result = *(float *)(a2 + 76);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 76) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x400) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "maxAccelNormOverEpoch", *(float *)(a1 + 104));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }

  uint64_t v21 = *(_DWORD *)(a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 88) = v21;
  uint64_t v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "lowSpeedMetersPerSecondThresold", *(float *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0xCCu);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }

  uint64_t v17 = *(_DWORD *)(a2 + 92);
  v3 |= 0x8000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 92) = v17;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "epochFirstTimestamp", *(void *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000000LL) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0xFu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000000LL) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "distanceSource", *(_DWORD *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0xAu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000000000LL) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }

  uint64_t v10 = *(_BYTE *)(a2 + 120);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_BYTE *)(a1 + 120) = v10;
  if ((*(_DWORD *)(a2 + 124) & 0x400000) == 0) {
    return *(float *)&v4;
  }
LABEL_50:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 124) = v3 | 0x400000;
  *(_DWORD *)(a1 + 116) = v4;
  return *(float *)&v4;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x80) == 0) {
      goto LABEL_26;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "signalDeltaNCounts", *(float *)(a1 + 92));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0x15u);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }

  uint64_t v16 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 68) = v16;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "pearlScanWindowOpen", *(_DWORD *)(a1 + 92));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0xEu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }

  uint64_t v7 = *(_DWORD *)(a2 + 84);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 84) = v7;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "poseLibrary", *(_DWORD *)(a1 + 84));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40000) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }

  uint64_t result = *(double *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 152) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "userAccelMeanY", *(double *)(a1 + 176));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
LABEL_51:
    PB::TextFormatter::format(this, "velocity", *(double *)(a1 + 192));
    if ((*(_DWORD *)(a1 + 208) & 0x1000000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_26;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144), 0x17u);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x19u);
  }

  uint64_t v10 = *(void *)(a2 + 48);
  v3 |= 0x20uLL;
  *(void *)(result + 212) = v3;
  *(void *)(result + 48) = v10;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "maxRMS", *(float *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 8u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_51;
  }

  uint64_t result = *(double *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 136) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApMean", *(double *)(a1 + 136));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }

  uint64_t result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 120) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1Mean", *(double *)(a1 + 168));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 0x16u);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 132), 0x13u);
  uint64_t v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x400) == 0)
  {
LABEL_26:
    if ((v8 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 296), 3u);
  uint64_t v4 = *(_BYTE *)(v3 + 340);
  if ((v4 & 8) != 0) {
    goto LABEL_50;
  }
LABEL_5:
  if ((v4 & 2) != 0) {
LABEL_6:
  }
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 304), 5u);
LABEL_7:
  uint64_t v5 = *(double **)(v3 + 176);
  int v6 = *(double **)(v3 + 184);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 6u);
  }

  uint64_t v8 = *(double **)(v3 + 104);
  uint64_t v9 = *(double **)(v3 + 112);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    uint64_t result = PB::Writer::write(this, v10, 7u);
  }

  uint64_t v11 = *(double **)(v3 + 272);
  uint64_t v12 = *(double **)(v3 + 280);
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    uint64_t result = PB::Writer::write(this, v13, 8u);
  }

  uint64_t v14 = *(double **)(v3 + 8);
  uint64_t v15 = *(double **)(v3 + 16);
  while (v14 != v15)
  {
    uint64_t v16 = *v14++;
    uint64_t result = PB::Writer::write(this, v16, 9u);
  }

  uint64_t v17 = *(double **)(v3 + 224);
  uint64_t v18 = *(double **)(v3 + 232);
  while (v17 != v18)
  {
    uint64_t v19 = *v17++;
    uint64_t result = PB::Writer::write(this, v19, 0xAu);
  }

  uint64_t v20 = *(double **)(v3 + 152);
  uint64_t v21 = *(double **)(v3 + 160);
  while (v20 != v21)
  {
    uint64_t v22 = *v20++;
    uint64_t result = PB::Writer::write(this, v22, 0xBu);
  }

  uint64_t v23 = *(double **)(v3 + 128);
  uint64_t v24 = *(double **)(v3 + 136);
  while (v23 != v24)
  {
    uint64_t v25 = *v23++;
    uint64_t result = PB::Writer::write(this, v25, 0xCu);
  }

  uint64_t v26 = *(double **)(v3 + 248);
  uint64_t v27 = *(double **)(v3 + 256);
  while (v26 != v27)
  {
    uint64_t v28 = *v26++;
    uint64_t result = PB::Writer::write(this, v28, 0xDu);
  }

  uint64_t v29 = *(double **)(v3 + 32);
  uint64_t v30 = *(double **)(v3 + 40);
  while (v29 != v30)
  {
    uint64_t v31 = *v29++;
    uint64_t result = PB::Writer::write(this, v31, 0xEu);
  }

  uint64_t v32 = *(double **)(v3 + 200);
  uint64_t v33 = *(double **)(v3 + 208);
  while (v32 != v33)
  {
    uint64_t v34 = *v32++;
    uint64_t result = PB::Writer::write(this, v34, 0xFu);
  }

  uint64_t v35 = *(double **)(v3 + 80);
  uint64_t v36 = *(double **)(v3 + 88);
  while (v35 != v36)
  {
    uint64_t v37 = *v35++;
    uint64_t result = PB::Writer::write(this, v37, 0x10u);
  }

  uint64_t v38 = *(double **)(v3 + 56);
  int v39 = *(double **)(v3 + 64);
  while (v38 != v39)
  {
    uint64_t v40 = *v38++;
    uint64_t result = PB::Writer::write(this, v40, 0x11u);
  }

  uint64_t v41 = *(_BYTE *)(v3 + 340);
  if ((v41 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 332), 0x12u);
    uint64_t v41 = *(_BYTE *)(v3 + 340);
  }

  if ((v41 & 0x10) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 328), 0x13u);
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 96);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 96) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "pressureFFTBin3", *(float *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0x16u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 3u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x1000000000LL) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000000000LL) == 0) {
      goto LABEL_6;
    }
    goto LABEL_51;
  }

  uint64_t v23 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 56) = v23;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "vehicularBtHint", *(_BYTE *)(a1 + 111));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x15u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }

  uint64_t v28 = *(_DWORD *)(a2 + 172);
  v5 |= 0x2000000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 172) = v28;
  uint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "originDevice", *(_DWORD *)(a1 + 156));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 176) = v18;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "matchQuality", *(_DWORD *)(a1 + 188));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 184), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "exitState", *(_DWORD *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 7u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 92) = v18;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "lastHeadTurnStopTime", *(double *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }

  uint64_t v21 = *(_DWORD *)(a2 + 96);
  v6 |= 0x100u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 96) = v21;
  uint64_t v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "clientMode", *(_DWORD *)(a1 + 88));
  if ((*(_DWORD *)(a1 + 164) & 0x4000000) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "inComplexTransitionState", *(_BYTE *)(a1 + 156));
LABEL_12:
  int v6 = *(float **)(a1 + 8);
  uint64_t v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    PB::TextFormatter::format(this, "noiseVariance", v8);
  }

  uint64_t v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x8000000) != 0)
  {
    PB::TextFormatter::format(this, "pinnedBoresight", *(_BYTE *)(a1 + 157));
    uint64_t v9 = *(_DWORD *)(a1 + 164);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0) {
        goto LABEL_17;
      }
      goto LABEL_53;
    }
  }

  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }

  PB::TextFormatter::format(this, "qHat_W", *(float *)(a1 + 92));
  uint64_t v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_51;
  }

  uint64_t result = *(double *)(a2 + 152);
  v3 |= 0x40000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 152) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "groundContactTimeUnsmoothed", *(double *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 0xDu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }

  uint64_t v22 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 24) = v22;
  uint64_t v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "kalmanGainPedometer", *(double *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 176), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }

  uint64_t v24 = *(void *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 64) = v24;
  uint64_t v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 1) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }

  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 160));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0x16u);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }

LABEL_61:
  uint64_t v16 = *(void *)(v5 + 80);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_1019A0978 + 80);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  v16,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_67;
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_119;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v37 = *(void *)(a1 + 72);
    if (!v37) {
      uint64_t v37 = *(void *)(qword_1019A0978 + 72);
    }
    uint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100072728(v37, a2);
    int v39 = (int)v38;
    else {
      uint64_t v40 = 1;
    }
    uint64_t v4 = (v4 + v39 + v40 + 1);
    uint64_t v3 = *(_DWORD *)(a1 + 292);
    if ((v3 & 0x200) == 0)
    {
LABEL_64:
      if ((v3 & 0x400) == 0) {
        goto LABEL_65;
      }
      goto LABEL_83;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_64;
  }

  uint64_t v41 = *(void *)(a1 + 80);
  if (!v41) {
    uint64_t v41 = *(void *)(qword_1019A0978 + 80);
  }
  uint64_t v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100074450(v41, a2);
  int v43 = (int)v42;
  else {
    v44 = 1;
  }
  uint64_t v4 = (v4 + v43 + v44 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x400) == 0)
  {
LABEL_65:
    if ((v3 & 0x800) == 0) {
      goto LABEL_66;
    }
    goto LABEL_89;
  }

  uint64_t v20 = *(void *)(a2 + 128);
  *(_DWORD *)(a1 + 228) |= 0x40000u;
  *(void *)(a1 + 128) = v20;
  uint64_t v5 = *(_DWORD *)(a2 + 228);
  if ((v5 & 0x80000) == 0)
  {
LABEL_46:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_63;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x46,  (int)a2,  *(double *)(v5 + 208),  a3);
  int v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x50,  *(_DWORD *)(v5 + 140),  (int)a2,  a4);
  }

  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      uint64_t v37 = *(void *)(a1 + 72);
      if (!v37) {
        uint64_t v37 = *(void *)(qword_1019A0AF0 + 72);
      }
      uint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001CD384(v37, a2);
      int v39 = (int)v38;
      else {
        uint64_t v40 = 1;
      }
      uint64_t v4 = (v4 + v39 + v40 + 1);
      uint64_t v3 = *(_DWORD *)(a1 + 92);
    }

    if ((v3 & 0x200) != 0)
    {
      uint64_t v41 = *(void *)(a1 + 80);
      if (!v41) {
        uint64_t v41 = *(void *)(qword_1019A0AF0 + 80);
      }
      uint64_t v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001CD9D4(v41, a2);
      v44 = (int)v42;
      else {
        uint64_t v45 = 1;
      }
      uint64_t v4 = (v4 + v44 + v45 + 1);
    }
  }

  *(_DWORD *)(a1 + 88) = v4;
  return v4;
}

        uint64_t v45 = self->_vehicularHints;
        if ((v45 & 0x10) == 0) {
          self->_btDetectionLatency = v36;
        }
        self->_vehicularHints = v45 | 0x10;
        v38 |= 0x10uLL;
        goto LABEL_64;
      }
    }

    else if ((self->_prevVehicularHints & 1) != 0 {
           && (*(void *)&self->_vehicularLastMotionHintTime = v84, (v37 & 0x10) != 0))
    }
    {
      uint64_t v38 = 0LL;
      ++self->_numMotionExitsWithBT;
      if ((v37 & 2) == 0) {
        goto LABEL_42;
      }
    }

    else
    {
      uint64_t v38 = 0LL;
      if ((v37 & 2) == 0) {
        goto LABEL_42;
      }
    }

    uint64_t v40 = self->_vehicularHints;
    if ((v40 & 2) == 0) {
      self->_gpsDetectionLatency = v36;
    }
    self->_vehicularHints = v40 | 2;
    v38 |= 2uLL;
    goto LABEL_42;
  }

  if (vehicularStartTime > 0.0)
  {
    uint64_t v20 = *(double *)&v84;
    uint64_t v21 = *(double *)&v84 - vehicularStartTime;
    uint64_t v22 = (int)*(double *)&v84;
    uint64_t v24 = self->_vehicularLastNoHintsTime;
    vehicularLastBTHintTime = self->_vehicularLastBTHintTime;
    uint64_t v25 = *(double *)&v84 - v24;
    _ZF = v24 == 0.0;
    uint64_t v26 = -1.0;
    if (_ZF) {
      uint64_t v25 = -1.0;
    }
    self->_vehicularDuration = v21;
    self->_vehicularDurationExitFromNoHints = v25;
    self->_lastSeenVehicularTime = v22;
    uint64_t v27 = v20 - vehicularLastBTHintTime;
    self->_vehicularDurationExitFromLastBTHint = v27;
    if (vehicularLastBTHintTime != 0.0)
    {
      vehicularLastMotionHintTime = self->_vehicularLastMotionHintTime;
      _ZF = vehicularLastBTHintTime <= vehicularLastMotionHintTime || vehicularLastMotionHintTime == 0.0;
      uint64_t v30 = vehicularLastBTHintTime - vehicularLastMotionHintTime;
      uint64_t v26 = -1.0;
      if (!_ZF) {
        uint64_t v26 = v30;
      }
    }

    self->_vehicularDurationLastBTHintFromLastMotionHint = v26;
    if (self->_seenNonVehicularState)
    {
      -[CLLocationDerivedSpeedEstimator logLatencyMetricsInternal](self, "logLatencyMetricsInternal");
      -[CLLocationDerivedSpeedEstimator submitLatencyMetrics](self, "submitLatencyMetrics");
    }

    else
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      v46 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
      {
        seenNonVehicularState = self->_seenNonVehicularState;
        *(_DWORD *)buf = 67109120;
        LODWORD(v99) = seenNonVehicularState;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "VEHICULAR: skipping LatencyMetrics, seenNonVehicularState, %d",  buf,  8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_101835500);
        }
        v64 = self->_seenNonVehicularState;
        int v88 = 67109120;
        LODWORD(v89) = v64;
        int v65 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "VEHICULAR: skipping LatencyMetrics, seenNonVehicularState, %d",  &v88);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLLocationDerivedSpeedEstimator handleMotionStateNotification:]",  "%s\n",  v65);
      }
    }

    self->_vehicularHints = 0LL;
    self->_prevVehicularHints = 0LL;
    *(_OWORD *)&self->_vehicularStartTime = 0u;
    *(_OWORD *)&self->_vehicularLastBTHintTime = 0u;
    self->_numMotionExitsWithBT = 0;
    self->_hintsAvailable = 21LL;
    __asm { FMOV            V0.2D, #-1.0 }

    *(_OWORD *)&self->_accelDetectionLatency = _Q0;
    *(_OWORD *)&self->_basebandDetectionLatency = _Q0;
    *(_OWORD *)&self->_btDetectionLatency = _Q0;
    *(_OWORD *)&self->_vehicularDurationExitFromNoHints = _Q0;
    self->_vehicularDurationLastBTHintFromLastMotionHint = -1.0;
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_101835500);
    }
    int v52 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_INFO,  "VEHICULAR: reset vehicular latency measures",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_101835500);
      }
      LOWORD(v88) = 0;
      LODWORD(v68) = 2;
      int v60 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  1LL,  "VEHICULAR: reset vehicular latency measures",  &v88,  v68);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLLocationDerivedSpeedEstimator handleMotionStateNotification:]",  "%s\n",  v60);
    }
  }

  self->_seenNonVehicularState = 1;
LABEL_77:
  if (self->_showActivityVehicularMounted)
  {
    uint64_t v53 = CLMotionActivity::isInVehicle(&v83);
    if (v53) {
      LOBYTE(v53) = CLMotionActivity::isMounted(&v83);
    }
    self->_motionVehicular = v53;
    -[CLLocationDerivedSpeedEstimator updateStatusBarLabel](self, "updateStatusBarLabel");
  }

  close(*a3);
  *a3 = -1;
  if (v12 != -1) {
    munmap((void *)v12, *a2);
  }
  uint64_t v12 = 0LL;
  *a2 = 0LL;
LABEL_64:
  return v12;
}

  uint64_t v16 = *(void *)(v5 + 80);
  if (!v16) {
    uint64_t v16 = *(void *)(qword_1019A11B8 + 80);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v16,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_67;
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_119;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v37 = *(void *)(a1 + 72);
    if (!v37) {
      uint64_t v37 = *(void *)(qword_1019A11B8 + 72);
    }
    uint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E7B5C(v37, a2);
    int v39 = (int)v38;
    else {
      uint64_t v40 = 1;
    }
    uint64_t v4 = (v4 + v39 + v40 + 1);
    uint64_t v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 0x200) == 0)
    {
LABEL_64:
      if ((v3 & 0x400) == 0) {
        goto LABEL_65;
      }
      goto LABEL_83;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_64;
  }

  uint64_t v41 = *(void *)(a1 + 80);
  if (!v41) {
    uint64_t v41 = *(void *)(qword_1019A11B8 + 80);
  }
  uint64_t v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E9108(v41, a2);
  int v43 = (int)v42;
  else {
    v44 = 1;
  }
  uint64_t v4 = (v4 + v43 + v44 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x400) == 0)
  {
LABEL_65:
    if ((v3 & 0x800) == 0) {
      goto LABEL_66;
    }
    goto LABEL_89;
  }

  *(_DWORD *)(a1 + 60) = v4;
  return v4;
}

  uint64_t v24 = *(_DWORD *)(a2 + 60);
  a1[37] |= 0x2000u;
  a1[15] = v24;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19,  v5[26],  a2,  a4);
  int v6 = v5[37];
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }

  *(_DWORD *)(a1 + 68) = v5;
  return v5;
}

            for (i = v9 + 1; ; i = v45 + 1)
            {
              uint64_t v45 = i;
              if (i >= v10) {
                break;
              }
              uint64_t result = sub_10085FD88(v5);
            }
          }
        }

        else
        {
          uint64_t v20 = *(_DWORD *)(v5 + 40);
          if ((~v20 & 6) != 0)
          {
            LOBYTE(v21) = 0;
            uint64_t v22 = 0;
            uint64_t v23 = v8;
            do
            {
              while (1)
              {
                uint64_t v24 = *((_DWORD *)v23 + 10);
                if (v24 != 2) {
                  break;
                }
                if (*((_DWORD *)v23 + 30) != 2) {
                  goto LABEL_52;
                }
                uint64_t v22 = 1;
                uint64_t v16 = v23 == v8;
                v23 += 25;
                if (v16) {
                  goto LABEL_42;
                }
              }

              if (v24 != 1) {
                goto LABEL_52;
              }
              uint64_t v21 = *((_DWORD *)v23 + 30);
              if (v21 != 1) {
                goto LABEL_52;
              }
              uint64_t v16 = v23 == v8;
              v23 += 25;
            }

            while (!v16);
            if ((v22 & 1) == 0) {
              goto LABEL_47;
            }
            LOBYTE(v21) = 1;
LABEL_42:
            uint64_t v25 = *(unsigned __int8 **)(v5 + 24);
            if (*v25 - 58 <= 0xFFFFFFF7)
            {
              *uint64_t v25 = 50;
              uint64_t v20 = *(_DWORD *)(v5 + 40);
              uint64_t v25 = *(unsigned __int8 **)(v5 + 24);
            }

            uint64_t v26 = v20 | 1;
            *(_DWORD *)(v5 + 40) = v26;
            if (v25[3] - 58 <= 0xFFFFFFF6)
            {
              v25[3] = 49;
              uint64_t v26 = *(_DWORD *)(v5 + 40);
            }

            uint64_t v20 = v26 | 4;
            if ((v21 & 1) != 0) {
LABEL_47:
            }
              v20 |= 2u;
            *(_DWORD *)(v5 + 40) = v20;
            uint64_t v27 = v20 == 7 || *(_BYTE *)(*(void *)(v5 + 24) + 9LL) != 0;
            *(_BYTE *)(v5 + 16) = v27;
          }

            for (i = v9 + 1; ; i = v45 + 1)
            {
              uint64_t v45 = i;
              if (i >= v10) {
                break;
              }
              uint64_t result = sub_100863F30(v5);
            }
          }
        }

        else
        {
          uint64_t v20 = *(_DWORD *)(v5 + 40);
          if ((~v20 & 6) != 0)
          {
            LOBYTE(v21) = 0;
            uint64_t v22 = 0;
            uint64_t v23 = v8;
            do
            {
              while (1)
              {
                uint64_t v24 = *((_DWORD *)v23 + 10);
                if (v24 != 2) {
                  break;
                }
                if (*((_DWORD *)v23 + 30) != 2) {
                  goto LABEL_52;
                }
                uint64_t v22 = 1;
                uint64_t v16 = v23 == v8;
                v23 += 25;
                if (v16) {
                  goto LABEL_42;
                }
              }

              if (v24 != 1) {
                goto LABEL_52;
              }
              uint64_t v21 = *((_DWORD *)v23 + 30);
              if (v21 != 1) {
                goto LABEL_52;
              }
              uint64_t v16 = v23 == v8;
              v23 += 25;
            }

            while (!v16);
            if ((v22 & 1) == 0) {
              goto LABEL_47;
            }
            LOBYTE(v21) = 1;
LABEL_42:
            uint64_t v25 = *(unsigned __int8 **)(v5 + 24);
            if (*v25 - 58 <= 0xFFFFFFF7)
            {
              *uint64_t v25 = 50;
              uint64_t v20 = *(_DWORD *)(v5 + 40);
              uint64_t v25 = *(unsigned __int8 **)(v5 + 24);
            }

            uint64_t v26 = v20 | 1;
            *(_DWORD *)(v5 + 40) = v26;
            if (v25[1] - 58 <= 0xFFFFFFF6)
            {
              v25[1] = 49;
              uint64_t v26 = *(_DWORD *)(v5 + 40);
            }

            uint64_t v20 = v26 | 4;
            if ((v21 & 1) != 0) {
LABEL_47:
            }
              v20 |= 2u;
            *(_DWORD *)(v5 + 40) = v20;
            uint64_t v27 = v20 == 7 || *(_BYTE *)(*(void *)(v5 + 24) + 9LL) != 0;
            *(_BYTE *)(v5 + 16) = v27;
          }

    if (sub_10088E128(__s))
    {
      sub_10054B118(*(void *)(a1 + 16), *(void *)(a1 + 48), 0LL);
      sub_10054B0AC(*(void *)(a1 + 16), a1, 1);
    }

    if ((_DWORD)v3 == 2) {
      uint64_t v19 = (int)v7;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v19 == 1) {
      sub_100878ADC((void *)a1);
    }
  }

  return v8;
}

  uint64_t v36 = v19;
  if ((has & 8) != 0)
  {
    pace = self->_pace;
    int v39 = -pace;
    if (pace >= 0.0) {
      int v39 = self->_pace;
    }
    uint64_t v40 = floor(v39 + 0.5);
    uint64_t v41 = (v39 - v40) * 1.84467441e19;
    uint64_t v37 = 2654435761u * (unint64_t)fmod(v40, 1.84467441e19);
    if (v41 >= 0.0)
    {
      if (v41 > 0.0) {
        v37 += (unint64_t)v41;
      }
    }

    else
    {
      v37 -= (unint64_t)fabs(v41);
    }
  }

  else
  {
    uint64_t v37 = 0LL;
  }

  if ((has & 0x2000) != 0)
  {
    uint64_t v42 = 2654435761LL * self->_isStroller;
    if ((has & 4) != 0) {
      goto LABEL_71;
    }
LABEL_76:
    int v47 = 0LL;
    return v29 ^ v54 ^ v53 ^ v52 ^ v36 ^ v51 ^ v28 ^ v50 ^ v49 ^ v30 ^ v35 ^ v37 ^ v42 ^ v47;
  }

  uint64_t v42 = 0LL;
  if ((has & 4) == 0) {
    goto LABEL_76;
  }
LABEL_71:
  hrTime = self->_hrTime;
  v44 = -hrTime;
  if (hrTime >= 0.0) {
    v44 = self->_hrTime;
  }
  uint64_t v45 = floor(v44 + 0.5);
  v46 = (v44 - v45) * 1.84467441e19;
  int v47 = 2654435761u * (unint64_t)fmod(v45, 1.84467441e19);
  if (v46 >= 0.0)
  {
    if (v46 > 0.0) {
      v47 += (unint64_t)v46;
    }
  }

  else
  {
    v47 -= (unint64_t)fabs(v46);
  }

  return v29 ^ v54 ^ v53 ^ v52 ^ v36 ^ v51 ^ v28 ^ v50 ^ v49 ^ v30 ^ v35 ^ v37 ^ v42 ^ v47;
}

  sub_1002F0B04(buf);
  v62 = (uint64_t *)(a1 + 720);
  uint64_t v63 = sub_1002A82BC(*(uint64_t *)&buf[0], "FenceContinousTrackingInterval", (void *)(a1 + 720));
  v64 = v63;
  int v65 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_65;
  }
  int v66 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    int v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    if (!v64) {
      goto LABEL_71;
    }
  }

  else
  {
LABEL_65:
    if (!v63) {
      goto LABEL_71;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  unsigned int v68 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    int v69 = *v62;
    LODWORD(buf[0]) = 134283521;
    *(void *)((char *)buf + 4) = v69;
    _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Fence: Overriding fWakeIntervalSeconds, %{private}.1lf",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    v136 = *v62;
    v161 = 134283521;
    v162 = v136;
    LODWORD(v157) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Overriding fWakeIntervalSeconds, %{private}.1lf",  &v161,  v157);
    int v138 = (char *)v137;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)",  "%s\n",  v137);
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_88;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v42 = *(void *)(a1 + 64);
    if (!v42) {
      uint64_t v42 = *(void *)(qword_1019A1A48 + 64);
    }
    int v43 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A4577C(v42);
    uint64_t v45 = (int)v43;
    else {
      v46 = 1;
    }
    uint64_t v4 = (v4 + v45 + v46 + 1);
    uint64_t v3 = *(_DWORD *)(a1 + 96);
    if ((v3 & 0x200) == 0)
    {
LABEL_64:
      if ((v3 & 0x400) == 0) {
        goto LABEL_88;
      }
      goto LABEL_82;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_64;
  }

  int v47 = *(void *)(a1 + 72);
  if (!v47) {
    int v47 = *(void *)(qword_1019A1A48 + 72);
  }
  int v48 = *(_DWORD *)(v47 + 16);
  int v49 = 2 * (v48 & 1);
  if ((v48 & 2) != 0) {
    v49 += 2;
  }
  if ((v48 & 4) != 0) {
    v49 += 2;
  }
  else {
    unsigned int v50 = 0;
  }
  *(_DWORD *)(v47 + 12) = v50;
  uint64_t v4 = (v4 + v50 + 2);
  if ((*(_DWORD *)(a1 + 96) & 0x400) != 0)
  {
LABEL_82:
    int v51 = *(void *)(a1 + 80);
    if (!v51) {
      int v51 = *(void *)(qword_1019A1A48 + 80);
    }
    int v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A42B54(v51);
    v54 = (int)v52;
    else {
      uint64_t v55 = 1;
    }
    uint64_t v4 = (v4 + v54 + v55 + 1);
  }

  uint64_t v31 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 116) |= 0x1000u;
  *(_DWORD *)(a1 + 72) = v31;
  uint64_t v13 = *(_DWORD *)(a2 + 116);
  if ((v13 & 0x2000) == 0)
  {
LABEL_32:
    if ((v13 & 0x4000) == 0) {
      return;
    }
    goto LABEL_33;
  }

  uint64_t v19 = *(void *)(v5 + 104);
  if (!v19) {
    uint64_t v19 = *(void *)(qword_1019A1CE8 + 104);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v19,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_67;
  }

  if ((v3 & 0xFF00) == 0) {
    goto LABEL_119;
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t v35 = *(void *)(a1 + 64);
    if (!v35) {
      uint64_t v35 = *(void *)(qword_1019A1CE8 + 64);
    }
    uint64_t v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B269B4(v35, a2);
    uint64_t v37 = (int)v36;
    else {
      uint64_t v38 = 1;
    }
    uint64_t v4 = (v4 + v37 + v38 + 1);
    uint64_t v3 = *(_DWORD *)(a1 + 184);
    if ((v3 & 0x200) == 0)
    {
LABEL_64:
      if ((v3 & 0x400) == 0) {
        goto LABEL_65;
      }
      goto LABEL_83;
    }
  }

  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_64;
  }

  int v39 = *(void *)(a1 + 72);
  if (!v39) {
    int v39 = *(void *)(qword_1019A1CE8 + 72);
  }
  uint64_t v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B280C8(v39, a2);
  uint64_t v41 = (int)v40;
  else {
    uint64_t v42 = 1;
  }
  uint64_t v4 = (v4 + v41 + v42 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x400) == 0)
  {
LABEL_65:
    if ((v3 & 0x800) == 0) {
      goto LABEL_66;
    }
    goto LABEL_89;
  }

  objc_msgSend( objc_msgSend( *(id *)(v39 + 3544),  "objectForKeyedSubscript:",  -[NSUUID initWithUUIDBytes:]([NSUUID alloc], "initWithUUIDBytes:", a5)),  "onMiLoPredictionEventUpdate:",  sub_100BA3DC4((uint64_t)v43));
  sub_100210578(&v50[1]);
  sub_100BA6E0C(&v45);
  sub_1000EAA04(v44);
  return sub_100BA6F58(v43);
}

  uint64_t v15 = *(void *)(v5 + 88);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_1019A1D38 + 88);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v15,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_67;
  }

      uint64_t v42 = HIDWORD(v165);
      int v43 = v166;
      v35 -= v166;
      goto LABEL_63;
    }

    if (*(_BYTE *)(a3 + 9))
    {
      if (v36 == 3) {
        goto LABEL_61;
      }
    }

    else if (v36 == 3 && *(_BYTE *)(a3 + 8))
    {
      goto LABEL_61;
    }

    int v43 = 0LL;
    uint64_t v42 = v166 + HIDWORD(v165);
LABEL_63:
    v44 = malloc(v35);
    if (!v44)
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018799E8);
      }
      v118 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(void *)&buf[4] = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_ERROR,  "WifiTile, failed to allocate memory for, %{public}lu, #CloneMe",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_195;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018799E8);
      }
      v172 = 134349056;
      int v173 = v35;
      LODWORD(v153) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiTile, failed to allocate memory for, %{public}lu, #CloneMe",  &v172,  v153);
      v117 = v119;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v119);
      goto LABEL_186;
    }

    uint64_t v45 = (char *)v44;
    v46 = v44 + 3;
    int v47 = fread(v44 + 3, 1uLL, v42, a2);
    if (v47 != v42)
    {
      int v121 = v47;
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_1018799E8);
      }
      unsigned int v122 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349312;
        *(void *)&buf[4] = v121;
        int v182 = 2050;
        *(void *)int v183 = v42;
        _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_ERROR,  "WifiTile, failed to read, %{public}lu, %{public}lu, #CloneMe",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_1018799E8);
        }
        v172 = 134349312;
        int v173 = v121;
        int v174 = 2050;
        *(void *)int v175 = v42;
        LODWORD(v153) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiTile, failed to read, %{public}lu, %{public}lu, #CloneMe",  &v172,  v153);
        v152 = (char *)v151;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v151);
        if (v152 != buf) {
          free(v152);
        }
      }

      int v120 = v45;
LABEL_194:
      free(v120);
      goto LABEL_195;
    }

    *(void *)uint64_t v45 = __ptr;
    *((_DWORD *)v45 + 2) = v164;
    if (WORD1(v165) != 3)
    {
      if (WORD1(v165) != 2)
      {
        if (WORD1(v165) == 1)
        {
          int v48 = *((_OWORD *)v45 + 11);
          v180[10] = *((_OWORD *)v45 + 10);
          v180[11] = v48;
          *(_OWORD *)((char *)&v180[11] + 12) = *(_OWORD *)(v45 + 188);
          int v49 = *((_OWORD *)v45 + 7);
          v180[6] = *((_OWORD *)v45 + 6);
          v180[7] = v49;
          unsigned int v50 = *((_OWORD *)v45 + 9);
          v180[8] = *((_OWORD *)v45 + 8);
          v180[9] = v50;
          int v51 = *((_OWORD *)v45 + 3);
          v180[2] = *((_OWORD *)v45 + 2);
          v180[3] = v51;
          int v52 = *((_OWORD *)v45 + 5);
          v180[4] = *((_OWORD *)v45 + 4);
          v180[5] = v52;
          uint64_t v53 = *((_OWORD *)v45 + 1);
          v180[0] = *(_OWORD *)v45;
          v180[1] = v53;
          *(int8x8_t *)&v54 = sub_1009831EC((uint64_t)v180, (uint64_t)v180);
          (*(void (**)(uint64_t, _OWORD *, double))(*(void *)a1 + 120LL))(a1, v180, v54);
        }

        else
        {
          unsigned int v68 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = WORD1(v165);
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "TILE: unknown section : %d", buf, 8u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            v172 = 67109120;
            LODWORD(v173) = WORD1(v165);
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: unknown section : %d",  &v172);
            int v101 = (char *)v100;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v100);
            if (v101 != buf) {
              free(v101);
            }
          }
        }

        goto LABEL_90;
      }

      if (!*(_BYTE *)(a3 + 8))
      {
        *(int8x8_t *)&uint64_t v55 = sub_10098329C((uint64_t)v45, (uint64_t)v45);
        (*(void (**)(uint64_t, char *, double))(*(void *)a1 + 136LL))(a1, v45, v55);
        if (*v46)
        {
          int v56 = 0LL;
          uint64_t v16 = (uint64_t)v46 + *((unsigned int *)v45 + 1);
          do
          {
            int v57 = (int *)(v16 + v56 * *((unsigned int *)v45 + 4));
            sub_1009832D0(v57, (uint64_t)v57);
            (*(void (**)(uint64_t, int *))(*(void *)a1 + 144LL))(a1, v57);
            ++v56;
          }

          while (v56 < *v46);
        }

        nullsub_10(0LL);
        int v168 = v58;
        nullsub_10(0LL);
        int v60 = 10LL;
        unsigned int v167 = v59;
        int v61 = *(void *)(a1 + 576);
        if (!v61)
        {
          sub_101267F18();
          abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLWifiTileFile.mm",  1146,  "traverseTileFile");
          __break(1u);
          goto LABEL_237;
        }

        if (*(_BYTE *)(a3 + 9))
        {
          if (sub_100C4BBA0(v59, v61, a3, &v162, &v161))
          {
            v62 = v161;
            if (v162 < v161)
            {
              uint64_t v63 = *(uint64_t **)(a1 + 576);
              v64 = *v63;
              int v65 = 0xCCCCCCCCCCCCCCCDLL * ((v63[1] - *v63) >> 1);
              if (v65 <= v162 || v65 <= v161) {
                sub_100092C20();
              }
              int v159 = v64 + 10LL * v162;
              int v168 = sub_1007EC028((unsigned __int8 *)v159);
              unsigned int v158 = v64 + 10LL * v62;
              unsigned int v167 = sub_1007EC028((unsigned __int8 *)v158);
              goto LABEL_122;
            }
          }

          int v74 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            int v75 = sub_1005B46E8((uint64_t)&v168);
            int v76 = sub_1005B46E8((uint64_t)v160);
            unsigned int v77 = sub_1005B46E8((uint64_t)&v167);
            int v78 = 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8LL) - **(void **)(a1 + 576)) >> 1);
            *(_DWORD *)buf = v157;
            *(void *)&buf[4] = v75;
            int v182 = 2048;
            *(void *)int v183 = v76;
            *(_WORD *)&v183[8] = 2048;
            *(void *)int v184 = v77;
            *(_WORD *)&v184[8] = 2048;
            *(void *)&v184[10] = v78;
            _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search",  buf,  0x2Au);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            int v102 = qword_101934A78;
            int v103 = sub_1005B46E8((uint64_t)&v168);
            unsigned int v104 = sub_1005B46E8((uint64_t)v160);
            int v105 = sub_1005B46E8((uint64_t)&v167);
            int v106 = 0xCCCCCCCCCCCCCCCDLL
                 * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8LL) - **(void **)(a1 + 576)) >> 1);
            v172 = v157;
            int v173 = v103;
            int v174 = 2048;
            *(void *)int v175 = v104;
            *(_WORD *)&v175[8] = 2048;
            *(void *)unsigned int v176 = v105;
            *(_WORD *)&v176[8] = 2048;
            *(void *)&v176[10] = v106;
            LODWORD(v153) = 42;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v102,  2LL,  "TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search",  &v172,  v153,  v154,  v155);
            v108 = (char *)v107;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v107);
            if (v108 != buf) {
              free(v108);
            }
          }

          unsigned int v158 = 0LL;
          int v159 = 0LL;
        }

        else
        {
          unsigned int v158 = 0LL;
          int v159 = 0LL;
LABEL_122:
          unsigned int v86 = (os_log_s *)qword_101934A78;
          if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
          {
            int v87 = sub_1005B46E8((uint64_t)&v168);
            int v88 = sub_1005B46E8((uint64_t)v160);
            v89 = sub_1005B46E8((uint64_t)&v167);
            v90 = 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8LL) - **(void **)(a1 + 576)) >> 1);
            *(_DWORD *)buf = v157;
            *(void *)&buf[4] = v87;
            int v182 = 2048;
            *(void *)int v183 = v88;
            *(_WORD *)&v183[8] = 2048;
            *(void *)int v184 = v89;
            *(_WORD *)&v184[8] = 2048;
            *(void *)&v184[10] = v90;
            _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEBUG,  "TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu",  buf,  0x2Au);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            v71 = p_vtable;
            v91 = qword_101934A78;
            int v92 = sub_1005B46E8((uint64_t)&v168);
            int v93 = sub_1005B46E8((uint64_t)v160);
            int v94 = sub_1005B46E8((uint64_t)&v167);
            unsigned int v95 = 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8LL) - **(void **)(a1 + 576)) >> 1);
            v172 = v157;
            int v173 = v92;
            int v174 = 2048;
            *(void *)int v175 = v93;
            *(_WORD *)&v175[8] = 2048;
            *(void *)unsigned int v176 = v94;
            *(_WORD *)&v176[8] = 2048;
            *(void *)&v176[10] = v95;
            LODWORD(v153) = 42;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v91,  2LL,  "TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu",  &v172,  v153,  v154,  v155);
            v73 = (char *)v96;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)",  "%s\n",  v96);
LABEL_130:
            if (v73 != buf) {
              free(v73);
            }
            int v67 = 0LL;
            uint64_t v16 = 1LL;
            p_vtable = v71;
            goto LABEL_92;
          }
        }

  *(_BYTE *)a2 = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v19 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "impactCanceledBecauseOfExistingAlert";
    int v193 = 2048;
    unsigned int v194 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v93 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "impactCanceledBecauseOfExistingAlert";
    v189 = 2048;
    v190 = v93;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    unsigned int v95 = (uint8_t *)v94;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v94);
    if (v95 != buf) {
      free(v95);
    }
  }

  a3[4] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 2) == 0)
  {
LABEL_7:
    if ((v10 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_73;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x400uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "multiPeakAccelPathLengthWithPeak", *(float *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0x17u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_26;
    }
    goto LABEL_63;
  }

  uint64_t v19 = *(void *)(a2 + 208);
  v5 |= 0x2000000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 208) = v19;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "alertCanceledBecauseOfSimilarPeaks", *(void *)(a1 + 112));
  int v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 216), 0x36u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }

  uint64_t v19 = *(_DWORD *)(a2 + 92);
  v3 |= 0x20000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 92) = v19;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "numSharpPeaks", *(_DWORD *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 0x18u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_26:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }

  uint64_t v36 = *(_BYTE *)(a2 + 386);
  v10 |= 0x400000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 386) = v36;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v9 & 0x200000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "continuousLockedBeforeImpact", *(_BYTE *)(a1 + 385));
  uint64_t v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 0x400000) == 0)
  {
LABEL_6:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  uint64_t result = *(float *)(a2 + 204);
  v3 |= 0x400000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 204) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x10000000000LL) == 0)
  {
LABEL_15:
    if ((v2 & 0x100000000000LL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "extrapolatedMaxAccelNorm", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 180), 0xBu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000000000LL) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000000000LL) == 0) {
      goto LABEL_14;
    }
    goto LABEL_63;
  }

  uint64_t v33 = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 212) |= 0x80u;
  *(_DWORD *)(a1 + 124) = v33;
  uint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 2) == 0)
  {
LABEL_32:
    if ((v10 & 0x40000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "nOldDM", *(_DWORD *)(a1 + 164));
  uint64_t v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x40000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x15u);
  uint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 8) == 0)
  {
LABEL_30:
    if ((v14 & 0x2000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }

  uint64_t v16 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 152) = v3;
  *(void *)(a1 + 32) = v16;
  if ((*(_DWORD *)(a2 + 152) & 0x80) != 0) {
    goto LABEL_62;
  }
  return result;
}

  uint64_t v29 = *(_DWORD *)(a2 + 72);
  v3 |= 0x400uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 72) = v29;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "metaFreefallTimeForImpact", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }

  uint64_t v8 = *(_DWORD *)(a2 + 88);
  v3 |= 0x10000uLL;
  *(void *)(a1 + 172) = v3;
  *(_DWORD *)(a1 + 88) = v8;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x100000000000LL) == 0)
  {
LABEL_18:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "kChaosAtMaxEnergyROTimestamp", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x4000000000LL) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000000000LL) == 0) {
      goto LABEL_16;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 167), 0x65u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x800000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_63;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "pushCount", *(_DWORD *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x16u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }

  uint64_t v28 = *(_DWORD *)(a2 + 112);
  v3 |= 0x200000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 112) = v28;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_30:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "regValRefRange", *(_DWORD *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x400000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 116));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_31;
    }
LABEL_63:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 124));
    if ((*(_DWORD *)(a1 + 136) & 0x10000000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_32;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0x1Du);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 112), 0x1Fu);
  }

  uint64_t v22 = *(void *)(a2 + 72);
  v3 |= 0x100uLL;
  *(void *)(result + 212) = v3;
  *(void *)(result + 72) = v22;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "planarSaturationAtMaxEnergy", *(float *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 164), 0x14u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100000000LL) == 0)
  {
LABEL_22:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }

  uint64_t result = *(double *)(a2 + 240);
  v3 |= 0x20000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 240) = result;
  if ((*(_DWORD *)(a2 + 248) & 0x2000000) != 0) {
    goto LABEL_62;
  }
  return result;
}

  PB::TextFormatter::format(this, "dailySteps30daysMean", *(double *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 241), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_63;
  }

  uint64_t v11 = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 72) = v11;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x200000000LL) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000000000LL) == 0) {
      goto LABEL_20;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "invalidGradePercentage", *(double *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x20000000000LL) == 0)
  {
LABEL_16:
    if ((v5 & 0x40000000000LL) == 0) {
      goto LABEL_17;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 152), 0xFu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x4000000000LL) == 0)
  {
LABEL_17:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }

  uint64_t v30 = *(void *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 88) = v30;
  uint64_t v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 216), 0x1Cu);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }

  uint64_t v29 = *(_DWORD *)(a2 + 144);
  v5 |= 0x4000000uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 144) = v29;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "rowStrokeAmplitude", *(float *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 0x13u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_63;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 48) = v12;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "auxVerticalRotation", *(float *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000000000LL) == 0) {
      goto LABEL_12;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0xAu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_63;
  }

  uint64_t v30 = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 64) = v30;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 1) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0) {
      goto LABEL_33;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "srcAvgYawBufferSum", *(float *)(a1 + 104));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400000) == 0)
  {
LABEL_29:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0x1Cu);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }

  uint64_t v32 = *(_BYTE *)(a2 + 153);
  *(_DWORD *)(a1 + 164) |= 0x800000u;
  *(_BYTE *)(a1 + 153) = v32;
  uint64_t v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x20) == 0)
  {
LABEL_31:
    if ((v10 & 0x40000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "rHat_Z", *(float *)(a1 + 128));
  uint64_t v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v9 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 159), 0x17u);
  uint64_t v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v11 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }

  uint64_t v16 = *(_BYTE *)(a2 + 219);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(a1 + 224) = v3;
  *(_BYTE *)(a1 + 219) = v16;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }

  PB::TextFormatter::format(this, "strideLengthUnsmoothed", *(double *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x4000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0x19u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }

LABEL_67:
  uint64_t v18 = *(void *)(v5 + 96);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_1019A0978 + 96);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  v18,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  (int)a2,  *(float *)(v5 + 48),  a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_69;
  }

  int v43 = CFAbsoluteTimeGetCurrent() + -60.0;
  if (v43 >= *a3) {
    int v43 = *a3;
  }
  *a3 = v43;
  if (v43 > *a2 && v29)
  {
    if (*a2 + a4 < v43) {
      int v43 = *a2 + a4;
    }
    *a3 = v43;
    if (qword_101934800 != -1) {
      dispatch_once(&qword_101934800, &stru_10182B9E8);
    }
    v44 = (os_log_s *)p_vtable[257];
    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      uint64_t v45 = *a2;
      v46 = *a3;
      *(_DWORD *)buf = 134349312;
      v71 = v45;
      uint64_t v72 = 2050;
      v73 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "Valid period returned, %{public}0.f - %{public}0.f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934800 != -1) {
        dispatch_once(&qword_101934800, &stru_10182B9E8);
      }
      int v56 = p_vtable[257];
      int v57 = *a2;
      int v58 = *a3;
      int v66 = 134349312;
      int v67 = v57;
      unsigned int v68 = 2050;
      int v69 = v58;
      LODWORD(v64) = 22;
      unsigned int v59 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v56,  1LL,  "Valid period returned, %{public}0.f - %{public}0.f",  &v66,  v64);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)",  "%s\n",  v59);
    }

    return 1LL;
  }

  if (qword_101934800 != -1) {
    dispatch_once(&qword_101934800, &stru_10182B9E8);
  }
  int v47 = (os_log_s *)p_vtable[257];
  if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "No valid on wrist periods seen", buf, 2u);
  }

  uint64_t result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934800 != -1) {
      dispatch_once(&qword_101934800, &stru_10182B9E8);
    }
    int v48 = p_vtable[257];
    LOWORD(v66) = 0;
    LODWORD(v64) = 2;
    int v49 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v48,  1LL,  "No valid on wrist periods seen",  &v66,  v64);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)",  "%s\n",  v49);
    goto LABEL_93;
  }

  return result;
}

  *a5 = v15;
  a5[1] = v14;
  if (v14)
  {
    uint64_t v22 = (unint64_t *)(v14 + 8);
    do
      uint64_t v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }

  return result;
}

  else {
    uint64_t v31 = a6;
  }
  if ((_DWORD)a4 && v31) {
    [*(id *)(a1 + 136) setInt:a4 forKey:@"CorrectiveCompensationEnabled" atKeyPath:v12];
  }
  uint64_t v32 = [*(id *)(a1 + 136) intForKey:@"IncidentalUseMode" atKeyPath:v12 defaultValue:0];
  if (a3 != 2 && v32) {
    [*(id *)(a1 + 136) setInt:1 forKey:@"IncidentalUseMode" atKeyPath:v12];
  }
  if ([*(id *)(a1 + 136) BOOLForKey:@"IsAppClip" atKeyPath:v12 defaultValue:0])
  {
    if (a3 == 2)
    {
      uint64_t v33 = TMGetKernelMonotonicClock();
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      uint64_t v34 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v12;
        v46 = 2050;
        *(double *)int v47 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Setting registration time for #appclip, Client:%{public, location:escape_only}@, registrationTime:%{public}f}",  buf,  0x26u);
      }

      [*(id *)(a1 + 136) setDouble:@"AuthorizationRegisterTime" forKey:v12 atKeyPath:v33];
      goto LABEL_88;
    }

    [*(id *)(a1 + 136) removeValueForKey:@"AuthorizationRegisterTime" atKeyPath:v12];
  }

  if ((a3 & 6) == 0)
  {
    [*(id *)(a1 + 136) removeValueForKey:@"ProvisionalMonitoring" atKeyPath:v12];
    [*(id *)(a1 + 136) removeValueForKey:@"ConsumptionPeriodBegin" atKeyPath:v12];
    [*(id *)(a1 + 136) removeValueForKey:@"NextConsumptionThresholdScore" atKeyPath:v12];
    [*(id *)(a1 + 136) removeValueForKey:@"NextNextConsumptionThresholdScore" atKeyPath:v12];
    uint64_t v35 = *(void **)(a1 + 136);
    if (a3 == 1)
    {
      [v35 removeValueForKey:@"TemporaryAuthorization" atKeyPath:v12];
      [*(id *)(a1 + 136) removeValueForKey:@"LocationButtonUseMode" atKeyPath:v12];
    }

    else
    {
      [v35 removeValueForKey:@"AuthorizationUpgradeAvailable" atKeyPath:v12];
    }
  }

    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    uint64_t v37 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v38 = off_10183F920[v59];
      *(_DWORD *)buf = 138412802;
      *(void *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v38;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "Service: key, %@, type, %s, active, %d",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      uint64_t v55 = off_10183F920[v59];
      int v69 = 138412802;
      int v70 = v12;
      v71 = 2080;
      uint64_t v72 = v55;
      v73 = 1024;
      int v74 = a4;
      int v56 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "Service: key, %@, type, %s, active, %d",  &v69,  28);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLClientManager::setClientServiceActiveAtTime(CLClientKeyPath *, CLClientServiceType, BOOL, BOOL, double, Device)",  "%s\n",  v56);
      if (v56 != buf) {
        free(v56);
      }
    }

    sub_1005569D8((_BYTE *)a1);
    if (a6)
    {
      uint64_t v29 = 1LL;
      goto LABEL_111;
    }

    if (!_os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync")
      || v59 <= 0xA && ((1LL << v59) & 0x430) != 0)
    {
      int v39 = (const char *)objc_msgSend(objc_msgSend(v12, "legacyClientKey"), "UTF8String");
      uint64_t v40 = v39 ? (char *)v39 : "";
      sub_1010DDBC0(buf, v40);
      sub_10056DD40(a1, buf);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    uint64_t v41 = objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v12), "dictionary");
    int v67 = [v12 legacyClientKey];
    unsigned int v68 = v41;
    sub_100E57638( (uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v68,  &v67,  1LL),  (uint64_t)"clientStatus");
    uint64_t v29 = 1LL;
LABEL_83:
    if (((1 << v59) & 0xFFFFFFD1) == 0)
    {
      if (a4)
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
        uint64_t v42 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(void *)&buf[20] = v12;
          int v79 = 2050;
          v80 = v59;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#pla mark service active and start zone-monitoring, Client:%{public, location:e scape_only}@, SpecifiedService:%{public, location:CLClientServiceType}lld}",  buf,  0x26u);
        }

        int v43 = (char *)objc_msgSend(objc_msgSend(v12, "legacyClientKey"), "UTF8String");
        if (v43) {
          v44 = v43;
        }
        else {
          v44 = "";
        }
        sub_1010DDBC0(buf, v44);
        sub_100583234(a1, (uint64_t *)buf, 1);
      }

      else
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
        uint64_t v45 = (os_log_s *)qword_101934988;
        if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(void *)&buf[20] = v12;
          int v79 = 2050;
          v80 = v59;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#pla mark service inactive and try stop zone-monitoring, Client:%{public, locat ion:escape_only}@, SpecifiedService:%{public, location:CLClientServiceType}lld}",  buf,  0x26u);
        }

        v62 = 0u;
        uint64_t v63 = 0u;
        int v60 = 0u;
        int v61 = 0u;
        v46 = (void *)qword_101996D88;
        int v47 = [(id)qword_101996D88 countByEnumeratingWithState:&v60 objects:v66 count:16];
        if (v47)
        {
          int v48 = *(void *)v61;
LABEL_99:
          int v49 = 0LL;
          while (1)
          {
            if (*(void *)v61 != v48) {
              objc_enumerationMutation(v46);
            }
            unsigned int v50 = *(void *)(*((void *)&v60 + 1) + 8 * v49);
            int v51 = objc_autoreleasePoolPush();
            LOBYTE(v50) = [*(id *)(a1 + 136) hasValueForKey:v50 atKeyPath:v12];
            objc_autoreleasePoolPop(v51);
            if ((v50 & 1) != 0) {
              goto LABEL_111;
            }
            if (v47 == (id)++v49)
            {
              int v47 = [v46 countByEnumeratingWithState:&v60 objects:v66 count:16];
              if (v47) {
                goto LABEL_99;
              }
              break;
            }
          }
        }

        int v52 = (char *)objc_msgSend(objc_msgSend(v12, "legacyClientKey"), "UTF8String");
        if (v52) {
          uint64_t v53 = v52;
        }
        else {
          uint64_t v53 = "";
        }
        sub_1010DDBC0(buf, v53);
        sub_100583234(a1, (uint64_t *)buf, 0);
      }

      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

  uint64_t v18 = *(void *)(v5 + 96);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_1019A11B8 + 96);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  v18,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }

  uint64_t v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[13];
  if ((v27 & 0x80000000) != 0)
  {
    uint64_t v28 = 11;
  }

  else if (v27 >= 0x80)
  {
    uint64_t v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 1;
    uint64_t v3 = a1[17];
  }

  else
  {
    uint64_t v28 = 2;
  }

  uint64_t v4 = (v28 + v4);
  if ((v3 & 0x1000) == 0)
  {
LABEL_53:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_79;
  }

  uint64_t v29 = *(_DWORD *)(a2 + 84);
  a1[37] |= 0x80000u;
  a1[21] = v29;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x100000) == 0)
  {
LABEL_29:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_69;
  }

  *(void *)buf = v93;
  sub_100006BC8((void ***)buf);
  *(void *)buf = v94;
  sub_100006BC8((void ***)buf);
  *(void *)buf = v95;
  sub_100006BC8((void ***)buf);
  a2 = v91;
LABEL_68:
  int v101 = 0LL;
  int v102 = 0LL;
  int v103 = 0LL;
  int v76 = *v58;
  int v75 = v58[1];
  *(_OWORD *)buf = *(_OWORD *)*v58;
  v100 = *(void *)(v76 + 16);
  unsigned int v77 = 0xAAAAAAAAAAAAAAABLL * ((v75 - v76) >> 3);
  int v78 = 0.0;
  if (v77 >= 2)
  {
    int v79 = 0LL;
    v80 = v77 - 1;
    v81 = (double *)(v76 + 40);
    do
    {
      v82 = (double *)&buf[24 * v79];
      v79 ^= 1uLL;
      int v83 = &buf[24 * v79];
      int v84 = *((_OWORD *)v81 - 1);
      *(_OWORD *)int v83 = v84;
      int v85 = *v81;
      v81 += 3;
      *((double *)v83 + 2) = v85;
      unsigned int v86 = *v82 - *(double *)&v84;
      *(double *)&int v84 = v82[1] - *((double *)&v84 + 1);
      char *v82 = v86;
      *((void *)v82 + 1) = v84;
      int v87 = v82[2] - v85;
      v82[2] = v87;
      int v78 = v78 + sqrt(*(double *)&v84 * *(double *)&v84 + v86 * v86 + v87 * v87);
      --v80;
    }

    while (v80);
  }

  *a2 = v78;
}

        if (v53 <= (unint64_t)v38)
        {
          int v60 = (double *)(v53 + 16);
        }

        else
        {
          uint64_t v33 = (double *)v53;
          int v60 = v32;
        }
      }

      uint64_t v32 = v60;
    }

    uint64_t v36 = (*(double *)(*(void *)(a1 + 40) + 16 * v37 + 8) - *(double *)(a2 + 304))
        * 100.0
        / (*(float *)(a2 + 356) - *(double *)(a2 + 304));
    *(double *)(a1 + 408) = v36;
    uint64_t v35 = v36 - (fmax(fmin((v36 + -35.0) / 50.0, 1.0), 0.0) * 25.0 + 10.0);
    if (v23 >= v35 || v23 >= *(double *)(a1 + 8))
    {
      *(_BYTE *)(a1 + 424) = 0;
      *(_DWORD *)__p = 0;
      sub_10032E068((unsigned __int16 *)(a1 + 80), __p);
    }

    else
    {
      *(_BYTE *)(a1 + 424) = 1;
      *(_DWORD *)__p = 1;
      sub_10032E068((unsigned __int16 *)(a1 + 80), __p);
    }

    *(_BYTE *)(a1 + 64) = 1;
  }

    if (v30 > 0.0) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }

  uint64_t v17 = 0LL;
LABEL_68:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (v65)
  {
    int v66 = v65;
    operator delete(v65);
  }

  return v17;
}

  *(_BYTE *)(a1 + 474) |= 4u;
  if (v18) {
LABEL_62:
  }
    *(_BYTE *)(a1 + 505) |= 4u;
}

  uint64_t v21 = *(void *)(v5 + 120);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_1019A1CE8 + 120);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  v21,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_73;
  }

  uint64_t v17 = *(void *)(v5 + 104);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_1019A1D38 + 104);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v17,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_73;
  }

  uint64_t v17 = *(void *)(v5 + 112);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_1019A1D48 + 112);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17,  v17,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_73;
  }

  *(_BYTE *)a2 = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v21 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "impactReplacedBecauseOfNewImpact";
    int v193 = 2048;
    unsigned int v194 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v96 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "impactReplacedBecauseOfNewImpact";
    v189 = 2048;
    v190 = v96;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v98 = (uint8_t *)v97;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v97);
    if (v98 != buf) {
      free(v98);
    }
  }

  a3[5] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x200) == 0)
  {
LABEL_8:
    if ((v10 & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_79;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "poseAtImpact", *(float *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v5 & 4) == 0) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000000LL) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_69;
  }

  uint64_t v25 = *(void *)(a2 + 8);
  v5 |= 1uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 8) = v25;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "fallStatsDispatchResetOnAccelSensorTime", *(void *)(a1 + 160));
  int v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 0x3Eu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_23:
    if ((v5 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_69;
  }

  uint64_t v24 = *(_DWORD *)(a2 + 104);
  v3 |= 0x100000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 104) = v24;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800000000LL) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }

  uint64_t v42 = *(_BYTE *)(a2 + 393);
  v10 |= 0x20000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 393) = v42;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x2000000) == 0)
  {
LABEL_35:
    if ((v9 & 0x4000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "gatingOffWristPostImpact", *(_BYTE *)(a1 + 391));
  uint64_t v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_19:
    if ((v15 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 256), 0x15u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_69;
  }

  uint64_t result = *(float *)(a2 + 184);
  v3 |= 0x20000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 184) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x200000000000LL) == 0)
  {
LABEL_21:
    if ((v2 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "jerkVectorMagMax", *(float *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 200), 0x11u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_69;
  }

        *(_DWORD *)(a1 + 8) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 4u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 4LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  int v39 = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 212) |= 0x200000u;
  *(_DWORD *)(a1 + 180) = v39;
  uint64_t v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x400) != 0) {
    goto LABEL_68;
  }
LABEL_38:
  if ((v10 & 0x800000) != 0)
  {
LABEL_39:
    uint64_t v11 = *(_DWORD *)(a2 + 188);
    *(_DWORD *)(a1 + 212) |= 0x800000u;
    *(_DWORD *)(a1 + 188) = v11;
  }

  return a1;
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 124), 0x1Bu);
  uint64_t v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 2) == 0)
  {
LABEL_36:
    if ((v14 & 0x40000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_69;
  }

  uint64_t v35 = *(void *)(a2 + 8);
  v3 |= 1uLL;
  *(void *)(result + 164) = v3;
  *(void *)(result + 8) = v35;
  if ((*(void *)(a2 + 164) & 2) != 0) {
    goto LABEL_68;
  }
  return result;
}

  uint64_t v10 = *(_BYTE *)(a2 + 160);
  v3 |= 0x2000000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 160) = v10;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x200000000LL) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "kEnergyMetRO", *(_BYTE *)(a1 + 164));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 156), 0x6Bu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x200000000000LL) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_23;
    }
    goto LABEL_69;
  }

        *(_DWORD *)(a1 + 20) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(_DWORD *)(a1 + 16) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }

            uint64_t v36 = v21++;
            uint64_t v37 = *(_BYTE *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            uint64_t v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          uint64_t v2 = v36 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v2;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

  uint64_t v11 = *(void *)(a2 + 8);
  v3 |= 1uLL;
  *(void *)(a1 + 164) = v3;
  *(void *)(a1 + 8) = v11;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "speed", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_30:
    if ((v4 & 0x10) == 0) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }

        *(_DWORD *)(a1 + 20) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t v34 = *(void *)(a2 + 24);
  v3 |= 4uLL;
  *(void *)(result + 164) = v3;
  *(void *)(result + 24) = v34;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0) {
      goto LABEL_37;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "signalToAmbientWindowRatio", *(_DWORD *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000LL) == 0) {
      goto LABEL_34;
    }
LABEL_69:
    PB::TextFormatter::format(this, "totalRateTotal", *(float *)(a1 + 156));
    if ((*(void *)(a1 + 164) & 0x200000000LL) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_35;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0x20u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_34:
    if ((v4 & 0x800) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0x22u);
  }

  uint64_t v28 = *(_DWORD *)(a2 + 168);
  v3 |= 0x10000000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 168) = v28;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x2000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "rolloverEnergyAtMaxChaos", *(float *)(a1 + 164));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }

              *(_DWORD *)(a1 + 32) = v24;
              goto LABEL_73;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_46;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_62;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_46;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_62;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                uint64_t v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }

                  int v39 = v27++;
                  uint64_t v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 36) = v31;
LABEL_73:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_62:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_46:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_73;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_73;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

              *(_DWORD *)(a1 + 32) = v24;
              goto LABEL_73;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_46;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_62;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_46;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_62;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v37 = 0;
                uint64_t v38 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }

                  int v39 = v27++;
                  uint64_t v40 = *(_BYTE *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  uint64_t v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    uint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 36) = v31;
LABEL_73:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_62:
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_46:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_73;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_73;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  uint64_t v17 = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 92) = v17;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x80000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "segmentsRejectedByIsFeasibleWalkingSpeed", *(_DWORD *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0x15u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_69;
  }

        *(_DWORD *)(a1 + 16) = v31;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          uint64_t v2 = *((void *)this + 1) + 8LL;
          *((void *)this + 1) = v2;
        }

        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v2 = *((void *)this + 1);
      }

      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = 0LL;
    if (v2 > v3) {
      uint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        uint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t v35 = *(_DWORD *)(a2 + 180);
  v5 |= 0x800000000uLL;
  *(void *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 180) = v35;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "startTime", *(void *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 0x19u);
  if ((*(void *)(v3 + 192) & 0x40000) != 0) {
LABEL_27:
  }
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x1Au);
LABEL_28:
  uint64_t v5 = *(const PB::Base **)(v3 + 32);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5, 0x1Bu);
  }
  int v6 = *(void *)(v3 + 192);
  if ((v6 & 0x400) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x1Cu);
    int v6 = *(void *)(v3 + 192);
    if ((v6 & 0x200) == 0)
    {
LABEL_32:
      if ((v6 & 0x2000000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_71;
    }
  }

  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_32;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x1Du);
  int v6 = *(void *)(v3 + 192);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 36) = v18;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "hasRecentHeadTurn", *(_BYTE *)(a1 + 181));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x10u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_69;
  }

  uint64_t v38 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 164) |= 1u;
  *(void *)(a1 + 56) = v38;
  uint64_t v10 = *(_DWORD *)(a2 + 164);
  if ((v10 & 0x40) == 0)
  {
LABEL_37:
    if ((v10 & 0x2000000) == 0) {
      goto LABEL_38;
    }
LABEL_69:
    uint64_t v40 = *(_BYTE *)(a2 + 155);
    *(_DWORD *)(a1 + 164) |= 0x2000000u;
    *(_BYTE *)(a1 + 155) = v40;
    if ((*(_DWORD *)(a2 + 164) & 0x20000) == 0) {
      return a1;
    }
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "trackingDisabled", *(_BYTE *)(a1 + 160));
  uint64_t v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x40000) == 0)
  {
LABEL_35:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 156), 0x1Du);
  uint64_t v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v11 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_69;
  }

  uint64_t result = *(double *)(a2 + 184);
  v3 |= 0x400000uLL;
  *(void *)(a1 + 224) = v3;
  *(double *)(a1 + 184) = result;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_69;
  }

  PB::TextFormatter::format(this, "verticalOscillation", *(double *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x100000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }

LABEL_76:
  uint64_t v21 = *(void *)(v5 + 120);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_1019A0978 + 120);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  v21,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_82;
  }

  if (buf[24] && (buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  return v18;
}

  uint64_t v33 = *(void *)(a2 + 200);
  *(_DWORD *)(a1 + 228) |= 0x4000000u;
  *(void *)(a1 + 200) = v33;
  uint64_t v5 = *(_DWORD *)(a2 + 228);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_56:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_57;
    }
LABEL_78:
    uint64_t v35 = *(void *)(a2 + 216);
    *(_DWORD *)(a1 + 228) |= 0x10000000u;
    *(void *)(a1 + 216) = v35;
    if ((*(_DWORD *)(a2 + 228) & 0x20000000) == 0) {
      return;
    }
    goto LABEL_79;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(_DWORD *)(v5 + 80),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_78;
  }

  uint64_t v34 = *(void *)(a1 + 80);
  if (!v34) {
    uint64_t v34 = *(void *)(qword_1019A0BD8 + 80);
  }
  uint64_t v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001DDDD4(v34, a2);
  uint64_t v36 = (int)v35;
  else {
    uint64_t v37 = 1;
  }
  uint64_t v5 = (v5 + v36 + v37 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 100);
  if ((v3 & 0x800) != 0) {
    goto LABEL_82;
  }
LABEL_60:
  if ((v3 & 0x1000) == 0) {
    goto LABEL_97;
  }
LABEL_88:
  uint64_t v40 = *(void *)(a1 + 88);
  if (!v40) {
    uint64_t v40 = *(void *)(qword_1019A0BD8 + 88);
  }
  uint64_t v41 = *(unsigned __int8 *)(v40 + 36);
  if (*(_BYTE *)(v40 + 36))
  {
    uint64_t v42 = (v41 << 31 >> 31) & 9;
    if ((v41 & 2) != 0) {
      v42 += 9;
    }
    if ((v41 & 4) != 0) {
      uint64_t v41 = v42 + 9;
    }
    else {
      uint64_t v41 = v42;
    }
  }

  *(_DWORD *)(v40 + 32) = v41;
  uint64_t v5 = (v5 + v41 + 2);
LABEL_97:
  *(_DWORD *)(a1 + 96) = v5;
  return v5;
}

    dispatch_once(&qword_101934860, &stru_101833578);
    goto LABEL_5;
  }

  *(_BYTE *)(a1 + 246) = a2;
  if (*(double *)(a1 + 680) != 0.0 && *(void *)(a1 + 712))
  {
    Current = CFAbsoluteTimeGetCurrent();
    uint64_t v10 = (Current - *(double *)(a1 + 688)) / 60.0;
    if (v10 >= 1.0)
    {
      uint64_t v11 = "active:off";
      uint64_t v12 = *(_DWORD *)(a1 + 720);
      if (v12 == 1) {
        uint64_t v11 = "active:fences";
      }
      if (v12 == 2) {
        uint64_t v13 = "active:fake";
      }
      else {
        uint64_t v13 = v11;
      }
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      uint64_t v14 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "WsbMetric, regmode, %{public}s, duration, %{public}.1f",  (uint8_t *)&buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = v10;
        int v70 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, regmode, %{public}s, duration, %{public}.1f",  &__dst,  22);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::programSampleNetworks(BOOL)",  "%s\n",  (const char *)v70);
        if (v70 != &buf) {
          free(v70);
        }
      }

      v84[0] = _NSConcreteStackBlock;
      v84[1] = 3221225472LL;
      v84[2] = sub_10033B278;
      v84[3] = &unk_101827B10;
      v84[4] = v13;
      *(double *)&v84[5] = v10;
      AnalyticsSendEventLazy(@"com.apple.clx.wsb.regmode", v84);
    }

    if (a2) {
      uint64_t v15 = 2;
    }
    else {
      uint64_t v15 = 1;
    }
    *(_DWORD *)(a1 + 720) = v15;
    *(double *)(a1 + 688) = Current;
  }

  if (a2)
  {
    v81 = 0LL;
    v82 = 0LL;
    int v83 = 0LL;
    memset(v80, 0, sizeof(v80));
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    uint64_t v16 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = &__dst;
      sub_1007EC454(&__dst);
      if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v17 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      sub_1007EC454(&v79);
      size = (char)v79.__r_.__value_.__s.__size_;
      uint64_t v19 = v79.__r_.__value_.__r.__words[0];
      sub_1007EC454(&__p);
      uint64_t v20 = &v79;
      if (size < 0) {
        uint64_t v20 = (std::string *)v19;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v20;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2081;
      int v88 = p_p;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "@WsbActive, Create, %{private}s, %{private}s, %{private}s",  (uint8_t *)&buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      uint64_t v63 = qword_101934868;
      v64 = &v79;
      sub_1007EC454(&v79);
      if ((v79.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        v64 = (std::string *)v79.__r_.__value_.__r.__words[0];
      }
      sub_1007EC454(&__p);
      int v65 = (char)__p.__r_.__value_.__s.__size_;
      int v66 = __p.__r_.__value_.__r.__words[0];
      sub_1007EC454(&v77);
      int v67 = &__p;
      if (v65 < 0) {
        int v67 = (std::string *)v66;
      }
      if ((v77.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unsigned int v68 = &v77;
      }
      else {
        unsigned int v68 = (std::string *)v77.__r_.__value_.__r.__words[0];
      }
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136381187;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v64;
      WORD2(__dst.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v67;
      HIWORD(__dst.__r_.__value_.__r.__words[2]) = 2081;
      unsigned int v86 = v68;
      LODWORD(v71) = 32;
      int v69 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v63,  1LL,  "@WsbActive, Create, %{private}s, %{private}s, %{private}s",  &__dst,  v71);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::programSampleNetworks(BOOL)",  "%s\n",  (const char *)v69);
      if (v69 != &buf) {
        free(v69);
      }
    }

    if (byte_1019A1918[23] < 0) {
      sub_1010DD48C(&__dst, *(void **)byte_1019A1918, *(unint64_t *)&byte_1019A1918[8]);
    }
    else {
      __dst = *(std::string *)byte_1019A1918;
    }
    data = xmmword_1019A1930;
    uint64_t v24 = DWORD1(xmmword_1019A1930);
    int v76 = DWORD1(xmmword_1019A1930);
    LODWORD(v77.__r_.__value_.__l.__data_) = xmmword_1019A1930;
    uint64_t v25 = *((void *)&xmmword_1019A1940 + 1);
    uint64_t v27 = xmmword_1019A1940;
    __p.__r_.__value_.__r.__words[0] = v27 >> 64;
    uint64_t v26 = v27;
    v79.__r_.__value_.__r.__words[0] = xmmword_1019A1940;
    uint64_t v28 = xmmword_1019A1950;
    int v75 = xmmword_1019A1950;
    uint64_t v29 = BYTE1(xmmword_1019A1950);
    int v74 = BYTE1(xmmword_1019A1950);
    uint64_t v30 = DWORD1(xmmword_1019A1950);
    uint64_t v31 = (uint64_t *)(a1 + 256);
    uint64_t v72 = 1;
    v73 = DWORD1(xmmword_1019A1950);
    uint64_t v32 = v82;
    if (v82 >= v83)
    {
      uint64_t v34 = sub_100352B70( &v81,  v31,  (__int128 *)&__dst,  (int *)&v77,  &v76,  &v72,  (double *)&v79,  (uint64_t *)&__p,  &v75,  &v74,  &v73);
    }

    else
    {
      uint64_t v33 = *v31;
      if ((char)__dst.__r_.__value_.__s.__size_ < 0)
      {
        sub_1010DD48C(&buf, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        uint64_t v24 = v76;
        data = (int)v77.__r_.__value_.__l.__data_;
        uint64_t v26 = v79.__r_.__value_.__r.__words[0];
        uint64_t v25 = __p.__r_.__value_.__r.__words[0];
        uint64_t v28 = v75;
        uint64_t v29 = v74;
        uint64_t v30 = v73;
      }

      else
      {
        buf = __dst;
      }

      *(void *)uint64_t v32 = v33;
      uint64_t v35 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)(v32 + 24) = buf.__r_.__value_.__l.__cap_;
      *(_OWORD *)(v32 + 8) = v35;
      *(_DWORD *)(v32 + 32) = data;
      *(_DWORD *)(v32 + 36) = v24;
      *(_DWORD *)(v32 + 40) = 1;
      *(void *)(v32 + 48) = v26;
      *(void *)(v32 + 56) = v25;
      *(_BYTE *)(v32 + 64) = v28;
      *(_BYTE *)(v32 + 65) = v29;
      *(_DWORD *)(v32 + 68) = v30;
      *(_BYTE *)(v32 + 72) = 0;
      uint64_t v34 = v32 + 88;
      *(void *)(v32 + 80) = 0LL;
    }

    v82 = v34;
    uint64_t v36 = (uint64_t *)(a1 + 264);
    uint64_t v72 = 6;
    if (v34 >= v83)
    {
      uint64_t v38 = sub_100352B70( &v81,  v36,  (__int128 *)&__dst,  (int *)&v77,  &v76,  &v72,  (double *)&v79,  (uint64_t *)&__p,  &v75,  &v74,  &v73);
    }

    else
    {
      uint64_t v37 = *v36;
      else {
        buf = __dst;
      }
      uint64_t v40 = v76;
      int v39 = (int)v77.__r_.__value_.__l.__data_;
      uint64_t v41 = v79.__r_.__value_.__r.__words[0];
      uint64_t v42 = __p.__r_.__value_.__r.__words[0];
      int v43 = v75;
      v44 = v74;
      uint64_t v45 = v73;
      *(void *)uint64_t v34 = v37;
      cap = buf.__r_.__value_.__l.__cap_;
      *(_OWORD *)(v34 + 8) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)(v34 + 24) = cap;
      *(_DWORD *)(v34 + 32) = v39;
      *(_DWORD *)(v34 + 36) = v40;
      *(_DWORD *)(v34 + 40) = 6;
      *(void *)(v34 + 48) = v41;
      *(void *)(v34 + 56) = v42;
      *(_BYTE *)(v34 + 64) = v43;
      *(_BYTE *)(v34 + 65) = v44;
      *(_DWORD *)(v34 + 68) = v45;
      *(_BYTE *)(v34 + 72) = 0;
      uint64_t v38 = v34 + 88;
      *(void *)(v34 + 80) = 0LL;
    }

    v82 = v38;
    int v47 = (uint64_t *)(a1 + 272);
    uint64_t v72 = 11;
    if (v38 >= v83)
    {
      int v49 = sub_100352B70( &v81,  v47,  (__int128 *)&__dst,  (int *)&v77,  &v76,  &v72,  (double *)&v79,  (uint64_t *)&__p,  &v75,  &v74,  &v73);
    }

    else
    {
      int v48 = *v47;
      else {
        buf = __dst;
      }
      int v51 = v76;
      unsigned int v50 = (int)v77.__r_.__value_.__l.__data_;
      int v52 = v79.__r_.__value_.__r.__words[0];
      uint64_t v53 = __p.__r_.__value_.__r.__words[0];
      v54 = v75;
      uint64_t v55 = v74;
      int v56 = v73;
      *(void *)uint64_t v38 = v48;
      int v57 = buf.__r_.__value_.__l.__cap_;
      *(_OWORD *)(v38 + 8) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)(v38 + 24) = v57;
      *(_DWORD *)(v38 + 32) = v50;
      *(_DWORD *)(v38 + 36) = v51;
      *(_DWORD *)(v38 + 40) = 11;
      *(void *)(v38 + 48) = v52;
      *(void *)(v38 + 56) = v53;
      *(_BYTE *)(v38 + 64) = v54;
      *(_BYTE *)(v38 + 65) = v55;
      *(_DWORD *)(v38 + 68) = v56;
      *(_BYTE *)(v38 + 72) = 0;
      int v49 = v38 + 88;
      *(void *)(v38 + 80) = 0LL;
    }

    v82 = v49;
    sub_10033B334(a1, &v81, v80);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
    sub_100023498((void ***)&buf);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
    sub_100023498((void ***)&buf);
  }

  else
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    uint64_t v22 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "@WsbActive, Clear", (uint8_t *)&buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v71) = 2;
      v62 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@WsbActive, Clear",  &__dst,  v71);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::programSampleNetworks(BOOL)",  "%s\n",  (const char *)v62);
      if (v62 != &buf) {
        free(v62);
      }
    }

    sub_10032F570(a1, 0);
  }

    sub_10047C2A0((uint64_t)a1, a2, a3, a4, -1);
    return;
  }

  *(_DWORD *)buf = 0;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120LL))(a1, buf);
  *(_DWORD *)buf = 2;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120LL))(a1, buf);
  *(_DWORD *)buf = 1;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120LL))(a1, buf);
  *(_DWORD *)buf = 3;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120LL))(a1, buf);
  *(_DWORD *)buf = 4;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120LL))(a1, buf);
  *(_DWORD *)buf = 39;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120LL))(a1, buf);
  *(_DWORD *)buf = 5;
  (*(void (**)(char *, uint8_t *))(*(void *)a1 + 120LL))(a1, buf);
  if (!a1[112])
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_10183B460);
    }
    uint64_t v45 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      v46 = a1 + 8;
      if (a1[31] < 0) {
        v46 = (void *)*v46;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v53 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "LocationProvider,Sending location unavailable notification through for %s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_10183B460);
      }
      int v49 = a1 + 8;
      if (a1[31] < 0) {
        int v49 = (void *)*v49;
      }
      *(_DWORD *)int v51 = 136315138;
      *(void *)&v51[4] = v49;
      unsigned int v50 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "LocationProvider,Sending location unavailable notification through for %s",  v51);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLo cationProvider_Type::NotificationData &, BOOL, int, BOOL)",  "%s\n",  v50);
    }

    a1[112] = 1;
    goto LABEL_76;
  }

  uint64_t v21 = *(void *)(v5 + 120);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_1019A11B8 + 120);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  v21,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_82;
  }

  uint64_t v37 = *(_DWORD *)(a2 + 120);
  a1[37] |= 0x10000000u;
  a1[30] = v37;
  uint64_t v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_41;
    }
LABEL_78:
    int v39 = *(_DWORD *)(a2 + 128);
    a1[37] |= 0x40000000u;
    a1[32] = v39;
    if ((*(_DWORD *)(a2 + 148) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_79;
  }

          if (sub_10065EEB4(&buf, "com.apple.locationd.bundle-/System/Library/LocationBundles/RemindersAlerts.bundle")
            && sub_10065EEB4(&buf, "com.apple.locationd.bundle-/System/Library/LocationBundles/Wea.bundle")
            && sub_10065EEB4( &buf,  "com.apple.locationd.bundle-/AppleInternal/Library/Frameworks/CoreAutomationDevice.framework")
            && sub_10065EEB4( &buf,  "com.apple.locationd.bundle-/AppleInternal/Library/LocationBundles/FenceTester.bundle")
            && sub_10065EEB4( &buf,  "com.apple.locationd.bundle-/System/Library/LocationBundles/LocationFenceSync.bundle")
            && sub_10065EEB4( &buf,  "com.apple.locationd.bundle-/System/Library/LocationBundles/LocationdInternal.bundle"))
          {
            uint64_t v20 = sub_1009E76D0((uint64_t)(a1 + 14), (char *)&buf);
            uint64_t v21 = v20;
            if ((v20 & 0x80000000) != 0)
            {
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101847D40);
              }
              int v57 = (os_log_s *)qword_101934878;
              if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
              {
                int v58 = &buf;
                if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  int v58 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)__dst = 68289282;
                *(_DWORD *)&__dst[4] = 0;
                *(_WORD *)&__dst[8] = 2082;
                *(void *)&__dst[10] = "";
                *(_WORD *)&__dst[18] = 2082;
                *(void *)&__dst[20] = v58;
                _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Fence: unable to retrieve count of Fences, bundleID:%{public, location:escape_only}s}",  __dst,  0x1Cu);
                if (qword_101934870 != -1) {
                  dispatch_once(&qword_101934870, &stru_101847D40);
                }
              }

              unsigned int v59 = (os_log_s *)qword_101934878;
              if (!os_signpost_enabled((os_log_t)qword_101934878))
              {
LABEL_218:
                int v61 = (os_log_s *)qword_101934878;
                if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
                {
                  if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    v62 = __str.__r_.__value_.__s.__size_;
                  }
                  else {
                    v62 = __str.__r_.__value_.__l.__size_;
                  }
                  uint64_t v63 = __dst;
                  sub_1000392EC((uint64_t)__dst, v62 + 1);
                  if (__dst[23] < 0) {
                    uint64_t v63 = *(_BYTE **)__dst;
                  }
                  if (v62)
                  {
                    if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                      p_str = &__str;
                    }
                    else {
                      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                    }
                    memmove(v63, p_str, v62);
                  }

                  *(_WORD *)&v63[v62] = 47;
                  if ((v126.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    int v65 = &v126;
                  }
                  else {
                    int v65 = (std::string *)v126.__r_.__value_.__r.__words[0];
                  }
                  if ((v126.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    int v66 = v126.__r_.__value_.__s.__size_;
                  }
                  else {
                    int v66 = v126.__r_.__value_.__l.__size_;
                  }
                  int v67 = std::string::append((std::string *)__dst, (const std::string::value_type *)v65, v66);
                  unsigned int v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
                  v140.__r_.__value_.__l.__cap_ = v67->__r_.__value_.__l.__cap_;
                  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v68;
                  v67->__r_.__value_.__l.__size_ = 0LL;
                  v67->__r_.__value_.__l.__cap_ = 0LL;
                  v67->__r_.__value_.__r.__words[0] = 0LL;
                  if ((__dst[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__dst);
                  }
                  int v69 = &v140;
                  if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    int v69 = (std::stringbuf::string_type *)v140.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(v139.__r_.__value_.__l.__data_) = 136380675;
                  *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = (std::string::size_type)v69;
                  _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEBUG,  "canPerformMonitoringForFence is false, fence, %{private}s",  (uint8_t *)&v139,  0xCu);
                }

                if (!sub_1002921D0(115, 2)) {
                  goto LABEL_242;
                }
                bzero(__dst, 0x65CuLL);
                if (qword_101934870 != -1) {
                  dispatch_once(&qword_101934870, &stru_101847D40);
                }
                unsigned int v77 = qword_101934878;
                sub_10065EF44((const void **)&__str.__r_.__value_.__l.__data_, &v140);
                if ((v140.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  int v78 = &v140;
                }
                else {
                  int v78 = (std::stringbuf::string_type *)v140.__r_.__value_.__r.__words[0];
                }
                LODWORD(v139.__r_.__value_.__l.__data_) = 136380675;
                *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = (std::string::size_type)v78;
                LODWORD(v97) = 12;
                _os_log_send_and_compose_impl( 2LL,  0LL,  __dst,  1628LL,  &_mh_execute_header,  v77,  2LL,  "canPerformMonitoringForFence is false, fence, %{private}s",  &v139,  v97);
                uint64_t v55 = v79;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceManager::addFence(const CLFenceManager_Type::Fence &)",  "%s\n",  v55);
                if (v55 == __dst) {
                  goto LABEL_242;
                }
                goto LABEL_292;
              }

              int v60 = &buf;
              if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                int v60 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)__dst = 68289282;
              *(_DWORD *)&__dst[4] = 0;
              *(_WORD *)&__dst[8] = 2082;
              *(void *)&__dst[10] = "";
              *(_WORD *)&__dst[18] = 2082;
              *(void *)&__dst[20] = v60;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v59,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Fence: unable to retrieve count of Fences",  "{msg%{public}.0s:Fence: unable to retrieve count of Fences, bundleID:%{public, location:escape_only}s}",  __dst,  0x1Cu);
              goto LABEL_216;
            }

            if (v20 >= 0x14)
            {
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101847D40);
              }
              uint64_t v22 = (os_log_s *)qword_101934878;
              if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
              {
                sub_10065EF44((const void **)a2, &v140);
                uint64_t v23 = (v140.__r_.__value_.__s.__size_ & 0x80u) == 0
                    ? &v140
                    : (std::stringbuf::string_type *)v140.__r_.__value_.__r.__words[0];
                *(_DWORD *)__dst = 136381187;
                *(void *)&__dst[4] = v23;
                *(_WORD *)&__dst[12] = 1025;
                *(_DWORD *)&__dst[14] = v21;
                *(_WORD *)&__dst[18] = 1025;
                *(_DWORD *)&__dst[20] = 20;
                _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Fence: fence not added, too many fences, %{private}s, %{private}d, %{private}u",  __dst,  0x18u);
              }

              if (!sub_1002921D0(115, 2)) {
                goto LABEL_216;
              }
              bzero(__dst, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101847D40);
              }
              uint64_t v24 = qword_101934878;
              sub_10065EF44((const void **)a2, &v139);
              if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                uint64_t v25 = &v139;
              }
              else {
                uint64_t v25 = (std::string *)v139.__r_.__value_.__r.__words[0];
              }
              LODWORD(v140.__r_.__value_.__l.__data_) = 136381187;
              *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
              WORD2(v140.__r_.__value_.__r.__words[1]) = 1025;
              *(_DWORD *)((char *)&v140.__r_.__value_.__r.__words[1] + 6) = v21;
              WORD1(v140.__r_.__value_.__r.__words[2]) = 1025;
              HIDWORD(v140.__r_.__value_.__r.__words[2]) = 20;
              _os_log_send_and_compose_impl( 2LL,  0LL,  __dst,  1628LL,  &_mh_execute_header,  v24,  0LL,  "Fence: fence not added, too many fences, %{private}s, %{private}d, %{private}u",  &v140,  24);
              uint64_t v27 = v26;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLFenceManager::addFence(const CLFenceManager_Type::Fence &)",  "%s\n",  v27);
              if (v27 == __dst) {
                goto LABEL_216;
              }
              goto LABEL_129;
            }
          }

  if (v50 == 0.0)
  {
    uint64_t v15 = (unint64_t)&_mh_execute_header;
  }

  else if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    uint64_t v15 = 0LL;
  }

  else
  {
    int v67 = fabs(v50);
    unsigned int v68 = 2.22044605e-16;
    if (v67 >= 1.0) {
      unsigned int v68 = v67 * 2.22044605e-16;
    }
    uint64_t v15 = (unint64_t)(v67 <= v68) << 32;
  }

  return v15 | v17;
}

  LOBYTE(v7) = (v9 & 4) == 0;
  if ((has & 4) != 0)
  {
    LOBYTE(v7) = 1;
  }

  return v7;
}

  if ((v3 & 0xFF0000) == 0) {
    goto LABEL_122;
  }
  if ((v3 & 0x10000) != 0)
  {
    uint64_t v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 136);
    if ((v28 & 0x80000000) != 0)
    {
      uint64_t v29 = 10;
    }

    else if (v28 >= 0x80)
    {
      uint64_t v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28, a2);
      uint64_t v3 = *(_DWORD *)(a1 + 172);
    }

    else
    {
      uint64_t v29 = 1;
    }

    v5 += v29 + 2;
    if ((v3 & 0x20000) == 0)
    {
LABEL_79:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_80;
      }
      goto LABEL_95;
    }
  }

  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_79;
  }

  uint64_t v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 140);
  if ((v30 & 0x80000000) != 0)
  {
    uint64_t v31 = 10;
  }

  else if (v30 >= 0x80)
  {
    uint64_t v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
    uint64_t v3 = *(_DWORD *)(a1 + 172);
  }

  else
  {
    uint64_t v31 = 1;
  }

  v5 += v31 + 2;
  if ((v3 & 0x40000) == 0)
  {
LABEL_80:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_81;
    }
LABEL_101:
    uint64_t v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 148);
    if ((v34 & 0x80000000) != 0)
    {
      uint64_t v35 = 12;
    }

    else if (v34 >= 0x80)
    {
      uint64_t v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2) + 2;
      uint64_t v3 = *(_DWORD *)(a1 + 172);
    }

    else
    {
      uint64_t v35 = 3;
    }

    v5 += v35;
    if ((v3 & 0x100000) == 0) {
      goto LABEL_113;
    }
    goto LABEL_107;
  }

  uint64_t v24 = *(void *)(v5 + 144);
  if (!v24) {
    uint64_t v24 = *(void *)(qword_1019A1CE8 + 144);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  v24,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_82;
  }

  *(_DWORD *)(a1 + 396) |= 0x1000u;
  uint64_t v29 = *(void **)(a1 + 96);
  if (!v29)
  {
    uint64_t v29 = operator new(0x18uLL);
    *uint64_t v29 = off_101875BB8;
    v29[1] = 15LL;
    *((_DWORD *)v29 + 4) = 0;
    *(void *)(a1 + 96) = v29;
  }

  uint64_t v30 = *(void *)(a2 + 96);
  if (!v30) {
    uint64_t v30 = *(void *)(qword_1019A1D38 + 96);
  }
  sub_100BB910C((uint64_t)v29, v30);
  uint64_t v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x2000) == 0)
  {
LABEL_53:
    if ((v7 & 0x4000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_86;
  }

  uint64_t v20 = *(void *)(v5 + 128);
  if (!v20) {
    uint64_t v20 = *(void *)(qword_1019A1D38 + 128);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  v20,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_82;
  }

  uint64_t v37 = *(void *)(a1 + 80);
  if (!v37) {
    uint64_t v37 = *(void *)(qword_1019A1D38 + 80);
  }
  uint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC2498(v37, a2);
  int v39 = (int)v38;
  else {
    uint64_t v40 = 1;
  }
  v4 += v39 + v40 + 1;
  uint64_t v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x800) == 0)
  {
LABEL_59:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_88;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(31LL, *(void *)(v5 + 136), a2);
  int v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_80;
  }

  v54 = 0.0;
LABEL_77:
  v108 = 0.0;
  v109 = 0;
  int v105 = 0u;
  int v106 = 0u;
  memset(v107, 0, 28);
  if (*(void *)(a1 + 400))
  {
    sub_100C684C8(a1, (uint64_t *)&v105, (void *)(a1 + 360));
    int v57 = DWORD2(v107[1]);
    v54 = v54 + *((double *)&v105 + 1) * (double)SDWORD2(v107[1]);
    v44 = v44 + *(double *)&v106 * (double)SDWORD2(v107[1]);
    v52 += DWORD2(v107[1]);
  }

  else
  {
    int v57 = 0;
  }

  if (v52 <= 0)
  {
    *(double *)(a1 + 8) = *(double *)((char *)v115 + 12) - *(double *)(a1 + 64) + 60.0;
  }

  else
  {
    int v58 = v54 / (double)v52;
    unsigned int v59 = v44 / (double)v52;
    sub_100B6EAF4(&v110, 2LL * *(void *)(a1 + 448) + 2LL * (v57 > 0));
    if (*(void *)(a1 + 448))
    {
      int v60 = 0LL;
      int v61 = 0LL;
      v62 = *(void *)(a1 + 440);
      uint64_t v63 = *(void *)(a1 + 416);
      do
      {
        v64 = *(void *)(v63 + 8 * ((v62 + v61) / 0x33)) + 80 * ((v62 + v61) % 0x33);
        int v65 = sub_100D2DBDC( (double *)(a1 + 320),  v58,  v59,  *(double *)(v64 + 24),  *(double *)(v64 + 40),  *(double *)(a1 + 16));
        int v67 = v65 - v66[8];
        v110[v60] = v67;
        unsigned int v68 = sub_100D2DBDC((double *)(a1 + 320), v58, v59, v66[4], v66[6], *(double *)(a1 + 16));
        v62 = *(void *)(a1 + 440);
        uint64_t v63 = *(void *)(a1 + 416);
        *(float *)&unsigned int v68 = v68 - *(double *)(*(void *)(v63 + 8 * ((v61 + v62) / 0x33)) + 80 * ((v61 + v62) % 0x33) + 64);
        v110[v60 + 1] = *(float *)&v68;
        v60 += 2LL;
        ++v61;
      }

      while (*(void *)(a1 + 448) > v61);
    }

    else
    {
      LODWORD(v60) = 0;
    }

    if (v57 > 0)
    {
      int v69 = sub_100D2DBDC( (double *)(a1 + 320),  v58,  v59,  *((double *)&v106 + 1),  *((double *)v107 + 1),  *(double *)(a1 + 16));
      int v70 = v108;
      v71 = v69 - v108;
      v110[v60] = v71;
      uint64_t v72 = sub_100D2DBDC((double *)(a1 + 320), v58, v59, *(double *)v107, *(double *)&v107[1], *(double *)(a1 + 16));
      v73 = v72 - v70;
      v110[v60 | 1] = v73;
    }

    if (v50)
    {
      if ((float *)v111 == v110)
      {
        int v76 = 1;
      }

      else
      {
        int v74 = (uint64_t)(v111 - (void)v110) >> 2;
        if (v74 <= 1) {
          int v75 = 1LL;
        }
        else {
          int v75 = (uint64_t)(v111 - (void)v110) >> 2;
        }
        if (*v110 <= 78.5)
        {
          unsigned int v77 = 1LL;
          do
          {
            int v78 = v77;
            if (v75 == v77) {
              break;
            }
            int v79 = v110[v77++];
          }

          while (v79 <= 78.5);
          int v76 = v74 <= v78;
        }

        else
        {
          int v76 = 0;
        }
      }

      *(_BYTE *)(a1 + 56) = v76;
    }

    if (v49)
    {
      v80 = 300.0;
      if ((*(_DWORD *)(a1 + 32) & 0xFFFFFFFE) == 0xA) {
        v80 = 110.0;
      }
      if ((float *)v111 == v110)
      {
        int v83 = 1;
      }

      else
      {
        v81 = (uint64_t)(v111 - (void)v110) >> 2;
        if (v81 <= 1) {
          v82 = 1LL;
        }
        else {
          v82 = (uint64_t)(v111 - (void)v110) >> 2;
        }
        if (*v110 <= v80)
        {
          int v84 = 1LL;
          do
          {
            int v85 = v84;
            if (v82 == v84) {
              break;
            }
            unsigned int v86 = v110[v84++];
          }

          while (v86 <= v80);
          int v83 = v81 <= v85;
        }

        else
        {
          int v83 = 0;
        }
      }

      *(_BYTE *)(a1 + 57) = v83;
    }

    switch(sub_100C6839C((void *)a1))
    {
      case 2u:
        int v87 = v110;
        int v88 = (uint64_t)(v111 - (void)v110) >> 2;
        if (v88 <= 1) {
          int v93 = 1LL;
        }
        else {
          int v93 = (uint64_t)(v111 - (void)v110) >> 2;
        }
        if (*v110 > 250.0) {
          goto LABEL_150;
        }
        int v94 = 1LL;
        do
        {
          v91 = v94;
          if (v93 == v94) {
            break;
          }
          unsigned int v95 = v110[v94++];
        }

        while (v95 <= 250.0);
        goto LABEL_155;
      case 4u:
      case 8u:
        int v87 = v110;
        int v88 = (uint64_t)(v111 - (void)v110) >> 2;
        if (v88 <= 1) {
          v89 = 1LL;
        }
        else {
          v89 = (uint64_t)(v111 - (void)v110) >> 2;
        }
        if (*v110 > 78.5) {
          goto LABEL_150;
        }
        v90 = 1LL;
        do
        {
          v91 = v90;
          if (v89 == v90) {
            break;
          }
          int v92 = v110[v90++];
        }

        while (v92 <= 78.5);
        goto LABEL_155;
      case 5u:
        int v87 = v110;
        int v88 = (uint64_t)(v111 - (void)v110) >> 2;
        if (v88 <= 1) {
          v99 = 1LL;
        }
        else {
          v99 = (uint64_t)(v111 - (void)v110) >> 2;
        }
        if (*v110 > 300.0) {
          goto LABEL_150;
        }
        int v101 = 1LL;
        do
        {
          v91 = v101;
          if (v99 == v101) {
            break;
          }
          int v102 = v110[v101++];
        }

        while (v102 <= 300.0);
        goto LABEL_155;
      default:
        int v87 = v110;
        if ((float *)v111 == v110)
        {
LABEL_151:
          v100 = 1;
        }

        else
        {
          int v88 = (uint64_t)(v111 - (void)v110) >> 2;
          if (v88 <= 1) {
            int v96 = 1LL;
          }
          else {
            int v96 = (uint64_t)(v111 - (void)v110) >> 2;
          }
          if (*v110 > 200.0)
          {
LABEL_150:
            v100 = 0;
          }

          else
          {
            int v97 = 1LL;
            do
            {
              v91 = v97;
              if (v96 == v97) {
                break;
              }
              v98 = v110[v97++];
            }

            while (v98 <= 200.0);
LABEL_155:
            v100 = v88 <= v91;
          }
        }

        *(_BYTE *)(a1 + 58) = v100;
        *a3 = 1;
        *(double *)(a1 + 8) = v10 - *(double *)(a1 + 64) + 60.0;
        if (v87)
        {
          *(void *)&int v111 = v87;
          operator delete(v87);
        }

        break;
    }
  }

      uint64_t v31 = (uint64_t *)v31[1];
    }

    while (v31 != &v225);
    unsigned int v68 = v221;
    if (v32 & 1 | (v221 == &v220)) {
      goto LABEL_180;
    }
    while (2)
    {
      int v69 = v218;
      if (v218 == &v217) {
        goto LABEL_160;
      }
      int v70 = 0;
      v71 = (unint64_t **)(v68 + 2);
      while (2)
      {
        uint64_t v72 = (unint64_t **)(v69 + 2);
        if ((v70 & 1) != 0) {
          goto LABEL_102;
        }
        v73 = (*v71)[18];
        int v74 = 0.0;
        int v75 = 0.0;
        int v76 = 0.0;
        if (v73 != (*v71)[17])
        {
          int v75 = *(double *)(v73 - 16);
          int v76 = *(double *)(v73 - 8);
        }

        unsigned int v77 = (double *)(*v72)[17];
        int v78 = 0.0;
        if ((double *)(*v72)[18] != v77)
        {
          int v74 = *v77;
          int v78 = v77[1];
        }

        if (sub_100292850(v75, v76, v74, v78, 0.0000001))
        {
          int v79 = 1;
          goto LABEL_94;
        }

        v81 = (*v71)[18];
        v82 = 0.0;
        int v83 = 0.0;
        int v84 = 0.0;
        if (v81 != (*v71)[17])
        {
          int v83 = *(double *)(v81 - 16);
          int v84 = *(double *)(v81 - 8);
        }

        int v85 = (*v72)[18];
        unsigned int v86 = 0.0;
        if (v85 != (*v72)[17])
        {
          v82 = *(double *)(v85 - 16);
          unsigned int v86 = *(double *)(v85 - 8);
        }

        if (sub_100292850(v83, v84, v82, v86, 0.0000001))
        {
          v80 = 0;
          int v79 = 1;
          goto LABEL_101;
        }

        v116 = (double *)(*v71)[17];
        v117 = 0.0;
        v118 = 0.0;
        int v119 = 0.0;
        if ((double *)(*v71)[18] != v116)
        {
          v118 = *v116;
          int v119 = v116[1];
        }

        int v120 = (double *)(*v72)[17];
        int v121 = 0.0;
        if ((double *)(*v72)[18] != v120)
        {
          v117 = *v120;
          int v121 = v120[1];
        }

        if (sub_100292850(v118, v119, v117, v121, 0.0000001))
        {
          int v79 = 0;
LABEL_94:
          v80 = 1;
LABEL_101:
          *((_BYTE *)v68 + 36) = v79;
          *((_BYTE *)v69 + 36) = v80;
LABEL_102:
          int v87 = (std::__shared_weak_count *)v68[3];
          v206 = v68[2];
          v207 = v87;
          if (v87)
          {
            int v88 = (unint64_t *)&v87->__shared_owners_;
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
          }

          sub_100BDA324((uint64_t)&v235, (uint64_t)&v206, *((_BYTE *)v68 + 36));
          v90 = v207;
          if (v207)
          {
            v91 = (unint64_t *)&v207->__shared_owners_;
            do
              int v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }

          if (sub_100D734E8((uint64_t)&v223, (uint64_t)&v235))
          {
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_1018819B8);
            }
            int v93 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
            {
              int v94 = *(void *)(v203 + 8);
              unsigned int v95 = **v71;
              *(_DWORD *)buf = 134349313;
              *(void *)&buf[4] = v94;
              int v246 = 2049;
              int v247 = v95;
              _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,routeHints,road search,road already present,start,%{private}lld",  buf,  0x16u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_1018819B8);
              }
              int v96 = *(void *)(v203 + 8);
              int v97 = **v71;
              int v231 = 134349313;
              int v232 = v96;
              v233 = 2049;
              v234 = v97;
              LODWORD(v200) = 22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,routeHints,road search,road already present,start,%{private}lld",  &v231,  v200);
              v99 = (char *)v98;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPt r, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)",  "%s\n",  v98);
              goto LABEL_157;
            }
          }

          else
          {
            *(void *)buf = &v235;
            *((_BYTE *)sub_100D73550(&v223, (uint64_t)&v235, (uint64_t)&unk_1012CF090, (_OWORD **)buf) + 56) = 1;
            v100 = a5[1];
            if (v100 >= a5[2])
            {
              int v106 = sub_100D73670(a5, (uint64_t)(v68 + 2));
            }

            else
            {
              *(void *)v100 = v68[2];
              int v101 = v68[3];
              *(void *)(v100 + 8) = v101;
              if (v101)
              {
                int v102 = &v101->n128_u64[1];
                do
                  int v103 = __ldxr(v102);
                while (__stxr(v103 + 1, v102));
              }

              unsigned int v104 = *((_OWORD *)v68 + 2);
              int v105 = *((_OWORD *)v68 + 3);
              *(void *)(v100 + 48) = v68[8];
              *(_OWORD *)(v100 + 16) = v104;
              *(_OWORD *)(v100 + 32) = v105;
              int v106 = v100 + 56;
            }

            a5[1] = v106;
            v107 = (std::__shared_weak_count *)v69[3];
            int v204 = v69[2];
            int v205 = v107;
            if (v107)
            {
              v108 = (unint64_t *)&v107->__shared_owners_;
              do
                v109 = __ldxr(v108);
              while (__stxr(v109 + 1, v108));
            }

            sub_100BDA324((uint64_t)&v231, (uint64_t)&v204, *((_BYTE *)v69 + 36));
            int v110 = v205;
            if (v205)
            {
              int v111 = (unint64_t *)&v205->__shared_owners_;
              do
                int v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }

            if (!sub_100D734E8((uint64_t)&v223, (uint64_t)&v231))
            {
              *(void *)buf = &v231;
              *((_BYTE *)sub_100D73550(&v223, (uint64_t)&v231, (uint64_t)&unk_1012CF090, (_OWORD **)buf) + 56) = 1;
              int v132 = a5[1];
              if (v132 >= a5[2])
              {
                int v138 = sub_100D73670(a5, (uint64_t)(v69 + 2));
              }

              else
              {
                *(void *)int v132 = v69[2];
                int v133 = v69[3];
                *(void *)(v132 + 8) = v133;
                if (v133)
                {
                  v134 = &v133->n128_u64[1];
                  do
                    v135 = __ldxr(v134);
                  while (__stxr(v135 + 1, v134));
                }

                v136 = *((_OWORD *)v69 + 2);
                int v137 = *((_OWORD *)v69 + 3);
                *(void *)(v132 + 48) = v69[8];
                *(_OWORD *)(v132 + 16) = v136;
                *(_OWORD *)(v132 + 32) = v137;
                int v138 = v132 + 56;
              }

              a5[1] = v138;
              goto LABEL_180;
            }

            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_1018819B8);
            }
            unsigned int v113 = (os_log_s *)qword_1019348B8;
            if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
            {
              int v114 = *(void *)(v203 + 8);
              int v115 = **v72;
              *(_DWORD *)buf = 134349313;
              *(void *)&buf[4] = v114;
              int v246 = 2049;
              int v247 = v115;
              _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,routeHints,road search,road already present,stop,%{private}lld",  buf,  0x16u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019348B0 != -1) {
                dispatch_once(&qword_1019348B0, &stru_1018819B8);
              }
              int v129 = *(void *)(v203 + 8);
              int v130 = **v72;
              *(_DWORD *)int v228 = 134349313;
              *(void *)&v228[4] = v129;
              int v229 = 2049;
              unsigned int v230 = v130;
              LODWORD(v200) = 22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,routeHints,road search,road already present,stop,%{private}lld",  v228,  v200);
              v99 = (char *)v131;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPt r, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)",  "%s\n",  v131);
LABEL_157:
              if (v99 != buf) {
                free(v99);
              }
            }
          }

          int v70 = 1;
        }

        else
        {
          unsigned int v122 = (double *)(*v71)[17];
          int v123 = 0.0;
          int v124 = 0.0;
          v125 = 0.0;
          if ((double *)(*v71)[18] != v122)
          {
            int v124 = *v122;
            v125 = v122[1];
          }

          v126 = (*v72)[18];
          v127 = 0.0;
          if (v126 != (*v72)[17])
          {
            int v123 = *(double *)(v126 - 16);
            v127 = *(double *)(v126 - 8);
          }

          int v128 = sub_100292850(v124, v125, v123, v127, 0.0000001);
          int v79 = 0;
          v80 = 0;
          int v70 = 0;
          if (v128) {
            goto LABEL_101;
          }
        }

        int v69 = (__n128 **)v69[1];
        if (v69 != &v217) {
          continue;
        }
        break;
      }

      if ((v70 & 1) != 0) {
        break;
      }
LABEL_160:
      unsigned int v68 = (__n128 **)v68[1];
      if (v68 != &v220) {
        continue;
      }
      break;
    }

    ++*(_DWORD *)(a1 + 740);
  }

  if (qword_1019A20A0 && *(_BYTE *)(a1 + 126))
  {
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a2->__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a2->__r_.__value_.__l.__size_;
    }
    if (v35 >= 0x80) {
      uint64_t v36 = (int)wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( v35,  a2);
    }
    else {
      uint64_t v36 = 1LL;
    }
    sub_1006A334C(&__p, v36 + v35 + 4);
    wireless_diagnostics::google::protobuf::io::ArrayOutputStream::ArrayOutputStream( (wireless_diagnostics::google::protobuf::io::ArrayOutputStream *)buf,  __p.__r_.__value_.__l.__data_,  LODWORD(__p.__r_.__value_.__r.__words[1]) - LODWORD(__p.__r_.__value_.__l.__data_),  -1);
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream(&v50, buf);
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&v50,  v35);
    if ((a2->__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v37 = a2;
    }
    else {
      uint64_t v37 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&v50,  v37,  (int)v35);
    uint64_t v38 = cnlogging::details::CNProtobufStreamChecksum::adler32(&__p, v36, v35);
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&v50,  v38);
    int v39 = (dispatch_queue_s *)qword_1019A20A0;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768LL;
    block[2] = sub_100DA0C70;
    block[3] = &unk_101882720;
    block[4] = a1;
    block[5] = v36 + v35 + 4;
    v46 = 0LL;
    int v47 = 0LL;
    uint64_t v45 = 0LL;
    sub_100740FAC( &v45,  __p.__r_.__value_.__l.__data_,  __p.__r_.__value_.__l.__size_,  __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
    dispatch_async(v39, block);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }

    wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&v50);
    wireless_diagnostics::google::protobuf::io::ArrayOutputStream::~ArrayOutputStream((wireless_diagnostics::google::protobuf::io::ArrayOutputStream *)buf);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

          ;
        }

        if (v51 < 1) {
          goto LABEL_76;
        }
LABEL_75:
        *v22++ = *i;
        goto LABEL_76;
      }
    }
  }

  uint64_t v34 = *(void *)(a2 + 128);
  v5 |= 0x8000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 128) = v34;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000000LL) == 0)
  {
LABEL_34:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_78;
  }

  PB::TextFormatter::format(this, "leavingImpactBecauseOfNewImpactNewImpact", *(void *)(a1 + 232));
  int v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x100000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_78;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 288), 0x47u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000000LL) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_78;
  }

  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostEnd", *(double *)(a1 + 272));
  uint64_t v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x80) == 0)
  {
LABEL_28:
    if ((v15 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_78;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 360), 0x1Eu);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_78;
  }

  uint64_t result = *(float *)(a2 + 140);
  v3 |= 0x40000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 140) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x1000) == 0)
  {
LABEL_30:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_78;
  }

  PB::TextFormatter::format(this, "operatingMode", *(_DWORD *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_78;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x100000000LL) == 0) {
      goto LABEL_29;
    }
    goto LABEL_78;
  }

        *(_DWORD *)(a1 + 52) = v35;
        goto LABEL_77;
      case 3u:
        sub_10109B308(v8);
        uint64_t v40 = *(void **)(*(void *)(a1 + 32) - 8LL);
        goto LABEL_44;
      case 4u:
        uint64_t v40 = operator new(0x18uLL);
        sub_101103644((uint64_t)v40);
        uint64_t v41 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v40;
        if (v41)
        {
          (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
          uint64_t v40 = *(void **)(a1 + 16);
        }

        goto LABEL_44;
      case 5u:
        uint64_t v40 = operator new(0x18uLL);
        sub_101103644((uint64_t)v40);
        uint64_t v42 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v40;
        if (v42)
        {
          (*(void (**)(uint64_t))(*(void *)v42 + 8LL))(v42);
          uint64_t v40 = *(void **)(a1 + 8);
        }

  uint64_t v12 = *(void *)(a2 + 8);
  v5 |= 1uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(void *)(a1 + 8) = v12;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_11:
    if ((v7 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_78;
  }

  PB::TextFormatter::format(this, "arclengthZBiggestImpact", *(float *)(a1 + 96));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_78;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 6u);
  int v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v6 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_78;
  }

  uint64_t v16 = *(_BYTE *)(a2 + 164);
  v3 |= 0x20000000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 164) = v16;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x4000000000LL) == 0)
  {
LABEL_33:
    if ((v2 & 0x80000000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_78;
  }

  PB::TextFormatter::format(this, "kThresholdEnergyRO", *(float *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x80000) == 0)
  {
LABEL_30:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_78;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 161), 0x74u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x80000000000LL) == 0)
  {
LABEL_31:
    if ((v4 & 0x8000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_78;
  }

          *(_DWORD *)(a1 + 24) = v30;
          goto LABEL_83;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v33 = *((void *)this + 1);
          uint64_t v34 = *((void *)this + 2);
          uint64_t v35 = *(void *)this;
          if (v33 <= 0xFFFFFFFFFFFFFFF5LL && v33 + 10 <= v34)
          {
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0LL;
            do
            {
              int v39 = v33 + 1;
              *((void *)this + 1) = v33 + 1;
              uint64_t v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_79;
              }
              v36 += 7;
              uint64_t v33 = v39;
              uint64_t v14 = v37++ > 8;
            }

            while (!v14);
LABEL_63:
            LODWORD(v38) = 0;
            goto LABEL_79;
          }

          uint64_t v53 = 0;
          v54 = 0;
          uint64_t v38 = 0LL;
          if (v34 <= v33) {
            uint64_t v34 = *((void *)this + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v55 = v33 + 1;
              int v56 = *(_BYTE *)(v35 + v33);
              *((void *)this + 1) = v55;
              v38 |= (unint64_t)(v56 & 0x7F) << v53;
              if (v56 < 0)
              {
                v53 += 7;
                uint64_t v33 = v55;
                uint64_t v14 = v54++ > 8;
                if (v14) {
                  goto LABEL_63;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v38) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 24) = v30;
          goto LABEL_83;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 4u;
          uint64_t v33 = *((void *)this + 1);
          uint64_t v34 = *((void *)this + 2);
          uint64_t v35 = *(void *)this;
          if (v33 <= 0xFFFFFFFFFFFFFFF5LL && v33 + 10 <= v34)
          {
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0LL;
            do
            {
              int v39 = v33 + 1;
              *((void *)this + 1) = v33 + 1;
              uint64_t v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_79;
              }
              v36 += 7;
              uint64_t v33 = v39;
              uint64_t v14 = v37++ > 8;
            }

            while (!v14);
LABEL_63:
            LODWORD(v38) = 0;
            goto LABEL_79;
          }

          uint64_t v53 = 0;
          v54 = 0;
          uint64_t v38 = 0LL;
          if (v34 <= v33) {
            uint64_t v34 = *((void *)this + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v55 = v33 + 1;
              int v56 = *(_BYTE *)(v35 + v33);
              *((void *)this + 1) = v55;
              v38 |= (unint64_t)(v56 & 0x7F) << v53;
              if (v56 < 0)
              {
                v53 += 7;
                uint64_t v33 = v55;
                uint64_t v14 = v54++ > 8;
                if (v14) {
                  goto LABEL_63;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v38) = 0;
              }
            }

            break;
          }

  uint64_t v16 = *(_DWORD *)(a2 + 60);
  v3 |= 0x400uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 60) = v16;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_41:
    if ((v2 & 0x100000000LL) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_78;
  }

  PB::TextFormatter::format(this, "vectorMagCmSimOnly", *(float *)(a1 + 148));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x200000000LL) != 0) {
    goto LABEL_77;
  }
LABEL_38:
  if ((v5 & 0x400000000LL) != 0) {
LABEL_39:
  }
    PB::TextFormatter::format(this, "wrMets", *(float *)(a1 + 156));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x25u);
  if ((*(void *)(v3 + 164) & 0x100000000LL) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 148), 0x26u);
  }
  return result;
}

  uint64_t v37 = *(_DWORD *)(a2 + 192);
  v3 |= 0x400000000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 192) = v37;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x4000000000LL) == 0)
  {
LABEL_39:
    if ((v2 & 0x8000000000LL) == 0) {
      goto LABEL_40;
    }
    goto LABEL_78;
  }

  PB::TextFormatter::format(this, "rolloverTimestampAtMaxEnergy", *(void *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x400) == 0)
  {
LABEL_36:
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_78;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 208), 0x23u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x8000000000LL) == 0)
  {
LABEL_37:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_78;
  }

  int v61 = *(void *)(a2 + 200);
  v6 |= 0x1000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(void *)(a1 + 200) = v61;
  int v39 = *(_DWORD *)(a2 + 244);
  if ((v39 & 0x40) == 0)
  {
LABEL_48:
    if ((v39 & 2) == 0) {
      goto LABEL_49;
    }
    goto LABEL_78;
  }

  PB::TextFormatter::format(this, "unadjustedScore", *(double *)(a1 + 200));
  uint64_t v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x20000) == 0)
  {
LABEL_49:
    if ((v19 & 0x40000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_78;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0x21u);
  uint64_t v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x10) == 0)
  {
LABEL_47:
    if ((v16 & 0x4000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_78;
  }

  uint64_t v25 = *(_BYTE *)(a2 + 178);
  v3 |= 0x20000000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 178) = v25;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x800000000LL) == 0)
  {
LABEL_34:
    if ((v2 & 0x40000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_78;
  }

  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_78;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x40000000000LL) == 0)
  {
LABEL_32:
    if ((v4 & 0x20) == 0) {
      goto LABEL_33;
    }
    goto LABEL_78;
  }

  int v43 = *(void *)(a2 + 56);
  *(void *)(a1 + 192) |= 0x20uLL;
  *(void *)(a1 + 56) = v43;
  uint64_t v13 = *(void *)(a2 + 192);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_40:
    if ((v13 & 0x2000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_78;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 0x23u);
  int v6 = *(void *)(v3 + 192);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x100000000LL) == 0) {
      goto LABEL_40;
    }
    goto LABEL_78;
  }

      uint64_t v4 = *((void *)this + 1);
      uint64_t v5 = *((void *)this + 2);
      int v6 = *((unsigned __int8 *)this + 24);
    }

    while (v4 < v5 && !*((_BYTE *)this + 24));
  }

  return v6 == 0;
}

      uint64_t v4 = *((void *)this + 1);
      uint64_t v5 = *((void *)this + 2);
      int v6 = *((unsigned __int8 *)this + 24);
    }

    while (v4 < v5 && !*((_BYTE *)this + 24));
  }

  return v6 == 0;
}

              *(_DWORD *)(a1 + 76) = v24;
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 84) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 3u:
              *(_WORD *)(a1 + 84) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 4u:
              *(_WORD *)(a1 + 84) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 5u:
              *(_WORD *)(a1 + 84) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 6u:
              *(_WORD *)(a1 + 84) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 7u:
              *(_WORD *)(a1 + 84) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 84) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 80) = v28;
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 84) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7LL || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 0xAu:
              *(_WORD *)(a1 + 84) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              uint64_t v2 = *((void *)this + 1) + 4LL;
              goto LABEL_71;
            case 0xBu:
              *(_WORD *)(a1 + 84) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
LABEL_70:
                uint64_t v2 = *((void *)this + 1) + 8LL;
LABEL_71:
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_77;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
LABEL_77:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  uint64_t v27 = *(_DWORD *)(a2 + 160);
  v3 |= 0x2000000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 160) = v27;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000000LL) == 0) {
      goto LABEL_30;
    }
    goto LABEL_78;
  }

  PB::TextFormatter::format(this, "inStrongBodyTurn", *(_BYTE *)(a1 + 184));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_78;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x19u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800000000LL) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_78;
  }

LABEL_85:
  uint64_t v24 = *(void *)(v5 + 144);
  if (!v24) {
    uint64_t v24 = *(void *)(qword_1019A0978 + 144);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  v24,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_91;
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) = 0LL;
}

  uint64_t v24 = *(void *)(v5 + 144);
  if (!v24) {
    uint64_t v24 = *(void *)(qword_1019A11B8 + 144);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  v24,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_91;
  }

      uint64_t v45 = (uint64_t *)v8[1];
      if (v45)
      {
        do
        {
          uint64_t v25 = v45;
          uint64_t v45 = (uint64_t *)*v45;
        }

        while (v45);
      }

      else
      {
        do
        {
          uint64_t v25 = (uint64_t *)v8[2];
          v46 = *v25 == (void)v8;
          uint64_t v8 = v25;
        }

        while (!v46);
      }

              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              }
              continue;
            default:
              if ((PBReaderSkipValueWithTag(a2) & 1) != 0) {
                goto LABEL_85;
              }
              return 0LL;
          }
        }
      }

      break;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

        sub_1009905C0(a1, a2, (uint64_t)&v73, 0, 1.0, 0.0);
        return v33;
      }

      uint64_t v41 = *(void *)(a1 + 520) + *(void *)(a1 + 512) - 1LL;
      uint64_t v33 = v42 > 150.0;
      if (v42 <= 150.0) {
        return v33;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101863518);
      }
      int v43 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283521;
        *(double *)int v85 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Pedometer before first Odometer before current Pedometer",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_85;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101863518);
      }
      v80 = 134283521;
      v81 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Pedometer before first Odometer before current Pedometer",  &v80,  12);
      uint64_t v55 = (uint8_t *)v56;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)",  "%s\n",  v56);
      if (v55 == buf) {
        goto LABEL_85;
      }
    }

    else
    {
      uint64_t v38 = *(void *)(a1 + 520) + *(void *)(a1 + 512) - 1LL;
      uint64_t v33 = v39 > 150.0;
      if (v39 <= 150.0) {
        return v33;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101863518);
      }
      uint64_t v40 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283521;
        *(double *)int v85 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Odometer after previous Pedometer (and af ter first Odometer before current Pedometer)",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_85;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101863518);
      }
      v82 = 134283521;
      int v83 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  1LL,  "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Odometer after previous Pedometer (and afte r first Odometer before current Pedometer)",  &v82,  12);
      uint64_t v55 = (uint8_t *)v54;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)",  "%s\n",  v54);
      if (v55 == buf) {
        goto LABEL_85;
      }
    }

      if (SHIBYTE(v52) < 0) {
        operator delete(v51[0]);
      }
      break;
    default:
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_101867900);
      }
      uint64_t v27 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "CLSE,download status,%{public}d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_101867900);
        }
        LODWORD(v51[0]) = 67240192;
        HIDWORD(v51[0]) = a3;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLSE,download status,%{public}d",  v51,  8);
        uint64_t v8 = (char *)v28;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)",  "%s\n",  v28);
LABEL_70:
        if (v8 != buf) {
          free(v8);
        }
      }

      break;
  }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101868368);
    }
    uint64_t v41 = (os_log_s *)p_vtable[267];
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v42 = *(_DWORD *)(a1 + 2568);
      int v43 = *(unsigned __int8 *)(a1 + 2572);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 134349568;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = 0x66FD0EB66FD0EB67LL
                                                                                * ((uint64_t)(v58 - v57) >> 3);
      WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = v42;
      WORD1(__p[0].__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(__p[0].__r_.__value_.__r.__words[2]) = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "CellFlow, alsquery, num, %{public}lu, reach, %{public}d, nearby, %{public}d",  (uint8_t *)__p,  0x18u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101868368);
      }
      int v48 = p_vtable[267];
      int v49 = *(_DWORD *)(a1 + 2568);
      unsigned int v50 = *(unsigned __int8 *)(a1 + 2572);
      *(_DWORD *)uint64_t v63 = 134349568;
      *(void *)&v63[4] = 0x66FD0EB66FD0EB67LL * ((uint64_t)(v58 - v57) >> 3);
      LOWORD(v64) = 1026;
      *(_DWORD *)((char *)&v64 + 2) = v49;
      HIWORD(v64) = 1026;
      LODWORD(v65) = v50;
      LODWORD(v55) = 24;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v48,  0LL,  "CellFlow, alsquery, num, %{public}lu, reach, %{public}d, nearby, %{public}d",  v63,  v55);
      int v52 = (std::stringbuf::string_type *)v51;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLUnifiedCellLocationProvider::queryCellLocations()",  "%s\n",  v51);
      if (v52 != __p) {
        free(v52);
      }
    }

    if (v58 != v57 && (*(_DWORD *)(a1 + 2568) || *(_BYTE *)(a1 + 2572)))
    {
      v44 = objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:",  @"CLNetworkLocationProvider");
      uint64_t v45 = 1LL;
      [v44 syncgetQueryLocationsForCells:&v57 useCache:1];
    }

    else
    {
      uint64_t v45 = 0LL;
    }

    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
    sub_1005C8A94((void ***)__p);
  }

  return v45;
}

  *(_DWORD *)(a1 + 184) |= 0x2000u;
  uint64_t v31 = *(void **)(a1 + 104);
  if (!v31)
  {
    uint64_t v31 = operator new(0x20uLL);
    *uint64_t v31 = &off_101871C30;
    v31[1] = 0LL;
    v31[2] = 0LL;
    v31[3] = 0LL;
    *(void *)(a1 + 104) = v31;
  }

  uint64_t v32 = *(void *)(a2 + 104);
  if (!v32) {
    uint64_t v32 = *(void *)(qword_1019A1CE8 + 104);
  }
  sub_100B2A534((uint64_t)v31, v32);
  uint64_t v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x4000) == 0)
  {
LABEL_58:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_95;
  }

  uint64_t v23 = *(void *)(v5 + 152);
  if (!v23) {
    uint64_t v23 = *(void *)(qword_1019A1D38 + 152);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14,  v23,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_91;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v27 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "alertCanceledBecauseOfLowFrequencyFFT";
    int v193 = 2048;
    unsigned int v194 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v105 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "alertCanceledBecauseOfLowFrequencyFFT";
    v189 = 2048;
    v190 = v105;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v107 = (uint8_t *)v106;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v106);
    if (v107 != buf) {
      free(v107);
    }
  }

  a4[1] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x400000) == 0)
  {
LABEL_11:
    if ((v10 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_97;
  }

  int v43 = *(void *)(a2 + 24);
  v5 |= 4uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 24) = v43;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_87;
  }

  PB::TextFormatter::format(this, "sosConsideredFallTimestamp", *(void *)(a1 + 296));
  int v6 = *v5;
  if ((*v5 & 0x2000000000LL) == 0)
  {
LABEL_40:
    if ((v6 & 0x4000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_87;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 152), 0x56u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_41:
    if ((v5 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_87;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 386), 0x34u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_87;
  }

  uint64_t result = *(float *)(a2 + 104);
  v3 |= 0x200000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 104) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_87;
  }

  PB::TextFormatter::format(this, "sumDeltaAngles", *(float *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x400000000LL) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_87;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0x23u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x800000000LL) == 0) {
      goto LABEL_38;
    }
    goto LABEL_87;
  }

  uint64_t result = *(float *)(a2 + 136);
  v5 |= 0x800000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 136) = result;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_20:
    if ((v7 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_87;
  }

  PB::TextFormatter::format(this, "deltaVXYZUnconditional", *(float *)(a1 + 128));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_87;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 0xFu);
  int v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_87;
  }

  uint64_t v14 = *(_BYTE *)(a2 + 268);
  v6 |= 1u;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 268) = v14;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x40000) == 0)
  {
LABEL_12:
    if ((v7 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_87;
  }

  PB::TextFormatter::format(this, "audioDvEnergyThreshold", *(float *)(a1 + 36));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_87;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 269), 6u);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((v6 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_87;
  }

  uint64_t result = *(float *)(a2 + 40);
  v3 |= 0x10uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 40) = result;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x20) == 0)
  {
LABEL_42:
    if ((v2 & 0x40) == 0) {
      goto LABEL_43;
    }
    goto LABEL_87;
  }

  PB::TextFormatter::format(this, "parameterSaturationY", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x100000000000LL) == 0)
  {
LABEL_39:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_87;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0xCEu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x40) == 0)
  {
LABEL_40:
    if ((v4 & 0x80) == 0) {
      goto LABEL_41;
    }
    goto LABEL_87;
  }

        *(_DWORD *)(a1 + 16) = v37;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_75;
            }

            uint64_t v42 = v21++;
            int v43 = *(_BYTE *)(v22 + v42);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0) {
              break;
            }
            v40 += 7;
            uint64_t v14 = v41++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_74;
            }
          }

          if (*((_BYTE *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_74:
          uint64_t v3 = v42 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v3;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }

        *(_DWORD *)(a1 + 20) = v37;
      }

      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        uint64_t v21 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5LL || v21 + 10 > v2)
        {
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v25 = 0LL;
          if (v2 <= v21) {
            uint64_t v3 = *((void *)this + 1);
          }
          else {
            uint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              uint64_t v25 = 0LL;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_75;
            }

            uint64_t v42 = v21++;
            int v43 = *(_BYTE *)(v22 + v42);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0) {
              break;
            }
            v40 += 7;
            uint64_t v14 = v41++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              goto LABEL_74;
            }
          }

          if (*((_BYTE *)this + 24)) {
            uint64_t v25 = 0LL;
          }
LABEL_74:
          uint64_t v3 = v42 + 1;
        }

        else
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0LL;
          while (1)
          {
            uint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            uint64_t v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            uint64_t v21 = v3;
            uint64_t v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0LL;
              break;
            }
          }
        }

  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x200) == 0)
  {
LABEL_43:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_87;
  }

  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 148));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x200000000LL) == 0)
  {
LABEL_40:
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_87;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x27u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x400000) == 0)
  {
LABEL_41:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_87;
  }

  uint64_t v36 = *(_DWORD *)(a2 + 88);
  v3 |= 0x80000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 88) = v36;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x200000000000LL) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0) {
      goto LABEL_39;
    }
    goto LABEL_87;
  }

  PB::TextFormatter::format(this, "srcUserAccelInertial_X", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_87;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 183), 0x22u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_87;
  }

LABEL_97:
  uint64_t v28 = *(void *)(v5 + 176);
  if (!v28) {
    uint64_t v28 = *(void *)(qword_1019A0978 + 176);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19,  v28,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_103;
  }

        uint64_t v42 = *((unsigned __int8 *)a7 + 23);
        if ((v42 & 0x80u) == 0LL) {
          int v43 = (const void *)*((unsigned __int8 *)a7 + 23);
        }
        else {
          int v43 = a7[1];
        }
        v44 = (const void *)v113;
        if ((v113 & 0x80u) != 0) {
          v44 = (const void *)v112[1];
        }
        if (v43 == v44)
        {
          if ((v113 & 0x80u) == 0) {
            uint64_t v45 = (unsigned __int8 *)v112;
          }
          else {
            uint64_t v45 = (unsigned __int8 *)v112[0];
          }
          if ((v42 & 0x80) == 0)
          {
            if (*((_BYTE *)a7 + 23))
            {
              v46 = a7;
              while (*(unsigned __int8 *)v46 == *v45)
              {
                v46 = (const void **)((char *)v46 + 1);
                ++v45;
                if (!--v42) {
                  goto LABEL_135;
                }
              }

              goto LABEL_113;
            }

            goto LABEL_135;
          }

          if (!memcmp(*a7, v45, (size_t)a7[1]))
          {
LABEL_135:
            uint64_t v53 = (uint64_t *)a1[6];
            if (v53 == a1 + 5)
            {
              v54 = 0LL;
LABEL_156:
              switch((unint64_t)v107)
              {
                case 1uLL:
                  int v61 = sub_1000E607C();
                  goto LABEL_161;
                case 2uLL:
                  int v61 = sub_1000E6150();
                  goto LABEL_161;
                case 3uLL:
                  int v61 = sub_1000E6224();
                  goto LABEL_161;
                case 4uLL:
                  int v61 = sub_1000E62F8();
LABEL_161:
                  v62 = (void *)(v54 + 1);
                  if (v54 + 1 <= v61)
                  {
                    if (qword_1019348D0 != -1) {
                      dispatch_once(&qword_1019348D0, &stru_10181EDA0);
                    }
                    unsigned int v68 = (os_log_s *)qword_1019348D8;
                    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
                    {
                      int v69 = *((char *)a2 + 23);
                      int v70 = (size_t *)*a2;
                      sub_10009FEA0((uint64_t)&v116, (uint64_t)v89);
                      v71 = v69 >= 0 ? a2 : v70;
                      uint64_t v72 = v90 >= 0 ? v89 : (void **)v89[0];
                      *(_DWORD *)buf = 68290050;
                      int v94 = 0;
                      unsigned int v95 = 2082;
                      int v96 = "";
                      int v97 = 2082;
                      v98 = v71;
                      v99 = 2082;
                      v100 = v72;
                      int v101 = 2050;
                      int v102 = (void **)v107;
                      int v103 = 2050;
                      unsigned int v104 = v62;
                      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:MiLoServiceManager client connected to service, ClientId:%{public, location:escape_only}s, ServiceUuid:%{public, location:escape_only}s, ServiceType:%{publ ic}lu, NumberOfConnectionsToServiceType:%{public}lu}",  buf,  0x3Au);
                      if (v90 < 0) {
                        operator delete(v89[0]);
                      }
                    }

                    if (!v114) {
                      sub_100036CD8();
                    }
                    sub_1000F0DAC((uint64_t)buf, (uint64_t)a1, (uint64_t)&v107, (uint64_t)(a1 + 1));
                    v73 = sub_1000E63D0(a1 + 5, (__int128 *)buf);
                    sub_1000E641C((uint64_t)buf);
                    sub_1000EB74C((uint64_t)(a1 + 8), &v116, &v116, &v115);
                    if (v74)
                    {
                      int v75 = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "com.apple.locationd.microlocation-service-connect");
                      sub_1000E647C((uint64_t)a1, (uint64_t)v73);
                      sub_1000E64C0((uint64_t)a1, v73);
                      sub_1000E688C((uint64_t)a1);

                      uint64_t v23 = -1LL;
                    }

                    else
                    {
                      if (qword_1019348D0 != -1) {
                        dispatch_once(&qword_1019348D0, &stru_10181EDA0);
                      }
                      int v76 = (os_log_s *)qword_1019348D8;
                      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
                      {
                        else {
                          unsigned int v77 = (size_t *)*a2;
                        }
                        sub_10009FEA0((uint64_t)&v116, (uint64_t)v89);
                        int v78 = v90;
                        int v79 = (void **)v89[0];
                        sub_10009FEA0((uint64_t)&v115, (uint64_t)v87);
                        v80 = v89;
                        if (v78 < 0) {
                          v80 = v79;
                        }
                        if (v88 >= 0) {
                          v81 = v87;
                        }
                        else {
                          v81 = (void **)v87[0];
                        }
                        *(_DWORD *)buf = 68289794;
                        int v94 = 0;
                        unsigned int v95 = 2082;
                        int v96 = "";
                        int v97 = 2082;
                        v98 = v77;
                        v99 = 2082;
                        v100 = v80;
                        int v101 = 2082;
                        int v102 = v81;
                        _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:MiLoServiceManager, failed to insert to fServiceIdToConnectionIdMap, ClientId:%{public, location:escape_only}s, ServiceUuid:%{public, location:escape_only} s, ConnectionToken:%{public, location:escape_only}s}",  buf,  0x30u);
                        if (v88 < 0) {
                          operator delete(v87[0]);
                        }
                        if (v90 < 0) {
                          operator delete(v89[0]);
                        }
                        if (qword_1019348D0 != -1) {
                          dispatch_once(&qword_1019348D0, &stru_10181EDA0);
                        }
                      }

                      v82 = (os_log_s *)qword_1019348D8;
                      if (os_signpost_enabled((os_log_t)qword_1019348D8))
                      {
                        sub_10009FEA0((uint64_t)&v116, (uint64_t)v89);
                        int v83 = v90;
                        int v84 = (void **)v89[0];
                        sub_10009FEA0((uint64_t)&v115, (uint64_t)v87);
                        int v85 = v89;
                        if (v83 < 0) {
                          int v85 = v84;
                        }
                        if (v88 >= 0) {
                          unsigned int v86 = v87;
                        }
                        else {
                          unsigned int v86 = (void **)v87[0];
                        }
                        *(_DWORD *)buf = 68289794;
                        int v94 = 0;
                        unsigned int v95 = 2082;
                        int v96 = "";
                        int v97 = 2082;
                        v98 = a2;
                        v99 = 2082;
                        v100 = v85;
                        int v101 = 2082;
                        int v102 = v86;
                        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v82,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "MiLoServiceManager, failed to insert to fServiceIdToConnectionIdMap",  "{msg%{public}.0s:MiLoServiceManager, failed to insert to fServiceIdToConnectionIdMap, ClientId:%{public, location:escape_only}s, ServiceUuid:%{public, location:escape_only} s, ConnectionToken:%{public, location:escape_only}s}",  buf,  0x30u);
                        if (v88 < 0) {
                          operator delete(v87[0]);
                        }
                        if (v90 < 0) {
                          operator delete(v89[0]);
                        }
                      }

                      uint64_t v23 = 0LL;
                    }
                  }

                  else
                  {
                    if (qword_1019348D0 != -1) {
                      dispatch_once(&qword_1019348D0, &stru_10181EDA0);
                    }
                    uint64_t v63 = (os_log_s *)qword_1019348D8;
                    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
                    {
                      v64 = *((char *)a2 + 23);
                      int v65 = (size_t *)*a2;
                      sub_10009FEA0((uint64_t)&v116, (uint64_t)v89);
                      int v66 = v64 >= 0 ? a2 : v65;
                      int v67 = v90 >= 0 ? v89 : (void **)v89[0];
                      *(_DWORD *)buf = 68289794;
                      int v94 = 0;
                      unsigned int v95 = 2082;
                      int v96 = "";
                      int v97 = 2082;
                      v98 = v66;
                      v99 = 2082;
                      v100 = v67;
                      int v101 = 2050;
                      int v102 = (void **)v107;
                      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:MiLoServiceManager cannot connect to service since client has maxed out n umber of connections, ClientId:%{public, location:escape_only}s, ServiceUuid:%{public, location:escape_only}s, ServiceType:%{public}lu}",  buf,  0x30u);
                      if (v90 < 0) {
                        operator delete(v89[0]);
                      }
                    }

                    uint64_t v23 = 32LL;
                  }

                  break;
                default:
                  uint64_t v23 = 3LL;
                  break;
              }

              goto LABEL_131;
            }

            v54 = 0LL;
            while (1)
            {
              uint64_t v55 = (unsigned __int8 *)sub_1000F0EEC((uint64_t)(v53 + 2));
              int v56 = v55[23];
              if ((v56 & 0x80u) == 0LL) {
                int v57 = v55[23];
              }
              else {
                int v57 = *((void *)v55 + 1);
              }
              int v58 = v111;
              if ((v111 & 0x80u) != 0) {
                int v58 = v110;
              }
              if (v57 != v58) {
                goto LABEL_153;
              }
              unsigned int v59 = (v111 & 0x80u) == 0 ? &v109 : (unsigned __int8 **)v109;
              if ((v56 & 0x80) == 0) {
                break;
              }
LABEL_153:
              uint64_t v53 = (uint64_t *)v53[1];
              if (v53 == a1 + 5) {
                goto LABEL_156;
              }
            }

            if (v55[23])
            {
              while (*v55 == *(unsigned __int8 *)v59)
              {
                ++v55;
                unsigned int v59 = (unsigned __int8 **)((char *)v59 + 1);
                if (!--v56) {
                  goto LABEL_152;
                }
              }

              goto LABEL_153;
            }

    uint64_t v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 132);
    if ((v27 & 0x80000000) != 0)
    {
      uint64_t v28 = 12;
    }

    else if (v27 >= 0x80)
    {
      uint64_t v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 2;
      uint64_t v3 = *(_DWORD *)(a1 + 152);
    }

    else
    {
      uint64_t v28 = 3;
    }

    LODWORD(sub_1012279C0(0LL, v4, v5) = v28 + v5;
    goto LABEL_103;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C,  (int)a2,  *(double *)(v5 + 168),  a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_99;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_isMoving),  @"isMoving");
  has = (char)self->_has;
  if ((has & 2) != 0) {
    goto LABEL_98;
  }
LABEL_79:
  if ((has & 1) != 0) {
LABEL_80:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", self->_startTime),  @"startTime");
  return v3;
}
}

    if (v54) {
      (*(void (**)(uint64_t))(*(void *)v54 + 8LL))(v54);
    }
    *(void *)((char *)v139
    unsigned int v140 = v126;
    std::streambuf::~streambuf(&v141);
    std::ios::~ios(&v142);
  }

  else
  {
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_10183C108);
    }
    int v123 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v151.__r_.__value_.__l.__data_) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEBUG,  "#Warning Attempt to call getNearbyWifisForFence() without a backing database in CLWifiLocationDatabase!",  (uint8_t *)&v151,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&v151, 0x65CuLL);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_10183C108);
      }
      LOWORD(v139[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v151,  1628LL,  &_mh_execute_header,  off_101934A28,  2LL,  "#Warning Attempt to call getNearbyWifisForFence() without a backing database in CLWifiLocationDatabase!",  v139,  2);
      int v128 = (std::stringbuf::string_type *)v127;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::vector<CLWifiAPLocation> CLWifiLocationDatabase::getNearbyWifisForFence(double, double, double, int, int, BOOL, double)",  "%s\n",  v127);
      if (v128 != &v151) {
        free(v128);
      }
    }

    *a5 = 0LL;
    a5[1] = 0LL;
    a5[2] = 0LL;
  }

  uint64_t v28 = *(void *)(v5 + 176);
  if (!v28) {
    uint64_t v28 = *(void *)(qword_1019A11B8 + 176);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  v28,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_103;
  }

  unsigned int v50 = vabdd_f64(v10, v8);
  int v51 = 180.0;
  if (v50 == 180.0) {
    goto LABEL_98;
  }
  int v52 = v10 - v8;
  if ((*(void *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    int v67 = fabs(v50 + -180.0);
    int v51 = 180.0;
    if (v50 < 180.0) {
      unsigned int v50 = 180.0;
    }
    unsigned int v68 = v50 >= 1.0 ? v50 * 2.22044605e-16 : 2.22044605e-16;
    if (v67 <= v68) {
      goto LABEL_98;
    }
  }

  int v51 = 180.0;
  if (v52 > 180.0)
  {
    int v69 = fmod(v52 + 180.0, 360.0);
    int v52 = v69 + -180.0;
    if (v69 + -180.0 != -180.0)
    {
      int v70 = COERCE__INT64(fabs(v69 + -180.0)) - 1;
      v71 = (unint64_t)(COERCE__INT64(fabs(v69 + -180.0)) - 0x10000000000000LL) >> 53 > 0x3FE
         && v70 > 0xFFFFFFFFFFFFELL;
      if (v71 && *(void *)&v52 != 0LL) {
        goto LABEL_99;
      }
      int v51 = 180.0;
      v73 = fabs(v52 + 180.0);
      int v74 = fabs(v52);
      if (v74 < 180.0) {
        int v74 = 180.0;
      }
      int v75 = v74 >= 1.0 ? v74 * 2.22044605e-16 : 2.22044605e-16;
      if (v73 > v75) {
        goto LABEL_99;
      }
    }

    goto LABEL_98;
  }

  if (v52 < -180.0)
  {
    int v51 = fmod(v52 + -180.0, 360.0) + 180.0;
LABEL_98:
    int v52 = v51;
  }

      int v56 = (double ****)v94;
      uint64_t v55 = v95;
      if (v94 != v95 && __p != v48)
      {
        while (__p == v48)
        {
LABEL_171:
          if (++v56 == v55) {
            goto LABEL_102;
          }
        }

        int v48 = (double ****)__p;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            int v74 = **v56;
            int v75 = **v48;
            int v76 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v105.i8, "FFFFFFFFF");
            sub_100858868(v74, v75, (unsigned __int8 *)&v105, v76);
            if (!v105.i8[9])
            {
              unsigned int v77 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
              if (!v77
                || v105.u8[1] == 84
                || v105.u8[1] - 48 <= 9
                || v105.u8[3] == 84
                || v105.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }

          if (++v48 == v83)
          {
            uint64_t v55 = v95;
            goto LABEL_171;
          }
        }
      }
    }

    else
    {
      int v105 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int v106 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
      {
        v73 = (double *)sub_1008560B0(*v47);
        sub_10084CE24((double *)v105.i64, v73);
        ++v47;
      }

      while (v47 != (uint64_t *)v83);
      v80 = v105;
      v81 = v106;
      if (!sub_100857CC8(&v80, &v97, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
        || (sub_100857CC8(&v80, &v94, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_155;
      }
    }
  }

      int v57 = (double ****)v95;
      int v56 = v96;
      if (v95 != v96 && __p != v49)
      {
        while (__p == v49)
        {
LABEL_171:
          if (++v57 == v56) {
            goto LABEL_102;
          }
        }

        int v49 = (double ****)__p;
        while (1)
        {
          if (!*(_BYTE *)a6)
          {
            int v75 = **v57;
            int v76 = **v49;
            unsigned int v77 = *(unsigned __int8 **)(a6 + 8);
            strcpy(v106.i8, "FFFFFFFFF");
            sub_100858868(v75, v76, (unsigned __int8 *)&v106, v77);
            if (!v106.i8[9])
            {
              int v78 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
              if (!v78
                || v106.u8[1] == 84
                || v106.u8[1] - 48 <= 9
                || v106.u8[3] == 84
                || v106.u8[3] - 48 < 0xA)
              {
                goto LABEL_173;
              }
            }
          }

          if (++v49 == v84)
          {
            int v56 = v96;
            goto LABEL_171;
          }
        }
      }
    }

    else
    {
      int v106 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v107 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
      {
        int v74 = (double *)sub_1008560B0(*v48);
        sub_10084CE24((double *)v106.i64, v74);
        ++v48;
      }

      while (v48 != (uint64_t *)v84);
      v81 = v106;
      v82 = v107;
      if (!sub_100857134( (double *)v81.i64,  (uint64_t **)&v98,  (uint64_t **)&__p,  a4 + 1,  a5,  a6,  a7,  a8,  a9,  a10,  a11)
        || (sub_100857134((double *)v81.i64, (uint64_t **)&v95, (uint64_t **)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_155;
      }
    }
  }

  uint64_t v27 = *(void *)(v5 + 184);
  if (!v27) {
    uint64_t v27 = *(void *)(qword_1019A1D38 + 184);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18,  v27,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_103;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v31 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v32 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "alertCanceledBecauseOfFFT";
    int v193 = 2048;
    unsigned int v194 = v32;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v111 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "alertCanceledBecauseOfFFT";
    v189 = 2048;
    v190 = v111;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    unsigned int v113 = (uint8_t *)v112;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v112);
    if (v113 != buf) {
      free(v113);
    }
  }

  a4[3] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v10 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_109;
  }

  uint64_t result = *(float *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 72) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x200) == 0)
  {
LABEL_51:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_99;
  }

  PB::TextFormatter::format(this, "zJerkScalarMagMax", *(float *)(a1 + 200));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x400000000000LL) == 0)
  {
LABEL_48:
    if ((v5 & 0x800000000000LL) == 0) {
      goto LABEL_49;
    }
LABEL_99:
    PB::TextFormatter::format(this, "zMin", *(float *)(a1 + 208));
    if ((*(void *)(a1 + 216) & 0x1000000000000LL) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_50;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x2Fu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_49:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 32), 0x31u);
  }

  uint64_t result = *(float *)(a2 + 292);
  v5 |= 0x4000000000000000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 292) = result;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x800000000000LL) == 0)
  {
LABEL_32:
    if ((v7 & 0x1000000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_99;
  }

  PB::TextFormatter::format(this, "hgArclengthXYOverEpoch", *(float *)(a1 + 160));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_99;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 292), 0x1Bu);
  int v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800000000000LL) == 0)
  {
LABEL_32:
    if ((v6 & 0x1000000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_99;
  }

  uint64_t result = *(float *)(a2 + 144);
  v5 |= 0x200000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 144) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x20000000000000LL) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_99;
  }

  PB::TextFormatter::format(this, "detectorRegime", *(_DWORD *)(a1 + 84));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_99;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 0x12u);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000LL) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000000000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_99;
  }

  uint64_t result = *(float *)(a2 + 32);
  v5 |= 0x20uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 32) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_99;
  }

  PB::TextFormatter::format(this, "kAudioDvChaosThresholdCenterRO", *(float *)(a1 + 40));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_16:
    if ((v6 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_99;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0x6Du);
  uint64_t v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_99;
  }

  uint64_t v21 = *(_BYTE *)(a2 + 161);
  v3 |= 0x4000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 161) = v21;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x40000000000LL) == 0)
  {
LABEL_19:
    if ((v5 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_99;
  }

  PB::TextFormatter::format(this, "energyMet", *(_BYTE *)(a1 + 168));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x400000000000LL) == 0)
  {
LABEL_18:
    if ((v5 & 0x800000000000LL) == 0) {
      goto LABEL_19;
    }
    goto LABEL_99;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0x72u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_99;
  }

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 1u;
          int v47 = *((void *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)this + 2)) {
            goto LABEL_94;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v47);
          goto LABEL_96;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 4u;
          int v48 = *((void *)this + 1);
          if (v48 >= *((void *)this + 2))
          {
            int v51 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v49 = v48 + 1;
            unsigned int v50 = *(unsigned __int8 *)(*(void *)this + v48);
            *((void *)this + 1) = v49;
            int v51 = v50 != 0;
          }

          *(_BYTE *)(a1 + 40) = v51;
          goto LABEL_97;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_97;
      }
    }

    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v15 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      uint64_t v21 = v4 + 1;
      uint64_t v22 = *(_BYTE *)(v12 + v4);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      uint64_t v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        uint64_t v15 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

  int v48 = *(_DWORD *)(a2 + 128);
  v3 |= 0x20000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 128) = v48;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x20000000000LL) == 0)
  {
LABEL_50:
    if ((v2 & 0x10000000000LL) == 0) {
      goto LABEL_51;
    }
    goto LABEL_99;
  }

  PB::TextFormatter::format(this, "verticalTranslationSimilarity", *(float *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x4000000000LL) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000000000LL) == 0) {
      goto LABEL_48;
    }
    goto LABEL_99;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176), 0x2Eu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000000000LL) == 0)
  {
LABEL_48:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_99;
  }

LABEL_100:
  uint64_t v29 = *(void *)(v5 + 184);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_1019A0978 + 184);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A,  v29,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_106;
  }

  uint64_t v29 = *(void *)(v5 + 184);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_1019A11B8 + 184);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17,  v29,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_106;
  }

      if (SHIBYTE(v69[2]) < 0) {
        operator delete(v69[0]);
      }
      if (SHIBYTE(v68) < 0) {
        operator delete(*((void **)&v67 + 1));
      }
      if (SBYTE7(v67) < 0) {
        operator delete((void *)v66);
      }
      if ((v65[15] & 0x80000000) != 0) {
        operator delete(v64[1]);
      }
      if (SHIBYTE(v64[0]) < 0) {
        operator delete(v63[0]);
      }
      if (SHIBYTE(v62) < 0) {
        operator delete(v61[1]);
      }
      if (SHIBYTE(v61[0]) < 0) {
        operator delete(*(void **)buf);
      }
      return;
    }

    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185F9C8);
    }
    uint64_t v26 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
      uint64_t v27 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "#CLEEA Assertion requested with no reason... ignoring EmergencyEnablementAssertion taken by %{public}s",  buf,  0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185F9C8);
      }
      uint64_t v28 = qword_101934978;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(buf, a1);
      if (SHIBYTE(v61[0]) >= 0) {
        uint64_t v29 = buf;
      }
      else {
        uint64_t v29 = *(uint8_t **)buf;
      }
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v28,  17LL,  "#CLEEA Assertion requested with no reason... ignoring EmergencyEnablementAssertion taken by %{public}s",  &v59,  12);
      uint64_t v20 = v30;
      if (SHIBYTE(v61[0]) < 0) {
        operator delete(*(void **)buf);
      }
LABEL_58:
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonEmergencyEnablementAssertion::handleMessageEmergencyEnablementAssertion(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v20);
      goto LABEL_169;
    }
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185F9C8);
    }
    uint64_t v21 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(__p, a1);
      uint64_t v22 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_FAULT,  "#CLEEA EmergencyEnablementAssertion taken by %{public}s malformed: lacking required argument(s)",  buf,  0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185F9C8);
      }
      uint64_t v23 = qword_101934978;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 24LL))(buf, a1);
      if (SHIBYTE(v61[0]) >= 0) {
        uint64_t v24 = buf;
      }
      else {
        uint64_t v24 = *(uint8_t **)buf;
      }
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v23,  17LL,  "#CLEEA EmergencyEnablementAssertion taken by %{public}s malformed: lacking required argument(s)",  &v59,  12);
      uint64_t v20 = v25;
      if (SHIBYTE(v61[0]) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_58;
    }
  }

  uint64_t v40 = *(_DWORD *)(a1 + 96);
  uint64_t v41 = (v4 + 2 * v40);
  if (v40 >= 1)
  {
    uint64_t v42 = 0LL;
    do
    {
      int v43 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A48F8C(*(void *)(*(void *)(a1 + 88) + 8 * v42));
      uint64_t v45 = (int)v43;
      else {
        v46 = 1;
      }
      uint64_t v41 = (v45 + v41 + v46);
      ++v42;
    }

    while (v42 < *(int *)(a1 + 96));
  }

  *(_DWORD *)(a1 + 112) = v41;
  return v41;
}

  if ((v5 & 0xFF0000) == 0) {
    return;
  }
  if ((v5 & 0x10000) != 0)
  {
    *(_DWORD *)(a1 + 184) |= 0x10000u;
    uint64_t v37 = *(char **)(a1 + 128);
    if (!v37)
    {
      uint64_t v37 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v37 = off_101871F00;
      *(_OWORD *)(v37 + 8) = 0u;
      *(_OWORD *)(v37 + 24) = 0u;
      *(void *)(a1 + 128) = v37;
    }

    uint64_t v38 = *(void *)(a2 + 128);
    if (!v38) {
      uint64_t v38 = *(void *)(qword_1019A1CE8 + 128);
    }
    sub_100B2DEBC((uint64_t)v37, v38);
    uint64_t v5 = *(_DWORD *)(a2 + 184);
    if ((v5 & 0x20000) == 0)
    {
LABEL_103:
      if ((v5 & 0x40000) == 0) {
        goto LABEL_104;
      }
      goto LABEL_118;
    }
  }

  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_103;
  }

  *(_DWORD *)(a1 + 184) |= 0x20000u;
  int v39 = *(void **)(a1 + 136);
  if (!v39)
  {
    int v39 = operator new(0x20uLL);
    *int v39 = &off_101871FF0;
    v39[1] = 0LL;
    v39[2] = 0LL;
    v39[3] = 0LL;
    *(void *)(a1 + 136) = v39;
  }

  uint64_t v40 = *(void *)(a2 + 136);
  if (!v40) {
    uint64_t v40 = *(void *)(qword_1019A1CE8 + 136);
  }
  sub_100B2EC64((uint64_t)v39, v40);
  uint64_t v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x40000) == 0)
  {
LABEL_104:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_105;
    }
    goto LABEL_123;
  }

  uint64_t v28 = *(void *)(v5 + 192);
  if (!v28) {
    uint64_t v28 = *(void *)(qword_1019A1D38 + 192);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19,  v28,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_106;
  }

  uint64_t v53 = *(void *)(a1 + 112);
  if (!v53) {
    uint64_t v53 = *(void *)(qword_1019A1D38 + 112);
  }
  v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC3288(v53, a2);
  uint64_t v55 = (int)v54;
  else {
    int v56 = 1;
  }
  v4 += v55 + v56 + 1;
  uint64_t v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x8000) != 0)
  {
LABEL_106:
    int v57 = *(void *)(a1 + 120);
    if (!v57) {
      int v57 = *(void *)(qword_1019A1D38 + 120);
    }
    int v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BBF368(v57, a2);
    unsigned int v59 = (int)v58;
    else {
      int v60 = 1;
    }
    v4 += v59 + v60 + 2;
    uint64_t v3 = *(_DWORD *)(a1 + 396);
  }

          uint64_t v20 = (_BYTE *)*((void *)this + 1);
          v44 = *v20;
          if (v44 != 53) {
            break;
          }
LABEL_83:
          *((void *)this + 1) = v20 + 1;
        }

        if (v44 != 61) {
          continue;
        }
        *((void *)this + 1) = v20 + 1;
LABEL_104:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v49) & 1) != 0)
        {
          *(_DWORD *)(a1 + 56) = v49[0];
          *(_DWORD *)(a1 + 64) |= 0x40u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          continue;
        }

        return 0LL;
      case 7u:
        uint64_t v9 = TagFallback & 7;
        if (v9 != 5) {
          goto LABEL_26;
        }
        goto LABEL_104;
      default:
        uint64_t v9 = TagFallback & 7;
        goto LABEL_26;
    }
  }

            PB::Reader::recallMark(this, v119);
          }

          else
          {
            v100 = *(char **)(a1 + 16);
            v99 = *(void *)(a1 + 24);
            if ((unint64_t)v100 >= v99)
            {
              v107 = (char *)*v11;
              v108 = (v100 - (_BYTE *)*v11) >> 2;
              v109 = v108 + 1;
              if ((unint64_t)(v108 + 1) >> 62) {
LABEL_177:
              }
                sub_100007008();
              int v110 = v99 - (void)v107;
              if (v110 >> 1 > v109) {
                v109 = v110 >> 1;
              }
              else {
                int v111 = v109;
              }
              if (v111)
              {
                int v112 = (char *)sub_10000956C(v12, v111);
                v107 = *(char **)(a1 + 8);
                v100 = *(char **)(a1 + 16);
              }

              else
              {
                int v112 = 0LL;
              }

              int v115 = &v112[4 * v108];
              *(_DWORD *)int v115 = 0;
              v98 = v115 + 4;
              while (v100 != v107)
              {
                v116 = *((_DWORD *)v100 - 1);
                v100 -= 4;
                *((_DWORD *)v115 - 1) = v116;
                v115 -= 4;
              }

              *(void *)(a1 + 8) = v115;
              *(void *)(a1 + 16) = v98;
              *(void *)(a1 + 24) = &v112[4 * v111];
              if (v107) {
                operator delete(v107);
              }
            }

            else
            {
              *(_DWORD *)v100 = 0;
              v98 = v100 + 4;
            }

            *(void *)(a1 + 16) = v98;
LABEL_167:
            v117 = *((void *)this + 1);
            if (v117 <= 0xFFFFFFFFFFFFFFFBLL && v117 + 4 <= *((void *)this + 2))
            {
              *(v98 - 1) = *(_DWORD *)(*(void *)this + v117);
              *((void *)this + 1) += 4LL;
            }

            else
            {
              *((_BYTE *)this + 24) = 1;
            }
          }

  uint64_t result = *(float *)(a2 + 284);
  v5 |= 0x1000000000000000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 284) = result;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x10000000000000LL) == 0)
  {
LABEL_35:
    if ((v7 & 0x800000000000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_102;
  }

  PB::TextFormatter::format(this, "hgArclengthZBiggestImpact", *(float *)(a1 + 172));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x200000000LL) == 0)
  {
LABEL_34:
    if ((v6 & 0x400000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_102;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 284), 0x1Eu);
  int v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x10000000000000LL) == 0)
  {
LABEL_35:
    if ((v6 & 0x800000000000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_102;
  }

  uint64_t result = *(float *)(a2 + 128);
  v5 |= 0x20000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 128) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x400000000LL) == 0)
  {
LABEL_27:
    if ((v4 & 0x40000000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_102;
  }

  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold3", *(float *)(a1 + 96));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_102;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x15u);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_102;
  }

  uint64_t result = *(float *)(a2 + 116);
  v5 |= 0x4000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 116) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_102;
  }

  PB::TextFormatter::format(this, "kAudioDvChaosThresholdRO", *(float *)(a1 + 52));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_19:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_102;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x70u);
  uint64_t v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_102;
  }

  uint64_t v25 = *(_DWORD *)(a2 + 64);
  v3 |= 0x400uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 64) = v25;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x40) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_102;
  }

  PB::TextFormatter::format(this, "energyMet2", *(_BYTE *)(a1 + 171));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x10) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000000000000LL) == 0) {
      goto LABEL_22;
    }
    goto LABEL_102;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 184), 0x75u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x2000000000000LL) == 0)
  {
LABEL_22:
    if ((v5 & 0x20) == 0) {
      goto LABEL_23;
    }
    goto LABEL_102;
  }

  int v51 = *(_DWORD *)(a2 + 92);
  v3 |= 0x100000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 92) = v51;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x800000000000LL) == 0)
  {
LABEL_53:
    if ((v2 & 0x2000000000000LL) == 0) {
      return result;
    }
LABEL_102:
    uint64_t v53 = *(_BYTE *)(a2 + 187);
    *(void *)(result + 188) = v3 | 0x2000000000000LL;
    *(_BYTE *)(result + 187) = v53;
    return result;
  }

  PB::TextFormatter::format(this, "yawRateSimilarity1000ms", *(float *)(a1 + 172));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x20000000000LL) != 0) {
    goto LABEL_101;
  }
LABEL_50:
  if ((v5 & 0x2000000000000LL) != 0) {
LABEL_51:
  }
    PB::TextFormatter::format(this, "yawRateSimilarityState", *(_BYTE *)(a1 + 187));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 185), 0x31u);
  if ((*(void *)(v3 + 188) & 0x2000000000000LL) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 187), 0x32u);
  }
  return result;
}

LABEL_106:
  uint64_t v31 = *(void *)(v5 + 200);
  if (!v31) {
    uint64_t v31 = *(void *)(qword_1019A0978 + 200);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C,  v31,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_112;
  }

        *((void *)this + 1) = v42 + 1;
LABEL_107:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v72) & 1) != 0)
        {
          uint64_t v55 = *(void *)v72;
          int v56 = *(_DWORD *)(a1 + 64);
          if (v56 == *(_DWORD *)(a1 + 68))
          {
            sub_10008D024(v5, v56 + 1);
            int v56 = *(_DWORD *)(a1 + 64);
          }

          int v57 = *(void *)(a1 + 56);
          int v58 = v56 + 1;
          *(_DWORD *)(a1 + 64) = v56 + 1;
          *(void *)(v57 + 8LL * v56) = v55;
          unsigned int v59 = *((void *)this + 1);
          int v60 = *((_DWORD *)this + 4) - v59;
          if (v60 >= 1)
          {
            int v61 = v60 / 9u;
            v62 = v61 >= *(_DWORD *)(a1 + 68) - v58 ? *(_DWORD *)(a1 + 68) - v58 : v61;
            if (v62 >= 1)
            {
              uint64_t v63 = 0;
              while (*(_BYTE *)v59 == 57)
              {
                v64 = *(void *)(v59 + 1);
                if (v58 >= *(_DWORD *)(a1 + 68))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v72,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Conten ts/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/includ e/google/protobuf/repeated_field.h",  602LL);
                  int v65 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v72,  "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v71, v65);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v72);
                  int v58 = *(_DWORD *)(a1 + 64);
                  int v57 = *(void *)(a1 + 56);
                }

                *(_DWORD *)(a1 + 64) = v58 + 1;
                *(void *)(v57 + 8LL * v58) = v64;
                ++v63;
                v59 += 9LL;
                ++v58;
                if (v62 == v63)
                {
                  uint64_t v63 = v62;
                  break;
                }
              }

              if (v63) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v63);
              }
            }
          }

          goto LABEL_123;
        }

        return 0LL;
      case 8u:
        uint64_t v8 = TagFallback & 7;
        uint64_t v18 = (char *)*((void *)this + 1);
        uint64_t v17 = *((void *)this + 2);
        goto LABEL_127;
      case 9u:
        uint64_t v8 = TagFallback & 7;
        uint64_t v19 = (char *)*((void *)this + 1);
        uint64_t v17 = *((void *)this + 2);
        goto LABEL_135;
      default:
        uint64_t v8 = TagFallback & 7;
        goto LABEL_34;
    }
  }

  int v285 = 0;
  sub_1002F0B04(buf);
  int v84 = sub_1002A6F64(*(uint64_t *)buf, "GpsWifiKeepAlive", &v285);
  int v85 = v84;
  unsigned int v86 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_110;
  }
  int v87 = (unint64_t *)(*(void *)&buf[8] + 8LL);
  do
    int v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
    if (!v85) {
      goto LABEL_116;
    }
  }

  else
  {
LABEL_110:
    if (!v84) {
      goto LABEL_116;
    }
  }

  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101838C20);
  }
  v89 = (os_log_s *)qword_101934838;
  if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_FAULT,  "GpsWifiKeepAlive is no longer supported! If you want to leave all providers actively subscribed to, set DynamicLoc ationProviders to false",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101838C20);
    }
    LOWORD(context.version) = 0;
    LODWORD(v275) = 2;
    unsigned int v266 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "GpsWifiKeepAlive is no longer supported! If you want to leave all providers actively subscribed to, set DynamicLocationProviders to false",  &context,  v275);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "CLLocationController::CLLocationController(id<CLIntersiloUniverse>)",  "%s\n",  v266);
    if (v266 != buf) {
      free(v266);
    }
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_nLowCatherine),  @"nLowCatherine");
  has = self->_has;
  if ((*(_WORD *)&has & 0x800) == 0)
  {
LABEL_84:
    if ((*(_WORD *)&has & 0x8000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_108;
  }

    uint64_t v13 = v80;
    goto LABEL_107;
  }

  uint64_t v13 = v80;
  v73 = v81;
  if (v80 != v81)
  {
    *(void *)&uint64_t v12 = 67110144LL;
    v71 = v12;
    do
    {
      uint64_t v14 = *(_DWORD *)v13;
      uint64_t v15 = *((_DWORD *)v13 + 2);
      uint64_t v16 = (char *)v83 + 48 * *(int *)v13;
      uint64_t v17 = *((int *)v13 + 1) + 1LL;
      uint64_t v18 = (char *)v83 + 48 * v17;
      uint64_t v19 = (double *)(v84 - 48);
      if (v18 < v84) {
        uint64_t v19 = (double *)((char *)v83 + 48 * v17);
      }
      uint64_t v20 = v19[3];
      __p = 0LL;
      *(void *)v90 = 0LL;
      *(void *)&v90[8] = 0LL;
      int v75 = 0LL;
      int v76 = 0LL;
      v77[0] = 0LL;
      unsigned int v86 = 0LL;
      int v87 = 0LL;
      int v88 = 0LL;
      uint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v16) >> 4);
      sub_1001AC380(&__p, v21);
      sub_1001AC380(&v75, v21);
      sub_1001AC380(&v86, v21);
      if (v14 != (_DWORD)v17)
      {
        do
        {
          uint64_t v22 = *(char **)v90;
          if (*(void *)v90 >= *(void *)&v90[8])
          {
            uint64_t v24 = (char *)__p;
            uint64_t v25 = (uint64_t)(*(void *)v90 - (void)__p) >> 3;
            uint64_t v26 = v25 + 1;
            uint64_t v27 = *(void *)&v90[8] - (void)__p;
            else {
              uint64_t v28 = v26;
            }
            if (v28)
            {
              uint64_t v29 = (char *)sub_1000071BC((uint64_t)&v90[8], v28);
              uint64_t v24 = (char *)__p;
              uint64_t v22 = *(char **)v90;
            }

            else
            {
              uint64_t v29 = 0LL;
            }

            uint64_t v30 = &v29[8 * v25];
            *(void *)uint64_t v30 = *(void *)v16;
            uint64_t v23 = v30 + 8;
            while (v22 != v24)
            {
              uint64_t v31 = *((void *)v22 - 1);
              v22 -= 8;
              *((void *)v30 - 1) = v31;
              v30 -= 8;
            }

            __p = v30;
            *(void *)v90 = v23;
            *(void *)&v90[8] = &v29[8 * v28];
            if (v24) {
              operator delete(v24);
            }
          }

          else
          {
            **(void **)v90 = *(void *)v16;
            uint64_t v23 = v22 + 8;
          }

          *(void *)v90 = v23;
          uint64_t v32 = (void *)v76;
          if ((unint64_t)v76 >= v77[0])
          {
            uint64_t v34 = v75;
            uint64_t v35 = (v76 - (uint64_t)v75) >> 3;
            uint64_t v36 = v35 + 1;
            uint64_t v37 = v77[0] - (void)v75;
            else {
              uint64_t v38 = v36;
            }
            if (v38)
            {
              int v39 = (char *)sub_1000071BC((uint64_t)v77, v38);
              uint64_t v34 = v75;
              uint64_t v32 = (void *)v76;
            }

            else
            {
              int v39 = 0LL;
            }

            uint64_t v40 = &v39[8 * v35];
            *(void *)uint64_t v40 = *((void *)v16 + 1);
            uint64_t v33 = v40 + 8;
            while (v32 != v34)
            {
              uint64_t v41 = *--v32;
              *((void *)v40 - 1) = v41;
              v40 -= 8;
            }

            int v75 = v40;
            int v76 = (uint64_t)v33;
            v77[0] = &v39[8 * v38];
            if (v34) {
              operator delete(v34);
            }
          }

          else
          {
            *(void *)int v76 = *((void *)v16 + 1);
            uint64_t v33 = v32 + 1;
          }

          int v76 = (uint64_t)v33;
          uint64_t v42 = v87;
          if ((unint64_t)v87 >= v88)
          {
            v44 = v86;
            uint64_t v45 = ((char *)v87 - (_BYTE *)v86) >> 3;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61) {
LABEL_117:
            }
              sub_100007008();
            int v47 = v88 - (void)v86;
            else {
              int v48 = v46;
            }
            if (v48)
            {
              int v49 = (char *)sub_1000071BC((uint64_t)&v88, v48);
              v44 = v86;
              uint64_t v42 = v87;
            }

            else
            {
              int v49 = 0LL;
            }

            unsigned int v50 = &v49[8 * v45];
            *(void *)unsigned int v50 = *((void *)v16 + 2);
            int v43 = v50 + 8;
            while (v42 != v44)
            {
              int v51 = *--v42;
              *((void *)v50 - 1) = v51;
              v50 -= 8;
            }

            unsigned int v86 = v50;
            int v87 = v43;
            int v88 = (unint64_t)&v49[8 * v48];
            if (v44) {
              operator delete(v44);
            }
          }

          else
          {
            *int v87 = *((void *)v16 + 2);
            int v43 = v42 + 1;
          }

          int v87 = v43;
          v16 += 48;
        }

        while (v16 != v18);
      }

      *(double *)buf = 0.0;
      *(void *)int v96 = 0LL;
      *(void *)&v96[8] = 0LL;
      sub_100007590(buf, __p, *(uint64_t *)v90, (uint64_t)(*(void *)v90 - (void)__p) >> 3);
      uint64_t v53 = sub_1005A84C4(*(double **)buf, *(double **)v96, v52);
      if (*(double *)buf != 0.0)
      {
        *(void *)int v96 = *(void *)buf;
        operator delete(*(void **)buf);
      }

      *(double *)buf = 0.0;
      *(void *)int v96 = 0LL;
      *(void *)&v96[8] = 0LL;
      sub_100007590(buf, v75, v76, (v76 - (uint64_t)v75) >> 3);
      uint64_t v55 = sub_1005A84C4(*(double **)buf, *(double **)v96, v54);
      if (*(double *)buf != 0.0)
      {
        *(void *)int v96 = *(void *)buf;
        operator delete(*(void **)buf);
      }

      *(double *)buf = 0.0;
      *(void *)int v96 = 0LL;
      *(void *)&v96[8] = 0LL;
      sub_100007590(buf, v86, (uint64_t)v87, ((char *)v87 - (_BYTE *)v86) >> 3);
      int v57 = sub_1005A84C4(*(double **)buf, *(double **)v96, v56);
      if (*(double *)buf != 0.0)
      {
        *(void *)int v96 = *(void *)buf;
        operator delete(*(void **)buf);
      }

      if (v86)
      {
        int v87 = v86;
        operator delete(v86);
      }

      if (v75)
      {
        int v76 = (uint64_t)v75;
        operator delete(v75);
      }

      if (__p)
      {
        *(void *)v90 = __p;
        operator delete(__p);
      }

      int v75 = *(void **)&v57;
      int v76 = *(void *)&v53;
      *(double *)unsigned int v77 = v55;
      *(double *)&v77[1] = v20;
      int v78 = v15;
      int v79 = 1;
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_101841208);
      }
      int v58 = (os_log_s *)qword_101934748;
      if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = v71;
        *(_DWORD *)&buf[4] = v79;
        *(_WORD *)int v96 = 2048;
        *(void *)&v96[2] = v75;
        *(_WORD *)&v96[10] = 2048;
        *(void *)&v96[12] = v76;
        int v97 = 2048;
        v98 = v77[0];
        v99 = 1024;
        v100 = v78;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "[FormController] AggregatedGCT,isSuccessful,%d,groundContactTime,%.2f,initialContactTime,%.2f,toeOffTime,%.2f,stepSide,%d.",  buf,  0x2Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934740 != -1) {
          dispatch_once(&qword_101934740, &stru_101841208);
        }
        LODWORD(__p) = v71;
        HIDWORD(__p) = v79;
        *(_WORD *)v90 = 2048;
        *(void *)&v90[2] = v75;
        *(_WORD *)&v90[10] = 2048;
        *(void *)&v90[12] = v76;
        v91 = 2048;
        int v92 = v77[0];
        int v93 = 1024;
        int v94 = v78;
        LODWORD(v70) = 44;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  2LL,  "[FormController] AggregatedGCT,isSuccessful,%d,groundContactTime,%.2f,initialContactTime,%.2f,toeOffTime,%.2f,stepSide,%d.",  &__p,  v70,  *(double *)&v71,  *((double *)&v71 + 1),  (_DWORD)v72);
        int v66 = (uint8_t *)v65;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRunning::FormModels::aggregateEventsOverStride(std::deque<Timeseries> &, std::deque<Timeseries> &, cons t std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator, const std::deque<CLGaitEvents::LoggingModelOut put>::const_iterator)",  "%s\n",  v65);
        if (v66 != buf) {
          free(v66);
        }
      }

      if (sub_1005A61A4(a1))
      {
        sub_10116FED0((uint64_t)&v75, (uint64_t)buf);
        if (qword_1019A1D00 != -1) {
          dispatch_once(&qword_1019A1D00, &stru_101841228);
        }
        unsigned int v59 = qword_1019A1D08;
        if (qword_1019A1D08)
        {
          int v60 = operator new(0x38uLL);
          sub_10108D7E8((uint64_t)v60, (uint64_t)buf);
          __p = v61;
          Current = CFAbsoluteTimeGetCurrent();
          sub_100B508D0(v59, (uint64_t *)&__p, Current);
          uint64_t v63 = __p;
          __p = 0LL;
          if (v63) {
            (*(void (**)(void *))(*(void *)v63 + 8LL))(v63);
          }
        }

        PB::Base::~Base((PB::Base *)buf);
      }

      *(double *)buf = v20 - *(double *)(a1 + 448);
      v64 = a2;
      if (v78 == 2 || (v64 = v72, v78 == 1)) {
        sub_1005A8254(v64, buf, (uint64_t *)&v75);
      }
      v13 += 12;
    }

    while (v13 != v73);
    goto LABEL_106;
  }

  uint64_t v31 = *(void *)(v5 + 200);
  if (!v31) {
    uint64_t v31 = *(void *)(qword_1019A11B8 + 200);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19,  v31,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_112;
  }

    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    int v52 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "#EED2,sendControlData,failed to send", buf, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_111;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    LOWORD(v72) = 0;
    LODWORD(v67) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,sendControlData,failed to send",  &v72,  v67,  __p[0]);
    int v51 = (uint8_t *)v64;
    sub_10029211C("Generic", 1LL, 0, 0LL, "void CLEmergencyEED2::sendControlData()", "%s\n", v64);
    goto LABEL_130;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  uint64_t v19 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "#EED2,sendControlData,nil fControl,early return",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    LOWORD(v72) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,sendControlData,nil fControl,early return",  &v72,  2);
    uint64_t v4 = (uint8_t *)v20;
    sub_10029211C("Generic", 1LL, 0, 0LL, "void CLEmergencyEED2::sendControlData()", "%s\n", v20);
    goto LABEL_10;
  }

  sub_1010DD48C(__dst, (void *)__s1, *((unint64_t *)&__s1 + 1));
LABEL_107:
  sub_1007C93E0((uint64_t)v37, (unsigned __int8 *)__dst, &v100);
  if (SHIBYTE(v99) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v38 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  int v39 = v100;
  for (i = v101; v39 != i; int v39 = v44 + 32)
  {
    sub_1007C9854(*p_fInstance, *(_DWORD *)v39, (uint64_t)buf);
    if (SBYTE3(v112) >= 0) {
      uint64_t v41 = buf;
    }
    else {
      uint64_t v41 = *(_BYTE **)buf;
    }
    uint64_t v42 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v41);
    if (SBYTE3(v112) < 0) {
      operator delete(*(void **)buf);
    }
    int v43 = *(unsigned int *)(v39 + 32);
    if ((_DWORD)v43 == -1) {
      sub_10013B58C();
    }
    *(void *)int v106 = buf;
    v44 = v39 + 8;
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v38,  "setObject:forKeyedSubscript:",  ((uint64_t (*)(_BYTE *, uint64_t))off_101850880[v43])(v106, v44),  v42);
  }

  uint64_t v45 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  int v96 = 0u;
  int v97 = 0u;
  int v94 = 0u;
  unsigned int v95 = 0u;
  v46 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v38,  "countByEnumeratingWithState:objects:count:",  &v94,  v109,  16LL);
  int v47 = 1;
  if (v46)
  {
    int v48 = @",%@:%@";
    int v49 = &CMOnBodyStatusManagerManufacturer_ptr;
    v90 = *(void *)v95;
    do
    {
      unsigned int v50 = 0LL;
      v89 = v46;
      do
      {
        if (*(void *)v95 != v90) {
          objc_enumerationMutation(v38);
        }
        int v51 = objc_msgSend( v49[448],  "stringWithFormat:",  v48,  *(void *)(*((void *)&v94 + 1) + 8 * (void)v50),  -[NSMutableDictionary objectForKeyedSubscript:]( v38,  "objectForKeyedSubscript:",  *(void *)(*((void *)&v94 + 1) + 8 * (void)v50)));
        int v52 = (char *)-[NSMutableString length](v45, "length");
        if (&v52[(void)[v51 length]] > (char *)0x383)
        {
          if (qword_101934A40 != -1) {
            dispatch_once(&qword_101934A40, &stru_101850820);
          }
          uint64_t v53 = (os_log_s *)qword_101934A48;
          if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
          {
            v54 = v49;
            uint64_t v55 = v38;
            int v56 = v48;
            int v57 = SHIBYTE(v105);
            int v58 = (__int128 *)__s1;
            unsigned int v59 = -[NSMutableString UTF8String](v45, "UTF8String");
            *(_DWORD *)buf = 67109634;
            int v60 = &__s1;
            if (v57 < 0) {
              int v60 = v58;
            }
            *(_DWORD *)&buf[4] = v47;
            *(_WORD *)&buf[8] = 2080;
            *(void *)&buf[10] = v60;
            int v111 = 2080;
            int v112 = v59;
            _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "#careport Part,%d,event,%s,measurements%s",  buf,  0x1Cu);
            int v48 = v56;
            uint64_t v38 = v55;
            int v49 = v54;
            v46 = v89;
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934A40 != -1) {
              dispatch_once(&qword_101934A40, &stru_101850820);
            }
            int v61 = qword_101934A48;
            v62 = SHIBYTE(v105);
            uint64_t v63 = (__int128 *)__s1;
            v64 = -[NSMutableString UTF8String](v45, "UTF8String");
            *(_DWORD *)int v106 = 67109634;
            int v65 = &__s1;
            if (v62 < 0) {
              int v65 = v63;
            }
            *(_DWORD *)&v106[4] = v47;
            *(_WORD *)&v106[8] = 2080;
            *(void *)&v106[10] = v65;
            v107 = 2080;
            v108 = v64;
            LODWORD(v86) = 28;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v61,  0LL,  "#careport Part,%d,event,%s,measurements%s",  v106,  v86,  v87);
            int v67 = (char *)v66;
            sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLAnalyticsLoggerAdapter submitEvent:]", "%s\n", v66);
            int v48 = @",%@:%@";
            if (v67 != buf) {
              free(v67);
            }
          }

          uint64_t v45 = (NSMutableString *)[v51 mutableCopy];
          ++v47;
        }

        else
        {
          -[NSMutableString appendString:](v45, "appendString:", v51);
        }

        unsigned int v50 = (char *)v50 + 1;
      }

      while (v46 != v50);
      unsigned int v68 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v38,  "countByEnumeratingWithState:objects:count:",  &v94,  v109,  16LL);
      v46 = v68;
    }

    while (v68);
  }

  if (qword_101934A40 != -1) {
    dispatch_once(&qword_101934A40, &stru_101850820);
  }
  int v69 = (os_log_s *)qword_101934A48;
  if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
  {
    int v70 = SHIBYTE(v105);
    v71 = (__int128 *)__s1;
    uint64_t v72 = -[NSMutableString UTF8String](v45, "UTF8String");
    v73 = &__s1;
    if (v70 < 0) {
      v73 = v71;
    }
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v47;
    *(_WORD *)&buf[8] = 2080;
    *(void *)&buf[10] = v73;
    int v111 = 2080;
    int v112 = v72;
    _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "#careport Part,%d,event,%s,measurements%s",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    int v79 = qword_101934A48;
    v80 = SHIBYTE(v105);
    v81 = (__int128 *)__s1;
    v82 = -[NSMutableString UTF8String](v45, "UTF8String");
    int v83 = &__s1;
    if (v80 < 0) {
      int v83 = v81;
    }
    *(_DWORD *)int v106 = 67109634;
    *(_DWORD *)&v106[4] = v47;
    *(_WORD *)&v106[8] = 2080;
    *(void *)&v106[10] = v83;
    v107 = 2080;
    v108 = v82;
    LODWORD(v86) = 28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v79,  0LL,  "#careport Part,%d,event,%s,measurements%s",  v106,  v86,  v87);
    int v85 = (char *)v84;
    sub_10029211C("Generic", 1LL, 0, 2LL, "-[CLAnalyticsLoggerAdapter submitEvent:]", "%s\n", v84);
    if (v85 != buf) {
      free(v85);
    }
  }

  if (v105 >= 0) {
    int v74 = &__s1;
  }
  else {
    int v74 = (__int128 *)__s1;
  }
  v93[0] = _NSConcreteStackBlock;
  v93[1] = 3221225472LL;
  v93[2] = sub_1007C9A38;
  v93[3] = &unk_1018486D8;
  v93[4] = v38;
  AnalyticsSendEventLazy(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v74), v93);
  int v75 = (void *)*p_fInstance;
  if (SHIBYTE(v105) < 0)
  {
    sub_1010DD48C(v91, (void *)__s1, *((unint64_t *)&__s1 + 1));
  }

  else
  {
    *(_OWORD *)v91 = __s1;
    int v92 = v105;
  }

  sub_1007C9A40(v75, (unsigned __int8 *)v91);
  if (SHIBYTE(v92) < 0) {
    operator delete(v91[0]);
  }
  *(void *)buf = &v100;
  sub_10043B844((void ***)buf);
  if (SHIBYTE(v105) < 0) {
    operator delete((void *)__s1);
  }
}

  uint64_t v30 = *(void *)(v5 + 208);
  if (!v30) {
    uint64_t v30 = *(void *)(qword_1019A1D38 + 208);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B,  v30,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_112;
  }

  if (!*(_BYTE *)(a2 + 504)
    || !*(_BYTE *)(v6 + 152)
    || !*(_BYTE *)(v6 + 153)
    || !v181
    || !*v172
    || !*(void *)(a2 + 120)
    || (sub_100D5DAC4((uint64_t *)(a2 + 120), (uint64_t)buf),
        sub_100D5DAC4((uint64_t *)&v181, (uint64_t)v200),
        sub_100BDA328((uint64_t)buf, (uint64_t)v200))
    || (sub_100D5DAC4((uint64_t *)&v181, (uint64_t)&v174), !sub_100BDA328((uint64_t)&v174, v6 + 128))
    || (sub_100D5DAC4(v172, (uint64_t)v213),
        sub_100D5DAC4((uint64_t *)(a2 + 120), (uint64_t)&v194),
        !sub_100BDA328((uint64_t)v213, (uint64_t)&v194))
    || sub_100EB2B44((uint64_t)&v181, (double *)a1, a2 + 120) <= *(double *)(a1 + 856) * 5.0)
  {
    v54 = 0;
    goto LABEL_135;
  }

  sub_100EB29F8((uint64_t)&v174, (uint64_t)&v189);
  sub_100D5DAC4((uint64_t *)&v181, (uint64_t)v173);
  int v49 = sub_100EAD494(&v174, (uint64_t)v173, v2);
  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188A8E0);
  }
  unsigned int v50 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v49;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,eliminated outgoing roadKey for local solution,%{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    LODWORD(v200[0]) = 134349312;
    *(double *)((char *)v200 + 4) = v2;
    WORD2(v200[1]) = 1026;
    *(_DWORD *)((char *)&v200[1] + 6) = v49;
    LODWORD(v169) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,eliminated outgoing roadKey for local solution,%{public}d",  v200,  v169);
    v163 = (uint8_t *)v162;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)",  "%s\n",  v162);
    if (v163 != buf) {
      free(v163);
    }
  }

  if (v175 == v174)
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    int v120 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,Number of particles 0 after eliminating particles on combined road,%{public}d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      LODWORD(v200[0]) = 134349312;
      *(double *)((char *)v200 + 4) = v2;
      WORD2(v200[1]) = 1026;
      *(_DWORD *)((char *)&v200[1] + 6) = v49;
      LODWORD(v169) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,Number of particles 0 after eliminating particles on combined road,%{public}d",  v200,  v169);
      int v165 = (uint8_t *)v164;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)",  "%s\n",  v164);
      if (v165 != buf) {
        free(v165);
      }
    }

    v54 = 0;
    goto LABEL_264;
  }

  sub_100EAD378((uint64_t *)&v174, (uint64_t)v200);
  if (!v200[0])
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    int v121 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&buf[4] = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_ERROR,  "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,2",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_262;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    *(_DWORD *)int v213 = 134349056;
    *(double *)&v213[4] = v2;
    LODWORD(v169) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,2",  v213,  v169);
    int v123 = (uint8_t *)v122;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)",  "%s\n",  v122);
    goto LABEL_329;
  }

  int v51 = sub_100EB2B44((uint64_t)v200, (double *)a1, a2 + 120);
  int v52 = *(double *)(a1 + 856);
  if (v51 > v52 * 0.8) {
    goto LABEL_125;
  }
  if (v51 < v52 && !*(_BYTE *)(a1 + 897))
  {
    v143 = *(double *)(a1 + 480);
    v144 = *(float *)v201;
    v145 = *((float *)&v183 + 2);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    int v146 = vabdd_f64(v143, v144);
    int v147 = vabdd_f64(v143, v145);
    int v148 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v146;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v147;
      _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,use new particle, course check, crumbCourseDiffWithNewParticle,%{public}.1lf,crumbCourseDi ffWithPreviousParticle,%{public}.1lf",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      *(_DWORD *)int v213 = 134349568;
      *(double *)&v213[4] = v2;
      *(_WORD *)&v213[12] = 2050;
      *(double *)&v213[14] = v146;
      int v214 = 2050;
      v215 = v147;
      LODWORD(v169) = 32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,use new particle, course check, crumbCourseDiffWithNewParticle,%{public}.1lf,crumbCourseDi ffWithPreviousParticle,%{public}.1lf",  v213,  v169);
      int v168 = (uint8_t *)v167;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)",  "%s\n",  v167);
      if (v168 != buf) {
        free(v168);
      }
    }

    if (v146 < 35.0 && v147 > 60.0)
    {
LABEL_125:
      uint64_t v53 = vabdd_f64(*(double *)(a1 + 480), *((float *)&v183 + 2));
      v54 = v53 < 30.0;
      sub_100D5DB64((uint64_t)&v181, (uint64_t)v200);
      sub_100EB2A90((uint64_t)&v189, (uint64_t)&v174);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10188A8E0);
      }
      uint64_t v55 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v2;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v53 < 30.0;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,new particle without the outgoing road accepted,courseIsUnreliable,%{public}d",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10188A8E0);
        }
        *(_DWORD *)int v213 = 134349312;
        *(double *)&v213[4] = v2;
        *(_WORD *)&v213[12] = 1026;
        *(_DWORD *)&v213[14] = v53 < 30.0;
        LODWORD(v169) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,new particle without the outgoing road accepted,courseIsUnreliable,%{public}d",  v213,  v169);
        int v57 = (uint8_t *)v56;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)",  "%s\n",  v56);
        if (v57 != buf) {
          free(v57);
        }
      }

      goto LABEL_263;
    }
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188A8E0);
  }
  v125 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v49;
    _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,not using local solution without outgoing road,%{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    *(_DWORD *)int v213 = 134349312;
    *(double *)&v213[4] = v2;
    *(_WORD *)&v213[12] = 1026;
    *(_DWORD *)&v213[14] = v49;
    LODWORD(v169) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,not using local solution without outgoing road,%{public}d",  v213,  v169);
    int v123 = (uint8_t *)v166;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)",  "%s\n",  v166);
LABEL_329:
    if (v123 != buf) {
      free(v123);
    }
  }

      dispatch_once(&qword_101934A70, &stru_10188CFE8);
      goto LABEL_68;
    }
  }

  return result;
}

    int v79 = a3[1];
    if (v79 != *a3)
    {
      v81 = *(void **)(v79 - 24);
      v80 = *(void **)(v79 - 16);
      v82 = v79 - 24;
      if (v80 == v81)
      {
        if (v80) {
          operator delete(v80);
        }
        a3[1] = v82;
      }
    }

    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101894CD8);
    }
    int v83 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEFAULT))
    {
      int v84 = -1227133513 * ((unint64_t)((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5);
      int v85 = 1227133513 * ((unint64_t)((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5);
      LODWORD(__p) = 67109632;
      HIDWORD(__p) = v18;
      LOWORD(v110) = 1024;
      *(_DWORD *)((char *)&v110 + 2) = v84;
      HIWORD(v110) = 1024;
      LODWORD(v111) = v85 - 1227133513 * ((unint64_t)((char *)v102 - (_BYTE *)v101) >> 5);
      _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "CMMobilityCalibrationManager: Queried %d gait metrics within %d walk bouts. %d bouts dropped.",  (uint8_t *)&__p,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101894CD8);
      }
      v90 = -1227133513 * ((unint64_t)((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5);
      v91 = 1227133513 * ((unint64_t)((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5);
      v104[0] = 67109632;
      v104[1] = v18;
      int v105 = 1024;
      int v106 = v90;
      v107 = 1024;
      v108 = v91 - 1227133513 * ((unint64_t)((char *)v102 - (_BYTE *)v101) >> 5);
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934518,  0LL,  "CMMobilityCalibrationManager: Queried %d gait metrics within %d walk bouts. %d bouts dropped.",  v104,  20,  v98);
      int v93 = (void **)v92;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTim e, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const",  "%s\n",  v92);
      if (v93 != &__p) {
        free(v93);
      }
    }

    if (0x6DB6DB6DB6DB6DB7LL * (((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5) == 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3))
    {
      unsigned int v68 = 100LL;
    }

    else
    {
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101894CD8);
      }
      unsigned int v86 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_ERROR,  "CMMobilityCalibrationManager: Expect number of gait vectors == number of bouts. Something went wrong unexpectedly.",  (uint8_t *)&__p,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_101894CD8);
        }
        LOWORD(v104[0]) = 0;
        LODWORD(v97) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "CMMobilityCalibrationManager: Expect number of gait vectors == number of bouts. Something went wrong unexpectedly.",  v104,  v97);
        unsigned int v95 = (void **)v94;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteT ime, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const",  "%s\n",  v94);
        if (v95 != &__p) {
          free(v95);
        }
      }

      unsigned int v68 = 103LL;
    }
  }

  else
  {
    if (qword_101934510 != -1) {
      dispatch_once(&qword_101934510, &stru_101894CD8);
    }
    int v67 = (os_log_s *)qword_101934518;
    if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_ERROR,  "CMMobilityCalibrationManager: Error querying bout metrics.",  (uint8_t *)&__p,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_101894CD8);
      }
      LOWORD(v104[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934518,  16LL,  "CMMobilityCalibrationManager: Error querying bout metrics.",  v104,  2);
      v89 = (void **)v88;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CMMobilityCal::CMMobilityCalibrationManager::queryMobilityDBWithinInterval(CFAbsoluteTime, CFAbsoluteTim e, std::vector<CLMobility::BoutMetrics> &, std::vector<std::vector<CLMobility::GaitMetrics>> &) const",  "%s\n",  v88);
      if (v89 != &__p) {
        free(v89);
      }
    }

    unsigned int v68 = 108LL;
  }

  uint64_t result = *(float *)(a2 + 244);
  v5 |= 0x4000000000000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 244) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x100000000000000LL) == 0)
  {
LABEL_41:
    if ((v7 & 0x2000000000000LL) == 0) {
      goto LABEL_42;
    }
    goto LABEL_108;
  }

  PB::TextFormatter::format(this, "hgDeltaVXYZOverEpoch", *(float *)(a1 + 196));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x8000000000LL) == 0)
  {
LABEL_40:
    if ((v6 & 0x10000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_108;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 244), 0x24u);
  int v6 = *v4;
  if ((*v4 & 0x100000000000000LL) == 0)
  {
LABEL_41:
    if ((v6 & 0x2000000000000LL) == 0) {
      goto LABEL_42;
    }
    goto LABEL_108;
  }

  uint64_t result = *(float *)(a2 + 236);
  v5 |= 0x100000000000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 236) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x80000000000000LL) == 0)
  {
LABEL_33:
    if ((v4 & 0x200000000000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_108;
  }

  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2", *(float *)(a1 + 120));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_108;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 240), 0x1Bu);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40) == 0)
  {
LABEL_32:
    if ((v5 & 2) == 0) {
      goto LABEL_33;
    }
    goto LABEL_108;
  }

  uint64_t v24 = *(_BYTE *)(a2 + 307);
  uint64_t v25 = v6 >> 16;
  v6 |= 0x1000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 326) = v25;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 307) = v24;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 2) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000000000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_108;
  }

  PB::TextFormatter::format(this, "kAudioDvEnergyThresholdStretchRO", *(float *)(a1 + 76));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_25:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_108;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 307), 0x76u);
  uint64_t v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v4[1] & 2) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000000000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_108;
  }

  uint64_t v32 = *(_BYTE *)(a2 + 177);
  v3 |= 0x40000000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 177) = v32;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x400000000000000LL) == 0)
  {
LABEL_28:
    if ((v5 & 4) == 0) {
      goto LABEL_29;
    }
    goto LABEL_108;
  }

  PB::TextFormatter::format(this, "kChaosOrSaturationMetRO", *(_BYTE *)(a1 + 176));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x40000000000000LL) == 0)
  {
LABEL_27:
    if ((v5 & 0x80000000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_108;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0x3ECu);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x400000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_108;
  }

              *(_DWORD *)(a1 + 24) = v24;
              goto LABEL_117;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_76;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_101;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_76;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_101;
            case 4u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_76;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_101;
            case 5u:
              *(_WORD *)(a1 + 64) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_76;
              }
              *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_101;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_76;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_101;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_76;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_101;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_76;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_101;
            case 9u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_76;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_101;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 8u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                uint64_t v45 = 0;
                v46 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }

                  int v47 = v27++;
                  int v48 = *(_BYTE *)(v28 + v47);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  uint64_t v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    uint64_t v2 = v47 + 1;
                    goto LABEL_111;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_110;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_111;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_117;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_76;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_101;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 60) = v34;
              goto LABEL_117;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 4u;
              uint64_t v35 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                int v49 = 0;
                unsigned int v50 = 0;
                int v39 = 0LL;
                if (v2 <= v35) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }

                  int v51 = v35++;
                  int v52 = *(_BYTE *)(v36 + v51);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  uint64_t v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_115:
                    uint64_t v2 = v51 + 1;
                    goto LABEL_116;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_115;
              }

              uint64_t v37 = 0;
              uint64_t v38 = 0;
              int v39 = 0LL;
              do
              {
                uint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                uint64_t v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_116;
                }
                v37 += 7;
                uint64_t v35 = v2;
                uint64_t v14 = v38++ > 8;
              }

              while (!v14);
              LODWORD(v39) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 16) = v39;
LABEL_117:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 64) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
LABEL_101:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_76:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_117;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_117;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_127;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 4u;
              uint64_t v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                int v57 = 0;
                int v58 = 0;
                uint64_t v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }

                  unsigned int v59 = v27++;
                  int v60 = *(_BYTE *)(v28 + v59);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  uint64_t v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    uint64_t v2 = v59 + 1;
                    goto LABEL_111;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_110;
              }

              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                uint64_t v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_111;
                }
                v29 += 7;
                uint64_t v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_127;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 8u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                int v61 = 0;
                v62 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }

                  uint64_t v63 = v33++;
                  v64 = *(_BYTE *)(v34 + v63);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  uint64_t v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_115:
                    uint64_t v2 = v63 + 1;
                    goto LABEL_116;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_115;
              }

              uint64_t v35 = 0;
              uint64_t v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                uint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_116;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_127;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 2u;
              int v39 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5LL || v39 + 10 > v2)
              {
                int v65 = 0;
                int v66 = 0;
                int v43 = 0LL;
                if (v2 <= v39) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_121;
                  }

                  int v67 = v39++;
                  unsigned int v68 = *(_BYTE *)(v40 + v67);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  uint64_t v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_120:
                    uint64_t v2 = v67 + 1;
                    goto LABEL_121;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_120;
              }

              uint64_t v41 = 0;
              uint64_t v42 = 0;
              int v43 = 0LL;
              do
              {
                uint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_121;
                }
                v41 += 7;
                int v39 = v2;
                uint64_t v14 = v42++ > 8;
              }

              while (!v14);
              LODWORD(v43) = 0;
LABEL_121:
              *(_DWORD *)(a1 + 16) = v43;
              goto LABEL_127;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              uint64_t v45 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5LL || v45 + 10 > v2)
              {
                int v69 = 0;
                int v70 = 0;
                int v49 = 0LL;
                if (v2 <= v45) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }

                  v71 = v45++;
                  uint64_t v72 = *(_BYTE *)(v46 + v71);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  uint64_t v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_125:
                    uint64_t v2 = v71 + 1;
                    goto LABEL_126;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_125;
              }

              int v47 = 0;
              int v48 = 0;
              int v49 = 0LL;
              do
              {
                uint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                unsigned int v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_126;
                }
                v47 += 7;
                uint64_t v45 = v2;
                uint64_t v14 = v48++ > 8;
              }

              while (!v14);
              LODWORD(v49) = 0;
LABEL_126:
              *(_DWORD *)(a1 + 32) = v49;
LABEL_127:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 1u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7LL && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 8LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_127;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                int v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                int v51 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                int v52 = v51 != 0;
              }

              *(_BYTE *)(a1 + 36) = v52;
              goto LABEL_127;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_127;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

LABEL_109:
  uint64_t v32 = *(void *)(v5 + 208);
  if (!v32) {
    uint64_t v32 = *(void *)(qword_1019A0978 + 208);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D,  v32,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_115;
  }

  int v43 = *(_DWORD *)(a2 + 116);
  if (v43 >= 3) {
    sub_10122FB6C();
  }
  *(_DWORD *)(a1 + 364) |= 0x200000u;
  *(_DWORD *)(a1 + 116) = v43;
  uint64_t v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x400000) == 0) {
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v33 = *(_BYTE *)(a2 + 114);
  *(_DWORD *)(a1 + 364) |= 0x400000u;
  *(_BYTE *)(a1 + 114) = v33;
  uint64_t v13 = *(_DWORD *)(a2 + 364);
LABEL_67:
  if ((v13 & 0x800000) != 0)
  {
    *(_DWORD *)(a1 + 364) |= 0x800000u;
    uint64_t v34 = *(_DWORD **)(a1 + 136);
    if (!v34)
    {
      uint64_t v34 = operator new(0x28uLL);
      v34[7] = 0;
      v34[8] = 0;
      *((void *)v34 + 1) = 0LL;
      *((void *)v34 + 2) = 0LL;
      *(void *)uint64_t v34 = off_101827FB8;
      *((_WORD *)v34 + 12) = 0;
      *(void *)(a1 + 136) = v34;
    }

    uint64_t v35 = *(void *)(a2 + 136);
    if (!v35) {
      uint64_t v35 = *(void *)(qword_1019A0BA0 + 136);
    }
    sub_1001D7C48((uint64_t)v34, v35);
    uint64_t v13 = *(_DWORD *)(a2 + 364);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26,  (int)a2,  *(double *)(v5 + 224),  a3);
  uint64_t v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x40) == 0)
  {
LABEL_40:
    if ((v7 & 0x80) == 0) {
      goto LABEL_41;
    }
    goto LABEL_111;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_nGoodCatherine),  @"nGoodCatherine");
  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_87:
    if ((*(_WORD *)&has & 0x4000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_111;
  }

  uint64_t v32 = *(void *)(v5 + 208);
  if (!v32) {
    uint64_t v32 = *(void *)(qword_1019A11B8 + 208);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A,  v32,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_115;
  }

  if ((v3 & 0xFF0000) == 0) {
    goto LABEL_161;
  }
  if ((v3 & 0x10000) != 0)
  {
    uint64_t v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 72);
    if ((v37 & 0x80000000) != 0)
    {
      uint64_t v38 = 10;
    }

    else if (v37 >= 0x80)
    {
      uint64_t v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37, a2);
      uint64_t v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      uint64_t v38 = 1;
    }

    uint64_t v4 = (v4 + v38 + 2);
    if ((v3 & 0x20000) == 0)
    {
LABEL_112:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_113;
      }
      goto LABEL_131;
    }
  }

  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_112;
  }

  int v39 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 76);
  if ((v39 & 0x80000000) != 0)
  {
    uint64_t v40 = 10;
  }

  else if (v39 >= 0x80)
  {
    uint64_t v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v39, a2);
    uint64_t v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    uint64_t v40 = 1;
  }

  uint64_t v4 = (v4 + v40 + 2);
  if ((v3 & 0x40000) == 0)
  {
LABEL_113:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_114;
    }
    goto LABEL_137;
  }

  uint64_t v31 = *(void *)(v5 + 216);
  if (!v31) {
    uint64_t v31 = *(void *)(qword_1019A1D38 + 216);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C,  v31,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_115;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v35 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v36 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "alertCanceledBecauseOfOffBody";
    int v193 = 2048;
    unsigned int v194 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v117 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "alertCanceledBecauseOfOffBody";
    v189 = 2048;
    v190 = v117;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    int v119 = (uint8_t *)v118;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v118);
    if (v119 != buf) {
      free(v119);
    }
  }

  a4[5] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v10 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_121;
  }

      int v78 = 0;
LABEL_110:
      if (SHIBYTE(v138) < 0) {
        operator delete(*((void **)&v137 + 1));
      }
      int v85 = (std::__shared_weak_count *)v152.n128_u64[1];
      if (v152.n128_u64[1])
      {
        unsigned int v86 = (unint64_t *)(v152.n128_u64[1] + 8);
        do
          int v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }

      uint64_t v4 = v116;
      if (!v78)
      {
        uint64_t v21 = 0LL;
        goto LABEL_139;
      }

  sub_100DF66A0(a3, (uint64_t)v72, *(__int128 **)(a3 + 8));
  int v76 = *(void *)a3;
  unsigned int v77 = *(void *)(a3 + 8);
  if (*(void *)a3 != v77)
  {
    do
    {
      else {
        int v78 = *(void *)(a2 + 8);
      }
      sub_1000392EC((uint64_t)&v88, v78 + 1);
      if ((v88.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v79 = &v88;
      }
      else {
        int v79 = (std::string *)v88.__r_.__value_.__r.__words[0];
      }
      if (v78)
      {
        else {
          v80 = *(const void **)a2;
        }
        memmove(v79, v80, v78);
      }

      *(_WORD *)((char *)&v79->__r_.__value_.__l.__data_ + v78) = 47;
      v81 = *(char *)(v76 + 23);
      if (v81 >= 0) {
        v82 = (const std::string::value_type *)v76;
      }
      else {
        v82 = *(const std::string::value_type **)v76;
      }
      if (v81 >= 0) {
        int v83 = *(unsigned __int8 *)(v76 + 23);
      }
      else {
        int v83 = *(void *)(v76 + 8);
      }
      int v84 = std::string::append(&v88, v82, v83);
      int v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      cap = v84->__r_.__value_.__l.__cap_;
      *(_OWORD *)__p = v85;
      v84->__r_.__value_.__l.__size_ = 0LL;
      v84->__r_.__value_.__l.__cap_ = 0LL;
      v84->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        unsigned int v86 = __p;
      }
      else {
        unsigned int v86 = (void **)__p[0];
      }
      sub_100296964((const char *)v86);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      v76 += 24LL;
    }

    while (v76 != v77);
  }

  return sub_10004AD90((uint64_t)v91);
}

  uint64_t result = *(float *)(a2 + 296);
  v5 |= 0x8000000000000000LL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 296) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x800000000LL) == 0)
  {
LABEL_44:
    if ((v7 & 0x400000000LL) == 0) {
      goto LABEL_45;
    }
    goto LABEL_111;
  }

  PB::TextFormatter::format(this, "hgDeltaVZOverEpoch", *(float *)(a1 + 208));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x40000000000LL) == 0)
  {
LABEL_43:
    if ((v6 & 0x80000000000LL) == 0) {
      goto LABEL_44;
    }
    goto LABEL_111;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 296), 0x27u);
  int v6 = *v4;
  if ((*v4 & 0x800000000LL) == 0)
  {
LABEL_44:
    if ((v6 & 0x400000000LL) == 0) {
      goto LABEL_45;
    }
    goto LABEL_111;
  }

  uint64_t result = *(float *)(a2 + 36);
  v5 |= 0x40uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 36) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 2) == 0)
  {
LABEL_36:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_111;
  }

  PB::TextFormatter::format( this,  "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded",  *(float *)(a1 + 132));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x100000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_111;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x1Eu);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x800) == 0)
  {
LABEL_35:
    if ((v6 & 4) == 0) {
      goto LABEL_36;
    }
    goto LABEL_111;
  }

  uint64_t v26 = *(_DWORD *)(a2 + 268);
  uint64_t v27 = v6 >> 16;
  v6 |= 1uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 326) = v27;
  *(_WORD *)(a1 + 324) = v6;
  *(_DWORD *)(a1 + 268) = v26;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((v8 & 0x40000) == 0)
  {
LABEL_29:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_111;
  }

  PB::TextFormatter::format(this, "kAudioDvMaxRmsThresholdMinRO", *(float *)(a1 + 88));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_28:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_111;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 268), 0x79u);
  uint64_t v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v7 & 0x40000) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_111;
  }

  PB::TextFormatter::format(this, "cumulativeRotation", *(float *)(a1 + 80));
  uint64_t v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_111;
  }

  uint64_t v36 = *(void *)(a2 + 24);
  v3 |= 4uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(void *)(result + 24) = v36;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_111;
  }

  PB::TextFormatter::format(this, "kChaosOrSaturationMetRO2", *(_BYTE *)(a1 + 179));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x200000000000000LL) == 0)
  {
LABEL_30:
    if ((v5 & 0x400000000000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_111;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 0x3EFu);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x400000000000LL) == 0)
  {
LABEL_31:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_111;
  }

    uint64_t v3 = *((void *)this + 2);
  }

  return i == 0;
}

LABEL_112:
  uint64_t v33 = *(void *)(v5 + 216);
  if (!v33) {
    uint64_t v33 = *(void *)(qword_1019A0978 + 216);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E,  v33,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_118;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x29,  (int)a2,  *(double *)(v5 + 248),  a3);
  uint64_t v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x200) == 0)
  {
LABEL_43:
    if ((v7 & 0x400) == 0) {
      goto LABEL_44;
    }
    goto LABEL_114;
  }

  *(float *)&int v6 = self->_minGoodCatherine;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6),  @"minGoodCatherine");
  has = self->_has;
  if ((*(_BYTE *)&has & 0x10) == 0)
  {
LABEL_90:
    if ((*(_BYTE *)&has & 0x20) == 0) {
      goto LABEL_91;
    }
    goto LABEL_114;
  }

  uint64_t v33 = *(void *)(v5 + 216);
  if (!v33) {
    uint64_t v33 = *(void *)(qword_1019A11B8 + 216);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B,  v33,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_118;
  }

  v81 = *(unsigned __int16 *)(a1 + 82);
  if (*(_WORD *)(a1 + 82))
  {
    v82 = 0LL;
    int v83 = 0;
    do
      v83 += *(_DWORD *)sub_10032DE70((unsigned __int16 *)(a1 + 80), v82++);
    while (v81 != v82);
    uint64_t v34 = (double)v83 * 100.0;
  }

  if (qword_101934680 != -1)
  {
    v99 = 75.0;
    dispatch_once(&qword_101934680, &stru_101848F40);
  }

  int v84 = (os_log_s *)qword_101934688;
  int v85 = v34 / 75.0;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_INFO))
  {
    unsigned int v86 = (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4;
    int v87 = *(void *)(a1 + 24);
    int v88 = *(void *)(a1 + 8);
    *(_DWORD *)__p = 134219776;
    *(void *)&__p[4] = v86;
    v117 = 2048;
    v118 = v36;
    int v119 = 2048;
    int v120 = v85;
    int v121 = 2048;
    unsigned int v122 = v87;
    int v123 = 2048;
    int v124 = v23;
    v125 = 2048;
    v126 = v35;
    v127 = 2048;
    int v128 = v88;
    int v129 = 2048;
    int v130 = *((float *)&v132 + 1);
    _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_INFO,  "n,%lu,baseline,%f,counter,%f,t,%f,exertion,%f,baseThreshold,%f,lowExertionThreshold,%f,accelVectorMagnitude,%f,HRStop",  __p,  0x52u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101848F40);
    }
    v91 = (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 4;
    int v92 = *(void *)(a1 + 24);
    int v93 = *(void *)(a1 + 8);
    v100 = 134219776;
    int v101 = *(double *)&v91;
    int v102 = 2048;
    int v103 = v36;
    unsigned int v104 = 2048;
    int v105 = v85;
    int v106 = 2048;
    v107 = v92;
    v108 = 2048;
    v109 = v23;
    int v110 = 2048;
    int v111 = v35;
    int v112 = 2048;
    unsigned int v113 = v93;
    int v114 = 2048;
    int v115 = *((float *)&v132 + 1);
    LODWORD(v97) = 82;
    int v94 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934688,  1LL,  "n,%lu,baseline,%f,counter,%f,t,%f,exertion,%f,baseThreshold,%f,lowExertionThreshold,%f,accelVectorMa gnitude,%f,HRStop",  &v100,  v97,  v98,  v99);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLWorkoutStopModelHR::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v94);
    if (v94 != __p) {
      free(v94);
    }
  }

  if (v85 <= 80.0) {
    return 0LL;
  }
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_101848F40);
  }
  v89 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    v90 = *(double *)(a2 + 304);
    *(_DWORD *)__p = 134283777;
    *(double *)&__p[4] = v36;
    v117 = 2049;
    v118 = v90;
    _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "HRModel,stopping workout,baseline,%{private}f,restingHeartRate,%{private}f",  __p,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_101848F40);
    }
    unsigned int v95 = *(double *)(a2 + 304);
    v100 = 134283777;
    int v101 = v36;
    int v102 = 2049;
    int v103 = v95;
    LODWORD(v97) = 22;
    int v96 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934688,  0LL,  "HRModel,stopping workout,baseline,%{private}f,restingHeartRate,%{private}f",  &v100,  *(void *)&v97);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLWorkoutStopModelHR::update(const CLWorkoutPredictorInputs &)",  "%s\n",  v96);
    if (v96 != __p) {
      free(v96);
    }
  }

  return 5LL;
}

  sub_1002F0B04(buf);
  if (sub_1002A6F64(*(uint64_t *)buf, "LCFusionDisablePassthroughLogic", (BOOL *)(a1 + 158)))
  {
    int v52 = *(unsigned __int8 *)(a1 + 158);
    uint64_t v53 = v87;
    if (!v87) {
      goto LABEL_117;
    }
    v54 = (unint64_t *)&v87->__shared_owners_;
    do
      uint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      if (!v52) {
        goto LABEL_135;
      }
    }

    else
    {
LABEL_117:
      if (!v52) {
        goto LABEL_135;
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v56 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "LCFusion to skip the driving/fitness/accessory passthrough logic for internal testing",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v85[0]) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  0LL,  "LCFusion to skip the driving/fitness/accessory passthrough logic for internal testing",  v85,  v84);
      int v58 = (uint8_t *)v57;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v57);
      if (v58 != buf) {
        free(v58);
      }
    }
  }

  else
  {
    unsigned int v59 = v87;
    if (v87)
    {
      int v60 = (unint64_t *)&v87->__shared_owners_;
      do
        int v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }

  uint64_t v32 = *(void *)(v5 + 224);
  if (!v32) {
    uint64_t v32 = *(void *)(qword_1019A1D38 + 224);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D,  v32,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_118;
  }

  if ((v3 & 0xFF0000) == 0) {
    goto LABEL_174;
  }
  if ((v3 & 0x10000) != 0)
  {
    int v61 = *(void *)(a1 + 128);
    if (!v61) {
      int v61 = *(void *)(qword_1019A1D38 + 128);
    }
    v62 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BBF64C(v61, a2);
    uint64_t v63 = (int)v62;
    else {
      v64 = 1;
    }
    v4 += v63 + v64 + 2;
    uint64_t v3 = *(_DWORD *)(a1 + 396);
    if ((v3 & 0x20000) == 0)
    {
LABEL_115:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_116;
      }
      goto LABEL_134;
    }
  }

  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_115;
  }

  int v65 = *(void *)(a1 + 136);
  if (!v65) {
    int v65 = *(void *)(qword_1019A1D38 + 136);
  }
  int v66 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BBF9F0(v65, a2);
  int v67 = (int)v66;
  else {
    unsigned int v68 = 1;
  }
  v4 += v67 + v68 + 2;
  uint64_t v3 = *(_DWORD *)(a1 + 396);
  if ((v3 & 0x40000) == 0)
  {
LABEL_116:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_117;
    }
    goto LABEL_142;
  }

  uint64_t result = *(float *)(a2 + 216);
  v5 |= 0x80000000000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 216) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_47:
    if ((v7 & 0x20000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_114;
  }

  PB::TextFormatter::format(this, "hgDurationXYZBiggestImpact", *(float *)(a1 + 220));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x200000000000LL) == 0)
  {
LABEL_46:
    if ((v6 & 0x400000000000LL) == 0) {
      goto LABEL_47;
    }
    goto LABEL_114;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 216), 0x2Au);
  int v6 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_114;
  }

  uint64_t v18 = *(_BYTE *)(a2 + 279);
  v6 |= 0x800u;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 279) = v18;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 4) == 0)
  {
LABEL_39:
    if ((v4 & 0x80) == 0) {
      goto LABEL_40;
    }
    goto LABEL_114;
  }

  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithAudio", *(float *)(a1 + 144));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000000LL) == 0)
  {
LABEL_38:
    if ((v6 & 0x800000000LL) == 0) {
      goto LABEL_39;
    }
    goto LABEL_114;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x21u);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v5 & 0x200) == 0) {
      goto LABEL_39;
    }
    goto LABEL_114;
  }

  uint64_t result = *(float *)(a2 + 132);
  v5 |= 0x40000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 132) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_32:
    if ((v4 & 0x1000000000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_114;
  }

  PB::TextFormatter::format(this, "kAudioDvRmsThresholdRO", *(float *)(a1 + 96));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_31:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_114;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 0xCAu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_32:
    if ((v5 & 0x1000000000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_114;
  }

  PB::TextFormatter::format(this, "deltaRealTrigger", *(float *)(a1 + 92));
  uint64_t v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v7 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_114;
  }

  int v39 = *(_DWORD *)(a2 + 100);
  v3 |= 0x80000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 100) = v39;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x800000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_114;
  }

  PB::TextFormatter::format(this, "kEnergyAndChaosOrSaturationMetRO1", *(_BYTE *)(a1 + 182));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x1000000000000000LL) == 0)
  {
LABEL_33:
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_114;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 201), 0x3F2u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x4000000000LL) == 0)
  {
LABEL_34:
    if ((v4 & 0x40000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_114;
  }

LABEL_115:
  uint64_t v34 = *(void *)(v5 + 224);
  if (!v34) {
    uint64_t v34 = *(void *)(qword_1019A0978 + 224);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F,  v34,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_121;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2C,  (int)a2,  *(double *)(v5 + 264),  a3);
  if ((*(_DWORD *)(v5 + 368) & 0x1000) != 0) {
LABEL_46:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2D,  (int)a2,  *(double *)(v5 + 280),  a3);
LABEL_47:
  if (*(int *)(v5 + 296) >= 1)
  {
    uint64_t v8 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2E,  *(void *)(*(void *)(v5 + 288) + 8 * v8++),  a2,  a4);
    while (v8 < *(int *)(v5 + 296));
  }

  uint64_t v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x4000) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2F,  *(_DWORD *)(v5 + 312),  (int)a2,  a4);
    uint64_t v9 = *(_DWORD *)(v5 + 368);
    if ((v9 & 0x8000) == 0)
    {
LABEL_52:
      if ((v9 & 0x10000) == 0) {
        goto LABEL_53;
      }
      goto LABEL_121;
    }
  }

  else if ((v9 & 0x8000) == 0)
  {
    goto LABEL_52;
  }

  uint64_t v15 = *(void *)(v5 + 320);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_1019A0BA0 + 320);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x30,  v15,  a2,  a4);
  uint64_t v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x10000) == 0)
  {
LABEL_53:
    if ((v9 & 0x20000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_122;
  }

  int v123 = qword_1019A1910;
  if (a4)
  {
    if (a4 == 1)
    {
      uint64_t v63 = v130.__r_.__value_.__s.__size_;
      if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v63 = v130.__r_.__value_.__l.__size_;
      }
      if (v63 || (*(void *)buf = qword_1019A1910, sub_1007EC0C4(&v123, buf)))
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        v64 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
        {
          int v65 = &v130;
          if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            int v65 = (std::string *)v130.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136380931;
          *(void *)&buf[4] = v65;
          *(_WORD *)&buf[12] = 1025;
          *(_DWORD *)&buf[14] = 75312138;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "WifiService, getAccessPoint, HostedNetwork, %{private}s, r%{private}d",  buf,  0x12u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101833558);
          }
          int v66 = &v130;
          if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            int v66 = (std::string *)v130.__r_.__value_.__r.__words[0];
          }
          unsigned int v131 = 136380931;
          int v132 = v66;
          int v133 = 1025;
          LODWORD(v134) = 75312138;
          LODWORD(v99) = 18;
          int v67 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiService, getAccessPoint, HostedNetwork, %{private}s, r%{private}d",  &v131,  v99);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const",  "%s\n",  v67);
          if (v67 != buf) {
            free(v67);
          }
        }
      }
    }
  }

  else
  {
    int v123 = sub_1007EBE44((uint64_t *)&v130);
  }

  unsigned int v68 = v123;
  else {
    __p = v127;
  }
  int v69 = v126;
  int v70 = IsApplePersonalHotspot != 0;
  uint64_t v72 = v128;
  v71 = v129;
  v73 = v125;
  int v74 = *(void *)(a3 + 56);
  int v75 = v124;
  *(void *)buf = __p.__r_.__value_.__l.__size_;
  int v76 = __p.__r_.__value_.__r.__words[0];
  *(void *)&buf[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  unsigned int v77 = __p.__r_.__value_.__s.__size_;
  memset(&__p, 0, sizeof(__p));
  *(void *)a3 = v68;
  if (*(char *)(a3 + 31) < 0)
  {
    operator delete(*(void **)v120);
    int v78 = __p.__r_.__value_.__s.__size_;
  }

  else
  {
    int v78 = 0;
  }

  int v79 = *(void *)buf;
  *(void *)(a3 + 8) = v76;
  *(void *)(a3 + 16) = v79;
  *(void *)(a3 + 23) = *(void *)&buf[7];
  *(_BYTE *)(a3 + 31) = v77;
  *(_DWORD *)(a3 + 32) = v69;
  *(_DWORD *)(a3 + 36) = v71;
  *(_DWORD *)(a3 + 40) = v72;
  *(double *)(a3 + 48) = v73;
  *(void *)(a3 + 56) = v74;
  *(_BYTE *)(a3 + 64) = v70;
  v80 = v121;
  *(_BYTE *)(a3 + 65) = BYTE4(v121);
  *(_DWORD *)(a3 + 68) = v75;
  *(_BYTE *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0LL;
  if ((v78 & 0x80) != 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (sub_1007EC114())
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    v81 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
    {
      v82 = &v130;
      if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        v82 = (std::string *)v130.__r_.__value_.__r.__words[0];
      }
      int v83 = &v127;
      if ((v127.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v83 = (std::string *)v127.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136380931;
      *(void *)&buf[4] = v82;
      *(_WORD *)&buf[12] = 2081;
      *(void *)&buf[14] = v83;
      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_ERROR,  "WifiService, getAccessPoint, invalid mac, %{private}s, %{private}s, #CloneMe",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v87 = &v130;
      if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v87 = (std::string *)v130.__r_.__value_.__r.__words[0];
      }
      int v88 = &v127;
      if ((v127.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v88 = (std::string *)v127.__r_.__value_.__r.__words[0];
      }
      unsigned int v131 = 136380931;
      int v132 = v87;
      int v133 = 2081;
      v134 = v88;
      LODWORD(v99) = 22;
      v89 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "WifiService, getAccessPoint, invalid mac, %{private}s, %{private}s, #CloneMe",  &v131,  v99);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const",  "%s\n",  v89);
      if (v89 != buf) {
        free(v89);
      }
    }

    v80 = 0LL;
  }

  return v80;
}

    uint64_t result = 0LL;
    v17[296] = a10;
    v48[297] = a7;
    dword_1019954A8 = LODWORD(a8);
    dword_1019954AC = LODWORD(a9);
    return result;
  }

  uint64_t v22 = fopen(byte_1019A0E60, "r");
  if (!v22)
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101834690);
    }
    int v60 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      int v61 = __error();
      v62 = strerror(*v61);
      *(_DWORD *)buf = 136315394;
      v179 = COERCE_DOUBLE(byte_1019A0E60);
      v180 = 2082;
      v181 = *(double *)&v62;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_INFO,  "could not open geomagnetic data file %s (%{public}s)",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 1LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101834690);
    }
    uint64_t v63 = qword_101934588;
    v64 = __error();
    int v65 = strerror(*v64);
    int v174 = 136315394;
    int v175 = COERCE_DOUBLE(byte_1019A0E60);
    unsigned int v176 = 2082;
    int v177 = *(double *)&v65;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v63,  1LL,  "could not open geomagnetic data file %s (%{public}s)",  &v174,  22);
    goto LABEL_127;
  }

  uint64_t v23 = v22;
  dword_10199438C = *a2;
  dword_1019950CC = 0;
  dword_10199519C = 1065353216;
  dword_101994E28[0] = 1065353216;
  dword_101995100[0] = 1065353216;
  dword_101994B84[0] = 0;
  dword_101995474 = 1170676122;
  dword_101995478 = 1276849967;
  dword_10199547C = 1276781883;
  dword_101995480 = 1216674304;
  dword_101995484 = 1488725079;
  dword_101995488 = 1436593536;
  dword_101994398[0] = 0;
  dword_10199463C[0] = 0;
  if (!fgets(byte_1019954C4, 80, v22))
  {
    fclose(v23);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101834690);
    }
    int v66 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_INFO,  "geomagnetic data file appears to be empty",  buf,  2u);
    }

    if (!sub_1002921D0(115, 2)) {
      return 1LL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101834690);
    }
    LOWORD(v174) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "geomagnetic data file appears to be empty",  &v174,  2);
    goto LABEL_127;
  }

  sscanf(byte_1019954C4, "%f", &dword_10199548C);
  if (fgets(byte_1019954C4, 80, v23))
  {
    uint64_t v24 = 0LL;
    do
    {
      do
      {
        if (!byte_1019954C4[v24]) {
          break;
        }
        *((_BYTE *)&dword_101995515 + v24) = byte_1019954C4[v24];
        ++v24;
        *((_BYTE *)&dword_101995515 + v24) = 0;
      }

      while (v24 != 4);
      sscanf( byte_1019954C4,  "%d%d%f%f%f%f",  &dword_101994390,  &dword_101994394,  &dword_101995490,  &dword_101995494,  &dword_101995498,  &dword_10199549C);
      uint64_t v25 = dword_101994394;
      if (dword_101994394 > 0xC
        || (uint64_t v26 = dword_101994390, dword_101994390 > 12)
        || dword_101994390 < 0)
      {
        fclose(v23);
        if (qword_101934580 != -1) {
          dispatch_once(&qword_101934580, &stru_101834690);
        }
        unsigned int v158 = (os_log_s *)qword_101934588;
        if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v158,  OS_LOG_TYPE_INFO,  "geomagnetic data file appears to have invalid dimensions",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934580 != -1) {
            dispatch_once(&qword_101934580, &stru_101834690);
          }
          LOWORD(v174) = 0;
          LODWORD(v160) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  1LL,  "geomagnetic data file appears to have invalid dimensions",  &v174,  v160);
          goto LABEL_127;
        }

        return 1LL;
      }

      if (dword_101994394 <= dword_101994390)
      {
        dword_101994398[13 * dword_101994394 + dword_101994390] = dword_101995490;
        dword_10199463C[13 * v25 + v26] = dword_101995498;
        if (v25)
        {
          uint64_t v27 = v25 - 1;
          dword_101994398[13 * v26 + v27] = dword_101995494;
          dword_10199463C[13 * v26 + v27] = dword_10199549C;
        }
      }

      uint64_t v28 = fgets(byte_1019954C4, 80, v23);
      uint64_t v24 = 0LL;
    }

    while (v28);
  }

  dword_101994E28[0] = 1065353216;
  if (dword_10199438C < 1)
  {
    LODWORD(v30) = 1;
  }

  else
  {
    uint64_t v29 = 0;
    uint64_t v30 = dword_10199438C + 1LL;
    uint64_t v31 = (float *)&unk_101994640;
    uint64_t v32 = (float *)&unk_10199439C;
    uint64_t v33 = (float *)&unk_1019951D4;
    uint64_t v34 = 1LL;
    do
    {
      uint64_t v35 = 0LL;
      uint64_t v36 = 0;
      uint64_t v37 = (float *)&dword_101994E28[v34];
      uint64_t v38 = 2 * v34 - 1;
      *uint64_t v37 = (float)(*(v37 - 1) * (float)v38) / (float)(int)v34;
      int v39 = v34 + 1;
      uint64_t v40 = (float)(v38 * (2 * v34 - 3));
      uint64_t v41 = 2;
      uint64_t v42 = v29;
      do
      {
        v33[v35] = (float)((v29 + v36) * v42) / v40;
        if (v35)
        {
          int v43 = v37[(int)v35 - 13] * sqrtf((float)(v41 * (v42 + 2)) / (float)(v29 + v36 + 1));
          v37[(int)v35] = v43;
          *(float *)&dword_101994398[13 * v34 + (v36 - 1)] = *(float *)&dword_101994398[13 * v34 + (v36 - 1)]
                                                                         * v43;
          *(float *)&dword_10199463C[13 * v34 + (v36 - 1)] = v43
                                                                         * *(float *)&dword_10199463C[13 * v34 + (v36 - 1)];
          uint64_t v41 = 1;
        }

        v44 = v37[v35];
        v32[v35] = v44 * v32[v35];
        v31[v35] = v44 * v31[v35];
        ++v36;
        v35 += 13LL;
        --v42;
      }

      while (v42 + 3 > 1);
      flt_101995134[v34] = (float)(int)v39;
      flt_101995168[v34] = (float)(int)v34;
      ++v29;
      ++v31;
      ++v32;
      ++v33;
      ++v34;
    }

    while (v39 != v30);
    dword_101994394 = v36;
  }

  dword_101994390 = v30;
  dword_101995208 = 0;
  dword_1019954AC = -998637568;
  dword_1019954A8 = -998637568;
  dword_1019954A4 = -998637568;
  dword_1019954A0 = -998637568;
  fclose(v23);
  return 0LL;
}

  *(float *)&int v6 = self->_meanGoodCatherine;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6),  @"meanGoodCatherine");
  has = self->_has;
  if ((*(_BYTE *)&has & 2) == 0)
  {
LABEL_93:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_94;
    }
    goto LABEL_117;
  }

  uint64_t v34 = *(void *)(v5 + 224);
  if (!v34) {
    uint64_t v34 = *(void *)(qword_1019A11B8 + 224);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C,  v34,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_121;
  }

  uint64_t v33 = *(void *)(v5 + 232);
  if (!v33) {
    uint64_t v33 = *(void *)(qword_1019A1D38 + 232);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E,  v33,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 396);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_121;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v37 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v38 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "alertCanceledBecauseOfRepetitiveMotion";
    int v193 = 2048;
    unsigned int v194 = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v120 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "alertCanceledBecauseOfRepetitiveMotion";
    v189 = 2048;
    v190 = v120;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    unsigned int v122 = (uint8_t *)v121;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v121);
    if (v122 != buf) {
      free(v122);
    }
  }

  a4[6] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v10 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_127;
  }

  uint64_t result = *(float *)(a2 + 208);
  v5 |= 0x20000000000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 208) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x200000000LL) == 0)
  {
LABEL_50:
    if ((v7 & 0x10000000000LL) == 0) {
      goto LABEL_51;
    }
    goto LABEL_117;
  }

  PB::TextFormatter::format(this, "isPulseDetected", *(_BYTE *)(a1 + 312));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x800000000000LL) == 0)
  {
LABEL_49:
    if ((v6 & 0x1000000000000LL) == 0) {
      goto LABEL_50;
    }
    goto LABEL_117;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 208), 0x2Du);
  int v6 = *v4;
  if ((*v4 & 0x200000000LL) == 0)
  {
LABEL_50:
    if ((v6 & 0x10000000000LL) == 0) {
      goto LABEL_51;
    }
    goto LABEL_117;
  }

  uint64_t result = *(float *)(a2 + 52);
  v5 |= 0x400uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 52) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x200) == 0)
  {
LABEL_42:
    if ((v4 & 0x100) == 0) {
      goto LABEL_43;
    }
    goto LABEL_117;
  }

  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneFull", *(float *)(a1 + 156));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 1) == 0)
  {
LABEL_41:
    if ((v7 & 2) == 0) {
      goto LABEL_42;
    }
    goto LABEL_117;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0x24u);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 4) == 0)
  {
LABEL_41:
    if ((v5 & 0x20) == 0) {
      goto LABEL_42;
    }
    goto LABEL_117;
  }

  uint64_t result = *(float *)(a2 + 292);
  uint64_t v8 = v6 >> 16;
  v6 |= 0x40uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 326) = v8;
  *(_WORD *)(a1 + 324) = v6;
  *(float *)(a1 + 292) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_117;
  }

  PB::TextFormatter::format(this, "kFinalDecisionRO", *(_BYTE *)(a1 + 309));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x8000) == 0)
  {
LABEL_34:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_117;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 292), 0xCDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_117;
  }

  uint64_t result = *(float *)(a2 + 296);
  int v6 = 1LL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = 1LL;
  *(float *)(a1 + 296) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x400000000000000LL) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000LL) == 0) {
      goto LABEL_11;
    }
    goto LABEL_117;
  }

  PB::TextFormatter::format(this, "distanceToNearestRoadThreshold", *(float *)(a1 + 104));
  uint64_t v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((v6 & 0x40) == 0)
  {
LABEL_14:
    if ((v6 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_117;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 296), 5u);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 0x400000000000000LL) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000000LL) == 0) {
      goto LABEL_11;
    }
    goto LABEL_117;
  }

  uint64_t v42 = *(_BYTE *)(a2 + 158);
  v3 |= 0x800000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 158) = v42;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x8000) == 0)
  {
LABEL_37:
    if ((v2 & 0x8000000000LL) == 0) {
      goto LABEL_38;
    }
    goto LABEL_117;
  }

  PB::TextFormatter::format(this, "kEnergyMetRO0", *(_BYTE *)(a1 + 185));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x8000000000000000LL) == 0)
  {
LABEL_36:
    if ((v6 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_117;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 197), 0x3F5u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_37:
    if ((v4 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_117;
  }

              *(void *)(a1 + 32) = v25;
              goto LABEL_136;
            case 'f':
              *(_WORD *)(a1 + 60) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                uint64_t v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                uint64_t v34 = v33 != 0;
              }

              *(_BYTE *)(a1 + 56) = v34;
              goto LABEL_136;
            case 'g':
              *(_WORD *)(a1 + 60) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_110;
            case 'h':
              *(_WORD *)(a1 + 60) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_110;
            case 'i':
              *(_WORD *)(a1 + 60) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_110:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_48:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_136;
            case 'j':
              *(_WORD *)(a1 + 60) |= 0x40u;
              uint64_t v35 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                v62 = 0;
                uint64_t v63 = 0;
                int v39 = 0LL;
                if (v2 <= v35) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_125;
                  }

                  v64 = v35++;
                  int v65 = *(_BYTE *)(v36 + v64);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v65 & 0x7F) << v62;
                  if ((v65 & 0x80) == 0) {
                    break;
                  }
                  v62 += 7;
                  uint64_t v14 = v63++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_124:
                    uint64_t v2 = v64 + 1;
                    goto LABEL_125;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_124;
              }

              uint64_t v37 = 0;
              uint64_t v38 = 0;
              int v39 = 0LL;
              do
              {
                uint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                uint64_t v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_125;
                }
                v37 += 7;
                uint64_t v35 = v2;
                uint64_t v14 = v38++ > 8;
              }

              while (!v14);
              LODWORD(v39) = 0;
LABEL_125:
              *(_DWORD *)(a1 + 48) = v39;
              goto LABEL_136;
            case 'k':
              *(_WORD *)(a1 + 60) |= 4u;
              uint64_t v41 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5LL || v41 + 10 > v2)
              {
                int v66 = 0;
                int v67 = 0;
                uint64_t v45 = 0LL;
                if (v2 <= v41) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    uint64_t v45 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }

                  unsigned int v68 = v41++;
                  int v69 = *(_BYTE *)(v42 + v68);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v69 & 0x7F) << v66;
                  if ((v69 & 0x80) == 0) {
                    break;
                  }
                  v66 += 7;
                  uint64_t v14 = v67++ > 8;
                  if (v14)
                  {
                    uint64_t v45 = 0LL;
LABEL_129:
                    uint64_t v2 = v68 + 1;
                    goto LABEL_130;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  uint64_t v45 = 0LL;
                }
                goto LABEL_129;
              }

              int v43 = 0;
              v44 = 0;
              uint64_t v45 = 0LL;
              do
              {
                uint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_130;
                }
                v43 += 7;
                uint64_t v41 = v2;
                uint64_t v14 = v44++ > 8;
              }

              while (!v14);
              uint64_t v45 = 0LL;
LABEL_130:
              *(void *)(a1 + 24) = v45;
              goto LABEL_136;
            default:
              if ((_DWORD)v20 == 201)
              {
                *(_WORD *)(a1 + 60) |= 1u;
                int v47 = *((void *)this + 1);
                uint64_t v2 = *((void *)this + 2);
                int v48 = *(void *)this;
                if (v47 > 0xFFFFFFFFFFFFFFF5LL || v47 + 10 > v2)
                {
                  int v70 = 0;
                  v71 = 0;
                  int v51 = 0LL;
                  if (v2 <= v47) {
                    uint64_t v2 = *((void *)this + 1);
                  }
                  while (1)
                  {
                    if (v2 == v47)
                    {
                      int v51 = 0LL;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_135;
                    }

                    uint64_t v72 = v47++;
                    v73 = *(_BYTE *)(v48 + v72);
                    *((void *)this + 1) = v47;
                    v51 |= (unint64_t)(v73 & 0x7F) << v70;
                    if ((v73 & 0x80) == 0) {
                      break;
                    }
                    v70 += 7;
                    uint64_t v14 = v71++ > 8;
                    if (v14)
                    {
                      int v51 = 0LL;
                      goto LABEL_134;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    int v51 = 0LL;
                  }
LABEL_134:
                  uint64_t v2 = v72 + 1;
                }

                else
                {
                  int v49 = 0;
                  unsigned int v50 = 0;
                  int v51 = 0LL;
                  while (1)
                  {
                    uint64_t v2 = v47 + 1;
                    *((void *)this + 1) = v47 + 1;
                    int v52 = *(_BYTE *)(v48 + v47);
                    v51 |= (unint64_t)(v52 & 0x7F) << v49;
                    if ((v52 & 0x80) == 0) {
                      break;
                    }
                    v49 += 7;
                    int v47 = v2;
                    uint64_t v14 = v50++ > 8;
                    if (v14)
                    {
                      int v51 = 0LL;
                      break;
                    }
                  }
                }

LABEL_118:
  uint64_t v35 = *(void *)(v5 + 232);
  if (!v35) {
    uint64_t v35 = *(void *)(qword_1019A0978 + 232);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20,  v35,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_124;
  }

    int v43 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 120);
    if (v43 >= 0x80)
    {
      v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v43, a2) + 2;
      uint64_t v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      v44 = 3;
    }

    uint64_t v5 = (v44 + v5);
    if ((v3 & 0x100000) == 0)
    {
LABEL_102:
      if ((v3 & 0x200000) == 0) {
        goto LABEL_103;
      }
      goto LABEL_126;
    }

  *(float *)&int v6 = self->_longestDropout;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6),  @"longestDropout");
  has = self->_has;
  if ((*(_DWORD *)&has & 0x100000) == 0)
  {
LABEL_96:
    if ((*(_WORD *)&has & 0x200) == 0) {
      goto LABEL_97;
    }
    goto LABEL_120;
  }

  uint64_t v35 = *(void *)(v5 + 232);
  if (!v35) {
    uint64_t v35 = *(void *)(qword_1019A11B8 + 232);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D,  v35,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_124;
  }

        sub_10076ACC0(a1);
        sub_10076BCF8(a1);
        sub_1007745E0(a1);
        _Block_object_dispose(v89, 8);
        goto LABEL_70;
      }
    }

    else
    {
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      v46 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
      {
        int v47 = [v24 type];
        *(_DWORD *)buf = 134349056;
        *(void *)&buf[4] = v47;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "#EED2,handleAPNSMessage,device does not support request type: %{public}ld . Set error to CLEEDHelperErrorFeatureNotSupported",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934890 != -1) {
          dispatch_once(&qword_101934890, &stru_10184E040);
        }
        int v75 = qword_101934898;
        int v76 = [v24 type];
        int v87 = 134349056;
        int v88 = (uint64_t)v76;
        LODWORD(v79) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v75,  0LL,  "#EED2,handleAPNSMessage,device does not support request type: %{public}ld . Set error to CLEEDHelperErrorFeatureNotSupported",  &v87,  v79);
        int v78 = (char *)v77;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v77);
        if (v78 != buf) {
          free(v78);
        }
      }

      [v24 setState:14];
      v81 = 11LL;
    }

    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    int v48 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = v81;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "#EED2,handleAPNSMessage,CLEEDRequest object created with an error: %ld",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10184E040);
      }
      int v87 = 134217984;
      int v88 = v81;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,handleAPNSMessage,CLEEDRequest object created with an error: %ld",  &v87);
      int v74 = (char *)v73;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v73);
      if (v74 != buf) {
        free(v74);
      }
    }

    [*(id *)(a1 + 1896) addObject:v24];
    goto LABEL_118;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10184E040);
  }
  uint64_t v9 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "#EED2,handleAPNSMessage,canHandleAPNSMessage retuns false, reject APNS message and early return",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10184E040);
    }
    LOWORD(v91) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2,handleAPNSMessage,canHandleAPNSMessage retuns false, reject APNS message and early return",  &v91,  2);
    unsigned int v50 = (char *)v49;
    sub_10029211C("Generic", 1LL, 0, 0LL, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v49);
    if (v50 != buf) {
      free(v50);
    }
  }

  uint64_t v10 = *(void **)(a1 + 1832);
  if (v10)
  {

    *(void *)(a1 + 1832) = 0LL;
  }

  *(_DWORD *)(a1 + 184) |= 0x40000u;
  uint64_t v41 = *(void **)(a1 + 144);
  if (!v41)
  {
    uint64_t v41 = operator new(0x20uLL);
    *uint64_t v41 = &off_1018720E0;
    v41[1] = 0LL;
    v41[2] = 0LL;
    v41[3] = 0LL;
    *(void *)(a1 + 144) = v41;
  }

  uint64_t v42 = *(void *)(a2 + 144);
  if (!v42) {
    uint64_t v42 = *(void *)(qword_1019A1CE8 + 144);
  }
  sub_100B2F738((uint64_t)v41, v42);
  uint64_t v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x80000) == 0)
  {
LABEL_105:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_106;
    }
    goto LABEL_128;
  }

  uint64_t v34 = *(void *)(v5 + 240);
  if (!v34) {
    uint64_t v34 = *(void *)(qword_1019A1D38 + 240);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F,  v34,  a2,  a4);
  if ((*(_DWORD *)(v5 + 396) & 0x80000000) != 0)
  {
LABEL_121:
    uint64_t v35 = *(void *)(v5 + 248);
    if (!v35) {
      uint64_t v35 = *(void *)(qword_1019A1D38 + 248);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x32,  v35,  a2,  a4);
  }

      v45 += 2;
      if (v45 == v115)
      {
        uint64_t v21 = 1LL;
        goto LABEL_139;
      }
    }
  }

  if (!*(void *)(v4 + 16))
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v30 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *(void *)(v4 + 8);
      *(_DWORD *)buf = 134349056;
      *(void *)&buf[4] = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "CLMM,%{public}.1lf,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      goto LABEL_138;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v32 = *(void *)(v4 + 8);
    *(_DWORD *)int v129 = 134349056;
    *(void *)&v129[4] = v32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,%{public}.1lf,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr",  v129,  12);
    uint64_t v18 = (uint8_t *)v33;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CL MapCrumb &, double, BOOL) const",  "%s\n",  v33);
    goto LABEL_38;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10187A7C8);
  }
  uint64_t v11 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(v4 + 8);
    uint64_t v13 = (uint64_t)(*(void *)(*(void *)(v4 + 16) + 336LL) - *(void *)(*(void *)(v4 + 16) + 328LL)) >> 4;
    *(_DWORD *)buf = 134349312;
    *(void *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2050;
    *(void *)&buf[14] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    int v102 = *(void *)(v4 + 8);
    int v103 = (uint64_t)(*(void *)(*(void *)(v4 + 16) + 336LL) - *(void *)(*(void *)(v4 + 16) + 328LL)) >> 4;
    *(_DWORD *)int v129 = 134349312;
    *(void *)&v129[4] = v102;
    *(_WORD *)&v129[12] = 2050;
    *(void *)&v129[14] = v103;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu",  v129,  22);
    int v105 = (uint8_t *)v104;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CL MapCrumb &, double, BOOL) const",  "%s\n",  v104);
    if (v105 != buf) {
      free(v105);
    }
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10187A7C8);
  }
  uint64_t v14 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *(void *)(v4 + 8);
    *(_DWORD *)buf = 134349056;
    *(void *)&buf[4] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,Warning,RoadBuffer,findRoadsNear returned false",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10187A7C8);
    }
    uint64_t v16 = *(void *)(v4 + 8);
    *(_DWORD *)int v129 = 134349056;
    *(void *)&v129[4] = v16;
    LODWORD(v112) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,Warning,RoadBuffer,findRoadsNear returned false",  v129,  v112);
    uint64_t v18 = (uint8_t *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CL MapCrumb &, double, BOOL) const",  "%s\n",  v17);
LABEL_38:
    if (v18 != buf) {
      free(v18);
    }
  }

    if ((int)sub_1001CDAF8(a3 + 5968) >= 2)
    {
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_1018820E8);
      }
      v62 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v63 = sub_1001CDAF8(a3 + 5968);
        buf.__r_.__value_.__r.__words[0] = 68289282LL;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = v63;
        _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:#post-wifi-position-calculation-state-update, failed to achieve an accurate wifi locati on, number_of_requested_scans:%{public}d}",  (uint8_t *)&buf,  0x18u);
      }

      sub_100495EC8((int *)(a3 + 5968));
    }

    if (sub_100495E98((_DWORD *)p_vtable + 204) && !sub_100495E98((_DWORD *)(a3 + 5968))) {
      sub_1004970CC(5u);
    }
    v64 = *(_DWORD *)(a3 + 6024);
    if (v64 == 2)
    {
      int v65 = 0;
      int v66 = 3;
    }

    else
    {
      if (v64 != 3) {
        return;
      }
      int v65 = 11;
      int v66 = 5;
    }

    sub_10049609C(a3 + 5968, v66, v65, v8);
    return;
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_1018820E8);
  }
  uint64_t v45 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "#post-wifi-position-calculation-state-update, previous decision made to skip using wifi scan, skipping state transition logic",  (uint8_t *)&buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_1018820E8);
    }
    *(_WORD *)int v93 = 0;
    v44 = (std::stringbuf::string_type *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "#post-wifi-position-calculation-state-update, previous decision made to skip using wifi scan, skipping state transition logic",  v93,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const",  "%s\n",  (const char *)v44);
    goto LABEL_138;
  }

  uint64_t result = *(float *)(a2 + 172);
  v5 |= (unint64_t)&_mh_execute_header;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 172) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x200000000000LL) == 0)
  {
LABEL_53:
    if ((v7 & 0x4000000000LL) == 0) {
      goto LABEL_54;
    }
    goto LABEL_120;
  }

  PB::TextFormatter::format(this, "lgArclengthXYZBiggestImpact", *(float *)(a1 + 240));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x4000000000000LL) == 0)
  {
LABEL_52:
    if ((v6 & 0x8000000000000LL) == 0) {
      goto LABEL_53;
    }
    goto LABEL_120;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172), 0x30u);
  int v6 = *v4;
  if ((*v4 & 0x200000000000LL) == 0)
  {
LABEL_53:
    if ((v6 & 0x4000000000LL) == 0) {
      goto LABEL_54;
    }
    goto LABEL_120;
  }

  uint64_t result = *(float *)(a2 + 20);
  v5 |= 4uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 20) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x20) == 0)
  {
LABEL_45:
    if ((v4 & 0x10) == 0) {
      goto LABEL_46;
    }
    goto LABEL_120;
  }

  PB::TextFormatter::format(this, "isAudioDv", *(_BYTE *)(a1 + 270));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 8) == 0)
  {
LABEL_44:
    if ((v7 & 0x10) == 0) {
      goto LABEL_45;
    }
    goto LABEL_120;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 0x27u);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 8) == 0)
  {
LABEL_44:
    if ((v5 & 0x800) == 0) {
      goto LABEL_45;
    }
    goto LABEL_120;
  }

  uint64_t result = *(float *)(a2 + 24);
  v5 |= 8uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 24) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000000000000000LL) == 0)
  {
LABEL_38:
    if ((v8 & 0x80) == 0) {
      goto LABEL_39;
    }
    goto LABEL_120;
  }

  PB::TextFormatter::format(this, "kMaxAudioEnergyRO", *(float *)(a1 + 112));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_120;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 0xD0u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000000000000LL) == 0)
  {
LABEL_38:
    if ((v7 & 0x80) == 0) {
      goto LABEL_39;
    }
    goto LABEL_120;
  }

  uint64_t result = *(float *)(a2 + 220);
  v5 |= 0x200000000000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(float *)(a1 + 220) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000000LL) == 0) {
      goto LABEL_14;
    }
    goto LABEL_120;
  }

  PB::TextFormatter::format(this, "faultCounter", *(_DWORD *)(a1 + 108));
  uint64_t v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((*v5 & 2) == 0)
  {
LABEL_17:
    if ((v6 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_120;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 220), 8u);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000000000000LL) == 0) {
      goto LABEL_14;
    }
    goto LABEL_120;
  }

  v46 = *(_BYTE *)(a2 + 166);
  v3 |= 0x80000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 166) = v46;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x800) == 0)
  {
LABEL_40:
    if ((v2 & 0x800) == 0) {
      goto LABEL_41;
    }
    goto LABEL_120;
  }

  PB::TextFormatter::format(this, "kMaxChaosRO", *(float *)(a1 + 44));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x40) == 0)
  {
LABEL_39:
    if ((v5 & 0x80) == 0) {
      goto LABEL_40;
    }
    goto LABEL_120;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x3F8u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x4000000000000000LL) == 0)
  {
LABEL_40:
    if ((v4 & 0x4000000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_120;
  }

          *(void *)(a1 + 64) = v32;
          goto LABEL_139;
        case 2u:
          *(_BYTE *)(a1 + 76) |= 1u;
          uint64_t v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFF7LL || v35 + 8 > *((void *)this + 2)) {
            goto LABEL_135;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v35);
          uint64_t v36 = *((void *)this + 1) + 8LL;
          goto LABEL_138;
        case 3u:
          *(_BYTE *)(a1 + 76) |= 4u;
          uint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
            goto LABEL_135;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v37);
          goto LABEL_137;
        case 4u:
          if ((_DWORD)v26 != 2)
          {
            v71 = *(char **)(a1 + 40);
            int v70 = *(void *)(a1 + 48);
            if ((unint64_t)v71 >= v70)
            {
              int v75 = (char *)*v12;
              int v76 = (v71 - (_BYTE *)*v12) >> 2;
              unsigned int v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62) {
LABEL_149:
              }
                sub_100007008();
              int v78 = v70 - (void)v75;
              if (v78 >> 1 > v77) {
                unsigned int v77 = v78 >> 1;
              }
              else {
                int v79 = v77;
              }
              if (v79)
              {
                v80 = (char *)sub_10000956C(v13, v79);
                int v75 = *(char **)(a1 + 32);
                v71 = *(char **)(a1 + 40);
              }

              else
              {
                v80 = 0LL;
              }

              int v87 = &v80[4 * v76];
              *(_DWORD *)int v87 = 0;
              uint64_t v72 = v87 + 4;
              while (v71 != v75)
              {
                int v88 = *((_DWORD *)v71 - 1);
                v71 -= 4;
                *((_DWORD *)v87 - 1) = v88;
                v87 -= 4;
              }

              *(void *)(a1 + 32) = v87;
              *(void *)(a1 + 40) = v72;
              *(void *)(a1 + 48) = &v80[4 * v79];
              if (v75) {
                operator delete(v75);
              }
            }

            else
            {
              *(_DWORD *)v71 = 0;
              uint64_t v72 = v71 + 4;
            }

            *(void *)(a1 + 40) = v72;
            goto LABEL_133;
          }

          if ((PB::Reader::placeMark(this, v94, v26, a4) & 1) != 0) {
            return 0LL;
          }
          uint64_t v38 = *((void *)this + 1);
          int v39 = *((void *)this + 2);
          while (v38 < v39 && !*((_BYTE *)this + 24))
          {
            uint64_t v41 = *(char **)(a1 + 40);
            uint64_t v40 = *(void *)(a1 + 48);
            if ((unint64_t)v41 >= v40)
            {
              int v43 = (char *)*v12;
              v44 = (v41 - (_BYTE *)*v12) >> 2;
              uint64_t v45 = v44 + 1;
              v46 = v40 - (void)v43;
              if (v46 >> 1 > v45) {
                uint64_t v45 = v46 >> 1;
              }
              else {
                int v47 = v45;
              }
              if (v47)
              {
                int v48 = (char *)sub_10000956C(v13, v47);
                int v43 = *(char **)(a1 + 32);
                uint64_t v41 = *(char **)(a1 + 40);
              }

              else
              {
                int v48 = 0LL;
              }

              int v49 = &v48[4 * v44];
              *(_DWORD *)int v49 = 0;
              uint64_t v42 = v49 + 4;
              while (v41 != v43)
              {
                unsigned int v50 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v49 - 1) = v50;
                v49 -= 4;
              }

              *(void *)(a1 + 32) = v49;
              *(void *)(a1 + 40) = v42;
              *(void *)(a1 + 48) = &v48[4 * v47];
              if (v43) {
                operator delete(v43);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v41 = 0;
              uint64_t v42 = v41 + 4;
            }

            *(void *)(a1 + 40) = v42;
            int v51 = *((void *)this + 1);
            if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
              goto LABEL_97;
            }
            *(v42 - 1) = *(_DWORD *)(*(void *)this + v51);
            int v39 = *((void *)this + 2);
            uint64_t v38 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v38;
          }

          goto LABEL_98;
        case 5u:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v94, v26, a4) & 1) != 0) {
              return 0LL;
            }
            int v52 = *((void *)this + 1);
            uint64_t v53 = *((void *)this + 2);
            while (v52 < v53 && !*((_BYTE *)this + 24))
            {
              uint64_t v55 = *(char **)(a1 + 16);
              v54 = *(void *)(a1 + 24);
              if ((unint64_t)v55 >= v54)
              {
                int v57 = (char *)*v10;
                int v58 = (v55 - (_BYTE *)*v10) >> 2;
                unsigned int v59 = v58 + 1;
                int v60 = v54 - (void)v57;
                if (v60 >> 1 > v59) {
                  unsigned int v59 = v60 >> 1;
                }
                else {
                  int v61 = v59;
                }
                if (v61)
                {
                  v62 = (char *)sub_10000956C(v11, v61);
                  int v57 = *(char **)(a1 + 8);
                  uint64_t v55 = *(char **)(a1 + 16);
                }

                else
                {
                  v62 = 0LL;
                }

                uint64_t v63 = &v62[4 * v58];
                *(_DWORD *)uint64_t v63 = 0;
                int v56 = v63 + 4;
                while (v55 != v57)
                {
                  v64 = *((_DWORD *)v55 - 1);
                  v55 -= 4;
                  *((_DWORD *)v63 - 1) = v64;
                  v63 -= 4;
                }

                *(void *)(a1 + 8) = v63;
                *(void *)(a1 + 16) = v56;
                *(void *)(a1 + 24) = &v62[4 * v61];
                if (v57) {
                  operator delete(v57);
                }
              }

              else
              {
                *(_DWORD *)uint64_t v55 = 0;
                int v56 = v55 + 4;
              }

              *(void *)(a1 + 16) = v56;
              int v65 = *((void *)this + 1);
              if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)this + 2))
              {
LABEL_97:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v56 - 1) = *(_DWORD *)(*(void *)this + v65);
              uint64_t v53 = *((void *)this + 2);
              int v52 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v52;
            }

  v180 = 0LL;
  v181 = 0LL;
  int v182 = 0LL;
  if (v7)
  {
    if (v7 >= 4)
    {
      v116 = (void **)__p[1];
      do
      {
        if (v8 + 1 >= 0x800)
        {
          v117 = *v116++;
          operator delete(v117);
          __p[1] = v116;
          v8 -= 1023LL;
        }

        else
        {
          ++v8;
        }

        --v7;
      }

      while (v7 > 3);
      *(void *)&unsigned int v185 = v8;
      *((void *)&v185 + 1) = v7;
    }

    if (v6 != a1)
    {
      v118 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)a1) >> 2);
      do
      {
        int v119 = v118 >> 1;
        int v120 = (char *)v106 + 20 * (v118 >> 1);
        int v121 = *((_DWORD *)v120 + 4);
        unsigned int v122 = (float32x2_t *)(v120 + 20);
        v118 += ~(v118 >> 1);
        else {
          v118 = v119;
        }
      }

      while (v118);
      if (v106 != v6)
      {
        int v123 = 0LL;
        int v112 = v181;
        int v124 = v182;
        v125 = (char *)v180;
        while (1)
        {
          LODWORD(a6) = v106[1].i32[1];
          v126 = vmls_lane_f32(*v106, *(float32x2_t *)(a4 + 32), *(float32x2_t *)&a6, 0);
          v127 = v106[1].f32[0] - (float)(*(float *)(a4 + 40) * *(float *)&a6);
          if ((unint64_t)v123 >= v124)
          {
            int v129 = 0xAAAAAAAAAAAAAAABLL * ((v123 - v125) >> 2) + 1;
            if (v129 > 0x1555555555555555LL)
            {
              v181 = v112;
              int v182 = v124;
              v180 = v125;
              sub_100007008();
            }

            else {
              int v130 = v129;
            }
            if (v130) {
              int v130 = (unint64_t)sub_1011D5FC4(v130);
            }
            else {
              unsigned int v131 = 0LL;
            }
            int v132 = (float32x2_t *)(v130 + 4 * ((v123 - v125) >> 2));
            *int v132 = v126;
            v132[1].f32[0] = v127;
            if (v123 == v125)
            {
              v125 = (char *)(v130 + 4 * ((v123 - v125) >> 2));
            }

            else
            {
              int v133 = (char *)(v130 + 4 * ((v123 - v125) >> 2));
              do
              {
                v134 = *(void *)(v123 - 12);
                v123 -= 12;
                v135 = *((_DWORD *)v123 + 2);
                *(void *)(v133 - 12) = v134;
                v133 -= 12;
                *((_DWORD *)v133 + 2) = v135;
              }

              while (v123 != v125);
              int v123 = v125;
              v125 = v133;
            }

            int v124 = v130 + 12 * v131;
            int v128 = (char *)&v132[1] + 4;
            if (v123) {
              operator delete(v123);
            }
          }

          else
          {
            *(float32x2_t *)int v123 = v126;
            *((float *)v123 + 2) = v127;
            int v128 = v123 + 12;
          }

          if (v106[2].i32[0] == *(_DWORD *)(*(void *)((char *)__p[1]
                                                       + (((unint64_t)(*((void *)&v185 + 1) + v185 - 1) >> 7) & 0x1FFFFFFFFFFFFF8LL))
                                           + 4 * ((*((void *)&v185 + 1) + v185 - 1) & 0x3FF)))
          {
            v136 = v128 - 12;
            if ((unint64_t)v128 >= v124)
            {
              int v137 = 0xAAAAAAAAAAAAAAABLL * ((v128 - v125) >> 2) + 1;
              if (v137 > 0x1555555555555555LL)
              {
                v181 = v128;
                int v182 = v124;
                v180 = v125;
                sub_100007008();
              }

              else {
                int v138 = v137;
              }
              if (v138) {
                int v138 = (unint64_t)sub_1011D5FC4(v138);
              }
              else {
                int v139 = 0LL;
              }
              unsigned int v140 = (char *)(v138 + 4 * ((v128 - v125) >> 2));
              int v141 = *(void *)v136;
              int v124 = v138 + 12 * v139;
              *((_DWORD *)v140 + 2) = *((_DWORD *)v128 - 1);
              *(void *)unsigned int v140 = v141;
              int v112 = v140 + 12;
              if (v128 == v125)
              {
                v125 = v128;
              }

              else
              {
                do
                {
                  int v142 = *(void *)(v128 - 12);
                  v128 -= 12;
                  v143 = *((_DWORD *)v128 + 2);
                  *(void *)(v140 - 12) = v142;
                  v140 -= 12;
                  *((_DWORD *)v140 + 2) = v143;
                }

                while (v128 != v125);
                if (!v125) {
                  goto LABEL_171;
                }
              }

              operator delete(v125);
LABEL_171:
              v125 = v140;
              goto LABEL_172;
            }

            *(void *)int v128 = *(void *)v136;
            *((_DWORD *)v128 + 2) = *((_DWORD *)v128 - 1);
            int v112 = v128 + 12;
          }

          else
          {
            int v112 = v128;
          }

LABEL_121:
  uint64_t v36 = *(void *)(v5 + 240);
  if (!v36) {
    uint64_t v36 = *(void *)(qword_1019A0978 + 240);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21,  v36,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_130;
    }
    goto LABEL_127;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x31,  *(_DWORD *)(v5 + 316),  (int)a2,  a4);
  uint64_t v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x20000) == 0)
  {
LABEL_54:
    if ((v9 & 0x40000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_123;
  }

      *(void *)&v126[8] = 0xBFF0000000000000LL;
      *(_WORD *)&v126[16] = 0;
      *(_DWORD *)&v126[20] = 0;
      LODWORD(v127) = 0;
      *(double *)v126 = sub_100425654(a1);
      int v79 = *(int **)(a1 + 264);
      v80 = (int *)(a1 + 272);
      if (v79 != (int *)(a1 + 272))
      {
        v81 = a1 + 240;
        do
        {
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101838C20);
          }
          v82 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
          {
            int v83 = *(void *)v126;
            int v84 = sub_10000C6DC(v81, v79 + 8);
            int v87 = v84[1];
            int v85 = v84 + 1;
            unsigned int v86 = v87;
            else {
              int v88 = (uint64_t *)v86;
            }
            v89 = *((unsigned __int8 *)sub_10000C6DC(v81, v79 + 8) + 863);
            *(_DWORD *)buf = 134349570;
            *(void *)&buf[4] = v83;
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v88;
            *(_WORD *)&buf[22] = 1026;
            LODWORD(v129) = v89;
            _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEBUG,  "CLIENT:unregisterForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{public}d",  buf,  0x1Cu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101838C20);
            }
            int v93 = qword_101934838;
            int v94 = *(void *)v126;
            unsigned int v95 = sub_10000C6DC(v81, v79 + 8);
            v98 = v95[1];
            int v96 = v95 + 1;
            int v97 = v98;
            else {
              v99 = (uint64_t *)v97;
            }
            v100 = *((unsigned __int8 *)sub_10000C6DC(v81, v79 + 8) + 863);
            int v120 = 134349570;
            int v121 = v94;
            unsigned int v122 = 2082;
            int v123 = v99;
            int v124 = 1026;
            v125 = v100;
            LODWORD(v119) = 28;
            int v101 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v93,  2LL,  "CLIENT:unregisterForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{pub lic}s,active,%{public}d",  &v120,  v119);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n",  v101);
            if (v101 != buf) {
              free(v101);
            }
          }

          v90 = *((void *)v79 + 5);
          *(_DWORD *)buf = 0;
          sub_10047DC04(v90, (unsigned int *)buf, v126);
          v91 = (int *)*((void *)v79 + 1);
          if (v91)
          {
            do
            {
              int v92 = v91;
              v91 = *(int **)v91;
            }

            while (v91);
          }

          else
          {
            do
            {
              int v92 = (int *)*((void *)v79 + 2);
              _ZF = *(void *)v92 == (void)v79;
              int v79 = v92;
            }

            while (!_ZF);
          }

          int v79 = v92;
        }

        while (v92 != v80);
      }

      return 1LL;
    case 0xFu:
      if (*(_DWORD *)(a1 + 320))
      {
        *(_DWORD *)buf = 15;
        if (sub_100247620(a1, (int *)buf, 1LL))
        {
          __asm { FMOV            V0.2D, #-1.0 }

          *(_OWORD *)buf = _Q0;
          *(_WORD *)&buf[16] = 0;
          LODWORD(v129) = 0;
          *(_DWORD *)&buf[20] = sub_10047D7E8(a1, 15);
          *(void *)v126 = a1 + 320;
          int v51 = sub_10000C858((uint64_t **)(a1 + 264), (int *)(a1 + 320), (uint64_t)&unk_1012CF090, (_DWORD **)v126)[5];
          *(_DWORD *)v126 = 15;
          sub_10047DC04((uint64_t)v51, (unsigned int *)v126, buf);
        }

        else
        {
          *(void *)buf = a1 + 320;
          v62 = sub_10000C858((uint64_t **)(a1 + 264), (int *)(a1 + 320), (uint64_t)&unk_1012CF090, (_DWORD **)buf);
          [(id)v62[5][2] unregister:v62[5][1] forNotification:15];
        }
      }

      return 1LL;
    case 0x11u:
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      v54 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLMM,RunMapMatching is turned off", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101838C20);
        }
        *(_WORD *)v126 = 0;
        LODWORD(v119) = 2;
        unsigned int v113 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "CLMM,RunMapMatching is turned off",  v126,  v119);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n",  v113);
        if (v113 != buf) {
          free(v113);
        }
      }

      *(_BYTE *)(a1 + 660) = 0;
      (*(void (**)(void))(**(void **)(a1 + 288) + 144LL))(*(void *)(a1 + 288));
      (*(void (**)(void))(**(void **)(a1 + 288) + 152LL))(*(void *)(a1 + 288));
      return 1LL;
    case 0x16u:
      if (*(_DWORD *)(a1 + 312))
      {
        *(void *)buf = a1 + 312;
        uint64_t v29 = sub_10000C858((uint64_t **)(a1 + 264), (int *)(a1 + 312), (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        [(id)v29[5][2] unregister:v29[5][1] forNotification:22];
      }

      return 1LL;
    case 0x1Cu:
      uint64_t v30 = 0LL;
      uint64_t v31 = *(_DWORD *)(a1 + 336);
      int v120 = *(_DWORD *)(a1 + 324);
      LODWORD(v121) = v31;
      do
      {
        if (*(int *)((char *)&v120 + v30))
        {
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101838C20);
          }
          uint64_t v32 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v33 = *a2;
            uint64_t v34 = sub_10000C6DC(a1 + 240, (int *)((char *)&v120 + v30));
            uint64_t v37 = v34[1];
            uint64_t v35 = v34 + 1;
            uint64_t v36 = v37;
            *(_DWORD *)buf = 67240450;
            *(_DWORD *)&buf[4] = v33;
            *(_WORD *)&buf[8] = 2082;
            *(void *)&buf[10] = v36;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "unregistering notification,%{public}d,location provider,%{public}s",  buf,  0x12u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101838C20);
            }
            int v39 = qword_101934838;
            uint64_t v40 = *a2;
            uint64_t v41 = sub_10000C6DC(a1 + 240, (int *)((char *)&v120 + v30));
            v44 = v41[1];
            uint64_t v42 = v41 + 1;
            int v43 = v44;
            *(_DWORD *)v126 = 67240450;
            *(_DWORD *)&v126[4] = v40;
            *(_WORD *)&v126[8] = 2082;
            *(void *)&v126[10] = v43;
            LODWORD(v119) = 18;
            uint64_t v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v39,  2LL,  "unregistering notification,%{public}d,location provider,%{public}s",  v126,  v119);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)",  "%s\n",  v45);
            if (v45 != buf) {
              free(v45);
            }
          }

          uint64_t v38 = sub_10000C6DC(a1 + 264, (int *)((char *)&v120 + v30));
          [*(id *)(*v38 + 16) unregister:*(void *)(*v38 + 8) forNotification:28];
        }

        v30 += 4LL;
      }

      while (v30 != 8);
      if (*(_DWORD *)(a1 + 320))
      {
        int v60 = sub_10000C6DC(a1 + 264, (int *)(a1 + 320));
        [*(id *)(*v60 + 16) unregister:*(void *)(*v60 + 8) forNotification:28];
      }

      int v61 = *(void *)(a1 + 288);
      if (v61) {
        (*(void (**)(uint64_t, void))(*(void *)v61 + 248LL))(v61, 0LL);
      }
      return 1LL;
    case 0x1Du:
      if (*(_DWORD *)(a1 + 320))
      {
        int v58 = sub_10000C6DC(a1 + 264, (int *)(a1 + 320));
        [*(id *)(*v58 + 16) unregister:*(void *)(*v58 + 8) forNotification:29];
      }

      if (*(_DWORD *)(a1 + 328))
      {
        unsigned int v59 = sub_10000C6DC(a1 + 264, (int *)(a1 + 328));
        [*(id *)(*v59 + 16) unregister:*(void *)(*v59 + 8) forNotification:29];
      }

      (*(void (**)(void, void))(**(void **)(a1 + 288) + 240LL))(*(void *)(a1 + 288), 0LL);
      return 1LL;
    case 0x22u:
      if (*(_DWORD *)(a1 + 320))
      {
        int v52 = sub_10000C6DC(a1 + 264, (int *)(a1 + 320));
        [*(id *)(*v52 + 16) unregister:*(void *)(*v52 + 8) forNotification:34];
      }

      return 1LL;
    case 0x23u:
      if (*(_DWORD *)(a1 + 320))
      {
        uint64_t v53 = sub_10000C6DC(a1 + 264, (int *)(a1 + 320));
        [*(id *)(*v53 + 16) unregister:*(void *)(*v53 + 8) forNotification:35];
      }

      return 1LL;
    case 0x28u:
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      uint64_t v55 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:unregister kNotificationExternalLocationDisablementAssert}",  buf,  0x12u);
      }

      if (*(_DWORD *)(a1 + 328))
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101838C20);
        }
        int v56 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:unregistering kNotificationExternalLocationDisablementAssert w/ accessory provider}",  buf,  0x12u);
        }

        int v57 = sub_10000C6DC(a1 + 264, (int *)(a1 + 328));
        [*(id *)(*v57 + 16) unregister:*(void *)(*v57 + 8) forNotification:40];
      }

      return 1LL;
    default:
      return 1LL;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_startTime),  @"startTime");
  has = self->_has;
  if ((*(_DWORD *)&has & 0x40000) == 0)
  {
LABEL_99:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_126;
  }

  uint64_t v27 = &v150;
LABEL_122:
  uint64_t v42 = v27->__r_.__value_.__r.__words[0];
  int v43 = *(std::string::size_type *)((char *)v27->__r_.__value_.__r.__words + 6);
  if (v42 != 0x5365636976726553LL || v43 != 0x6E6F697373655365LL) {
    goto LABEL_126;
  }
LABEL_131:
  int v49 = *a3;
  unsigned int v50 = a3[1];
  v148[0] = v49;
  v148[1] = v50;
  if (v50)
  {
    int v51 = (unint64_t *)((char *)v50 + 8);
    do
      int v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }

  sub_1005406B8(a1, a2, v148, &v150);
  if (v50)
  {
    uint64_t v53 = (unint64_t *)((char *)v50 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
LABEL_137:
    if (!v54)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v50 + 16LL))(v50);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v50);
    }
  }

  uint64_t v36 = *(void *)(v5 + 240);
  if (!v36) {
    uint64_t v36 = *(void *)(qword_1019A11B8 + 240);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E,  v36,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 488);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_130;
    }
    goto LABEL_127;
  }

  int v101 = (char *)*a1;
}

  sub_1002F0B04(buf);
  v109 = (unsigned __int8 *)(a1 + 621);
  int v110 = sub_1002A6F64(*(uint64_t *)&buf[0], "FenceWiFiScanOnWake", (BOOL *)(a1 + 621));
  int v111 = v110;
  int v112 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_125;
  }
  unsigned int v113 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    int v114 = __ldaxr(v113);
  while (__stlxr(v114 - 1, v113));
  if (!v114)
  {
    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
    std::__shared_weak_count::__release_weak(v112);
    if (!v111) {
      goto LABEL_131;
    }
  }

  else
  {
LABEL_125:
    if (!v110) {
      goto LABEL_131;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  int v115 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    v116 = *v109;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v116;
    _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEFAULT,  "WIFI_LOC: Overriding fPerformScanOnWake = %{private}d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    v154 = *v109;
    v161 = 67174657;
    LODWORD(v162) = v154;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "WIFI_LOC: Overriding fPerformScanOnWake = %{private}d",  &v161,  v157);
    int v156 = (char *)v155;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)",  "%s\n",  v155);
  }

  *(_DWORD *)(a1 + 396) |= 0x80000u;
  int v43 = *(char **)(a1 + 152);
  if (!v43)
  {
    int v43 = (char *)operator new(0x18uLL);
    *(void *)int v43 = off_1018754B0;
    v43[8] = 1;
    *((void *)v43 + 2) = 0LL;
    *(_DWORD *)(v43 + 9) = 0;
    v43[13] = 0;
    *(void *)(a1 + 152) = v43;
  }

  v44 = *(_BYTE **)(a2 + 152);
  if (!v44) {
    v44 = *(_BYTE **)(qword_1019A1D38 + 152);
  }
  sub_100BB9754((uint64_t)v43, v44);
  uint64_t v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x100000) == 0)
  {
LABEL_102:
    if ((v7 & 0x200000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_131;
  }

  *(_BYTE *)(a2 + 1) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  int v39 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v40 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "alertCanceledBecauseOfAbsenceOfQuiessence";
    int v193 = 2048;
    unsigned int v194 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v123 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "alertCanceledBecauseOfAbsenceOfQuiessence";
    v189 = 2048;
    v190 = v123;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v125 = (uint8_t *)v124;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v124);
    if (v125 != buf) {
      free(v125);
    }
  }

  a4[7] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v10 & 0x20000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_133;
  }

  uint64_t result = *(float *)(a2 + 168);
  v5 |= 0x80000000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 168) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x2000000000LL) == 0)
  {
LABEL_56:
    if ((v7 & 0x40000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_123;
  }

  PB::TextFormatter::format(this, "lgArclengthZOverEpoch", *(float *)(a1 + 252));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x20000000000000LL) == 0)
  {
LABEL_55:
    if ((v6 & 0x40000000000000LL) == 0) {
      goto LABEL_56;
    }
    goto LABEL_123;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168), 0x33u);
  int v6 = *v4;
  if ((*v4 & 0x2000000000LL) == 0)
  {
LABEL_56:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_123;
  }

  uint64_t result = *(float *)(a2 + 24);
  v5 |= 8uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 24) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x800) == 0)
  {
LABEL_48:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_123;
  }

  PB::TextFormatter::format(this, "isCompanionConnected", *(_BYTE *)(a1 + 273));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x40) == 0)
  {
LABEL_47:
    if ((v7 & 0x80) == 0) {
      goto LABEL_48;
    }
    goto LABEL_123;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0x2Au);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_123;
  }

  uint64_t result = *(float *)(a2 + 128);
  v5 |= 0x20000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 128) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000000LL) == 0)
  {
LABEL_41:
    if ((v4 & 0x10) == 0) {
      goto LABEL_42;
    }
    goto LABEL_123;
  }

  PB::TextFormatter::format(this, "kRegimeDeltaVThreshold1ROWA", *(float *)(a1 + 124));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_123;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0xE7u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000LL) == 0)
  {
LABEL_41:
    if ((v5 & 0x10) == 0) {
      goto LABEL_42;
    }
    goto LABEL_123;
  }

  uint64_t v14 = *(_DWORD *)(a2 + 140);
  v5 |= 0x2000000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 140) = v14;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_16:
    if ((v7 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_123;
  }

  PB::TextFormatter::format(this, "highSensitivityBitmap", *(_DWORD *)(a1 + 112));
  uint64_t v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((v6 & 0x200) == 0)
  {
LABEL_20:
    if ((v6 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_123;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 140), 0xBu);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v6 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_123;
  }

  unsigned int v50 = *(_DWORD *)(a2 + 52);
  v3 |= 0x80uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 52) = v50;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x8000) == 0)
  {
LABEL_43:
    if ((v2 & 0x8000000000000000LL) == 0) {
      goto LABEL_44;
    }
    goto LABEL_123;
  }

  PB::TextFormatter::format(this, "kMaxChaosRO2", *(float *)(a1 + 56));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x200) == 0)
  {
LABEL_42:
    if ((v5 & 0x400) == 0) {
      goto LABEL_43;
    }
    goto LABEL_123;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 193), 0x3FBu);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x40000000000000LL) == 0)
  {
LABEL_43:
    if ((v4 & 0x400000000000000LL) == 0) {
      goto LABEL_44;
    }
    goto LABEL_123;
  }

            PB::Reader::recallMark(this, v113);
          }

          else
          {
            int v83 = *(char **)(a1 + 16);
            v82 = *(void *)(a1 + 24);
            if ((unint64_t)v83 >= v82)
            {
              int v96 = (char *)*v10;
              int v97 = (v83 - (_BYTE *)*v10) >> 2;
              v98 = v97 + 1;
              if ((unint64_t)(v97 + 1) >> 62) {
LABEL_182:
              }
                sub_100007008();
              v99 = v82 - (void)v96;
              if (v99 >> 1 > v98) {
                v98 = v99 >> 1;
              }
              else {
                v100 = v98;
              }
              if (v100)
              {
                int v101 = (char *)sub_10000956C(v112, v100);
                int v96 = *(char **)(a1 + 8);
                int v83 = *(char **)(a1 + 16);
              }

              else
              {
                int v101 = 0LL;
              }

              int v106 = &v101[4 * v97];
              *(_DWORD *)int v106 = 0;
              int v79 = v106 + 4;
              while (v83 != v96)
              {
                v107 = *((_DWORD *)v83 - 1);
                v83 -= 4;
                *((_DWORD *)v106 - 1) = v107;
                v106 -= 4;
              }

              *(void *)(a1 + 8) = v106;
              *(void *)(a1 + 16) = v79;
              *(void *)(a1 + 24) = &v101[4 * v100];
              if (v96) {
                operator delete(v96);
              }
            }

            else
            {
              *(_DWORD *)int v83 = 0;
              int v79 = v83 + 4;
            }

            *(void *)(a1 + 16) = v79;
LABEL_167:
            v108 = *((void *)this + 1);
            if (v108 <= 0xFFFFFFFFFFFFFFFBLL && v108 + 4 <= *((void *)this + 2))
            {
              *(v79 - 1) = *(_DWORD *)(*(void *)this + v108);
              int v76 = *((void *)this + 1) + 4LL;
LABEL_171:
              *((void *)this + 1) = v76;
            }

            else
            {
LABEL_169:
              *((_BYTE *)this + 24) = 1;
            }
          }

          *(_DWORD *)(a1 + 88) = v50;
          goto LABEL_138;
        case 5u:
          *(_WORD *)(a1 + 104) |= 0x100u;
          uint64_t v53 = *((void *)this + 1);
          v54 = *((void *)this + 2);
          uint64_t v55 = *(void *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5LL && v53 + 10 <= v54)
          {
            int v56 = 0;
            int v57 = 0;
            int v58 = 0LL;
            do
            {
              unsigned int v59 = v53 + 1;
              *((void *)this + 1) = v53 + 1;
              int v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_124;
              }
              v56 += 7;
              uint64_t v53 = v59;
              uint64_t v18 = v57++ > 8;
            }

            while (!v18);
LABEL_108:
            LODWORD(v58) = 0;
            goto LABEL_124;
          }

          int v76 = 0;
          unsigned int v77 = 0;
          int v58 = 0LL;
          if (v54 <= v53) {
            v54 = *((void *)this + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int v78 = v53 + 1;
              int v79 = *(_BYTE *)(v55 + v53);
              *((void *)this + 1) = v78;
              v58 |= (unint64_t)(v79 & 0x7F) << v76;
              if (v79 < 0)
              {
                v76 += 7;
                uint64_t v53 = v78;
                uint64_t v18 = v77++ > 8;
                if (v18) {
                  goto LABEL_108;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v58) = 0;
              }
            }

            break;
          }

    *(_BYTE *)(a1 + 209) = *(_BYTE *)(v61 + 41);
    else {
      unsigned int v68 = v1 + 96;
    }
    if (v8 != v2)
    {
      int v69 = v1 + 192;
      while (1)
      {
        int v70 = v69 + 96;
        if (v69 + 96 == v2) {
          break;
        }
        v71 = *(unsigned __int8 *)(v69 + 184);
        if (v71 >= *(unsigned __int8 *)(v69 + 88))
        {
          v71 = *(unsigned __int8 *)(v69 + 88);
          int v70 = v69;
        }

        v69 += 192LL;
        if (v69 == v2) {
          goto LABEL_135;
        }
      }
    }

LABEL_124:
  uint64_t v37 = *(void *)(v5 + 248);
  if (!v37) {
    uint64_t v37 = *(void *)(qword_1019A0978 + 248);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22,  v37,  a2,  a4);
  if ((*(_DWORD *)(v5 + 292) & 0x80000000) != 0)
  {
LABEL_127:
    uint64_t v38 = *(void *)(v5 + 256);
    if (!v38) {
      uint64_t v38 = *(void *)(qword_1019A0978 + 256);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23,  v38,  a2,  a4);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x34,  *(_DWORD *)(v5 + 344),  (int)a2,  a4);
  uint64_t v9 = *(_DWORD *)(v5 + 368);
  if ((v9 & 0x100000) == 0)
  {
LABEL_57:
    if ((v9 & 0x200000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_126;
  }

  uint64_t v37 = *(void *)(v5 + 248);
  if (!v37) {
    uint64_t v37 = *(void *)(qword_1019A11B8 + 248);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F,  v37,  a2,  a4);
  if ((*(_DWORD *)(v5 + 488) & 0x80000000) != 0)
  {
LABEL_127:
    uint64_t v38 = *(void *)(v5 + 256);
    if (!v38) {
      uint64_t v38 = *(void *)(qword_1019A11B8 + 256);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20,  v38,  a2,  a4);
  }

  sub_1002722AC((uint64_t)&v56);
  sub_1002A5590(v51);
LABEL_129:
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  sub_100527C80((uint64_t)v54, (void *)v54[1]);
}

        int v75 = v4;
        int v76 = sub_100552424(*(void *)(a1 + 16), (uint64_t)v4);
        if (objc_msgSend( objc_msgSend(v76, "arrayForKey:defaultValue:", @"PluginBundleIds", 0),  "containsObject:",  v149)) {
          *(void *)(a1 + 96) = v149;
        }
        *(_BYTE *)(a1 + 90) = [v76 BOOLForKey:@"IsAppClip" defaultValue:0];
        *(_BYTE *)(a1 + 74) = [v76 BOOLForKey:@"DefaultAccuracyReduced" defaultValue:0];
        *(_BYTE *)(a1 + 73) = [v76 BOOLForKey:@"AuthRequestsDisabled" defaultValue:0];
        unsigned int v77 = sub_100546D94(*(void *)(a1 + 16), (uint64_t)v4);
        *(_BYTE *)(a1 + 91) = v77;
        if (v29 && !*(_BYTE *)(a1 + 104))
        {
          if (*(void *)(a1 + 96))
          {
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10185AF60);
            }
            int v78 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543362;
              *(void *)&buf[4] = v4;
              _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "Client '%{public}@' is a plugin, auto-masquerading as its containing app",  buf,  0xCu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_10185AF60);
              }
              LODWORD(v174[0]) = 138543362;
              *(void *)((char *)v174 + 4) = v4;
              LODWORD(v145) = 12;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "Client '%{public}@' is a plugin, auto-masquerading as its containing app",  v174,  v145);
              v134 = (char *)v133;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::processRegistration(NSDictionary *)",  "%s\n",  v133);
              if (v134 != buf) {
                free(v134);
              }
            }
          }

          int v79 = -[CLClientKeyPath bundleId](v4, "bundleId");
          sub_1004F2598();
          v80 = *(void **)(a1 + 96);
          if (!v80) {
            goto LABEL_139;
          }
          sub_1010DDBC0(buf, (char *)[v80 UTF8String]);
          v81 = sub_100D96020((uint64_t **)buf);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          int v79 = *(NSString **)(a1 + 96);
          if (!v81)
          {
            uint64_t v30 = sub_100D95B88(*(void **)(a1 + 96));
            if (!v30)
            {
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_10185AF60);
              }
              int v97 = (os_log_s *)qword_101934978;
              if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 68289282;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(void *)&buf[20] = v75;
                _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#warning Could not find placeholder bundle for client, ClientKeyPath:%{pu blic, location:escape_only}@}",  buf,  0x1Cu);
              }

              uint64_t v30 = 0LL;
            }
          }

          else
          {
LABEL_139:
            v82 = (const __CFURL *)sub_100D95A64(v79);
            if (v82) {
              uint64_t v30 = CFBundleCreate(kCFAllocatorDefault, v82);
            }
          }
        }

        int v83 = objc_msgSend( objc_msgSend(a2, "objectForKeyedSubscript:", @"kCLConnectionMessageSubidentityKey"),  "stringByReplacingOccurrencesOfString:withString:",  @":",  @"-");
        if (v83)
        {
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185AF60);
          }
          int v84 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(void *)&buf[20] = v75;
            *(_WORD *)&buf[28] = 2114;
            *(void *)&buf[30] = v83;
            _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:registering website daemon client, ClientKeyPath:%{public, location:escape_on ly}@, website:%{public, location:escape_only}@}",  buf,  0x26u);
          }

          int v75 = -[CLClientKeyPath clientKeyPathWithReplacementSubIdentityId:subIdentityType:]( v75,  "clientKeyPathWithReplacementSubIdentityId:subIdentityType:",  v83,  119LL);
        }

        sub_10086D884(a1, v75);
        if (*(void *)(a1 + 48)) {
          int v85 = v29;
        }
        else {
          int v85 = 0;
        }
        *(void *)(a1 + 80) = 0LL;
        sub_100879798(a1);
        if (*(_BYTE *)(a1 + 104) && !v30)
        {
          if (v28)
          {
            *(void *)(a1 + 80) = 3LL;
          }

          else
          {
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_10185AF80);
            }
            int v92 = (os_log_s *)qword_101934988;
            if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
            {
              int v93 = *(void *)(a1 + 48);
              *(_DWORD *)buf = 138543362;
              *(void *)&buf[4] = v93;
              _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_FAULT,  "Could not access bundle for masquerading client %{public}@",  buf,  0xCu);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934980 != -1) {
                dispatch_once(&qword_101934980, &stru_10185AF80);
              }
              int v138 = *(void *)(a1 + 48);
              LODWORD(v174[0]) = 138543362;
              *(void *)((char *)v174 + 4) = v138;
              LODWORD(v145) = 12;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Could not access bundle for masquerading client %{public}@",  v174,  v145);
              unsigned int v140 = (char *)v139;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::processRegistration(NSDictionary *)",  "%s\n",  v139);
              if (v140 != buf) {
                free(v140);
              }
            }
          }

          int v94 = 0LL;
          v174[0] = 0LL;
          if (!v85)
          {
            unsigned int v95 = 0;
LABEL_218:
            sub_100879AE4(v152, v174);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10185AF60);
            }
            int v114 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
            {
              int v115 = *(void *)(v152 + 48);
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(void *)&buf[20] = v115;
              *(_WORD *)&buf[28] = 2050;
              *(void *)&buf[30] = v152;
              _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDaemonClient registered, ClientKeyPath:%{public, location:escape_only}@, tag:%{public}p}",  buf,  0x26u);
            }

            *(_BYTE *)(v152 + 72) = v95;
            sub_100878634(v152);
            sub_100583668(*(void *)(v152 + 16), *(void **)(v152 + 48), *(unsigned __int8 *)(v152 + 204));
            if (*(_BYTE *)(v152 + 72))
            {
              sub_100879BDC(v152, &v155);
              v116 = v156;
              if (v156)
              {
                p_shared_owners = (unint64_t *)&v156->__shared_owners_;
                do
                  v118 = __ldaxr(p_shared_owners);
                while (__stlxr(v118 - 1, p_shared_owners));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }

              sub_100879F14((void **)v152);
            }

            goto LABEL_232;
          }

  uint64_t v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes( 51LL,  *(void *)(v5 + 256),  a2);
    uint64_t v36 = *(_DWORD *)(v5 + 400);
    if ((v36 & 2) == 0)
    {
LABEL_126:
      if ((v36 & 4) == 0) {
        goto LABEL_127;
      }
      goto LABEL_138;
    }
  }

  else if ((v36 & 2) == 0)
  {
    goto LABEL_126;
  }

  uint64_t v37 = *(void *)(v5 + 264);
  if (!v37) {
    uint64_t v37 = *(void *)(qword_1019A1D38 + 264);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3C,  v37,  a2,  a4);
  uint64_t v36 = *(_DWORD *)(v5 + 400);
  if ((v36 & 4) == 0)
  {
LABEL_127:
    if ((v36 & 8) == 0) {
      goto LABEL_128;
    }
    goto LABEL_139;
  }

      if (v39 != buf) {
        free(v39);
      }
      goto LABEL_94;
    }

    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    uint64_t v29 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "#EED2Control,sendControlData,sending control data for native number",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      v71[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  0LL,  "#EED2Control,sendControlData,sending control data for native number",  v71,  2);
      int v61 = (uint8_t *)v60;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<C LEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)",  "%s\n",  v60);
      if (v61 != buf) {
        free(v61);
      }
    }

    uint64_t v30 = sub_100CC93C0(a1, (uint64_t *)__p, a4, a5, a6);
    uint64_t v31 = (uint64_t)v30;
    if (!v30 || (uint64_t v32 = -[NSMutableArray count](v30, "count")) == 0LL)
    {
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      uint64_t v37 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "#EED2Control,sendControlData,nativeNumber,nil or empty perPartnerDataArray,early return",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_94;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      v71[0] = 0;
      LODWORD(v69) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,sendControlData,nativeNumber,nil or empty perPartnerDataArray,early return",  v71,  v69);
      int v39 = (uint8_t *)v38;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<C LEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)",  "%s\n",  v38);
      goto LABEL_124;
    }

    uint64_t v33 = sub_100CC9A08(a9, a10, (uint64_t)v32, a2, (uint64_t *)__p, a3, v31, (uint64_t)v22, a7);
    uint64_t v34 = v33;
    if (!v33 || !-[NSMutableDictionary count](v33, "count"))
    {
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      uint64_t v41 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "#EED2Control,sendControlData,nil or empty nativeNumberDict,early return",  buf,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_94;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_10187D720);
      }
      v71[0] = 0;
      LODWORD(v69) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,sendControlData,nil or empty nativeNumberDict,early return",  v71,  v69);
      int v39 = (uint8_t *)v42;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<C LEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)",  "%s\n",  v42);
      goto LABEL_124;
    }

    sub_10001A504((uint64_t)v76, a8);
    HIDWORD(v70) = sub_100CC9E0C(a1, 0, (uint64_t)v34, (uint64_t)v76);
    uint64_t v35 = v77;
    if (v77 == v76)
    {
      uint64_t v36 = 4LL;
      uint64_t v35 = v76;
    }

    else
    {
      if (!v77)
      {
LABEL_56:

        goto LABEL_57;
      }

      uint64_t v36 = 5LL;
    }

    (*(void (**)(void))(*v35 + 8 * v36))();
    goto LABEL_56;
  }

  if (qword_101934890 != -1) {
    dispatch_once(&qword_101934890, &stru_10187D720);
  }
  uint64_t v26 = (os_log_s *)qword_101934898;
  if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "#EED2Control,sendControlData,one more more input parameters is nil,early return",  buf,  2u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_10187D720);
    }
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#EED2Control,sendControlData,one more more input parameters is nil,early return",  __p,  2);
    unsigned int v59 = (uint8_t *)v58;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLE EDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)",  "%s\n",  v58);
    if (v59 != buf) {
      free(v59);
    }
  }

  return 0LL;
}

          sub_100BDC7E0((uint64_t)v133, a1 + 1016);
          if (((*(uint64_t (**)(void, _WORD *, uint64_t, double))(*(void *)v137[0] + 88LL))( v137[0],  v133,  a1 + 912,  -15.0) & 1) != 0)
          {
            if (!sub_100D6BAC0(a1, &v138, v135, v136, v134)) {
              goto LABEL_145;
            }
            sub_1010DDBC0(__p, "Start");
            int v120 = a1 + 912;
            uint64_t v35 = sub_100F21150(a1 + 1128, (double *)(a1 + 608), (uint64_t *)__p, a2 + 1, a2 + 2, v135, v136);
            if (v132 < 0) {
              operator delete(__p[0]);
            }
            if (v35)
            {
              uint64_t v36 = sub_100D2DBDC( (double *)(a1 + 608),  *(double *)(a1 + 1048),  *(double *)(a1 + 1056),  v135,  v136,  *(double *)(a1 + 1200));
              sub_100BDC7E0((uint64_t)v128, a1 + 1016);
              if (v20 - *(double *)(a1 + 1224) < 18.0)
              {
                if (!*(_BYTE *)(a1 + 96)) {
                  goto LABEL_189;
                }
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_1018819B8);
                }
                uint64_t v37 = (os_log_s *)qword_1019348B8;
                if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "CLMM,no DOT,predicted point is too close to intersection",  buf,  2u);
                }

                if (!sub_1002921D0(115, 2)) {
                  goto LABEL_189;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_1018819B8);
                }
                *(_WORD *)int v139 = 0;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,no DOT,predicted point is too close to intersection",  v139,  2);
                int v39 = (char *)v38;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)",  "%s\n",  v38);
                goto LABEL_242;
              }

              if (((*(uint64_t (**)(void, void *, uint64_t))(*(void *)v137[0] + 88LL))( v137[0],  v128,  v120) & 1) != 0)
              {
                if (!sub_100D6BAC0(a1, &v138, v130[0], v130[1], v129))
                {
LABEL_189:
                  uint64_t v11 = 0LL;
LABEL_190:
                  sub_100BDC958((uint64_t)v128);
                  goto LABEL_146;
                }

                *(_OWORD *)(a2 + 3) = *(_OWORD *)v130;
                v44 = sub_100D51878( a1,  *(_DWORD *)(*(void *)(a1 + 1016) + 20LL),  *(unsigned __int8 *)(*(void *)(a1 + 1016) + 16LL));
                a2[8] = v44;
                if (!*(_BYTE *)(*(void *)(a1 + 1016) + 16LL))
                {
                  int v83 = *(_DWORD *)(a1 + 760);
                  if (v83)
                  {
                    int v84 = v44 * 0.5;
                    a2[8] = v84;
                    int v85 = v84 * 0.5;
                    unsigned int v86 = -(v84 * 0.5);
                    if (v83 == 1) {
                      int v87 = v86;
                    }
                    else {
                      int v87 = v85;
                    }
                    *(void *)int v139 = 0LL;
                    v123[0] = 0.0;
                    if (sub_100D2E0A8( (double *)(a1 + 608),  (double *)v139,  v123,  v130[0],  v130[1],  *(double *)(a1 + 1200),  v129,  v87))
                    {
                      int v88 = v123[0];
                      a2[3] = *(double *)v139;
                      a2[4] = v88;
                      v44 = a2[8];
                    }

                    else
                    {
                      if (qword_1019348B0 != -1) {
                        dispatch_once(&qword_1019348B0, &stru_1018819B8);
                      }
                      v90 = (os_log_s *)qword_1019348B8;
                      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_ERROR,  "CLMM,Unexpected calculateNewPosUsingAcrossTrack fail",  buf,  2u);
                      }

                      if (sub_1002921D0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1019348B0 != -1) {
                          dispatch_once(&qword_1019348B0, &stru_1018819B8);
                        }
                        v127 = 0;
                        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,Unexpected calculateNewPosUsingAcrossTrack fail",  &v127,  2);
                        v99 = (char *)v98;
                        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::Directi onOfTravelAssistance &)",  "%s\n",  v98);
                        if (v99 != buf) {
                          free(v99);
                        }
                      }

                      v44 = a2[8] + a2[8];
                      a2[8] = v44;
                    }
                  }
                }

                uint64_t v45 = fmax(v44, 15.0);
                if (v20 > v45 + 1.0)
                {
                  sub_100BDC7E0((uint64_t)v123, a1 + 1016);
                  else {
                    v46 = v20 - v45;
                  }
                  if (((*(uint64_t (**)(void, double *, uint64_t, double))(*(void *)v137[0] + 88LL))( v137[0],  v123,  v120,  v46) & 1) != 0)
                  {
                    if (!sub_100D6BAC0(a1, &v138, v125, v126, v124)) {
                      goto LABEL_212;
                    }
                    int v47 = fmin(v36, 15.0);
                    a2[5] = v47 + v46;
                    int v48 = v138;
                    if (v138 < 3.0) {
                      int v48 = 3.0;
                    }
                    a2[7] = v48;
                    sub_1010DDBC0(v121, "Predicted");
                    int v49 = sub_100F21150(a1 + 1128, (double *)(a1 + 608), (uint64_t *)v121, a2 + 3, a2 + 4, a2[3], a2[4]);
                    if (v122 < 0) {
                      operator delete(v121[0]);
                    }
                    if (v49)
                    {
                      a2[6] = v129;
                      *a2 = *(double *)(a1 + 1136) + 1.0;
                      __asm { FMOV            V1.2D, #1.0 }

                      v54 = vaddq_f64(*(float64x2_t *)(a1 + 1144), _Q1);
                      *(float64x2_t *)(a2 + 11) = v54;
                      LODWORD(v54.f64[0]) = *(_DWORD *)(v128[0] + 16LL);
                      uint64_t v55 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v54.f64[0]);
                      *(int16x4_t *)v55.i8 = vuzp2_s16( (int16x4_t)vext_s8(*(int8x8_t *)v55.i8, *(int8x8_t *)v55.i8, 2uLL),  *(int16x4_t *)v55.i8);
                      *((_DWORD *)a2 + 18) = vmovn_s16(v55).u32[0];
                      *((_BYTE *)a2 + 76) = *(_DWORD *)(a1 + 1248) == 0;
                      uint64_t v11 = 1LL;
                      *((_DWORD *)a2 + 20) = 1;
                      if (*(_BYTE *)(a1 + 96))
                      {
                        if (qword_1019348B0 != -1) {
                          dispatch_once(&qword_1019348B0, &stru_1018819B8);
                        }
                        int v56 = (os_log_s *)qword_1019348B8;
                        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                        {
                          int v57 = *((void *)a2 + 6);
                          int v58 = *((void *)a2 + 7);
                          unsigned int v59 = *((void *)a2 + 8);
                          int v60 = *a2;
                          int v61 = *((void *)a2 + 1);
                          uint64_t v63 = *((void *)a2 + 2);
                          v62 = *((void *)a2 + 3);
                          v64 = *((void *)a2 + 4);
                          int v65 = *((void *)a2 + 5);
                          int v66 = *(void *)(a1 + 1224);
                          int v67 = *((unsigned __int8 *)a2 + 73);
                          unsigned int v68 = *((unsigned __int8 *)a2 + 74);
                          int v69 = *((unsigned __int8 *)a2 + 72);
                          int v70 = *((unsigned __int8 *)a2 + 75);
                          v71 = *((unsigned __int8 *)a2 + 76);
                          uint64_t v72 = *((void *)a2 + 12);
                          v73 = *((_DWORD *)a2 + 20);
                          *(_DWORD *)buf = 134353665;
                          *(double *)&buf[4] = v60;
                          int v177 = 2049;
                          int v178 = v62;
                          v179 = 2049;
                          v180 = v64;
                          v181 = 2050;
                          int v182 = v57;
                          int v183 = 2050;
                          int v184 = v58;
                          unsigned int v185 = 2050;
                          int v186 = v59;
                          int v187 = 2049;
                          v188 = v61;
                          v189 = 2049;
                          v190 = v63;
                          int v191 = 2050;
                          int v192 = v65;
                          int v193 = 2050;
                          unsigned int v194 = v66;
                          int v195 = 1026;
                          int v196 = v67;
                          v197 = 1026;
                          v198 = v68;
                          v199 = 1026;
                          int v200 = v69;
                          int v201 = 1026;
                          int v202 = v70;
                          unsigned int v203 = 2050;
                          int v204 = v45;
                          int v205 = 1026;
                          v206 = v71;
                          v207 = 2050;
                          v208 = v72;
                          int v209 = 2050;
                          int v210 = v47;
                          int v211 = 1026;
                          unsigned int v212 = v73;
                          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEBUG,  "CLMM,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc, %{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{publ ic}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isB ridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContinuousTime, %{public}.3lf,lookBehindDistance,%{public}.2lf,type,%{public}d",  buf,  0xA8u);
                        }

                        if (sub_1002921D0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1019348B0 != -1) {
                            dispatch_once(&qword_1019348B0, &stru_1018819B8);
                          }
                          v100 = *((void *)a2 + 6);
                          int v101 = *((void *)a2 + 7);
                          int v102 = *((void *)a2 + 8);
                          int v103 = *a2;
                          unsigned int v104 = *((void *)a2 + 1);
                          int v106 = *((void *)a2 + 2);
                          int v105 = *((void *)a2 + 3);
                          v107 = *((void *)a2 + 4);
                          v108 = *((void *)a2 + 5);
                          v109 = *(void *)(a1 + 1224);
                          int v110 = *((unsigned __int8 *)a2 + 73);
                          int v111 = *((unsigned __int8 *)a2 + 74);
                          int v112 = *((unsigned __int8 *)a2 + 72);
                          unsigned int v113 = *((unsigned __int8 *)a2 + 75);
                          int v114 = *((unsigned __int8 *)a2 + 76);
                          int v115 = *((void *)a2 + 12);
                          v116 = *((_DWORD *)a2 + 20);
                          *(_DWORD *)int v139 = 134353665;
                          *(double *)&v139[4] = v103;
                          unsigned int v140 = 2049;
                          int v141 = v105;
                          int v142 = 2049;
                          v143 = v107;
                          v144 = 2050;
                          v145 = v100;
                          int v146 = 2050;
                          int v147 = v101;
                          int v148 = 2050;
                          unsigned int v149 = v102;
                          int v150 = 2049;
                          int v151 = v104;
                          v152 = 2049;
                          v153 = v106;
                          v154 = 2050;
                          int v155 = v108;
                          int v156 = 2050;
                          int v157 = v109;
                          unsigned int v158 = 1026;
                          int v159 = v110;
                          int v160 = 1026;
                          v161 = v111;
                          v162 = 1026;
                          v163 = v112;
                          int v164 = 1026;
                          int v165 = v113;
                          int v166 = 2050;
                          unsigned int v167 = v45;
                          int v168 = 1026;
                          int v169 = v114;
                          v170 = 2050;
                          v171 = v115;
                          v172 = 2050;
                          int v173 = v47;
                          int v174 = 1026;
                          int v175 = v116;
                          LODWORD(v119) = 168;
                          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc, %{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{publ ic}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isB ridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContinuousTime, %{public}.3lf,lookBehindDistance,%{public}.2lf,type,%{public}d",  v139,  v119);
                          v118 = (char *)v117;
                          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::Direc tionOfTravelAssistance &)",  "%s\n",  v117);
                          if (v118 != buf) {
                            free(v118);
                          }
                        }
                      }

                      *(_BYTE *)(a1 + 3720) = 1;
                      int v74 = *(_OWORD *)a2;
                      int v75 = *((_OWORD *)a2 + 2);
                      *(_OWORD *)(a1 + 3744) = *((_OWORD *)a2 + 1);
                      *(_OWORD *)(a1 + 3760) = v75;
                      *(_OWORD *)(a1 + 3728) = v74;
                      int v76 = *((_OWORD *)a2 + 3);
                      unsigned int v77 = *((_OWORD *)a2 + 4);
                      int v78 = *((_OWORD *)a2 + 5);
                      *(double *)(a1 + 3824) = a2[12];
                      *(_OWORD *)(a1 + 3792) = v77;
                      *(_OWORD *)(a1 + 3808) = v78;
                      *(_OWORD *)(a1 + 3776) = v76;
                      goto LABEL_213;
                    }

                    if (!*(_BYTE *)(a1 + 96)) {
                      goto LABEL_212;
                    }
                    if (qword_1019348B0 != -1) {
                      dispatch_once(&qword_1019348B0, &stru_1018819B8);
                    }
                    v91 = (os_log_s *)qword_1019348B8;
                    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEBUG,  "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates predicted returned false",  buf,  2u);
                    }

                    if (!sub_1002921D0(115, 2))
                    {
LABEL_212:
                      uint64_t v11 = 0LL;
LABEL_213:
                      sub_100BDC958((uint64_t)v123);
                      goto LABEL_190;
                    }

                    bzero(buf, 0x65CuLL);
                    if (qword_1019348B0 != -1) {
                      dispatch_once(&qword_1019348B0, &stru_1018819B8);
                    }
                    *(_WORD *)int v139 = 0;
                    LODWORD(v119) = 2;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates predicted returned false",  v139,  v119);
                    int v93 = (char *)v92;
                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOf TravelAssistance &)",  "%s\n",  v92);
                  }

                  else
                  {
                    if (!*(_BYTE *)(a1 + 96)) {
                      goto LABEL_212;
                    }
                    if (qword_1019348B0 != -1) {
                      dispatch_once(&qword_1019348B0, &stru_1018819B8);
                    }
                    v89 = (os_log_s *)qword_1019348B8;
                    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEBUG,  "CLMM,moveOnRoad returned false,DOT particle assistance",  buf,  2u);
                    }

                    if (!sub_1002921D0(115, 2)) {
                      goto LABEL_212;
                    }
                    bzero(buf, 0x65CuLL);
                    if (qword_1019348B0 != -1) {
                      dispatch_once(&qword_1019348B0, &stru_1018819B8);
                    }
                    *(_WORD *)int v139 = 0;
                    LODWORD(v119) = 2;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,moveOnRoad returned false,DOT particle assistance",  v139,  v119);
                    int v93 = (char *)v97;
                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOf TravelAssistance &)",  "%s\n",  v97);
                  }

                  if (v93 != buf) {
                    free(v93);
                  }
                  goto LABEL_212;
                }

                if (!*(_BYTE *)(a1 + 96)) {
                  goto LABEL_189;
                }
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_1018819B8);
                }
                v81 = (os_log_s *)qword_1019348B8;
                if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEBUG,  "CLMM,no DOT,current particle within the stopDistanceFromIntersection",  buf,  2u);
                }

                if (!sub_1002921D0(115, 2)) {
                  goto LABEL_189;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_1018819B8);
                }
                *(_WORD *)int v139 = 0;
                LODWORD(v119) = 2;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,no DOT,current particle within the stopDistanceFromIntersection",  v139,  v119);
                int v39 = (char *)v82;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)",  "%s\n",  v82);
              }

              else
              {
                if (!*(_BYTE *)(a1 + 96)) {
                  goto LABEL_189;
                }
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_1018819B8);
                }
                v80 = (os_log_s *)qword_1019348B8;
                if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEBUG,  "CLMM,moveOnRoad returned false,DOT particle assistance",  buf,  2u);
                }

                if (!sub_1002921D0(115, 2)) {
                  goto LABEL_189;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1019348B0 != -1) {
                  dispatch_once(&qword_1019348B0, &stru_1018819B8);
                }
                *(_WORD *)int v139 = 0;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,moveOnRoad returned false,DOT particle assistance",  v139,  2);
                int v39 = (char *)v96;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)",  "%s\n",  v96);
              }

  uint64_t result = *(float *)(a2 + 220);
  v5 |= 0x100000000000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 220) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_59:
    if ((v7 & 0x10) == 0) {
      goto LABEL_60;
    }
    goto LABEL_126;
  }

  PB::TextFormatter::format(this, "lgDeltaVXYUnconditional", *(float *)(a1 + 264));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x100000000000000LL) == 0)
  {
LABEL_58:
    if ((v6 & 0x200000000000000LL) == 0) {
      goto LABEL_59;
    }
    goto LABEL_126;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 220), 0x36u);
  int v6 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_59:
    if ((v6 & 0x10) == 0) {
      goto LABEL_60;
    }
    goto LABEL_126;
  }

  uint64_t result = *(float *)(a2 + 64);
  v5 |= 0x2000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 64) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_51:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_126;
  }

  PB::TextFormatter::format(this, "kFinalDecision", *(_BYTE *)(a1 + 276));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000000LL) == 0)
  {
LABEL_50:
    if ((v6 & 0x4000000000LL) == 0) {
      goto LABEL_51;
    }
    goto LABEL_126;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 0x2Du);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x800000000LL) == 0) {
      goto LABEL_51;
    }
    goto LABEL_126;
  }

  uint64_t result = *(float *)(a2 + 260);
  v5 |= 0x4000000000000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 260) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((v8 & 0x100) == 0)
  {
LABEL_44:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_126;
  }

  PB::TextFormatter::format(this, "kRegimeDeltaVThreshold2ROWA", *(float *)(a1 + 136));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x100000000LL) == 0)
  {
LABEL_43:
    if ((v6 & 0x200000000LL) == 0) {
      goto LABEL_44;
    }
    goto LABEL_126;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 260), 0xEAu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((v7 & 0x100) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_126;
  }

  uint64_t result = *(float *)(a2 + 312);
  v6 |= 0x10uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(float *)(a1 + 312) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x80000000000LL) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000000000LL) == 0) {
      goto LABEL_20;
    }
    goto LABEL_126;
  }

  PB::TextFormatter::format(this, "isDescalationDecided", *(_BYTE *)(a1 + 322));
  uint64_t v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((v6 & 0x1000) == 0)
  {
LABEL_23:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_126;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 312), 0xEu);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 0x80000000000LL) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000000000LL) == 0) {
      goto LABEL_20;
    }
    goto LABEL_126;
  }

  uint64_t v53 = *(_BYTE *)(a2 + 174);
  v3 |= 0x8000000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 174) = v53;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x80) == 0)
  {
LABEL_46:
    if ((v2 & 0x80000000000000LL) == 0) {
      goto LABEL_47;
    }
    goto LABEL_126;
  }

  PB::TextFormatter::format(this, "kMaxEnergyRO1", *(float *)(a1 + 68));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x1000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_126;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 189), 0x3FEu);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_46:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_126;
  }

          *(_DWORD *)(a1 + 96) = v58;
          goto LABEL_138;
        case 6u:
          *(_WORD *)(a1 + 104) |= 0x200u;
          int v61 = *((void *)this + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)this + 2)) {
            goto LABEL_134;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v61);
          goto LABEL_136;
        case 7u:
          *(_WORD *)(a1 + 104) |= 2u;
          v62 = *((void *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFF7LL || v62 + 8 > *((void *)this + 2)) {
            goto LABEL_134;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v62);
          goto LABEL_92;
        case 8u:
          *(_WORD *)(a1 + 104) |= 4u;
          uint64_t v63 = *((void *)this + 1);
          if (v63 > 0xFFFFFFFFFFFFFFF7LL || v63 + 8 > *((void *)this + 2)) {
            goto LABEL_134;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v63);
          goto LABEL_92;
        case 9u:
          *(_WORD *)(a1 + 104) |= 0x10u;
          v64 = *((void *)this + 1);
          if (v64 > 0xFFFFFFFFFFFFFFF7LL || v64 + 8 > *((void *)this + 2)) {
            goto LABEL_134;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v64);
          goto LABEL_92;
        case 0xAu:
          *(_WORD *)(a1 + 104) |= 0x20u;
          int v65 = *((void *)this + 1);
          if (v65 > 0xFFFFFFFFFFFFFFF7LL || v65 + 8 > *((void *)this + 2)) {
            goto LABEL_134;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v65);
          goto LABEL_92;
        case 0xBu:
          *(_WORD *)(a1 + 104) |= 1u;
          int v66 = *((void *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFF7LL || v66 + 8 > *((void *)this + 2)) {
            goto LABEL_134;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v66);
          goto LABEL_92;
        case 0xCu:
          *(_WORD *)(a1 + 104) |= 8u;
          int v67 = *((void *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFF7LL || v67 + 8 > *((void *)this + 2)) {
            goto LABEL_134;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v67);
LABEL_92:
          unsigned int v68 = *((void *)this + 1) + 8LL;
          goto LABEL_137;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_138;
      }
    }

    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v15 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      uint64_t v21 = v4 + 1;
      uint64_t v22 = *(_BYTE *)(v12 + v4);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      uint64_t v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        uint64_t v15 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

              *(void *)(a1 + 8) = v24;
              goto LABEL_115;
            case 2u:
              *(_DWORD *)(a1 + 116) |= 0x4000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 3u:
              *(_DWORD *)(a1 + 116) |= 0x8000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 4u:
              *(_DWORD *)(a1 + 116) |= 0x10000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 5u:
              *(_DWORD *)(a1 + 116) |= 0x200u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 6u:
              *(_DWORD *)(a1 + 116) |= 0x400u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 7u:
              *(_DWORD *)(a1 + 116) |= 0x800u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 8u:
              *(_DWORD *)(a1 + 116) |= 0x1000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 9u:
              *(_DWORD *)(a1 + 116) |= 0x2000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xAu:
              *(_DWORD *)(a1 + 116) |= 0x2000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xBu:
              *(_DWORD *)(a1 + 116) |= 0x40000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xCu:
              *(_DWORD *)(a1 + 116) |= 0x20000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xDu:
              *(_DWORD *)(a1 + 116) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xEu:
              *(_DWORD *)(a1 + 116) |= 8u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xFu:
              *(_DWORD *)(a1 + 116) |= 0x10u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x10u:
              *(_DWORD *)(a1 + 116) |= 0x20u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x11u:
              *(_DWORD *)(a1 + 116) |= 0x40u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x12u:
              *(_DWORD *)(a1 + 116) |= 0x80u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x13u:
              *(_DWORD *)(a1 + 116) |= 0x80000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x14u:
              *(_DWORD *)(a1 + 116) |= 0x100000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x15u:
              *(_DWORD *)(a1 + 116) |= 0x200000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x16u:
              *(_DWORD *)(a1 + 116) |= 0x400000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x17u:
              *(_DWORD *)(a1 + 116) |= 0x800000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x18u:
              *(_DWORD *)(a1 + 116) |= 0x1000000u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x19u:
              *(_DWORD *)(a1 + 116) |= 0x100u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x1Au:
              *(_DWORD *)(a1 + 116) |= 2u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_114:
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
LABEL_105:
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_115;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
LABEL_115:
              uint64_t v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

LABEL_130:
  int v39 = *(_DWORD *)(v5 + 296);
  if ((v39 & 1) != 0)
  {
    uint64_t v40 = *(void *)(v5 + 264);
    if (!v40) {
      uint64_t v40 = *(void *)(qword_1019A0978 + 264);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x24,  v40,  a2,  a4);
    int v39 = *(_DWORD *)(v5 + 296);
    if ((v39 & 2) == 0)
    {
LABEL_132:
      if ((v39 & 4) == 0) {
        return result;
      }
      goto LABEL_140;
    }
  }

  else if ((v39 & 2) == 0)
  {
    goto LABEL_132;
  }

  uint64_t v41 = *(void *)(v5 + 272);
  if (!v41) {
    uint64_t v41 = *(void *)(qword_1019A0978 + 272);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x25,  v41,  a2,  a4);
  if ((*(_DWORD *)(v5 + 296) & 4) != 0)
  {
LABEL_140:
    uint64_t v42 = *(void *)(v5 + 280);
    if (!v42) {
      uint64_t v42 = *(void *)(qword_1019A0978 + 280);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x26,  v42,  a2,  a4);
  }

  return result;
}

    uint64_t v55 = v72;
    uint64_t v72 = 0LL;
    if (v55) {
      operator delete[](v55);
    }
    goto LABEL_132;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CB88);
  }
  uint64_t v35 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 6);
    uint64_t v37 = (a4[1] - *a4) >> 4;
    *(void *)int v93 = 68289538LL;
    *(_WORD *)int v94 = 2082;
    *(void *)&v94[2] = "";
    unsigned int v95 = 2050;
    int v96 = v36;
    int v97 = 2050;
    *(void *)v98 = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:SimilarityListData, appendNewEvents, fingerprints size not equal labelUuids size!, Num Fingerprints:%{public}lu, Num Labels:%{public}lu}",  v93,  0x26u);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CB88);
    }
  }

  uint64_t v38 = (os_log_s *)qword_1019348D8;
  if (os_signpost_enabled((os_log_t)qword_1019348D8))
  {
    int v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 6);
    uint64_t v40 = (a4[1] - *a4) >> 4;
    *(void *)int v93 = 68289538LL;
    *(_WORD *)int v94 = 2082;
    *(void *)&v94[2] = "";
    unsigned int v95 = 2050;
    int v96 = v39;
    int v97 = 2050;
    *(void *)v98 = v40;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v38,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "SimilarityListData, appendNewEvents, fingerprints size not equal labelUuids size!",  "{msg%{public}.0s:SimilarityListData, appendNewEvents, fingerprints size not equal labelUuids size!, Num Fingerprints:%{public}lu, Num Labels:%{public}lu}",  v93,  0x26u);
  }

  int v57 = *(_DWORD *)(a2 + 312);
  if (v57 >= 3) {
    sub_10122FB1C();
  }
  *(_DWORD *)(a1 + 368) |= 0x4000u;
  *(_DWORD *)(a1 + 312) = v57;
  uint64_t v36 = *(_DWORD *)(a2 + 368);
  if ((v36 & 0x8000) != 0)
  {
LABEL_132:
    *(_DWORD *)(a1 + 368) |= 0x8000u;
    int v58 = *(void **)(a1 + 320);
    if (!v58)
    {
      int v58 = operator new(0x30uLL);
      void *v58 = off_101828120;
      v58[1] = 0LL;
      v58[2] = 0LL;
      v58[3] = 0LL;
      v58[4] = 0xFFFFFFFFLL;
      *((_DWORD *)v58 + 10) = 0;
      *(void *)(a1 + 320) = v58;
    }

    unsigned int v59 = *(void *)(a2 + 320);
    if (!v59) {
      unsigned int v59 = *(void *)(qword_1019A0BA0 + 320);
    }
    sub_1001D8D68((uint64_t)v58, v59);
    uint64_t v36 = *(_DWORD *)(a2 + 368);
  }

    int v49 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 132);
    if ((v49 & 0x80000000) != 0)
    {
      unsigned int v50 = 12;
    }

    else if (v49 >= 0x80)
    {
      unsigned int v50 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v49, a2) + 2;
      uint64_t v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      unsigned int v50 = 3;
    }

    uint64_t v5 = (v50 + v5);
    if ((v3 & 0x800000) == 0) {
      goto LABEL_142;
    }
    goto LABEL_136;
  }

  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 1) != 0)
  {
    uint64_t v40 = *(void *)(v5 + 264);
    if (!v40) {
      uint64_t v40 = *(void *)(qword_1019A11B8 + 264);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21,  v40,  a2,  a4);
    int v39 = *(_DWORD *)(v5 + 492);
    if ((v39 & 2) == 0)
    {
LABEL_132:
      if ((v39 & 4) == 0) {
        goto LABEL_133;
      }
      goto LABEL_165;
    }
  }

  else if ((v39 & 2) == 0)
  {
    goto LABEL_132;
  }

  uint64_t v41 = *(void *)(v5 + 272);
  if (!v41) {
    uint64_t v41 = *(void *)(qword_1019A11B8 + 272);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22,  v41,  a2,  a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 4) == 0)
  {
LABEL_133:
    if ((v39 & 8) == 0) {
      goto LABEL_134;
    }
    goto LABEL_168;
  }

  uint64_t result = *(float *)(a2 + 116);
  v5 |= 0x40000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 116) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x80000000000000LL) == 0)
  {
LABEL_65:
    if ((v7 & 0x1000000000LL) == 0) {
      goto LABEL_66;
    }
    goto LABEL_132;
  }

  PB::TextFormatter::format(this, "lgDeltaVZUnconditional", *(float *)(a1 + 288));
  int v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x4000000000000000LL) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000000LL) == 0) {
      goto LABEL_65;
    }
    goto LABEL_132;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x3Cu);
  int v6 = *v4;
  if ((*v4 & 0x80000000000000LL) == 0)
  {
LABEL_65:
    if ((v6 & 0x1000000000LL) == 0) {
      goto LABEL_66;
    }
    goto LABEL_132;
  }

  uint64_t result = *(float *)(a2 + 116);
  v5 |= 0x4000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 116) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_57:
    if ((v4 & 0x1000000000LL) == 0) {
      goto LABEL_58;
    }
    goto LABEL_132;
  }

  PB::TextFormatter::format(this, "lowSenseWithAudioDeltaVThreshold3", *(float *)(a1 + 176));
  int v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000000000LL) == 0)
  {
LABEL_56:
    if ((v6 & 0x80000000000LL) == 0) {
      goto LABEL_57;
    }
    goto LABEL_132;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156), 0x33u);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000LL) == 0)
  {
LABEL_56:
    if ((v6 & 0x20) == 0) {
      goto LABEL_57;
    }
    goto LABEL_132;
  }

  uint64_t result = *(float *)(a2 + 40);
  v5 |= 0x80uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 40) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_50:
    if ((v4 & 0x200) == 0) {
      goto LABEL_51;
    }
    goto LABEL_132;
  }

  PB::TextFormatter::format(this, "kRegimeNormThresholdROWOASB", *(float *)(a1 + 160));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x4000000000LL) == 0)
  {
LABEL_49:
    if ((v6 & 0x8000000000LL) == 0) {
      goto LABEL_50;
    }
    goto LABEL_132;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0xF0u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_50:
    if ((v5 & 0x200) == 0) {
      goto LABEL_51;
    }
    goto LABEL_132;
  }

  uint64_t v19 = *(void *)(a2 + 64);
  v5 |= 0x80uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(void *)(a1 + 64) = v19;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 1) == 0)
  {
LABEL_25:
    if ((v7 & 0x4000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_132;
  }

  PB::TextFormatter::format(this, "isLowSensCrashDetected", *(_BYTE *)(a1 + 328));
  uint64_t v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((v6 & 0x40000) == 0)
  {
LABEL_29:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_132;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 64), 0x65u);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 1) == 0)
  {
LABEL_25:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_132;
  }

  int v61 = *(_DWORD *)(a2 + 136);
  v3 |= 0x10000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 136) = v61;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_52:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_132;
  }

  PB::TextFormatter::format(this, "kPassThruRO", *(_BYTE *)(a1 + 188));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 4) == 0)
  {
LABEL_51:
    if ((v6 & 8) == 0) {
      goto LABEL_52;
    }
    goto LABEL_132;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 170), 0x454u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x800000000LL) == 0)
  {
LABEL_52:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_132;
  }

          if (!PB::Reader::placeMark(this, v194, v96, v97)
            || ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v95 + 16LL))(v95, this) & 1) == 0)
          {
            return 0LL;
          }

          goto LABEL_175;
        case 9u:
          *(_WORD *)(a1 + 168) |= 0x10u;
          v100 = *((void *)this + 1);
          int v101 = *((void *)this + 2);
          int v102 = *(void *)this;
          if (v100 <= 0xFFFFFFFFFFFFFFF5LL && v100 + 10 <= v101)
          {
            int v103 = 0;
            unsigned int v104 = 0;
            int v105 = 0LL;
            do
            {
              int v106 = v100 + 1;
              *((void *)this + 1) = v100 + 1;
              v107 = *(_BYTE *)(v102 + v100);
              v105 |= (unint64_t)(v107 & 0x7F) << v103;
              if ((v107 & 0x80) == 0) {
                goto LABEL_258;
              }
              v103 += 7;
              v100 = v106;
              uint64_t v21 = v104++ > 8;
            }

            while (!v21);
LABEL_204:
            LODWORD(v105) = 0;
            goto LABEL_258;
          }

          int v146 = 0;
          int v147 = 0;
          int v105 = 0LL;
          if (v101 <= v100) {
            int v101 = *((void *)this + 1);
          }
          while (2)
          {
            if (v101 == v100)
            {
              LODWORD(v105) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int v148 = v100 + 1;
              unsigned int v149 = *(_BYTE *)(v102 + v100);
              *((void *)this + 1) = v148;
              v105 |= (unint64_t)(v149 & 0x7F) << v146;
              if (v149 < 0)
              {
                v146 += 7;
                v100 = v148;
                uint64_t v21 = v147++ > 8;
                if (v21) {
                  goto LABEL_204;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v105) = 0;
              }
            }

            break;
          }

uint64_t sub_100084AFC(uint64_t a1, unint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_61;
  }

  if ((v3 & 1) == 0)
  {
    uint64_t v4 = 0LL;
    if ((v3 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }

  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_1019A0978 + 8);
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100071D78(v5, a2);
  int v7 = (int)v6;
  else {
    int v8 = 1;
  }
  uint64_t v4 = (v7 + v8 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A0978 + 16);
    }
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007316C(v9, a2);
    int v11 = (int)v10;
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
  }

LABEL_89:
  uint64_t v49 = *(void *)(a1 + 96);
  if (!v49) {
    uint64_t v49 = *(void *)(qword_1019A0978 + 96);
  }
  unsigned int v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100079128(v49, a2);
  int v51 = (int)v50;
  else {
    int v52 = 1;
  }
  uint64_t v4 = (v4 + v51 + v52 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x1000) == 0)
  {
LABEL_67:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_101;
  }

  uint64_t result = *(double *)(a2 + 96);
  *(_DWORD *)(a1 + 292) |= 0x1000u;
  *(double *)(a1 + 96) = result;
  v54 = *(_DWORD *)(a2 + 292);
  if ((v54 & 0x2000) != 0)
  {
LABEL_77:
    uint64_t result = *(double *)(a2 + 104);
    *(_DWORD *)(a1 + 292) |= 0x2000u;
    *(double *)(a1 + 104) = result;
    v54 = *(_DWORD *)(a2 + 292);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16,  *(_DWORD *)(v5 + 116),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_91;
  }

    sub_100007008();
  }

  *(_OWORD *)uint64_t v97 = *v36;
  uint64_t v38 = v37 + 16;
LABEL_36:
  uint64_t v97 = v38;
LABEL_37:
  *((double *)a4 + 2) = sub_1005E5850(a5, a1, a2);
  a4[3] = v48;
  a4[4] = v49;
  a4[5] = v50;
  sub_1005E54FC(a1, v11);
  *((double *)a4 + 56) = sub_100AFA190(a5, a1 + 3, a2, a3);
  a4[57] = v51;
  a4[58] = v52;
  a4[59] = v53;
  sub_100AF9C00(a1 + 3, (float64x2_t *)a4 + 28, a2, a3, (uint64_t)buf, a5);
  v54 = *(_OWORD *)&buf[16];
  *(_OWORD *)uint64_t v14 = *(_OWORD *)buf;
  *((_OWORD *)v14 + 1) = v54;
  *((_OWORD *)v14 + 2) = v108;
  *((_DWORD *)v14 + 12) = v109;
  if (!*((_DWORD *)a4 + 110))
  {
    int v55 = a4 + 53;
    int v56 = v97;
    if ((unint64_t)v97 >= v98)
    {
      int v58 = (v97 - (_BYTE *)__p) >> 4;
      int v59 = v58 + 1;
      int v60 = v98 - (void)__p;
      else {
        uint64_t v61 = v59;
      }
      if (v61) {
        v62 = (char *)sub_100037038((uint64_t)&v98, v61);
      }
      else {
        v62 = 0LL;
      }
      int v63 = &v62[16 * v58];
      int v64 = &v62[16 * v61];
      *(_OWORD *)int v63 = *v55;
      uint64_t v57 = v63 + 16;
      int v66 = (char *)__p;
      uint64_t v65 = v97;
      if (v97 != __p)
      {
        do
        {
          *((_OWORD *)v63 - 1) = *((_OWORD *)v65 - 1);
          v63 -= 16;
          v65 -= 16;
        }

        while (v65 != v66);
        uint64_t v65 = (char *)__p;
      }

      __p = v63;
      uint64_t v97 = v57;
      v98 = (unint64_t)v64;
      if (v65) {
        operator delete(v65);
      }
    }

    else
    {
      *(_OWORD *)uint64_t v97 = *v55;
      uint64_t v57 = v56 + 16;
    }

    uint64_t v97 = v57;
  }

  sub_1004CBD04(a2, (uint64_t)buf, a5);
  int v67 = v119;
  *(_OWORD *)(a4 + 91) = v118;
  *(_OWORD *)(a4 + 93) = v67;
  *(_OWORD *)(a4 + 95) = v120;
  int v68 = v115;
  *(_OWORD *)(a4 + 83) = v114;
  *(_OWORD *)(a4 + 85) = v68;
  uint64_t v69 = v117;
  *(_OWORD *)(a4 + 87) = v116;
  *(_OWORD *)(a4 + 89) = v69;
  int v70 = v111;
  *(_OWORD *)(a4 + 75) = v110;
  *(_OWORD *)(a4 + 77) = v70;
  int v71 = v113;
  *(_OWORD *)(a4 + 79) = v112;
  *(_OWORD *)(a4 + 81) = v71;
  int v72 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a4 + 67) = *(_OWORD *)buf;
  *(_OWORD *)(a4 + 69) = v72;
  uint64_t v73 = v109;
  *(_OWORD *)(a4 + 71) = v108;
  *(_OWORD *)(a4 + 73) = v73;
  sub_1004CB29C(a1 + 4, (float64x2_t *)(a4 + 67), a2, a3, (uint64_t)buf, a5);
  int v75 = *(_OWORD *)&buf[16];
  *((_OWORD *)a4 + 30) = *(_OWORD *)buf;
  *((_OWORD *)a4 + 31) = v75;
  *((_OWORD *)a4 + 32) = v108;
  *((_DWORD *)a4 + 132) = v109;
  if (!*((_DWORD *)a4 + 132))
  {
    int v76 = a4 + 64;
    uint64_t v77 = v97;
    if ((unint64_t)v97 < v98)
    {
      *(_OWORD *)uint64_t v97 = *v76;
      int v78 = v77 + 16;
LABEL_72:
      uint64_t v97 = v78;
      goto LABEL_73;
    }

    int v79 = (v97 - (_BYTE *)__p) >> 4;
    int v80 = v79 + 1;
    if (!((unint64_t)(v79 + 1) >> 60))
    {
      uint64_t v81 = v98 - (void)__p;
      else {
        v82 = v80;
      }
      if (v82) {
        int v83 = (char *)sub_100037038((uint64_t)&v98, v82);
      }
      else {
        int v83 = 0LL;
      }
      int v84 = &v83[16 * v79];
      uint64_t v85 = &v83[16 * v82];
      *(_OWORD *)int v84 = *v76;
      int v78 = v84 + 16;
      unsigned int v86 = (char *)__p;
      int v74 = v97;
      if (v97 != __p)
      {
        do
        {
          *((_OWORD *)v84 - 1) = *((_OWORD *)v74 - 1);
          v84 -= 16;
          v74 -= 16;
        }

        while (v74 != v86);
        int v74 = (char *)__p;
      }

      __p = v84;
      uint64_t v97 = v78;
      v98 = (unint64_t)v85;
      if (v74) {
        operator delete(v74);
      }
      goto LABEL_72;
    }

  uint64_t v49 = *(void *)(a1 + 96);
  if (!v49) {
    uint64_t v49 = *(void *)(qword_1019A11B8 + 96);
  }
  unsigned int v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001F0320(v49, a2);
  int v51 = (int)v50;
  else {
    int v52 = 1;
  }
  uint64_t v4 = (v4 + v51 + v52 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x1000) == 0)
  {
LABEL_67:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_101;
  }

  --*(_DWORD *)(a1 + 88);
  return v23;
}

    *(_BYTE *)(a3 + 20) = 1;
  }

  return result;
}

  if (v35 <= 0.00000001)
  {
    if (v41 > 0.00000001) {
      goto LABEL_131;
    }
    int v68 = *a2;
    uint64_t v101 = a2[1];
    v102[0] = v68;
    sub_100843CD4(v102, &v101, 1);
    uint64_t v69 = v101;
    int v70 = v102[0];
    int v71 = *a3;
    uint64_t v101 = a3[1];
    v102[0] = v71;
    sub_100843CD4(v102, &v101, 1);
    if (v70 != v102[0])
    {
      if ((*(void *)&v70 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_131;
      }

      int v72 = vabdd_f64(v70, v102[0]);
      uint64_t v73 = fabs(v70);
      int v74 = fabs(v102[0]);
      if (v73 >= v74) {
        int v74 = v73;
      }
      int v75 = v74 >= 1.0 ? v74 * 2.22044605e-16 : 2.22044605e-16;
      if (v72 > v75) {
        goto LABEL_131;
      }
    }

    if (v69 == v101) {
      goto LABEL_93;
    }
    if ((*(void *)&v69 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_131;
    }

    int v76 = vabdd_f64(v69, v101);
    uint64_t v77 = fabs(v69);
    int v78 = fabs(v101);
    if (v77 >= v78) {
      int v78 = v77;
    }
    int v79 = v78 >= 1.0 ? v78 * 2.22044605e-16 : 2.22044605e-16;
    if (v76 <= v79)
    {
LABEL_93:
      *a16 = *a13;
      *a17 = 0.0;
    }

    else
    {
LABEL_131:
      if (v42 > 0.00000001) {
        goto LABEL_132;
      }
      int v80 = *a2;
      uint64_t v101 = a2[1];
      v102[0] = v80;
      sub_100843CD4(v102, &v101, 1);
      uint64_t v81 = v101;
      v82 = v102[0];
      int v83 = *a4;
      uint64_t v101 = a4[1];
      v102[0] = v83;
      sub_100843CD4(v102, &v101, 1);
      if (v82 != v102[0])
      {
        if ((*(void *)&v82 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v102[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_132;
        }

        int v84 = vabdd_f64(v82, v102[0]);
        uint64_t v85 = fabs(v82);
        unsigned int v86 = fabs(v102[0]);
        if (v85 >= v86) {
          unsigned int v86 = v85;
        }
        int v87 = v86 >= 1.0 ? v86 * 2.22044605e-16 : 2.22044605e-16;
        if (v84 > v87) {
          goto LABEL_132;
        }
      }

      if (v81 != v101)
      {
        if ((*(void *)&v81 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v101 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_132;
        }

        int v88 = vabdd_f64(v81, v101);
        uint64_t v89 = fabs(v81);
        v90 = fabs(v101);
        if (v89 >= v90) {
          v90 = v89;
        }
        int v91 = v90 >= 1.0 ? v90 * 2.22044605e-16 : 2.22044605e-16;
        if (v88 > v91) {
          goto LABEL_132;
        }
      }

      *a16 = *a13;
      *a17 = *a14;
    }

      int v40 = v8[8];
      v46 = v40 + 1;
      if (v40 <= -2)
      {
        do
        {
          uint64_t result = sub_10085FD88(v5);
          uint64_t v41 = v46++;
        }

        while (v41 < -1);
      }
    }

    else
    {
      int v8 = v4;
      while (1)
      {
        uint64_t v4 = v7;
        if (v8[7] == v8[32])
        {
          uint64_t v9 = v8[8];
          uint64_t v10 = v8[33];
          if (v9 != v10)
          {
            int v11 = *(_DWORD *)(v5 + 40);
            if ((~v11 & 6) != 0)
            {
              LOBYTE(v12) = 0;
              uint64_t v13 = 0;
              uint64_t v14 = v8;
              do
              {
                while (1)
                {
                  int v15 = *((_DWORD *)v14 + 10);
                  if (v15 != 2) {
                    break;
                  }
                  if (*((_DWORD *)v14 + 30) != 2) {
                    goto LABEL_61;
                  }
                  uint64_t v13 = 1;
                  int v16 = v14 == v8;
                  v14 += 25;
                  if (v16) {
                    goto LABEL_21;
                  }
                }

                if (v15 != 1) {
                  goto LABEL_61;
                }
                int v12 = *((_DWORD *)v14 + 30);
                if (v12 != 1) {
                  goto LABEL_61;
                }
                int v16 = v14 == v8;
                v14 += 25;
              }

              while (!v16);
              if ((v13 & 1) == 0) {
                goto LABEL_26;
              }
              LOBYTE(v12) = 1;
LABEL_21:
              uint64_t v17 = *(unsigned __int8 **)(v5 + 24);
              if (*v17 - 58 <= 0xFFFFFFF7)
              {
                _BYTE *v17 = 50;
                int v11 = *(_DWORD *)(v5 + 40);
                uint64_t v17 = *(unsigned __int8 **)(v5 + 24);
              }

              uint64_t v18 = v11 | 1;
              *(_DWORD *)(v5 + 40) = v18;
              if (v17[3] - 58 <= 0xFFFFFFF6)
              {
                v17[3] = 49;
                uint64_t v18 = *(_DWORD *)(v5 + 40);
              }

              int v11 = v18 | 4;
              if ((v12 & 1) != 0) {
LABEL_26:
              }
                v11 |= 2u;
              *(_DWORD *)(v5 + 40) = v11;
              int v19 = v11 == 7 || *(_BYTE *)(*(void *)(v5 + 24) + 9LL) != 0;
              *(_BYTE *)(v5 + 16) = v19;
              uint64_t v9 = v8[8];
              uint64_t v10 = v8[33];
            }

      int v40 = v8[18];
      v46 = v40 + 1;
      if (v40 <= -2)
      {
        do
        {
          uint64_t result = sub_100863F30(v5);
          uint64_t v41 = v46++;
        }

        while (v41 < -1);
      }
    }

    else
    {
      int v8 = v4;
      while (1)
      {
        uint64_t v4 = v7;
        if (v8[17] == v8[42])
        {
          uint64_t v9 = v8[18];
          uint64_t v10 = v8[43];
          if (v9 != v10)
          {
            int v11 = *(_DWORD *)(v5 + 40);
            if ((~v11 & 6) != 0)
            {
              LOBYTE(v12) = 0;
              uint64_t v13 = 0;
              uint64_t v14 = v8;
              do
              {
                while (1)
                {
                  int v15 = *((_DWORD *)v14 + 10);
                  if (v15 != 2) {
                    break;
                  }
                  if (*((_DWORD *)v14 + 30) != 2) {
                    goto LABEL_61;
                  }
                  uint64_t v13 = 1;
                  int v16 = v14 == v8;
                  v14 += 25;
                  if (v16) {
                    goto LABEL_21;
                  }
                }

                if (v15 != 1) {
                  goto LABEL_61;
                }
                int v12 = *((_DWORD *)v14 + 30);
                if (v12 != 1) {
                  goto LABEL_61;
                }
                int v16 = v14 == v8;
                v14 += 25;
              }

              while (!v16);
              if ((v13 & 1) == 0) {
                goto LABEL_26;
              }
              LOBYTE(v12) = 1;
LABEL_21:
              uint64_t v17 = *(unsigned __int8 **)(v5 + 24);
              if (*v17 - 58 <= 0xFFFFFFF7)
              {
                _BYTE *v17 = 50;
                int v11 = *(_DWORD *)(v5 + 40);
                uint64_t v17 = *(unsigned __int8 **)(v5 + 24);
              }

              uint64_t v18 = v11 | 1;
              *(_DWORD *)(v5 + 40) = v18;
              if (v17[1] - 58 <= 0xFFFFFFF6)
              {
                v17[1] = 49;
                uint64_t v18 = *(_DWORD *)(v5 + 40);
              }

              int v11 = v18 | 4;
              if ((v12 & 1) != 0) {
LABEL_26:
              }
                v11 |= 2u;
              *(_DWORD *)(v5 + 40) = v11;
              int v19 = v11 == 7 || *(_BYTE *)(*(void *)(v5 + 24) + 9LL) != 0;
              *(_BYTE *)(v5 + 16) = v19;
              uint64_t v9 = v8[18];
              uint64_t v10 = v8[43];
            }

  *(void *)buf = v6;
  int v76 = sub_100ABF1B8((uint64_t **)(a1 + 192), v6, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
  uint64_t v77 = v76[5];
  int v78 = (uint64_t *)operator new(0x18uLL);
  *int v78 = (uint64_t)v77;
  v78[1] = v43;
  int v79 = v277;
  v78[2] = v277;
  if (v79)
  {
    int v80 = (unint64_t *)(v79 + 8);
    do
      uint64_t v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }

  v76[5] = v78;
  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  v82 = (os_log_s *)qword_101934968;
  if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEFAULT))
  {
    int v84 = *(void *)(v43 + 8);
    int v83 = *(void *)(v43 + 16);
    uint64_t v85 = *(_DWORD *)(v43 + 128);
    unsigned int v86 = sub_100832C40(v85);
    int v87 = *(void *)(v43 + 24);
    int v88 = *(void *)(v43 + 32);
    v90 = *(void *)(v43 + 40);
    uint64_t v89 = *(void *)(v43 + 48);
    int v91 = *(void *)(v43 + 56);
    int v92 = *(void *)(v43 + 80);
    uint64_t v93 = *(void *)(v43 + 88);
    int v94 = *(void *)(v43 + 96);
    int v95 = *(void *)(v43 + 104);
    int v96 = *(_DWORD *)(v43 + 120);
    uint64_t v97 = *(void *)(v43 + 112);
    v98 = *(unsigned __int8 *)(v43 + 124);
    *(_DWORD *)buf = 134352899;
    *(void *)&buf[4] = v84;
    *(_WORD *)&buf[12] = 2050;
    *(void *)&buf[14] = v83;
    v331 = 1026;
    v332 = v85;
    v333 = 2082;
    v334 = v86;
    v335 = 2049;
    v336 = v87;
    v337 = 2049;
    v338 = v88;
    v339 = 2049;
    v340 = v89;
    v341 = 2049;
    v342 = v92;
    v343 = 2049;
    v344 = v94;
    v345 = 2050;
    v346 = v90;
    v347 = 2050;
    v348 = v91;
    v349 = 2050;
    v350 = v93;
    v351 = 2050;
    v352 = v95;
    v353 = 1026;
    *(_DWORD *)v354 = v96;
    *(_WORD *)&v354[4] = 2050;
    *(void *)&v354[6] = v97;
    *(_WORD *)&v354[14] = 1026;
    *(_DWORD *)&v354[16] = v98;
    _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "#fusion inputLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{priva te}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d",  buf,  0x96u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v147 = qword_101934968;
    int v148 = (uint64_t)v276;
    int v150 = v276->__shared_owners_;
    unsigned int v149 = (const char *)v276->__shared_weak_owners_;
    int v151 = v276[5].__shared_owners_;
    v152 = sub_100832C40(v151);
    v153 = *(void *)(v148 + 24);
    v154 = *(void *)(v148 + 32);
    int v156 = *(void *)(v148 + 40);
    int v155 = *(void *)(v148 + 48);
    int v157 = *(void *)(v148 + 56);
    unsigned int v158 = *(void *)(v148 + 80);
    int v159 = *(void *)(v148 + 88);
    int v160 = *(void *)(v148 + 96);
    v161 = *(void *)(v148 + 104);
    v162 = *(_DWORD *)(v148 + 120);
    v163 = *(void *)(v148 + 112);
    int v164 = *(unsigned __int8 *)(v148 + 124);
    int v286 = 134352899;
    v287 = v150;
    v288 = 2050;
    v289 = v149;
    int v290 = 1026;
    int v291 = v151;
    int v292 = 2082;
    unsigned int v293 = v152;
    int v294 = 2049;
    int v295 = v153;
    v296 = 2049;
    v297 = v154;
    v298 = 2049;
    int v299 = v155;
    int v300 = 2049;
    int v301 = v158;
    unsigned int v302 = 2049;
    int v303 = v160;
    int v304 = 2050;
    v305 = v156;
    v306 = 2050;
    v307 = v157;
    int v308 = 2050;
    int v309 = v159;
    int v310 = 2050;
    unsigned int v311 = v161;
    int v312 = 1026;
    *(_DWORD *)int v313 = v162;
    *(_WORD *)&v313[4] = 2050;
    *(void *)&v313[6] = v163;
    *(_WORD *)&v313[14] = 1026;
    *(_DWORD *)&v313[16] = v164;
    LODWORD(v201) = 150;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v147,  0LL,  "#fusion inputLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f,%{priva te}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{public}d",  &v286,  v201);
    int v166 = (char *)v165;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)",  "%s\n",  v165);
    if (v166 != buf) {
      free(v166);
    }
  }

  int v99 = (std::__shared_weak_count *)v277;
  v274[0] = (uint64_t)v276;
  v274[1] = v277;
  if (v277)
  {
    int v100 = (unint64_t *)(v277 + 8);
    do
      uint64_t v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
    sub_100AAB034(a1, v274, a3);
    do
      int v102 = __ldaxr(v100);
    while (__stlxr(v102 - 1, v100));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }

  else
  {
    sub_100AAB034(a1, v274, a3);
  }

  if (!*a3)
  {
    int v103 = *(_DWORD *)(a1 + 1096);
    if (v103)
    {
      int v104 = (_OWORD *)(a1 + 1048);
      if (v103 == 1
        && (int v286 = 1,
            *(void *)buf = &v286,
            sub_100ABF1B8((uint64_t **)(a1 + 192), &v286, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5])
        && (int v273 = 1,
            *(void *)buf = &v273,
            sub_100ABF1B8((uint64_t **)(a1 + 192), &v273, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5][1])
        && (int v272 = 1,
            *(void *)buf = &v272,
            uint64_t v105 = sub_100ABF1B8((uint64_t **)(a1 + 192), &v272, (uint64_t)&unk_1012CF090, (_DWORD **)buf),
            (*(double (**)(uint64_t, uint64_t))(*(void *)v105[5][1] + 48LL))(v105[5][1], a1 + 984) <= 5.0))
      {
        int v286 = 1;
        *(void *)buf = &v286;
        int v137 = sub_100ABF1B8((uint64_t **)(a1 + 192), &v286, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5];
        uint64_t v138 = v137[1];
        int v139 = v137[2];
        *(void *)buf = v138;
        *(void *)&buf[8] = v139;
        if (v139)
        {
          int v140 = (unint64_t *)(v139 + 8);
          do
            int v141 = __ldxr(v140);
          while (__stxr(v141 + 1, v140));
        }

        *int v104 = *(_OWORD *)(v138 + 80);
        *(_OWORD *)(a1 + 1064) = *(_OWORD *)(v138 + 96);
        sub_10000AE14((uint64_t)buf);
      }

      else
      {
        int v106 = *(_OWORD *)(a1 + 60);
        *int v104 = *(_OWORD *)(a1 + 44);
        *(_OWORD *)(a1 + 1064) = v106;
      }
    }
  }

  int v107 = (_OWORD *)(a1 + 976);
  int v115 = sub_100FBA2B8((uint64_t)&v278, (double *)(a1 + 984));
  int v116 = v115;
  uint64_t v117 = *(unsigned __int8 *)(a1 + 165);
  if (!*(_BYTE *)(a1 + 165) && v115 >= 0.0 && v115 < 1.5)
  {
    uint64_t v117 = BYTE4(v276[5].__vftable);
    if (BYTE4(v276[5].__vftable))
    {
LABEL_129:
      uint64_t v117 = 0;
      goto LABEL_141;
    }

    v118 = *(_DWORD *)(a1 + 96);
    if (v118 <= 8 && ((1 << v118) & 0x1D0) != 0)
    {
      if ((*(_DWORD *)&v285[24] - 4) >= 5 || ((0x1Du >> (v285[24] - 4)) & 1) == 0)
      {
        *(_DWORD *)(a1 + 1104) = 8;
        *a3 = 1;
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        int v119 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
        {
          int v120 = *(void *)(a1 + 976);
          int v267 = *(void *)(a1 + 984);
          uint64_t v121 = *(_DWORD *)(a1 + 96);
          v262 = sub_100832C40(v121);
          int v202 = *(void *)(a1 + 992);
          int v205 = *(void *)(a1 + 1000);
          int v209 = *(void *)(a1 + 1016);
          int v213 = *(void *)(a1 + 1048);
          v217 = *(void *)(a1 + 1064);
          unsigned int v221 = *(void *)(a1 + 1008);
          v225 = *(void *)(a1 + 1024);
          int v229 = *(void *)(a1 + 1056);
          v233 = *(void *)(a1 + 1072);
          int v237 = *(_DWORD *)(a1 + 1088);
          int v241 = *(void *)(a1 + 1080);
          int v245 = *(unsigned __int8 *)(a1 + 1092);
          v253 = *(_DWORD *)(a1 + 1456);
          unsigned int v122 = *(void *)(a1 + 1696);
          int v249 = *(void *)(v122 + 384);
          unsigned int v257 = *(void *)(v122 + 392);
          int v123 = *(_DWORD *)(a1 + 1096);
          int v124 = sub_100832C40(v123);
          *(_DWORD *)buf = 134355459;
          *(void *)&buf[4] = v120;
          *(_WORD *)&buf[12] = 2050;
          *(void *)&buf[14] = v267;
          v331 = 1026;
          v332 = v121;
          v333 = 2082;
          v334 = v262;
          v335 = 2049;
          v336 = v202;
          v337 = 2049;
          v338 = v205;
          v339 = 2049;
          v340 = v209;
          v341 = 2049;
          v342 = v213;
          v343 = 2049;
          v344 = v217;
          v345 = 2050;
          v346 = v221;
          v347 = 2050;
          v348 = v225;
          v349 = 2050;
          v350 = v229;
          v351 = 2050;
          v352 = v233;
          v353 = 1026;
          *(_DWORD *)v354 = v237;
          *(_WORD *)&v354[4] = 2050;
          *(void *)&v354[6] = v241;
          *(_WORD *)&v354[14] = 1026;
          *(_DWORD *)&v354[16] = v245;
          LOWORD(v355) = 1026;
          *(_DWORD *)((char *)&v355 + 2) = v253;
          HIWORD(v355) = 2050;
          *(void *)v356 = v249;
          *(_WORD *)&v356[8] = 1026;
          *(_DWORD *)v357 = v257;
          *(_WORD *)&v357[4] = 1026;
          v358 = v123;
          v359 = 2082;
          v360 = v124;
          v361 = 1026;
          v362 = *(_DWORD *)&v285[24];
          v363 = 2049;
          v364 = v280;
          v365 = 2049;
          v366 = *((void *)&v280 + 1);
          v367 = 2050;
          v368 = v281;
          v369 = 2050;
          v370 = v116;
          _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEBUG,  "#fusion barredLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f, %{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{pu blic}d,%{public}d,%{public}.3f,%{public}d,%{public}d,%{public}s,%{public}d,%{private}.7f,%{private}.7f,%{pub lic}.1f,%{public}.3f",  buf,  0xEAu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          v270 = qword_101934968;
          unsigned int v176 = *(void *)(a1 + 976);
          v216 = *(const char **)(a1 + 984);
          int v177 = *(_DWORD *)(a1 + 96);
          v208 = sub_100832C40(v177);
          int v178 = *(void *)(a1 + 992);
          int v204 = *(void *)(a1 + 1000);
          unsigned int v212 = *(void *)(a1 + 1016);
          int v220 = *(void *)(a1 + 1048);
          v224 = *(void *)(a1 + 1064);
          int v228 = *(void *)(a1 + 1008);
          int v232 = *(void *)(a1 + 1024);
          int v236 = *(void *)(a1 + 1056);
          int v240 = *(void *)(a1 + 1072);
          v244 = *(_DWORD *)(a1 + 1088);
          unsigned int v248 = *(void *)(a1 + 1080);
          v252 = *(unsigned __int8 *)(a1 + 1092);
          v260 = *(_DWORD *)(a1 + 1456);
          v179 = *(void *)(a1 + 1696);
          int v256 = *(void *)(v179 + 384);
          int v265 = *(void *)(v179 + 392);
          v180 = *(_DWORD *)(a1 + 1096);
          v181 = sub_100832C40(v180);
          int v286 = 134355459;
          v287 = v176;
          v288 = 2050;
          v289 = v216;
          int v290 = 1026;
          int v291 = v177;
          int v292 = 2082;
          unsigned int v293 = v208;
          int v294 = 2049;
          int v295 = v178;
          v296 = 2049;
          v297 = v204;
          v298 = 2049;
          int v299 = v212;
          int v300 = 2049;
          int v301 = v220;
          unsigned int v302 = 2049;
          int v303 = v224;
          int v304 = 2050;
          v305 = v228;
          v306 = 2050;
          v307 = v232;
          int v308 = 2050;
          int v309 = v236;
          int v310 = 2050;
          unsigned int v311 = v240;
          int v312 = 1026;
          *(_DWORD *)int v313 = v244;
          *(_WORD *)&v313[4] = 2050;
          *(void *)&v313[6] = v248;
          *(_WORD *)&v313[14] = 1026;
          *(_DWORD *)&v313[16] = v252;
          LOWORD(v314) = 1026;
          *(_DWORD *)((char *)&v314 + 2) = v260;
          HIWORD(v314) = 2050;
          *(void *)v315 = v256;
          *(_WORD *)&v315[8] = 1026;
          *(_DWORD *)v316 = v265;
          *(_WORD *)&v316[4] = 1026;
          int v317 = v180;
          int v318 = 2082;
          int v319 = v181;
          unsigned int v320 = 1026;
          int v321 = *(_DWORD *)&v285[24];
          int v322 = 2049;
          v323 = v280;
          unsigned int v324 = 2049;
          v325 = *((void *)&v280 + 1);
          v326 = 2050;
          v327 = v281;
          v328 = 2050;
          v329 = v116;
          LODWORD(v201) = 234;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v270,  2LL,  "#fusion barredLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1f, %{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{pu blic}d,%{public}d,%{public}.3f,%{public}d,%{public}d,%{public}s,%{public}d,%{private}.7f,%{private}.7f,%{pub lic}.1f,%{public}.3f",  &v286,  v201);
          int v183 = (char *)v182;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)",  "%s\n",  v182);
          if (v183 != buf) {
            free(v183);
          }
        }

        uint64_t v125 = v284;
        *(_OWORD *)(a1 + 1040) = v283;
        *(_OWORD *)(a1 + 1056) = v125;
        *(_OWORD *)(a1 + 1072) = *(_OWORD *)v285;
        *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v285[12];
        v126 = v280;
        _BYTE *v107 = v279;
        *(_OWORD *)(a1 + 992) = v126;
        int v127 = v282;
        *(_OWORD *)(a1 + 1008) = v281;
        *(_OWORD *)(a1 + 1024) = v127;
        uint64_t v117 = *(unsigned __int8 *)(a1 + 165);
        goto LABEL_141;
      }

      goto LABEL_129;
    }
  }

  int v47 = *(void *)(a1 + 88);
  if (!v47) {
    int v47 = *(void *)(qword_1019A1CE8 + 88);
  }
  int v48 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B294C0(v47, a2);
  uint64_t v49 = (int)v48;
  else {
    unsigned int v50 = 1;
  }
  uint64_t v4 = (v4 + v49 + v50 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x1000) == 0)
  {
LABEL_67:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_101;
  }

  if ((v5 & 0xFF0000) != 0)
  {
    if ((v5 & 0x10000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x10000u;
      uint64_t v34 = *(void **)(a1 + 120);
      if (!v34)
      {
        uint64_t v34 = operator new(0x28uLL);
        wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34 = off_101876608;
        v34[1] = 0LL;
        v34[2] = 0LL;
        v34[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v34[4] = 0LL;
        *(void *)(a1 + 120) = v34;
      }

      int v35 = *(void *)(a2 + 120);
      if (!v35) {
        int v35 = *(void *)(qword_1019A1D48 + 120);
      }
      sub_100BBE4B4((uint64_t)v34, v35);
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x20000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x20000u;
      int v36 = *(void **)(a1 + 128);
      if (!v36)
      {
        int v36 = operator new(0x80uLL);
        sub_1006144E4((uint64_t)v36);
        *(void *)(a1 + 128) = v36;
      }

      uint64_t v37 = *(void *)(a2 + 128);
      if (!v37) {
        uint64_t v37 = *(void *)(qword_1019A1D48 + 128);
      }
      sub_100614E7C((uint64_t)v36, v37);
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x40000) != 0)
    {
      uint64_t v38 = *(const std::string **)(a2 + 136);
      *(_DWORD *)(a1 + 224) |= 0x40000u;
      int v39 = *(std::string **)(a1 + 136);
      if (v39 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v39 = (std::string *)operator new(0x18uLL);
        v39->__r_.__value_.__l.__size_ = 0LL;
        v39->__r_.__value_.__l.__cap_ = 0LL;
        v39->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 136) = v39;
      }

      std::string::operator=(v39, v38);
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x80000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x80000u;
      int v40 = *(void **)(a1 + 144);
      if (!v40)
      {
        int v40 = operator new(0x48uLL);
        sub_100614628((uint64_t)v40);
        *(void *)(a1 + 144) = v40;
      }

      uint64_t v41 = *(void *)(a2 + 144);
      if (!v41) {
        uint64_t v41 = *(void *)(qword_1019A1D48 + 144);
      }
      sub_10062EA7C((uint64_t)v40, v41);
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x100000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x100000u;
      uint64_t v42 = *(void **)(a1 + 152);
      if (!v42)
      {
        uint64_t v42 = operator new(0x38uLL);
        sub_10061464C((uint64_t)v42);
        *(void *)(a1 + 152) = v42;
      }

      int v43 = *(void *)(a2 + 152);
      if (!v43) {
        int v43 = *(void *)(qword_1019A1D48 + 152);
      }
      sub_100633994((uint64_t)v42, v43);
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x200000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x200000u;
      int v44 = *(void **)(a1 + 160);
      if (!v44)
      {
        int v44 = operator new(0x30uLL);
        sub_100614670((uint64_t)v44);
        *(void *)(a1 + 160) = v44;
      }

      uint64_t v45 = *(void *)(a2 + 160);
      if (!v45) {
        uint64_t v45 = *(void *)(qword_1019A1D48 + 160);
      }
      sub_100638E7C((uint64_t)v44, v45);
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x400000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x400000u;
      v46 = *(void **)(a1 + 168);
      if (!v46)
      {
        v46 = operator new(0x18uLL);
        sub_10061475C((uint64_t)v46);
        *(void *)(a1 + 168) = v46;
      }

      int v47 = *(void *)(a2 + 168);
      if (!v47) {
        int v47 = *(void *)(qword_1019A1D48 + 168);
      }
      sub_100644534((uint64_t)v46, v47);
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x800000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x800000u;
      int v48 = *(void **)(a1 + 176);
      if (!v48)
      {
        int v48 = operator new(0x38uLL);
        sub_100614784((uint64_t)v48);
        *(void *)(a1 + 176) = v48;
      }

      uint64_t v49 = *(void *)(a2 + 176);
      if (!v49) {
        uint64_t v49 = *(void *)(qword_1019A1D48 + 176);
      }
      sub_1006476CC((uint64_t)v48, v49);
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }
  }

  if (HIBYTE(v5))
  {
    if ((v5 & 0x1000000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x1000000u;
      unsigned int v50 = *(void **)(a1 + 184);
      if (!v50)
      {
        unsigned int v50 = operator new(0x70uLL);
        sub_1006145D0((uint64_t)v50);
        *(void *)(a1 + 184) = v50;
      }

      int v51 = *(void *)(a2 + 184);
      if (!v51) {
        int v51 = *(void *)(qword_1019A1D48 + 184);
      }
      sub_10061D800((uint64_t)v50, v51);
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x2000000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x2000000u;
      int v52 = *(void **)(a1 + 192);
      if (!v52)
      {
        int v52 = operator new(0x38uLL);
        sub_10061458C((uint64_t)v52);
        *(void *)(a1 + 192) = v52;
      }

      uint64_t v53 = *(void *)(a2 + 192);
      if (!v53) {
        uint64_t v53 = *(void *)(qword_1019A1D48 + 192);
      }
      sub_10061BD94((uint64_t)v52, v53);
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x4000000) != 0)
    {
      v54 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a1 + 224) |= 0x4000000u;
      *(_DWORD *)(a1 + 200) = v54;
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x8000000) != 0)
    {
      int v55 = *(_DWORD *)(a2 + 204);
      if (v55 >= 3 && v55 != 4) {
        sub_101264DD0();
      }
      *(_DWORD *)(a1 + 224) |= 0x8000000u;
      *(_DWORD *)(a1 + 204) = v55;
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x10000000) != 0)
    {
      int v56 = *(_DWORD *)(a2 + 216);
      *(_DWORD *)(a1 + 224) |= 0x10000000u;
      *(_DWORD *)(a1 + 216) = v56;
      uint64_t v5 = *(_DWORD *)(a2 + 224);
    }

    if ((v5 & 0x20000000) != 0)
    {
      *(_DWORD *)(a1 + 224) |= 0x20000000u;
      uint64_t v57 = *(void **)(a1 + 208);
      if (!v57)
      {
        uint64_t v57 = operator new(0x18uLL);
        sub_100614550((uint64_t)v57);
        *(void *)(a1 + 208) = v57;
      }

      int v58 = *(void *)(a2 + 208);
      if (!v58) {
        int v58 = *(void *)(qword_1019A1D48 + 208);
      }
      sub_100619124((uint64_t)v57, v58);
    }
  }

  int v24 = *(void *)(v5 + 176);
  if (!v24) {
    int v24 = *(void *)(qword_1019A1D48 + 176);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x2C,  v24,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_95;
  }

  int v47 = *(void *)(a2 + 104);
  v5 |= 0x1000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 104) = v47;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000000LL) == 0)
  {
LABEL_47:
    if ((v4 & 0x1000000000LL) == 0) {
      goto LABEL_48;
    }
    goto LABEL_91;
  }

  PB::TextFormatter::format(this, "workoutTransitionPause", *(void *)(a1 + 328));
  int v6 = *v5;
  if ((*v5 & 0x20000000000LL) == 0)
  {
LABEL_44:
    if ((v6 & 0x40000000000LL) == 0) {
      goto LABEL_45;
    }
LABEL_91:
    PB::TextFormatter::format(this, "workoutTransitionStart", *(void *)(a1 + 344));
    if ((*v5 & 0x80000000000LL) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 312), 0x64u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000000LL) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000LL) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 304), 0x66u);
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 392), 0x65u);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_91;
  }

  uint64_t result = *(float *)(a2 + 156);
  v3 |= 0x400000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 156) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x8000) == 0)
  {
LABEL_43:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_91;
  }

  PB::TextFormatter::format(this, "xJerkScalarMagMax", *(float *)(a1 + 168));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x4000000000LL) == 0)
  {
LABEL_40:
    if ((v5 & 0x8000000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_91;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x27u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_91;
  }

  uint64_t result = *(float *)(a2 + 152);
  v5 |= 0x8000000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 152) = result;
  int v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_24:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_91;
  }

  PB::TextFormatter::format(this, "durationXYBiggestImpact", *(float *)(a1 + 144));
  int v6 = *v5;
  int v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_91;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 152), 0x13u);
  int v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_91;
  }

  uint64_t result = *(float *)(a2 + 80);
  v5 |= 0x20000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 80) = result;
  uint64_t v4 = *v3;
  int v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_91;
  }

  PB::TextFormatter::format(this, "audioDvEnergyThresholdStretch", *(float *)(a1 + 52));
  int v6 = *v5;
  int v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_91;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 271), 0xAu);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_91;
  }

  int v12 = *(void *)(a2 + 16);
  v3 |= 2uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(void *)(result + 16) = v12;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_91;
  }

  PB::TextFormatter::format(this, "chaosOrSaturationMet", *(_BYTE *)(a1 + 160));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x4000000000LL) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000000000LL) == 0) {
      goto LABEL_11;
    }
    goto LABEL_91;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0x6Au);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000000LL) == 0) {
      goto LABEL_12;
    }
    goto LABEL_91;
  }

  uint64_t v25 = *(void *)(a2 + 8);
  v3 |= 1uLL;
  *(void *)(a1 + 172) = v3;
  *(void *)(a1 + 8) = v25;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 2) == 0)
  {
LABEL_46:
    if ((v2 & 0x100) == 0) {
      goto LABEL_47;
    }
    goto LABEL_91;
  }

  PB::TextFormatter::format(this, "thresholdChaos", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_91;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0xD2u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x100) == 0)
  {
LABEL_44:
    if ((v4 & 0x200) == 0) {
      goto LABEL_45;
    }
    goto LABEL_91;
  }

          *(_DWORD *)(a1 + 40) = v49;
          goto LABEL_104;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_104;
      }
    }

    int v19 = 0;
    int v20 = 0;
    int v15 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      uint64_t v21 = v4 + 1;
      uint64_t v22 = *(_BYTE *)(v12 + v4);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      uint64_t v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        int v15 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24)) {
            return v6 == 0;
          }
          break;
        case 6u:
          *(_BYTE *)(a1 + 60) |= 4u;
          int v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2)) {
            goto LABEL_85;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v44);
          goto LABEL_87;
        default:
          if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_89;
      }
    }

    int v19 = 0;
    int v20 = 0;
    int v15 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      uint64_t v21 = v4 + 1;
      uint64_t v22 = *(_BYTE *)(v12 + v4);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      uint64_t v4 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        int v15 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_91;
  }

  PB::TextFormatter::format(this, "walkingSpeed", *(float *)(a1 + 164));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x100000000000LL) == 0)
  {
LABEL_44:
    if ((v5 & 0x2000000000LL) == 0) {
      goto LABEL_45;
    }
LABEL_91:
    PB::TextFormatter::format(this, "walkingSpeedRejectionStatus", *(_DWORD *)(a1 + 168));
    if ((*(void *)(a1 + 184) & 0x4000000000LL) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 0x2Bu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x100000000LL) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 148), 0x2Du);
  }

  int v40 = *(_BYTE *)(a2 + 182);
  v3 |= 0x100000000000uLL;
  *(void *)(result + 188) = v3;
  *(_BYTE *)(result + 182) = v40;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x400000000000LL) == 0)
  {
LABEL_42:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_91;
  }

  PB::TextFormatter::format(this, "srcVerticalRotation", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000LL) == 0) {
      goto LABEL_40;
    }
    goto LABEL_91;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 184), 0x26u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x100000000LL) == 0) {
      goto LABEL_41;
    }
    goto LABEL_91;
  }

LABEL_95:
  uint64_t v53 = *(void *)(a1 + 104);
  if (!v53) {
    uint64_t v53 = *(void *)(qword_1019A0978 + 104);
  }
  v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000794E8(v53, a2);
  int v55 = (int)v54;
  else {
    int v56 = 1;
  }
  uint64_t v4 = (v4 + v55 + v56 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x2000) == 0)
  {
LABEL_68:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_107;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A,  (int)a2,  *(double *)(v5 + 152),  a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_97;
  }

  *(float *)&int v6 = self->_metsHR;
  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6),  @"metsHR");
  has = (char)self->_has;
  if ((has & 4) != 0) {
    goto LABEL_96;
  }
LABEL_84:
  if ((has & 1) != 0)
  {
LABEL_85:
    *(float *)&int v6 = self->_metsFM;
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6),  @"metsFM");
  }

  return v3;
}

      int v43 = operator new(0xC8uLL);
      sub_100D4CB90(v43, v11, a2, DictionaryOfClasses, a1, *(void *)(a1 + 32));
      goto LABEL_110;
    }

    int v19 = a4[1];
    if (v19 == 19)
    {
      int v20 = *(void *)*a4 == 0x6E6F697461636F4CLL && *(void *)(*a4 + 8LL) == 0x4C72657461647055LL;
      if (v20 && *(void *)(*a4 + 11LL) == 0x6576694C72657461LL) {
        goto LABEL_96;
      }
    }

    if (v19 == 25)
    {
      if (*(void *)*a4 == 0x6E6F697461636F4CLL
        && *(void *)(*a4 + 8LL) == 0x4872657461647055LL
        && *(void *)(*a4 + 16LL) == 0x616369726F747369LL
        && *(_BYTE *)(*a4 + 24LL) == 108)
      {
        goto LABEL_94;
      }

      int v19 = a4[1];
    }

    if (v19 == 14)
    {
      if (*(void *)*a4 == 0x5365636976726553LL && *(void *)(*a4 + 6LL) == 0x6E6F697373655365LL) {
        goto LABEL_95;
      }
      int v19 = a4[1];
    }

    if (v19 == 25)
    {
      if (*(void *)*a4 == 0x756F72676B636142LL
        && *(void *)(*a4 + 8LL) == 0x697669746341646ELL
        && *(void *)(*a4 + 16LL) == 0x6F69737365537974LL
        && *(_BYTE *)(*a4 + 24LL) == 110)
      {
LABEL_109:
        int v43 = operator new(0xC8uLL);
        sub_101023410(v43, v11, a2, DictionaryOfClasses, a1, *(void *)(a1 + 32));
LABEL_110:
        *(void *)buf = a2;
        *(void *)unsigned int v50 = v43;
        sub_100587A00((uint64_t **)(a1 + 824), (unint64_t *)buf, buf);
        sub_1010DDBC0( buf,  (char *)-[NSString UTF8String]( +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%p", v43),  "UTF8String"));
        int v47 = (*(uint64_t (**)(void *))(*(void *)v43 + 24LL))(v43);
        int v48 = (void *)(*(uint64_t (**)(void *))(*(void *)v43 + 40LL))(v43);
        sub_1005450B8(a1, (uint64_t)v11, (uint64_t *)buf, v47, v48, 1);
        if (SBYTE3(v52) < 0) {
          operator delete(*(void **)buf);
        }
        return;
      }

      int v19 = a4[1];
    }

    if (v19 != 19) {
      goto LABEL_81;
    }
    uint64_t v29 = (uint64_t *)*a4;
    goto LABEL_74;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_1018401A0);
  }
  uint64_t v18 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)unsigned int v50 = 2082;
    *(void *)&v50[2] = "";
    int v51 = 2082;
    int v52 = [v10 UTF8String];
    uint64_t v53 = 2050;
    v54 = UniqueRemotePid;
    int v55 = 1026;
    int v56 = (unsigned __int16)UniqueRemotePid;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#warning Cannot create DaemonIdentifiableClient, IdentityToBeValidated:%{public, loca tion:escape_only}s, ConnectedClientUniquePid:%{public}lld, ConnectedClientPid:%{public}d}",  buf,  0x2Cu);
  }

  uint64_t v53 = *(void *)(a1 + 104);
  if (!v53) {
    uint64_t v53 = *(void *)(qword_1019A11B8 + 104);
  }
  v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A5A9F8(v53, a2);
  int v55 = (int)v54;
  else {
    int v56 = 1;
  }
  uint64_t v4 = (v4 + v55 + v56 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x2000) == 0)
  {
LABEL_68:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_107;
  }

                  uint64_t v25 = (unsigned __int8 *)*((void *)this + 1);
                  uint64_t v14 = *((void *)this + 2);
                  uint64_t v26 = *v25;
                  if (v26 != 41)
                  {
                    if (v26 == 48)
                    {
                      int v15 = (char *)(v25 + 1);
                      *((void *)this + 1) = v25 + 1;
LABEL_99:
                      if ((unint64_t)v15 >= v14 || *v15 < 0)
                      {
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback( this,  v213);
                        if (!(_DWORD)result) {
                          return result;
                        }
                        int v27 = (_BYTE *)*((void *)this + 1);
                        uint64_t v14 = *((void *)this + 2);
                      }

                      else
                      {
                        *int v213 = *v15;
                        int v27 = v15 + 1;
                        *((void *)this + 1) = v27;
                      }

                      *(_DWORD *)(a1 + 276) |= 0x20u;
                      if ((unint64_t)v27 < v14 && *v27 == 61)
                      {
                        while (1)
                        {
                          *((void *)this + 1) = v27 + 1;
LABEL_212:
                          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback( this,  v224) & 1) == 0) {
                            return 0LL;
                          }
                          int v88 = v224[0];
                          uint64_t v89 = *(_DWORD *)(a1 + 96);
                          if (v89 == *(_DWORD *)(a1 + 100))
                          {
                            sub_10004AAFC(v219, v89 + 1);
                            uint64_t v89 = *(_DWORD *)(a1 + 96);
                          }

                          v90 = *(void *)(a1 + 88);
                          int v91 = v89 + 1;
                          *(_DWORD *)(a1 + 96) = v89 + 1;
                          *(_DWORD *)(v90 + 4LL * v89) = v88;
                          int v92 = *((void *)this + 1);
                          uint64_t v93 = *((_DWORD *)this + 4) - v92;
                          if (v93 >= 1)
                          {
                            int v94 = v93 / 5u;
                            int v95 = v94 >= *(_DWORD *)(a1 + 100) - v91 ? *(_DWORD *)(a1 + 100) - v91 : v94;
                            if (v95 >= 1)
                            {
                              int v96 = 0;
                              while (*(_BYTE *)v92 == 61)
                              {
                                uint64_t v97 = *(_DWORD *)(v92 + 1);
                                if (v91 >= *(_DWORD *)(a1 + 100))
                                {
                                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/ Xcode.app/Contents/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18 .2.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h",  602LL);
                                  v98 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (size()) < (Capacity()): ");
                                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v98);
                                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                  int v91 = *(_DWORD *)(a1 + 96);
                                  v90 = *(void *)(a1 + 88);
                                }

                                *(_DWORD *)(a1 + 96) = v91 + 1;
                                *(_DWORD *)(v90 + 4LL * v91) = v97;
                                ++v96;
                                v92 += 5LL;
                                ++v91;
                                if (v95 == v96)
                                {
                                  int v96 = v95;
                                  break;
                                }
                              }

                              if (v96) {
                                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v96);
                              }
                            }
                          }

  int v47 = vabdd_f64(v5, v8);
  int v48 = 180.0;
  if (v47 == 180.0) {
    goto LABEL_96;
  }
  uint64_t v49 = v5 - v8;
  if (COERCE__INT64(fabs(v5 - v8)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    int v58 = fabs(v47 + -180.0);
    int v48 = 180.0;
    if (v47 < 180.0) {
      int v47 = 180.0;
    }
    int v59 = v47 >= 1.0 ? v47 * 2.22044605e-16 : 2.22044605e-16;
    if (v58 <= v59) {
      goto LABEL_96;
    }
  }

  int v48 = 180.0;
  if (v49 <= 180.0)
  {
    if (v49 >= -180.0) {
      goto LABEL_97;
    }
    int v48 = fmod(v49 + -180.0, 360.0) + 180.0;
    goto LABEL_96;
  }

  int v60 = fmod(v49 + 180.0, 360.0);
  uint64_t v49 = v60 + -180.0;
  if (v60 + -180.0 == -180.0) {
    goto LABEL_96;
  }
  uint64_t v61 = COERCE__INT64(fabs(v60 + -180.0)) - 1;
  v62 = (unint64_t)(COERCE__INT64(fabs(v60 + -180.0)) - 0x10000000000000LL) >> 53 > 0x3FE
     && v61 > 0xFFFFFFFFFFFFELL;
  if (!v62 || *(void *)&v49 == 0LL)
  {
    int v48 = 180.0;
    int v64 = fabs(v49 + 180.0);
    uint64_t v65 = fabs(v49);
    if (v65 < 180.0) {
      uint64_t v65 = 180.0;
    }
    int v66 = v65 >= 1.0 ? v65 * 2.22044605e-16 : 2.22044605e-16;
    if (v64 <= v66) {
LABEL_96:
    }
      uint64_t v49 = v48;
  }

  uint64_t v53 = 0LL;
LABEL_96:
  if (__p)
  {
    int v58 = (uint64_t *)__p;
    operator delete(__p);
  }

  if (v60)
  {
    uint64_t v61 = (uint64_t *)v60;
    operator delete(v60);
  }

  if (v63)
  {
    int v64 = (uint64_t *)v63;
    operator delete(v63);
  }

  if (v66)
  {
    int v67 = (uint64_t *)v66;
    operator delete(v66);
  }

  if (v69)
  {
    int v70 = (uint64_t *)v69;
    operator delete(v69);
  }

  if (v72)
  {
    uint64_t v73 = (uint64_t *)v72;
    operator delete(v72);
  }

  return v53;
}

  v54 = 0LL;
LABEL_96:
  if (__p)
  {
    int v59 = (uint64_t *)__p;
    operator delete(__p);
  }

  if (v61)
  {
    v62 = (uint64_t *)v61;
    operator delete(v61);
  }

  if (v64)
  {
    uint64_t v65 = (uint64_t *)v64;
    operator delete(v64);
  }

  if (v67)
  {
    int v68 = (uint64_t *)v67;
    operator delete(v67);
  }

  if (v70)
  {
    int v71 = (uint64_t *)v70;
    operator delete(v70);
  }

  if (v73)
  {
    int v74 = (uint64_t *)v73;
    operator delete(v73);
  }

  return v54;
}

  uint64_t v53 = 0LL;
LABEL_96:
  if (__p)
  {
    int v58 = (double **)__p;
    operator delete(__p);
  }

  if (v60)
  {
    uint64_t v61 = (double **)v60;
    operator delete(v60);
  }

  if (v63)
  {
    int v64 = (double **)v63;
    operator delete(v63);
  }

  if (v66)
  {
    int v67 = (double **)v66;
    operator delete(v66);
  }

  if (v69)
  {
    int v70 = (double **)v69;
    operator delete(v69);
  }

  if (v72)
  {
    uint64_t v73 = (double **)v72;
    operator delete(v72);
  }

  return v53;
}

  v54 = 0LL;
LABEL_96:
  if (__p)
  {
    int v59 = (double **)__p;
    operator delete(__p);
  }

  if (v61)
  {
    v62 = (double **)v61;
    operator delete(v61);
  }

  if (v64)
  {
    uint64_t v65 = (double **)v64;
    operator delete(v64);
  }

  if (v67)
  {
    int v68 = (double **)v67;
    operator delete(v67);
  }

  if (v70)
  {
    int v71 = (double **)v70;
    operator delete(v70);
  }

  if (v73)
  {
    int v74 = (double **)v73;
    operator delete(v73);
  }

  return v54;
}

  int v107 = *(_DWORD *)(a1 + 792);
  else {
    int v64 = v107 == 1;
  }
  if (v124)
  {
    uint64_t v125 = (char *)v124;
    operator delete(v124);
  }

  if (__p)
  {
    int v128 = (char *)__p;
    operator delete(__p);
  }

  return v64;
}

  int v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 144);
  if ((v32 & 0x80000000) != 0)
  {
    uint64_t v33 = 12;
  }

  else if (v32 >= 0x80)
  {
    uint64_t v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32, a2) + 2;
    unsigned int v3 = *(_DWORD *)(a1 + 172);
  }

  else
  {
    uint64_t v33 = 3;
  }

  v5 += v33;
  if ((v3 & 0x80000) != 0) {
    goto LABEL_101;
  }
LABEL_81:
  if ((v3 & 0x100000) != 0)
  {
LABEL_107:
    int v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 160);
    if ((v36 & 0x80000000) != 0)
    {
      uint64_t v37 = 12;
    }

    else if (v36 >= 0x80)
    {
      uint64_t v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36, a2) + 2;
      unsigned int v3 = *(_DWORD *)(a1 + 172);
    }

    else
    {
      uint64_t v37 = 3;
    }

    v5 += v37;
  }

  int v51 = *(void *)(a1 + 96);
  if (!v51) {
    int v51 = *(void *)(qword_1019A1CE8 + 96);
  }
  int v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B29F94(v51, a2);
  uint64_t v53 = (int)v52;
  else {
    v54 = 1;
  }
  uint64_t v4 = (v4 + v53 + v54 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x2000) == 0)
  {
LABEL_68:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_107;
  }

  uint64_t v26 = *(void *)(v5 + 192);
  if (!v26) {
    uint64_t v26 = *(void *)(qword_1019A1D48 + 192);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x33,  v26,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_99;
  }

            sub_100D03EA8(v258, v259, v105, v106, a5, a6 & 1);
            uint64_t v10 = (double **)(v106 + 1);
            if ((__int128 *)((char *)v106 - *(void *)v105 + 16) == (__int128 *)4096)
            {
              int v124 = (double **)*((void *)v105 + 1);
              v105 += 8;
              uint64_t v10 = v124;
            }

            a6 = 0;
            goto LABEL_98;
          }

          if ((a6 & 1) != 0)
          {
            if ((double **)v8 != v10)
            {
              for (i = (char *)(v10 + 2); ; i += 16)
              {
                if (i - v14 == 4096)
                {
                  int v165 = (char *)*((void *)v11 + 1);
                  v11 += 8;
                  uint64_t v14 = v165;
                  i = v165;
                }

                int v166 = v11;
                unsigned int v167 = (uint64_t)i;
                if (i == v14)
                {
                  int v166 = v11 - 8;
                  unsigned int v167 = *((void *)v11 - 1) + 4096LL;
                }

                int v169 = *(double **)(v167 - 16);
                int v168 = (__int128 *)(v167 - 16);
                if (**(double **)i < *v169)
                {
                  v170 = *((void *)i + 1);
                  *(void *)&v262 = *(void *)i;
                  *((void *)&v262 + 1) = v170;
                  *(void *)i = 0LL;
                  *((void *)i + 1) = 0LL;
                  v171 = (uint64_t)i;
                  while (1)
                  {
                    v172 = (uint64_t)v168;
                    sub_10005F550(v171, v168);
                    if (v172 == *(void *)v166)
                    {
                      int v174 = *((void *)v166 - 1);
                      v166 -= 8;
                      int v173 = v174 + 4096;
                    }

                    else
                    {
                      int v173 = v172;
                    }

                    int v175 = *(double **)(v173 - 16);
                    int v168 = (__int128 *)(v173 - 16);
                    v171 = v172;
                  }

                  v172 = (uint64_t)v10;
LABEL_172:
                  sub_10005F550(v172, &v262);
                  unsigned int v176 = (std::__shared_weak_count *)*((void *)&v262 + 1);
                  if (*((void *)&v262 + 1))
                  {
                    int v177 = (unint64_t *)(*((void *)&v262 + 1) + 8LL);
                    do
                      int v178 = __ldaxr(v177);
                    while (__stlxr(v178 - 1, v177));
                    if (!v178)
                    {
                      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                      std::__shared_weak_count::__release_weak(v176);
                    }
                  }

                  uint64_t v14 = *(char **)v11;
                }
              }
            }
          }

          else if ((double **)v8 != v10)
          {
            v233 = (char *)v10 - v14;
            v234 = v233 >> 4;
            if (v233 < -15)
            {
              unsigned int v239 = 254 - v234;
              v235 = ~(_BYTE)v239;
              int v236 = &v258[-8 * (v239 >> 8)];
            }

            else
            {
              v235 = v234 + 1;
              int v236 = &v258[8 * ((unint64_t)(v234 + 1) >> 8)];
            }

            int v240 = *(char **)v236;
            int v241 = (char *)(*(void *)v236 + 16LL * v235);
            while (v241 != (char *)v8)
            {
              v242 = (v241 - v240) >> 4;
              if (v241 - v240 < 17)
              {
                int v246 = 256 - v242;
                v244 = &v236[-8 * (v246 >> 8)];
                int v245 = (__int128 *)(*(void *)v244 + 16LL * ~(_BYTE)v246);
              }

              else
              {
                v243 = v242 - 1;
                v244 = &v236[8 * (v243 >> 8)];
                int v245 = (__int128 *)(*(void *)v244 + 16LL * v243);
              }

              if (**(double **)v241 < **(double **)v245)
              {
                int v247 = *((void *)v241 + 1);
                *(void *)&v262 = *(void *)v241;
                *((void *)&v262 + 1) = v247;
                *(void *)int v241 = 0LL;
                *((void *)v241 + 1) = 0LL;
                unsigned int v248 = (uint64_t)v241;
                do
                {
                  int v249 = (uint64_t)v245;
                  sub_10005F550(v248, v245);
                  if (v249 == *(void *)v244)
                  {
                    v251 = *((void *)v244 - 1);
                    v244 -= 8;
                    int v250 = v251 + 4096;
                  }

                  else
                  {
                    int v250 = v249;
                  }

                  v252 = *(double **)(v250 - 16);
                  int v245 = (__int128 *)(v250 - 16);
                  unsigned int v248 = v249;
                }

                while (*(double *)v262 < *v252);
                sub_10005F550(v249, &v262);
                v253 = (std::__shared_weak_count *)*((void *)&v262 + 1);
                if (*((void *)&v262 + 1))
                {
                  int v254 = (unint64_t *)(*((void *)&v262 + 1) + 8LL);
                  do
                    int v255 = __ldaxr(v254);
                  while (__stlxr(v255 - 1, v254));
                  if (!v255)
                  {
                    ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                    std::__shared_weak_count::__release_weak(v253);
                  }
                }

                int v240 = *(char **)v236;
              }

              v241 += 16;
              if (v241 - v240 == 4096)
              {
                int v256 = (char *)*((void *)v236 + 1);
                v236 += 8;
                int v240 = v256;
                int v241 = v256;
              }
            }
          }

          break;
      }

      break;
    }
  }

    if (v44 != buf) {
      free(v44);
    }
    goto LABEL_37;
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_10188D488);
  }
  uint64_t v34 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    int v35 = *(_DWORD *)(a1 + 816);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v35;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "HRSE,getSignalEnvironment,skipping loadTile query,skipCount,%{public}d",  buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_10188D488);
    }
    int v59 = *(_DWORD *)(a1 + 816);
    uint64_t v69 = 67240192;
    LODWORD(v70) = v59;
    LODWORD(v62) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "HRSE,getSignalEnvironment,skipping loadTile query,skipCount,%{public}d",  &v69,  v62);
    uint64_t v61 = (char *)v60;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLHighResolutionSignalEnvironmentDataManager::getSignalEnv ironment(double, double)",  "%s\n",  v60);
    if (v61 != buf) {
      free(v61);
    }
  }

  int v24 = 0LL;
  ++*(_DWORD *)(a1 + 816);
LABEL_53:
  if (HIBYTE(v66))
  {
    if ((_BYTE)v66) {
      pthread_mutex_unlock(v65);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v64 + 24LL))(v64);
    }
  }

  return v24;
}

  uint64_t result = *(float *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 116) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_97;
  }

  PB::TextFormatter::format(this, "yMin", *(float *)(a1 + 192));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100000000000LL) == 0)
  {
LABEL_46:
    if ((v5 & 0x200000000000LL) == 0) {
      goto LABEL_47;
    }
    goto LABEL_97;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0x2Du);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v4 & 0x200) == 0) {
      goto LABEL_48;
    }
    goto LABEL_97;
  }

  uint64_t result = *(float *)(a2 + 260);
  v5 |= 0x40000000000000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 260) = result;
  int v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x20000000000000LL) == 0)
  {
LABEL_30:
    if ((v7 & 0x4000000000000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_97;
  }

  PB::TextFormatter::format(this, "hgAccelBufferSize", *(void *)(a1 + 40));
  int v6 = *v5;
  int v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_97;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 260), 0x19u);
  int v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x20000000000000LL) == 0)
  {
LABEL_30:
    if ((v6 & 0x4000000000000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_97;
  }

  uint64_t result = *(float *)(a2 + 104);
  v5 |= 0x800000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 104) = result;
  uint64_t v4 = *v3;
  int v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000000LL) == 0) {
      goto LABEL_23;
    }
    goto LABEL_97;
  }

  PB::TextFormatter::format(this, "deltaVXYBiggestImpact", *(float *)(a1 + 76));
  int v6 = *v5;
  int v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_97;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 220), 0x10u);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_97;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 36);
  v5 |= 0x40uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(_DWORD *)(a1 + 36) = v18;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*(_WORD *)(a2 + 324) & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_97;
  }

  PB::TextFormatter::format(this, "isBaro", *(_BYTE *)(a1 + 306));
  int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_97;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 0x6Bu);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_97;
  }

  uint64_t v18 = *(_BYTE *)(a2 + 157);
  v3 |= 0x400000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 157) = v18;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000000000LL) == 0) {
      goto LABEL_18;
    }
    goto LABEL_97;
  }

  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet1", *(_BYTE *)(a1 + 166));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x100000000000LL) == 0)
  {
LABEL_16:
    if ((v5 & 0x200000000000LL) == 0) {
      goto LABEL_17;
    }
    goto LABEL_97;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 164), 0x70u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 2) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_97;
  }

  v46 = *(_BYTE *)(a2 + 181);
  v3 |= 0x80000000000uLL;
  *(void *)(result + 188) = v3;
  *(_BYTE *)(result + 181) = v46;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x40000000000LL) == 0)
  {
LABEL_48:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_97;
  }

  PB::TextFormatter::format(this, "verticalRotationSimilarityBaseline", *(float *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000000000LL) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000LL) == 0) {
      goto LABEL_46;
    }
    goto LABEL_97;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 180), 0x2Cu);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x20000000000LL) == 0) {
      goto LABEL_47;
    }
    goto LABEL_97;
  }

LABEL_101:
  uint64_t v57 = *(void *)(a1 + 112);
  if (!v57) {
    uint64_t v57 = *(void *)(qword_1019A0978 + 112);
  }
  int v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000798A8(v57, a2);
  int v59 = (int)v58;
  else {
    int v60 = 1;
  }
  uint64_t v4 = (v4 + v59 + v60 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x4000) == 0)
  {
LABEL_69:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_113;
  }

  uint64_t v57 = *(void *)(a1 + 112);
  if (!v57) {
    uint64_t v57 = *(void *)(qword_1019A11B8 + 112);
  }
  int v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001F1658(v57);
  int v59 = (int)v58;
  else {
    int v60 = 1;
  }
  uint64_t v4 = (v4 + v59 + v60 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x4000) == 0)
  {
LABEL_69:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_113;
  }

  buf[0] = 0;
  v79[4] = 0;
  uint64_t result = sub_10093D0F8(a3, (uint64_t)buf);
  if (!v79[4]) {
    return result;
  }
  int v36 = (__int128 *)buf;
  return sub_100019CEC((uint64_t)v36);
}

  sub_1002F0B04(buf);
  uint64_t v93 = (unsigned __int8 *)(a1 + 752);
  int v94 = sub_1002A6F64(*(uint64_t *)&buf[0], "FenceMonitorIsScheduleContTrackingWakes", (BOOL *)(a1 + 752));
  int v95 = v94;
  int v96 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_105;
  }
  uint64_t v97 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    v98 = __ldaxr(v97);
  while (__stlxr(v98 - 1, v97));
  if (!v98)
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
    if (!v95) {
      goto LABEL_111;
    }
  }

  else
  {
LABEL_105:
    if (!v94) {
      goto LABEL_111;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  int v99 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    int v100 = *v93;
    LODWORD(buf[0]) = 67174657;
    DWORD1(buf[0]) = v100;
    _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "Fence: Overriding fIsScheduleContTrackingWakes, %{private}d",  (uint8_t *)buf,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    int v148 = *v93;
    v161 = 67174657;
    LODWORD(v162) = v148;
    LODWORD(v157) = 8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Overriding fIsScheduleContTrackingWakes, %{private}d",  &v161,  v157);
    int v150 = (char *)v149;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)",  "%s\n",  v149);
  }

  int v55 = *(void *)(a1 + 104);
  if (!v55) {
    int v55 = *(void *)(qword_1019A1CE8 + 104);
  }
  int v56 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2AA68(v55, a2);
  uint64_t v57 = (int)v56;
  else {
    int v58 = 1;
  }
  uint64_t v4 = (v4 + v57 + v58 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x4000) == 0)
  {
LABEL_69:
    if ((v3 & 0x8000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_113;
  }

  --*(_DWORD *)(a1 + 88);
  return v25;
}

    int v47 = 0;
    int v78 = 1;
    goto LABEL_102;
  }

  int v39 = sub_100E722D8(v9, (unsigned int **)(v9 + 344), (_DWORD *)&v98 + 1, &v98);
  uint64_t v41 = v98;
  int v40 = HIDWORD(v98);
  uint64_t v42 = v98 - HIDWORD(v98) + 1;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101888E80);
  }
  int v43 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)int v116 = v42;
    *(_WORD *)&v116[4] = 1024;
    *(_DWORD *)&v116[6] = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "TILE: searched, numOfEntries, %u, offsetEntries, %d",  buf,  0xEu);
  }

  int v44 = sub_1002921D0(115, 2);
  if ((_DWORD)v44)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    *(_DWORD *)int v99 = 67109376;
    *(_DWORD *)&v99[4] = v42;
    *(_WORD *)&v99[8] = 1024;
    *(_DWORD *)&v99[10] = v40;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: searched, numOfEntries, %u, offsetEntries, %d",  v99,  14);
    int v84 = (uint8_t *)v83;
    int v44 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyL atLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]",  "%s\n",  v83);
    if (v84 != buf) {
      free(v84);
    }
  }

  else {
    int v47 = v42;
  }
  if (!v47)
  {
LABEL_57:
    int v12 = 0LL;
    goto LABEL_83;
  }

  if (v47 + v40 > *(_DWORD *)&__p[12]) {
    sub_101274AB8(v44, v45, v46);
  }
  int v12 = (char *)sub_100599BF4(v9, a2, a3, v40, v47, *(int *)&__p[16]);
  if (!v12) {
    goto LABEL_82;
  }
  *(void *)&v99[6] = 0LL;
  *(void *)int v99 = 0LL;
  if (!v39)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    uint64_t v77 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101888E80);
      }
      LOWORD(v97.__r_.__value_.__l.__data_) = 0;
      LODWORD(v87) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: avoid data search",  &v97,  v87);
      unsigned int v86 = (uint8_t *)v85;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLo nEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileF ile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManag er_Type::KeyLatLonEntry_GSM]",  "%s\n",  v85);
      if (v86 != buf) {
        free(v86);
      }
      int v47 = 0;
      int v78 = 1;
      goto LABEL_102;
    }

    goto LABEL_101;
  }

  if ((sub_100E72944(v9, (uint64_t)v12, v47, *(int *)&__p[16], (_DWORD *)(v9 + 328), v99) & 1) != 0)
  {
    sub_100E72BC0(v38, (int *)v99, (uint64_t *)v99);
LABEL_83:
    int v74 = 1;
    goto LABEL_84;
  }

  int v78 = 0;
LABEL_102:
  int v74 = v78 != 0;
LABEL_84:
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101888E80);
  }
  int v75 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_100C0BA54((unsigned int *)(v9 + 328), (std::stringbuf::string_type *)v99);
    int v76 = v99[23] >= 0 ? v99 : *(_BYTE **)v99;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)int v116 = v74;
    *(_WORD *)&v116[4] = 1024;
    *(_DWORD *)&v116[6] = v47;
    *(_WORD *)uint64_t v117 = 2080;
    *(void *)&v117[2] = v76;
    _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s",  buf,  0x18u);
    if ((v99[23] & 0x80000000) != 0) {
      operator delete(*(void **)v99);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    int v79 = qword_101934A78;
    sub_100C0BA54((unsigned int *)(v9 + 328), (std::stringbuf::string_type *)__p);
    if (SBYTE3(v112) >= 0) {
      int v80 = __p;
    }
    else {
      int v80 = *(_BYTE **)__p;
    }
    *(_DWORD *)int v99 = 67109634;
    *(_DWORD *)&v99[4] = v74;
    *(_WORD *)&v99[8] = 1024;
    *(_DWORD *)&v99[10] = v47;
    *(_WORD *)&v99[14] = 2080;
    *(void *)&v99[16] = v80;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v79,  2LL,  "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s",  v99,  24,  v88);
    v82 = v81;
    if (SBYTE3(v112) < 0) {
      operator delete(*(void **)__p);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonE ntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile: :TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Typ e::KeyLatLonEntry_GSM]",  "%s\n",  v82);
  }

  if (v12) {
    free(v12);
  }
}

    int v47 = 0;
    int v78 = 1;
    goto LABEL_102;
  }

  int v39 = sub_100E72FD4(v9, (int **)(v9 + 344), (_DWORD *)&v98 + 1, &v98);
  uint64_t v41 = v98;
  int v40 = HIDWORD(v98);
  uint64_t v42 = v98 - HIDWORD(v98) + 1;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101888E80);
  }
  int v43 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)int v116 = v42;
    *(_WORD *)&v116[4] = 1024;
    *(_DWORD *)&v116[6] = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "TILE: searched, numOfEntries, %u, offsetEntries, %d",  buf,  0xEu);
  }

  int v44 = sub_1002921D0(115, 2);
  if ((_DWORD)v44)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    *(_DWORD *)int v99 = 67109376;
    *(_DWORD *)&v99[4] = v42;
    *(_WORD *)&v99[8] = 1024;
    *(_DWORD *)&v99[10] = v40;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: searched, numOfEntries, %u, offsetEntries, %d",  v99,  14);
    int v84 = (uint8_t *)v83;
    int v44 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::Key LatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, con st CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]",  "%s\n",  v83);
    if (v84 != buf) {
      free(v84);
    }
  }

  else {
    int v47 = v42;
  }
  if (!v47)
  {
LABEL_57:
    int v12 = 0LL;
    goto LABEL_83;
  }

  if (v47 + v40 > *(_DWORD *)&__p[12]) {
    sub_101274AB8(v44, v45, v46);
  }
  int v12 = (char *)sub_100599BF4(v9, a2, a3, v40, v47, *(int *)&__p[16]);
  if (!v12) {
    goto LABEL_82;
  }
  *(void *)&v99[6] = 0LL;
  *(void *)int v99 = 0LL;
  if (!v39)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    uint64_t v77 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101888E80);
      }
      LOWORD(v97.__r_.__value_.__l.__data_) = 0;
      LODWORD(v87) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: avoid data search",  &v97,  v87);
      unsigned int v86 = (uint8_t *)v85;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatL onEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTil eFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesMa nager_Type::KeyLatLonEntry_CDMA]",  "%s\n",  v85);
      if (v86 != buf) {
        free(v86);
      }
      int v47 = 0;
      int v78 = 1;
      goto LABEL_102;
    }

    goto LABEL_101;
  }

  if ((sub_100E73630(v9, (uint64_t)v12, v47, *(int *)&__p[16], (_DWORD *)(v9 + 328), v99) & 1) != 0)
  {
    sub_100E72BC0(v38, (int *)v99, (uint64_t *)v99);
LABEL_83:
    int v74 = 1;
    goto LABEL_84;
  }

  int v78 = 0;
LABEL_102:
  int v74 = v78 != 0;
LABEL_84:
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101888E80);
  }
  int v75 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_100C0BF10((unsigned int *)(v9 + 328), (std::stringbuf::string_type *)v99);
    int v76 = v99[23] >= 0 ? v99 : *(_BYTE **)v99;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)int v116 = v74;
    *(_WORD *)&v116[4] = 1024;
    *(_DWORD *)&v116[6] = v47;
    *(_WORD *)uint64_t v117 = 2080;
    *(void *)&v117[2] = v76;
    _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s",  buf,  0x18u);
    if ((v99[23] & 0x80000000) != 0) {
      operator delete(*(void **)v99);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    int v79 = qword_101934A78;
    sub_100C0BF10((unsigned int *)(v9 + 328), (std::stringbuf::string_type *)__p);
    if (SBYTE3(v112) >= 0) {
      int v80 = __p;
    }
    else {
      int v80 = *(_BYTE **)__p;
    }
    *(_DWORD *)int v99 = 67109634;
    *(_DWORD *)&v99[4] = v74;
    *(_WORD *)&v99[8] = 1024;
    *(_DWORD *)&v99[10] = v47;
    *(_WORD *)&v99[14] = 2080;
    *(void *)&v99[16] = v80;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v79,  2LL,  "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s",  v99,  24,  v88);
    v82 = v81;
    if (SBYTE3(v112) < 0) {
      operator delete(*(void **)__p);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLon Entry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFil e::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_ Type::KeyLatLonEntry_CDMA]",  "%s\n",  v82);
  }

  if (v12) {
    free(v12);
  }
}

    int v47 = 0;
    int v78 = 1;
    goto LABEL_102;
  }

  int v39 = sub_100E73A70(v9, (int **)(v9 + 344), (_DWORD *)&v98 + 1, &v98);
  uint64_t v41 = v98;
  int v40 = HIDWORD(v98);
  uint64_t v42 = v98 - HIDWORD(v98) + 1;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101888E80);
  }
  int v43 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)int v116 = v42;
    *(_WORD *)&v116[4] = 1024;
    *(_DWORD *)&v116[6] = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "TILE: searched, numOfEntries, %u, offsetEntries, %d",  buf,  0xEu);
  }

  int v44 = sub_1002921D0(115, 2);
  if ((_DWORD)v44)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    *(_DWORD *)int v99 = 67109376;
    *(_DWORD *)&v99[4] = v42;
    *(_WORD *)&v99[8] = 1024;
    *(_DWORD *)&v99[10] = v40;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: searched, numOfEntries, %u, offsetEntries, %d",  v99,  14);
    int v84 = (uint8_t *)v83;
    int v44 = sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyL atLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]",  "%s\n",  v83);
    if (v84 != buf) {
      free(v84);
    }
  }

  else {
    int v47 = v42;
  }
  if (!v47)
  {
LABEL_57:
    int v12 = 0LL;
    goto LABEL_83;
  }

  if (v47 + v40 > *(_DWORD *)&__p[12]) {
    sub_101274AB8(v44, v45, v46);
  }
  int v12 = (char *)sub_100599BF4(v9, a2, a3, v40, v47, *(int *)&__p[16]);
  if (!v12) {
    goto LABEL_82;
  }
  *(void *)&v99[6] = 0LL;
  *(void *)int v99 = 0LL;
  if (!v39)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    uint64_t v77 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101888E80);
      }
      LOWORD(v97.__r_.__value_.__l.__data_) = 0;
      LODWORD(v87) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: avoid data search",  &v97,  v87);
      unsigned int v86 = (uint8_t *)v85;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLo nEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileF ile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManag er_Type::KeyLatLonEntry_LTE]",  "%s\n",  v85);
      if (v86 != buf) {
        free(v86);
      }
      int v47 = 0;
      int v78 = 1;
      goto LABEL_102;
    }

    goto LABEL_101;
  }

  if ((sub_100E740CC(v9, (uint64_t)v12, v47, *(int *)&__p[16], (_DWORD *)(v9 + 328), v99) & 1) != 0)
  {
    sub_100E72BC0(v38, (int *)v99, (uint64_t *)v99);
LABEL_83:
    int v74 = 1;
    goto LABEL_84;
  }

  int v78 = 0;
LABEL_102:
  int v74 = v78 != 0;
LABEL_84:
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101888E80);
  }
  int v75 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_100C0BCC8((unsigned int *)(v9 + 328), (std::stringbuf::string_type *)v99);
    int v76 = v99[23] >= 0 ? v99 : *(_BYTE **)v99;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)int v116 = v74;
    *(_WORD *)&v116[4] = 1024;
    *(_DWORD *)&v116[6] = v47;
    *(_WORD *)uint64_t v117 = 2080;
    *(void *)&v117[2] = v76;
    _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s",  buf,  0x18u);
    if ((v99[23] & 0x80000000) != 0) {
      operator delete(*(void **)v99);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101888E80);
    }
    int v79 = qword_101934A78;
    sub_100C0BCC8((unsigned int *)(v9 + 328), (std::stringbuf::string_type *)__p);
    if (SBYTE3(v112) >= 0) {
      int v80 = __p;
    }
    else {
      int v80 = *(_BYTE **)__p;
    }
    *(_DWORD *)int v99 = 67109634;
    *(_DWORD *)&v99[4] = v74;
    *(_WORD *)&v99[8] = 1024;
    *(_DWORD *)&v99[10] = v47;
    *(_WORD *)&v99[14] = 2080;
    *(void *)&v99[16] = v80;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v79,  2LL,  "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s",  v99,  24,  v88);
    v82 = v81;
    if (SBYTE3(v112) < 0) {
      operator delete(*(void **)__p);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonE ntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile: :TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Typ e::KeyLatLonEntry_LTE]",  "%s\n",  v82);
  }

  if (v12) {
    free(v12);
  }
}

    int v44 = 0;
    int v75 = 1;
    goto LABEL_102;
  }

  int v39 = sub_10101A538(v9, (unsigned __int16 **)(v9 + 344), (_DWORD *)&v95 + 1, &v95);
  uint64_t v41 = v95;
  int v40 = HIDWORD(v95);
  uint64_t v42 = v95 - HIDWORD(v95) + 1;
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894A30);
  }
  int v43 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)uint64_t v113 = v42;
    *(_WORD *)&v113[4] = 1024;
    *(_DWORD *)&v113[6] = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "TILE: searched, numOfEntries, %u, offsetEntries, %d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    *(_DWORD *)int v96 = 67109376;
    *(_DWORD *)&v96[4] = v42;
    *(_WORD *)&v96[8] = 1024;
    *(_DWORD *)&v96[10] = v40;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: searched, numOfEntries, %u, offsetEntries, %d",  v96,  14);
    uint64_t v81 = (uint8_t *)v80;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::Key LatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, con st CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v80);
    if (v81 != buf) {
      free(v81);
    }
  }

  else {
    int v44 = v42;
  }
  if (!v44)
  {
LABEL_57:
    int v12 = 0LL;
    goto LABEL_83;
  }

  if (v44 + v40 > *(_DWORD *)&__p[12]) {
    sub_10127FB08();
  }
  int v12 = (char *)sub_100599BF4(v9, a2, a3, v40, v44, *(int *)&__p[16]);
  if (!v12) {
    goto LABEL_82;
  }
  *(void *)int v96 = 0LL;
  *(void *)&v96[8] = 0LL;
  if (!v39)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    int v74 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "TILE: avoid data search", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101894A30);
      }
      LOWORD(v94.__r_.__value_.__l.__data_) = 0;
      LODWORD(v84) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "TILE: avoid data search",  &v94,  v84);
      int v83 = (uint8_t *)v82;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::K eyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataE ntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v82);
      if (v83 != buf) {
        free(v83);
      }
      int v44 = 0;
      int v75 = 1;
      goto LABEL_102;
    }

    goto LABEL_101;
  }

  if ((sub_10101AB78(v9, (uint64_t)v12, v44, *(int *)&__p[16], (unsigned __int16 *)(v9 + 328), v96) & 1) != 0)
  {
    sub_10101AE74(v38, (unsigned __int16 *)v96, v96);
LABEL_83:
    int v71 = 1;
    goto LABEL_84;
  }

  int v75 = 0;
LABEL_102:
  int v71 = v75 != 0;
LABEL_84:
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101894A30);
  }
  int v72 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_100C0B75C((unsigned __int16 *)(v9 + 328), (std::stringbuf::string_type *)v96);
    uint64_t v73 = v96[23] >= 0 ? v96 : *(_BYTE **)v96;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)uint64_t v113 = v71;
    *(_WORD *)&v113[4] = 1024;
    *(_DWORD *)&v113[6] = v44;
    *(_WORD *)int v114 = 2080;
    *(void *)&v114[2] = v73;
    _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEBUG,  "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s",  buf,  0x18u);
    if ((v96[23] & 0x80000000) != 0) {
      operator delete(*(void **)v96);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101894A30);
    }
    int v76 = qword_101934A78;
    sub_100C0B75C((unsigned __int16 *)(v9 + 328), (std::stringbuf::string_type *)__p);
    if (SBYTE3(v109) >= 0) {
      uint64_t v77 = __p;
    }
    else {
      uint64_t v77 = *(_BYTE **)__p;
    }
    *(_DWORD *)int v96 = 67109634;
    *(_DWORD *)&v96[4] = v71;
    *(_WORD *)&v96[8] = 1024;
    *(_DWORD *)&v96[10] = v44;
    *(_WORD *)&v96[14] = 2080;
    *(void *)&v96[16] = v77;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v76,  2LL,  "TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s",  v96,  24,  v85);
    int v79 = v78;
    if (SBYTE3(v109) < 0) {
      operator delete(*(void **)__p);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::Key LatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, con st CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]",  "%s\n",  v79);
  }

  if (v12) {
    free(v12);
  }
}

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 6u:
          int v76 = operator new(0x18uLL);
          sub_101103644((uint64_t)v76);
          uint64_t v77 = *(void *)(a1 + 64);
          *(void *)(a1 + 64) = v76;
          if (v77)
          {
            (*(void (**)(uint64_t))(*(void *)v77 + 8LL))(v77);
            int v76 = *(void **)(a1 + 64);
          }

          goto LABEL_98;
        case 7u:
          int v76 = operator new(0x18uLL);
          sub_101103644((uint64_t)v76);
          int v78 = *(void *)(a1 + 56);
          *(void *)(a1 + 56) = v76;
          if (v78)
          {
            (*(void (**)(uint64_t))(*(void *)v78 + 8LL))(v78);
            int v76 = *(void **)(a1 + 56);
          }

          goto LABEL_98;
        case 8u:
          *(_BYTE *)(a1 + 132) |= 8u;
          int v79 = *((void *)this + 1);
          if (v79 >= *((void *)this + 2))
          {
            v82 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v80 = v79 + 1;
            uint64_t v81 = *(unsigned __int8 *)(*(void *)this + v79);
            *((void *)this + 1) = v80;
            v82 = v81 != 0;
          }

          *(_BYTE *)(a1 + 129) = v82;
          goto LABEL_101;
        case 9u:
          *(_BYTE *)(a1 + 132) |= 4u;
          int v83 = *((void *)this + 1);
          if (v83 >= *((void *)this + 2))
          {
            unsigned int v86 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v84 = v83 + 1;
            uint64_t v85 = *(unsigned __int8 *)(*(void *)this + v83);
            *((void *)this + 1) = v84;
            unsigned int v86 = v85 != 0;
          }

          *(_BYTE *)(a1 + 128) = v86;
          goto LABEL_101;
        case 0xAu:
          sub_1010A0324(v10);
          int v47 = *(void *)(a1 + 104);
LABEL_97:
          int v76 = *(void **)(v47 - 8);
LABEL_98:
          if (PB::Reader::placeMark(this, v119, v45, v46)
            && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v76 + 16LL))(v76, this) & 1) != 0)
          {
            goto LABEL_100;
          }

          return 0LL;
        default:
          if ((PB::Reader::skip(this, v19 >> 3, v19 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_101;
      }
    }

    int v23 = 0;
    int v24 = 0;
    int v19 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      uint64_t v25 = v4 + 1;
      uint64_t v26 = *(_BYTE *)(v16 + v4);
      *((void *)this + 1) = v25;
      v19 |= (unint64_t)(v26 & 0x7F) << v23;
      if ((v26 & 0x80) == 0) {
        goto LABEL_21;
      }
      v23 += 7;
      uint64_t v4 = v25;
      if (v24++ >= 9)
      {
LABEL_20:
        int v19 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

  uint64_t result = *(float *)(a2 + 252);
  v5 |= 0x10000000000000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 252) = result;
  int v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x800000000000000LL) == 0)
  {
LABEL_36:
    if ((v7 & 0x8000000000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_103;
  }

  PB::TextFormatter::format(this, "hgArclengthZOverEpoch", *(float *)(a1 + 176));
  int v6 = *v5;
  int v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x400000000LL) == 0)
  {
LABEL_35:
    if ((v6 & 0x800000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_103;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 252), 0x1Fu);
  int v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800000000000000LL) == 0)
  {
LABEL_36:
    if ((v6 & 0x8000000000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_103;
  }

  uint64_t result = *(float *)(a2 + 148);
  v5 |= 0x400000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 148) = result;
  uint64_t v4 = *v3;
  int v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x40000000000000LL) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_103;
  }

  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1", *(float *)(a1 + 100));
  int v6 = *v5;
  int v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_103;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0x16u);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000LL) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_103;
  }

  uint64_t result = *(float *)(a2 + 72);
  v5 |= 0x8000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 72) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_103;
  }

  PB::TextFormatter::format(this, "kAudioDvChaosThresholdStretchRO", *(float *)(a1 + 56));
  int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_20:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_103;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x71u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_103;
  }

  uint64_t v26 = *(_DWORD *)(a2 + 48);
  v3 |= 0x40uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 48) = v26;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000000000000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_103;
  }

  PB::TextFormatter::format(this, "epochNumber", *(_DWORD *)(a1 + 40));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x2000000000000LL) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000000000000LL) == 0) {
      goto LABEL_23;
    }
    goto LABEL_103;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 172), 0x76u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x20) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000000000000LL) == 0) {
      goto LABEL_24;
    }
    goto LABEL_103;
  }

  int v52 = *(_BYTE *)(a2 + 185);
  v3 |= 0x800000000000uLL;
  *(void *)(result + 188) = v3;
  *(_BYTE *)(result + 185) = v52;
  if ((*(void *)(a2 + 188) & 0x2000000000000LL) != 0) {
    goto LABEL_102;
  }
  return result;
}

LABEL_107:
  uint64_t v61 = *(void *)(a1 + 120);
  if (!v61) {
    uint64_t v61 = *(void *)(qword_1019A0978 + 120);
  }
  v62 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100079C68(v61, a2);
  int v63 = (int)v62;
  else {
    int v64 = 1;
  }
  uint64_t v4 = (v4 + v63 + v64 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x8000) != 0)
  {
LABEL_113:
    uint64_t v65 = *(void *)(a1 + 128);
    if (!v65) {
      uint64_t v65 = *(void *)(qword_1019A0978 + 128);
    }
    int v66 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007A280(v65, a2);
    int v67 = (int)v66;
    else {
      int v68 = 1;
    }
    uint64_t v4 = (v4 + v67 + v68 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
  }

  uint64_t v41 = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 364) |= 0x80000u;
  *(void *)(a1 + 120) = v41;
  uint64_t v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x100000) == 0)
  {
LABEL_64:
    if ((v13 & 0x200000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_109;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x24,  (int)a2,  *(double *)(v5 + 216),  a3);
  int v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 0x10) == 0)
  {
LABEL_38:
    if ((v7 & 0x20) == 0) {
      goto LABEL_39;
    }
    goto LABEL_109;
  }

  if (qword_101934A20 != -1) {
    dispatch_once(&qword_101934A20, &stru_101835C50);
  }
  v46 = (os_log_s *)off_101934A28;
  if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)int v60 = 2082;
    *(void *)&v60[2] = "";
    uint64_t v61 = 2081;
    v62 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Table was created by this device (serial numbers match). Keeping, table:%{private, lo cation:escape_only}s}",  buf,  0x1Cu);
  }

  uint64_t v10 = 1;
LABEL_112:
LABEL_39:
  sub_1004F2598();
  sub_1004F5DC4((uint64_t)buf);
  if (v56 >= 0) {
    int v23 = HIBYTE(v56);
  }
  else {
    int v23 = __n;
  }
  int v24 = BYTE3(v62);
  uint64_t v25 = SBYTE3(v62);
  if (SBYTE3(v62) < 0) {
    int v24 = *(void *)v60;
  }
  if (v23 != v24)
  {
    int v35 = 0;
    if ((SBYTE3(v62) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_70;
  }

  if (SBYTE3(v62) >= 0) {
    uint64_t v26 = buf;
  }
  else {
    uint64_t v26 = *(uint8_t **)buf;
  }
  if (v56 < 0)
  {
    int v35 = memcmp(__s1, v26, __n) == 0;
    goto LABEL_60;
  }

  if (HIBYTE(v56))
  {
    int v27 = HIBYTE(v56) - 1LL;
    p_s1 = &__s1;
    do
    {
      uint64_t v30 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      uint64_t v29 = v30;
      int v32 = *v26++;
      int v31 = v32;
      uint64_t v34 = v27-- != 0;
      int v35 = v29 == v31;
    }

    while (v29 == v31 && v34);
LABEL_60:
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_70;
  }

  int v35 = 1;
  if ((SBYTE3(v62) & 0x80000000) == 0)
  {
LABEL_61:
    if (!v35) {
      goto LABEL_82;
    }
    goto LABEL_71;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", self->_nHighCatherine),  @"nHighCatherine");
  has = self->_has;
  if ((*(_WORD *)&has & 0x8000) == 0)
  {
LABEL_85:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_86;
    }
    goto LABEL_109;
  }

  if (v13)
  {
    uint64_t v81 = v13;
    operator delete(v13);
  }

  if (v83)
  {
    int v84 = (char *)v83;
    operator delete(v83);
  }

  return HIDWORD(v70);
}

  uint64_t v61 = *(void *)(a1 + 120);
  if (!v61) {
    uint64_t v61 = *(void *)(qword_1019A11B8 + 120);
  }
  v62 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001F1B28(v61);
  int v63 = (int)v62;
  else {
    int v64 = 1;
  }
  uint64_t v4 = (v4 + v63 + v64 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x8000) != 0)
  {
LABEL_113:
    uint64_t v65 = *(void *)(a1 + 128);
    if (!v65) {
      uint64_t v65 = *(void *)(qword_1019A11B8 + 128);
    }
    int v66 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001F4E08(v65, a2);
    int v67 = (int)v66;
    else {
      int v68 = 1;
    }
    uint64_t v4 = (v4 + v67 + v68 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 488);
  }

  if (sub_100E575B0())
  {
    sub_1002A5370(buf);
    LODWORD(__p.__r_.__value_.__l.__data_) = *(void *)(a1 + 256);
    sub_1002AC220((uint64_t)buf, "fenceUpdate", &__p);
    sub_1002AC7B8((uint64_t)buf, "horizontalAccuracy", &v100[20]);
    LODWORD(__p.__r_.__value_.__l.__data_) = v33;
    sub_1002AC220((uint64_t)buf, "numOfDispatchedChecks", &__p);
    sub_1002AC7B8((uint64_t)buf, "minDistanceToFence", &v98);
    sub_100E57614((uint64_t)buf, (uint64_t)"locationd");
    sub_1002A5590(buf);
  }

  if (v96)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    int v52 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEBUG,  "Fence: Dispatch continuous engagement",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101866E28);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      LODWORD(v90) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Dispatch continuous engagement",  &__p,  v90);
      v82 = (char *)v81;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleLocation(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPrivate &)",  "%s\n",  v81);
      if (v82 != buf) {
        free(v82);
      }
      unsigned int v50 = a1 + 1312;
      uint64_t v49 = (double *)(a1 + 904);
    }

    uint64_t v53 = v98 - *(double *)&v100[20];
    *(double *)(a1 + 736) = v53;
    *(void *)(a1 + 744) = *(void *)&v103[12];
    sub_1009F3E60(a1, a4);
    (*(void (**)(void))(**(void **)(a1 + 1768) + 120LL))(*(void *)(a1 + 1768));
  }

  if (!v33 && *(_DWORD *)(a1 + 684) && sub_100A0CC50(v49, a4)) {
    sub_100B5A24C(v50);
  }
  size = (std::__shared_weak_count *)v99.__r_.__value_.__l.__size_;
  if (v99.__r_.__value_.__l.__size_)
  {
    int v55 = (unint64_t *)(v99.__r_.__value_.__l.__size_ + 8);
    do
      int v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }

      sub_100A69520(a2, buf);
      sub_10005F550((uint64_t)(v5 + 794), (__int128 *)buf);
      v54 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        int v55 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          int v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }

      int v52 = 1;
      goto LABEL_114;
    }

    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10186A5E8);
    }
    uint64_t v49 = (os_log_s *)p_vtable[269];
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v50 = (int)*(double *)(a2 + 40);
      int v51 = (int)*(double *)(a1 + 6144);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = (int)v48;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v50;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "WifiFlow, scanreply, warn, pre-privacy, %{public}d, scan, %{public}d, privacy, %{public}d",  buf,  0x14u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_10186A5E8);
      }
      v82 = p_vtable[269];
      int v83 = (int)*(double *)(a2 + 40);
      int v84 = (int)*(double *)(a1 + 6144);
      *(_DWORD *)v126 = 67240704;
      *(_DWORD *)&v126[4] = (int)v48;
      *(_WORD *)&v126[8] = 1026;
      *(_DWORD *)&v126[10] = v83;
      *(_WORD *)&v126[14] = 1026;
      *(_DWORD *)&v126[16] = v84;
      LODWORD(v98) = 20;
      uint64_t v85 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v82,  0LL,  "WifiFlow, scanreply, warn, pre-privacy, %{public}d, scan, %{public}d, privacy, %{public}d",  v126,  v98);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const",  "%s\n",  v85);
      if (v85 != buf) {
        free(v85);
      }
    }

    int v52 = 0;
    *((_BYTE *)v5 + 808) = 0;
    goto LABEL_114;
  }

  *((_BYTE *)v5 + 808) = 0;
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10186A5E8);
  }
  int v11 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiFlow, scanreply, warn, ToggleOff", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10186A5E8);
    }
    *(_WORD *)v126 = 0;
    int v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "WifiFlow, scanreply, warn, ToggleOff",  v126,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const",  "%s\n",  v12);
    goto LABEL_131;
  }

  int v59 = *(void *)(a1 + 112);
  if (!v59) {
    int v59 = *(void *)(qword_1019A1CE8 + 112);
  }
  int v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2AEF8(v59, a2);
  uint64_t v61 = (int)v60;
  else {
    v62 = 1;
  }
  uint64_t v4 = (v4 + v61 + v62 + 1);
  unsigned int v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x8000) != 0)
  {
LABEL_113:
    int v63 = *(void *)(a1 + 120);
    if (!v63) {
      int v63 = *(void *)(qword_1019A1CE8 + 120);
    }
    int v64 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B2B904(v63, a2);
    uint64_t v65 = (int)v64;
    else {
      int v66 = 1;
    }
    uint64_t v4 = (v4 + v65 + v66 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 184);
  }

            PB::Reader::recallMark(this, v105);
          }

          else
          {
            int v76 = *(char **)(a1 + 64);
            int v75 = *(void *)(a1 + 72);
            if ((unint64_t)v76 >= v75)
            {
              uint64_t v89 = (char *)*v10;
              v90 = (v76 - (_BYTE *)*v10) >> 3;
              int v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 61) {
LABEL_168:
              }
                sub_100007008();
              int v92 = v75 - (void)v89;
              if (v92 >> 2 > v91) {
                int v91 = v92 >> 2;
              }
              else {
                uint64_t v93 = v91;
              }
              if (v93)
              {
                int v94 = (char *)sub_1000071BC(v104, v93);
                uint64_t v89 = *(char **)(a1 + 56);
                int v76 = *(char **)(a1 + 64);
              }

              else
              {
                int v94 = 0LL;
              }

              int v99 = &v94[8 * v90];
              *(void *)int v99 = 0LL;
              int v72 = v99 + 8;
              while (v76 != v89)
              {
                int v100 = *((void *)v76 - 1);
                v76 -= 8;
                *((void *)v99 - 1) = v100;
                v99 -= 8;
              }

              *(void *)(a1 + 56) = v99;
              *(void *)(a1 + 64) = v72;
              *(void *)(a1 + 72) = &v94[8 * v93];
              if (v89) {
                operator delete(v89);
              }
            }

            else
            {
              *(void *)int v76 = 0LL;
              int v72 = v76 + 8;
            }

            *(void *)(a1 + 64) = v72;
LABEL_153:
            uint64_t v101 = *((void *)this + 1);
            if (v101 <= 0xFFFFFFFFFFFFFFF7LL && v101 + 8 <= *((void *)this + 2))
            {
              *(v72 - 1) = *(void *)(*(void *)this + v101);
LABEL_157:
              *((void *)this + 1) += 8LL;
            }

            else
            {
LABEL_155:
              *((_BYTE *)this + 24) = 1;
            }
          }

  uint64_t result = *(float *)(a2 + 268);
  v5 |= 0x100000000000000uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 268) = result;
  int v7 = *v3;
  if ((*v3 & 0x2000000000000LL) == 0)
  {
LABEL_42:
    if ((v7 & 0x8000000000000000LL) == 0) {
      goto LABEL_43;
    }
    goto LABEL_109;
  }

  PB::TextFormatter::format(this, "hgDeltaVXYZUnconditional", *(float *)(a1 + 200));
  int v6 = *v5;
  int v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x10000000000LL) == 0)
  {
LABEL_41:
    if ((v6 & 0x20000000000LL) == 0) {
      goto LABEL_42;
    }
    goto LABEL_109;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 268), 0x25u);
  int v6 = *v4;
  if ((*v4 & 0x2000000000000LL) == 0)
  {
LABEL_42:
    if ((v6 & 0x8000000000000000LL) == 0) {
      goto LABEL_43;
    }
    goto LABEL_109;
  }

  uint64_t result = *(float *)(a2 + 232);
  v5 |= 0x80000000000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 232) = result;
  uint64_t v4 = *v3;
  int v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x200000000000000LL) == 0)
  {
LABEL_34:
    if ((v4 & 0x40) == 0) {
      goto LABEL_35;
    }
    goto LABEL_109;
  }

  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithAudio", *(float *)(a1 + 124));
  int v6 = *v5;
  int v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_109;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0x1Cu);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 2) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_109;
  }

  uint64_t result = *(float *)(a2 + 272);
  int v8 = v6 >> 16;
  v6 |= 2uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 326) = v8;
  *(_WORD *)(a1 + 324) = v6;
  *(float *)(a1 + 272) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000000000000LL) == 0)
  {
LABEL_27:
    if ((v8 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_109;
  }

  PB::TextFormatter::format(this, "kAudioDvMaxRmsThresholdCenterRO", *(float *)(a1 + 80));
  int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_26:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_109;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 272), 0x77u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000000000LL) == 0)
  {
LABEL_27:
    if ((v7 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_109;
  }

  uint64_t v33 = *(_BYTE *)(a2 + 181);
  v3 |= 0x400000000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 181) = v33;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 4) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_109;
  }

  PB::TextFormatter::format(this, "kChaosOrSaturationMetRO0", *(_BYTE *)(a1 + 177));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x80000000000000LL) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000000000000LL) == 0) {
      goto LABEL_29;
    }
    goto LABEL_109;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 0x3EDu);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x40000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_109;
  }

            PB::Reader::recallMark(this, v105);
          }

          else
          {
            int v76 = *(char **)(a1 + 64);
            int v75 = *(void *)(a1 + 72);
            if ((unint64_t)v76 >= v75)
            {
              uint64_t v89 = (char *)*v10;
              v90 = (v76 - (_BYTE *)*v10) >> 3;
              int v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 61) {
LABEL_168:
              }
                sub_100007008();
              int v92 = v75 - (void)v89;
              if (v92 >> 2 > v91) {
                int v91 = v92 >> 2;
              }
              else {
                uint64_t v93 = v91;
              }
              if (v93)
              {
                int v94 = (char *)sub_1000071BC(v104, v93);
                uint64_t v89 = *(char **)(a1 + 56);
                int v76 = *(char **)(a1 + 64);
              }

              else
              {
                int v94 = 0LL;
              }

              int v99 = &v94[8 * v90];
              *(void *)int v99 = 0LL;
              int v72 = v99 + 8;
              while (v76 != v89)
              {
                int v100 = *((void *)v76 - 1);
                v76 -= 8;
                *((void *)v99 - 1) = v100;
                v99 -= 8;
              }

              *(void *)(a1 + 56) = v99;
              *(void *)(a1 + 64) = v72;
              *(void *)(a1 + 72) = &v94[8 * v93];
              if (v89) {
                operator delete(v89);
              }
            }

            else
            {
              *(void *)int v76 = 0LL;
              int v72 = v76 + 8;
            }

            *(void *)(a1 + 64) = v72;
LABEL_153:
            uint64_t v101 = *((void *)this + 1);
            if (v101 <= 0xFFFFFFFFFFFFFFF7LL && v101 + 8 <= *((void *)this + 2))
            {
              *(v72 - 1) = *(void *)(*(void *)this + v101);
LABEL_157:
              *((void *)this + 1) += 8LL;
            }

            else
            {
LABEL_155:
              *((_BYTE *)this + 24) = 1;
            }
          }

          *(v50 - 1) = v67;
        }
      }

      else if ((PB::Reader::skip(this, v15 >> 3, v15 & 7, 0) & 1) == 0)
      {
        return 0LL;
      }

      uint64_t v4 = *((void *)this + 1);
      uint64_t v5 = *((void *)this + 2);
      int v6 = *((unsigned __int8 *)this + 24);
      if (v4 >= v5 || v6 != 0) {
        return v6 == 0;
      }
    }

    uint64_t v18 = 0;
    int v19 = 0;
    int v15 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      int v20 = v4 + 1;
      uint64_t v21 = *(_BYTE *)(v12 + v4);
      *((void *)this + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0) {
        goto LABEL_21;
      }
      v18 += 7;
      uint64_t v4 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        int v15 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

LABEL_141:
  uint64_t v77 = *(void *)(a1 + 152);
  if (!v77) {
    uint64_t v77 = *(void *)(qword_1019A0978 + 152);
  }
  int v78 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007B888(v77, a2);
  int v79 = (int)v78;
  else {
    int v80 = 1;
  }
  uint64_t v4 = (v4 + v79 + v80 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x80000) == 0)
  {
LABEL_124:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_153;
  }

  uint64_t v77 = *(void *)(a1 + 152);
  if (!v77) {
    uint64_t v77 = *(void *)(qword_1019A11B8 + 152);
  }
  int v78 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001F9638(v77, a2);
  int v79 = (int)v78;
  else {
    int v80 = 1;
  }
  uint64_t v4 = (v4 + v79 + v80 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x80000) == 0)
  {
LABEL_124:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_153;
  }

  sub_10049AD68(a1 + 8);
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101861E70);
  }
  int v123 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    int v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5);
    *(_DWORD *)buf = 134349312;
    *(void *)&buf[4] = v124;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a5;
    _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEBUG,  "FenceCal: fetched, %{public}ld, APs, forceFetchingExpectedAps, %{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101861E70);
    }
    int v219 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5);
    *(_DWORD *)__p = 134349312;
    *(void *)&__p[4] = v219;
    *(_WORD *)&__p[12] = 1026;
    *(_DWORD *)unsigned int v275 = a5;
    LODWORD(v255) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "FenceCal: fetched, %{public}ld, APs, forceFetchingExpectedAps, %{public}d",  __p,  v255);
    unsigned int v221 = (char *)v220;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)",  "%s\n",  v220);
    if (v221 != buf) {
      free(v221);
    }
  }

  if (byte_10198E4A8)
  {
    if (byte_1019A1880)
    {
      v126 = *(void *)(a1 + 8);
      for (j = *(void *)(a1 + 16); v126 != j; v126 += 96LL)
      {
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101861E70);
        }
        int v127 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          Current = CFAbsoluteTimeGetCurrent();
          sub_100C39CE0(v126, (std::stringbuf::string_type *)buf, Current);
          uint64_t v129 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)__p = 136380675;
          *(void *)&__p[4] = v129;
          _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEBUG,  "FenceCal: expectedAp, %{private}s",  __p,  0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101861E70);
          }
          int v130 = qword_101934878;
          int v131 = CFAbsoluteTimeGetCurrent();
          sub_100C39CE0(v126, (std::stringbuf::string_type *)__p, v131);
          int v132 = __p;
          if (v275[9] < 0) {
            int v132 = *(_BYTE **)__p;
          }
          LODWORD(v277.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v277.__r_.__value_.__r.__words + 4) = (std::string::size_type)v132;
          LODWORD(v255) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v130,  2LL,  "FenceCal: expectedAp, %{private}s",  &v277,  v255);
          uint64_t v134 = v133;
          if ((v275[9] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::Combine dFence &, BOOL, BOOL)",  "%s\n",  v134);
          if (v134 != buf) {
            free(v134);
          }
        }
      }
    }
  }

  *(_OWORD *)&v277.__r_.__value_.__r.__words[1] = 0uLL;
  v277.__r_.__value_.__r.__words[0] = (std::string::size_type)&v277.__r_.__value_.__l.__size_;
  v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 352) - *(void *)(a1 + 344)) >> 5);
  if (v135 <= 0xB3)
  {
    int v136 = 0;
    v261 = 136316674LL;
    do
    {
      uint64_t v138 = *(void *)(a1 + 8);
      int v137 = *(void *)(a1 + 16);
      if (v135 >= 0xAAAAAAAAAAAAAAABLL * ((v137 - v138) >> 5)) {
        break;
      }
      unsigned int v266 = v136;
      while (v138 != v137)
      {
        int v139 = (int)(vabdd_f64(*(double *)(v138 + 8), *(double *)(a1 + 416)) / v270);
        int v140 = (int)(vabdd_f64(*(double *)(v138 + 16), *(double *)(a1 + 424)) / v269);
        int v141 = v140 + v271 * v139;
        uint64_t v142 = *(void *)(a1 + 448);
        if (v141 >= (*(void *)(a1 + 456) - v142) >> 6)
        {
          sub_101254308();
          abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLWifiFenceCalculator.mm",  427,  "calculate");
          __break(1u);
        }

        *(void *)buf = v138;
        if (!*((_BYTE *)sub_100950024((uint64_t **)&v277, (void *)v138, (uint64_t)&unk_1012CF090, (_OWORD **)buf) + 128))
        {
          v143 = v142 + (v141 << 6);
          int v145 = *(_DWORD *)(v143 + 48);
          unsigned int v144 = (_DWORD *)(v143 + 48);
          int v146 = v144 + 1;
          if (v145 < v144[1])
          {
            if (byte_10198E4A8 && byte_1019A1880)
            {
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101861E70);
              }
              log = (os_log_s *)qword_101934878;
              if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
              {
                int v147 = CFAbsoluteTimeGetCurrent();
                sub_100C39CE0(v138, (std::stringbuf::string_type *)__p, v147);
                int v148 = v275[9];
                unsigned int v149 = *(_BYTE **)__p;
                int v264 = *v146;
                v272.__r_.__value_.__r.__words[0] = *(void *)v138;
                sub_1007EC454(&v273);
                int v150 = __p;
                if (v148 < 0) {
                  int v150 = v149;
                }
                int v151 = &v273;
                if ((v273.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  int v151 = (std::stringbuf::string_type *)v273.__r_.__value_.__r.__words[0];
                }
                v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 352) - *(void *)(a1 + 344)) >> 5);
                *(_DWORD *)buf = v261;
                *(void *)&buf[4] = v150;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v264;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v140;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v139;
                *(_WORD *)&buf[30] = 1024;
                *(_DWORD *)&buf[32] = v140 + v271 * v139;
                *(_WORD *)&buf[36] = 2080;
                *(void *)&buf[38] = v151;
                *(_WORD *)&buf[46] = 2048;
                v279 = v152;
                _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "FenceCal: ap2Tile, %s, maxApsPerTile, %2d, left, %4d, top, %4d, tile, %4d, mac, %-24s, numAPs %4zu",  buf,  0x38u);
                if ((v275[9] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934870 != -1) {
                  dispatch_once(&qword_101934870, &stru_101861E70);
                }
                loga = qword_101934878;
                int v177 = CFAbsoluteTimeGetCurrent();
                sub_100C39CE0(v138, &v273, v177);
                int v178 = (char)v273.__r_.__value_.__s.__size_;
                v179 = v273.__r_.__value_.__r.__words[0];
                v180 = *v146;
                sub_1007EC454(&v272);
                v181 = &v273;
                if (v178 < 0) {
                  v181 = (std::stringbuf::string_type *)v179;
                }
                int v182 = &v272;
                if ((v272.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  int v182 = (std::string *)v272.__r_.__value_.__r.__words[0];
                }
                int v183 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 352) - *(void *)(a1 + 344)) >> 5);
                *(_DWORD *)__p = v261;
                *(void *)&__p[4] = v181;
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)unsigned int v275 = v180;
                *(_WORD *)&v275[4] = 1024;
                *(_DWORD *)&v275[6] = v140;
                *(_WORD *)&v275[10] = 1024;
                *(_DWORD *)&v275[12] = v139;
                *(_WORD *)&v275[16] = 1024;
                *(_DWORD *)&v275[18] = v140 + v271 * v139;
                *(_WORD *)&v275[22] = 2080;
                *(void *)&v275[24] = v182;
                *(_WORD *)&v275[32] = 2048;
                int v276 = v183;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  loga,  2LL,  "FenceCal: ap2Tile, %s, maxApsPerTile, %2d, left, %4d, top, %4d, tile, %4d, mac, %-24s, numAPs %4zu",  __p,  56,  v256,  LODWORD(v257),  v258,  v259,  v261);
                unsigned int v185 = v184;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::C ombinedFence &, BOOL, BOOL)",  "%s\n",  v185);
                if (v185 != buf) {
                  free(v185);
                }
              }
            }

            ++*v144;
            *(void *)buf = v138;
            *((_BYTE *)sub_100950024((uint64_t **)&v277, (void *)v138, (uint64_t)&unk_1012CF090, (_OWORD **)buf) + 128) = 1;
            v153 = *(_OWORD **)(a1 + 352);
            v154 = *(void *)(a1 + 360);
            if ((unint64_t)v153 >= v154)
            {
              int v160 = 0xAAAAAAAAAAAAAAABLL * (((char *)v153 - *v263) >> 5);
              v161 = v160 + 1;
              if (v160 + 1 > 0x2AAAAAAAAAAAAAALL) {
                sub_100007008();
              }
              v162 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (void)*v263) >> 5);
              if (2 * v162 > v161) {
                v161 = 2 * v162;
              }
              if (v162 >= 0x155555555555555LL) {
                v163 = 0x2AAAAAAAAAAAAAALL;
              }
              else {
                v163 = v161;
              }
              if (v163) {
                int v164 = (char *)sub_1003F6AEC(a1 + 360, v163);
              }
              else {
                int v164 = 0LL;
              }
              int v165 = &v164[96 * v160];
              int v166 = *(_OWORD *)(v138 + 16);
              *(_OWORD *)int v165 = *(_OWORD *)v138;
              *((_OWORD *)v165 + 1) = v166;
              unsigned int v167 = *(_OWORD *)(v138 + 32);
              int v168 = *(_OWORD *)(v138 + 48);
              int v169 = *(_OWORD *)(v138 + 80);
              *((_OWORD *)v165 + 4) = *(_OWORD *)(v138 + 64);
              *((_OWORD *)v165 + 5) = v169;
              *((_OWORD *)v165 + 2) = v167;
              *((_OWORD *)v165 + 3) = v168;
              v171 = *(char **)(a1 + 344);
              v170 = *(char **)(a1 + 352);
              v172 = v165;
              if (v170 != v171)
              {
                do
                {
                  int v173 = *((_OWORD *)v170 - 5);
                  *((_OWORD *)v172 - 6) = *((_OWORD *)v170 - 6);
                  *((_OWORD *)v172 - 5) = v173;
                  int v174 = *((_OWORD *)v170 - 4);
                  int v175 = *((_OWORD *)v170 - 3);
                  unsigned int v176 = *((_OWORD *)v170 - 1);
                  *((_OWORD *)v172 - 2) = *((_OWORD *)v170 - 2);
                  *((_OWORD *)v172 - 1) = v176;
                  *((_OWORD *)v172 - 4) = v174;
                  *((_OWORD *)v172 - 3) = v175;
                  v172 -= 96;
                  v170 -= 96;
                }

                while (v170 != v171);
                v170 = *v263;
              }

              int v159 = v165 + 96;
              *(void *)(a1 + 344) = v172;
              *(void *)(a1 + 352) = v165 + 96;
              *(void *)(a1 + 360) = &v164[96 * v163];
              if (v170) {
                operator delete(v170);
              }
            }

            else
            {
              int v155 = *(_OWORD *)(v138 + 16);
              void *v153 = *(_OWORD *)v138;
              v153[1] = v155;
              int v156 = *(_OWORD *)(v138 + 32);
              int v157 = *(_OWORD *)(v138 + 48);
              unsigned int v158 = *(_OWORD *)(v138 + 80);
              v153[4] = *(_OWORD *)(v138 + 64);
              v153[5] = v158;
              v153[2] = v156;
              v153[3] = v157;
              int v159 = v153 + 6;
            }

            *(void *)(a1 + 352) = v159;
            if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v159 - *(void *)(a1 + 344)) >> 5) >= 0xB4)
            {
              sub_100945F70(a1);
              break;
            }
          }
        }

        v138 += 96LL;
      }

      sub_100945F70(a1);
      int v186 = (v266 + 1) > 9 ? v266 + 1 : 1;
      int v187 = *(void *)(a1 + 448);
      v188 = *(void *)(a1 + 456);
      while (v187 != v188)
      {
        *(_DWORD *)(v187 + 52) += v186;
        v187 += 64LL;
      }

      v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 352) - *(void *)(a1 + 344)) >> 5);
      int v136 = v266 + 1;
    }

    while (v135 <= 0xB3);
  }

  sub_10049AD68((uint64_t)v263);
  sub_1009486E4((uint64_t)v259);
  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101861E70);
  }
  v189 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    int v191 = *(void *)(a1 + 344);
    v190 = *(void *)(a1 + 352);
    int v193 = *(void *)(a1 + 8);
    int v192 = *(void *)(a1 + 16);
    sub_100923668(a3, (std::stringbuf::string_type *)__p);
    *(_DWORD *)buf = 134284035;
    *(void *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v190 - v191) >> 5);
    unsigned int v194 = v275[9] >= 0 ? __p : *(_BYTE **)__p;
    *(_WORD *)&buf[12] = 2049;
    *(void *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * ((v192 - v193) >> 5);
    *(_WORD *)&buf[22] = 2081;
    *(void *)&buf[24] = v194;
    _os_log_impl( (void *)&_mh_execute_header,  v189,  OS_LOG_TYPE_DEBUG,  "FenceCal: chosen, %{private}lu, expected, %{private}lu, fence, %{private}s",  buf,  0x20u);
    if ((v275[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101861E70);
    }
    int v222 = qword_101934878;
    v224 = *(void *)(a1 + 344);
    int v223 = *(void *)(a1 + 352);
    v226 = *(void *)(a1 + 8);
    v225 = *(void *)(a1 + 16);
    sub_100923668(a3, &v273);
    *(_DWORD *)__p = 134284035;
    *(void *)&__p[4] = 0xAAAAAAAAAAAAAAABLL * ((v223 - v224) >> 5);
    if ((v273.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v227 = &v273;
    }
    else {
      int v227 = (std::stringbuf::string_type *)v273.__r_.__value_.__r.__words[0];
    }
    *(_WORD *)&__p[12] = 2049;
    *(void *)unsigned int v275 = 0xAAAAAAAAAAAAAAABLL * ((v225 - v226) >> 5);
    *(_WORD *)&v275[8] = 2081;
    *(void *)&v275[10] = v227;
    LODWORD(v255) = 32;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v222,  2LL,  "FenceCal: chosen, %{private}lu, expected, %{private}lu, fence, %{private}s",  __p,  v255);
    int v229 = v228;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::CombinedFence &, BOOL, BOOL)",  "%s\n",  v229);
    if (v229 != buf) {
      free(v229);
    }
  }

  if (byte_10198E4A8)
  {
    if (byte_1019A1880)
    {
      int v195 = *(void *)(a1 + 448);
      int v196 = *(void *)(a1 + 456);
      if (v195 != v196)
      {
        v197 = 0LL;
        do
        {
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101861E70);
          }
          v198 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
          {
            v199 = *(_DWORD *)(v195 + 48);
            int v200 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5);
            int v201 = (*(double *)v195 + *(double *)(v195 + 16)) * 0.5;
            int v202 = (*(double *)(v195 + 8) + *(double *)(v195 + 24)) * 0.5;
            *(_DWORD *)buf = 134219008;
            *(void *)&buf[4] = v197;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v199;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v200;
            *(_WORD *)&buf[28] = 2048;
            *(double *)&buf[30] = v201;
            *(_WORD *)&buf[38] = 2048;
            *(double *)&buf[40] = v202;
            _os_log_impl( (void *)&_mh_execute_header,  v198,  OS_LOG_TYPE_DEBUG,  "FenceCal: calTile, %2zu : %3d / %3zu, %.8lf, %.8lf, FF0000FF",  buf,  0x30u);
            ++v197;
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101861E70);
            }
            unsigned int v203 = *(_DWORD *)(v195 + 48);
            int v204 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5);
            int v205 = (*(double *)v195 + *(double *)(v195 + 16)) * 0.5;
            v206 = (*(double *)(v195 + 8) + *(double *)(v195 + 24)) * 0.5;
            *(_DWORD *)__p = 134219008;
            *(void *)&__p[4] = v197;
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)unsigned int v275 = v203;
            *(_WORD *)&v275[4] = 2048;
            *(void *)&v275[6] = v204;
            *(_WORD *)&v275[14] = 2048;
            *(double *)&v275[16] = v205;
            *(_WORD *)&v275[24] = 2048;
            *(double *)&v275[26] = v206;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "FenceCal: calTile, %2zu : %3d / %3zu, %.8lf, %.8lf, FF0000FF",  (size_t)__p,  48,  v256,  v257,  *(double *)&v258);
            v208 = (char *)v207;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::Combi nedFence &, BOOL, BOOL)",  "%s\n",  v207);
            if (v208 != buf) {
              free(v208);
            }
            ++v197;
          }

          v195 += 64LL;
        }

        while (v195 != v196);
      }
    }
  }

  sub_100008390((uint64_t)&v277, (void *)v277.__r_.__value_.__l.__size_);
  return 1LL;
}

      unsigned int v86 = sub_100700B84(v73, (unsigned __int8 *)v72 + 32);
      if (v74 != v86)
      {
        int v87 = *(_DWORD *)(v86 + 280);
        if (v87 != -1)
        {
          _ZF = v272 == v87;
          int v88 = v257;
          if (!_ZF) {
            int v88 = 1;
          }
          if (v272 == -1 || !v88) {
            goto LABEL_162;
          }
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          uint64_t v89 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
          {
            v90 = (os_log_s *)(v72 + 7);
            int v245 = v74;
            int v249 = v73;
            int v91 = SHIBYTE(cap);
            int v92 = (void **)__dst[0];
            uint64_t v93 = *(unsigned __int8 *)(a1 + 619);
            int v94 = *(void *)(v65 + 72);
            int v237 = *(void *)(v65 + 80);
            log = v90;
            int v95 = sub_1009232CC(v65);
            *(_DWORD *)buf = 136381955;
            int v96 = __dst;
            if (v91 < 0) {
              int v96 = v92;
            }
            *(void *)&buf[4] = log;
            *(_WORD *)&buf[12] = 2082;
            *(void *)&buf[14] = v96;
            *(_WORD *)&buf[22] = 1026;
            *(_DWORD *)&buf[24] = v93;
            *(_WORD *)&buf[28] = 2049;
            *(void *)&buf[30] = v94;
            *(_WORD *)&buf[38] = 2049;
            *(void *)&buf[40] = v237;
            *(_WORD *)&buf[48] = 2050;
            *(double *)&buf[50] = v95;
            _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "#significantRegion: fence, %{private}s, loi fence event, id, %{public}s, hint, %{public}d, latLon, %{priva te}.6lf,%{private}.6lf, radius, %{public}.1lf",  buf,  0x3Au);
            int v74 = v245;
            uint64_t v73 = v249;
          }

          if (sub_1002921D0(115, 2))
          {
            int v246 = v74;
            int v250 = v73;
            bzero(buf, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101866E28);
            }
            int v100 = qword_101934878;
            uint64_t v101 = v72 + 7;
            int v102 = SHIBYTE(cap);
            int v103 = (void **)__dst[0];
            int v104 = *(unsigned __int8 *)(a1 + 619);
            int v238 = __str[3].__r_.__value_.__l.__data_;
            loga = (os_log_t)__str[3].__r_.__value_.__l.__size_;
            uint64_t v105 = sub_1009232CC((uint64_t)__str);
            *(_DWORD *)v328 = 136381955;
            int v106 = __dst;
            if (v102 < 0) {
              int v106 = v103;
            }
            *(void *)&v328[4] = v101;
            v329 = 2082;
            *(void *)v330 = v106;
            *(_WORD *)&v330[8] = 1026;
            *(_DWORD *)&v330[10] = v104;
            *(_WORD *)&v330[14] = 2049;
            *(void *)&v330[16] = v238;
            *(_WORD *)&v330[24] = 2049;
            *(void *)&v330[26] = loga;
            *(_WORD *)&v330[34] = 2050;
            *(double *)&v330[36] = v105;
            LODWORD(v231) = 58;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v100,  0LL,  "#significantRegion: fence, %{private}s, loi fence event, id, %{public}s, hint, %{public}d, latLon, %{priva te}.6lf,%{private}.6lf, radius, %{public}.1lf",  v328,  v231);
            int v108 = (char *)v107;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleLocationMonitoredFence(const CFAbsoluteTime, const CLDaemonLocation &, const CL DaemonLocationPrivate &, const CLFenceManager_Type::Fence &, CLFenceMonitorLogic::FenceMonitoringStatus &, const BOOL, const BOOL)",  "%s\n",  v107);
            if (v108 != buf) {
              free(v108);
            }
            int v74 = v246;
            uint64_t v73 = v250;
            uint64_t v65 = (uint64_t)__str;
          }

          (*(void (**)(void, int *, void *, _BYTE *))(**(void **)(a1 + 1768) + 424LL))( *(void *)(a1 + 1768),  &v272,  v72 + 4,  v320);
          if (*(_BYTE *)(a1 + 619)) {
            goto LABEL_162;
          }
          sub_1010DDBC0(v266, "LoiFence");
          sub_1009F57F8(a1, (uint64_t)(v72 + 4), &v272, (uint64_t)v320, v266, a6);
          if ((v267 & 0x80000000) == 0) {
            goto LABEL_162;
          }
          uint64_t v97 = v266;
          goto LABEL_161;
        }
      }

      sub_1010DDBC0(v268, "LoiFence");
      sub_1009F5248(a1, (uint64_t)(v72 + 4), &v272, v268);
      if (v269 < 0)
      {
        uint64_t v97 = v268;
LABEL_161:
        operator delete((void *)*v97);
      }

  if (!v117
    && v116 >= 0.0
    && v116 < 0.8
    && (*(_DWORD *)(a1 + 96) & 0xFFFFFFFD) == 1
    && (*(_DWORD *)&v285[24] & 0xFFFFFFFD) == 1)
  {
    *(_DWORD *)(a1 + 1104) = 10;
    *a3 = 1;
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v128 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v129 = *(void *)(a1 + 976);
      int v268 = *(void *)(a1 + 984);
      int v130 = *(_DWORD *)(a1 + 96);
      int v263 = sub_100832C40(v130);
      unsigned int v203 = *(void *)(a1 + 992);
      v206 = *(void *)(a1 + 1000);
      int v210 = *(void *)(a1 + 1016);
      int v214 = *(void *)(a1 + 1048);
      int v218 = *(void *)(a1 + 1064);
      int v222 = *(void *)(a1 + 1008);
      v226 = *(void *)(a1 + 1024);
      unsigned int v230 = *(void *)(a1 + 1056);
      v234 = *(void *)(a1 + 1072);
      int v238 = *(_DWORD *)(a1 + 1088);
      v242 = *(void *)(a1 + 1080);
      int v246 = *(unsigned __int8 *)(a1 + 1092);
      int v254 = *(_DWORD *)(a1 + 1456);
      int v131 = *(void *)(a1 + 1696);
      int v250 = *(void *)(v131 + 384);
      int v258 = *(void *)(v131 + 392);
      int v132 = *(_DWORD *)(a1 + 1096);
      int v133 = sub_100832C40(v132);
      *(_DWORD *)buf = 134355459;
      *(void *)&buf[4] = v129;
      *(_WORD *)&buf[12] = 2050;
      *(void *)&buf[14] = v268;
      v331 = 1026;
      v332 = v130;
      v333 = 2082;
      v334 = v263;
      v335 = 2049;
      v336 = v203;
      v337 = 2049;
      v338 = v206;
      v339 = 2049;
      v340 = v210;
      v341 = 2049;
      v342 = v214;
      v343 = 2049;
      v344 = v218;
      v345 = 2050;
      v346 = v222;
      v347 = 2050;
      v348 = v226;
      v349 = 2050;
      v350 = v230;
      v351 = 2050;
      v352 = v234;
      v353 = 1026;
      *(_DWORD *)v354 = v238;
      *(_WORD *)&v354[4] = 2050;
      *(void *)&v354[6] = v242;
      *(_WORD *)&v354[14] = 1026;
      *(_DWORD *)&v354[16] = v246;
      LOWORD(v355) = 1026;
      *(_DWORD *)((char *)&v355 + 2) = v254;
      HIWORD(v355) = 2050;
      *(void *)v356 = v250;
      *(_WORD *)&v356[8] = 1026;
      *(_DWORD *)v357 = v258;
      *(_WORD *)&v357[4] = 1026;
      v358 = v132;
      v359 = 2082;
      v360 = v133;
      v361 = 1026;
      v362 = *(_DWORD *)&v285[24];
      v363 = 2049;
      v364 = v280;
      v365 = 2049;
      v366 = *((void *)&v280 + 1);
      v367 = 2050;
      v368 = v281;
      v369 = 2050;
      v370 = v116;
      _os_log_impl( (void *)&_mh_execute_header,  v128,  OS_LOG_TYPE_DEBUG,  "#fusion barredNon1HzLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1 f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{publ ic}d,%{public}d,%{public}.3f,%{public}d,%{public}d,%{public}s,%{public}d,%{private}.7f,%{private}.7f,%{public}.1f,%{public}.3f",  buf,  0xEAu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      v269 = qword_101934968;
      unsigned int v167 = *(void *)(a1 + 976);
      v215 = *(const char **)(a1 + 984);
      int v168 = *(_DWORD *)(a1 + 96);
      int v169 = sub_100832C40(v168);
      v170 = *(void *)(a1 + 992);
      v207 = *(void *)(a1 + 1000);
      int v211 = *(void *)(a1 + 1016);
      int v219 = *(void *)(a1 + 1048);
      int v223 = *(void *)(a1 + 1064);
      int v227 = *(void *)(a1 + 1008);
      int v231 = *(void *)(a1 + 1024);
      v235 = *(void *)(a1 + 1056);
      unsigned int v239 = *(void *)(a1 + 1072);
      v243 = *(_DWORD *)(a1 + 1088);
      int v247 = *(void *)(a1 + 1080);
      v251 = *(unsigned __int8 *)(a1 + 1092);
      int v259 = *(_DWORD *)(a1 + 1456);
      v171 = *(void *)(a1 + 1696);
      int v255 = *(void *)(v171 + 384);
      int v264 = *(void *)(v171 + 392);
      v172 = *(_DWORD *)(a1 + 1096);
      int v173 = sub_100832C40(v172);
      int v286 = 134355459;
      v287 = v167;
      v288 = 2050;
      v289 = v215;
      int v290 = 1026;
      int v291 = v168;
      int v292 = 2082;
      unsigned int v293 = v169;
      int v294 = 2049;
      int v295 = v170;
      v296 = 2049;
      v297 = v207;
      v298 = 2049;
      int v299 = v211;
      int v300 = 2049;
      int v301 = v219;
      unsigned int v302 = 2049;
      int v303 = v223;
      int v304 = 2050;
      v305 = v227;
      v306 = 2050;
      v307 = v231;
      int v308 = 2050;
      int v309 = v235;
      int v310 = 2050;
      unsigned int v311 = v239;
      int v312 = 1026;
      *(_DWORD *)int v313 = v243;
      *(_WORD *)&v313[4] = 2050;
      *(void *)&v313[6] = v247;
      *(_WORD *)&v313[14] = 1026;
      *(_DWORD *)&v313[16] = v251;
      LOWORD(v314) = 1026;
      *(_DWORD *)((char *)&v314 + 2) = v259;
      HIWORD(v314) = 2050;
      *(void *)v315 = v255;
      *(_WORD *)&v315[8] = 1026;
      *(_DWORD *)v316 = v264;
      *(_WORD *)&v316[4] = 1026;
      int v317 = v172;
      int v318 = 2082;
      int v319 = v173;
      unsigned int v320 = 1026;
      int v321 = *(_DWORD *)&v285[24];
      int v322 = 2049;
      v323 = v280;
      unsigned int v324 = 2049;
      v325 = *((void *)&v280 + 1);
      v326 = 2050;
      v327 = v281;
      v328 = 2050;
      v329 = v116;
      LODWORD(v201) = 234;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v269,  2LL,  "#fusion barredNon1HzLoc,%{public}.3f,%{public}.3f,%{public}d,%{public}s,%{private}.7f,%{private}.7f,%{private}.1 f,%{private}.2f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}d,%{public}.2f,%{publ ic}d,%{public}d,%{public}.3f,%{public}d,%{public}d,%{public}s,%{public}d,%{private}.7f,%{private}.7f,%{public}.1f,%{public}.3f",  &v286,  v201);
      int v175 = (char *)v174;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::locationUpdate(const CLLocationProvider_Type::NotificationData &, BOOL &)",  "%s\n",  v174);
      if (v175 != buf) {
        free(v175);
      }
    }

    uint64_t v134 = v284;
    *(_OWORD *)(a1 + 1040) = v283;
    *(_OWORD *)(a1 + 1056) = v134;
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)v285;
    *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v285[12];
    v135 = v280;
    _BYTE *v107 = v279;
    *(_OWORD *)(a1 + 992) = v135;
    int v136 = v282;
    *(_OWORD *)(a1 + 1008) = v281;
    *(_OWORD *)(a1 + 1024) = v136;
  }

      int v74 = *(std::stringbuf::string_type **)(v62 + 8);
      if (v74)
      {
        do
        {
          int v75 = v74;
          int v74 = (std::stringbuf::string_type *)v74->__r_.__value_.__r.__words[0];
        }

        while (v74);
      }

      else
      {
        do
        {
          int v75 = *(std::stringbuf::string_type **)(v62 + 16);
          int v23 = v75->__r_.__value_.__r.__words[0] == v62;
          v62 = (std::string::size_type)v75;
        }

        while (!v23);
      }

      v62 = (std::string::size_type)v75;
      if (v75 == (std::stringbuf::string_type *)&v141.__r_.__value_.__r.__words[1]) {
        goto LABEL_171;
      }
    }
  }

  int v47 = a2 + 184;
  sub_1006031FC(a2 + 184, (uint64_t *)__p);
  int v48 = *(unsigned int **)__p;
  if (*(_BYTE **)__p == &__p[8])
  {
    sub_100603B94((uint64_t)__p, **(char ***)__p);
LABEL_165:
    i = &OBJC_METACLASS___CLPrivacyManager.vtable;
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    int v84 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEBUG,  "TILE: updateProtectionClass, clearing unprotected map",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101879178);
      }
      *(_WORD *)__p = 0;
      LODWORD(v126) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "TILE: updateProtectionClass, clearing unprotected map",  __p,  v126);
      uint64_t v125 = (char *)v124;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v124);
      if (v125 != buf) {
        free(v125);
      }
    }

    sub_100603264(v47);
    goto LABEL_183;
  }

  uint64_t v49 = 1;
  do
  {
    unsigned int v50 = sub_1006025CC(v47, v48 + 8);
    int v51 = v50;
    if (v50)
    {
      int v52 = sub_100C0CCC8(v50);
      if ((v52 & v49) == 1) {
        uint64_t v49 = sub_100C145F0(v51, *(unsigned __int8 *)(v4 + 200));
      }
      else {
        v49 &= !v52;
      }
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101879158);
      }
      uint64_t v53 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "TileMgr, tile ptr is NULL, #CloneMe",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101879158);
        }
        LOWORD(v141.__r_.__value_.__l.__data_) = 0;
        LODWORD(v126) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileMgr, tile ptr is NULL, #CloneMe",  &v141,  v126);
        int v55 = (char *)v54;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v54);
        if (v55 != buf) {
          free(v55);
        }
      }
    }

    int v56 = (unsigned int *)*((void *)v48 + 1);
    if (v56)
    {
      do
      {
        uint64_t v57 = v56;
        int v56 = *(unsigned int **)v56;
      }

      while (v56);
    }

    else
    {
      do
      {
        uint64_t v57 = (unsigned int *)*((void *)v48 + 2);
        int v23 = *(void *)v57 == (void)v48;
        int v48 = v57;
      }

      while (!v23);
    }

    int v48 = v57;
  }

  while (v57 != (unsigned int *)&__p[8]);
  sub_100603B94((uint64_t)__p, *(char **)&__p[8]);
  if ((v49 & 1) != 0) {
    goto LABEL_165;
  }
  i = (void **)(&OBJC_METACLASS___CLPrivacyManager + 24);
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101879158);
  }
  int v58 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "TileMgr, Unable to lock all unprotected files!, #CloneMe",  buf,  2u);
  }

  if (!sub_1002921D0(115, 0)) {
    goto LABEL_183;
  }
  bzero(buf, 0x65CuLL);
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101879158);
  }
  *(_WORD *)__p = 0;
  LODWORD(v126) = 2;
  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  16LL,  "TileMgr, Unable to lock all unprotected files!, #CloneMe",  __p,  v126);
  int v60 = (char *)v59;
  sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v59);
LABEL_232:
  if (v60 != buf) {
    free(v60);
  }
LABEL_183:
  if (qword_101934830 != -1) {
    dispatch_once(&qword_101934830, &stru_101879178);
  }
  int v91 = (os_log_s *)i[263];
  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
  {
    else {
      int v92 = *(void *)(v136 + 8);
    }
    uint64_t v93 = sub_100019240(v136 + 184);
    int v94 = *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8LL) + 24LL);
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = v92;
    v152 = 2048;
    *(void *)&v153 = v93;
    WORD4(v153) = 1024;
    *(_DWORD *)((char *)&v153 + 10) = v94;
    _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEBUG,  "TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101879178);
    }
    int v107 = i[263];
    else {
      int v108 = *(void *)(v136 + 8);
    }
    uint64_t v109 = sub_100019240(v136 + 184);
    int v110 = *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8LL) + 24LL);
    *(_DWORD *)__p = 136315650;
    *(void *)&__p[4] = v108;
    *(_WORD *)&__p[12] = 2048;
    *(void *)&__p[14] = v109;
    *(_WORD *)&__p[22] = 1024;
    *(_DWORD *)&__p[24] = v110;
    LODWORD(v126) = 28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v107,  2LL,  "TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d",  __p,  v126,  v127);
    int v112 = (char *)v111;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v111);
    if (v112 != buf) {
      free(v112);
    }
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101879158);
  }
  int v95 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_INFO))
  {
    else {
      int v96 = *(void *)(v136 + 8);
    }
    uint64_t v97 = *(unsigned __int8 *)(v3 + 64);
    v98 = sub_100019240(v136 + 184);
    *(_DWORD *)buf = 136446722;
    *(void *)&buf[4] = v96;
    v152 = 1026;
    LODWORD(v153) = v97;
    WORD2(v153) = 2050;
    *(void *)((char *)&v153 + 6) = v98;
    _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_INFO,  "@TileEvent, %{public}s, locking, %{public}d, readable, %{public}lu\n",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101879158);
    }
    uint64_t v113 = qword_101934858;
    else {
      int v114 = *(void *)(v136 + 8);
    }
    int v115 = *(unsigned __int8 *)(v3 + 64);
    int v116 = sub_100019240(v136 + 184);
    *(_DWORD *)__p = 136446722;
    *(void *)&__p[4] = v114;
    *(_WORD *)&__p[12] = 1026;
    *(_DWORD *)&__p[14] = v115;
    *(_WORD *)&__p[18] = 2050;
    *(void *)&__p[20] = v116;
    LODWORD(v126) = 28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v113,  1LL,  "@TileEvent, %{public}s, locking, %{public}d, readable, %{public}lu\n",  __p,  v126);
    v118 = (char *)v117;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke",  "%s\n",  v117);
    if (v118 != buf) {
      free(v118);
    }
  }

  uint64_t result = *(float *)(a2 + 184);
  v5 |= 0x80000000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 184) = result;
  uint64_t v4 = *v3;
  int v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x40000000000LL) == 0)
  {
LABEL_68:
    if ((v4 & 0x100000000000LL) == 0) {
      goto LABEL_69;
    }
    goto LABEL_143;
  }

  PB::TextFormatter::format(this, "maxAccelNormThreshold", *(float *)(a1 + 220));
  int v6 = *v5;
  int v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000000000000LL) == 0)
  {
LABEL_67:
    if ((v6 & 0x40000000000000LL) == 0) {
      goto LABEL_68;
    }
    goto LABEL_143;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 188), 0x3Eu);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000LL) == 0)
  {
LABEL_67:
    if ((v5 & 0x400000000000LL) == 0) {
      goto LABEL_68;
    }
    goto LABEL_143;
  }

  uint64_t result = *(float *)(a2 + 152);
  v5 |= 0x800000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 152) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000000LL) == 0)
  {
LABEL_61:
    if ((v4 & 0x2000000000LL) == 0) {
      goto LABEL_62;
    }
    goto LABEL_143;
  }

  PB::TextFormatter::format(this, "lowSenseWithAudioPeakPressureThreshold", *(float *)(a1 + 200));
  int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x1000000000000LL) == 0)
  {
LABEL_60:
    if ((v6 & 0x2000000000000LL) == 0) {
      goto LABEL_61;
    }
    goto LABEL_143;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 152), 0xFBu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000LL) == 0)
  {
LABEL_61:
    if ((v5 & 0x2000000000LL) == 0) {
      goto LABEL_62;
    }
    goto LABEL_143;
  }

  uint64_t v30 = *(_BYTE *)(a2 + 318);
  v6 |= 0x80uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 318) = v30;
  uint64_t v4 = *v3;
  int v7 = *(void *)(a2 + 364);
  if ((v7 & 0x80000) == 0)
  {
LABEL_36:
    if ((v7 & 0x8000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_143;
  }

  PB::TextFormatter::format(this, "kIsEventDetectedHS", *(_BYTE *)(a1 + 339));
  int v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v7 & 4) == 0) {
      goto LABEL_41;
    }
    goto LABEL_143;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 318), 0x70u);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((v6 & 0x80000) == 0)
  {
LABEL_36:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_143;
  }

  uint64_t v73 = *(_DWORD *)(a2 + 56);
  v3 |= 0x100uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 56) = v73;
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x10000) == 0)
  {
LABEL_63:
    if ((v5 & 1) == 0) {
      goto LABEL_64;
    }
    goto LABEL_143;
  }

  PB::TextFormatter::format(this, "maxChaos2", *(float *)(a1 + 104));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x200000) == 0)
  {
LABEL_62:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_143;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 194), 0x45Fu);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x80000000000000LL) == 0)
  {
LABEL_63:
    if ((v4 & 0x800000000000000LL) == 0) {
      goto LABEL_64;
    }
    goto LABEL_143;
  }

LABEL_147:
  uint64_t v81 = *(void *)(a1 + 160);
  if (!v81) {
    uint64_t v81 = *(void *)(qword_1019A0978 + 160);
  }
  v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007C124(v81, a2);
  int v83 = (int)v82;
  else {
    int v84 = 1;
  }
  uint64_t v4 = (v4 + v83 + v84 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x100000) == 0)
  {
LABEL_125:
    if ((v3 & 0x200000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_159;
  }

  return v57 != 0;
}

      int v31 = 0;
      goto LABEL_148;
    }

    v54 = *(double *)(a1 + 16);
    int v55 = v13 - v54 < 30.0 && v54 > 0.0;
    if ((CLMotionActivity::isTypeDriving(a4->type) & 1) != 0
      || CLMotionActivity::isTypeInVehicle(a4->type, v56))
    {
      uint64_t v57 = a4->confidence > 0 || v55;
      if (v57 == 1)
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10183E5D0);
        }
        int v58 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349568;
          int v102 = v12;
          int v103 = 2050;
          *(double *)int v104 = v14;
          *(_WORD *)&v104[8] = 1026;
          *(_DWORD *)&v104[10] = v55;
          _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,vehicle dynamics,speed,%{public}.2lf,wasRecentlyDriving,%{public}d",  buf,  0x1Cu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10183E5D0);
          }
          *(_DWORD *)v98 = 134349568;
          *(void *)&v98[4] = v12;
          *(_WORD *)&v98[12] = 2050;
          *(double *)&v98[14] = v14;
          *(_WORD *)&v98[22] = 1026;
          *(_DWORD *)&v98[24] = v55;
          LODWORD(v97) = 28;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,vehicle dynamics,speed,%{public}.2lf,wasRecentlyDriving,%{public}d",  v98,  v97);
          int v95 = (uint8_t *)v94;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLo cation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const s td::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)",  "%s\n",  v94);
          if (v95 != buf) {
            free(v95);
          }
        }

        *(double *)(a1 + 16) = v13;
        goto LABEL_196;
      }
    }

    if (v26 && *(_DWORD *)(a1 + 4) == 2)
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10183E5D0);
      }
      int v64 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        int v102 = v12;
        int v103 = 2050;
        *(double *)int v104 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,operatingDynamics,pedestrian matching,wasRecentlyWalking,speed,%{public}.2lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10183E5D0);
        }
        *(_DWORD *)v98 = 134349312;
        *(void *)&v98[4] = v12;
        *(_WORD *)&v98[12] = 2050;
        *(double *)&v98[14] = v14;
        LODWORD(v97) = 22;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,operatingDynamics,pedestrian matching,wasRecentlyWalking,speed,%{public}.2lf",  v98,  v97);
        int v66 = (uint8_t *)v65;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLoca tion &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std:: string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)",  "%s\n",  v65);
        if (v66 != buf) {
          free(v66);
        }
      }

      goto LABEL_51;
    }

    if (v55 && *(_DWORD *)(a1 + 4) == 1)
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10183E5D0);
      }
      int v67 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        int v102 = v12;
        int v103 = 2050;
        *(double *)int v104 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,wasRecentlyDriving,speed,%{public}.2lf",  buf,  0x16u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_196;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10183E5D0);
      }
      *(_DWORD *)v98 = 134349312;
      *(void *)&v98[4] = v12;
      *(_WORD *)&v98[12] = 2050;
      *(double *)&v98[14] = v14;
      LODWORD(v97) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,wasRecentlyDriving,speed,%{public}.2lf",  v98,  v97,  *(void *)v98,  *(_OWORD *)&v98[8]);
    }

    else
    {
      if (v39 && *(_DWORD *)(a1 + 4) == 3)
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_10183E5D0);
        }
        uint64_t v69 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349312;
          int v102 = v12;
          int v103 = 2050;
          *(double *)int v104 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,operatingDynamics,cycle matching,wasRecentlyCycling,speed,%{public}.2lf",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_10183E5D0);
          }
          *(_DWORD *)v98 = 134349312;
          *(void *)&v98[4] = v12;
          *(_WORD *)&v98[12] = 2050;
          *(double *)&v98[14] = v14;
          LODWORD(v97) = 22;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,operatingDynamics,cycle matching,wasRecentlyCycling,speed,%{public}.2lf",  v98,  v97);
          int v71 = (uint8_t *)v70;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLo cation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const s td::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)",  "%s\n",  v70);
          if (v71 != buf) {
            free(v71);
          }
        }

        goto LABEL_103;
      }

      if (v14 <= 5.55555556) {
        goto LABEL_147;
      }
      *(double *)(a1 + 16) = v13;
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10183E5D0);
      }
      int v72 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        int v102 = v12;
        int v103 = 2050;
        *(double *)int v104 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,highSpeed,speed,%{public}.2lf",  buf,  0x16u);
      }

      if (!sub_1002921D0(115, 2))
      {
LABEL_196:
        int v31 = 1;
        goto LABEL_148;
      }

      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10183E5D0);
      }
      *(_DWORD *)v98 = 134349312;
      *(void *)&v98[4] = v12;
      *(_WORD *)&v98[12] = 2050;
      *(double *)&v98[14] = v14;
      LODWORD(v97) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,highSpeed,speed,%{public}.2lf",  v98,  v97,  *(void *)v98,  *(_OWORD *)&v98[8]);
    }

    int v96 = (uint8_t *)v68;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string & , const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)",  "%s\n",  v68);
    if (v96 != buf) {
      free(v96);
    }
    goto LABEL_196;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10183E5D0);
  }
  int v51 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    int v52 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)buf = 134349568;
    int v102 = v12;
    int v103 = 1026;
    *(_DWORD *)int v104 = v52;
    *(_WORD *)&v104[4] = 2050;
    *(double *)&v104[6] = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "CLMM,%{public}.1lf,operatingDynamics,sticking to last dynamics,%{public}d,timeInCurrentMode,%{public}.1lf",  buf,  0x1Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10183E5D0);
    }
    uint64_t v53 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)v98 = 134349568;
    *(void *)&v98[4] = v12;
    *(_WORD *)&v98[12] = 1026;
    *(_DWORD *)&v98[14] = v53;
    *(_WORD *)&v98[18] = 2050;
    *(double *)&v98[20] = v23;
    LODWORD(v97) = 28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,%{public}.1lf,operatingDynamics,sticking to last dynamics,%{public}d,timeInCurrentMode,%{public}.1lf",  v98,  v97,  *(_OWORD *)v98,  *(void *)&v98[16],  *(void *)&v98[24]);
    goto LABEL_16;
  }

  uint64_t v81 = *(void *)(a1 + 160);
  if (!v81) {
    uint64_t v81 = *(void *)(qword_1019A11B8 + 160);
  }
  v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001FAD20(v81);
  int v83 = (int)v82;
  else {
    int v84 = 1;
  }
  uint64_t v4 = (v4 + v83 + v84 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x100000) == 0)
  {
LABEL_125:
    if ((v3 & 0x200000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_159;
  }

  int v47 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 92);
  if (v47 >= 0x80)
  {
    int v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v47, a2);
    unsigned int v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    int v48 = 1;
  }

  uint64_t v4 = (v4 + v48 + 2);
  if ((v3 & 0x400000) == 0)
  {
LABEL_117:
    if ((v3 & 0x800000) == 0) {
      goto LABEL_161;
    }
    goto LABEL_155;
  }

    int v92 = 2;
    goto LABEL_148;
  }

  uint64_t result = *(float *)(a2 + 208);
  v5 |= 0x2000000000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 208) = result;
  uint64_t v4 = *v3;
  int v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x1000000000000LL) == 0)
  {
LABEL_74:
    if ((v4 & 0x4000000000000LL) == 0) {
      goto LABEL_75;
    }
    goto LABEL_149;
  }

  PB::TextFormatter::format(this, "maxPulse", *(float *)(a1 + 244));
  int v6 = *v5;
  int v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000000000000LL) == 0)
  {
LABEL_73:
    if ((v6 & 0x1000000000000000LL) == 0) {
      goto LABEL_74;
    }
    goto LABEL_149;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 212), 0x44u);
  uint64_t v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000000LL) == 0)
  {
LABEL_73:
    if ((v6 & 0x400) == 0) {
      goto LABEL_74;
    }
    goto LABEL_149;
  }

  uint64_t result = *(float *)(a2 + 172);
  v5 |= 0x10000000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 172) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000000LL) == 0)
  {
LABEL_67:
    if ((v4 & 0x40000000000LL) == 0) {
      goto LABEL_68;
    }
    goto LABEL_149;
  }

  PB::TextFormatter::format(this, "lowSenseWithoutAudioParBaroCumulativeRotationThreshold", *(float *)(a1 + 224));
  int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x40000000000000LL) == 0)
  {
LABEL_66:
    if ((v6 & 0x80000000000000LL) == 0) {
      goto LABEL_67;
    }
    goto LABEL_149;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172), 0x101u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000000LL) == 0)
  {
LABEL_67:
    if ((v5 & 0x40000000000LL) == 0) {
      goto LABEL_68;
    }
    goto LABEL_149;
  }

  int v36 = *(_BYTE *)(a2 + 344);
  v6 |= 0x200000000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 344) = v36;
  uint64_t v4 = *v3;
  int v7 = *(void *)(a2 + 364);
  if ((v7 & 0x4000000000LL) == 0)
  {
LABEL_42:
    if ((v7 & 0x400000000LL) == 0) {
      goto LABEL_43;
    }
    goto LABEL_149;
  }

  PB::TextFormatter::format(this, "lowSpeedOrFakeCountAtBoundaryThreshold", *(_DWORD *)(a1 + 116));
  int v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_46:
    if ((v7 & 0x200000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_149;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 344), 0x131u);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((v6 & 0x4000000000LL) == 0)
  {
LABEL_42:
    if ((v6 & 0x400000000LL) == 0) {
      goto LABEL_43;
    }
    goto LABEL_149;
  }

  uint64_t v81 = *(_BYTE *)(a2 + 183);
  v3 |= 0x1000000000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 183) = v81;
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v5 & 0x10) == 0)
  {
LABEL_69:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_149;
  }

  PB::TextFormatter::format(this, "maxRMS0", *(float *)(a1 + 128));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_149;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 0x4B5u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x100000) == 0)
  {
LABEL_69:
    if ((v4 & 0x100000000LL) == 0) {
      goto LABEL_70;
    }
    goto LABEL_149;
  }

LABEL_159:
  uint64_t v89 = *(void *)(a1 + 176);
  if (!v89) {
    uint64_t v89 = *(void *)(qword_1019A0978 + 176);
  }
  v90 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007D2B0(v89, a2);
  int v91 = (int)v90;
  else {
    int v92 = 1;
  }
  uint64_t v4 = (v4 + v91 + v92 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x400000) == 0)
  {
LABEL_127:
    if ((v3 & 0x800000) == 0) {
      goto LABEL_177;
    }
    goto LABEL_171;
  }

              int v92 = (_OWORD *)(v96 + 96);
              v95 += 96LL;
              if ((_OWORD *)(v96 + 96) == a2) {
                return;
              }
            }

            int v100 = *(_DWORD *)(v97 + 120);
LABEL_147:
            int v204 = *(void *)(v96 + 16);
            int v200 = *(_OWORD *)v96;
            v215 = *(void *)(v97 + 124);
            int v219 = *(_DWORD *)(v97 + 132);
            int v102 = *(double *)(v97 + 136);
            int v103 = *(void *)(v97 + 144);
            *(_OWORD *)int v229 = *(_OWORD *)(v97 + 156);
            *(_OWORD *)&v229[16] = *(_OWORD *)(v97 + 172);
            int v104 = *(_OWORD *)(v97 + 64);
            *(_OWORD *)(v96 + 48) = *(_OWORD *)(v97 + 48);
            *(_OWORD *)(v96 + 64) = v104;
            *(_OWORD *)(v96 + 73) = *(_OWORD *)(v97 + 73);
            uint64_t v105 = *(_OWORD *)(v97 + 32);
            *(_OWORD *)(v96 + 16) = *(_OWORD *)(v97 + 16);
            *(_OWORD *)(v96 + 32) = v105;
            int v106 = i;
            *(_OWORD *)int v96 = *(_OWORD *)v97;
            if (v97 != i)
            {
              int v107 = v95;
              while (1)
              {
                int v108 = (_OWORD *)(i + v107);
                uint64_t v109 = *(_DWORD *)(i + v107 - 40);
                if (v98 <= v109)
                {
                  if (v98 != v109)
                  {
                    int v106 = i + v107;
                    goto LABEL_158;
                  }

                  int v110 = *(_DWORD *)(i + v107 - 72);
                }

                v97 -= 96LL;
                int v111 = *(v108 - 3);
                v108[2] = *(v108 - 4);
                v108[3] = v111;
                v108[4] = *(v108 - 2);
                *(_OWORD *)((char *)v108 + 73) = *(_OWORD *)((char *)v108 - 23);
                int v112 = *(v108 - 5);
                void *v108 = *(v108 - 6);
                v108[1] = v112;
                v107 -= 96LL;
                if (!v107)
                {
                  int v106 = i;
                  goto LABEL_158;
                }
              }

              int v106 = v97;
            }

              int v91 = (_OWORD *)(v95 + 96);
              v94 += 96LL;
              if ((_OWORD *)(v95 + 96) == a2) {
                return;
              }
            }

            int v99 = *(_DWORD *)(v96 + 120);
LABEL_147:
            v206 = *(void *)(v95 + 16);
            int v202 = *(_OWORD *)v95;
            uint64_t v101 = *(_DWORD *)(v96 + 124);
            int v102 = *(double *)(v96 + 128);
            int v214 = *(_OWORD *)(v96 + 136);
            *(_OWORD *)v225 = *(_OWORD *)(v96 + 156);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v96 + 172);
            int v103 = *(_OWORD *)(v96 + 16);
            *(_OWORD *)int v95 = *(_OWORD *)v96;
            *(_OWORD *)(v95 + 16) = v103;
            *(_OWORD *)(v95 + 73) = *(_OWORD *)(v96 + 73);
            int v104 = *(_OWORD *)(v96 + 64);
            uint64_t v105 = *(_OWORD *)(v96 + 32);
            int v106 = i;
            *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
            *(_OWORD *)(v95 + 64) = v104;
            *(_OWORD *)(v95 + 32) = v105;
            if (v96 != i)
            {
              int v107 = v94;
              while (1)
              {
                int v108 = (_OWORD *)(i + v107);
                uint64_t v109 = *(_DWORD *)(i + v107 - 40);
                if (v97 <= v109)
                {
                  if (v97 != v109)
                  {
                    int v106 = i + v107;
                    goto LABEL_158;
                  }

                  int v110 = *(_DWORD *)(i + v107 - 72);
                }

                v96 -= 96LL;
                int v111 = *(v108 - 3);
                v108[2] = *(v108 - 4);
                v108[3] = v111;
                v108[4] = *(v108 - 2);
                *(_OWORD *)((char *)v108 + 73) = *(_OWORD *)((char *)v108 - 23);
                int v112 = *(v108 - 5);
                void *v108 = *(v108 - 6);
                v108[1] = v112;
                v107 -= 96LL;
                if (!v107)
                {
                  int v106 = i;
                  goto LABEL_158;
                }
              }

              int v106 = v96;
            }

  uint64_t v89 = *(void *)(a1 + 176);
  if (!v89) {
    uint64_t v89 = *(void *)(qword_1019A11B8 + 176);
  }
  v90 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001FD560(v89, a2);
  int v91 = (int)v90;
  else {
    int v92 = 1;
  }
  uint64_t v4 = (v4 + v91 + v92 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x400000) == 0)
  {
LABEL_127:
    if ((v3 & 0x800000) == 0) {
      goto LABEL_177;
    }
    goto LABEL_171;
  }

        int v72 = (uint64_t *)*v72;
        if (!v72) {
          goto LABEL_213;
        }
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v19 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "#Error,fusion likelihood update, calc_dNdE failed",  buf,  2u);
    }

    uint64_t result = sub_1002921D0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v234) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "#Error,fusion likelihood update, calc_dNdE failed",  &v234,  2);
      uint64_t v18 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v20);
LABEL_30:
      if (v18 != buf) {
        free(v18);
      }
      return 0LL;
    }
  }

  else
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    int v15 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "#selection,No valid hypothesis available for likelihood update",  buf,  2u);
    }

    uint64_t result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      LOWORD(v234) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,No valid hypothesis available for likelihood update",  &v234,  2);
      uint64_t v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::updateHypothesesLikelihoods(const LCFusionProviderLocation &)",  "%s\n",  v17);
      goto LABEL_30;
    }
  }

  return result;
}

  os_activity_scope_leave(&state);
}

  uint64_t result = *(float *)(a2 + 244);
  v5 |= 0x400000000000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 244) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000000000000LL) == 0)
  {
LABEL_79:
    if ((v4 & 0x8000000000000LL) == 0) {
      goto LABEL_80;
    }
    goto LABEL_161;
  }

  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 272));
  int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((v7 & 0x20000) == 0)
  {
LABEL_78:
    if ((v7 & 4) == 0) {
      goto LABEL_79;
    }
    goto LABEL_161;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 244), 0x10Du);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000000000LL) == 0)
  {
LABEL_79:
    if ((v5 & 0x8000000000000LL) == 0) {
      goto LABEL_80;
    }
    goto LABEL_161;
  }

  int v48 = *(_DWORD *)(a2 + 112);
  v5 |= 0x40000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 112) = v48;
  uint64_t v4 = *v3;
  int v7 = *(void *)(a2 + 364);
  if ((v7 & 0x40000000000LL) == 0)
  {
LABEL_54:
    if ((v7 & 0x10000000000LL) == 0) {
      goto LABEL_55;
    }
    goto LABEL_161;
  }

  PB::TextFormatter::format(this, "numBaroIncreasesSkiingThreshold", *(_DWORD *)(a1 + 164));
  int v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x100000000LL) == 0)
  {
LABEL_58:
    if ((v7 & 0x200000000LL) == 0) {
      goto LABEL_59;
    }
    goto LABEL_161;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x13Du);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((v6 & 0x40000000000LL) == 0)
  {
LABEL_54:
    if ((v6 & 0x10000000000LL) == 0) {
      goto LABEL_55;
    }
    goto LABEL_161;
  }

  int v95 = *(_DWORD *)(a2 + 76);
  v3 |= 0x2000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_DWORD *)(result + 76) = v95;
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x2000000000000000LL) == 0)
  {
LABEL_81:
    if ((v2 & 0x2000000000000LL) == 0) {
      goto LABEL_82;
    }
    goto LABEL_161;
  }

  PB::TextFormatter::format(this, "saturationMet0", *(_BYTE *)(a1 + 201));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x8000) == 0)
  {
LABEL_80:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_161;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 187), 0x4C1u);
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(v3 + 212);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x10000000000000LL) == 0)
  {
LABEL_81:
    if ((v5 & 0x100) == 0) {
      goto LABEL_82;
    }
    goto LABEL_161;
  }

    *(void *)(a1 + 224) = *(void *)(v74 + 56);
    else {
      int v20 = v1 + 96;
    }
    if (v8 == v2)
    {
      int v88 = *(unsigned __int8 *)(v20 + 42);
      *(_BYTE *)(a1 + 210) = v88;
      if (!v88) {
        goto LABEL_203;
      }
LABEL_176:
      int v91 = *(double *)(v1 + 144);
      int v92 = *(double *)(v1 + 48);
      if (v91 >= v92) {
        v90 = v1 + 96;
      }
      else {
        v90 = v1;
      }
      uint64_t v93 = v1 + 192;
      if (v1 + 192 != v2)
      {
        if (v91 >= v92) {
          int v94 = v1;
        }
        else {
          int v94 = v1 + 96;
        }
        int v95 = v1;
        while (1)
        {
          int v96 = v93;
          uint64_t v97 = v93 + 96;
          if (v97 == v2) {
            break;
          }
          v98 = v95 + 288;
          int v99 = *(double *)(v96 + 144);
          int v100 = *(double *)(v96 + 48);
          uint64_t v101 = *(double *)(v94 + 48);
          int v102 = *(double *)(v90 + 48);
          if (v100 >= v101) {
            int v103 = v94;
          }
          else {
            int v103 = v96;
          }
          if (v99 < v102) {
            v98 = v90;
          }
          if (v99 < v101) {
            int v94 = v97;
          }
          if (v100 >= v102) {
            v90 = v96;
          }
          if (v99 >= v100)
          {
            int v94 = v103;
            v90 = v98;
          }

          uint64_t v93 = v96 + 192;
          int v95 = v96;
          if (v96 + 192 == v2) {
            goto LABEL_201;
          }
        }

        int v104 = *(double *)(v96 + 48);
      }

      goto LABEL_201;
    }

    while (1)
    {
      unsigned int v86 = v8 + 96;
      if (v8 + 96 == v2) {
        break;
      }
      int v87 = *(unsigned __int8 *)(v8 + 138);
      if (v87 >= *(unsigned __int8 *)(v8 + 42))
      {
        int v87 = *(unsigned __int8 *)(v8 + 42);
        unsigned int v86 = v8;
      }

      v8 += 192LL;
      if (v8 == v2) {
        goto LABEL_174;
      }
    }
  }

LABEL_165:
  uint64_t v93 = *(void *)(a1 + 184);
  if (!v93) {
    uint64_t v93 = *(void *)(qword_1019A0978 + 184);
  }
  int v94 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007DBC8(v93, a2);
  int v95 = (int)v94;
  else {
    int v96 = 1;
  }
  uint64_t v4 = (v4 + v95 + v96 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x800000) != 0)
  {
LABEL_171:
    uint64_t v97 = *(void *)(a1 + 192);
    if (!v97) {
      uint64_t v97 = *(void *)(qword_1019A0978 + 192);
    }
    v98 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007E24C(v97, a2);
    int v99 = (int)v98;
    else {
      int v100 = 1;
    }
    uint64_t v4 = (v4 + v99 + v100 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
  }

  int v72 = *(void *)(a2 + 168);
  *(_DWORD *)(a1 + 364) |= 0x8000000u;
  *(void *)(a1 + 168) = v72;
  uint64_t v13 = *(_DWORD *)(a2 + 364);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_79:
    if ((v13 & 0x20000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_167;
  }

  uint64_t v42 = *(void *)(v5 + 280);
  if (!v42) {
    uint64_t v42 = *(void *)(qword_1019A11B8 + 280);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23,  v42,  a2,  a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 8) == 0)
  {
LABEL_134:
    if ((v39 & 0x10) == 0) {
      goto LABEL_135;
    }
    goto LABEL_171;
  }

  uint64_t v93 = *(void *)(a1 + 184);
  if (!v93) {
    uint64_t v93 = *(void *)(qword_1019A11B8 + 184);
  }
  int v94 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001EB930(v93, a2);
  int v95 = (int)v94;
  else {
    int v96 = 1;
  }
  uint64_t v4 = (v4 + v95 + v96 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x800000) != 0)
  {
LABEL_171:
    uint64_t v97 = *(void *)(a1 + 192);
    if (!v97) {
      uint64_t v97 = *(void *)(qword_1019A11B8 + 192);
    }
    v98 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001EDAA4(v97, a2);
    int v99 = (int)v98;
    else {
      int v100 = 1;
    }
    uint64_t v4 = (v4 + v99 + v100 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 488);
  }

  uint64_t result = *(float *)(a2 + 224);
  v5 |= 0x20000000000000uLL;
  unsigned int *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 224) = result;
  LOBYTE(v8) = *(_WORD *)(a2 + 324);
  if ((*(_WORD *)(a2 + 324) & 8) == 0)
  {
LABEL_85:
    if ((v8 & 0x10) == 0) {
      goto LABEL_86;
    }
    goto LABEL_167;
  }

  PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((v7 & 0x20) == 0)
  {
LABEL_84:
    if ((v7 & 0x40) == 0) {
      goto LABEL_85;
    }
    goto LABEL_167;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 224), 0x113u);
  LOBYTE(v7) = *((_WORD *)v4 + 4);
  if ((v4[1] & 8) == 0)
  {
LABEL_85:
    if ((v7 & 0x10) == 0) {
      goto LABEL_86;
    }
    goto LABEL_167;
  }

  v54 = *(_DWORD *)(a2 + 252);
  v5 |= 0x20000000000000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 252) = v54;
  uint64_t v4 = *v3;
  int v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x40000000000000LL) == 0)
  {
LABEL_60:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_167;
  }

  PB::TextFormatter::format(this, "numLowOrFakeGpsSamplesInHistory", *(_DWORD *)(a1 + 188));
  int v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x4000000000LL) == 0)
  {
LABEL_64:
    if ((v7 & 0x8000000000LL) == 0) {
      goto LABEL_65;
    }
    goto LABEL_167;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 252), 0x191u);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 0x40000000000000LL) == 0)
  {
LABEL_60:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_167;
  }

            PB::Reader::recallMark(this, v155);
          }

          else
          {
            int v119 = *(char **)(a1 + 40);
            v118 = *(void *)(a1 + 48);
            if ((unint64_t)v119 >= v118)
            {
              uint64_t v142 = (char *)*v10;
              v143 = (v119 - (_BYTE *)*v10) >> 2;
              unsigned int v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 62) {
LABEL_235:
              }
                sub_100007008();
              int v145 = v118 - (void)v142;
              if (v145 >> 1 > v144) {
                unsigned int v144 = v145 >> 1;
              }
              else {
                int v146 = v144;
              }
              if (v146)
              {
                int v147 = (char *)sub_10000956C(v11, v146);
                uint64_t v142 = *(char **)(a1 + 32);
                int v119 = *(char **)(a1 + 40);
              }

              else
              {
                int v147 = 0LL;
              }

              int v150 = &v147[4 * v143];
              *(_DWORD *)int v150 = 0;
              uint64_t v117 = v150 + 4;
              while (v119 != v142)
              {
                int v151 = *((_DWORD *)v119 - 1);
                v119 -= 4;
                *((_DWORD *)v150 - 1) = v151;
                v150 -= 4;
              }

              *(void *)(a1 + 32) = v150;
              *(void *)(a1 + 40) = v117;
              *(void *)(a1 + 48) = &v147[4 * v146];
              if (v142) {
                operator delete(v142);
              }
            }

            else
            {
              *(_DWORD *)int v119 = 0;
              uint64_t v117 = v119 + 4;
            }

            *(void *)(a1 + 40) = v117;
LABEL_220:
            v152 = *((void *)this + 1);
            if (v152 <= 0xFFFFFFFFFFFFFFFBLL && v152 + 4 <= *((void *)this + 2))
            {
              *(v117 - 1) = *(_DWORD *)(*(void *)this + v152);
              *((void *)this + 1) += 4LL;
            }

            else
            {
              *((_BYTE *)this + 24) = 1;
            }
          }

            *(v87 - 1) = v104;
          }

                *(void *)(a1 + 24) = v61;
              }

              else if ((_DWORD)v20 == 101)
              {
                *(_BYTE *)(a1 + 52) |= 2u;
                int v27 = *((void *)this + 1);
                uint64_t v2 = *((void *)this + 2);
                int v28 = *(void *)this;
                if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
                {
                  int v68 = 0;
                  uint64_t v69 = 0;
                  int v31 = 0LL;
                  if (v2 <= v27) {
                    unsigned int v3 = *((void *)this + 1);
                  }
                  else {
                    unsigned int v3 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v3 == v27)
                    {
                      int v31 = 0LL;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_140;
                    }

                    int v70 = v27++;
                    int v71 = *(_BYTE *)(v28 + v70);
                    *((void *)this + 1) = v27;
                    v31 |= (unint64_t)(v71 & 0x7F) << v68;
                    if ((v71 & 0x80) == 0) {
                      break;
                    }
                    v68 += 7;
                    uint64_t v14 = v69++ > 8;
                    if (v14)
                    {
                      int v31 = 0LL;
                      goto LABEL_139;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    int v31 = 0LL;
                  }
LABEL_139:
                  unsigned int v3 = v70 + 1;
                }

                else
                {
                  uint64_t v29 = 0;
                  uint64_t v30 = 0;
                  int v31 = 0LL;
                  while (1)
                  {
                    unsigned int v3 = v27 + 1;
                    *((void *)this + 1) = v27 + 1;
                    int v32 = *(_BYTE *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0) {
                      break;
                    }
                    v29 += 7;
                    int v27 = v3;
                    uint64_t v14 = v30++ > 8;
                    if (v14)
                    {
                      int v31 = 0LL;
                      break;
                    }
                  }
                }

LABEL_177:
  if (!HIBYTE(v3)) {
    goto LABEL_235;
  }
  if ((v3 & 0x1000000) != 0)
  {
    uint64_t v101 = *(void *)(a1 + 200);
    if (!v101) {
      uint64_t v101 = *(void *)(qword_1019A0978 + 200);
    }
    int v102 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007EB8C(v101, a2);
    int v103 = (int)v102;
    else {
      int v104 = 1;
    }
    uint64_t v4 = (v4 + v103 + v104 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 292);
    if ((v3 & 0x2000000) == 0)
    {
LABEL_180:
      if ((v3 & 0x4000000) == 0) {
        goto LABEL_181;
      }
      goto LABEL_199;
    }
  }

  else if ((v3 & 0x2000000) == 0)
  {
    goto LABEL_180;
  }

  uint64_t v105 = *(void *)(a1 + 208);
  if (!v105) {
    uint64_t v105 = *(void *)(qword_1019A0978 + 208);
  }
  int v106 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007F250(v105, a2);
  int v107 = (int)v106;
  else {
    int v108 = 1;
  }
  uint64_t v4 = (v4 + v107 + v108 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_181:
    if ((v3 & 0x8000000) == 0) {
      goto LABEL_182;
    }
    goto LABEL_205;
  }

  v46 = *(void *)(v5 + 312);
  if (!v46) {
    v46 = *(void *)(qword_1019A11B8 + 312);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F0,  v46,  a2,  a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x80) == 0)
  {
LABEL_138:
    if ((v39 & 0x100) == 0) {
      goto LABEL_139;
    }
    goto LABEL_183;
  }

  if (!HIBYTE(v3)) {
    goto LABEL_235;
  }
  if ((v3 & 0x1000000) != 0)
  {
    uint64_t v101 = *(void *)(a1 + 200);
    if (!v101) {
      uint64_t v101 = *(void *)(qword_1019A11B8 + 200);
    }
    int v102 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001ECAB4(v101, a2);
    int v103 = (int)v102;
    else {
      int v104 = 1;
    }
    uint64_t v4 = (v4 + v103 + v104 + 2);
    unsigned int v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 0x2000000) == 0)
    {
LABEL_180:
      if ((v3 & 0x4000000) == 0) {
        goto LABEL_181;
      }
      goto LABEL_199;
    }
  }

  else if ((v3 & 0x2000000) == 0)
  {
    goto LABEL_180;
  }

  uint64_t v105 = *(void *)(a1 + 208);
  if (!v105) {
    uint64_t v105 = *(void *)(qword_1019A11B8 + 208);
  }
  int v106 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001F777C(v105, a2);
  int v107 = (int)v106;
  else {
    int v108 = 1;
  }
  uint64_t v4 = (v4 + v107 + v108 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_181:
    if ((v3 & 0x8000000) == 0) {
      goto LABEL_182;
    }
    goto LABEL_205;
  }

  if (v122 >= *(_DWORD *)(a1 + 208))
  {
LABEL_187:
    if (*(_BYTE *)(a1 + 224))
    {
      if (v145 > 0.2)
      {
        int v127 = *(void *)(a1 + 296);
        if (!v127
          || *(float *)(*(void *)(*(void *)(a1 + 264)
                                  + (((v127 + *(void *)(a1 + 288) - 1) >> 7) & 0x1FFFFFFFFFFFFF8LL))
                      + 4 * ((v127 + *(void *)(a1 + 288) - 1) & 0x3FF)) < 0.75
          && (float)(*(float *)(a1 + 248) / (float)v127) < 1.0)
        {
          sub_1007C34D4(a1 + 304, (uint64_t)v154);
          uint64_t v41 = *(double *)&v154[16];
          int v40 = *(double *)&v154[8];
          uint64_t v42 = v155;
          v152 = *(_OWORD *)&v154[8];
          v153 = v155;
          if (*(_BYTE *)(a1 + 196))
          {
            if (qword_101934560 != -1) {
              dispatch_once(&qword_101934560, &stru_1018504C8);
            }
            int v128 = (os_log_s *)qword_101934568;
            if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEBUG, "using mean accel", buf, 2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934560 != -1) {
                dispatch_once(&qword_101934560, &stru_1018504C8);
              }
              LOWORD(v148) = 0;
              LODWORD(v137) = 2;
              v135 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "using mean accel",  &v148,  *(void *)&v137);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, c onst CFTimeInterval &)",  "%s\n",  v135);
              if (v135 != buf) {
                free(v135);
              }
            }
          }

          uint64_t v45 = sqrt(v41 * v41 + v40 * v40 + v42 * v42);
          v46 = fabs(v45 + -1.0) / v45;
        }
      }
    }

    goto LABEL_26;
  }

  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_101934560 != -1) {
      dispatch_once(&qword_101934560, &stru_1018504C8);
    }
    v126 = (os_log_s *)qword_101934568;
    if (os_log_type_enabled((os_log_t)qword_101934568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEBUG, "Taking another look.", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934560 != -1) {
        dispatch_once(&qword_101934560, &stru_1018504C8);
      }
      *(_WORD *)v154 = 0;
      LODWORD(v137) = 2;
      uint64_t v69 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934568,  2LL,  "Taking another look.",  v154,  *(void *)&v137);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)",  "%s\n",  v69);
      goto LABEL_52;
    }
  }

  int v63 = *(_DWORD *)(a2 + 276);
  v5 |= 0x800000000000000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 276) = v63;
  uint64_t v4 = *v3;
  int v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x2000000000000000LL) == 0)
  {
LABEL_72:
    if ((v7 & 0x100) == 0) {
      goto LABEL_73;
    }
    goto LABEL_179;
  }

  PB::TextFormatter::format(this, "sameEventState", *(_DWORD *)(a1 + 236));
  int v7 = *v5;
  int v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x4000000000000LL) == 0)
  {
LABEL_76:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_179;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 276), 0x1F8u);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 0x2000000000000000LL) == 0)
  {
LABEL_72:
    if ((v6 & 0x100) == 0) {
      goto LABEL_73;
    }
    goto LABEL_179;
  }

          *(_DWORD *)(a1 + 72) = v77;
          goto LABEL_198;
        case 0xDu:
          *(_DWORD *)(a1 + 124) |= 0x400u;
          int v80 = *((void *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)this + 2)) {
            goto LABEL_194;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v80);
          goto LABEL_196;
        case 0xEu:
          *(_DWORD *)(a1 + 124) |= 0x10000u;
          uint64_t v81 = *((void *)this + 1);
          if (v81 >= *((void *)this + 2))
          {
            int v84 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v82 = v81 + 1;
            int v83 = *(unsigned __int8 *)(*(void *)this + v81);
            *((void *)this + 1) = v82;
            int v84 = v83 != 0;
          }

          *(_BYTE *)(a1 + 121) = v84;
          goto LABEL_198;
        case 0xFu:
          *(_DWORD *)(a1 + 124) |= 0x8000u;
          uint64_t v85 = *((void *)this + 1);
          if (v85 >= *((void *)this + 2))
          {
            int v88 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unsigned int v86 = v85 + 1;
            int v87 = *(unsigned __int8 *)(*(void *)this + v85);
            *((void *)this + 1) = v86;
            int v88 = v87 != 0;
          }

          *(_BYTE *)(a1 + 120) = v88;
          goto LABEL_198;
        case 0x10u:
          *(_DWORD *)(a1 + 124) |= 0x200u;
          uint64_t v89 = *((void *)this + 1);
          if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((void *)this + 2)) {
            goto LABEL_194;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v89);
          goto LABEL_196;
        case 0x11u:
          *(_DWORD *)(a1 + 124) |= 0x1000u;
          v90 = *((void *)this + 1);
          if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((void *)this + 2)) {
            goto LABEL_194;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v90);
          goto LABEL_196;
        case 0x12u:
          *(_DWORD *)(a1 + 124) |= 0x40u;
          int v91 = *((void *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((void *)this + 2)) {
            goto LABEL_194;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v91);
          goto LABEL_196;
        case 0x13u:
          *(_DWORD *)(a1 + 124) |= 0x2000u;
          int v92 = *((void *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((void *)this + 2)) {
            goto LABEL_194;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v92);
          goto LABEL_196;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_198;
      }
    }

    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      int v23 = v4 + 1;
      int v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        uint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

LABEL_199:
  uint64_t v109 = *(void *)(a1 + 216);
  if (!v109) {
    uint64_t v109 = *(void *)(qword_1019A0978 + 216);
  }
  int v110 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007FC9C(v109, a2);
  int v111 = (int)v110;
  else {
    int v112 = 1;
  }
  uint64_t v4 = (v4 + v111 + v112 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x8000000) == 0)
  {
LABEL_182:
    if ((v3 & 0x10000000) == 0) {
      goto LABEL_183;
    }
    goto LABEL_211;
  }

  uint64_t v109 = *(void *)(a1 + 216);
  if (!v109) {
    uint64_t v109 = *(void *)(qword_1019A11B8 + 216);
  }
  int v110 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001F9F24(v109, a2);
  int v111 = (int)v110;
  else {
    int v112 = 1;
  }
  uint64_t v4 = (v4 + v111 + v112 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x8000000) == 0)
  {
LABEL_182:
    if ((v3 & 0x10000000) == 0) {
      goto LABEL_183;
    }
    goto LABEL_211;
  }

  int v99 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 204);
  if ((v99 & 0x80000000) != 0)
  {
    int v100 = 12;
  }

  else if (v99 >= 0x80)
  {
    int v100 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v99, a2) + 2;
    unsigned int v3 = *(_DWORD *)(a1 + 224);
  }

  else
  {
    int v100 = 3;
  }

  uint64_t v4 = (v100 + v4);
  if ((v3 & 0x10000000) != 0) {
    goto LABEL_205;
  }
LABEL_181:
  if ((v3 & 0x20000000) == 0) {
    goto LABEL_215;
  }
LABEL_209:
  int v103 = *(void *)(a1 + 208);
  if (!v103) {
    int v103 = *(void *)(qword_1019A1D48 + 208);
  }
  int v104 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10061948C(v103, a2);
  int v106 = (int)v104;
  else {
    int v107 = 1;
  }
  uint64_t v4 = (v4 + v106 + v107 + 2);
LABEL_215:
  *(_DWORD *)(a1 + 220) = v4;
  return v4;
}

  *(_BYTE *)(a2 + 2) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v65 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    int v66 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "sosCanceledBecauseOffWrist";
    int v193 = 2048;
    unsigned int v194 = v66;
    _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v162 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "sosCanceledBecauseOffWrist";
    v189 = 2048;
    v190 = v162;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    int v164 = (uint8_t *)v163;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v163);
    if (v164 != buf) {
      free(v164);
    }
  }

  a5[6] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x10000000000000LL) == 0)
  {
LABEL_30:
    if ((v10 & 0x20000000000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_211;
  }

      unsigned int v3 = *((void *)this + 2);
      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    int v16 = 0;
    int v11 = 0LL;
    if (v2 > v3) {
      unsigned int v3 = v2;
    }
    while (v3 != v2)
    {
      uint64_t v17 = v2 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      uint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        int v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  uint64_t result = *(float *)(a2 + 244);
  v5 |= 0x8000000000000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(float *)(a1 + 244) = result;
  uint64_t v4 = *v3;
  int v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x4000000000LL) == 0)
  {
LABEL_94:
    if ((v4 & 0x8000000000LL) == 0) {
      goto LABEL_95;
    }
    goto LABEL_201;
  }

  PB::TextFormatter::format(this, "stepsCadence", *(float *)(a1 + 268));
  int v7 = *v5;
  if ((*v5 & 0x400000000000000LL) == 0)
  {
LABEL_98:
    if ((v7 & 0x800000000000000LL) == 0) {
      goto LABEL_99;
    }
    goto LABEL_201;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 244), 0x452u);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 0x4000000000LL) == 0)
  {
LABEL_94:
    if ((v5 & 0x8000000000LL) == 0) {
      goto LABEL_95;
    }
    goto LABEL_201;
  }

          *(_DWORD *)(a1 + 96) = v88;
          goto LABEL_224;
        case 8u:
          *(_BYTE *)(a1 + 104) |= 2u;
          int v91 = *((void *)this + 1);
          int v92 = *((void *)this + 2);
          uint64_t v93 = *(void *)this;
          if (v91 <= 0xFFFFFFFFFFFFFFF5LL && v91 + 10 <= v92)
          {
            int v94 = 0;
            int v95 = 0;
            int v96 = 0LL;
            do
            {
              uint64_t v97 = v91 + 1;
              *((void *)this + 1) = v91 + 1;
              v98 = *(_BYTE *)(v93 + v91);
              v96 |= (unint64_t)(v98 & 0x7F) << v94;
              if ((v98 & 0x80) == 0) {
                goto LABEL_202;
              }
              v94 += 7;
              int v91 = v97;
              uint64_t v21 = v95++ > 8;
            }

            while (!v21);
LABEL_156:
            LODWORD(v96) = 0;
            goto LABEL_202;
          }

          int v128 = 0;
          uint64_t v129 = 0;
          int v96 = 0LL;
          if (v92 <= v91) {
            int v92 = *((void *)this + 1);
          }
          while (2)
          {
            if (v92 == v91)
            {
              LODWORD(v96) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int v130 = v91 + 1;
              int v131 = *(_BYTE *)(v93 + v91);
              *((void *)this + 1) = v130;
              v96 |= (unint64_t)(v131 & 0x7F) << v128;
              if (v131 < 0)
              {
                v128 += 7;
                int v91 = v130;
                uint64_t v21 = v129++ > 8;
                if (v21) {
                  goto LABEL_156;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v96) = 0;
              }
            }

            break;
          }

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24)) {
            return v6 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_199;
      }
    }

    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      int v23 = v4 + 1;
      int v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        uint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

LABEL_205:
  uint64_t v113 = *(void *)(a1 + 224);
  if (!v113) {
    uint64_t v113 = *(void *)(qword_1019A0978 + 224);
  }
  int v114 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100088944(v113, a2);
  int v115 = (int)v114;
  else {
    int v116 = 1;
  }
  uint64_t v4 = (v4 + v115 + v116 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x10000000) == 0)
  {
LABEL_183:
    if ((v3 & 0x20000000) == 0) {
      goto LABEL_184;
    }
    goto LABEL_217;
  }

  int v55 = *(void *)(v5 + 384);
  if (!v55) {
    int v55 = *(void *)(qword_1019A11B8 + 384);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D4,  v55,  a2,  a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x20000) == 0)
  {
LABEL_148:
    if ((v39 & 0x40000) == 0) {
      goto LABEL_149;
    }
    goto LABEL_211;
  }

  uint64_t v113 = *(void *)(a1 + 224);
  if (!v113) {
    uint64_t v113 = *(void *)(qword_1019A11B8 + 224);
  }
  int v114 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001FDDE0(v113, a2);
  int v115 = (int)v114;
  else {
    int v116 = 1;
  }
  uint64_t v4 = (v4 + v115 + v116 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x10000000) == 0)
  {
LABEL_183:
    if ((v3 & 0x20000000) == 0) {
      goto LABEL_184;
    }
    goto LABEL_217;
  }

  LOBYTE(v69) = *(_BYTE *)(a1 + 152);
  if ((_BYTE)v69)
  {
    if ((*(_BYTE *)(a1 + 152) & 1) != 0)
    {
      int v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 136);
      if (v70 >= 0x80)
      {
        int v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v70, a2) + 2;
        uint64_t v69 = *(_DWORD *)(a1 + 152);
      }

      else
      {
        int v71 = 3;
      }

      uint64_t v4 = (v71 + v4);
    }

    if ((v69 & 2) != 0)
    {
      int v72 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 140);
      else {
        uint64_t v73 = 3;
      }
      uint64_t v4 = (v73 + v4);
    }
  }

  *(_DWORD *)(a1 + 144) = v4;
  return v4;
}

              uint64_t v142 = (uint64_t *)*v142;
            }

            while (v142);
          }

          if (*(double *)&__p != 0.0)
          {
            v215 = (__int32 *)__p;
            operator delete(__p);
          }
        }

  *(_BYTE *)(a2 + 2) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  int v67 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    int v68 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "sosCanceledBecauseStand";
    int v193 = 2048;
    unsigned int v194 = v68;
    _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v165 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "sosCanceledBecauseStand";
    v189 = 2048;
    v190 = v165;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    unsigned int v167 = (uint8_t *)v166;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v166);
    if (v167 != buf) {
      free(v167);
    }
  }

  a5[7] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x20000000000000LL) == 0)
  {
LABEL_31:
    if ((v10 & 0x40000000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_217;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188A8E0);
  }
  int v136 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v85;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v84;
    _os_log_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingNotOnBothSides,rightCount,%{public}d,leftCount,%{public}d",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    *(_DWORD *)int v177 = 134349568;
    *(double *)&v177[4] = v4;
    int v178 = 1026;
    *(_DWORD *)v179 = v85;
    *(_WORD *)&v179[4] = 1026;
    *(_DWORD *)&v179[6] = v84;
    LODWORD(v172) = 24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,isSolutionAmbiguous,1,buildingNotOnBothSides,rightCount,%{public}d,leftCount,%{public}d",  v177,  v172);
    int v83 = (char *)v166;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isSolutionAmbiguous(MMFilterData &, const MMSnapData &)",  "%s\n",  v166);
LABEL_254:
    if (v83 != buf) {
      free(v83);
    }
  }

  int v83 = *(_DWORD *)(a2 + 180);
  v5 |= 0x800000000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 180) = v83;
  uint64_t v4 = *v3;
  int v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x100000000LL) == 0)
  {
LABEL_100:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_101;
    }
    goto LABEL_207;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 180), 0x518u);
  uint64_t v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 0x100000000LL) == 0)
  {
LABEL_100:
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_101;
    }
    goto LABEL_207;
  }

          *(_DWORD *)(a1 + 100) = v104;
          goto LABEL_224;
        default:
          if ((PB::Reader::skip(this, v18 >> 3, v18 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_224;
      }
    }

    uint64_t v22 = 0;
    int v23 = 0;
    uint64_t v18 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      int v24 = v4 + 1;
      uint64_t v25 = *(_BYTE *)(v15 + v4);
      *((void *)this + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_21;
      }
      v22 += 7;
      uint64_t v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        uint64_t v18 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

LABEL_211:
  uint64_t v117 = *(void *)(a1 + 232);
  if (!v117) {
    uint64_t v117 = *(void *)(qword_1019A0978 + 232);
  }
  v118 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100088FB4(v117, a2);
  int v119 = (int)v118;
  else {
    int v120 = 1;
  }
  uint64_t v4 = (v4 + v119 + v120 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x20000000) == 0)
  {
LABEL_184:
    if ((v3 & 0x40000000) == 0) {
      goto LABEL_185;
    }
    goto LABEL_223;
  }

  uint64_t v57 = *(void *)(v5 + 400);
  if (!v57) {
    uint64_t v57 = *(void *)(qword_1019A11B8 + 400);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D6,  v57,  a2,  a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x80000) == 0)
  {
LABEL_150:
    if ((v39 & 0x100000) == 0) {
      goto LABEL_151;
    }
    goto LABEL_217;
  }

  uint64_t v117 = *(void *)(a1 + 232);
  if (!v117) {
    uint64_t v117 = *(void *)(qword_1019A11B8 + 232);
  }
  v118 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10020003C(v117, a2);
  int v119 = (int)v118;
  else {
    int v120 = 1;
  }
  uint64_t v4 = (v4 + v119 + v120 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x20000000) == 0)
  {
LABEL_184:
    if ((v3 & 0x40000000) == 0) {
      goto LABEL_185;
    }
    goto LABEL_223;
  }

  *(_BYTE *)(a2 + 2) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v69 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    int v70 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "sosCanceledBecauseActive";
    int v193 = 2048;
    unsigned int v194 = v70;
    _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v168 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "sosCanceledBecauseActive";
    v189 = 2048;
    v190 = v168;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    v170 = (uint8_t *)v169;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v169);
    if (v170 != buf) {
      free(v170);
    }
  }

  a5[8] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x40000000000000LL) == 0)
  {
LABEL_32:
    if ((v10 & 0x80000000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_223;
  }

          *(_DWORD *)(a1 + 88) = v59;
          goto LABEL_244;
        case 6u:
          *(_WORD *)(a1 + 116) |= 0x100u;
          v62 = *((void *)this + 1);
          int v63 = *((void *)this + 2);
          int v64 = *(void *)this;
          if (v62 <= 0xFFFFFFFFFFFFFFF5LL && v62 + 10 <= v63)
          {
            uint64_t v65 = 0;
            int v66 = 0;
            int v67 = 0LL;
            do
            {
              int v68 = v62 + 1;
              *((void *)this + 1) = v62 + 1;
              uint64_t v69 = *(_BYTE *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0) {
                goto LABEL_214;
              }
              v65 += 7;
              v62 = v68;
              int v20 = v66++ > 8;
            }

            while (!v20);
LABEL_156:
            LODWORD(v67) = 0;
            goto LABEL_214;
          }

          int v127 = 0;
          int v128 = 0;
          int v67 = 0LL;
          if (v63 <= v62) {
            int v63 = *((void *)this + 1);
          }
          while (2)
          {
            if (v63 == v62)
            {
              LODWORD(v67) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v129 = v62 + 1;
              int v130 = *(_BYTE *)(v64 + v62);
              *((void *)this + 1) = v129;
              v67 |= (unint64_t)(v130 & 0x7F) << v127;
              if (v130 < 0)
              {
                v127 += 7;
                v62 = v129;
                int v20 = v128++ > 8;
                if (v20) {
                  goto LABEL_156;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v67) = 0;
              }
            }

            break;
          }

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24)) {
            return v6 == 0;
          }
          break;
        case 6u:
          *(_BYTE *)(a1 + 144) |= 1u;
          int v84 = *((void *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFF7LL || v84 + 8 > *((void *)this + 2)) {
            goto LABEL_208;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v84);
          goto LABEL_210;
        case 7u:
          *(_BYTE *)(a1 + 144) |= 2u;
          uint64_t v85 = *((void *)this + 1);
          if (v85 > 0xFFFFFFFFFFFFFFF7LL || v85 + 8 > *((void *)this + 2)) {
            goto LABEL_208;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v85);
          goto LABEL_210;
        case 8u:
          *(_BYTE *)(a1 + 144) |= 8u;
          unsigned int v86 = *((void *)this + 1);
          if (v86 > 0xFFFFFFFFFFFFFFF7LL || v86 + 8 > *((void *)this + 2)) {
            goto LABEL_208;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v86);
          goto LABEL_210;
        case 9u:
          *(_BYTE *)(a1 + 144) |= 0x10u;
          int v87 = *((void *)this + 1);
          if (v87 > 0xFFFFFFFFFFFFFFF7LL || v87 + 8 > *((void *)this + 2)) {
            goto LABEL_208;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v87);
          goto LABEL_210;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_211;
      }
    }

    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      int v23 = v4 + 1;
      int v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        uint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

LABEL_217:
  uint64_t v121 = *(void *)(a1 + 240);
  if (!v121) {
    uint64_t v121 = *(void *)(qword_1019A0978 + 240);
  }
  unsigned int v122 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000893B0(v121, a2);
  int v123 = (int)v122;
  else {
    int v124 = 1;
  }
  uint64_t v4 = (v4 + v123 + v124 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 292);
  if ((v3 & 0x40000000) == 0)
  {
LABEL_185:
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_235;
    }
    goto LABEL_229;
  }

  int v59 = *(void *)(v5 + 416);
  if (!v59) {
    int v59 = *(void *)(qword_1019A11B8 + 416);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7D8,  v59,  a2,  a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x200000) == 0)
  {
LABEL_152:
    if ((v39 & 0x400000) == 0) {
      goto LABEL_153;
    }
    goto LABEL_223;
  }

  uint64_t v121 = *(void *)(a1 + 240);
  if (!v121) {
    uint64_t v121 = *(void *)(qword_1019A11B8 + 240);
  }
  unsigned int v122 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100202C48(v121, a2);
  int v123 = (int)v122;
  else {
    int v124 = 1;
  }
  uint64_t v4 = (v4 + v123 + v124 + 2);
  unsigned int v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x40000000) == 0)
  {
LABEL_185:
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_235;
    }
    goto LABEL_229;
  }

  HIDWORD(v106) = v55;
  int v63 = fmin((*(float *)(a2 + 356) - *(double *)(a3 + 232)) / (*(float *)(a2 + 356) - *(float *)(a2 + 352)), 1.0);
  int v64 = v63;
  uint64_t v65 = sub_100D086F8(v64, *(float *)(a2 + 348)) * *(float *)(a2 + 344);
  int v66 = sub_1007F9FC8(v48, a3, (float *)(a2 + 328));
  if (qword_101934680 != -1) {
    dispatch_once(&qword_101934680, &stru_1018576B0);
  }
  int v67 = (os_log_s *)qword_101934688;
  if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEFAULT))
  {
    int v104 = v66;
    int v68 = *(double *)(a3 + 328) > -1.0 && *(double *)(a3 + 288) != -1.79769313e308;
    uint64_t v69 = *(double *)(a3 + 656) != -1.79769313e308;
    int v71 = *(double *)(a3 + 168) != -1.79769313e308 && *(_DWORD *)(a3 + 184) != 0;
    int v72 = v10;
    uint64_t v73 = *(double *)(a3 + 240) >= 0.8 && *(double *)(a3 + 264) != -1.79769313e308;
    int v99 = *(void *)(a3 + 232);
    int v100 = *(double *)(a3 + 8) != -1.79769313e308;
    uint64_t v101 = HIBYTE(v120);
    int v102 = *(void *)(v119 + 32);
    int v74 = log10f(*(float *)(a3 + 1368));
    int v75 = *(unsigned __int16 *)(v119 + 50);
    int v76 = (float)(v74 * 10.0);
    uint64_t v77 = *(float *)(a3 + 1372);
    int v78 = *(float *)(a3 + 1376);
    LODWORD(buf) = 67117568;
    DWORD1(buf) = v59;
    WORD4(buf) = 1024;
    *(_DWORD *)((char *)&buf + 10) = v68;
    int v66 = v104;
    HIWORD(buf) = 1024;
    *(_DWORD *)v171 = v69;
    *(_WORD *)&v171[4] = 1024;
    *(_DWORD *)&v171[6] = v71;
    v172 = 1024;
    int v173 = v73;
    uint64_t v10 = v72;
    int v174 = 1024;
    int v175 = v110;
    unsigned int v176 = 1024;
    int v177 = v15;
    int v178 = 2048;
    v179 = v6;
    v180 = 2048;
    v181 = v12;
    int v182 = 2048;
    int v183 = v99;
    int v184 = 2048;
    unsigned int v185 = v118;
    int v186 = 2048;
    int v187 = v8;
    v188 = 2048;
    v189 = v109;
    v190 = 1024;
    int v191 = v104;
    int v192 = 1024;
    int v193 = v100;
    unsigned int v194 = 1024;
    int v195 = v72;
    int v196 = 1024;
    v197 = v101;
    v198 = 1024;
    v199 = v59;
    int v200 = 1024;
    int v201 = v11;
    int v202 = 2048;
    unsigned int v203 = *(float *)&v107;
    int v204 = 2048;
    int v205 = v112;
    v206 = 2048;
    v207 = v111;
    v208 = 2048;
    int v209 = v102;
    int v210 = 2048;
    int v211 = v65;
    unsigned int v212 = 2048;
    int v213 = v63;
    int v214 = 2048;
    v215 = v44;
    v216 = 2048;
    v217 = v76;
    int v218 = 1024;
    int v219 = v115;
    int v220 = 2048;
    unsigned int v221 = v108;
    int v222 = 2048;
    int v223 = v16;
    v224 = 1024;
    v225 = HIDWORD(v106);
    v226 = 2048;
    int v227 = v75;
    int v228 = 2048;
    int v229 = v77;
    unsigned int v230 = 2048;
    v62 = v116;
    int v231 = v78;
    _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "CyclingStateDetector,state,%d,hasGPS,%d,hasStep,%d,hasElevation,%d,hasHR,%d,stepsRaw,%u,stepsQualified,%u,gpsSpeed ,%f,rawGPSSpeed,%f,heartrate,%f,hrConf,%f,grade,%f,pedSpeed,%f,wrHrMetDiscordanceStatus,%d,hasTier1,%d,tier1Type,% d,hasStepsQual,%d,cycleState,%d,isArmConstrained,%d,tier1CyclingProbability,%f,accelXPowerSum,%f,grav90th_100Hz,%f ,avgWRMets,%f,HRMets,%f,fhr,%f,isDriving,%f,roadNoise,%f,gpsDeltaDistanceState,%d,gpsDeltaDist,%f,verticalSpeed,%f ,vehicularAccel,%d,speedBufferLen,%zu,tier1Smooth,%f,pedEnergyVertical,%f",  (uint8_t *)&buf,  0x11Au);
  }

  if (sub_1002921D0(115, 2))
  {
    uint64_t v105 = COERCE_DOUBLE(__PAIR64__(v11, v66));
    bzero(&buf, 0x65CuLL);
    v98 = v16;
    uint64_t v97 = v10;
    uint64_t v81 = v59;
    if (qword_101934680 != -1) {
      dispatch_once(&qword_101934680, &stru_1018576B0);
    }
    int v103 = qword_101934688;
    v82 = *(double *)(a3 + 328) > -1.0 && *(double *)(a3 + 288) != -1.79769313e308;
    int v83 = *(double *)(a3 + 656) != -1.79769313e308;
    uint64_t v85 = *(double *)(a3 + 168) != -1.79769313e308 && *(_DWORD *)(a3 + 184) != 0;
    unsigned int v86 = *(double *)(a3 + 240) >= 0.8 && *(double *)(a3 + 264) != -1.79769313e308;
    int v87 = *(void *)(a3 + 232);
    int v88 = *(double *)(a3 + 8) != -1.79769313e308;
    uint64_t v89 = HIBYTE(v120);
    v90 = v112;
    uint64_t v113 = *(void *)(v119 + 32);
    int v91 = log10f(*(float *)(a3 + 1368));
    int v92 = *(unsigned __int16 *)(v119 + 50);
    uint64_t v93 = (float)(v91 * 10.0);
    int v94 = *(float *)(a3 + 1372);
    int v95 = *(float *)(a3 + 1376);
    LODWORD(v121) = 67117568;
    HIDWORD(v121) = v81;
    LOWORD(v122) = 1024;
    *(_DWORD *)((char *)&v122 + 2) = v82;
    HIWORD(v122) = 1024;
    LODWORD(v123) = v83;
    WORD2(v123) = 1024;
    *(_DWORD *)((char *)&v123 + 6) = v85;
    WORD5(v123) = 1024;
    HIDWORD(v123) = v86;
    LOWORD(v124) = 1024;
    *(_DWORD *)((char *)&v124 + 2) = v110;
    HIWORD(v124) = 1024;
    *(double *)uint64_t v125 = v6;
    *(_WORD *)&v125[8] = 2048;
    *(_WORD *)v126 = 2048;
    *(void *)&v126[2] = v87;
    *(_WORD *)&v126[10] = 2048;
    *(double *)&v126[12] = v118;
    *(_WORD *)&v126[20] = 2048;
    *(double *)&v126[22] = v8;
    *(_WORD *)&v126[30] = 2048;
    int v127 = v109;
    int v128 = 1024;
    uint64_t v129 = LODWORD(v105);
    int v130 = 1024;
    int v131 = v88;
    int v132 = 1024;
    int v133 = v97;
    uint64_t v134 = 1024;
    v135 = v89;
    int v136 = 1024;
    int v137 = v81;
    uint64_t v138 = 1024;
    int v139 = HIDWORD(v105);
    int v140 = 2048;
    int v141 = *(float *)&v107;
    uint64_t v142 = 2048;
    v143 = v90;
    unsigned int v144 = 2048;
    int v145 = v111;
    int v146 = 2048;
    int v147 = v113;
    int v148 = 2048;
    unsigned int v149 = v65;
    int v150 = 2048;
    int v151 = v63;
    v152 = 2048;
    v153 = v44;
    v154 = 2048;
    int v155 = v93;
    int v156 = 1024;
    int v157 = v115;
    unsigned int v158 = 2048;
    int v159 = v108;
    int v160 = 2048;
    v161 = v98;
    v162 = 1024;
    v163 = HIDWORD(v106);
    int v164 = 2048;
    int v165 = v92;
    int v166 = 2048;
    unsigned int v167 = v94;
    int v168 = 2048;
    int v169 = v95;
    int v96 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v103,  0LL,  "CyclingStateDetector,state,%d,hasGPS,%d,hasStep,%d,hasElevation,%d,hasHR,%d,stepsRaw,%u,stepsQualifi ed,%u,gpsSpeed,%f,rawGPSSpeed,%f,heartrate,%f,hrConf,%f,grade,%f,pedSpeed,%f,wrHrMetDiscordanceStatu s,%d,hasTier1,%d,tier1Type,%d,hasStepsQual,%d,cycleState,%d,isArmConstrained,%d,tier1CyclingProbabil ity,%f,accelXPowerSum,%f,grav90th_100Hz,%f,avgWRMets,%f,HRMets,%f,fhr,%f,isDriving,%f,roadNoise,%f,g psDeltaDistanceState,%d,gpsDeltaDist,%f,verticalSpeed,%f,vehicularAccel,%d,speedBufferLen,%zu,tier1S mooth,%f,pedEnergyVertical,%f",  &v121,  282,  v97,  v98,  v99,  v100,  v103,  v105,  v12,  v106,  v6,  v107,  v108,  LODWORD(v8),  LODWORD(v109),  v110,  v113,  v114,  v116,  v118,  *(double *)&v119,  v120,  v121,  v122,  *(double *)&v123,  *((double *)&v123 + 1),  v124,  HIDWORD(v107),  *(double *)&v125[2],  v12,  *(_DWORD *)v126,  *(size_t *)&v126[8],  *(double *)&v126[16],  *(double *)&v126[24]);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLCyclingStateDetector_Type::CyclingResult CLCyclingStateDetector::determineCyclingState(const CLWorkoutPredictorI nputs &, const CLWorkoutPredictorInputs::Items &)",  "%s\n",  v96);
    return v117;
  }

  return v62;
}

  *(_BYTE *)(a2 + 2) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  int v71 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    int v72 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "sosCanceledBecauseSteps";
    int v193 = 2048;
    unsigned int v194 = v72;
    _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v171 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "sosCanceledBecauseSteps";
    v189 = 2048;
    v190 = v171;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    int v173 = (uint8_t *)v172;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v172);
    if (v173 != buf) {
      free(v173);
    }
  }

  a5[9] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x80000000000000LL) == 0)
  {
LABEL_33:
    if ((v10 & 0x2000000000000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_229;
  }

              v143 = (uint64_t)(v117->n128_u64[1] - v117->n128_u64[0]) >> 3;
              if (v143 == v125) {
                break;
              }
              if (v143 > v125) {
                goto LABEL_224;
              }
LABEL_223:
              sub_100007664(v136, v117);
              *(_DWORD *)(v136 + 24) = v117[1].n128_u32[2];
              int v132 = v117 + 2;
              sub_100007664(v136 + 32, v117 + 2);
              int v133 = &v117[3].n128_i8[8];
              int v146 = *(__int128 *)((char *)&v117[3] + 8);
              *(_DWORD *)(v136 + 72) = v117[4].n128_u32[2];
              *(_OWORD *)(v136 + 56) = v146;
            }

            unsigned int v144 = v117[3].n128_f64[1];
            int v145 = v144 <= v127;
            if (v144 == v127) {
              int v145 = (signed __int32)v117[4].n128_u32[2] <= v247;
            }
            if (v145) {
              goto LABEL_223;
            }
LABEL_224:
            uint64_t v117 = (__n128 *)v136;
LABEL_225:
            int v147 = (void *)v117->n128_u64[0];
            if (v117->n128_u64[0])
            {
              v117->n128_u64[1] = (unint64_t)v147;
              operator delete(v147);
            }

            v117->n128_u64[0] = v237;
            v117->n128_u64[1] = v242;
            v117[1].n128_u64[0] = v224;
            v117[1].n128_u32[2] = v222;
            int v148 = (void *)v132->n128_u64[0];
            if (v132->n128_u64[0])
            {
              v117[2].n128_u64[1] = (unint64_t)v148;
              operator delete(v148);
              v132->n128_u64[1] = 0LL;
              v132[1].n128_u64[0] = 0LL;
            }

            v132->n128_u64[0] = v232;
            *(__n128 *)((char *)v117 + 40) = v227;
            *(double *)int v133 = v127;
            *((void *)v133 + 1) = v131;
            *((_DWORD *)v133 + 4) = v247;
LABEL_230:
            int v114 = v115 - 1;
            if (!v115)
            {
              unsigned int v149 = v7 / 0x50uLL;
              while (1)
              {
                int v150 = 0LL;
                int v151 = v253;
                v152 = *(void *)v6;
                v233 = *((void *)v6 + 1);
                int v228 = *((void *)v6 + 2);
                *((void *)v6 + 1) = 0LL;
                *((void *)v6 + 2) = 0LL;
                *(void *)int v6 = 0LL;
                v153 = *((_DWORD *)v6 + 6);
                unsigned int v257 = *((void *)v6 + 4);
                unsigned int v248 = *((void *)v6 + 5);
                int v238 = v152;
                v243 = *((void *)v6 + 6);
                *((void *)v6 + 5) = 0LL;
                *((void *)v6 + 6) = 0LL;
                *((void *)v6 + 4) = 0LL;
                v154 = *(__int128 *)((char *)v6 + 56);
                int v263 = *((_DWORD *)v6 + 18);
                int v155 = (uint64_t)v6;
                v262 = v154;
                do
                {
                  int v156 = v155;
                  int v157 = v150 + 1;
                  v155 += 80 * (v150 + 1);
                  unsigned int v158 = 2 * v150;
                  int v150 = (2 * v150) | 1;
                  int v159 = v158 + 2;
                  if (v159 >= v149) {
                    goto LABEL_242;
                  }
                  int v160 = (uint64_t)(*(void *)(v155 + 8) - *(void *)v155) >> 3;
                  v161 = *(void *)(v155 + 88) - *(void *)(v155 + 80);
                  if (v160 != v161 >> 3)
                  {
                    if (v160 <= v161 >> 3) {
                      goto LABEL_242;
                    }
LABEL_241:
                    v155 += 80LL;
                    int v150 = v159;
                    goto LABEL_242;
                  }

                  v162 = *(double *)(v156 + 80 * v157 + 56);
                  v163 = *(double *)(v155 + 136);
                  int v164 = v162 <= v163;
                  if (v162 == v163) {
                    int v164 = *(_DWORD *)(v156 + 80 * v157 + 72) <= *(_DWORD *)(v155 + 152);
                  }
                  if (!v164) {
                    goto LABEL_241;
                  }
LABEL_242:
                  sub_100007664(v156, (__n128 *)v155);
                  *(_DWORD *)(v156 + 24) = *(_DWORD *)(v155 + 24);
                  int v165 = (void *)(v155 + 32);
                  sub_100007664(v156 + 32, (__n128 *)(v155 + 32));
                  int v166 = *(_OWORD *)(v155 + 56);
                  *(_DWORD *)(v156 + 72) = *(_DWORD *)(v155 + 72);
                  *(_OWORD *)(v156 + 56) = v166;
                }

                while (v150 <= (uint64_t)((unint64_t)(v149 - 2) >> 1));
                unsigned int v167 = v155 + 56;
                int v168 = (__n128 *)(v253 - 80);
                v253 -= 80LL;
                if (v155 == v151 - 80)
                {
                  int v183 = *(void **)v155;
                  if (*(void *)v155)
                  {
                    *(void *)(v155 + 8) = v183;
                    operator delete(v183);
                  }

                  *(void *)int v155 = v238;
                  *(void *)(v155 + 8) = v233;
                  *(void *)(v155 + 16) = v228;
                  *(_DWORD *)(v155 + 24) = v153;
                  int v184 = *(void **)(v155 + 32);
                  if (v184)
                  {
                    *(void *)(v155 + 40) = v184;
                    operator delete(v184);
                  }

                  *(void *)(v155 + 32) = v257;
                  *(void *)(v155 + 40) = v248;
                  *(void *)(v155 + 48) = v243;
                  unsigned int v185 = v263;
                  *(_OWORD *)unsigned int v167 = v262;
                  *(_DWORD *)(v155 + 72) = v185;
                }

                else
                {
                  sub_100007664(v155, v168);
                  *(_DWORD *)(v155 + 24) = *(_DWORD *)(v151 - 56);
                  sub_100007664(v155 + 32, (__n128 *)(v151 - 48));
                  int v169 = *(_OWORD *)(v151 - 24);
                  *(_DWORD *)(v155 + 72) = *(_DWORD *)(v151 - 8);
                  *(_OWORD *)unsigned int v167 = v169;
                  v170 = *(void **)(v151 - 80);
                  if (v170)
                  {
                    *(void *)(v151 - 72) = v170;
                    operator delete(v170);
                  }

                  *(void *)(v151 - 80) = v238;
                  *(void *)(v151 - 72) = v233;
                  *(void *)(v151 - 64) = v228;
                  *(_DWORD *)(v151 - 56) = v153;
                  v171 = *(void **)(v151 - 48);
                  if (v171)
                  {
                    *(void *)(v151 - 40) = v171;
                    operator delete(v171);
                  }

                  v172 = v151 - 24;
                  *(void *)(v151 - 48) = v257;
                  *(void *)(v151 - 40) = v248;
                  *(void *)(v151 - 32) = v243;
                  *(_OWORD *)v172 = v262;
                  *(_DWORD *)(v172 + 16) = v263;
                  int v173 = v155 + 80 - (void)v6;
                  if (v173 >= 81)
                  {
                    int v174 = v173 / 0x50uLL - 2;
                    int v175 = v174 >> 1;
                    unsigned int v176 = (uint64_t)&v6[5 * (v174 >> 1)];
                    int v177 = (uint64_t)(*(void *)(v176 + 8) - *(void *)v176) >> 3;
                    int v178 = *(void *)(v155 + 8);
                    v179 = (v178 - *(void *)v155) >> 3;
                    if (v177 == v179)
                    {
                      v180 = *((double *)&v6[5 * v175 + 3] + 1);
                      v181 = *(double *)v167;
                      int v182 = v180 <= *(double *)v167;
                      if (!v182)
                      {
LABEL_262:
                        int v258 = (v178 - *(void *)v155) >> 3;
                        unsigned int v239 = *(void **)v155;
                        v244 = *(void *)(v155 + 8);
                        unsigned int v221 = *(void *)(v155 + 16);
                        *(void *)int v155 = 0LL;
                        *(void *)(v155 + 8) = 0LL;
                        *(void *)(v155 + 16) = 0LL;
                        int v220 = *(_DWORD *)(v155 + 24);
                        int v229 = *(void *)(v155 + 32);
                        v234 = *(_OWORD *)(v155 + 40);
                        *(void *)(v155 + 40) = 0LL;
                        *(void *)(v155 + 48) = 0LL;
                        *int v165 = 0LL;
                        int v186 = *(void *)(v155 + 64);
                        int v249 = *(_DWORD *)(v155 + 72);
                        int v219 = v174;
                        sub_100007664(v155, (__n128 *)&v6[5 * (v174 >> 1)]);
                        int v187 = &v6[5 * v175];
                        *(_DWORD *)(v155 + 24) = *((_DWORD *)v187 + 6);
                        v188 = v187 + 2;
                        sub_100007664((uint64_t)v165, (__n128 *)v187 + 2);
                        v189 = (char *)v187 + 56;
                        v190 = *(__int128 *)((char *)v187 + 56);
                        *(_DWORD *)(v167 + 16) = *((_DWORD *)v187 + 18);
                        *(_OWORD *)unsigned int v167 = v190;
                        if (v219 >= 2)
                        {
                          while (1)
                          {
                            int v192 = v175 - 1;
                            int v175 = (v175 - 1) >> 1;
                            int v191 = &v6[5 * v175];
                            int v193 = (uint64_t)(*((void *)v191 + 1) - *(void *)v191) >> 3;
                            if (v193 == v258)
                            {
                              unsigned int v194 = *((double *)&v6[5 * v175 + 3] + 1);
                              int v195 = v194 <= v181;
                              if (v194 == v181) {
                                int v195 = SDWORD2(v6[5 * v175 + 4]) <= v249;
                              }
                              if (v195) {
                                break;
                              }
                            }

                            else if (v193 <= v258)
                            {
                              break;
                            }

                            sub_100007664(v176, (__n128 *)&v6[5 * v175]);
                            int v196 = &v6[5 * v175];
                            *(_DWORD *)(v176 + 24) = *((_DWORD *)v196 + 6);
                            v188 = v196 + 2;
                            sub_100007664(v176 + 32, (__n128 *)v196 + 2);
                            v189 = (char *)v196 + 56;
                            v197 = *(__int128 *)((char *)v196 + 56);
                            *(_DWORD *)(v176 + 72) = *((_DWORD *)v196 + 18);
                            *(_OWORD *)(v176 + 56) = v197;
                            unsigned int v176 = (uint64_t)v196;
                            if (v192 <= 1) {
                              goto LABEL_272;
                            }
                          }
                        }

                        int v191 = (__int128 *)v176;
LABEL_272:
                        v198 = *(void **)v191;
                        if (*(void *)v191)
                        {
                          *((void *)v191 + 1) = v198;
                          operator delete(v198);
                        }

                        *(void *)int v191 = v239;
                        *((void *)v191 + 1) = v244;
                        *((void *)v191 + 2) = v221;
                        *((_DWORD *)v191 + 6) = v220;
                        v199 = *(void **)v188;
                        if (*(void *)v188)
                        {
                          *((void *)v191 + 5) = v199;
                          operator delete(v199);
                          *((void *)v188 + 1) = 0LL;
                          *((void *)v188 + 2) = 0LL;
                        }

                        *(void *)v188 = v229;
                        *(__int128 *)((char *)v191 + 40) = v234;
                        *(double *)v189 = v181;
                        *((void *)v189 + 1) = v186;
                        *((_DWORD *)v189 + 4) = v249;
                      }
                    }

                    else if (v177 > v179)
                    {
                      v181 = *(double *)v167;
                      goto LABEL_262;
                    }
                  }
                }

                int v20 = v149-- <= 2;
                if (v20) {
                  return;
                }
              }
            }
          }

          int v120 = *((double *)&v6[5 * v116 + 3] + 1);
          uint64_t v121 = v117[8].n128_f64[1];
          unsigned int v122 = v120 <= v121;
          if (v120 == v121) {
            unsigned int v122 = SDWORD2(v6[5 * v116 + 4]) <= (signed __int32)v117[9].n128_u32[2];
          }
          if (v122) {
            goto LABEL_199;
          }
LABEL_198:
          v117 += 5;
          int v116 = 2 * v114 + 2;
          goto LABEL_199;
        }

        uint64_t v9 = v8 >> 1;
        uint64_t v10 = a2 - 80;
        if ((unint64_t)v7 < 0x2801)
        {
          sub_100F4AB64((uint64_t)&v6[5 * (v8 >> 1)], (uint64_t)v6, v10);
        }

        else
        {
          sub_100F4AB64((uint64_t)v6, (uint64_t)&v6[5 * (v8 >> 1)], v10);
          int v11 = 5 * v9;
          int v12 = 5 * v9;
          uint64_t v13 = v12 * 16 - 80;
          sub_100F4AB64((uint64_t)(v261 + 5), (uint64_t)&v261[v12 - 5], (uint64_t)(v260 - 10));
          v12 += 5LL;
          sub_100F4AB64((uint64_t)(v261 + 10), (uint64_t)&v261[v12], (uint64_t)(v260 - 15));
          sub_100F4AB64((uint64_t)v261 + v13, (uint64_t)&v261[v11], (uint64_t)&v261[v12]);
          *(void *)&v262 = &v261[v11];
          sub_100F4A8B0(&v261, (uint64_t *)&v262);
        }

        uint64_t v14 = v261;
        v251 = a3 - 1;
        if ((a4 & 1) == 0)
        {
          int v16 = (uint64_t)(*((void *)v261 - 9) - *((void *)v261 - 10)) >> 3;
          int v15 = *((void *)v261 + 1);
          uint64_t v17 = v15 - *(void *)v261;
          if (v16 == v17 >> 3)
          {
            uint64_t v18 = *((double *)v261 - 3);
            int v19 = *((double *)v261 + 7);
            int v20 = v18 <= v19;
            if (v18 == v19) {
              int v20 = *((_DWORD *)v261 - 2) <= *((_DWORD *)v261 + 18);
            }
            if (!v20) {
              goto LABEL_17;
            }
          }

          else
          {
            if (v16 > v17 >> 3)
            {
LABEL_17:
              v225 = a4;
              goto LABEL_18;
            }

            int v19 = *((double *)v261 + 7);
          }

          v54 = (unint64_t)v260;
          v264[0] = (uint64_t)v260;
          int v55 = *(void *)v261;
          int v56 = *((void *)v261 + 2);
          *((void *)v261 + 1) = 0LL;
          *((void *)v14 + 2) = 0LL;
          *(void *)uint64_t v14 = 0LL;
          int v255 = v14[2];
          uint64_t v57 = *((_DWORD *)v14 + 6);
          int v58 = *((void *)v14 + 6);
          *((void *)v14 + 4) = 0LL;
          *((void *)v14 + 5) = 0LL;
          *((void *)v14 + 6) = 0LL;
          int v59 = *((_DWORD *)v14 + 18);
          int v60 = (v15 - v55) >> 3;
          uint64_t v61 = *(void *)(v54 - 80);
          v62 = *(void *)(v54 - 72);
          if (v60 == (v62 - v61) >> 3)
          {
            int v63 = *(double *)(v54 - 24);
            int v64 = v19 <= v63;
            if (v19 == v63) {
              int v64 = v59 <= *(_DWORD *)(v54 - 8);
            }
            if (!v64) {
              goto LABEL_95;
            }
          }

          else if (v60 > (v62 - v61) >> 3)
          {
LABEL_95:
            for (k = v14 + 5; ; k += 5)
            {
              uint64_t v69 = *((void *)k + 1) - *(void *)k;
              if (v60 == v69 >> 3)
              {
                int v70 = *((double *)k + 7);
                int v71 = v19 <= v70;
                if (v19 == v70) {
                  int v71 = v59 <= *((_DWORD *)k + 18);
                }
                if (!v71) {
                  goto LABEL_103;
                }
              }

              else if (v60 > v69 >> 3)
              {
                goto LABEL_103;
              }
            }
          }

          for (k = v14 + 5; (unint64_t)k < v54; k += 5)
          {
            int v66 = *((void *)k + 1) - *(void *)k;
            if (v60 == v66 >> 3)
            {
              int v67 = *((double *)k + 7);
              int v68 = v19 <= v67;
              if (v19 == v67) {
                int v68 = v59 <= *((_DWORD *)k + 18);
              }
              if (!v68) {
                break;
              }
            }

            else if (v60 > v66 >> 3)
            {
              break;
            }
          }

              *(_DWORD *)(a1 + 32) = v52;
              break;
            case 404:
              *(_DWORD *)(a1 + 68) |= 0x10u;
              v54 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              int v55 = *(void *)this;
              if (v54 > 0xFFFFFFFFFFFFFFF5LL || v54 + 10 > v2)
              {
                int v106 = 0;
                int v107 = 0;
                int v58 = 0LL;
                if (v2 <= v54) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v54)
                  {
                    LODWORD(v58) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_222;
                  }

                  int v108 = v54++;
                  uint64_t v109 = *(_BYTE *)(v55 + v108);
                  *((void *)this + 1) = v54;
                  v58 |= (unint64_t)(v109 & 0x7F) << v106;
                  if ((v109 & 0x80) == 0) {
                    break;
                  }
                  v106 += 7;
                  uint64_t v14 = v107++ > 8;
                  if (v14)
                  {
                    LODWORD(v58) = 0;
                    goto LABEL_221;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v58) = 0;
                }
LABEL_221:
                uint64_t v2 = v108 + 1;
              }

              else
              {
                int v56 = 0;
                uint64_t v57 = 0;
                int v58 = 0LL;
                while (1)
                {
                  uint64_t v2 = v54 + 1;
                  *((void *)this + 1) = v54 + 1;
                  int v59 = *(_BYTE *)(v55 + v54);
                  v58 |= (unint64_t)(v59 & 0x7F) << v56;
                  if ((v59 & 0x80) == 0) {
                    break;
                  }
                  v56 += 7;
                  v54 = v2;
                  uint64_t v14 = v57++ > 8;
                  if (v14)
                  {
                    LODWORD(v58) = 0;
                    break;
                  }
                }
              }

          *(_DWORD *)(a1 + 108) = v77;
          goto LABEL_244;
        case 9u:
          *(_WORD *)(a1 + 116) |= 1u;
          int v80 = *((void *)this + 1);
          uint64_t v81 = *((void *)this + 2);
          v82 = *(void *)this;
          if (v80 <= 0xFFFFFFFFFFFFFFF5LL && v80 + 10 <= v81)
          {
            int v83 = 0;
            int v84 = 0;
            uint64_t v85 = 0LL;
            do
            {
              unsigned int v86 = v80 + 1;
              *((void *)this + 1) = v80 + 1;
              int v87 = *(_BYTE *)(v82 + v80);
              v85 |= (unint64_t)(v87 & 0x7F) << v83;
              if ((v87 & 0x80) == 0) {
                goto LABEL_220;
              }
              v83 += 7;
              int v80 = v86;
              int v20 = v84++ > 8;
            }

            while (!v20);
LABEL_170:
            uint64_t v85 = 0LL;
            goto LABEL_220;
          }

          v135 = 0;
          int v136 = 0;
          uint64_t v85 = 0LL;
          if (v81 <= v80) {
            uint64_t v81 = *((void *)this + 1);
          }
          while (2)
          {
            if (v81 == v80)
            {
              uint64_t v85 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int v137 = v80 + 1;
              uint64_t v138 = *(_BYTE *)(v82 + v80);
              *((void *)this + 1) = v137;
              v85 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                int v80 = v137;
                int v20 = v136++ > 8;
                if (v20) {
                  goto LABEL_170;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v85 = 0LL;
              }
            }

            break;
          }

        *(_DWORD *)(a1 + 164) = v36;
        goto LABEL_202;
      case 0xCu:
        *(_DWORD *)(a1 + 180) |= 0x1000u;
        int v39 = *((void *)this + 1);
        if (v39 > 0xFFFFFFFFFFFFFFF7LL || v39 + 8 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(void *)(a1 + 104) = *(void *)(*(void *)this + v39);
        goto LABEL_92;
      case 0xDu:
        *(_DWORD *)(a1 + 180) |= 0x1000000u;
        int v40 = *((void *)this + 1);
        if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
          goto LABEL_142;
        }
        *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(void *)this + v40);
        goto LABEL_200;
      case 0xEu:
        *(_DWORD *)(a1 + 180) |= 0x2000000u;
        uint64_t v41 = *((void *)this + 1);
        uint64_t v42 = *((void *)this + 2);
        int v43 = *(void *)this;
        if (v41 <= 0xFFFFFFFFFFFFFFF5LL && v41 + 10 <= v42)
        {
          int v44 = 0;
          uint64_t v45 = 0;
          v46 = 0LL;
          do
          {
            int v47 = v41 + 1;
            *((void *)this + 1) = v41 + 1;
            int v48 = *(_BYTE *)(v43 + v41);
            v46 |= (unint64_t)(v48 & 0x7F) << v44;
            if ((v48 & 0x80) == 0) {
              goto LABEL_220;
            }
            v44 += 7;
            uint64_t v41 = v47;
            uint64_t v14 = v45++ > 8;
          }

          while (!v14);
LABEL_156:
          LODWORD(v46) = 0;
          goto LABEL_220;
        }

        uint64_t v113 = 0;
        int v114 = 0;
        v46 = 0LL;
        if (v42 <= v41) {
          uint64_t v42 = *((void *)this + 1);
        }
        while (2)
        {
          if (v42 == v41)
          {
            LODWORD(v46) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v115 = v41 + 1;
            int v116 = *(_BYTE *)(v43 + v41);
            *((void *)this + 1) = v115;
            v46 |= (unint64_t)(v116 & 0x7F) << v113;
            if (v116 < 0)
            {
              v113 += 7;
              uint64_t v41 = v115;
              uint64_t v14 = v114++ > 8;
              if (v14) {
                goto LABEL_156;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v46) = 0;
            }
          }

          break;
        }

LABEL_223:
  uint64_t v125 = *(void *)(a1 + 248);
  if (!v125) {
    uint64_t v125 = *(void *)(qword_1019A0978 + 248);
  }
  v126 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100089A90(v125, a2);
  int v127 = (int)v126;
  else {
    int v128 = 1;
  }
  uint64_t v4 = (v4 + v127 + v128 + 2);
  if ((*(_DWORD *)(a1 + 292) & 0x80000000) != 0)
  {
LABEL_229:
    uint64_t v129 = *(void *)(a1 + 256);
    if (!v129) {
      uint64_t v129 = *(void *)(qword_1019A0978 + 256);
    }
    int v130 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100089E94(v129, a2);
    int v131 = (int)v130;
    else {
      int v132 = 1;
    }
    uint64_t v4 = (v4 + v131 + v132 + 2);
  }

  uint64_t v61 = *(void *)(v5 + 432);
  if (!v61) {
    uint64_t v61 = *(void *)(qword_1019A11B8 + 432);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DA,  v61,  a2,  a4);
  int v39 = *(_DWORD *)(v5 + 492);
  if ((v39 & 0x800000) == 0)
  {
LABEL_154:
    if ((v39 & 0x1000000) == 0) {
      goto LABEL_155;
    }
    goto LABEL_229;
  }

  uint64_t v125 = *(void *)(a1 + 248);
  if (!v125) {
    uint64_t v125 = *(void *)(qword_1019A11B8 + 248);
  }
  v126 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100204450(v125, a2);
  int v127 = (int)v126;
  else {
    int v128 = 1;
  }
  uint64_t v4 = (v4 + v127 + v128 + 2);
  if ((*(_DWORD *)(a1 + 488) & 0x80000000) != 0)
  {
LABEL_229:
    uint64_t v129 = *(void *)(a1 + 256);
    if (!v129) {
      uint64_t v129 = *(void *)(qword_1019A11B8 + 256);
    }
    int v130 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001E5550(v129, a2);
    int v131 = (int)v130;
    else {
      int v132 = 1;
    }
    uint64_t v4 = (v4 + v131 + v132 + 2);
  }

  if (!*(_BYTE *)(a1 + 1934))
  {
    if (!*(_BYTE *)(a1 + 1859)) {
      goto LABEL_244;
    }
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    int v130 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_FAULT,  "logALSUpdatesAOP is a deprecated defaults write",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)unsigned int v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "logALSUpdatesAOP is a deprecated defaults write",  v275,  *(void *)&v261);
      v234 = (char *)v233;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v233);
      if (v234 != buf) {
        free(v234);
      }
    }
  }

  int v131 = operator new(0x38uLL);
  sub_1003DE40C(v131, [*(id *)(a1 + 248) silo], (uint64_t)sub_1008C1290, a1, 0);
  *(void *)(a1 + 432) = v131;
  LOBYTE(v131) = *(_BYTE *)(a1 + 1857) == 0;
  int v132 = sub_1008FA854(0);
  int v133 = *(void *)(a1 + 432);
  if ((v131 & 1) != 0)
  {
    sub_1006DCB40(v132, 32, v133, -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    int v137 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v137,  OS_LOG_TYPE_INFO,  "Registering for passive AOP ALS notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)unsigned int v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for passive AOP ALS notifications",  v275,  *(void *)&v261);
      int v136 = (char *)v217;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v217);
      goto LABEL_435;
    }
  }

  else
  {
    sub_1006DCB40(v132, 31, v133, -1.0);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185E910);
    }
    uint64_t v134 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_INFO,  "Registering for active AOP ALS notifications",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185E910);
      }
      *(_WORD *)unsigned int v275 = 0;
      LODWORD(v261) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Registering for active AOP ALS notifications",  v275,  *(void *)&v261);
      int v136 = (char *)v135;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v135);
LABEL_435:
      if (v136 != buf) {
        free(v136);
      }
    }
  }

  *(_BYTE *)(a2 + 2) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v73 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    int v74 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "sosCanceledBecauseAbsenceOfLongLie";
    int v193 = 2048;
    unsigned int v194 = v74;
    _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v174 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "sosCanceledBecauseAbsenceOfLongLie";
    v189 = 2048;
    v190 = v174;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    unsigned int v176 = (uint8_t *)v175;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v175);
    if (v176 != buf) {
      free(v176);
    }
  }

  a5[10] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x2000000000000000LL) == 0)
  {
LABEL_34:
    if ((v10 & 0x4000000000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_235;
  }

          *(void *)(a1 + 80) = v32;
          goto LABEL_258;
        case 2u:
          *(_DWORD *)(a1 + 144) |= 0x20u;
          int v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_257;
        case 3u:
          *(_DWORD *)(a1 + 144) |= 0x40u;
          int v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_257;
        case 4u:
          *(_DWORD *)(a1 + 144) |= 0x80u;
          uint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v37);
          goto LABEL_257;
        case 5u:
          *(_DWORD *)(a1 + 144) |= 0x10u;
          uint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_257;
        case 6u:
          *(_DWORD *)(a1 + 144) |= 0x400u;
          int v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_257;
        case 7u:
          *(_DWORD *)(a1 + 144) |= 0x800u;
          int v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_257;
        case 8u:
          *(_DWORD *)(a1 + 144) |= 0x1000u;
          uint64_t v41 = *((void *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v41);
          goto LABEL_257;
        case 9u:
          *(_DWORD *)(a1 + 144) |= 0x200u;
          uint64_t v42 = *((void *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
            goto LABEL_255;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v42);
          goto LABEL_257;
        case 0xAu:
          *(_DWORD *)(a1 + 144) |= 0x100u;
          int v43 = *((void *)this + 1);
          int v44 = *((void *)this + 2);
          uint64_t v45 = *(void *)this;
          if (v43 <= 0xFFFFFFFFFFFFFFF5LL && v43 + 10 <= v44)
          {
            v46 = 0;
            int v47 = 0;
            int v48 = 0LL;
            do
            {
              uint64_t v49 = v43 + 1;
              *((void *)this + 1) = v43 + 1;
              unsigned int v50 = *(_BYTE *)(v45 + v43);
              v48 |= (unint64_t)(v50 & 0x7F) << v46;
              if ((v50 & 0x80) == 0) {
                goto LABEL_226;
              }
              v46 += 7;
              int v43 = v49;
              int v20 = v47++ > 8;
            }

            while (!v20);
LABEL_164:
            LODWORD(v48) = 0;
            goto LABEL_226;
          }

          int v119 = 0;
          int v120 = 0;
          int v48 = 0LL;
          if (v44 <= v43) {
            int v44 = *((void *)this + 1);
          }
          while (2)
          {
            if (v44 == v43)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v121 = v43 + 1;
              unsigned int v122 = *(_BYTE *)(v45 + v43);
              *((void *)this + 1) = v121;
              v48 |= (unint64_t)(v122 & 0x7F) << v119;
              if (v122 < 0)
              {
                v119 += 7;
                int v43 = v121;
                int v20 = v120++ > 8;
                if (v20) {
                  goto LABEL_164;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v48) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 80) = v109;
          goto LABEL_244;
        case 0xEu:
          *(_WORD *)(a1 + 116) |= 0x400u;
          int v112 = *((void *)this + 1);
          if (v112 >= *((void *)this + 2))
          {
            int v115 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            uint64_t v113 = v112 + 1;
            int v114 = *(unsigned __int8 *)(*(void *)this + v112);
            *((void *)this + 1) = v113;
            int v115 = v114 != 0;
          }

          *(_BYTE *)(a1 + 112) = v115;
          goto LABEL_244;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_244;
      }
    }

    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      int v23 = v4 + 1;
      int v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        uint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

        *(_DWORD *)(a1 + 156) = v61;
        goto LABEL_202;
      case 0x16u:
        *(_DWORD *)(a1 + 180) |= 0x4000000u;
        int v64 = *((void *)this + 1);
        uint64_t v65 = *((void *)this + 2);
        int v66 = *(void *)this;
        if (v64 <= 0xFFFFFFFFFFFFFFF5LL && v64 + 10 <= v65)
        {
          int v67 = 0;
          int v68 = 0;
          uint64_t v69 = 0LL;
          do
          {
            int v70 = v64 + 1;
            *((void *)this + 1) = v64 + 1;
            int v71 = *(_BYTE *)(v66 + v64);
            v69 |= (unint64_t)(v71 & 0x7F) << v67;
            if ((v71 & 0x80) == 0) {
              goto LABEL_226;
            }
            v67 += 7;
            int v64 = v70;
            uint64_t v14 = v68++ > 8;
          }

          while (!v14);
LABEL_170:
          LODWORD(v69) = 0;
          goto LABEL_226;
        }

        uint64_t v121 = 0;
        unsigned int v122 = 0;
        uint64_t v69 = 0LL;
        if (v65 <= v64) {
          uint64_t v65 = *((void *)this + 1);
        }
        while (2)
        {
          if (v65 == v64)
          {
            LODWORD(v69) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v123 = v64 + 1;
            int v124 = *(_BYTE *)(v66 + v64);
            *((void *)this + 1) = v123;
            v69 |= (unint64_t)(v124 & 0x7F) << v121;
            if (v124 < 0)
            {
              v121 += 7;
              int v64 = v123;
              uint64_t v14 = v122++ > 8;
              if (v14) {
                goto LABEL_170;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v69) = 0;
            }
          }

          break;
        }

LABEL_235:
  LOBYTE(v133) = *(_BYTE *)(a1 + 296);
  if (!(_BYTE)v133) {
    goto LABEL_258;
  }
  if ((*(_BYTE *)(a1 + 296) & 1) != 0)
  {
    uint64_t v134 = *(void *)(a1 + 264);
    if (!v134) {
      uint64_t v134 = *(void *)(qword_1019A0978 + 264);
    }
    v135 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10008A14C(v134, a2);
    int v136 = (int)v135;
    else {
      int v137 = 1;
    }
    uint64_t v4 = (v4 + v136 + v137 + 2);
    int v133 = *(_DWORD *)(a1 + 296);
    if ((v133 & 2) == 0)
    {
LABEL_238:
      if ((v133 & 4) == 0) {
        goto LABEL_258;
      }
      goto LABEL_252;
    }
  }

  else if ((*(_BYTE *)(a1 + 296) & 2) == 0)
  {
    goto LABEL_238;
  }

  uint64_t v138 = *(void *)(a1 + 272);
  if (!v138) {
    uint64_t v138 = *(void *)(qword_1019A0978 + 272);
  }
  int v139 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10008A3E8(v138, a2);
  int v140 = (int)v139;
  else {
    int v141 = 1;
  }
  uint64_t v4 = (v4 + v140 + v141 + 2);
  if ((*(_DWORD *)(a1 + 296) & 4) != 0)
  {
LABEL_252:
    uint64_t v142 = *(void *)(a1 + 280);
    if (!v142) {
      uint64_t v142 = *(void *)(qword_1019A0978 + 280);
    }
    v143 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100080364(v142, a2);
    int v145 = (int)v143;
    else {
      int v146 = 1;
    }
    uint64_t v4 = (v4 + v145 + v146 + 2);
  }

  uint64_t v65 = *(void *)(v5 + 464);
  if (!v65) {
    uint64_t v65 = *(void *)(qword_1019A11B8 + 464);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DE,  v65,  a2,  a4);
  if ((*(_DWORD *)(v5 + 492) & 0x8000000) != 0)
  {
LABEL_238:
    int v66 = *(void *)(v5 + 472);
    if (!v66) {
      int v66 = *(void *)(qword_1019A11B8 + 472);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x7DF,  v66,  a2,  a4);
  }

  return result;
}

  int v133 = *(_DWORD *)(a1 + 492);
  if (!(_BYTE)v133) {
    goto LABEL_293;
  }
  if ((v133 & 1) != 0)
  {
    uint64_t v134 = *(void *)(a1 + 264);
    if (!v134) {
      uint64_t v134 = *(void *)(qword_1019A11B8 + 264);
    }
    v135 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100205BB8(v134, a2);
    int v136 = (int)v135;
    else {
      int v137 = 1;
    }
    uint64_t v4 = (v4 + v136 + v137 + 2);
    int v133 = *(_DWORD *)(a1 + 492);
    if ((v133 & 2) == 0)
    {
LABEL_238:
      if ((v133 & 4) == 0) {
        goto LABEL_239;
      }
      goto LABEL_257;
    }
  }

  else if ((v133 & 2) == 0)
  {
    goto LABEL_238;
  }

  uint64_t v138 = *(void *)(a1 + 272);
  if (!v138) {
    uint64_t v138 = *(void *)(qword_1019A11B8 + 272);
  }
  int v139 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100FABF54(v138, a2);
  int v140 = (int)v139;
  else {
    int v141 = 1;
  }
  uint64_t v4 = (v4 + v140 + v141 + 2);
  int v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 4) == 0)
  {
LABEL_239:
    if ((v133 & 8) == 0) {
      goto LABEL_240;
    }
    goto LABEL_263;
  }

  *(_BYTE *)(a2 + 2) = 1;
  if (qword_1019345D0 != -1) {
    dispatch_once(&qword_1019345D0, &stru_101879FD0);
  }
  uint64_t v77 = (os_log_s *)qword_1019345D8;
  if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
  {
    int v78 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 136315394;
    int v192 = "sosCallScheduled";
    int v193 = 2048;
    unsigned int v194 = v78;
    _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    v180 = *(void *)(a1 + 8);
    int v187 = 136315394;
    v188 = "sosCallScheduled";
    v189 = 2048;
    v190 = v180;
    LODWORD(v186) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
    int v182 = (uint8_t *)v181;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent & , SOSCandidateEvent &) const",  "%s\n",  v181);
    if (v182 != buf) {
      free(v182);
    }
  }

  a5[12] = 1;
  if ((*(void *)(a1 + 24) & 0x8000000000000000LL) != 0)
  {
LABEL_241:
    *(_BYTE *)(a2 + 2) = 1;
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_101879FD0);
    }
    int v79 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEBUG))
    {
      int v80 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 136315394;
      int v192 = "sosCallPlaced";
      int v193 = 2048;
      unsigned int v194 = v80;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEBUG,  "CLFallImpactMetrics: Setting %s for impact at %f",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_101879FD0);
      }
      int v183 = *(void *)(a1 + 8);
      int v187 = 136315394;
      v188 = "sosCallPlaced";
      v189 = 2048;
      v190 = v183;
      LODWORD(v186) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  2LL,  "CLFallImpactMetrics: Setting %s for impact at %f",  (const char *)&v187,  v186);
      unsigned int v185 = (uint8_t *)v184;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const",  "%s\n",  v184);
      if (v185 != buf) {
        free(v185);
      }
    }

    a5[13] = 1;
  }

          *(void *)(a1 + 56) = v76;
          goto LABEL_258;
        case 0x12u:
          *(_DWORD *)(a1 + 144) |= 2u;
          int v79 = *((void *)this + 1);
          int v80 = *((void *)this + 2);
          uint64_t v81 = *(void *)this;
          if (v79 <= 0xFFFFFFFFFFFFFFF5LL && v79 + 10 <= v80)
          {
            v82 = 0;
            int v83 = 0;
            int v84 = 0LL;
            do
            {
              uint64_t v85 = v79 + 1;
              *((void *)this + 1) = v79 + 1;
              unsigned int v86 = *(_BYTE *)(v81 + v79);
              v84 |= (unint64_t)(v86 & 0x7F) << v82;
              if ((v86 & 0x80) == 0) {
                goto LABEL_238;
              }
              v82 += 7;
              int v79 = v85;
              int v20 = v83++ > 8;
            }

            while (!v20);
LABEL_192:
            int v84 = 0LL;
            goto LABEL_238;
          }

          v135 = 0;
          int v136 = 0;
          int v84 = 0LL;
          if (v80 <= v79) {
            int v80 = *((void *)this + 1);
          }
          while (2)
          {
            if (v80 == v79)
            {
              int v84 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int v137 = v79 + 1;
              uint64_t v138 = *(_BYTE *)(v81 + v79);
              *((void *)this + 1) = v137;
              v84 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                int v79 = v137;
                int v20 = v136++ > 8;
                if (v20) {
                  goto LABEL_192;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                int v84 = 0LL;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 136) = v111;
          goto LABEL_276;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_276;
      }
    }

    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      int v23 = v4 + 1;
      int v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        uint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

        *(_DWORD *)(a1 + 152) = v93;
        goto LABEL_202;
      case 0x1Au:
        int v96 = operator new(0x30uLL);
        sub_1011554B8((uint64_t)v96);
        int v99 = *(void *)(a1 + 112);
        *(void *)(a1 + 112) = v96;
        if (v99)
        {
          (*(void (**)(uint64_t))(*(void *)v99 + 8LL))(v99);
          int v96 = *(void **)(a1 + 112);
        }

        if (PB::Reader::placeMark(this, v142, v97, v98)
          && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v96 + 16LL))(v96, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v142);
LABEL_202:
          uint64_t v2 = *((void *)this + 1);
          unsigned int v3 = *((void *)this + 2);
          uint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      case 0x1Bu:
        *(_DWORD *)(a1 + 180) |= 0x8000u;
        int v100 = *((void *)this + 1);
        uint64_t v101 = *((void *)this + 2);
        int v102 = *(void *)this;
        if (v100 <= 0xFFFFFFFFFFFFFFF5LL && v100 + 10 <= v101)
        {
          int v103 = 0;
          int v104 = 0;
          uint64_t v105 = 0LL;
          do
          {
            int v106 = v100 + 1;
            *((void *)this + 1) = v100 + 1;
            int v107 = *(_BYTE *)(v102 + v100);
            v105 |= (unint64_t)(v107 & 0x7F) << v103;
            if ((v107 & 0x80) == 0) {
              goto LABEL_238;
            }
            v103 += 7;
            int v100 = v106;
            uint64_t v14 = v104++ > 8;
          }

          while (!v14);
LABEL_198:
          LODWORD(v105) = 0;
          goto LABEL_238;
        }

        int v137 = 0;
        uint64_t v138 = 0;
        uint64_t v105 = 0LL;
        if (v101 <= v100) {
          uint64_t v101 = *((void *)this + 1);
        }
        while (2)
        {
          if (v101 == v100)
          {
            LODWORD(v105) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v139 = v100 + 1;
            int v140 = *(_BYTE *)(v102 + v100);
            *((void *)this + 1) = v139;
            v105 |= (unint64_t)(v140 & 0x7F) << v137;
            if (v140 < 0)
            {
              v137 += 7;
              int v100 = v139;
              uint64_t v14 = v138++ > 8;
              if (v14) {
                goto LABEL_198;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v105) = 0;
            }
          }

          break;
        }

LABEL_258:
  *(_DWORD *)(a1 + 288) = v4;
  return v4;
}

          uint64_t v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_258;
      }
    }

    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      int v23 = v4 + 1;
      int v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      uint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        uint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

          *(void *)(a1 + 40) = v57;
          goto LABEL_238;
        case 9u:
          *(_DWORD *)(a1 + 152) |= 0x8000000u;
          int v60 = *((void *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v60);
          goto LABEL_237;
        case 0xAu:
          *(_DWORD *)(a1 + 152) |= 0x8000u;
          uint64_t v61 = *((void *)this + 1);
          v62 = *((void *)this + 2);
          int v63 = *(void *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5LL && v61 + 10 <= v62)
          {
            int v64 = 0;
            uint64_t v65 = 0;
            int v66 = 0LL;
            do
            {
              int v67 = v61 + 1;
              *((void *)this + 1) = v61 + 1;
              int v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_262;
              }
              v64 += 7;
              uint64_t v61 = v67;
              uint64_t v14 = v65++ > 8;
            }

            while (!v14);
LABEL_193:
            LODWORD(v66) = 0;
            goto LABEL_262;
          }

          int v147 = 0;
          int v148 = 0;
          int v66 = 0LL;
          if (v62 <= v61) {
            v62 = *((void *)this + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unsigned int v149 = v61 + 1;
              int v150 = *(_BYTE *)(v63 + v61);
              *((void *)this + 1) = v149;
              v66 |= (unint64_t)(v150 & 0x7F) << v147;
              if (v150 < 0)
              {
                v147 += 7;
                uint64_t v61 = v149;
                uint64_t v14 = v148++ > 8;
                if (v14) {
                  goto LABEL_193;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v66) = 0;
              }
            }

            break;
          }

          *(_DWORD *)(a1 + 144) = v105;
          goto LABEL_296;
        case 0xAu:
          *(_WORD *)(a1 + 168) |= 0x200u;
          uint64_t v45 = *((void *)this + 1);
          if (v45 >= *((void *)this + 2))
          {
            int v48 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            v46 = v45 + 1;
            int v47 = *(unsigned __int8 *)(*(void *)this + v45);
            *((void *)this + 1) = v46;
            int v48 = v47 != 0;
          }

          *(_BYTE *)(a1 + 164) = v48;
          goto LABEL_296;
        case 0xBu:
          *(_WORD *)(a1 + 168) |= 4u;
          int v108 = *((void *)this + 1);
          if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((void *)this + 2)) {
            goto LABEL_292;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v108);
          goto LABEL_294;
        case 0xCu:
          *(_WORD *)(a1 + 168) |= 8u;
          uint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
            goto LABEL_292;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v49);
          goto LABEL_294;
        case 0xDu:
          *(_WORD *)(a1 + 168) |= 0x40u;
          unsigned int v50 = *((void *)this + 1);
          int v51 = *((void *)this + 2);
          int v52 = *(void *)this;
          if (v50 <= 0xFFFFFFFFFFFFFFF5LL && v50 + 10 <= v51)
          {
            uint64_t v53 = 0;
            v54 = 0;
            int v55 = 0LL;
            do
            {
              int v56 = v50 + 1;
              *((void *)this + 1) = v50 + 1;
              uint64_t v57 = *(_BYTE *)(v52 + v50);
              v55 |= (unint64_t)(v57 & 0x7F) << v53;
              if ((v57 & 0x80) == 0) {
                goto LABEL_252;
              }
              v53 += 7;
              unsigned int v50 = v56;
              uint64_t v21 = v54++ > 8;
            }

            while (!v21);
LABEL_186:
            LODWORD(v55) = 0;
            goto LABEL_252;
          }

          uint64_t v134 = 0;
          v135 = 0;
          int v55 = 0LL;
          if (v51 <= v50) {
            int v51 = *((void *)this + 1);
          }
          while (2)
          {
            if (v51 == v50)
            {
              LODWORD(v55) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int v136 = v50 + 1;
              int v137 = *(_BYTE *)(v52 + v50);
              *((void *)this + 1) = v136;
              v55 |= (unint64_t)(v137 & 0x7F) << v134;
              if (v137 < 0)
              {
                v134 += 7;
                unsigned int v50 = v136;
                uint64_t v21 = v135++ > 8;
                if (v21) {
                  goto LABEL_186;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v55) = 0;
              }
            }

            break;
          }

void sub_1000855B8(uint64_t a1, void *lpsrc)
{
}

void sub_100085604(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v24,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  18748LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v24,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
  }

  int v5 = *(_DWORD *)(a2 + 80);
  if (!(_BYTE)v5) {
    goto LABEL_17;
  }
  if ((v5 & 1) != 0)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24);
    if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
      sub_101228204();
    }
    *(_DWORD *)(a1 + 80) |= 1u;
    *(_DWORD *)(a1 + 24) = v6;
    int v5 = *(_DWORD *)(a2 + 80);
  }

  if ((v5 & 2) != 0)
  {
    uint64_t v13 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 80) |= 2u;
    *(void *)(a1 + 8) = v13;
    int v5 = *(_DWORD *)(a2 + 80);
    if ((v5 & 4) == 0)
    {
LABEL_11:
      if ((v5 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_34;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_11;
  }

  char v14 = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 80) |= 4u;
  *(_BYTE *)(a1 + 28) = v14;
  int v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_12:
    if ((v5 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }

LABEL_34:
  int v15 = *(const std::string **)(a2 + 16);
  *(_DWORD *)(a1 + 80) |= 8u;
  int v16 = *(std::string **)(a1 + 16);
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    int v16 = (std::string *)operator new(0x18uLL);
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    *(void *)(a1 + 16) = v16;
  }

  std::string::operator=(v16, v15);
  int v5 = *(_DWORD *)(a2 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_13:
    if ((v5 & 0x20) == 0) {
      goto LABEL_14;
    }
LABEL_40:
    int v19 = *(const std::string **)(a2 + 40);
    *(_DWORD *)(a1 + 80) |= 0x20u;
    int v20 = *(std::string **)(a1 + 40);
    if (v20 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      int v20 = (std::string *)operator new(0x18uLL);
      v20->__r_.__value_.__l.__size_ = 0LL;
      v20->__r_.__value_.__l.__cap_ = 0LL;
      v20->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 40) = v20;
    }

    std::string::operator=(v20, v19);
    int v5 = *(_DWORD *)(a2 + 80);
    if ((v5 & 0x40) == 0)
    {
LABEL_15:
      if ((v5 & 0x80) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }

    goto LABEL_43;
  }

  uint64_t result = *(double *)(a2 + 72);
  *(_DWORD *)(a1 + 96) |= 0x400u;
  *(double *)(a1 + 72) = result;
  if ((*(_DWORD *)(a2 + 96) & 0x800) == 0) {
    return result;
  }
LABEL_18:
  uint64_t result = *(double *)(a2 + 80);
  *(_DWORD *)(a1 + 96) |= 0x800u;
  *(double *)(a1 + 80) = result;
  return result;
}

  int v15 = v5 + 9;
  if ((v3 & 0x100) == 0) {
    int v15 = v5;
  }
  if ((v3 & 0x200) != 0) {
    v15 += 9;
  }
  if ((v3 & 0x400) != 0) {
    v15 += 9;
  }
  if ((v3 & 0x800) != 0) {
    v15 += 9;
  }
  if ((v3 & 0x1000) != 0) {
    v15 += 9;
  }
  if ((v3 & 0x2000) != 0) {
    v15 += 9;
  }
  if ((v3 & 0xFF00) != 0) {
    int v5 = v15;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    int v16 = v5 + 10;
    if ((v3 & 0x10000) == 0) {
      int v16 = v5;
    }
    if ((v3 & 0x20000) != 0) {
      v16 += 10;
    }
    if ((v3 & 0x40000) != 0) {
      int v5 = v16 + 10;
    }
    else {
      int v5 = v16;
    }
    if ((v3 & 0x80000) != 0) {
      v5 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 184),  a2)
    }
          + 2;
  }

  uint64_t v17 = *(_DWORD *)(a1 + 120);
  uint64_t v18 = v17 + v5;
  if (v17 >= 1)
  {
    int v19 = 0LL;
    do
    {
      int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C0DD4( *(void *)(*(void *)(a1 + 112)
                                                                                         + 8 * v19),
                                                                               a2);
      uint64_t v21 = (int)v20;
      else {
        uint64_t v22 = 1;
      }
      v18 += v21 + v22;
      ++v19;
    }

    while (v19 < *(int *)(a1 + 120));
  }

  char v23 = *(_DWORD *)(a1 + 144);
  int v24 = v18 + 2 * v23;
  if (v23 >= 1)
  {
    uint64_t v25 = 0LL;
    do
    {
      uint64_t v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C0DD4( *(void *)(*(void *)(a1 + 136)
                                                                                         + 8 * v25),
                                                                               a2);
      int v27 = (int)v26;
      else {
        int v28 = 1;
      }
      v24 += v27 + v28;
      ++v25;
    }

    while (v25 < *(int *)(a1 + 144));
  }

  uint64_t v29 = *(_DWORD *)(a1 + 200);
  uint64_t v30 = v24 + 2 * v29;
  if (v29 >= 1)
  {
    int v31 = 0LL;
    do
    {
      int v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C0DD4( *(void *)(*(void *)(a1 + 192)
                                                                                         + 8 * v31),
                                                                               a2);
      uint64_t v33 = (int)v32;
      else {
        uint64_t v34 = 1;
      }
      v30 += v33 + v34;
      ++v31;
    }

    while (v31 < *(int *)(a1 + 200));
  }

  int v35 = *(_DWORD *)(a1 + 224);
  int v36 = v30 + 2 * v35;
  if (v35 >= 1)
  {
    uint64_t v37 = 0LL;
    do
    {
      uint64_t v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C0DD4( *(void *)(*(void *)(a1 + 216)
                                                                                         + 8 * v37),
                                                                               a2);
      int v39 = (int)v38;
      else {
        int v40 = 1;
      }
      v36 += v39 + v40;
      ++v37;
    }

    while (v37 < *(int *)(a1 + 224));
  }

  uint64_t v41 = *(_DWORD *)(a1 + 248);
  uint64_t v42 = v36 + 2 * v41;
  if (v41 >= 1)
  {
    int v43 = 0LL;
    do
    {
      int v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C0DD4( *(void *)(*(void *)(a1 + 240)
                                                                                         + 8 * v43),
                                                                               a2);
      uint64_t v45 = (int)v44;
      else {
        v46 = 1;
      }
      v42 += v45 + v46;
      ++v43;
    }

    while (v43 < *(int *)(a1 + 248));
  }

  int v47 = *(_DWORD *)(a1 + 272);
  int v48 = (v42 + 2 * v47);
  if (v47 >= 1)
  {
    uint64_t v49 = 0LL;
    do
    {
      unsigned int v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C0DD4( *(void *)(*(void *)(a1 + 264)
                                                                                         + 8 * v49),
                                                                               a2);
      int v51 = (int)v50;
      else {
        int v52 = 1;
      }
      int v48 = (v51 + v48 + v52);
      ++v49;
    }

    while (v49 < *(int *)(a1 + 272));
  }

  *(_DWORD *)(a1 + 288) = v48;
  return v48;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  (int)a2,  *(double *)(v5 + 72),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  (int)a2,  *(double *)(v5 + 72),  a3);
  unsigned int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }

    int v16 = *(_BYTE *)(a2 + 36);
    *(_DWORD *)(a1 + 100) |= 0x20u;
    *(_BYTE *)(a1 + 36) = v16;
    unsigned int v6 = *(_DWORD *)(a2 + 100);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0) {
        goto LABEL_38;
      }
      goto LABEL_36;
    }

  int v12 = *(void *)(v5 + 64);
  if (!v12) {
    int v12 = *(void *)(qword_1019A0BD8 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  v12,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
LABEL_40:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(_DWORD *)(v5 + 76),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 100) & 0x1000) == 0) {
      return result;
    }
    goto LABEL_41;
  }

  unsigned int v8 = *(void *)(v5 + 80);
  if (!v8) {
    unsigned int v8 = *(void *)(qword_1019A0BF8 + 80);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  v8,  a2,  a4);
  if ((*(_DWORD *)(v5 + 92) & 0x8000) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  *(_DWORD *)(v5 + 76),  (int)a2,  a4);
  }
  return result;
}

  *(_DWORD *)(a1 + 60) |= 0x10u;
  char v14 = *(void **)(a1 + 32);
  if (!v14)
  {
    char v14 = operator new(0x28uLL);
    *char v14 = off_101829098;
    v14[1] = 0xBFF0000000000000LL;
    *((_WORD *)v14 + 8) = 0;
    *((_BYTE *)v14 + 18) = 0;
    *((_DWORD *)v14 + 8) = 0;
    v14[3] = 0LL;
    *((_DWORD *)v14 + 5) = 0;
    *(void *)(a1 + 32) = v14;
  }

  int v15 = *(void *)(a2 + 32);
  if (!v15) {
    int v15 = *(void *)(qword_1019A0CB0 + 32);
  }
  sub_1001EE33C((uint64_t)v14, v15);
  int v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 0x20) != 0) {
    goto LABEL_39;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_40:
  uint64_t v17 = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a1 + 60) |= 0x40u;
  *(_BYTE *)(a1 + 41) = v17;
  int v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    unsigned int v6 = *(_BYTE *)(a2 + 42);
    *(_DWORD *)(a1 + 60) |= 0x80u;
    *(_BYTE *)(a1 + 42) = v6;
    int v5 = *(_DWORD *)(a2 + 60);
  }

  char v14 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 84) |= 8u;
  *(_DWORD *)(a1 + 28) = v14;
  int v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_36:
    int v16 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 84) |= 0x20u;
    *(_DWORD *)(a1 + 36) = v16;
    int v5 = *(_DWORD *)(a2 + 84);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    goto LABEL_37;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  *(unsigned __int8 *)(v5 + 72),  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }

        ++v5;
        unsigned int v3 = *(void *)(v2 + 200);
        unsigned int v6 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v2 + 208) - v3) >> 3);
      }

      while (v6 > v5);
    }

    std::stringbuf::str(&v20, &v23);
    *(std::stringbuf::string_type *)a2 = v20;
    *(void *)((char *)v21
    uint64_t v22 = v18;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

          ;
        }

        unsigned int v3 = [&off_1018D6C10 countByEnumeratingWithState:&v28 objects:v39 count:16];
        int v16 = 1LL;
        if (v3) {
          continue;
        }
        break;
      }
    }

    else
    {
      int v16 = 1LL;
    }

      [v5 setObject:v6 forKeyedSubscript:@"CLMiLoConnectionServiceIdentifier"];
      goto LABEL_37;
    case 0xALL:
      objc_msgSend( v5,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2[39]),  @"CLMiLoConnectionErrorMessage");
      int v11 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", a2 + 48);
      int v12 = off_101871088;
LABEL_36:
      [v5 setObject:v11 forKeyedSubscript:*v12];
      goto LABEL_37;
    case 0xDLL:
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_101834BC0);
      }
      int v27 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        int v28 = a2[1];
        *(_DWORD *)buf = 68289282;
        uint64_t v33 = 0;
        uint64_t v34 = 2082;
        int v35 = "";
        int v36 = 1026;
        LODWORD(v37) = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:onMiLoServiceEvent, unexpected event type, miloServiceEventType data:%{public}d}",  buf,  0x18u);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_101834BC0);
        }
      }

      uint64_t v29 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        uint64_t v30 = a2[1];
        *(_DWORD *)buf = 68289282;
        uint64_t v33 = 0;
        uint64_t v34 = 2082;
        int v35 = "";
        int v36 = 1026;
        LODWORD(v37) = v30;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v29,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "onMiLoServiceEvent, unexpected event type",  "{msg%{public}.0s:onMiLoServiceEvent, unexpected event type, miloServiceEventType data:%{public}d}",  buf,  0x18u);
      }

      return;
    default:
LABEL_37:
      sub_100388BEC(a1, &v31);
      return;
  }

    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_101835C50);
    }
    uint64_t v37 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)__str = 68289283LL;
      *(_WORD *)&__str[8] = 2082;
      *(void *)&__str[10] = "";
      *(_WORD *)&__str[18] = 2081;
      *(void *)&__str[20] = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#warning Existing table's schema does not have the same number of columns as the requeste d schema, table:%{private, location:escape_only}s}",  __str,  0x1Cu);
    }

    uint64_t v13 = 0;
LABEL_39:
    sub_1003B5CCC(*(sqlite3 **)(a1 + 8), v12);
    if ((v13 & 1) == 0) {
      goto LABEL_127;
    }
    uint64_t v38 = 0LL;
    __p = 0LL;
    int v119 = 0LL;
    int v120 = 0LL;
    int v39 = v113;
    do
    {
      if (LOBYTE(a3[6 * v39 + 5]))
      {
        int v40 = &a3[6 * v39];
        if (v38 >= v120)
        {
          int v43 = (char *)__p;
          int v44 = 0xAAAAAAAAAAAAAAABLL * ((v38 - (_BYTE *)__p) >> 4);
          uint64_t v45 = v44 + 1;
          if (v44 + 1 > 0x555555555555555LL) {
            sub_100007008();
          }
          if (0x5555555555555556LL * ((v120 - (_BYTE *)__p) >> 4) > v45) {
            uint64_t v45 = 0x5555555555555556LL * ((v120 - (_BYTE *)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v120 - (_BYTE *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            v46 = 0x555555555555555LL;
          }
          else {
            v46 = v45;
          }
          if (v46)
          {
            int v47 = (char *)sub_1000BB1F4((uint64_t)&v120, v46);
            int v43 = (char *)__p;
            uint64_t v38 = v119;
          }

          else
          {
            int v47 = 0LL;
          }

          int v48 = &v47[48 * v44];
          uint64_t v49 = *(_OWORD *)v40;
          unsigned int v50 = *((_OWORD *)v40 + 2);
          *((_OWORD *)v48 + 1) = *((_OWORD *)v40 + 1);
          *((_OWORD *)v48 + 2) = v50;
          *(_OWORD *)int v48 = v49;
          if (v38 == v43)
          {
            int v52 = &v47[48 * v44];
            a3 = v112;
          }

          else
          {
            int v51 = &v47[48 * v44];
            a3 = v112;
            do
            {
              int v52 = v51 - 48;
              uint64_t v53 = *((_OWORD *)v38 - 3);
              v54 = *((_OWORD *)v38 - 1);
              *((_OWORD *)v51 - 2) = *((_OWORD *)v38 - 2);
              *((_OWORD *)v51 - 1) = v54;
              *((_OWORD *)v51 - 3) = v53;
              v38 -= 48;
              v51 -= 48;
            }

            while (v38 != v43);
          }

          uint64_t v38 = v48 + 48;
          __p = v52;
          int v119 = v48 + 48;
          int v120 = &v47[48 * v46];
          if (v43) {
            operator delete(v43);
          }
        }

        else
        {
          uint64_t v41 = *(_OWORD *)v40;
          uint64_t v42 = *((_OWORD *)v40 + 2);
          *((_OWORD *)v38 + 1) = *((_OWORD *)v40 + 1);
          *((_OWORD *)v38 + 2) = v42;
          *(_OWORD *)uint64_t v38 = v41;
          v38 += 48;
          a3 = v112;
        }

        int v119 = v38;
      }
    }

    while (v39-- > 0);
    memset(__str, 0, 24);
    std::string::operator=(&v141, (const std::string *)__str);
    sub_10023BE94((uint64_t)&v140[14]);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    int v56 = sub_10000CF44(&v140[6], (uint64_t)"PRAGMA foreign_key_list(", 24LL);
    uint64_t v57 = strlen(a2);
    int v58 = sub_10000CF44(v56, (uint64_t)a2, v57);
    sub_10000CF44(v58, (uint64_t)")", 1LL);
    std::stringbuf::str((std::stringbuf::string_type *)__str, (const std::stringbuf *)&v140[14]);
    if (__str[23] >= 0) {
      int v59 = __str;
    }
    else {
      int v59 = *(char **)__str;
    }
    int v60 = sub_1003B5AC8(a1, v59);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    uint64_t v61 = sqlite3_step(v60);
    v62 = (char *)__p;
    int v63 = v119;
    if (v119 == __p && v61 == 100)
    {
      int v64 = 0;
      uint64_t v65 = 0;
      v62 = v119;
      goto LABEL_117;
    }

    int v64 = 0;
    int v66 = v119 == __p || v61 == 100;
    int v67 = !v66;
    uint64_t v65 = v67 ^ 1;
    if (!v66 || v61 != 100)
    {
LABEL_117:
      if (0xAAAAAAAAAAAAAAABLL * ((v63 - v62) >> 4) > v64 || v61 == 100)
      {
        if (qword_101934A20 != -1) {
          dispatch_once(&qword_101934A20, &stru_101835C50);
        }
        int v100 = (os_log_s *)off_101934A28;
        uint64_t v65 = 0;
        if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)__str = 68289026LL;
          *(_WORD *)&__str[8] = 2082;
          *(void *)&__str[10] = "";
          _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#warning Actual table has more foreign key contraints than expected}",  __str,  0x12u);
          uint64_t v65 = 0;
        }
      }

      sub_1003B5CCC(*(sqlite3 **)(a1 + 8), v60);
      if (__p)
      {
        int v119 = (char *)__p;
        operator delete(__p);
      }

      if ((v65 & 1) != 0)
      {
        int v36 = 0LL;
LABEL_134:
        if ((v104 & 1) == 0) {
          sub_1003B92D4(a1, a2);
        }
        if (v105) {
          sub_1003BA74C(a1, a2, v105);
        }
        *(void *)&v140[6] = v102;
        std::streambuf::~streambuf(&v140[14]);
        std::ios::~ios(&v142);
        goto LABEL_141;
      }

    a3->__r_.__value_.__r.__words[0] = 0LL;
    a3->__r_.__value_.__l.__size_ = 0LL;
    a3->__r_.__value_.__l.__cap_ = 0LL;
  }

  *(void *)((char *)v32
  uint64_t v33 = v29;
  std::streambuf::~streambuf(&v34);
  return std::ios::~ios(&v35);
}

    if (*((_DWORD *)v9 + 224) != 1 || v12 != 3)
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      char v23 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        int v24 = (char)*a2;
        uint64_t v25 = *((char *)v9 + 901);
        *(_DWORD *)buf = 67240448;
        v46 = v24;
        int v47 = 1026;
        int v48 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "got better location provider,%{public}d,stopping worse location provider,%{public}d",  buf,  0xEu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101838C20);
        }
        int v31 = (char)*a2;
        int v32 = *((char *)v9 + 901);
        uint64_t v41 = 67240448;
        uint64_t v42 = v31;
        int v43 = 1026;
        int v44 = v32;
        LODWORD(v40) = 14;
        uint64_t v33 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "got better location provider,%{public}d,stopping worse location provider,%{public}d",  &v41,  v40);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationController::stopLessDesirableProviders(const DynamicLocationProvider &, BOOL)",  "%s\n",  v33);
      }

      sub_10042BF8C(a1, *((_DWORD *)v9 + 10));
      unsigned int v10 = 1;
      goto LABEL_49;
    }

    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101838C20);
    }
    uint64_t v26 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      int v27 = (char)*a2;
      int v28 = *((char *)v9 + 901);
      *(_DWORD *)buf = 67240448;
      v46 = v27;
      int v47 = 1026;
      int v48 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "got better location provider,%{public}d,NOT stopping worse location provider,%{public}d",  buf,  0xEu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_49;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101838C20);
    }
    uint64_t v34 = (char)*a2;
    int v35 = *((char *)v9 + 901);
    uint64_t v41 = 67240448;
    uint64_t v42 = v34;
    int v43 = 1026;
    int v44 = v35;
    LODWORD(v40) = 14;
    int v20 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  2LL,  "got better location provider,%{public}d,NOT stopping worse location provider,%{public}d",  &v41,  v40);
LABEL_63:
    int v36 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationController::stopLessDesirableProviders(const DynamicLocationProvider &, BOOL)",  "%s\n",  v20);
    if (v36 != buf) {
      free(v36);
    }
    goto LABEL_49;
  }

    int v5 = v5
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 80),  a2)
       + 1;
    if ((*(_DWORD *)(a1 + 96) & 0x800) == 0) {
      goto LABEL_41;
    }
    goto LABEL_35;
  }

  PBDataWriterWriteFloatField(a3, 12LL, self->_meanCatherine);
  has = self->_has;
  if ((*(_BYTE *)&has & 0x40) == 0)
  {
LABEL_13:
    if ((*(_BYTE *)&has & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  *((_DWORD *)a3 + 9) = LODWORD(self->_meanCatherine);
  *((_DWORD *)a3 + 26) |= 0x20u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x40) == 0)
  {
LABEL_13:
    if ((*(_BYTE *)&has & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  *((_DWORD *)result + 8) = LODWORD(self->_maxGoodCatherine);
  *((_DWORD *)result + 26) |= 0x10u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x20) == 0)
  {
LABEL_12:
    if ((*(_BYTE *)&has & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }

  self->_meanCatherine = *((float *)a3 + 9);
  *(_DWORD *)&self->_has |= 0x20u;
  unsigned int v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 0x40) == 0)
  {
LABEL_13:
    if ((v3 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

        operator delete(__p);
        if (!v21) {
          return [*(id *)(a1 + 136) persist];
        }
        goto LABEL_35;
      }

      char v14 = v11 - 1;
      do
      {
        int v16 = *v9++;
        int v15 = v16;
        uint64_t v18 = *p_p++;
        uint64_t v17 = v18;
        int v20 = v14-- != 0;
        uint64_t v21 = v15 == v17;
      }

      while (v15 == v17 && v20);
    }

    goto LABEL_34;
  }

  return [*(id *)(a1 + 136) persist];
}

  if (*(_BYTE *)(a1 + 3392)
    && v17
    && ((int v28 = v6 - *(double *)(a1 + 3384), v28 >= 0.0) ? (v29 = v28 < 10.0) : (v29 = 0), v29))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_101843788);
    }
    int v55 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      int v56 = sub_10080E94C();
      uint64_t v57 = sub_10080EF30(v56);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&buf[4] = v17;
      uint64_t v81 = 2050;
      *(double *)v82 = v6;
      *(_WORD *)&v82[8] = 2050;
      int v83 = v57;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEBUG,  "Going to sleep. Not providing motion state, %{public}d, to the location KF,now,%{public}.3f,propagation_us,%{public}.3f",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_101843788);
      }
      int v58 = qword_101934968;
      int v59 = sub_10080E94C();
      int v60 = sub_10080EF30(v59);
      int v63 = 67240704;
      int v64 = v17;
      uint64_t v65 = 2050;
      *(double *)int v66 = v6;
      *(_WORD *)&v66[8] = 2050;
      int v67 = v60;
      LODWORD(v61) = 28;
      int v27 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v58,  2LL,  "Going to sleep. Not providing motion state, %{public}d, to the location KF,now,%{public}.3f,propagation_us,%{public}.3f",  &v63,  v61);
      goto LABEL_77;
    }
  }

  else
  {
    sub_100F2B370(a1 + 48, &v62, &v71, (int *)&v71 + 1);
    uint64_t v30 = sub_10080E94C();
    *(_DWORD *)buf = 1;
    *(void *)buf = sub_10080EB58(v30, buf);
    sub_100ABA288(a1 + 456, (double *)buf, (unsigned int *)&v71);
    int v31 = *(void *)(a1 + 3144);
    if (v31)
    {
      (*(void (**)(uint64_t, double *, __int128 *))(*(void *)v31 + 64LL))(v31, &v62, &v71);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_1018437A8);
      }
      int v32 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v33 = v71;
        uint64_t v34 = DWORD1(v71);
        int v35 = HIDWORD(v71);
        int v36 = v72;
        uint64_t v37 = v62;
        uint64_t v38 = sub_10080E94C();
        int v39 = sub_10080EF30(v38);
        *(_DWORD *)buf = 67241472;
        *(_DWORD *)&buf[4] = v33;
        uint64_t v81 = 1026;
        *(_DWORD *)v82 = v34;
        *(_WORD *)&v82[4] = 1026;
        *(_DWORD *)&v82[6] = v35;
        LOWORD(v83) = 1026;
        *(_DWORD *)((char *)&v83 + 2) = v36;
        HIWORD(v83) = 2050;
        int v84 = v37;
        uint64_t v85 = 2050;
        unsigned int v86 = v39;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "CLMM, MotionState,type,%{public}d,confidence,%{public}d,mountedState,%{public}d,mountedConfidence,%{public}d,n ow,%{public}.3f,propagation_us,%{public}.3f",  buf,  0x2Eu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_1018437A8);
        }
        int v40 = qword_101934838;
        uint64_t v41 = v71;
        uint64_t v42 = DWORD1(v71);
        int v43 = HIDWORD(v71);
        int v44 = v72;
        uint64_t v45 = v62;
        v46 = sub_10080E94C();
        int v47 = sub_10080EF30(v46);
        int v63 = 67241472;
        int v64 = v41;
        uint64_t v65 = 1026;
        *(_DWORD *)int v66 = v42;
        *(_WORD *)&v66[4] = 1026;
        *(_DWORD *)&v66[6] = v43;
        LOWORD(v67) = 1026;
        *(_DWORD *)((char *)&v67 + 2) = v44;
        HIWORD(v67) = 2050;
        int v68 = v45;
        uint64_t v69 = 2050;
        int v70 = v47;
        LODWORD(v61) = 46;
        int v27 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v40,  2LL,  "CLMM, MotionState,type,%{public}d,confidence,%{public}d,mountedState,%{public}d,mountedConfidence,%{publ ic}d,now,%{public}.3f,propagation_us,%{public}.3f",  &v63,  v61);
LABEL_77:
        v54 = v26;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLLocationControllerFusion::feedMotionNotification(const CLMotionState_Type::Notification &, cons t CLMotionState_Type::NotificationData &)",  "%s\n",  v27);
LABEL_78:
        if (v54 != buf) {
          free(v54);
        }
      }
    }
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(_DWORD *)(v5 + 96),  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  int v15 = *(_BYTE *)(a2 + 97);
  *(_DWORD *)(a1 + 104) |= 0x1000u;
  *(_BYTE *)(a1 + 97) = v15;
  int v5 = *(_DWORD *)(a2 + 104);
  if ((v5 & 0x2000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_36;
  }

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

  int v16 = a2[15];
  a1[20] |= 0x2000u;
  a1[15] = v16;
  int v5 = a2[20];
  if ((v5 & 0x4000) == 0)
  {
LABEL_24:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  v5[17],  a2,  a4);
  if ((v5[20] & 0x10000) != 0) {
    return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  v5[18],  a2,  a4);
  }
  return result;
}

  uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v17 >= 0x80)
  {
    uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    unsigned int v3 = *(_DWORD *)(a1 + 44);
  }

  else
  {
    uint64_t v18 = 2;
  }

  uint64_t v4 = (v18 + v4);
  if ((v3 & 0x40) != 0)
  {
LABEL_38:
    int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    else {
      int v20 = 2;
    }
    uint64_t v4 = (v20 + v4);
  }

  *(_DWORD *)(a1 + 72) |= 0x10u;
  int v15 = *(void **)(a1 + 40);
  if (!v15)
  {
    int v15 = operator new(0x18uLL);
    v15[1] = 0LL;
    v15[2] = 0LL;
    const std::string *v15 = off_101845350;
    *(void *)(a1 + 40) = v15;
  }

  int v16 = *(void *)(a2 + 40);
  if (!v16) {
    int v16 = *(void *)(qword_1019A1328 + 40);
  }
  sub_100627ACC(v15, v16);
  int v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x20) != 0) {
    goto LABEL_39;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_44:
  *(_DWORD *)(a1 + 72) |= 0x40u;
  int v19 = *(void **)(a1 + 56);
  if (!v19)
  {
    int v19 = operator new(0x30uLL);
    v19[1] = 0LL;
    v19[2] = 0LL;
    const std::string *v19 = off_101845620;
    *((_DWORD *)v19 + 6) = 0;
    v19[4] = 0LL;
    *((_DWORD *)v19 + 10) = 0;
    *(void *)(a1 + 56) = v19;
  }

  int v20 = *(void *)(a2 + 56);
  if (!v20) {
    int v20 = *(void *)(qword_1019A1328 + 56);
  }
  sub_10062A4F8(v19, v20);
  if ((*(_DWORD *)(a2 + 72) & 0x80) != 0)
  {
LABEL_12:
    unsigned int v6 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 72) |= 0x80u;
    *(_DWORD *)(a1 + 64) = v6;
  }

  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
  if ((v15 & 0x80000000) != 0)
  {
    int v16 = 11;
  }

  else if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    unsigned int v3 = *(_DWORD *)(a1 + 68);
  }

  else
  {
    int v16 = 2;
  }

  v4 += v16;
  if ((v3 & 0x80) == 0)
  {
LABEL_20:
    if ((v3 & 0x100) == 0) {
      goto LABEL_50;
    }
    goto LABEL_46;
  }

          v8 += 2;
        }

        while (v8 != v9);
      }
    }
  }

  return result;
}

  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

    if (v4[8] == v4[7]) {
      sub_101243C70();
    }
    int v43 = v8;
    uint64_t v22 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    int v24 = v4[7];
    char v23 = v4[8];
    if (v24 == v23)
    {
      uint64_t v25 = 0LL;
      int v28 = 0.0;
    }

    else
    {
      uint64_t v25 = 0LL;
      uint64_t v26 = 0.0;
      do
      {
        int v27 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v24);
        int v28 = *(double *)(v24 + 16);
        uint64_t v29 = objc_msgSend( [BMLocationMicroLocationVisitProbabilityPerLocation alloc],  "initWithMicroLocationIdentifier:probability:",  -[NSUUID UUIDString](v27, "UUIDString"),  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v28));
        [v22 addObject:v29];

        if (v28 <= v26)
        {
          int v28 = v26;
        }

        else
        {

          uint64_t v25 = v27;
          uint64_t v26 = v28;
        }

        v24 += 32LL;
      }

      while (v24 != v23);
    }

    uint64_t v30 = objc_msgSend( [BMLocationMicroLocationVisitNumDevicesPerTechnology alloc],  "initWithTechnology:numDevices:",  @"numberOfWifiDevices",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v4[10]));
    int v31 = objc_msgSend( [BMLocationMicroLocationVisitNumDevicesPerTechnology alloc],  "initWithTechnology:numDevices:",  @"numberOfBleDevices",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v4[11]));
    int v32 = objc_msgSend( [BMLocationMicroLocationVisitNumDevicesPerTechnology alloc],  "initWithTechnology:numDevices:",  @"numberOfUwbDevices",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v4[12]));
    uint64_t v33 = +[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v30, v31, v32, 0LL);

    uint64_t v34 = objc_alloc(&OBJC_CLASS___BMLocationMicroLocationVisit);
    else {
      int v35 = v43;
    }
    int v36 = objc_msgSend( v34,  "initWithDomain:maxProbabilityMicroLocationIdentifier:maxProbability:probabilityVector:isStable:numDevicesVector:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v35),  -[NSUUID UUIDString](v25, "UUIDString"),  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v28),  v22,  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)v4 + 104)),  v33);
    unsigned int v3 = v42;
    [v42 addObject:v36];

    unsigned int v6 = byte_1019A0A07;
    char v7 = *((void *)&xmmword_1019A09F0 + 1);
    int v5 = v41;
    goto LABEL_47;
  }

  return v3;
}

  if (-[__CFString intValue](v9, "intValue"))
  {
    if (-[__CFString intValue](v9, "intValue") == 1)
    {
      *(_DWORD *)buf = 12;
      uint64_t v18 = (__CFString *)sub_1007D2730(a1, (int *)buf);
      *(_DWORD *)buf = 54;
      v141[0] = -[__CFString intValue](v18, "intValue");
      v141[6] = 0;
      sub_1007C5F28(a1, (int *)buf, (uint64_t)v141);
      sub_10043AFF4((uint64_t)v141);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v19 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = -[__CFString intValue](v18, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMcc,%d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101850820);
        }
        int v103 = qword_101934A48;
        int v104 = -[__CFString intValue](v18, "intValue");
        int v150 = 67109120;
        int v151 = v104;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v103,  0LL,  "#ca,callCarrierMcc,%d",  &v150);
        int v106 = (uint8_t *)v105;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v105);
        if (v106 != buf) {
          free(v106);
        }
      }

      *(_DWORD *)buf = 13;
      uint64_t v21 = (__CFString *)sub_1007D2730(a1, (int *)buf);
      *(_DWORD *)buf = 55;
      v140[0] = -[__CFString intValue](v21, "intValue");
      v140[6] = 0;
      sub_1007C5F28(a1, (int *)buf, (uint64_t)v140);
      sub_10043AFF4((uint64_t)v140);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      uint64_t v22 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        char v23 = -[__CFString intValue](v21, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMnc,%d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101850820);
        }
        int v107 = qword_101934A48;
        int v108 = -[__CFString intValue](v21, "intValue");
        int v150 = 67109120;
        int v151 = v108;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v107,  0LL,  "#ca,callCarrierMnc,%d",  &v150);
        int v110 = (uint8_t *)v109;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v109);
        if (v110 != buf) {
          free(v110);
        }
      }

      *(_DWORD *)buf = 14;
      int v24 = (__CFString *)sub_1007D2730(a1, (int *)buf);
      *(_DWORD *)buf = 56;
      v139[0] = -[__CFString intValue](v24, "intValue");
      v139[6] = 0;
      sub_1007C5F28(a1, (int *)buf, (uint64_t)v139);
      sub_10043AFF4((uint64_t)v139);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      uint64_t v25 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = -[__CFString intValue](v24, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#ca,calloperatorMcc,%d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101850820);
        }
        int v111 = qword_101934A48;
        int v112 = -[__CFString intValue](v24, "intValue");
        int v150 = 67109120;
        int v151 = v112;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v111,  0LL,  "#ca,calloperatorMcc,%d",  &v150);
        int v114 = (uint8_t *)v113;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v113);
        if (v114 != buf) {
          free(v114);
        }
      }

      *(_DWORD *)buf = 15;
      int v27 = (__CFString *)sub_1007D2730(a1, (int *)buf);
      *(_DWORD *)buf = 57;
      v138[0] = -[__CFString intValue](v27, "intValue");
      v138[6] = 0;
      sub_1007C5F28(a1, (int *)buf, (uint64_t)v138);
      sub_10043AFF4((uint64_t)v138);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v28 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = -[__CFString intValue](v27, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#ca,callOperatorMnc,%d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101850820);
        }
        int v115 = qword_101934A48;
        int v116 = -[__CFString intValue](v27, "intValue");
        int v150 = 67109120;
        int v151 = v116;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v115,  0LL,  "#ca,callOperatorMnc,%d",  &v150);
        v118 = (uint8_t *)v117;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v117);
        if (v118 != buf) {
          free(v118);
        }
      }

      *(_DWORD *)buf = 21;
      uint64_t v30 = (__CFString *)sub_1007D2730(a1, (int *)buf);
      *(_DWORD *)buf = 50;
      v137[0] = -[__CFString intValue](v30, "intValue");
      v137[6] = 0;
      sub_1007C5F28(a1, (int *)buf, (uint64_t)v137);
      sub_10043AFF4((uint64_t)v137);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v31 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = -[__CFString intValue](v30, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#ca,callrat,%d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101850820);
        }
        int v119 = qword_101934A48;
        int v120 = -[__CFString intValue](v30, "intValue");
        int v150 = 67109120;
        int v151 = v120;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v119,  0LL,  "#ca,callrat,%d",  &v150);
        unsigned int v122 = (uint8_t *)v121;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v121);
        if (v122 != buf) {
          free(v122);
        }
      }

      *(_DWORD *)buf = 23;
      uint64_t v33 = (__CFString *)sub_1007D2730(a1, (int *)buf);
      *(_DWORD *)buf = 53;
      v136[0] = -[__CFString intValue](v33, "intValue");
      v136[6] = 0;
      sub_1007C5F28(a1, (int *)buf, (uint64_t)v136);
      sub_10043AFF4((uint64_t)v136);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      uint64_t v34 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        int v35 = -[__CFString intValue](v33, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#ca,isSimPresentValue,%d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101850820);
        }
        int v123 = qword_101934A48;
        int v124 = -[__CFString intValue](v33, "intValue");
        int v150 = 67109120;
        int v151 = v124;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v123,  0LL,  "#ca,isSimPresentValue,%d",  &v150);
        v126 = (uint8_t *)v125;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v125);
        if (v126 != buf) {
          free(v126);
        }
      }

      *(_DWORD *)buf = 35;
      int v36 = (__CFString *)sub_1007D2730(a1, (int *)buf);
      *(_DWORD *)buf = 78;
      v135[0] = -[__CFString intValue](v36, "intValue");
      v135[6] = 0;
      sub_1007C5F28(a1, (int *)buf, (uint64_t)v135);
      sub_10043AFF4((uint64_t)v135);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      uint64_t v37 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v38 = -[__CFString intValue](v36, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#ca,dataPreferredInfo,%d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101850820);
        }
        int v127 = qword_101934A48;
        int v128 = -[__CFString intValue](v36, "intValue");
        int v150 = 67109120;
        int v151 = v128;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v127,  0LL,  "#ca,dataPreferredInfo,%d",  &v150);
        int v130 = (uint8_t *)v129;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v129);
        if (v130 != buf) {
          free(v130);
        }
      }

      *(_DWORD *)buf = 36;
      int v39 = (__CFString *)sub_1007D2730(a1, (int *)buf);
      *(_DWORD *)buf = 80;
      v134[0] = -[__CFString intValue](v39, "intValue");
      v134[6] = 0;
      sub_1007C5F28(a1, (int *)buf, (uint64_t)v134);
      sub_10043AFF4((uint64_t)v134);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v40 = (os_log_s *)qword_101934A48;
      if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v41 = -[__CFString intValue](v39, "intValue");
        *(_DWORD *)buf = 67109120;
        v153 = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#ca,voiceDefaultInfo,%d", buf, 8u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A40 != -1) {
          dispatch_once(&qword_101934A40, &stru_101850820);
        }
        uint64_t v42 = qword_101934A48;
        int v43 = -[__CFString intValue](v39, "intValue");
        int v150 = 67109120;
        int v151 = v43;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v42,  0LL,  "#ca,voiceDefaultInfo,%d",  &v150);
        uint64_t v45 = (uint8_t *)v44;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v44);
LABEL_155:
        if (v45 != buf) {
          free(v45);
        }
      }
    }
  }

  else
  {
    *(_DWORD *)buf = 4;
    v46 = (__CFString *)sub_1007D2730(a1, (int *)buf);
    *(_DWORD *)buf = 54;
    v149[0] = -[__CFString intValue](v46, "intValue");
    v149[6] = 0;
    sub_1007C5F28(a1, (int *)buf, (uint64_t)v149);
    sub_10043AFF4((uint64_t)v149);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    int v47 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      int v48 = -[__CFString intValue](v46, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMcc,%d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v72 = qword_101934A48;
      uint64_t v73 = -[__CFString intValue](v46, "intValue");
      int v150 = 67109120;
      int v151 = v73;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v72,  0LL,  "#ca,callCarrierMcc,%d",  &v150);
      int v75 = (uint8_t *)v74;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v74);
      if (v75 != buf) {
        free(v75);
      }
    }

    *(_DWORD *)buf = 5;
    uint64_t v49 = (__CFString *)sub_1007D2730(a1, (int *)buf);
    *(_DWORD *)buf = 55;
    v148[0] = -[__CFString intValue](v49, "intValue");
    v148[6] = 0;
    sub_1007C5F28(a1, (int *)buf, (uint64_t)v148);
    sub_10043AFF4((uint64_t)v148);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    unsigned int v50 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      int v51 = -[__CFString intValue](v49, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v51;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#ca,callCarrierMnc,%d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v76 = qword_101934A48;
      uint64_t v77 = -[__CFString intValue](v49, "intValue");
      int v150 = 67109120;
      int v151 = v77;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v76,  0LL,  "#ca,callCarrierMnc,%d",  &v150);
      int v79 = (uint8_t *)v78;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v78);
      if (v79 != buf) {
        free(v79);
      }
    }

    *(_DWORD *)buf = 8;
    int v52 = (__CFString *)sub_1007D2730(a1, (int *)buf);
    *(_DWORD *)buf = 56;
    v147[0] = -[__CFString intValue](v52, "intValue");
    v147[6] = 0;
    sub_1007C5F28(a1, (int *)buf, (uint64_t)v147);
    sub_10043AFF4((uint64_t)v147);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    uint64_t v53 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      v54 = -[__CFString intValue](v52, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v54;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#ca,calloperatorMcc,%d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v80 = qword_101934A48;
      uint64_t v81 = -[__CFString intValue](v52, "intValue");
      int v150 = 67109120;
      int v151 = v81;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v80,  0LL,  "#ca,calloperatorMcc,%d",  &v150);
      int v83 = (uint8_t *)v82;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v82);
      if (v83 != buf) {
        free(v83);
      }
    }

    *(_DWORD *)buf = 9;
    int v55 = (__CFString *)sub_1007D2730(a1, (int *)buf);
    *(_DWORD *)buf = 57;
    v146[0] = -[__CFString intValue](v55, "intValue");
    v146[6] = 0;
    sub_1007C5F28(a1, (int *)buf, (uint64_t)v146);
    sub_10043AFF4((uint64_t)v146);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    int v56 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v57 = -[__CFString intValue](v55, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v57;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#ca,callOperatorMnc,%d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v84 = qword_101934A48;
      uint64_t v85 = -[__CFString intValue](v55, "intValue");
      int v150 = 67109120;
      int v151 = v85;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v84,  0LL,  "#ca,callOperatorMnc,%d",  &v150);
      int v87 = (uint8_t *)v86;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v86);
      if (v87 != buf) {
        free(v87);
      }
    }

    *(_DWORD *)buf = 20;
    int v58 = (__CFString *)sub_1007D2730(a1, (int *)buf);
    *(_DWORD *)buf = 50;
    v145[0] = -[__CFString intValue](v58, "intValue");
    v145[6] = 0;
    sub_1007C5F28(a1, (int *)buf, (uint64_t)v145);
    sub_10043AFF4((uint64_t)v145);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    int v59 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      int v60 = -[__CFString intValue](v58, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#ca,callrat,%d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v88 = qword_101934A48;
      uint64_t v89 = -[__CFString intValue](v58, "intValue");
      int v150 = 67109120;
      int v151 = v89;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v88,  0LL,  "#ca,callrat,%d",  &v150);
      int v91 = (uint8_t *)v90;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v90);
      if (v91 != buf) {
        free(v91);
      }
    }

    *(_DWORD *)buf = 22;
    uint64_t v61 = (__CFString *)sub_1007D2730(a1, (int *)buf);
    *(_DWORD *)buf = 53;
    v144[0] = -[__CFString intValue](v61, "intValue");
    v144[6] = 0;
    sub_1007C5F28(a1, (int *)buf, (uint64_t)v144);
    sub_10043AFF4((uint64_t)v144);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    v62 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      int v63 = -[__CFString intValue](v61, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v63;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#ca,isSimPresentValue,%d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v92 = qword_101934A48;
      uint64_t v93 = -[__CFString intValue](v61, "intValue");
      int v150 = 67109120;
      int v151 = v93;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v92,  0LL,  "#ca,isSimPresentValue,%d",  &v150);
      int v95 = (uint8_t *)v94;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v94);
      if (v95 != buf) {
        free(v95);
      }
    }

    *(_DWORD *)buf = 33;
    int v64 = (__CFString *)sub_1007D2730(a1, (int *)buf);
    *(_DWORD *)buf = 78;
    v143[0] = -[__CFString intValue](v64, "intValue");
    v143[6] = 0;
    sub_1007C5F28(a1, (int *)buf, (uint64_t)v143);
    sub_10043AFF4((uint64_t)v143);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    uint64_t v65 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      int v66 = -[__CFString intValue](v64, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v66;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#ca,dataPreferredInfo,%d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v96 = qword_101934A48;
      uint64_t v97 = -[__CFString intValue](v64, "intValue");
      int v150 = 67109120;
      int v151 = v97;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v96,  0LL,  "#ca,dataPreferredInfo,%d",  &v150);
      int v99 = (uint8_t *)v98;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v98);
      if (v99 != buf) {
        free(v99);
      }
    }

    *(_DWORD *)buf = 34;
    int v67 = (__CFString *)sub_1007D2730(a1, (int *)buf);
    *(_DWORD *)buf = 80;
    v142[0] = -[__CFString intValue](v67, "intValue");
    v142[6] = 0;
    sub_1007C5F28(a1, (int *)buf, (uint64_t)v142);
    sub_10043AFF4((uint64_t)v142);
    if (qword_101934A40 != -1) {
      dispatch_once(&qword_101934A40, &stru_101850820);
    }
    int v68 = (os_log_s *)qword_101934A48;
    if (os_log_type_enabled((os_log_t)qword_101934A48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v69 = -[__CFString intValue](v67, "intValue");
      *(_DWORD *)buf = 67109120;
      v153 = v69;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#ca,voiceDefaultInfo,%d", buf, 8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A40 != -1) {
        dispatch_once(&qword_101934A40, &stru_101850820);
      }
      int v100 = qword_101934A48;
      uint64_t v101 = -[__CFString intValue](v67, "intValue");
      int v150 = 67109120;
      int v151 = v101;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v100,  0LL,  "#ca,voiceDefaultInfo,%d",  &v150);
      uint64_t v45 = (uint8_t *)v102;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLAnalyticsLogger::computeEmergencyDerivedMeasurements(const std::string)",  "%s\n",  v102);
      goto LABEL_155;
    }
  }

  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    unsigned int v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    int v16 = 2;
  }

  uint64_t v4 = (v16 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_38:
    uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v17 >= 0x80)
    {
      uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      unsigned int v3 = *(_DWORD *)(a1 + 64);
    }

    else
    {
      uint64_t v18 = 2;
    }

    uint64_t v4 = (v18 + v4);
  }

  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    unsigned int v3 = *(_DWORD *)(a1 + 64);
  }

  else
  {
    int v16 = 2;
  }

  uint64_t v4 = (v16 + v4);
  if ((v3 & 0x80) != 0)
  {
LABEL_38:
    uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if (v17 >= 0x80)
    {
      uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
      unsigned int v3 = *(_DWORD *)(a1 + 64);
    }

    else
    {
      uint64_t v18 = 2;
    }

    uint64_t v4 = (v18 + v4);
  }

  char v7 = v33;
LABEL_35:
  *char v7 = v57;
  uint64_t v49 = v58;
  unsigned int v50 = v59;
  int v51 = v61;
  v7[3] = v60;
  v7[4] = v51;
  v7[1] = v49;
  v7[2] = v50;
  int v52 = v62;
  uint64_t v53 = v63;
  v54 = v65;
  v7[7] = v64;
  v7[8] = v54;
  v7[5] = v52;
  v7[6] = v53;
  uint64_t result = v66;
  int v55 = v67;
  int v56 = v68;
  *((void *)v7 + 24) = v69;
  v7[10] = v55;
  v7[11] = v56;
  v7[9] = (__int128)result;
  return result;
}

  char v7 = v33;
LABEL_35:
  *char v7 = v57;
  uint64_t v49 = v58;
  unsigned int v50 = v59;
  int v51 = v61;
  v7[3] = v60;
  v7[4] = v51;
  v7[1] = v49;
  v7[2] = v50;
  int v52 = v62;
  uint64_t v53 = v63;
  v54 = v65;
  v7[7] = v64;
  v7[8] = v54;
  v7[5] = v52;
  v7[6] = v53;
  uint64_t result = v66;
  int v55 = v67;
  int v56 = v68;
  *((void *)v7 + 24) = v69;
  v7[10] = v55;
  v7[11] = v56;
  v7[9] = (__int128)result;
  return result;
}
}

  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

        if (v5 <= v7) {
          uint64_t v17 = 5;
        }
        else {
          uint64_t v17 = 3;
        }
        if (v5 == v7) {
          unsigned int v9 = 1LL;
        }
        else {
          unsigned int v9 = v17;
        }
        goto LABEL_40;
      }

      if (!memcmp(__s1, v14, __n)) {
        goto LABEL_34;
      }
    }

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return v24;
}

        int v24 = 2;
LABEL_43:
        if (v24 > (int)v7)
        {
          if (qword_1019346B0 != -1) {
            dispatch_once(&qword_1019346B0, &stru_101860D10);
          }
          int v27 = (os_log_s *)qword_1019346B8;
          if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
          {
            sub_100CFC008(a2, &buf);
            int v28 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
            uint64_t v29 = a3[1] - *a3;
            LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v29;
            HIWORD(__p.__r_.__value_.__r.__words[2]) = 1026;
            int v55 = v24;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "BoutExtractor: Discarding %s due to insufficient gait metrics (%{public}lu/%{public}d)",  (uint8_t *)&__p,  0x1Cu);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_1019346B0 != -1) {
              dispatch_once(&qword_1019346B0, &stru_101860D10);
            }
            int v39 = qword_1019346B8;
            sub_100CFC008(a2, &v51);
            if ((v51.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              int v40 = &v51;
            }
            else {
              int v40 = (std::string *)v51.__r_.__value_.__r.__words[0];
            }
            uint64_t v41 = a3[1] - *a3;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v41;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1026;
            uint64_t v53 = v24;
            _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v39,  1LL,  "BoutExtractor: Discarding %s due to insufficient gait metrics (%{public}lu/%{public}d)",  &buf,  28);
            int v43 = v42;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityTypeId entifier, const std::vector<float> &, int) const",  "%s\n",  (const char *)v43);
            if (v43 != &__p) {
              free(v43);
            }
          }
        }

        if (a4 >= 1)
        {
          uint64_t v30 = ((double)(int)v7 + (double)(int)v7) / (double)a4;
          if (v30 < 0.5)
          {
            if (qword_1019346B0 != -1) {
              dispatch_once(&qword_1019346B0, &stru_101860D10);
            }
            int v31 = (os_log_s *)qword_1019346B8;
            if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
            {
              sub_100CFC008(a2, &__p);
              int v32 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                  ? &__p
                  : (std::string *)__p.__r_.__value_.__r.__words[0];
              LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
              *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v30;
              _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "BoutExtractor: Discarding (%{public}s) due to insufficient gait metrics yield: %{public}.4f",  (uint8_t *)&buf,  0x16u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(&__p, 0x65CuLL);
              if (qword_1019346B0 != -1) {
                dispatch_once(&qword_1019346B0, &stru_101860D10);
              }
              int v44 = qword_1019346B8;
              sub_100CFC008(a2, &buf);
              if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                p_buf = &buf;
              }
              else {
                p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              LODWORD(v51.__r_.__value_.__l.__data_) = 136446466;
              *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
              WORD2(v51.__r_.__value_.__r.__words[1]) = 2050;
              *(double *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = v30;
              LODWORD(v48) = 22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v44,  1LL,  "BoutExtractor: Discarding (%{public}s) due to insufficient gait metrics yield: %{public}.4f",  &v51,  v48);
              int v47 = v46;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityType Identifier, const std::vector<float> &, int) const",  "%s\n",  (const char *)v47);
              if (v47 != &__p) {
                free(v47);
              }
            }
          }
        }

        *(_OWORD *)&v50[12] = a1[38];
        uint64_t v33 = *(_OWORD *)((char *)a1 + 580);
        v49[0] = *(_OWORD *)((char *)a1 + 564);
        v49[1] = v33;
        *(_OWORD *)unsigned int v50 = *(_OWORD *)((char *)a1 + 596);
        sub_100CFC4CC((uint64_t)v49, a2, v15);
        break;
    }
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    uint64_t v13 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
    {
      sub_100CFC008(a2, &__p);
      char v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "BoutExtractor: Discarding %s due to no gait metrics",  (uint8_t *)&buf,  0xCu);
    }

    int v15 = 0.0;
    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      int v35 = qword_1019346B8;
      sub_100CFC008(a2, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v36 = &buf;
      }
      else {
        int v36 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v51.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v35,  1LL,  "BoutExtractor: Discarding %s due to no gait metrics",  (const char *)&v51);
      uint64_t v38 = v37;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityTypeIdentifi er, const std::vector<float> &, int) const",  "%s\n",  (const char *)v38);
      if (v38 != &__p) {
        free(v38);
      }
    }
  }

  return *(void *)&v15;
}

    sub_1009F9AE8(a1, (_OWORD *)a2, a3, v12, v13, a5, 0LL, 1);
    return;
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  int v15 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(void *)(a2 + 4);
    uint64_t v17 = *(void *)(a2 + 12);
    uint64_t v18 = *(void *)(a2 + 20);
    if ((a4[23] & 0x80u) == 0) {
      int v19 = (uint64_t *)a4;
    }
    else {
      int v19 = *(uint64_t **)a4;
    }
    if ((a4[47] & 0x80u) == 0) {
      int v20 = (uint64_t *)(a4 + 24);
    }
    else {
      int v20 = (uint64_t *)*((void *)a4 + 3);
    }
    *(_DWORD *)buf = 134284547;
    v46 = v16;
    int v47 = 2049;
    int v48 = v17;
    uint64_t v49 = 2050;
    unsigned int v50 = v18;
    int v51 = 2082;
    int v52 = v19;
    uint64_t v53 = 2081;
    v54 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: Attempt to handle location <%{private}+.8f,%{private}+.8f> acc %{public}.2f for non-present fence %{public}s/%{private}s",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    uint64_t v21 = *(void *)(a2 + 4);
    uint64_t v22 = *(void *)(a2 + 12);
    char v23 = *(void *)(a2 + 20);
    if ((a4[23] & 0x80u) == 0) {
      int v24 = (uint64_t *)a4;
    }
    else {
      int v24 = *(uint64_t **)a4;
    }
    uint64_t v25 = (char)a4[47];
    int v28 = (uint64_t *)*((void *)a4 + 3);
    int v27 = (uint64_t *)(a4 + 24);
    uint64_t v26 = v28;
    if (v25 >= 0) {
      uint64_t v29 = v27;
    }
    else {
      uint64_t v29 = v26;
    }
    int v35 = 134284547;
    int v36 = v21;
    uint64_t v37 = 2049;
    uint64_t v38 = v22;
    int v39 = 2050;
    int v40 = v23;
    uint64_t v41 = 2082;
    uint64_t v42 = v24;
    int v43 = 2081;
    int v44 = v29;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning Fence: Attempt to handle location <%{private}+.8f,%{private}+.8f> acc %{public}.2f for non-present fence %{public}s/%{private}s",  &v35,  52);
    int v31 = (uint8_t *)v30;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::handleLocationFence(const CFAbsoluteTime, const CLDaemonLocation &, const CLDaemonLocationPri vate &, const CLFenceManager_Type::Fence &)",  "%s\n",  v30);
    if (v31 != buf) {
      free(v31);
    }
  }

        uint64_t v13 = 0;
      }
    }
  }

  return v11 | v13;
}

  int v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v16 >= 0x80)
  {
    uint64_t v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2) + 1;
    unsigned int v3 = *(_DWORD *)(a1 + 44);
  }

  else
  {
    uint64_t v17 = 2;
  }

  uint64_t v4 = (v17 + v4);
  if ((v3 & 0x40) != 0)
  {
LABEL_38:
    uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    else {
      int v19 = 2;
    }
    uint64_t v4 = (v19 + v4);
  }

  int v12 = *(void *)(v5 + 72);
  if (!v12) {
    int v12 = *(void *)(qword_1019A1A90 + 72);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v12,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }

      sub_100036CD8();
    }

    *(double *)(a1 + 184) = Current;
    *(_BYTE *)(a1 + 192) = 1;
    if (qword_101934950 != -1) {
      dispatch_once(&qword_101934950, &stru_1018709C0);
    }
    char v14 = (os_log_s *)qword_101934958;
    if (os_log_type_enabled((os_log_t)qword_101934958, OS_LOG_TYPE_DEBUG))
    {
      if (!*(_BYTE *)(a1 + 192)) {
        goto LABEL_34;
      }
      int v15 = *(void *)(a1 + 184);
      *(_DWORD *)buf = 134349056;
      uint64_t v25 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::onMotionActivityNotification, no longer required sensor recording from %{public}.1f",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934950 != -1) {
        dispatch_once(&qword_101934950, &stru_1018709C0);
      }
      if (!*(_BYTE *)(a1 + 192)) {
        goto LABEL_34;
      }
      int v19 = *(void *)(a1 + 184);
      uint64_t v22 = 134349056;
      char v23 = v19;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934958,  2LL,  "#VDR,CLTSP, CLVDR2DofNotifierFromSR::onMotionActivityNotification, no longer required sensor recording from %{public}.1f",  &v22,  12);
      uint64_t v21 = (uint8_t *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVDR2DofNotifierFromSR::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    sub_100B11F2C(a1);
  }

  int v12 = *(void *)(v5 + 64);
  if (!v12) {
    int v12 = *(void *)(qword_1019A1C80 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v12,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

  unsigned int v10 = *(void *)(v5 + 32);
  if (!v10) {
    unsigned int v10 = *(void *)(qword_1019A1CE8 + 32);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  v10,  a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 184);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_speedMean),  @"speedMean");
  has = self->_has;
  if ((*(_BYTE *)&has & 4) == 0)
  {
LABEL_13:
    if ((*(_BYTE *)&has & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  PBDataWriterWriteDoubleField(a3, 12LL, self->_gradeMean);
  has = self->_has;
  if ((*(_BYTE *)&has & 1) == 0)
  {
LABEL_14:
    if ((*(_WORD *)&has & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }

  *((void *)a3 + 3) = *(void *)&self->_gradeMean;
  *((_DWORD *)a3 + 41) |= 4u;
  has = self->_has;
  if ((*(_BYTE *)&has & 1) == 0)
  {
LABEL_14:
    if ((*(_WORD *)&has & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }

  *((void *)result + 14) = *(void *)&self->_speedMean;
  *((_DWORD *)result + 41) |= 0x2000u;
  has = self->_has;
  if ((*(_BYTE *)&has & 4) == 0)
  {
LABEL_13:
    if ((*(_BYTE *)&has & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  self->_gradeMean = *((double *)a3 + 3);
  *(_DWORD *)&self->_has |= 4u;
  unsigned int v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 1) == 0)
  {
LABEL_14:
    if ((v3 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(void *)(v5 + 16),  (unint64_t)a2,  a4);
  unsigned int v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }

      if (v8 == 4) {
        return 1LL;
      }
    }

    if (TagFallback >> 3 != 2)
    {
      unsigned int v8 = TagFallback & 7;
      goto LABEL_34;
    }

    unsigned int v8 = TagFallback & 7;
    if (v8 != 2) {
      goto LABEL_34;
    }
LABEL_10:
    *(_DWORD *)(a1 + 44) |= 2u;
    unsigned int v9 = *(char **)(a1 + 32);
    if (!v9)
    {
      unsigned int v9 = (char *)operator new(0x18uLL);
      *(void *)unsigned int v9 = off_101876068;
      *((void *)v9 + 2) = 0LL;
      *((_DWORD *)v9 + 2) = 0;
      *(_DWORD *)(v9 + 11) = 0;
      *(void *)(a1 + 32) = v9;
    }

    unsigned int v10 = (char *)*((void *)this + 1);
    if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
    {
    }

    else
    {
      int v35 = *v10;
      *((void *)this + 1) = v10 + 1;
    }

    int v27 = *((_DWORD *)this + 14);
    int v28 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v27 + 1;
    if (v27 >= v28) {
      return 0LL;
    }
    uint64_t v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v35);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
    int v31 = *((_DWORD *)this + 14);
    char v23 = __OFSUB__(v31, 1);
    int v32 = v31 - 1;
    if (v32 < 0 == v23) {
      *((_DWORD *)this + 14) = v32;
    }
  }

  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1LL;
  *((_BYTE *)this + 36) = 1;
  return result;
}

  uint64_t v17 = *(void *)(a1 + 32);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_1019A1E40 + 32);
  }
  uint64_t v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC6A54(v17, a2);
  int v19 = (int)v18;
  else {
    int v20 = 1;
  }
  uint64_t v4 = (v4 + v19 + v20 + 1);
  if ((*(_DWORD *)(a1 + 56) & 0x40) != 0)
  {
LABEL_40:
    uint64_t v21 = *(void *)(a1 + 40);
    if (!v21) {
      uint64_t v21 = *(void *)(qword_1019A1E40 + 40);
    }
    uint64_t v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BC6ED4(v21, a2);
    int v24 = (int)v22;
    else {
      uint64_t v25 = 1;
    }
    uint64_t v4 = (v4 + v24 + v25 + 1);
  }

    sub_100BFE834();
  }

  size = v20.__r_.__value_.__l.__size_;
  if (!v20.__r_.__value_.__l.__size_) {
    goto LABEL_34;
  }
  int v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
LABEL_14:
  sub_1011212DC(a1, (char *)v12, (char *)v12 + size, (uint64_t)__p);
  uint64_t v13 = v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v13 = (unint64_t)__p[1];
  }
  if (v13)
  {
    sub_100BFE880(a4, (__int128 *)__p);
  }

  else
  {
    char v14 = v20.__r_.__value_.__s.__size_;
    if ((v20.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      char v14 = v20.__r_.__value_.__l.__size_;
    }
    if (v14 == 2)
    {
      int v16 = &v20;
      if ((v20.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      sub_100BFE60C( (uint64_t)a4,  v16->__r_.__value_.__s.__data_[0],  v16->__r_.__value_.__s.__data_[1]);
    }

    else
    {
      if (v14 != 1) {
        sub_100BFE834();
      }
      int v15 = &v20;
      if ((v20.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      sub_100BFCB4C((uint64_t)a4, v15->__r_.__value_.__s.__data_[0]);
    }
  }

  return v7 + 2;
}

    char v23 = v23 + v59;
    if (*((_BYTE *)v17 + 37)) {
      int v32 = 1;
    }
    else {
      int v32 = v26 == 0LL;
    }
    uint64_t v33 = v32;
    if (v31 > v24) {
      uint64_t v34 = v31;
    }
    else {
      uint64_t v34 = v24;
    }
    if (v31 > v24) {
      int v35 = v30;
    }
    else {
      int v35 = v21;
    }
    if (v31 <= v24) {
      uint64_t v33 = v19;
    }
    if (*((_BYTE *)v17 + 37)) {
      int v36 = 1;
    }
    else {
      int v36 = v26 == 0LL;
    }
    uint64_t v37 = v36;
    uint64_t v38 = v31 <= v22;
    if (v31 <= v22)
    {
      int v24 = v34;
    }

    else
    {
      uint64_t v25 = v17;
      int v24 = v22;
    }

    if (v31 <= v22) {
      uint64_t v21 = v35;
    }
    else {
      uint64_t v22 = v31;
    }
    if (v38) {
      int v19 = v33;
    }
    else {
      int v20 = v30;
    }
    if (!v38) {
      uint64_t v18 = v37;
    }
LABEL_65:
    uint64_t v17 = (uint64_t *)v17[1];
  }

  while (v17 != &v51);
  int v16 = v47;
  if (v25 == &v51) {
    goto LABEL_79;
  }
  sub_100D3EB54(v48, v25 + 2);
  int v39 = v22 * 500.0;
  if ((v20 & 1) != 0) {
    int v39 = v22;
  }
  int v40 = v24 * 500.0;
  if ((v21 & 1) != 0) {
    int v40 = v24;
  }
  if ((v18 & 1) == 0) {
    int v39 = v39 * 10.0;
  }
  if ((v19 & 1) == 0) {
    int v40 = v40 * 10.0;
  }
  uint64_t v41 = v39 / v23;
  uint64_t v42 = v39 / v40;
  *(float *)(v48 + 176) = v41;
  *(float *)(v48 + 180) = v42;
  sub_1000F2F30(v50, v25 + 2);
  *(_BYTE *)(a1 + 568) = *((_BYTE *)v25 + 36);
  *(void *)(a1 + 576) = v25[8];
  *(void *)(a1 + 584) = *(void *)(v48 + 96);
  *(void *)(a1 + 592) = *(void *)(v48 + 8);
  int v67 = 0LL;
  v68[0] = 0.0;
  int v66 = 0LL;
  int v59 = 0.0;
  int v60 = 0LL;
  uint64_t v61 = 0LL;
  v62 = 0x3FF0000000000000LL;
  int v63 = 0u;
  int v64 = 0u;
  uint64_t v65 = 0;
  sub_100D53428(a1, v49, (uint64_t)(v25 + 2), (double *)v48, v68, (double *)&v67, (double *)&v66, (uint64_t)&v59, 0);
  *(_OWORD *)(v48 + 288) = *(_OWORD *)(v48 + 152);
  *(void *)(v48 + 304) = *(void *)(v48 + 168);
  int v43 = sub_100D51B34(a1, v48, 0);
  *(_BYTE *)(v48 + 264) = v43;
  if (!v43) {
    ++*(_DWORD *)(a1 + 104);
  }
  int v5 = v58;
LABEL_80:
  sub_100890314(&v51);
LABEL_81:
  sub_100D53CE4(&v54);
  if (v5)
  {
    int v44 = (unint64_t *)&v5->__shared_owners_;
    do
      uint64_t v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  return v16;
}

  int v20 = 0LL;
LABEL_35:
  if (qword_101934A70 != -1) {
    dispatch_once(&qword_101934A70, &stru_101883660);
  }
  uint64_t v22 = (os_log_s *)qword_101934A78;
  if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
  {
    sub_100832C64(a5, __p);
    char v23 = (__p[0].__r_.__value_.__s.__size_ & 0x80u) == 0
        ? __p
        : (std::stringbuf::string_type *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v20;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v23;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "TILE: getLocationByCellFromTile, isFound, %d, locationd, %s",  (uint8_t *)&buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101883660);
    }
    int v24 = qword_101934A78;
    sub_100832C64(a5, &buf);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v25 = &buf;
    }
    else {
      uint64_t v25 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    v46 = 67109378;
    *(_DWORD *)int v47 = v20;
    *(_WORD *)&v47[4] = 2080;
    *(void *)&v47[6] = v25;
    LODWORD(v44) = 18;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v24,  2LL,  "TILE: getLocationByCellFromTile, isFound, %d, locationd, %s",  &v46,  v44);
    int v27 = v26;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)",  "%s\n",  (const char *)v27);
    if (v27 != __p) {
      free(v27);
    }
  }

  return v20;
}

  *(_DWORD *)(a1 + 84) |= 0x10u;
  int v15 = *(_DWORD **)(a1 + 40);
  if (!v15)
  {
    int v15 = operator new(0x28uLL);
    v15[7] = 0;
    v15[8] = 0;
    *((void *)v15 + 1) = 0LL;
    *((void *)v15 + 2) = 0LL;
    *(void *)int v15 = &off_101887698;
    *((_BYTE *)v15 + 24) = 0;
    *(void *)(a1 + 40) = v15;
  }

  int v16 = *(void *)(a2 + 40);
  if (!v16) {
    int v16 = *(void *)(qword_1019A20E0 + 40);
  }
  sub_100E3AA18((uint64_t)v15, v16);
  unsigned int v6 = *(_DWORD *)(a2 + 84);
  if ((v6 & 0x20) == 0)
  {
LABEL_10:
    if ((v6 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }

  if ((a1[66] & 1) != 0) {
    int v28 = 1;
  }
  (*(void (**)(_DWORD *, int *, uint64_t *, void, uint64_t, void))(*(void *)a1 + 152LL))( a1,  a3,  v25,  0LL,  a2,  0LL);
  sub_100527B44(v25);
  sub_1000229D4((uint64_t)&v29, v30[0]);
LABEL_37:
  sub_100527B44(&v31);
  return v6;
}

  int v19 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 72) |= 0x1000u;
  *(_DWORD *)(a1 + 60) = v19;
  if ((*(_DWORD *)(a2 + 72) & 0x2000) == 0) {
    return;
  }
LABEL_20:
  char v7 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) |= 0x2000u;
  *(_DWORD *)(a1 + 64) = v7;
}

  uint64_t v17 = *(_DWORD *)(a2 + 32);
  v3 |= 0x40u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 32) = v17;
  uint64_t v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "otherFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }

  int v5 = *(void *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(void *)(a1 + 136) = v5;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "powerUpdateTime", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 144), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  unsigned int v6 = *(_DWORD *)(a2 + 100);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 100) = v6;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "energy", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }

  uint64_t result = *(float *)(a2 + 56);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 56) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "isFeasibleWalkingSpeed", *(_BYTE *)(a1 + 93));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }

  uint64_t v13 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 56) = v13;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "currentWalkSpeedEstimate", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "accelZ", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }

  int v15 = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 52) = v15;
  uint64_t v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "posPeakRightHalfWidth", *(_DWORD *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

  int v19 = *(_DWORD *)(a2 + 128);
  v6 |= 0x4000u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 128) = v19;
  int v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "inertialApproachY", *(float *)(a1 + 116));
  unsigned int v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x1000) == 0)
  {
LABEL_13:
    if ((v9 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "configNonPlanarPaprThreshold", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "configTransitionStartSpeedThreshold", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }

  int v24 = *(_DWORD *)(a2 + 184);
  v8 |= 0x200u;
  *(_WORD *)(a1 + 204) = v8;
  *(_DWORD *)(a1 + 184) = v24;
  if ((*(_WORD *)(a2 + 204) & 0x20) != 0)
  {
LABEL_19:
    int v11 = *(_DWORD *)(a2 + 168);
    *(_WORD *)(a1 + 204) = v8 | 0x20;
    *(_DWORD *)(a1 + 168) = v11;
  }

  PB::TextFormatter::format(this, "maxDeltaAngleLong", *(float *)(a1 + 172));
  int v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  char v14 = *(_BYTE *)(a2 + 57);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 57) = v14;
  uint64_t v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x20000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "isPulse", *(_BYTE *)(a1 + 63));
  int v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 62), 0x131u);
  uint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }

  int v16 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 92) = v3;
  *(void *)(result + 16) = v16;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "numSamplesInHistory", *(_DWORD *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0xCAu);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  int v16 = *(_DWORD *)(a2 + 68);
  v3 |= 0x100u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 68) = v16;
  uint64_t v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "runningDeltaVXOverEpoch", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 108), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  int v20 = *(_DWORD *)(a2 + 116);
  v6 |= 0x100u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 116) = v20;
  int v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x10000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "peakMagnitudePercentileDiff", *(float *)(a1 + 136));
  int v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 0x20000) == 0)
  {
LABEL_17:
    if ((v11 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "polylinesLocation1Latitude", *(double *)(a1 + 136));
  int v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0xBu);
  char v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 8) == 0)
  {
LABEL_20:
    if ((v14 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 164), 9u);
  int v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 8) == 0)
  {
LABEL_20:
    if ((v16 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "quality", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "timeSpan", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 1) != 0) {
    goto LABEL_35;
  }
LABEL_17:
  if ((v5 & 0x8000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(this, "unitDistance", *(float *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0x10u);
  if ((*(_DWORD *)(v3 + 80) & 0x200) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 48), 0x11u);
  }
  return result;
}

  int v20 = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 124) |= 0x400u;
  *(_DWORD *)(a1 + 100) = v20;
  unsigned int v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x10000) == 0)
  {
LABEL_19:
    if ((v10 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "unitDistance", *(float *)(a1 + 88));
  int v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x100) == 0)
  {
LABEL_18:
    if ((v12 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0xBu);
  int v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 8) == 0)
  {
LABEL_18:
    if ((v11 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }

  uint64_t result = *(float *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 16) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "magneticHeading", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  uint64_t v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "distanceTriggerThreshold", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }

  uint64_t v18 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 68) = v18;
  uint64_t v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      return result;
    }
LABEL_36:
    int v20 = *(_BYTE *)(a2 + 89);
    *(_DWORD *)(result + 92) = v3 | 0x10000;
    *(_BYTE *)(result + 89) = v20;
    return result;
  }

  PB::TextFormatter::format(this, "timeDeltaStreaming", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10) != 0) {
    goto LABEL_35;
  }
LABEL_17:
  if ((v5 & 0x4000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(this, "verticalSpeed", *(float *)(a1 + 84));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x10u);
  if ((*(_DWORD *)(v3 + 92) & 0x10000) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 89), 0x11u);
  }
  return result;
}

  uint64_t v17 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 60) = v17;
  uint64_t v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }

    sub_100BFE834();
  }

  size = v17.__r_.__value_.__l.__size_;
  if (!v17.__r_.__value_.__l.__size_) {
    goto LABEL_34;
  }
  unsigned int v9 = (std::string *)v17.__r_.__value_.__r.__words[0];
LABEL_14:
  sub_1011212DC(a1, (char *)v9, (char *)v9 + size, (uint64_t)__p);
  unsigned int v10 = v16;
  if ((v16 & 0x80u) != 0) {
    unsigned int v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    sub_100BFE880(a4, (__int128 *)__p);
  }

  else
  {
    int v11 = v17.__r_.__value_.__s.__size_;
    if ((v17.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      int v11 = v17.__r_.__value_.__l.__size_;
    }
    if (v11 == 2)
    {
      uint64_t v13 = &v17;
      if ((v17.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      sub_100BFE60C( (uint64_t)a4,  v13->__r_.__value_.__s.__data_[0],  v13->__r_.__value_.__s.__data_[1]);
    }

    else
    {
      if (v11 != 1) {
        sub_100BFE834();
      }
      int v12 = &v17;
      if ((v17.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v12 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      sub_100BFCB4C((uint64_t)a4, v12->__r_.__value_.__s.__data_[0]);
    }
  }

  return (uint64_t)&a2[i + 2];
}

  uint64_t result = *(double *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 200) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "position", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }

  uint64_t result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 96) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedMedian", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }

  uint64_t result = *(double *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 184) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x200000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2Mean", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }

  uint64_t result = *(float *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 52) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "accelFFTBin5", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }

  int v16 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 28) = v16;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "orientation", *(_DWORD *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  uint64_t v17 = *(_DWORD *)(a2 + 60);
  v3 |= 0x80u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 60) = v17;
  uint64_t v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }

  unsigned int v8 = *(_BYTE *)(a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 108) = v8;
  uint64_t v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x8000) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "exitState", *(_DWORD *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_7:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 68);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 68) = LODWORD(result);
  uint64_t v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "rotRateInerXYMean", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }

  uint64_t result = *(float *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 36) = result;
  uint64_t v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "possibleObstructed", *(_BYTE *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }

  uint64_t v13 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 32) = v13;
  uint64_t v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "isArmConstrainedStateValid", *(_BYTE *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "deltaOdometerDistance", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }

  unsigned int v6 = *(_BYTE *)(a2 + 132);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_BYTE *)(a1 + 132) = v6;
  uint64_t v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_36:
    uint64_t result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 136) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }

  PB::TextFormatter::format(this, "strideLengthFormBasedUncalibrated", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000) != 0) {
    goto LABEL_35;
  }
LABEL_17:
  if ((v5 & 0x4000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 120));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 0x10u);
  if ((*(_DWORD *)(v3 + 136) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 0x11u);
  }
  return result;
}

  unsigned int v9 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 16) = v9;
  uint64_t v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }

  PB::TextFormatter::format(this, "integratedRotationAxisWZ", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 200), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }

  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_1018A3578);
  }
  uint64_t v26 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = *(void *)(a1 + 496);
    int v28 = (*(void *)(a1 + 504) - v27) >> 5;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = ((uint64_t)v19 - v27) >> 5;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Point gyro pending samples thinned.  %zu samples reduced to %zu.",  (uint8_t *)&buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3578);
    }
    uint64_t v57 = *(void *)(a1 + 496);
    int v58 = (*(void *)(a1 + 504) - v57) >> 5;
    uint64_t v85 = 134218240;
    unsigned int v86 = v58;
    int v87 = 2048;
    int v88 = ((uint64_t)v19 - v57) >> 5;
    int v59 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Point gyro pending samples thinned.  %zu samples reduced to %zu.",  (size_t)&v85,  22);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGyroCalibrationDatabaseLocalShared::thinPendingSamples(CFTimeInterval)",  "%s\n",  (const char *)v59);
    if (v59 != &buf) {
      free(v59);
    }
  }

  (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 320LL))( a1,  @"Thinned",  (uint64_t)(*(void *)(a1 + 504) - (void)v19) >> 5);
  (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 320LL))( a1,  @"Inserted",  ((uint64_t)v19 - *(void *)(a1 + 496)) >> 5);
  if (v90.__r_.__value_.__r.__words[0])
  {
    v90.__r_.__value_.__l.__size_ = v90.__r_.__value_.__r.__words[0];
    operator delete(v90.__r_.__value_.__l.__data_);
  }

  if (__p)
  {
    *(void *)&uint64_t v65 = __p;
    operator delete(__p);
  }

  if (*(void *)(a1 + 496) != *(void *)(a1 + 504))
  {
    *(double *)(a1 + 528) = Current;
    v82 = 0u;
    int v83 = 0u;
    uint64_t v81 = 0u;
    int v84 = 0LL;
    int v80 = 0u;
    int v79 = 0u;
    int v78 = 0u;
    uint64_t v77 = 0u;
    int v76 = 0u;
    int v75 = 0u;
    int v74 = 0u;
    uint64_t v73 = 0u;
    int v72 = 0u;
    int v71 = 0u;
    int v70 = 0u;
    uint64_t v69 = 0u;
    int v68 = 0u;
    int v67 = 0u;
    int v66 = 0u;
    uint64_t v65 = 0u;
    __p = *(void **)&Current;
    LODWORD(buf.__r_.__value_.__l.__data_) = 2;
    (*(void (**)(uint64_t, std::string *, void **, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &buf,  &__p,  1LL,  0xFFFFFFFFLL,  0LL);
    sub_1003C0454(a1 + 112);
    sub_100B14CF8((uint64_t *)(a1 + 536), &v63);
    uint64_t v30 = *(void *)(a1 + 496);
    for (i = *(void *)(a1 + 504); v30 != i; v30 += 32LL)
    {
      if (sub_1012039C0( v63,  1,  *(double *)(v30 + 16),  *(float *)v30,  *(float *)(v30 + 4),  *(float *)(v30 + 8),  *(float *)(v30 + 12)))
      {
        int v31 = (sqlite3_stmt *)sub_100019240(v63);
        sub_1003BB2BC(a1 + 112, v31);
        *(void *)(v30 + 24) = sub_1003C1068(a1 + 112);
        int v32 = *(_OWORD **)(a1 + 296);
        uint64_t v33 = *(void *)(a1 + 304);
        if ((unint64_t)v32 >= v33)
        {
          uint64_t v41 = *(void *)(a1 + 288);
          uint64_t v42 = ((uint64_t)v32 - v41) >> 5;
          int v43 = v42 + 1;
          int v44 = v33 - v41;
          if (v44 >> 4 > v43) {
            int v43 = v44 >> 4;
          }
          else {
            uint64_t v45 = v43;
          }
          if (v45) {
            uint64_t v45 = (unint64_t)sub_1012051C8(v45);
          }
          else {
            v46 = 0LL;
          }
          int v47 = (_OWORD *)(v45 + 32 * v42);
          int v48 = *(_OWORD *)(v30 + 16);
          *int v47 = *(_OWORD *)v30;
          v47[1] = v48;
          unsigned int v50 = *(char **)(a1 + 288);
          uint64_t v49 = *(char **)(a1 + 296);
          int v51 = v47;
          if (v49 != v50)
          {
            do
            {
              int v52 = *((_OWORD *)v49 - 1);
              *(v51 - 2) = *((_OWORD *)v49 - 2);
              *(v51 - 1) = v52;
              v51 -= 2;
              v49 -= 32;
            }

            while (v49 != v50);
            uint64_t v49 = *(char **)(a1 + 288);
          }

          int v35 = v47 + 2;
          *(void *)(a1 + 288) = v51;
          *(void *)(a1 + 296) = v47 + 2;
          *(void *)(a1 + 304) = v45 + 32 * v46;
          if (v49) {
            operator delete(v49);
          }
        }

        else
        {
          uint64_t v34 = *(_OWORD *)(v30 + 16);
          void *v32 = *(_OWORD *)v30;
          v32[1] = v34;
          int v35 = v32 + 2;
        }

        *(void *)(a1 + 296) = v35;
      }

      else
      {
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_1018A3578);
        }
        int v36 = (os_log_s *)off_101934598;
        if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
        {
          sub_1003C3A08(a1 + 112, &buf);
          uint64_t v37 = (buf.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &buf : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v90.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v90.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_FAULT,  "flushPendingError: %{public}s",  (uint8_t *)&v90,  0xCu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_101934590 != -1) {
            dispatch_once(&qword_101934590, &stru_1018A3578);
          }
          uint64_t v38 = off_101934598;
          sub_1003C3A08(a1 + 112, &v90);
          int v39 = &v90;
          if ((v90.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            int v39 = (std::string *)v90.__r_.__value_.__r.__words[0];
          }
          uint64_t v85 = 136446210;
          unsigned int v86 = (uint64_t)v39;
          LODWORD(v62) = 12;
          int v40 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v38,  17LL,  "flushPendingError: %{public}s",  &v85,  v62);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLGyroCalibrationDatabaseLocalShared::flushPendingSamples()",  "%s\n",  (const char *)v40);
          if (v40 != &buf) {
            free(v40);
          }
        }
      }
    }

    sub_1003C05BC(a1 + 112);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_1018A3578);
    }
    uint64_t v53 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEFAULT))
    {
      v54 = (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 5;
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v54;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Point gyro database flushed, %zu samples added.",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_1018A3578);
      }
      int v60 = (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 5;
      LODWORD(v90.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v90.__r_.__value_.__r.__words + 4) = v60;
      uint64_t v61 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  off_101934598,  0LL,  "Point gyro database flushed, %zu samples added.",  (size_t)&v90);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLGyroCalibrationDatabaseLocalShared::flushPendingSamples()",  "%s\n",  (const char *)v61);
      if (v61 != &buf) {
        free(v61);
      }
    }

    *(void *)(a1 + 504) = *(void *)(a1 + 496);
    sub_1012029D0((char **)(a1 + 496));
    [*(id *)(a1 + 272) nextFireDelay];
    if (v55 == 1.79769313e308) {
      [*(id *)(a1 + 272) setNextFireDelay:*(double *)(a1 + 456)];
    }
    int v56 = v63;
    int v63 = 0LL;
    if (v56) {
      (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
    }
  }

void sub_100085920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100085938(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  18998LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 8);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_101228254();
      }
      a1[5] |= 1u;
      a1[2] = v6;
      int v5 = *(_DWORD *)(a2 + 20);
    }

    if ((v5 & 2) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 12);
      a1[5] |= 2u;
      a1[3] = v7;
    }
  }

void sub_100085A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100085A3C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  19201LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 8);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_10122827C();
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 20);
    }

    if ((v5 & 2) != 0)
    {
      char v7 = *(_BYTE *)(a2 + 12);
      *(_DWORD *)(a1 + 20) |= 2u;
      *(_BYTE *)(a1 + 12) = v7;
    }
  }

void sub_100085B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100085B28(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  19549LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 8);
    if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
      sub_1012282A4();
    }
    *(_DWORD *)(a1 + 24) |= 1u;
    *(_DWORD *)(a1 + 8) = v6;
    int v5 = *(_DWORD *)(a2 + 24);
  }

  if ((v5 & 2) != 0)
  {
    char v8 = *(_BYTE *)(a2 + 12);
    *(_DWORD *)(a1 + 24) |= 2u;
    *(_BYTE *)(a1 + 12) = v8;
    int v5 = *(_DWORD *)(a2 + 24);
    if ((v5 & 4) == 0)
    {
LABEL_11:
      if ((v5 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_19;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_11;
  }

  char v9 = *(_BYTE *)(a2 + 13);
  *(_DWORD *)(a1 + 24) |= 4u;
  *(_BYTE *)(a1 + 13) = v9;
  int v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 8) == 0)
  {
LABEL_12:
    if ((v5 & 0x10) == 0) {
      goto LABEL_13;
    }
LABEL_20:
    char v11 = *(_BYTE *)(a2 + 15);
    *(_DWORD *)(a1 + 24) |= 0x10u;
    *(_BYTE *)(a1 + 15) = v11;
    int v5 = *(_DWORD *)(a2 + 24);
    if ((v5 & 0x20) == 0)
    {
LABEL_14:
      if ((v5 & 0x40) == 0) {
        return;
      }
      goto LABEL_15;
    }

    goto LABEL_21;
  }

void sub_100085CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100085CB8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  19772LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 20);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 8);
      if (v6 - 31 >= 0x19 && (v6 > 0xE || ((1 << v6) & 0x76B6) == 0)) {
        sub_1012282CC();
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      *(_DWORD *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 20);
    }

    if ((v5 & 2) != 0)
    {
      char v7 = *(_BYTE *)(a2 + 12);
      *(_DWORD *)(a1 + 20) |= 2u;
      *(_BYTE *)(a1 + 12) = v7;
    }
  }

void sub_100085D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100085DA4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  19946LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_1012282F4();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }

void sub_100085E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100085E70(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  20116LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 8);
    if (v5 - 31 >= 0x19 && (v5 > 0xE || ((1 << v5) & 0x76B6) == 0)) {
      sub_10122831C();
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    *(_DWORD *)(a1 + 8) = v5;
  }

void sub_100085F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100085F3C()
{
  return 1LL;
}

void *sub_100085F44@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ReceivedEvent");
}

uint64_t sub_100085F54(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10181BD28;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(_DWORD *)(a1 + 72) = 1;
  *(_WORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  sub_100085FE0(a1, a2);
  return a1;
}

void sub_100085FBC(_Unwind_Exception *a1)
{
  unsigned int v3 = v2;
  if (*v3) {
    operator delete[](*v3);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void sub_100085FE0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v33,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  18140LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v33,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v32, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v33);
  }

  int v5 = *(_DWORD *)(a2 + 112);
  if (v5)
  {
    sub_10004AAFC(a1 + 104, *(_DWORD *)(a1 + 112) + v5);
    memcpy( (void *)(*(void *)(a1 + 104) + 4LL * *(int *)(a1 + 112)),  *(const void **)(a2 + 104),  4LL * *(int *)(a2 + 112));
    *(_DWORD *)(a1 + 112) += *(_DWORD *)(a2 + 112);
  }

  int v6 = *(_DWORD *)(a2 + 128);
  if (!(_BYTE)v6) {
    goto LABEL_50;
  }
  if ((v6 & 1) != 0)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 72);
    if (v7 - 31 >= 0x19 && (v7 > 0xE || ((1 << v7) & 0x76B6) == 0)) {
      sub_101228344();
    }
    *(_DWORD *)(a1 + 128) |= 1u;
    *(_DWORD *)(a1 + 72) = v7;
    int v6 = *(_DWORD *)(a2 + 128);
  }

  if ((v6 & 2) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 128) |= 2u;
    *(void *)(a1 + 8) = v8;
    int v6 = *(_DWORD *)(a2 + 128);
    if ((v6 & 4) == 0)
    {
LABEL_13:
      if ((v6 & 8) == 0) {
        goto LABEL_14;
      }
      goto LABEL_25;
    }
  }

  else if ((v6 & 4) == 0)
  {
    goto LABEL_13;
  }

  *(_DWORD *)(a1 + 128) |= 4u;
  char v9 = *(void **)(a1 + 16);
  if (!v9)
  {
    char v9 = operator new(0x30uLL);
    *char v9 = off_10181AF18;
    v9[1] = 0x100000001LL;
    v9[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v9[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v9[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v9[5] = 0LL;
    *(void *)(a1 + 16) = v9;
  }

  uint64_t v10 = *(void *)(a2 + 16);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_1019A0980 + 16);
  }
  sub_100071588((uint64_t)v9, v10);
  int v6 = *(_DWORD *)(a2 + 128);
  if ((v6 & 8) == 0)
  {
LABEL_14:
    if ((v6 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }

LABEL_74:
  char v27 = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 128) |= 0x800u;
  *(_BYTE *)(a1 + 76) = v27;
  int v6 = *(_DWORD *)(a2 + 128);
  if ((v6 & 0x1000) == 0)
  {
LABEL_56:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_57;
    }
LABEL_80:
    char v30 = *(_BYTE *)(a2 + 77);
    *(_DWORD *)(a1 + 128) |= 0x2000u;
    *(_BYTE *)(a1 + 77) = v30;
    if ((*(_DWORD *)(a2 + 128) & 0x4000) == 0) {
      return;
    }
    goto LABEL_81;
  }

    dispatch_once(&qword_1019348D0, &stru_10181DDB8);
    goto LABEL_70;
  }

  p_vtable = (void **)a2;
  unsigned int v7 = *a2;
  if (*a2 == a2[1])
  {
    sub_101229CF4();
    __break(1u);
    goto LABEL_74;
  }

  v46.__r_.__value_.__s.__size_ = 1;
  LOWORD(v46.__r_.__value_.__l.__data_) = 34;
  memset(&__p, 0, sizeof(__p));
  if ((sub_100013090(v7, &__p) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)buf);
    *(void *)buf = &off_101818CB0;
    sub_1000139B0((uint64_t)buf);
  }

  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    size = __p.__r_.__value_.__s.__size_;
  }
  else {
    size = __p.__r_.__value_.__l.__size_;
  }
  char v11 = std::string::append(&v46, (const std::string::value_type *)p_p, size);
  uint64_t v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__l.__cap_ = v11->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0LL;
  v11->__r_.__value_.__l.__cap_ = 0LL;
  v11->__r_.__value_.__r.__words[0] = 0LL;
  char v13 = std::string::append(&v47, "");
  uint64_t v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__l.__cap_ = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  int v15 = p_vtable[1];
  for (i = (uint64_t)*p_vtable + 16; (void *)i != v15; i += 16LL)
  {
    v44.__r_.__value_.__s.__size_ = 1;
    LOWORD(v44.__r_.__value_.__l.__data_) = 44;
    uint64_t v17 = std::string::append(&v44, "");
    uint64_t v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__l.__cap_ = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    memset(&v43, 0, sizeof(v43));
    if ((sub_100013090(i, &v43) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)buf);
      *(void *)buf = &off_101818CB0;
      sub_1000139B0((uint64_t)buf);
    }

    if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v19 = &v43;
    }
    else {
      int v19 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v20 = v43.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v20 = v43.__r_.__value_.__l.__size_;
    }
    uint64_t v21 = std::string::append(&__p, (const std::string::value_type *)v19, v20);
    uint64_t v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0LL;
    v21->__r_.__value_.__l.__cap_ = 0LL;
    v21->__r_.__value_.__r.__words[0] = 0LL;
    char v23 = std::string::append(&v46, "");
    uint64_t v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0LL;
    v23->__r_.__value_.__l.__cap_ = 0LL;
    v23->__r_.__value_.__r.__words[0] = 0LL;
    if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v25 = &v47;
    }
    else {
      uint64_t v25 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v26 = v47.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v26 = v47.__r_.__value_.__l.__size_;
    }
    std::string::append(&v42, (const std::string::value_type *)v25, v26);
  }

  v43.__r_.__value_.__s.__size_ = 7;
  strcpy((char *)&v43, " WHERE ");
  char v27 = std::string::append(&v43, "RecordingUUID");
  int v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v27->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0LL;
  v27->__r_.__value_.__l.__cap_ = 0LL;
  v27->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v29 = std::string::append(&v44, " in ");
  char v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__l.__cap_ = v29->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0LL;
  v29->__r_.__value_.__l.__cap_ = 0LL;
  v29->__r_.__value_.__r.__words[0] = 0LL;
  unsigned int v31 = std::string::append(&__p, "(");
  char v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__l.__cap_ = v31->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0LL;
  v31->__r_.__value_.__l.__cap_ = 0LL;
  v31->__r_.__value_.__r.__words[0] = 0LL;
  if ((v42.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v33 = &v42;
  }
  else {
    uint64_t v33 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  if ((v42.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v34 = v42.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t v34 = v42.__r_.__value_.__l.__size_;
  }
  int v35 = std::string::append(&v46, (const std::string::value_type *)v33, v34);
  int v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__l.__cap_ = v35->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0LL;
  v35->__r_.__value_.__l.__cap_ = 0LL;
  v35->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v37 = std::string::append(&v47, ")");
  uint64_t v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  cap = (_UNKNOWN **)v37->__r_.__value_.__l.__cap_;
  *(_OWORD *)buf = v38;
  v37->__r_.__value_.__l.__size_ = 0LL;
  v37->__r_.__value_.__l.__cap_ = 0LL;
  v37->__r_.__value_.__r.__words[0] = 0LL;
  sub_1000C91F4(*(void *)a1, (uint64_t)buf, a3, a4);
  if (SHIBYTE(cap) < 0) {
    operator delete(*(void **)buf);
  }
}

        int v43 = sub_100371ED0(a1, (uint64_t)v78);
        if (*(_BYTE *)(a1 + 8))
        {
          int v44 = v43;
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101834AA8);
          }
          uint64_t v45 = (os_log_s *)qword_101934838;
          if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
          {
            sub_100FE4F50((int *)a2, v69);
            if (SBYTE3(v71) >= 0) {
              v46 = v69;
            }
            else {
              v46 = *(_BYTE **)v69;
            }
            LODWORD(v61[0]) = a3->i32[0];
            sub_100FE5218((int *)v61, v66);
            if (v67 >= 0) {
              int v47 = v66;
            }
            else {
              int v47 = (void **)v66[0];
            }
            int v63 = *a4;
            int v48 = __p;
            sub_100FE5218(&v63, __p);
            if (v65 < 0) {
              int v48 = (void **)__p[0];
            }
            uint64_t v49 = *a6;
            unsigned int v50 = sub_10080E94C();
            int v51 = sub_10080EF30(v50);
            LODWORD(buf) = 67110402;
            HIDWORD(buf) = v44;
            int v83 = 2080;
            int v84 = v46;
            uint64_t v85 = 2080;
            unsigned int v86 = v47;
            int v87 = 2080;
            int v88 = v48;
            uint64_t v89 = 1024;
            v90 = v49;
            int v91 = 2050;
            int v92 = v51;
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "#locctl,#rec,recordMessage,CLWifiService_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,% d,propagation_us,%{public}.3f",  (uint8_t *)&buf,  0x36u);
            if (v65 < 0) {
              operator delete(__p[0]);
            }
            if (v67 < 0) {
              operator delete(v66[0]);
            }
            if (SBYTE3(v71) < 0) {
              operator delete(*(void **)v69);
            }
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_101934830 != -1) {
              dispatch_once(&qword_101934830, &stru_101834AA8);
            }
            int v52 = qword_101934838;
            sub_100FE4F50((int *)a2, v66);
            if (v67 >= 0) {
              uint64_t v53 = v66;
            }
            else {
              uint64_t v53 = (void **)v66[0];
            }
            int v63 = a3->i32[0];
            v54 = __p;
            sub_100FE5218(&v63, __p);
            if (v65 < 0) {
              v54 = (void **)__p[0];
            }
            HIDWORD(v60) = *a4;
            sub_100FE5218((int *)&v60 + 1, v61);
            if (v62 >= 0) {
              int v55 = v61;
            }
            else {
              int v55 = (void **)v61[0];
            }
            int v56 = *a6;
            uint64_t v57 = sub_10080E94C();
            int v58 = sub_10080EF30(v57);
            *(_DWORD *)uint64_t v69 = 67110402;
            *(_DWORD *)&v69[4] = v44;
            *(_WORD *)&v69[8] = 2080;
            *(void *)&v69[10] = v53;
            int v70 = 2080;
            int v71 = v54;
            int v72 = 2080;
            uint64_t v73 = v55;
            int v74 = 1024;
            int v75 = v56;
            int v76 = 2050;
            uint64_t v77 = v58;
            LODWORD(v60) = 54;
            int v59 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v52,  2LL,  "#locctl,#rec,recordMessage,CLWifiService_Type,success,%d,message_type,%s,from,%s,to,%s,notif ication_type,%d,propagation_us,%{public}.3f",  v69,  v60);
            if (v62 < 0) {
              operator delete(v61[0]);
            }
            if (v65 < 0) {
              operator delete(__p[0]);
            }
            if (v67 < 0) {
              operator delete(v66[0]);
            }
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)",  "%s\n",  v59);
          }
        }

        sub_100EDE8A8(v78);
        break;
    }
  }

  else
  {
    if (qword_101934830 != -1) {
      dispatch_once(&qword_101934830, &stru_101834AA8);
    }
    uint64_t v20 = (os_log_s *)qword_101934838;
    if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_DEBUG))
    {
      sub_100FE4F50((int *)a2, &buf);
      uint64_t v21 = SBYTE3(v86) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)int v78 = 136315138;
      *(void *)&v78[4] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "#locctl,#rec,recordMessage,CLWifiService_Type,unsupported message type,%s",  v78,  0xCu);
      if (SBYTE3(v86) < 0) {
        operator delete(buf);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101834AA8);
      }
      uint64_t v22 = qword_101934838;
      sub_100FE4F50((int *)a2, v78);
      if (v79 >= 0) {
        char v23 = v78;
      }
      else {
        char v23 = *(uint8_t **)v78;
      }
      *(_DWORD *)uint64_t v69 = 136315138;
      *(void *)&v69[4] = v23;
      int v19 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  v22,  2LL,  "#locctl,#rec,recordMessage,CLWifiService_Type,unsupported message type,%s",  v69);
      if (v79 < 0) {
        operator delete(*(void **)v78);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)",  "%s\n",  v19);
    }
  }

  uint64_t v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[14];
  if (v29 >= 0x80)
  {
    char v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2) + 1;
    unsigned int v3 = a1[20];
  }

  else
  {
    char v30 = 2;
  }

  uint64_t v4 = (v30 + v4);
  if ((v3 & 0x2000) == 0)
  {
LABEL_54:
    if ((v3 & 0x4000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_82;
  }

  int v35 = *(_DWORD *)(a2 + 112);
  a1[37] |= 0x4000000u;
  a1[28] = v35;
  int v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_76;
  }

  a1[15] = v4;
  return v4;
}

  unsigned int v149 = sub_100700B84((uint64_t)v10, (unsigned __int8 *)a2);
  uint64_t v41 = v149;
  if (v5 == v149)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    int v56 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v166.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_FAULT, "Fence: crirital error!", (uint8_t *)&v166, 2u);
    }

    if (!sub_1002921D0(115, 0)) {
      return;
    }
    bzero(&v166, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v146) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v166,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Fence: crirital error!",  &__p,  v146);
    int v55 = (std::string *)v57;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMon itorLogic::FenceMonitoringStatus &)",  "%s\n",  v57);
LABEL_262:
    if (v55 == &v166) {
      return;
    }
    goto LABEL_263;
  }

  if (*(_BYTE *)(a1 + 612))
  {
    if ((*(_BYTE *)(a2 + 160) & 0x80) != 0)
    {
      sub_100A04958(a1, a2);
      uint64_t v41 = v149;
    }

    int v148 = (const void **)(v41 + 32);
    *(_OWORD *)(v41 + 304) = xmmword_101343570;
    if (*(_BYTE *)(v41 + 284))
    {
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101866E28);
      }
      uint64_t v42 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
      {
        else {
          int v43 = *(void *)(v41 + 40);
        }
        sub_1000392EC((uint64_t)&v166, v43 + 1);
        if ((v166.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v44 = &v166;
        }
        else {
          int v44 = (std::string *)v166.__r_.__value_.__r.__words[0];
        }
        if (v43)
        {
          else {
            uint64_t v45 = *(const void **)(v149 + 32);
          }
          memmove(v44, v45, v43);
        }

        *(_WORD *)((char *)&v44->__r_.__value_.__l.__data_ + v43) = 47;
        v46 = *(char *)(v149 + 79);
        if (v46 >= 0) {
          int v47 = (const std::string::value_type *)(v149 + 56);
        }
        else {
          int v47 = *(const std::string::value_type **)(v149 + 56);
        }
        if (v46 >= 0) {
          int v48 = *(unsigned __int8 *)(v149 + 79);
        }
        else {
          int v48 = *(void *)(v149 + 64);
        }
        uint64_t v49 = std::string::append(&v166, v47, v48);
        unsigned int v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__l.__cap_ = v49->__r_.__value_.__l.__cap_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0LL;
        v49->__r_.__value_.__l.__cap_ = 0LL;
        v49->__r_.__value_.__r.__words[0] = 0LL;
        int v51 = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v51 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(v166.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)size->__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "Fence: fence is already monitored, %{private}s",  (uint8_t *)&v166,  0xCu);
      }

      if (!sub_1002921D0(115, 2)) {
        return;
      }
      bzero(&v166, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101866E28);
      }
      int v52 = qword_101934878;
      sub_10065EF44(v148, &__p);
      uint64_t v53 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &__p
          : (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
      LODWORD(v146) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v166,  1628LL,  &_mh_execute_header,  v52,  2LL,  "Fence: fence is already monitored, %{private}s",  &buf,  v146);
      int v55 = v54;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceM onitorLogic::FenceMonitoringStatus &)",  "%s\n",  (const char *)v55);
      if (v55 == &v166) {
        return;
      }
LABEL_263:
      free(v55);
      return;
    }

    *(_BYTE *)(v41 + 284) = 1;
    sub_1009F3418(a1, a2, *(_DWORD *)(a1 + 608));
    sub_100B5A334((int64x2_t *)(a1 + 1312), (uint64_t)v148);
    uint64_t v61 = (int *)(v149 + 280);
    v62 = *(void *)(a1 + 1824);
    if (v62)
    {
      *uint64_t v61 = sub_1003D5EA4(v62, a2);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101866E28);
      }
      int v63 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
      {
        int v64 = *v61;
        LODWORD(v166.__r_.__value_.__l.__data_) = 67174657;
        HIDWORD(v166.__r_.__value_.__r.__words[0]) = v64;
        _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEBUG,  "Fence: state, retrieved %{private}d",  (uint8_t *)&v166,  8u);
      }

      uint64_t v65 = sub_1002921D0(115, 2);
      int v66 = v149;
      if (!v65)
      {
LABEL_150:
        *(_DWORD *)(v66 + 348) = 0;
        if ((*(_BYTE *)(v66 + 192) & 0x10) != 0) {
          int v71 = 30.0;
        }
        else {
          int v71 = 300.0;
        }
        if (*(void *)(a1 + 256) >= 2uLL
          && (int v72 = (double *)(a1 + 308), *(double *)(a1 + 308) >= 0.0)
          && vabdd_f64(a4, *(double *)(a1 + 364)) <= v71)
        {
          sub_100869764(a1 + 288);
          int v103 = vabdd_f64(a4, *(double *)(a1 + 364));
          int v104 = *v72;
          if (*v72 >= 0.0 && v103 <= v71)
          {
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101866E28);
            }
            uint64_t v105 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
            {
              sub_100832C64(a1 + 288, &v166);
              int v106 = (v166.__r_.__value_.__s.__size_ & 0x80u) == 0
                   ? &v166
                   : (std::string *)v166.__r_.__value_.__r.__words[0];
              LODWORD(__p.__r_.__value_.__l.__data_) = 136380675;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v106;
              _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEBUG,  "Fence: filtered fLastLocation, %{private}s",  (uint8_t *)&__p,  0xCu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(&v166, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101866E28);
              }
              uint64_t v142 = qword_101934878;
              sub_100832C64(a1 + 288, &__p);
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                v143 = &__p;
              }
              else {
                v143 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v143;
              LODWORD(v146) = 12;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &v166,  1628LL,  &_mh_execute_header,  v142,  2LL,  "Fence: filtered fLastLocation, %{private}s",  &buf,  v146);
              int v145 = v144;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)",  "%s\n",  (const char *)v145);
              if (v145 != &v166) {
                free(v145);
              }
            }

            sub_100A04B20(a1, v148, a1 + 288, v61, 0, a4);
            sub_100869DC8(&v166);
            sub_1009F9AE8(a1, (_OWORD *)(a1 + 288), (uint64_t)&v166, (uint64_t)v148, (uint64_t)v61, a4, 0LL, 1);
            sub_10000AE14((uint64_t)&v177);
            int v104 = *v72;
          }

          if (v104 >= 0.0 && !sub_100840F14(a1 + 288) && v103 <= v71) {
            goto LABEL_163;
          }
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          int v107 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
          {
            sub_100832C64(a1 + 288, &v166);
            int v108 = (v166.__r_.__value_.__s.__size_ & 0x80u) == 0
                 ? &v166
                 : (std::string *)v166.__r_.__value_.__r.__words[0];
            LODWORD(__p.__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v108;
            _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEBUG,  "Fence: request scan, current location, %{private}s",  (uint8_t *)&__p,  0xCu);
          }

          if (!sub_1002921D0(115, 2)) {
            goto LABEL_161;
          }
          bzero(&v166, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          int v139 = qword_101934878;
          sub_100832C64(a1 + 288, &__p);
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            int v140 = &__p;
          }
          else {
            int v140 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v140;
          LODWORD(v146) = 12;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v166,  1628LL,  &_mh_execute_header,  v139,  2LL,  "Fence: request scan, current location, %{private}s",  &buf,  v146);
          uint64_t v129 = v141;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFe nceMonitorLogic::FenceMonitoringStatus &)",  "%s\n",  (const char *)v129);
          if (v129 == &v166)
          {
LABEL_161:
            sub_1009F696C(a1, a4);
            if ((*(_BYTE *)(v149 + 192) & 0x10) != 0) {
              (*(void (**)(void))(**(void **)(a1 + 1768) + 336LL))(*(void *)(a1 + 1768));
            }
LABEL_163:
            sub_1009F3E60(a1, a4);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101866E28);
            }
            int v74 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
            {
              sub_100923668((uint64_t)v148, &v166);
              int v75 = (char)v166.__r_.__value_.__s.__size_;
              int v76 = v166.__r_.__value_.__r.__words[0];
              sub_10083FA1C((uint64_t)v61, &__p);
              uint64_t v77 = &v166;
              if (v75 < 0) {
                uint64_t v77 = (std::string *)v76;
              }
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                int v78 = &__p;
              }
              else {
                int v78 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v78;
              _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "Started monitoring, %{private}s, monitoringStatus, %{private}s",  (uint8_t *)&buf,  0x16u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(&v166, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101866E28);
              }
              uint64_t v117 = qword_101934878;
              sub_100923668((uint64_t)v148, &__p);
              v118 = (char)__p.__r_.__value_.__s.__size_;
              int v119 = __p.__r_.__value_.__r.__words[0];
              sub_10083FA1C((uint64_t)v61, &buf);
              int v120 = &__p;
              if (v118 < 0) {
                int v120 = (std::stringbuf::string_type *)v119;
              }
              if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                uint64_t v121 = &buf;
              }
              else {
                uint64_t v121 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
              }
              v162 = 136380931;
              v163 = v120;
              int v164 = 2081;
              int v165 = v121;
              LODWORD(v146) = 22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &v166,  1628LL,  &_mh_execute_header,  v117,  2LL,  "Started monitoring, %{private}s, monitoringStatus, %{private}s",  &v162,  v146);
              int v123 = v122;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)",  "%s\n",  (const char *)v123);
              if (v123 != &v166) {
                free(v123);
              }
            }

            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_101866E28);
            }
            int v79 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
            {
              int v80 = (const void *)(v41 + 32);
              uint64_t v81 = (void *)(v149 + 56);
              if (*(void *)(v149 + 264) == *(void *)(v149 + 256))
              {
                v82 = *(void *)(v149 + 104);
                int v83 = *(void *)(v149 + 112);
              }

              else
              {
                v82 = 0xBFF0000000000000LL;
                int v83 = 0xBFF0000000000000LL;
              }

              int v84 = sub_1009232CC((uint64_t)v148);
              uint64_t v85 = *(_DWORD *)(v149 + 288);
              unsigned int v86 = *(void *)(a1 + 256);
              int v87 = *(unsigned __int8 *)(a1 + 613);
              LODWORD(v166.__r_.__value_.__l.__data_) = 136448003;
              *(std::string::size_type *)((char *)v166.__r_.__value_.__r.__words + 4) = (std::string::size_type)v80;
              WORD2(v166.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v166.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v81;
              HIWORD(v166.__r_.__value_.__r.__words[2]) = 2049;
              unsigned int v167 = v82;
              *(_WORD *)int v168 = 2049;
              *(void *)&v168[2] = v83;
              int v169 = 2050;
              v170 = v84;
              v171 = 1025;
              v172 = v85;
              int v173 = 2050;
              int v174 = v86;
              int v175 = 1026;
              unsigned int v176 = v87;
              _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "Fence:Start Started monitoring fence %{public}s/%{private}s (<%{private}+.8f,%{private}+.8f>, radius %{p ublic}.3f, active tech %{private}d), numFences, %{public}zu, unlocked, %{public}d",  (uint8_t *)&v166,  0x4Au);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(&v166, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_101866E28);
              }
              int v124 = v148;
              uint64_t v125 = (void *)(v149 + 56);
              if (*(void *)(v149 + 264) == *(void *)(v149 + 256))
              {
                v126 = *(void *)(v149 + 104);
                int v127 = *(void *)(v149 + 112);
              }

              else
              {
                v126 = 0xBFF0000000000000LL;
                int v127 = 0xBFF0000000000000LL;
              }

              int v132 = qword_101934878;
              int v133 = sub_1009232CC((uint64_t)v148);
              uint64_t v134 = *(_DWORD *)(v149 + 288);
              v135 = *(void *)(a1 + 256);
              int v136 = *(unsigned __int8 *)(a1 + 613);
              LODWORD(__p.__r_.__value_.__l.__data_) = 136448003;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v124;
              WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v125;
              HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
              int v151 = v126;
              *(_WORD *)v152 = 2049;
              *(void *)&v152[2] = v127;
              v153 = 2050;
              v154 = v133;
              int v155 = 1025;
              int v156 = v134;
              int v157 = 2050;
              unsigned int v158 = v135;
              int v159 = 1026;
              int v160 = v136;
              LODWORD(v146) = 74;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &v166,  1628LL,  &_mh_execute_header,  v132,  0LL,  "Fence:Start Started monitoring fence %{public}s/%{private}s (<%{private}+.8f,%{private}+.8f>, radius %{p ublic}.3f, active tech %{private}d), numFences, %{public}zu, unlocked, %{public}d",  &__p,  v146);
              uint64_t v138 = (std::string *)v137;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)",  "%s\n",  v137);
              if (v138 != &v166) {
                free(v138);
              }
            }

            int v88 = *(void *)(v149 + 264) - *(void *)(v149 + 256);
            if (v88)
            {
              int v147 = v88 >> 4;
              if ((int)(v88 >> 4) >= -8)
              {
                uint64_t v89 = 0;
                v90 = ((int)v147 - 1) / 10;
                int v91 = (std::string::size_type *)(v149 + 56);
                int v92 = -1;
                uint64_t v93 = v88 >> 4;
                do
                {
                  if (v89 >= v90) {
                    int v94 = v93;
                  }
                  else {
                    int v94 = 10;
                  }
                  if (qword_101934870 != -1) {
                    dispatch_once(&qword_101934870, &stru_101866E28);
                  }
                  ++v89;
                  int v95 = (os_log_s *)qword_101934878;
                  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
                  {
                    int v96 = v149 + 56;
                    sub_100923D38((uint64_t)v148, v92 + 1, v94 + v92, &__p);
                    uint64_t v97 = &__p;
                    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                      uint64_t v97 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
                    }
                    LODWORD(v166.__r_.__value_.__l.__data_) = 136447235;
                    *(std::string::size_type *)((char *)v166.__r_.__value_.__r.__words + 4) = v96;
                    WORD2(v166.__r_.__value_.__r.__words[1]) = 1026;
                    *(_DWORD *)((char *)&v166.__r_.__value_.__r.__words[1] + 6) = v147;
                    WORD1(v166.__r_.__value_.__r.__words[2]) = 1026;
                    HIDWORD(v166.__r_.__value_.__r.__words[2]) = v89;
                    LOWORD(v167) = 1024;
                    *(_DWORD *)((char *)&v167 + 2) = v90 + 1;
                    HIWORD(v167) = 2081;
                    *(void *)int v168 = v97;
                    _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "Fence:Poly, %{public}s, %{public}d, %{public}d, %{publice}d, %{private}s",  (uint8_t *)&v166,  0x28u);
                  }

                  if (sub_1002921D0(115, 2))
                  {
                    bzero(&v166, 0x65CuLL);
                    if (qword_101934870 != -1) {
                      dispatch_once(&qword_101934870, &stru_101866E28);
                    }
                    v98 = qword_101934878;
                    int v99 = v149 + 56;
                    sub_100923D38((uint64_t)v148, v92 + 1, v94 + v92, &buf);
                    int v100 = &buf;
                    if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                      int v100 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
                    }
                    LODWORD(__p.__r_.__value_.__l.__data_) = 136447235;
                    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v99;
                    WORD2(__p.__r_.__value_.__r.__words[1]) = 1026;
                    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v147;
                    WORD1(__p.__r_.__value_.__r.__words[2]) = 1026;
                    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v89;
                    LOWORD(v151) = 1024;
                    *(_DWORD *)((char *)&v151 + 2) = v90 + 1;
                    HIWORD(v151) = 2081;
                    *(void *)v152 = v100;
                    LODWORD(v146) = 40;
                    _os_log_send_and_compose_impl( 2LL,  0LL,  &v166,  1628LL,  &_mh_execute_header,  v98,  0LL,  "Fence:Poly, %{public}s, %{public}d, %{public}d, %{publice}d, %{private}s",  &__p,  v146);
                    int v102 = v101;
                    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)",  "%s\n",  (const char *)v102);
                    if (v102 != &v166) {
                      free(v102);
                    }
                  }

                  v92 += 10;
                  v93 -= 10;
                }

                while ((v90 & ~(v90 >> 31)) + 1 != v89);
              }
            }

            return;
          }
        }

        else
        {
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          uint64_t v73 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(v166.__r_.__value_.__l.__data_) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEBUG,  "Fence: request scan, no current location",  (uint8_t *)&v166,  2u);
          }

          if (!sub_1002921D0(115, 2)) {
            goto LABEL_161;
          }
          bzero(&v166, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_101866E28);
          }
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          LODWORD(v146) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v166,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: request scan, no current location",  &__p,  v146);
          uint64_t v129 = (std::string *)v128;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFe nceMonitorLogic::FenceMonitoringStatus &)",  "%s\n",  v128);
          if (v129 == &v166) {
            goto LABEL_161;
          }
        }

        free(v129);
        goto LABEL_161;
      }

      bzero(&v166, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101866E28);
      }
      int v67 = *v61;
      LODWORD(__p.__r_.__value_.__l.__data_) = 67174657;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v67;
      LODWORD(v146) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v166,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: state, retrieved %{private}d",  &__p,  v146);
      uint64_t v69 = (std::string *)v68;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceM onitorLogic::FenceMonitoringStatus &)",  "%s\n",  v68);
      if (v69 != &v166) {
        free(v69);
      }
    }

    else
    {
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_101866E28);
      }
      int v70 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v166.__r_.__value_.__l.__data_) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "#Warning Fence: state startMonitoringNow, before first unlock",  (uint8_t *)&v166,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(&v166, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_101866E28);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v146) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v166,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "#Warning Fence: state startMonitoringNow, before first unlock",  &__p,  v146);
        int v131 = (std::string *)v130;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenc eMonitorLogic::FenceMonitoringStatus &)",  "%s\n",  v130);
        if (v131 != &v166) {
          free(v131);
        }
      }

      *uint64_t v61 = -1;
    }

    int v66 = v149;
    goto LABEL_150;
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  int v58 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    int v59 = (void *)(v149 + 32);
    int v60 = (void *)(v149 + 56);
    LODWORD(v166.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v166.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
    WORD2(v166.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v166.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v60;
    _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "Fence: Location services is disabled; not starting monitoring for %{private}s/%{private}s",
      (uint8_t *)&v166,
      0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v166, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    int v114 = (void *)(v149 + 32);
    int v115 = (void *)(v149 + 56);
    LODWORD(__p.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v114;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v115;
    LODWORD(v146) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v166,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Location services is disabled; not starting monitoring for %{private}s/%{private}s",
      &__p,
      v146);
    int v55 = (std::string *)v116;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFenceMonitor::startMonitoringNow(const CFAbsoluteTime, const CLFenceManager_Type::Fence &, const CLFenceMon itorLogic::FenceMonitoringStatus &)",  "%s\n",  v116);
    goto LABEL_262;
  }

  a1[13] = v4;
  return v4;
}

  char v13 = *(_BYTE *)(a2 + 154);
  v3 |= 0x800000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 154) = v13;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_40:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_76;
  }

  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 148));
  int v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800000000LL) != 0) {
    goto LABEL_75;
  }
LABEL_37:
  if ((v5 & 0x1000000000LL) != 0) {
LABEL_38:
  }
    PB::TextFormatter::format(this, "withinHardThresholds", *(_BYTE *)(a1 + 155));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0x24u);
  if ((*(void *)(v3 + 156) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 32), 0x25u);
  }
  return result;
}

  char v32 = *(void *)(a2 + 120);
  v5 |= 0x4000uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 120) = v32;
  uint64_t v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_76;
  }

  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfNaiveBayesClassifier", *(void *)(a1 + 216));
  int v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_76;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0x45u);
  int v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_76;
  }

  PB::TextFormatter::format(this, "lastCoreMotionWristState", *(void *)(a1 + 256));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x20) == 0)
  {
LABEL_26:
    if ((v15 & 0x40) == 0) {
      goto LABEL_27;
    }
    goto LABEL_76;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 320), 0x1Cu);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }

  uint64_t result = *(float *)(a2 + 100);
  v3 |= 0x100000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 100) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x80000) == 0)
  {
LABEL_28:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_76;
  }

  PB::TextFormatter::format(this, "minInertialZ", *(float *)(a1 + 112));
  int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_76;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0x18u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_76;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0x22u);
  if ((*(_DWORD *)(v3 + 212) & 0x800000) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 188), 0x23u);
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 72);
  v3 |= 0x1000uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 72) = result;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x4000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_76;
  }

  PB::TextFormatter::format(this, "kSaturationMetRO", *(_BYTE *)(a1 + 166));
  int v5 = *(void *)(a1 + 172);
  if ((v5 & 0x20000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_76;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x72u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x20000000000LL) == 0)
  {
LABEL_29:
    if ((v4 & 0x4000000000LL) == 0) {
      goto LABEL_30;
    }
    goto LABEL_76;
  }

              *(void *)(a1 + 16) = v24;
              goto LABEL_85;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 1u;
              char v27 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              int v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5LL || v27 + 10 > v2)
              {
                int v43 = 0;
                int v44 = 0;
                unsigned int v31 = 0LL;
                if (v2 <= v27) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    unsigned int v31 = 0LL;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }

                  uint64_t v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  uint64_t v14 = v44++ > 8;
                  if (v14)
                  {
                    unsigned int v31 = 0LL;
LABEL_78:
                    uint64_t v2 = v45 + 1;
                    goto LABEL_79;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  unsigned int v31 = 0LL;
                }
                goto LABEL_78;
              }

              uint64_t v29 = 0;
              char v30 = 0;
              unsigned int v31 = 0LL;
              do
              {
                uint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_79;
                }
                v29 += 7;
                char v27 = v2;
                uint64_t v14 = v30++ > 8;
              }

              while (!v14);
              unsigned int v31 = 0LL;
LABEL_79:
              *(void *)(a1 + 8) = v31;
              goto LABEL_85;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              uint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
                uint64_t v2 = *((void *)this + 1) + 4LL;
                *((void *)this + 1) = v2;
              }

              else
              {
                *((_BYTE *)this + 24) = 1;
              }

              goto LABEL_85;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 8u;
              uint64_t v33 = *((void *)this + 1);
              uint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
              {
                int v47 = 0;
                int v48 = 0;
                uint64_t v37 = 0LL;
                if (v2 <= v33) {
                  uint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }

                  uint64_t v49 = v33++;
                  unsigned int v50 = *(_BYTE *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  uint64_t v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_83:
                    uint64_t v2 = v49 + 1;
                    goto LABEL_84;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_83;
              }

              int v35 = 0;
              int v36 = 0;
              uint64_t v37 = 0LL;
              do
              {
                uint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                uint64_t v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_84;
                }
                v35 += 7;
                uint64_t v33 = v2;
                uint64_t v14 = v36++ > 8;
              }

              while (!v14);
              LODWORD(v37) = 0;
LABEL_84:
              *(_DWORD *)(a1 + 28) = v37;
LABEL_85:
              unsigned int v3 = *((void *)this + 2);
              uint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              uint64_t v2 = *((void *)this + 1);
              goto LABEL_85;
          }
        }

        uint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x400) == 0) {
      goto LABEL_40;
    }
    goto LABEL_76;
  }

  PB::TextFormatter::format(this, "userMets", *(float *)(a1 + 140));
  int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_76;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0x23u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_37:
    if ((v4 & 0x100) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }

  int v35 = *(_DWORD *)(a2 + 204);
  v3 |= 0x2000000000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 204) = v35;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x1000000000LL) == 0)
  {
LABEL_37:
    if ((v2 & 0x400000000LL) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }

  PB::TextFormatter::format(this, "rolloverSaturationAtMaxEnergy", *(float *)(a1 + 188));
  int v5 = *(void *)(a1 + 212);
  if ((v5 & 0x100) == 0)
  {
LABEL_34:
    if ((v5 & 0x200) == 0) {
      goto LABEL_35;
    }
    goto LABEL_76;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 200), 0x21u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400000000LL) == 0)
  {
LABEL_35:
    if ((v4 & 0x4000000000LL) == 0) {
      goto LABEL_36;
    }
    goto LABEL_76;
  }

  int v59 = *(_DWORD *)(a2 + 224);
  v6 |= 0x20000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_DWORD *)(a1 + 224) = v59;
  int v39 = *(_DWORD *)(a2 + 244);
  if ((v39 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v39 & 0x1000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_76;
  }

  PB::TextFormatter::format(this, "steadinessScore", *(double *)(a1 + 192));
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x800000) == 0)
  {
LABEL_47:
    if ((v19 & 0x1000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_76;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 200), 0x1Fu);
  uint64_t v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x40) == 0)
  {
LABEL_45:
    if ((v16 & 2) == 0) {
      goto LABEL_46;
    }
    goto LABEL_76;
  }

  uint64_t v24 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 36) = v24;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x400000000LL) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_76;
  }

  PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 108));
  int v5 = *(void *)(a1 + 184);
  if ((v5 & 0x800000) == 0)
  {
LABEL_29:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_76;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x20000000000LL) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_76;
  }

  uint64_t v41 = *(_DWORD *)(a2 + 140);
  *(void *)(a1 + 192) |= 0x2000000uLL;
  *(_DWORD *)(a1 + 140) = v41;
  char v13 = *(void *)(a2 + 192);
  if ((v13 & 0x1000000000LL) == 0)
  {
LABEL_38:
    if ((v13 & 0x20) == 0) {
      goto LABEL_39;
    }
    goto LABEL_76;
  }

  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean2", *(float *)(a1 + 172));
  int v5 = *(void *)(a1 + 192);
  if ((v5 & 0x400000000LL) == 0)
  {
LABEL_33:
    if ((v5 & 0x800000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 152), 0x21u);
  int v6 = *(void *)(v3 + 192);
  if ((v6 & 0x2000000000LL) == 0)
  {
LABEL_37:
    if ((v6 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }

  uint64_t v25 = *(_DWORD *)(a2 + 148);
  v3 |= 0x400000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 148) = v25;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000LL) == 0) {
      goto LABEL_28;
    }
    goto LABEL_76;
  }

  PB::TextFormatter::format(this, "inBodyTurn", *(_BYTE *)(a1 + 182));
  int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x200000000000LL) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000000000LL) == 0) {
      goto LABEL_25;
    }
    goto LABEL_76;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0x17u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000000000LL) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_76;
  }

LABEL_75:
  *(_DWORD *)(a1 + 128) |= 0x1000u;
  int v28 = *(void **)(a1 + 96);
  if (!v28)
  {
    int v28 = operator new(0x30uLL);
    v28[4] = 14LL;
    *int v28 = off_10181B170;
    v28[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v28[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    v28[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
    *((_DWORD *)v28 + 10) = 0;
    *(void *)(a1 + 96) = v28;
  }

  uint64_t v29 = *(void *)(a2 + 96);
  if (!v29) {
    uint64_t v29 = *(void *)(qword_1019A0980 + 96);
  }
  sub_100073D14((uint64_t)v28, v29);
  int v6 = *(_DWORD *)(a2 + 128);
  if ((v6 & 0x2000) != 0) {
    goto LABEL_80;
  }
LABEL_57:
  if ((v6 & 0x4000) == 0) {
    return;
  }
LABEL_81:
  unsigned int v31 = *(_DWORD *)(a2 + 120);
  if (v31 >= 4 && v31 != 15) {
    sub_1012265F0();
  }
  *(_DWORD *)(a1 + 128) |= 0x4000u;
  *(_DWORD *)(a1 + 120) = v31;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  (int)a2,  *(double *)(v5 + 72),  a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_77;
  }

    if (v31 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    goto LABEL_77;
  }

  if (((v5 ^ 1 | HIDWORD(v152)) & 1) == 0) {
    goto LABEL_72;
  }
LABEL_77:
  uint64_t v34 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int v200 = 67240192;
    *(_DWORD *)&v200[4] = HIDWORD(v152);
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "@WifiLogic, decision, scanreq, didStart, %{public}d",  v200,  8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(v200, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101839340);
    }
    *(_DWORD *)__p = 67240192;
    *(_DWORD *)&__p[4] = HIDWORD(v152);
    LODWORD(v152) = 8;
    v126 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  v200,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "@WifiLogic, decision, scanreq, didStart, %{public}d",  __p,  v152);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)",  "%s\n",  v126);
    if (v126 != v200) {
      free(v126);
    }
  }

  int v36 = *(_DWORD *)(a2 + 116);
  a1[37] |= 0x8000000u;
  a1[29] = v36;
  int v5 = *(_DWORD *)(a2 + 148);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_77;
  }

  uint64_t v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if ((v25 & 0x80000000) != 0)
  {
    uint64_t v26 = 10;
  }

  else if (v25 >= 0x80)
  {
    uint64_t v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2);
    unsigned int v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    uint64_t v26 = 1;
  }

  uint64_t v4 = (v4 + v26 + 1);
  if ((v3 & 0x800) == 0)
  {
LABEL_62:
    if ((v3 & 0x1000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_87;
  }

  *(_DWORD *)(a1 + 184) |= 0x800u;
  char v27 = *(void **)(a1 + 88);
  if (!v27)
  {
    char v27 = operator new(0x20uLL);
    *char v27 = &off_101871A50;
    v27[1] = 0LL;
    v27[2] = 0LL;
    v27[3] = 0LL;
    *(void *)(a1 + 88) = v27;
  }

  int v28 = *(void *)(a2 + 88);
  if (!v28) {
    int v28 = *(void *)(qword_1019A1CE8 + 88);
  }
  sub_100B28F8C((uint64_t)v27, v28);
  int v5 = *(_DWORD *)(a2 + 184);
  if ((v5 & 0x1000) == 0)
  {
LABEL_56:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_85;
  }

  int v28 = *(_DWORD *)(a2 + 96);
  if (!sub_100501188(v28)) {
    sub_101264E20();
  }
  *(_DWORD *)(a1 + 224) |= 0x1000u;
  *(_DWORD *)(a1 + 96) = v28;
  int v5 = *(_DWORD *)(a2 + 224);
  if ((v5 & 0x2000) != 0) {
    goto LABEL_77;
  }
LABEL_52:
  if ((v5 & 0x4000) == 0) {
    goto LABEL_53;
  }
LABEL_79:
  *(_DWORD *)(a1 + 224) |= 0x4000u;
  char v30 = *(_BYTE **)(a1 + 104);
  if (!v30)
  {
    char v30 = operator new(0x18uLL);
    *(void *)char v30 = off_101876518;
    v30[8] = 0;
    *((_DWORD *)v30 + 3) = 0;
    *((_DWORD *)v30 + 4) = 0;
    *(void *)(a1 + 104) = v30;
  }

  unsigned int v31 = *(void *)(a2 + 104);
  if (!v31) {
    unsigned int v31 = *(void *)(qword_1019A1D48 + 104);
  }
  sub_100BBE32C((uint64_t)v30, v31);
  int v5 = *(_DWORD *)(a2 + 224);
  if ((v5 & 0x8000) != 0)
  {
LABEL_84:
    *(_DWORD *)(a1 + 224) |= 0x8000u;
    char v32 = *(void **)(a1 + 112);
    if (!v32)
    {
      char v32 = operator new(0x20uLL);
      v32[1] = 0LL;
      v32[2] = 0LL;
      void *v32 = off_101876590;
      *((_DWORD *)v32 + 6) = 0;
      *(void *)(a1 + 112) = v32;
    }

    uint64_t v33 = *(void *)(a2 + 112);
    if (!v33) {
      uint64_t v33 = *(void *)(qword_1019A1D48 + 112);
    }
    sub_100BBE3CC(v32, v33);
    int v5 = *(_DWORD *)(a2 + 224);
  }

        if (SHIBYTE(v67) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v69) < 0) {
          operator delete(__dst[0]);
        }
        uint64_t v8 = (uint64_t *)*v8;
        if (!v8) {
          return v64;
        }
      }

      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_101876C38);
      }
      uint64_t v24 = (os_log_s *)qword_101934898;
      if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = __dst;
        if (v69 < 0) {
          uint64_t v25 = (void **)__dst[0];
        }
        *(_DWORD *)buf = 136380675;
        int v84 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "#CLEU,createWrappedKeyArray,unable to convert cert data to SecCertificateRef for partner %{private}s",  buf,  0xCu);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_75;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_101876C38);
      }
      uint64_t v26 = __dst;
      if (v69 < 0) {
        uint64_t v26 = (void **)__dst[0];
      }
      uint64_t v73 = 136380675;
      int v74 = v26;
      LODWORD(v63) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#CLEU,createWrappedKeyArray,unable to convert cert data to SecCertificateRef for partner %{private}s",  &v73,  v63);
      int v28 = (uint8_t *)v27;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSArray *CLEmergencyUtilities::createWrappedKeyArray(const PartnerCertMap &, uint64_t, NSData *, NSData *)",  "%s\n",  v27);
LABEL_69:
      if (v28 != buf) {
        free(v28);
      }
      goto LABEL_75;
    }

    return v64;
  }

  else
  {
    if (qword_101934890 != -1) {
      dispatch_once(&qword_101934890, &stru_101876C38);
    }
    int v59 = (os_log_s *)qword_101934898;
    if (os_log_type_enabled((os_log_t)qword_101934898, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "#CLEU,createWrappedKeyArray,hash of encrypted ADR data or key is nil so not computing wrapped keys",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934890 != -1) {
        dispatch_once(&qword_101934890, &stru_101876C38);
      }
      LOWORD(v73) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934898,  16LL,  "#CLEU,createWrappedKeyArray,hash of encrypted ADR data or key is nil so not computing wrapped keys",  &v73,  2);
      v62 = (uint8_t *)v61;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "NSArray *CLEmergencyUtilities::createWrappedKeyArray(const PartnerCertMap &, uint64_t, NSData *, NSData *)",  "%s\n",  v61);
      if (v62 != buf) {
        free(v62);
      }
    }

    return 0LL;
  }

  (*(void (**)(void *))(*(void *)v16 + 24LL))(v16);
  return v25;
}

    int v43 = (os_log_s *)v9[269];
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      int v44 = (*(uint64_t (**)(void))(**(void **)(a1 + 448) + 16LL))(*(void *)(a1 + 448));
      uint64_t v45 = (*(uint64_t (**)(void))(**(void **)(a1 + 448) + 48LL))(*(void *)(a1 + 448));
      v46 = *(unsigned __int8 *)(a1 + 217);
      int v47 = *(unsigned __int8 *)(a1 + 216);
      int v48 = *(unsigned __int8 *)(a1 + 420);
      uint64_t v49 = *(_DWORD *)(a1 + 408);
      unsigned int v50 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)buf = 67241984;
      *(_DWORD *)&buf[4] = v44;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v45;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v46;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&buf[22] = v47;
      *(_WORD *)&buf[26] = 1026;
      *(_DWORD *)&buf[28] = v48;
      *(_WORD *)&buf[32] = 1026;
      *(_DWORD *)&buf[34] = v49;
      int v133 = 1026;
      uint64_t v134 = v50;
      v135 = 1026;
      int v136 = (int)v6;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "WIFITILE: checkDownloadSchedule, skip, wifion, %{public}d, ls, %{public}d, indexed, %{public}d, protection, %{pu blic}d, lockdisable, %{public}d, reach, %{public}d, companion, %{public}d, broadband, %{public}d",  buf,  0x32u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      uint64_t v97 = v9[269];
      v98 = (*(uint64_t (**)(void))(**(void **)(a1 + 448) + 16LL))(*(void *)(a1 + 448));
      int v99 = (*(uint64_t (**)(void))(**(void **)(a1 + 448) + 48LL))(*(void *)(a1 + 448));
      int v100 = *(unsigned __int8 *)(a1 + 217);
      uint64_t v101 = *(unsigned __int8 *)(a1 + 216);
      int v102 = *(unsigned __int8 *)(a1 + 420);
      int v103 = *(_DWORD *)(a1 + 408);
      int v104 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)int v127 = 67241984;
      *(_DWORD *)&v127[4] = v98;
      *(_WORD *)&v127[8] = 1026;
      *(_DWORD *)&v127[10] = v99;
      *(_WORD *)&v127[14] = 1026;
      *(_DWORD *)&v127[16] = v100;
      *(_WORD *)&v127[20] = 1026;
      *(_DWORD *)&v127[22] = v101;
      *(_WORD *)&v127[26] = 1026;
      *(_DWORD *)&v127[28] = v102;
      *(_WORD *)&v127[32] = 1026;
      *(_DWORD *)&v127[34] = v103;
      int v128 = 1026;
      uint64_t v129 = v104;
      int v130 = 1026;
      int v131 = (int)v6;
      LODWORD(v118) = 50;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v97,  0LL,  "WIFITILE: checkDownloadSchedule, skip, wifion, %{public}d, ls, %{public}d, indexed, %{public}d, protection, %{pu blic}d, lockdisable, %{public}d, reach, %{public}d, companion, %{public}d, broadband, %{public}d",  v127,  v118);
      int v36 = (char *)v105;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v105);
      goto LABEL_193;
    }

    return;
  }

  if (!*(_BYTE *)(a1 + 217))
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101884578);
    }
    uint64_t v21 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "WIFITILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101884578);
      }
      char v23 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)int v127 = 67240192;
      *(_DWORD *)&v127[4] = v23;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WIFITILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %{public}d",  v127,  8);
      uint64_t v17 = (char *)v24;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v24);
      goto LABEL_213;
    }

    goto LABEL_75;
  }

  if (!*(_DWORD *)(a1 + 408) && !*(_BYTE *)(a1 + 412))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101884538);
    }
    int v40 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v41 = *(_DWORD *)(a1 + 408);
      uint64_t v42 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v41;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "WIFITILE: checkDownloadSchedule, no data connectivity, avoiding downloads, reachability, %{public}d, companion, %{public}d",  buf,  0xEu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101884538);
      }
      int v114 = *(_DWORD *)(a1 + 408);
      int v115 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)int v127 = 67240448;
      *(_DWORD *)&v127[4] = v114;
      *(_WORD *)&v127[8] = 1026;
      *(_DWORD *)&v127[10] = v115;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WIFITILE: checkDownloadSchedule, no data connectivity, avoiding downloads, reachability, %{public}d, companion, %{public}d",  v127,  14);
      uint64_t v17 = (char *)v116;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v116);
      goto LABEL_213;
    }

    goto LABEL_75;
  }

  if (v7 == 1) {
    char v11 = (char)v6;
  }
  else {
    char v11 = 1;
  }
  if ((v11 & 1) == 0 && !*(_BYTE *)(a1 + 412))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101884538);
    }
    uint64_t v38 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "WIFITILE: checkDownloadSchedule, no download on none broadband cellular connections",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101884538);
      }
      *(_WORD *)int v127 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WIFITILE: checkDownloadSchedule, no download on none broadband cellular connections",  v127,  2);
      uint64_t v17 = (char *)v39;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v39);
      goto LABEL_213;
    }

    goto LABEL_75;
  }

  int v120 = sub_100DF72C0(a1, v10);
  if (v120 >= 2)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101884538);
    }
    uint64_t v12 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v120;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "WIFITILE: checkDownloadSchedule, numOfActiveDownloads, %{public}d, not scheduling more",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101884538);
      }
      *(_DWORD *)int v127 = 67240192;
      *(_DWORD *)&v127[4] = v120;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WIFITILE: checkDownloadSchedule, numOfActiveDownloads, %{public}d, not scheduling more",  v127,  8);
      uint64_t v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v13);
LABEL_218:
      if (v14 != buf) {
        free(v14);
      }
      goto LABEL_50;
    }

    goto LABEL_50;
  }

  if (*(_BYTE *)(a1 + 192) && *(_BYTE *)(a1 + 160))
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101884538);
    }
    uint64_t v25 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "WIFITILE: checkDownloadSchedule, both download requests are already in use",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101884538);
      }
      *(_WORD *)int v127 = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WIFITILE: checkDownloadSchedule, both download requests are already in use",  v127,  2);
      uint64_t v14 = (char *)v117;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)",  "%s\n",  v117);
      goto LABEL_218;
    }

  int v64 = &v61;
  sub_10031CC30((void ***)&v64);
  return v24;
}

                                      v62 = (sqlite3_stmt *)sub_100019240(v14);
                                      int v63 = (sqlite3_stmt *)sub_100019240(v14);
                                      int v64 = (sqlite3_stmt *)sub_100019240(v14);
                                      uint64_t v65 = (sqlite3_stmt *)sub_100019240(v14);
                                      if (sub_1003C2AF0(v65, 4, *(_DWORD *)(v106 + 48))
                                        && (int v66 = (sqlite3_stmt *)sub_100019240(v14),
                                            sub_1003C28BC(v66, 5, *(unsigned __int8 *)(v106 + 52)))
                                        && (int v67 = (sqlite3_stmt *)sub_100019240(v14),
                                            sub_1003C28BC(v67, 6, *(_DWORD *)(v106 + 56)))
                                        && (int v68 = (sqlite3_stmt *)sub_100019240(v14),
                                            sub_1003C2F58(v68, 7, *(void **)(v106 + 64)))
                                        && (uint64_t v69 = (sqlite3_stmt *)sub_100019240(v14), sub_1003BC1F0(v69, 8, out))
                                        && (int v70 = *(void *)(a1 + 80),
                                            int v71 = (sqlite3_stmt *)sub_100019240(v14),
                                            sub_1003BB2BC(v70, v71)))
                                      {
                                        if (sub_1003C10E4(*(void *)(a1 + 80)) > 0) {
                                          goto LABEL_85;
                                        }
                                        int v75 = (sqlite3_stmt *)sub_100019240(v13);
                                        if (sub_1003B7480(v75, 1, *(double *)(v106 + 8)))
                                        {
                                          int v76 = (sqlite3_stmt *)sub_100019240(v13);
                                          if (sub_1003BC1F0(v76, 2, out))
                                          {
                                            uint64_t v77 = (sqlite3_stmt *)sub_100019240(v13);
                                            if (sub_1003B7480(v77, 3, *(double *)(v106 + 32)))
                                            {
                                              int v78 = (sqlite3_stmt *)sub_100019240(v13);
                                              if (sub_1003B7480(v78, 4, *(double *)(v106 + 40)))
                                              {
                                                int v79 = (sqlite3_stmt *)sub_100019240(v13);
                                                if (sub_1003C2AF0(v79, 5, *(_DWORD *)(v106 + 48)))
                                                {
                                                  int v80 = (sqlite3_stmt *)sub_100019240(v13);
                                                  if (sub_1003C28BC(v80, 6, *(unsigned __int8 *)(v106 + 52)))
                                                  {
                                                    uint64_t v81 = (sqlite3_stmt *)sub_100019240(v13);
                                                    if (sub_1003C28BC(v81, 7, *(_DWORD *)(v106 + 56)))
                                                    {
                                                      v82 = (sqlite3_stmt *)sub_100019240(v13);
                                                      if (sub_1003C2F58(v82, 8, *(void **)(v106 + 64)))
                                                      {
                                                        int v83 = (sqlite3_stmt *)sub_100019240(v13);
                                                        if (sub_1003C2F58(v83, 9, *(void **)(v106 + 72)))
                                                        {
                                                          int v84 = *(void *)(a1 + 80);
                                                          uint64_t v85 = (sqlite3_stmt *)sub_100019240(v13);
                                                          if (sub_1003BB2BC(v84, v85))
                                                          {
LABEL_85:
                                                            sub_1003C05BC(*(void *)(a1 + 80));
                                                            int v39 = 1LL;
                                                            if (v14) {
                                                              goto LABEL_36;
                                                            }
                                                            goto LABEL_37;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }

                                        if (qword_1019346E0 != -1) {
                                          dispatch_once(&qword_1019346E0, &stru_101892FD8);
                                        }
                                        unsigned int v86 = (os_log_s *)qword_1019346E8;
                                        if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_FAULT))
                                        {
                                          *(_WORD *)buf = 0;
                                          _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_FAULT,  "Unable to insert synced VO2MaxSessionAttributes record",  buf,  2u);
                                        }

                                        if (sub_1002921D0(115, 0))
                                        {
                                          bzero(buf, 0x65CuLL);
                                          if (qword_1019346E0 != -1) {
                                            dispatch_once(&qword_1019346E0, &stru_101892FD8);
                                          }
                                          v108[0] = 0;
                                          int v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  17LL,  "Unable to insert synced VO2MaxSessionAttributes record",  v108,  2);
                                          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLVO2MaxSessionAttributesRecorderDb::saveFetchedSession(unsigned char * , const VO2MaxSessionAttributes, const std::vector<VO2MaxSummary> &, const V O2MaxOutput &) const",  "%s\n",  v43);
                                          goto LABEL_110;
                                        }
                                      }

                                      else
                                      {
LABEL_95:
                                        if (qword_1019346E0 != -1) {
                                          dispatch_once(&qword_1019346E0, &stru_101892FD8);
                                        }
                                        uint64_t v73 = (os_log_s *)qword_1019346E8;
                                        if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_FAULT))
                                        {
                                          *(_WORD *)buf = 0;
                                          _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_FAULT,  "Unable to update synced VO2MaxSessionAttributes record",  buf,  2u);
                                        }

                                        if (sub_1002921D0(115, 0))
                                        {
                                          bzero(buf, 0x65CuLL);
                                          if (qword_1019346E0 != -1) {
                                            dispatch_once(&qword_1019346E0, &stru_101892FD8);
                                          }
                                          v108[0] = 0;
                                          int v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  17LL,  "Unable to update synced VO2MaxSessionAttributes record",  v108,  2);
                                          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLVO2MaxSessionAttributesRecorderDb::saveFetchedSession(unsigned char * , const VO2MaxSessionAttributes, const std::vector<VO2MaxSummary> &, const V O2MaxOutput &) const",  "%s\n",  v43);
                                          goto LABEL_110;
                                        }
                                      }

                                      goto LABEL_35;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101892FD8);
    }
    int v72 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_FAULT,  "Unable to update synced VO2MaxHistory record",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_101892FD8);
      }
      v108[0] = 0;
      int v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  17LL,  "Unable to update synced VO2MaxHistory record",  v108,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLVO2MaxSessionAttributesRecorderDb::saveFetchedSession(unsigned char *, const VO2MaxSessionAttributes, con st std::vector<VO2MaxSummary> &, const VO2MaxOutput &) const",  "%s\n",  v43);
      goto LABEL_110;
    }
  }

  else
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_101892FD8);
    }
    int v40 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_FAULT,  "Unable to delete out-of-date VO2MaxSummaryHistory records",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_101892FD8);
      }
      v108[0] = 0;
      int v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  17LL,  "Unable to delete out-of-date VO2MaxSummaryHistory records",  v108,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLVO2MaxSessionAttributesRecorderDb::saveFetchedSession(unsigned char *, const VO2MaxSessionAttributes, con st std::vector<VO2MaxSummary> &, const VO2MaxOutput &) const",  "%s\n",  v43);
LABEL_110:
    }
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  if ((*(void *)(a2 + 156) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_76:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 156) = v3 | 8;
  *(_DWORD *)(a1 + 32) = v4;
  return *(float *)&v4;
}

  uint64_t v33 = *(void *)(a2 + 16);
  v5 |= 2uLL;
  unsigned int *v2 = v5;
  *(void *)(a1 + 16) = v33;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_77;
  }

  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfOtherHardThresholds", *(void *)(a1 + 224));
  int v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_77;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 128), 0x46u);
  int v5 = *v4;
  if ((*v4 & 0x800000000LL) == 0)
  {
LABEL_31:
    if ((v5 & 0x400000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_77;
  }

  PB::TextFormatter::format(this, "lastCoreMotionWristStateDuration", *(double *)(a1 + 264));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x40) == 0)
  {
LABEL_27:
    if ((v15 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_77;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 312), 0x1Du);
  uint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_77;
  }

  uint64_t result = *(float *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 96) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_77;
  }

  PB::TextFormatter::format(this, "minInertialZHighFreq", *(float *)(a1 + 116));
  int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_77;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 0x19u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_77;
  }

  char v11 = *(void *)(a2 + 56);
  v5 |= 0x40uLL;
  unsigned int *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(void *)(a1 + 56) = v11;
  unsigned int v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 1) == 0)
  {
LABEL_10:
    if ((v7 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_77;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 5u);
  int v6 = *v4;
  int v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 1) == 0)
  {
LABEL_10:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_77;
  }

  uint64_t result = *(float *)(a2 + 80);
  v3 |= 0x4000uLL;
  *(void *)(a1 + 172) = v3;
  *(float *)(a1 + 80) = result;
  uint64_t v2 = *(void *)(a2 + 172);
  if ((v2 & 0x20000000000LL) == 0)
  {
LABEL_32:
    if ((v2 & 0x4000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_77;
  }

  PB::TextFormatter::format(this, "kThresholdChaosRO", *(float *)(a1 + 92));
  int v5 = *(void *)(a1 + 172);
  if ((v5 & 0x40000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_77;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 164), 0x73u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x4000000000LL) == 0)
  {
LABEL_30:
    if ((v4 & 0x80000000000LL) == 0) {
      goto LABEL_31;
    }
    goto LABEL_77;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000uLL;
  *(void *)(a1 + 164) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_40:
    if ((v2 & 0x100) == 0) {
      goto LABEL_41;
    }
    goto LABEL_77;
  }

  PB::TextFormatter::format(this, "vectorMag", *(float *)(a1 + 144));
  int v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100000000LL) == 0)
  {
LABEL_37:
    if ((v5 & 0x200000000LL) == 0) {
      goto LABEL_38;
    }
LABEL_77:
    PB::TextFormatter::format(this, "verticalSpeed", *(float *)(a1 + 152));
    if ((*(void *)(a1 + 164) & 0x400000000LL) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_39;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0x24u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_38:
    if ((v4 & 0x100000000LL) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 148), 0x26u);
  }

        *(_DWORD *)(a1 + 8) = v25;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v3 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    char v11 = 0LL;
    if (v3 > v2) {
      uint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      uint64_t v17 = v3 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v3);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unsigned int v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        char v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

        *(void *)(a1 + 8) = v25;
      }

      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v3 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
      }

      uint64_t v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24)) {
        return v4 == 0;
      }
    }

    int v15 = 0;
    uint64_t v16 = 0;
    char v11 = 0LL;
    if (v3 > v2) {
      uint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      uint64_t v17 = v3 + 1;
      uint64_t v18 = *(_BYTE *)(v8 + v3);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unsigned int v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        char v11 = 0LL;
        goto LABEL_20;
      }
    }

    uint64_t v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

  int v36 = *(_DWORD *)(a2 + 200);
  v3 |= 0x1000000000uLL;
  *(void *)(result + 212) = v3;
  *(_DWORD *)(result + 200) = v36;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x400000000LL) == 0)
  {
LABEL_38:
    if ((v2 & 0x4000000000LL) == 0) {
      goto LABEL_39;
    }
    goto LABEL_77;
  }

  PB::TextFormatter::format(this, "rolloverTimestampAtMaxChaos", *(void *)(a1 + 72));
  int v5 = *(void *)(a1 + 212);
  if ((v5 & 0x200) == 0)
  {
LABEL_35:
    if ((v5 & 0x400) == 0) {
      goto LABEL_36;
    }
    goto LABEL_77;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 192), 0x22u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000000000LL) == 0)
  {
LABEL_36:
    if ((v4 & 0x8000000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_77;
  }

  int v60 = *(_BYTE *)(a2 + 240);
  v6 |= 0x1000000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_BYTE *)(a1 + 240) = v60;
  int v39 = *(_DWORD *)(a2 + 244);
  if ((v39 & 0x1000) == 0)
  {
LABEL_47:
    if ((v39 & 0x40) == 0) {
      goto LABEL_48;
    }
    goto LABEL_77;
  }

  PB::TextFormatter::format(this, "steadinessScoreIsValid", *(_BYTE *)(a1 + 239));
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x1000) == 0)
  {
LABEL_48:
    if ((v19 & 0x20000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_77;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 0x20u);
  uint64_t v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 2) == 0)
  {
LABEL_46:
    if ((v16 & 0x10) == 0) {
      goto LABEL_47;
    }
    goto LABEL_77;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 156);
  v3 |= 0x400000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 156) = v4;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 0x20000000000LL) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_77;
  }

  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 112));
  int v5 = *(void *)(a1 + 184);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_77;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 178), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x800000000LL) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_77;
  }

  uint64_t v42 = *(_DWORD *)(a2 + 184);
  *(void *)(a1 + 192) |= 0x1000000000uLL;
  *(_DWORD *)(a1 + 184) = v42;
  char v13 = *(void *)(a2 + 192);
  if ((v13 & 0x20) == 0)
  {
LABEL_39:
    if ((v13 & 0x10000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_77;
  }

  PB::TextFormatter::format(this, "vehicleType", *(_DWORD *)(a1 + 176));
  if ((*(void *)(a1 + 192) & 0x800000000LL) != 0) {
LABEL_34:
  }
    PB::TextFormatter::format(this, "vehicularConfidence", *(_DWORD *)(a1 + 180));
LABEL_35:
  int v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))( v6,  this,  "vehicularFlags");
  }
  unsigned int v7 = *(void *)(a1 + 192);
  if ((v7 & 8) != 0)
  {
    PB::TextFormatter::format(this, "wallStartTime", *(double *)(a1 + 40));
    unsigned int v7 = *(void *)(a1 + 192);
    if ((v7 & 0x10) == 0)
    {
LABEL_39:
      if ((v7 & 0x1000000000LL) == 0) {
        goto LABEL_40;
      }
      goto LABEL_79;
    }
  }

  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_39;
  }

  PB::TextFormatter::format(this, "workoutDetectionTime", *(void *)(a1 + 48));
  unsigned int v7 = *(void *)(a1 + 192);
  if ((v7 & 0x1000000000LL) == 0)
  {
LABEL_40:
    if ((v7 & 0x20) == 0) {
      goto LABEL_41;
    }
LABEL_80:
    PB::TextFormatter::format(this, "workoutEscalationTime", *(void *)(a1 + 56));
    if ((*(void *)(a1 + 192) & 0x2000000000LL) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_42;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 188), 0x22u);
  int v6 = *(void *)(v3 + 192);
  if ((v6 & 0x40) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_77;
  }

  uint64_t v26 = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 68) = v26;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x2000000000LL) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_77;
  }

  PB::TextFormatter::format(this, "inComplexTransitionState", *(_BYTE *)(a1 + 183));
  int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400000000000LL) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_77;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160), 0x18u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_77;
  }

void sub_1000865B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000865D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BD28;
  sub_10008660C(a1);
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2) {
    operator delete[](v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void *sub_10008660C(void *result)
{
  if ((void *)qword_1019A0980 != result)
  {
    int v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t v3 = v1[3];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t v4 = v1[4];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v5 = v1[5];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    uint64_t v6 = v1[6];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    uint64_t v7 = v1[7];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    uint64_t v8 = v1[8];
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
    uint64_t v9 = v1[10];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    uint64_t v10 = v1[11];
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
    uint64_t result = (void *)v1[12];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_10008670C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

double sub_100086720()
{
  v0 = (char *)operator new(0x88uLL);
  *(void *)v0 = off_10181BD28;
  *((void *)v0 + 14) = 0LL;
  *((void *)v0 + 15) = 0LL;
  *((_DWORD *)v0 + 18) = 1;
  *((_WORD *)v0 + 38) = 0;
  *((_DWORD *)v0 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *((void *)v0 + 12) = 0LL;
  *((void *)v0 + 13) = 0LL;
  *((void *)v0 + 10) = 0LL;
  *((void *)v0 + 11) = 0LL;
  return result;
}

uint64_t sub_100086774(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 128);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 72) = 1;
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      double result = *(void *)(result + 16);
      if (result)
      {
        double result = sub_1000718B0(result);
        int v2 = *(_DWORD *)(v1 + 128);
      }
    }

    if ((v2 & 8) != 0)
    {
      double result = *(void *)(v1 + 24);
      if (result)
      {
        double result = sub_100072CA8(result);
        int v2 = *(_DWORD *)(v1 + 128);
      }
    }

    if ((v2 & 0x10) != 0)
    {
      double result = *(void *)(v1 + 32);
      if (result)
      {
        double result = sub_100073540(result);
        int v2 = *(_DWORD *)(v1 + 128);
      }
    }

    if ((v2 & 0x20) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 40);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 16)) {
          *(_DWORD *)(v3 + 8) = 5;
        }
        *(_DWORD *)(v3 + 16) = 0;
        int v2 = *(_DWORD *)(v1 + 128);
      }
    }

    if ((v2 & 0x40) != 0)
    {
      uint64_t v4 = *(void *)(v1 + 48);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 16)) {
          *(_DWORD *)(v4 + 8) = 7;
        }
        *(_DWORD *)(v4 + 16) = 0;
        int v2 = *(_DWORD *)(v1 + 128);
      }
    }

    if ((v2 & 0x80) != 0)
    {
      double result = *(void *)(v1 + 56);
      if (result)
      {
        double result = sub_1000751C0(result);
        int v2 = *(_DWORD *)(v1 + 128);
      }
    }
  }

  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      double result = *(void *)(v1 + 64);
      if (result)
      {
        double result = sub_100076914(result);
        int v2 = *(_DWORD *)(v1 + 128);
      }
    }

    if ((v2 & 0x200) != 0)
    {
      double result = *(void *)(v1 + 80);
      if (result)
      {
        double result = sub_1000780C8(result);
        int v2 = *(_DWORD *)(v1 + 128);
      }
    }

    if ((v2 & 0x400) != 0)
    {
      double result = *(void *)(v1 + 88);
      if (result)
      {
        double result = sub_10007225C(result);
        int v2 = *(_DWORD *)(v1 + 128);
      }
    }

    *(_BYTE *)(v1 + 76) = 0;
    if ((v2 & 0x1000) != 0)
    {
      double result = *(void *)(v1 + 96);
      if (result) {
        double result = sub_100074024(result);
      }
    }

    *(_BYTE *)(v1 + 77) = 0;
    *(_DWORD *)(v1 + 120) = 0;
  }

  *(_DWORD *)(v1 + 112) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  return result;
}

uint64_t sub_1000868A8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = a1 + 104;
  while (2)
  {
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v125);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v125[0];
        }

        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v10 - 31 < 0x19 || (v10 <= 0xE ? (BOOL v21 = ((1 << v10) & 0x76B6) == 0) : (BOOL v21 = 1), !v21))
        {
          if (v10 - 31 >= 0x19 && (v10 > 0xE || ((1 << v10) & 0x76B6) == 0)) {
            sub_101228344();
          }
          *(_DWORD *)(a1 + 128) |= 1u;
          *(_DWORD *)(a1 + 72) = v10;
        }

        uint64_t v22 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v22 < *((void *)this + 2) && *v22 == 17)
        {
          *((void *)this + 1) = v22 + 1;
          goto LABEL_63;
        }

        continue;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_44;
        }
LABEL_63:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v125) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v125;
        int v13 = *(_DWORD *)(a1 + 128) | 2;
        *(_DWORD *)(a1 + 128) = v13;
        char v23 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v23 + 1;
LABEL_67:
        *(_DWORD *)(a1 + 128) = v13 | 4;
        uint64_t v24 = *(void **)(a1 + 16);
        if (!v24)
        {
          uint64_t v24 = operator new(0x30uLL);
          *uint64_t v24 = off_10181AF18;
          v24[1] = 0x100000001LL;
          v24[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v24[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v24[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v24[5] = 0LL;
          *(void *)(a1 + 16) = v24;
        }

        uint64_t v25 = (char *)*((void *)this + 1);
        if ((unint64_t)v25 >= *((void *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v125)) {
            return 0LL;
          }
        }

        else
        {
          v125[0] = *v25;
          *((void *)this + 1) = v25 + 1;
        }

        int v26 = *((_DWORD *)this + 14);
        int v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27) {
          return 0LL;
        }
        int v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v125[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        int v30 = *((_DWORD *)this + 14);
        BOOL v31 = __OFSUB__(v30, 1);
        int v32 = v30 - 1;
        if (v32 < 0 == v31) {
          *((_DWORD *)this + 14) = v32;
        }
        uint64_t v33 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v33 + 1;
LABEL_81:
        *(_DWORD *)(a1 + 128) |= 8u;
        uint64_t v34 = *(void **)(a1 + 24);
        if (!v34)
        {
          uint64_t v34 = operator new(0x30uLL);
          v34[4] = 2LL;
          void *v34 = off_10181B008;
          v34[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v34[2] = 0LL;
          v34[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v34 + 10) = 0;
          *(void *)(a1 + 24) = v34;
        }

        int v35 = (char *)*((void *)this + 1);
        if ((unint64_t)v35 >= *((void *)this + 2) || *v35 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v125)) {
            return 0LL;
          }
        }

        else
        {
          v125[0] = *v35;
          *((void *)this + 1) = v35 + 1;
        }

        int v36 = *((_DWORD *)this + 14);
        int v37 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v36 + 1;
        if (v36 >= v37) {
          return 0LL;
        }
        int v38 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v125[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v38);
        int v40 = *((_DWORD *)this + 14);
        BOOL v31 = __OFSUB__(v40, 1);
        int v41 = v40 - 1;
        if (v41 < 0 == v31) {
          *((_DWORD *)this + 14) = v41;
        }
        uint64_t v42 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v42 + 1;
LABEL_95:
        *(_DWORD *)(a1 + 128) |= 0x10u;
        int v43 = *(void **)(a1 + 32);
        if (!v43)
        {
          int v43 = operator new(0x20uLL);
          v43[2] = 4LL;
          *int v43 = off_10181B080;
          v43[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v43 + 6) = 0;
          *(void *)(a1 + 32) = v43;
        }

        int v44 = (char *)*((void *)this + 1);
        if ((unint64_t)v44 >= *((void *)this + 2) || *v44 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v125)) {
            return 0LL;
          }
        }

        else
        {
          v125[0] = *v44;
          *((void *)this + 1) = v44 + 1;
        }

        int v45 = *((_DWORD *)this + 14);
        int v46 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v45 + 1;
        if (v45 >= v46) {
          return 0LL;
        }
        int v47 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v125[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v47);
        int v49 = *((_DWORD *)this + 14);
        BOOL v31 = __OFSUB__(v49, 1);
        int v50 = v49 - 1;
        if (v50 < 0 == v31) {
          *((_DWORD *)this + 14) = v50;
        }
        int v51 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v51 + 1;
LABEL_109:
        *(_DWORD *)(a1 + 128) |= 0x20u;
        int v52 = *(void **)(a1 + 40);
        if (!v52)
        {
          int v52 = operator new(0x18uLL);
          void *v52 = off_10181B0F8;
          v52[1] = 5LL;
          *((_DWORD *)v52 + 4) = 0;
          *(void *)(a1 + 40) = v52;
        }

        uint64_t v53 = (char *)*((void *)this + 1);
        if ((unint64_t)v53 >= *((void *)this + 2) || *v53 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v125)) {
            return 0LL;
          }
        }

        else
        {
          v125[0] = *v53;
          *((void *)this + 1) = v53 + 1;
        }

        int v54 = *((_DWORD *)this + 14);
        int v55 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v54 + 1;
        if (v54 >= v55) {
          return 0LL;
        }
        int v56 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v125[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v56);
        int v58 = *((_DWORD *)this + 14);
        BOOL v31 = __OFSUB__(v58, 1);
        int v59 = v58 - 1;
        if (v59 < 0 == v31) {
          *((_DWORD *)this + 14) = v59;
        }
        int v60 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v60 + 1;
LABEL_123:
        *(_DWORD *)(a1 + 128) |= 0x40u;
        uint64_t v61 = *(void **)(a1 + 48);
        if (!v61)
        {
          uint64_t v61 = operator new(0x18uLL);
          *uint64_t v61 = off_10181B1E8;
          v61[1] = 7LL;
          *((_DWORD *)v61 + 4) = 0;
          *(void *)(a1 + 48) = v61;
        }

        v62 = (char *)*((void *)this + 1);
        if ((unint64_t)v62 >= *((void *)this + 2) || *v62 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v125)) {
            return 0LL;
          }
        }

        else
        {
          v125[0] = *v62;
          *((void *)this + 1) = v62 + 1;
        }

        int v63 = *((_DWORD *)this + 14);
        int v64 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v63 + 1;
        if (v63 >= v64) {
          return 0LL;
        }
        int v65 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v125[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v65);
        int v67 = *((_DWORD *)this + 14);
        BOOL v31 = __OFSUB__(v67, 1);
        int v68 = v67 - 1;
        if (v68 < 0 == v31) {
          *((_DWORD *)this + 14) = v68;
        }
        uint64_t v69 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v69 + 1;
LABEL_137:
        *(_DWORD *)(a1 + 128) |= 0x80u;
        int v70 = *(_DWORD **)(a1 + 56);
        if (!v70)
        {
          int v70 = operator new(0x78uLL);
          v70[16] = 9;
          *(void *)int v70 = off_10181B260;
          *((void *)v70 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v70 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v70 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v70 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v70 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v70 + 6) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v70 + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v70 + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v70 + 10) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_WORD *)v70 + 34) = 0;
          *((void *)v70 + 11) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v70 + 12) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v70 + 13) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v70 + 14) = 0LL;
          *(void *)(a1 + 56) = v70;
        }

        int v71 = (char *)*((void *)this + 1);
        if ((unint64_t)v71 >= *((void *)this + 2) || *v71 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v125)) {
            return 0LL;
          }
        }

        else
        {
          v125[0] = *v71;
          *((void *)this + 1) = v71 + 1;
        }

        int v72 = *((_DWORD *)this + 14);
        int v73 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v72 + 1;
        if (v72 >= v73) {
          return 0LL;
        }
        int v74 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v125[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v74);
        int v76 = *((_DWORD *)this + 14);
        BOOL v31 = __OFSUB__(v76, 1);
        int v77 = v76 - 1;
        if (v77 < 0 == v31) {
          *((_DWORD *)this + 14) = v77;
        }
        int v78 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v78 + 1;
LABEL_151:
        *(_DWORD *)(a1 + 128) |= 0x100u;
        int v79 = *(_DWORD **)(a1 + 64);
        if (!v79)
        {
          int v79 = operator new(0x58uLL);
          v79[12] = 10;
          *(void *)int v79 = off_10181B2D8;
          *((void *)v79 + 1) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v79 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v79 + 3) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v79 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v79 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v79 + 7) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v79 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_WORD *)v79 + 26) = 0;
          *((void *)v79 + 9) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((void *)v79 + 10) = 0LL;
          *(void *)(a1 + 64) = v79;
        }

        int v80 = (char *)*((void *)this + 1);
        if ((unint64_t)v80 >= *((void *)this + 2) || *v80 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v125)) {
            return 0LL;
          }
        }

        else
        {
          v125[0] = *v80;
          *((void *)this + 1) = v80 + 1;
        }

        int v81 = *((_DWORD *)this + 14);
        int v82 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v81 + 1;
        if (v81 >= v82) {
          return 0LL;
        }
        int v83 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v125[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v83);
        int v85 = *((_DWORD *)this + 14);
        BOOL v31 = __OFSUB__(v85, 1);
        int v86 = v85 - 1;
        if (v86 < 0 == v31) {
          *((_DWORD *)this + 14) = v86;
        }
        int v87 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v87 + 1;
LABEL_165:
        *(_DWORD *)(a1 + 128) |= 0x200u;
        int v88 = *(void **)(a1 + 80);
        if (!v88)
        {
          int v88 = operator new(0x48uLL);
          v88[4] = 0LL;
          v88[5] = 0LL;
          *((_DWORD *)v88 + 12) = 0;
          *int v88 = off_10181B3C8;
          v88[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v88[2] = 12LL;
          v88[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v88[7] = 0LL;
          v88[8] = 0LL;
          *(void *)(a1 + 80) = v88;
        }

        uint64_t v89 = (char *)*((void *)this + 1);
        if ((unint64_t)v89 >= *((void *)this + 2) || *v89 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v125)) {
            return 0LL;
          }
        }

        else
        {
          v125[0] = *v89;
          *((void *)this + 1) = v89 + 1;
        }

        int v90 = *((_DWORD *)this + 14);
        int v91 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v90 + 1;
        if (v90 >= v91) {
          return 0LL;
        }
        int v92 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v125[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v92);
        int v94 = *((_DWORD *)this + 14);
        BOOL v31 = __OFSUB__(v94, 1);
        int v95 = v94 - 1;
        if (v95 < 0 == v31) {
          *((_DWORD *)this + 14) = v95;
        }
        int v96 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v96 + 1;
LABEL_179:
        *(_DWORD *)(a1 + 128) |= 0x400u;
        uint64_t v97 = *(void **)(a1 + 88);
        if (!v97)
        {
          uint64_t v97 = operator new(0x30uLL);
          *uint64_t v97 = off_10181AF90;
          v97[1] = 0x10000000DLL;
          v97[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v97[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v97[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v97[5] = 0LL;
          *(void *)(a1 + 88) = v97;
        }

        v98 = (char *)*((void *)this + 1);
        if ((unint64_t)v98 >= *((void *)this + 2) || *v98 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v125)) {
            return 0LL;
          }
        }

        else
        {
          v125[0] = *v98;
          *((void *)this + 1) = v98 + 1;
        }

        int v99 = *((_DWORD *)this + 14);
        int v100 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v99 + 1;
        if (v99 >= v100) {
          return 0LL;
        }
        int v101 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v125[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v101);
        int v103 = *((_DWORD *)this + 14);
        BOOL v31 = __OFSUB__(v103, 1);
        int v104 = v103 - 1;
        if (v104 < 0 == v31) {
          *((_DWORD *)this + 14) = v104;
        }
        uint64_t v105 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        int v15 = v105 + 2;
        *((void *)this + 1) = v15;
LABEL_194:
        if ((unint64_t)v15 >= v14 || (char)*v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v125);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v106 = v125[0];
          int v107 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v14 = *((void *)this + 2);
        }

        else
        {
          unsigned int v106 = *v15;
          int v107 = v15 + 1;
          *((void *)this + 1) = v107;
        }

        *(_BYTE *)(a1 + 76) = v106 != 0;
        int v16 = *(_DWORD *)(a1 + 128) | 0x800;
        *(_DWORD *)(a1 + 128) = v16;
        *((void *)this + 1) = v107 + 2;
LABEL_203:
        *(_DWORD *)(a1 + 128) = v16 | 0x1000;
        int v108 = *(void **)(a1 + 96);
        if (!v108)
        {
          int v108 = operator new(0x30uLL);
          v108[4] = 14LL;
          void *v108 = off_10181B170;
          v108[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v108[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          v108[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v108 + 10) = 0;
          *(void *)(a1 + 96) = v108;
        }

        uint64_t v109 = (char *)*((void *)this + 1);
        if ((unint64_t)v109 >= *((void *)this + 2) || *v109 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v125)) {
            return 0LL;
          }
        }

        else
        {
          v125[0] = *v109;
          *((void *)this + 1) = v109 + 1;
        }

        int v110 = *((_DWORD *)this + 14);
        int v111 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v110 + 1;
        if (v110 >= v111) {
          return 0LL;
        }
        int v112 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v125[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v112);
        int v114 = *((_DWORD *)this + 14);
        BOOL v31 = __OFSUB__(v114, 1);
        int v115 = v114 - 1;
        if (v115 < 0 == v31) {
          *((_DWORD *)this + 14) = v115;
        }
        int v116 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((int)v11 - (int)v116 > 1 && *v116 == 144 && v116[1] == 1)
        {
          uint64_t v12 = v116 + 2;
          *((void *)this + 1) = v12;
LABEL_218:
          if ((unint64_t)v12 >= v11 || (char)*v12 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v125);
            if (!(_DWORD)result) {
              return result;
            }
            unsigned int v117 = v125[0];
            v118 = (unsigned __int8 *)*((void *)this + 1);
            unint64_t v11 = *((void *)this + 2);
          }

          else
          {
            unsigned int v117 = *v12;
            v118 = v12 + 1;
            *((void *)this + 1) = v118;
          }

          *(_BYTE *)(a1 + 77) = v117 != 0;
          *(_DWORD *)(a1 + 128) |= 0x2000u;
          if ((int)v11 - (int)v118 >= 2 && *v118 == 152 && v118[1] == 1)
          {
            uint64_t v17 = (char *)(v118 + 2);
            *((void *)this + 1) = v17;
LABEL_227:
            if ((unint64_t)v17 >= v11 || *v17 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v125);
              if (!(_DWORD)result) {
                return result;
              }
              unsigned int v119 = v125[0];
            }

            else
            {
              unsigned int v119 = *v17;
              *((void *)this + 1) = v17 + 1;
            }

            if (v119 < 4 || v119 == 15)
            {
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              *(_DWORD *)(a1 + 120) = v119;
            }

            uint64_t v121 = (unsigned __int8 *)*((void *)this + 1);
            uint64_t v18 = (unsigned __int8 *)*((void *)this + 2);
          }
        }

        continue;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_44;
        }
        int v13 = *(_DWORD *)(a1 + 128);
        goto LABEL_67;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_81;
        }
        goto LABEL_44;
      case 6u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_95;
        }
        goto LABEL_44;
      case 7u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_109;
        }
        goto LABEL_44;
      case 9u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_123;
        }
        goto LABEL_44;
      case 0xBu:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_137;
        }
        goto LABEL_44;
      case 0xCu:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_151;
        }
        goto LABEL_44;
      case 0xEu:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_165;
        }
        goto LABEL_44;
      case 0xFu:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_179;
        }
        goto LABEL_44;
      case 0x10u:
        int v8 = TagFallback & 7;
        int v15 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_194;
      case 0x11u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_44;
        }
        int v16 = *(_DWORD *)(a1 + 128);
        goto LABEL_203;
      case 0x12u:
        int v8 = TagFallback & 7;
        uint64_t v12 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_218;
      case 0x13u:
        int v8 = TagFallback & 7;
        uint64_t v17 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_227;
      case 0x14u:
        int v8 = TagFallback & 7;
        if (v8 == 2)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline( this,  sub_100064148,  v5);
          if (!(_DWORD)result) {
            return result;
          }
          while (1)
          {
            uint64_t v121 = (unsigned __int8 *)*((void *)this + 1);
            uint64_t v18 = (unsigned __int8 *)*((void *)this + 2);
LABEL_241:
            int v19 = (char *)(v121 + 2);
            *((void *)this + 1) = v19;
LABEL_242:
            if (v19 >= (char *)v18 || *v19 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v125);
              if (!(_DWORD)result) {
                return result;
              }
              unsigned int v122 = v125[0];
            }

            else
            {
              unsigned int v122 = *v19;
              *((void *)this + 1) = v19 + 1;
            }

            if (v122 <= 7)
            {
              int v123 = *(_DWORD *)(a1 + 112);
              if (v123 == *(_DWORD *)(a1 + 116))
              {
                sub_10004AAFC(v5, v123 + 1);
                int v123 = *(_DWORD *)(a1 + 112);
              }

              uint64_t v124 = *(void *)(a1 + 104);
              *(_DWORD *)(a1 + 112) = v123 + 1;
              *(_DWORD *)(v124 + 4LL * v123) = v122;
            }
          }

          if (v121 == v18 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          continue;
        }

        if ((TagFallback & 7) == 0)
        {
          int v19 = (char *)*((void *)this + 1);
          uint64_t v18 = (unsigned __int8 *)*((void *)this + 2);
          goto LABEL_242;
        }

LABEL_44:
        if (v8 != 4)
        {
          continue;
        }

        return 1LL;
      default:
        int v8 = TagFallback & 7;
        goto LABEL_44;
    }
  }

  int v15 = *(void *)(v5 + 80);
  if (!v15) {
    int v15 = *(void *)(qword_1019A0980 + 80);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v15,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }

  uint64_t v18 = *(int *)(v71 + 64);
  if ((_DWORD)v18)
  {
    int v19 = *(uint64_t **)(v71 + 56);
    uint64_t v20 = &v19[v18];
    while (1)
    {
      BOOL v21 = *v19;
      uint64_t v22 = *(uint64_t ***)(*v19 + 8);
      char v23 = *((char *)v22 + 23);
      if (v23 < 0)
      {
        if (v22[1] != (uint64_t *)16)
        {
LABEL_70:
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181CB88);
          }
          BOOL v31 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "#Warning The protobuf cluster recording does not have a valid cluster label uuid",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_10181CB88);
            }
            LOWORD(v76[0]) = 0;
            LODWORD(v70) = 2;
            int v32 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning The protobuf cluster recording does not have a valid cluster label uuid",  v76,  v70);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "static CLMicroLocationModel CLMicroLocationModel::fromProtobuf(const CLMicroLocationProto::Model &, CLMicr oLocationFingerprintPool &)",  "%s\n",  v32);
          }

          goto LABEL_75;
        }

        uint64_t v22 = (uint64_t **)*v22;
      }

      else if (v23 != 16)
      {
        goto LABEL_70;
      }

      int v91 = *(_OWORD *)v22;
      uint64_t v24 = *(int *)(v21 + 24);
      if ((_DWORD)v24) {
        break;
      }
LABEL_75:
      if (++v19 == v20) {
        goto LABEL_81;
      }
    }

    uint64_t v25 = *(void *)(v21 + 16);
    int v26 = 8 * v24;
    while (1)
    {
      int v27 = *(void **)v25;
      int v28 = *(char *)(*(void *)v25 + 23LL);
      if (v28 < 0)
      {
        if (v27[1] != 16LL)
        {
LABEL_59:
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181CB88);
          }
          unsigned int v29 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "#Warning The protobuf cluster recording does not have a valid recording uuid",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_10181CB88);
            }
            LOWORD(v76[0]) = 0;
            LODWORD(v70) = 2;
            int v30 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning The protobuf cluster recording does not have a valid recording uuid",  v76,  v70);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "static CLMicroLocationModel CLMicroLocationModel::fromProtobuf(const CLMicroLocationProto::Model &, CLMicr oLocationFingerprintPool &)",  "%s\n",  v30);
          }

          goto LABEL_64;
        }

        int v27 = (void *)*v27;
      }

      else if (v28 != 16)
      {
        goto LABEL_59;
      }

      int v90 = *(_OWORD *)v27;
      sub_100096A04(a3, &v91, &v90);
LABEL_64:
      v25 += 8LL;
      v26 -= 8LL;
      if (!v26) {
        goto LABEL_75;
      }
    }
  }

  uint64_t result = *(double *)(a2 + 72);
  *(_DWORD *)(a1 + 160) |= 0x400u;
  *(double *)(a1 + 72) = result;
  uint64_t v6 = *(_DWORD *)(a2 + 160);
  if ((v6 & 0x800) == 0)
  {
LABEL_18:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 20),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 292);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15,  (int)a2,  *(double *)(v5 + 64),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 228);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  *(_DWORD *)(v5 + 120),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }

  *(_DWORD *)(a1 + 92) |= 0x4000u;
  uint64_t v18 = *(char **)(a1 + 80);
  if (!v18)
  {
    uint64_t v18 = (char *)operator new(0x28uLL);
    *(void *)uint64_t v18 = off_101827B80;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_OWORD *)(v18 + 24) = 0u;
    *(void *)(a1 + 80) = v18;
  }

  int v19 = *(void *)(a2 + 80);
  if (!v19) {
    int v19 = *(void *)(qword_1019A0BF8 + 80);
  }
  sub_1001D323C((uint64_t)v18, v19);
  if ((*(_DWORD *)(a2 + 92) & 0x8000) != 0)
  {
LABEL_49:
    uint64_t v20 = *(_DWORD *)(a2 + 76);
    if (v20 >= 6) {
      sub_10122FCAC();
    }
    *(_DWORD *)(a1 + 92) |= 0x8000u;
    *(_DWORD *)(a1 + 76) = v20;
  }

  uint64_t v20 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 60) |= 0x400u;
  *(_DWORD *)(a1 + 44) = v20;
  uint64_t v5 = *(_DWORD *)(a2 + 60);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      return;
    }
    goto LABEL_19;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(13LL, *(void *)(v5 + 88), a2);
  uint64_t v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }

          uint64_t v20 = 1;
LABEL_45:
          v4 += v18 + v20 + 1;
          uint64_t v3 = *(_DWORD *)(a1 + 56);
          goto LABEL_46;
        }

        uint64_t v18 = 2;
      }

      else
      {
        uint64_t v18 = 0;
      }

      *(_DWORD *)(v17 + 12) = v18;
      goto LABEL_44;
    }
  }

  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_25;
  }

  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v15 & 0x80000000) != 0)
  {
    int v16 = 11;
  }

  else if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 56);
  }

  else
  {
    int v16 = 2;
  }

  v4 += v16;
  if ((v3 & 0x20) != 0) {
    goto LABEL_37;
  }
LABEL_46:
  BOOL v21 = v4 + 5;
  if ((v3 & 0x40) == 0) {
    BOOL v21 = v4;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t result = v21 + 5;
  }
  else {
    uint64_t result = v21;
  }
LABEL_51:
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

  char v23 = *(_DWORD *)(a2 + 68);
  if (v23 >= 3) {
    sub_1012304CC();
  }
  *(_DWORD *)(a1 + 84) |= 0x2000u;
  *(_DWORD *)(a1 + 68) = v23;
  uint64_t v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x4000) == 0) {
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v7 = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 84) |= 0x4000u;
  *(_BYTE *)(a1 + 72) = v7;
  uint64_t v5 = *(_DWORD *)(a2 + 84);
LABEL_22:
  if ((v5 & 0x8000) != 0)
  {
    int v8 = *(_BYTE *)(a2 + 73);
    *(_DWORD *)(a1 + 84) |= 0x8000u;
    *(_BYTE *)(a1 + 73) = v8;
    uint64_t v5 = *(_DWORD *)(a2 + 84);
  }

  unint64_t v14 = vabdd_f64(*(double *)(a1 + 136), a2);
  if (v14 < 180.0) {
    int v15 = v7;
  }
  else {
    int v15 = 0;
  }
  *(_BYTE *)(a1 + 144) = v15;
  if (v14 <= 10.0) {
    *(void *)(a1 + 72) = *(void *)(a1 + 64);
  }
  if (!*(void *)(a1 + 152))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 32) + 32LL))(buf);
    int v16 = *(void *)buf;
    *(void *)buf = 0LL;
    uint64_t v17 = *(void *)(a1 + 152);
    *(void *)(a1 + 152) = v16;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 40LL))(v17);
      uint64_t v18 = *(void *)buf;
      *(void *)buf = 0LL;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 40LL))(v18);
      }
    }

    int v19 = *(void *)(a1 + 152);
    v31[0] = &off_10182B778;
    v31[1] = a1;
    int v32 = v31;
    (*(void (**)(uint64_t, void *))(*(void *)v19 + 8LL))(v19, v31);
    uint64_t v20 = v32;
    if (v32 == v31)
    {
      BOOL v21 = 4LL;
      uint64_t v20 = v31;
    }

    else
    {
      if (!v32) {
        goto LABEL_58;
      }
      BOOL v21 = 5LL;
    }

    (*(void (**)(void))(*v20 + 8 * v21))();
  }

  fclose(v11);
LABEL_45:
  int v26 = 0LL;
LABEL_46:
  if (SBYTE7(v73) < 0) {
    operator delete((void *)v72);
  }
  return v26;
}

    if ((char *)*v8 + 4096 == a6)
    {
      int v40 = (char *)v8[1];
      ++v8;
      a6 = v40;
    }
  }

    int v26 = 0;
    int v27 = 0;
    goto LABEL_51;
  }

  if ((v127.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v23 = v127.__r_.__value_.__s.__size_;
  }
  else {
    char v23 = v127.__r_.__value_.__l.__size_;
  }
  uint64_t v24 = v130.__r_.__value_.__s.__size_;
  if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v24 = v130.__r_.__value_.__l.__size_;
  }
  if (!v23)
  {
    int v27 = v24 != 0;
    int v26 = 1;
    goto LABEL_51;
  }

  if (v24) {
    goto LABEL_44;
  }
LABEL_45:
  int v26 = 0;
  int v28 = v127.__r_.__value_.__s.__size_;
  int v27 = 0;
  if ((v127.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    int v28 = v127.__r_.__value_.__l.__size_;
  }
  if (v28 && v128 >= 1) {
    goto LABEL_49;
  }
LABEL_51:
  unsigned int v29 = (const void *)WiFiNetworkGetProperty(a2, @"CHANNEL_FLAGS");
  if (!v29 || (sub_1002A94C8(v29, &v124) & 1) == 0) {
    uint64_t v124 = 0;
  }
  LODWORD(v121) = v27;
  if (v27)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    int v30 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      BOOL v31 = &v130;
      if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        BOOL v31 = (std::string *)v130.__r_.__value_.__r.__words[0];
      }
      int v32 = &v127;
      if ((v127.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v32 = (std::string *)v127.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136316930;
      *(void *)&buf[4] = v31;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v32;
      *(_WORD *)&buf[22] = 1024;
      v152 = v128;
      v153 = 1024;
      v154 = v129;
      int v155 = 1024;
      int v156 = v126;
      int v157 = 2048;
      unsigned int v158 = v125;
      int v159 = 1024;
      int v160 = v26;
      v161 = 1024;
      LODWORD(v162) = v124;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "WifiService, getAccessPoint, mac, %s, ssid, %s, channel, %d, mode, 0x%x, rssi, %d, age, %.1lf, isEPNONetwork, %d ， rssiFlags, %u",  buf,  0x3Eu);
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_115;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    uint64_t v33 = &v130;
    if ((v130.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v33 = (std::string *)v130.__r_.__value_.__r.__words[0];
    }
    uint64_t v34 = &v127;
    if ((v127.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v34 = (std::string *)v127.__r_.__value_.__r.__words[0];
    }
    int v131 = 136316930;
    int v132 = v33;
    int v133 = 2080;
    uint64_t v134 = v34;
    v135 = 1024;
    int v136 = v128;
    int v137 = 1024;
    uint64_t v138 = v129;
    int v139 = 1024;
    int v140 = v126;
    int v141 = 2048;
    uint64_t v142 = v125;
    v143 = 1024;
    unsigned int v144 = v26;
    int v145 = 1024;
    LODWORD(v146) = v124;
    LODWORD(v99) = 62;
    int v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "WifiService, getAccessPoint, mac, %s, ssid, %s, channel, %d, mode, 0x%x, rssi, %d, age, %.1lf, isEPN ONetwork, %d， rssiFlags, %u",  (const char *)&v131,  v99,  v100,  v103,  v108,  v111,  v120,  v27);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const",  "%s\n",  v35);
    if (v35 == buf) {
      goto LABEL_115;
    }
LABEL_182:
    free(v35);
    goto LABEL_115;
  }

  if (*(_DWORD *)(a3 + 40))
  {
    if (*(char *)(a3 + 31) < 0)
    {
      sub_1010DD48C(buf, *(void **)(a3 + 8), *(void *)(a3 + 16));
    }

    else
    {
      *(_OWORD *)buf = *(_OWORD *)v120;
      *(void *)&buf[16] = *(void *)(v120 + 16);
    }

    if (buf[23] >= 0) {
      int v36 = buf[23];
    }
    else {
      int v36 = *(void *)&buf[8];
    }
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (v36) {
        goto LABEL_81;
      }
    }

    else if (v36)
    {
LABEL_81:
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101833558);
      }
      int v37 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_ERROR))
      {
        int v112 = v26;
        int v116 = IsApplePersonalHotspot;
        if ((v130.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v38 = &v130;
        }
        else {
          int v38 = (std::string *)v130.__r_.__value_.__r.__words[0];
        }
        if ((v127.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unsigned int v39 = &v127;
        }
        else {
          unsigned int v39 = (std::string *)v127.__r_.__value_.__r.__words[0];
        }
        int v41 = v128;
        int v40 = v129;
        int v101 = v126;
        int v104 = v125;
        uint64_t v42 = WiFiNetworkGetProperty(a2, @"AP_MODE");
        int v43 = WiFiNetworkGetProperty(a2, @"CHANNEL");
        int v44 = WiFiNetworkGetProperty(a2, @"SSID_STR");
        *(_DWORD *)buf = 136382979;
        *(void *)&buf[4] = v38;
        *(_WORD *)&buf[12] = 2081;
        *(void *)&buf[14] = v39;
        *(_WORD *)&buf[22] = 1026;
        v152 = v41;
        v153 = 1026;
        v154 = v40;
        int v155 = 1026;
        int v156 = v101;
        int v157 = 2050;
        unsigned int v158 = v104;
        int v159 = 1026;
        int v26 = v112;
        int v160 = v112;
        v161 = 2050;
        v162 = v42;
        v163 = 2050;
        int v164 = v43;
        int v165 = 2049;
        int v166 = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "WifiService, getAccessPoint, invalid-network, mac, %{private}s, ssid, %{private}s, channel, %{public}d, mode, 0x%{public}x, rssi, %{public}d, age, %{public}.1lf, isEPNONetwork, %{public}d, m, %{public}p, c, %{public}p, s, %{private}p",  buf,  0x56u);
        IsApplePersonalHotspot = v116;
      }

      if (sub_1002921D0(115, 0))
      {
        unsigned int v113 = v26;
        unsigned int v117 = IsApplePersonalHotspot;
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101833558);
        }
        if ((v130.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v45 = &v130;
        }
        else {
          int v45 = (std::string *)v130.__r_.__value_.__r.__words[0];
        }
        if ((v127.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v46 = &v127;
        }
        else {
          int v46 = (std::string *)v127.__r_.__value_.__r.__words[0];
        }
        int v47 = v128;
        unsigned int v48 = v129;
        int v49 = v126;
        unsigned int v102 = v125;
        uint64_t v105 = qword_101934858;
        int v50 = WiFiNetworkGetProperty(a2, @"AP_MODE");
        int v51 = WiFiNetworkGetProperty(a2, @"CHANNEL");
        int v52 = WiFiNetworkGetProperty(a2, @"SSID_STR");
        int v131 = 136382979;
        int v132 = v45;
        int v133 = 2081;
        uint64_t v134 = v46;
        v135 = 1026;
        int v136 = v47;
        int v137 = 1026;
        uint64_t v138 = v48;
        int v139 = 1026;
        int v140 = v49;
        int v141 = 2050;
        uint64_t v142 = v102;
        v143 = 1026;
        unsigned int v144 = v113;
        int v145 = 2050;
        int v146 = v50;
        int v147 = 2050;
        int v148 = v51;
        unsigned int v149 = 2049;
        int v150 = v52;
        LODWORD(v99) = 86;
        uint64_t v53 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v105,  16LL,  "WifiService, getAccessPoint, invalid-network, mac, %{private}s, ssid, %{private}s, channel, %{pu blic}d, mode, 0x%{public}x, rssi, %{public}d, age, %{public}.1lf, isEPNONetwork, %{public}d, m, %{public}p, c, %{public}p, s, %{private}p",  &v131,  v99);
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const",  "%s\n",  v53);
        if (v53 != buf) {
          free(v53);
        }
        IsApplePersonalHotspot = v117;
      }

      goto LABEL_115;
    }
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101833558);
  }
  int v54 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    int v114 = v26;
    v118 = IsApplePersonalHotspot;
    uint64_t v109 = a4;
    if ((v130.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v55 = &v130;
    }
    else {
      int v55 = (std::string *)v130.__r_.__value_.__r.__words[0];
    }
    if ((v127.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v56 = &v127;
    }
    else {
      int v56 = (std::string *)v127.__r_.__value_.__r.__words[0];
    }
    unsigned int v57 = *(_DWORD *)(a3 + 36);
    int v58 = *(_DWORD *)(a3 + 40);
    int v59 = *(_DWORD *)(a3 + 32);
    unsigned int v106 = *(double *)(a3 + 48);
    int v60 = WiFiNetworkGetProperty(a2, @"AP_MODE");
    uint64_t v61 = WiFiNetworkGetProperty(a2, @"CHANNEL");
    v62 = WiFiNetworkGetProperty(a2, @"SSID_STR");
    *(_DWORD *)buf = 136317442;
    *(void *)&buf[4] = v55;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v56;
    *(_WORD *)&buf[22] = 1024;
    v152 = v58;
    v153 = 1024;
    v154 = v57;
    int v155 = 1024;
    int v156 = v59;
    int v157 = 2048;
    unsigned int v158 = v106;
    int v159 = 1024;
    int v26 = v114;
    int v160 = v114;
    v161 = 2048;
    v162 = v60;
    v163 = 2048;
    int v164 = v61;
    int v165 = 2048;
    int v166 = v62;
    _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "WifiService, getAccessPoint, invalid-network, mac, %s, ssid, %s, channel, %d, mode, 0x%x, rssi, %d, age, %.1lf, is EPNONetwork, %d, m, %p, c, %p, s, %p",  buf,  0x56u);
    a4 = v109;
    IsApplePersonalHotspot = v118;
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    LODWORD(v115) = v26;
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101833558);
    }
    HIDWORD(v115) = IsApplePersonalHotspot;
    int v107 = qword_101934858;
    int v90 = (v130.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v130 : (std::string *)v130.__r_.__value_.__r.__words[0];
    int v91 = (v127.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v127 : (std::string *)v127.__r_.__value_.__r.__words[0];
    int v92 = *(_DWORD *)(a3 + 36);
    unsigned int v93 = *(_DWORD *)(a3 + 40);
    int v94 = *(_DWORD *)(a3 + 32);
    int v95 = *(double *)(a3 + 48);
    int v96 = WiFiNetworkGetProperty(a2, @"AP_MODE");
    uint64_t v97 = WiFiNetworkGetProperty(a2, @"CHANNEL");
    v98 = WiFiNetworkGetProperty(a2, @"SSID_STR");
    int v131 = 136317442;
    int v132 = v90;
    int v133 = 2080;
    uint64_t v134 = v91;
    v135 = 1024;
    int v136 = v93;
    int v137 = 1024;
    uint64_t v138 = v92;
    int v139 = 1024;
    int v140 = v94;
    int v141 = 2048;
    uint64_t v142 = v95;
    v143 = 1024;
    unsigned int v144 = LODWORD(v115);
    int v145 = 2048;
    int v146 = v96;
    int v147 = 2048;
    int v148 = v97;
    unsigned int v149 = 2048;
    int v150 = v98;
    LODWORD(v99) = 86;
    int v35 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v107,  0LL,  "WifiService, getAccessPoint, invalid-network, mac, %s, ssid, %s, channel, %d, mode, 0x%x, rssi, %d, age, %.1lf, isEPNONetwork, %d, m, %p, c, %p, s, %p",  (const char *)&v131,  v99,  v100,  v107,  v108,  v115,  v120,  v121,  __p.__r_.__value_.__l.__data_,  (const void *)__p.__r_.__value_.__l.__size_);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const",  "%s\n",  v35);
    a4 = v110;
    IsApplePersonalHotspot = v119;
    if (v35 != buf) {
      goto LABEL_182;
    }
  }

  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

    sub_100246C40((uint64_t)v188, (uint64_t)&v152);
    if (*(_BYTE *)(a1 + 658)) {
      BOOL v31 = v22;
    }
    else {
      BOOL v31 = 0;
    }
    if (v31 == 1)
    {
      if (*(double *)&v148[20] <= 0.0)
      {
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101838C20);
        }
        int v32 = (os_log_s *)qword_101934838;
        if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_FAULT,  "Notifying using location KF,but no location available",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934830 != -1) {
            dispatch_once(&qword_101934830, &stru_101838C20);
          }
          *(_WORD *)v170 = 0;
          LODWORD(v116) = 2;
          int v111 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934838,  17LL,  "Notifying using location KF,but no location available",  v170,  v116);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v111);
          if (v111 != buf) {
            free(v111);
          }
        }
      }

      else
      {
        v189[0] = v149;
        v189[1] = v150;
        *(_OWORD *)v190 = *(_OWORD *)v151;
        *(_OWORD *)&v190[12] = *(_OWORD *)&v151[12];
        *(_OWORD *)&v188[32] = *(_OWORD *)&v148[32];
        *(_OWORD *)&v188[48] = *(_OWORD *)&v148[48];
        *(_OWORD *)&v188[64] = *(_OWORD *)&v148[64];
        *(_OWORD *)&v188[80] = *(_OWORD *)&v148[80];
        *(_OWORD *)v188 = *(_OWORD *)v148;
        *(_OWORD *)&v188[16] = *(_OWORD *)&v148[16];
      }
    }

    *(_OWORD *)((char *)v189 + 4) = *(_OWORD *)&v188[4];
    *(_DWORD *)&v190[8] = *(_DWORD *)&v190[4];
    *(void *)((char *)&v189[1] + 4) = *(void *)&v188[60];
    *(_DWORD *)&v190[12] = (*(uint64_t (**)(void))(**(void **)(a1 + 288) + 256LL))(*(void *)(a1 + 288));
    v198 = *(void *)&v188[20];
    v199 = *(void *)&v188[28];
    int v200 = *(void *)&v188[36];
    int v201 = *(void *)&v188[68];
    int v202 = 0;
    unsigned int v203 = *(_OWORD *)&v188[4];
    int v204 = *(void *)&v188[20];
    int v205 = *(_DWORD *)&v190[4];
    v206 = *(void *)&v188[28];
    v207 = *(void *)&v188[36];
    v208 = *(void *)&v188[60];
    int v209 = *(void *)&v188[68];
    if (*(_BYTE *)(a1 + 659)
      && (*(_BYTE *)(a1 + 660) || *(_BYTE *)(a1 + 661))
      && (*(unsigned int (**)(void, _BYTE *, _BYTE *))(**(void **)(a1 + 288) + 168LL))( *(void *)(a1 + 288),  v188,  v191))
    {
      if (qword_101934A90 != -1) {
        dispatch_once(&qword_101934A90, &stru_101838CA0);
      }
      uint64_t v33 = (os_log_s *)qword_101934A98;
      if (os_log_type_enabled((os_log_t)qword_101934A98, OS_LOG_TYPE_DEBUG))
      {
        int v131 = *(void *)&v188[4];
        v135 = *(void *)&v188[12];
        int v137 = *(void *)&v188[20];
        uint64_t v34 = v189[0];
        int v133 = sub_100832C40(v189[0]);
        unsigned int v122 = *(void *)&v188[44];
        uint64_t v124 = *(const char **)&v188[60];
        uint64_t v125 = *(_DWORD *)&v188[84];
        int v127 = *(void *)&v188[88];
        uint64_t v129 = *(void *)&v188[76];
        int v35 = sub_10080E94C();
        *(_DWORD *)v170 = 0;
        int v36 = sub_10080EB58(v35, v170);
        int v37 = *(double *)&v188[76];
        int v38 = *(void *)&v188[28];
        unsigned int v39 = *(void *)&v188[36];
        int v40 = *(void *)&v188[52];
        int v41 = *(void *)&v188[68];
        v118 = v192;
        int v120 = *(_DWORD *)v190;
        uint64_t v42 = sub_10080E94C();
        int v43 = sub_10080EF30(v42);
        *(_DWORD *)buf = 136320002;
        *(void *)&buf[4] = "CL-mapmatched";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v131;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v135;
        *(_WORD *)&buf[38] = 2048;
        *(void *)&buf[40] = v137;
        *(_WORD *)&buf[48] = 1024;
        *(_DWORD *)&buf[50] = v34;
        *(_WORD *)&buf[54] = 2080;
        *(void *)&buf[56] = v133;
        *(_WORD *)&buf[64] = 2048;
        *(void *)&buf[66] = v122;
        *(_WORD *)&buf[74] = 2048;
        *(void *)&buf[76] = v124;
        *(_WORD *)&buf[84] = 1024;
        *(_DWORD *)&buf[86] = v125;
        *(_WORD *)&buf[90] = 2048;
        *(void *)&buf[92] = v127;
        *(_WORD *)&buf[100] = 2048;
        *(void *)&buf[102] = v129;
        *(_WORD *)&buf[110] = 2048;
        *(double *)&buf[112] = v36 - v37;
        *(_WORD *)&buf[120] = 2048;
        *(void *)&buf[122] = v38;
        *(_WORD *)&buf[130] = 2048;
        *(void *)&buf[132] = v39;
        *(_WORD *)&buf[140] = 2048;
        *(void *)&buf[142] = v40;
        *(_WORD *)&buf[150] = 2048;
        *(void *)&buf[152] = v41;
        v217 = 2048;
        int v218 = v118;
        int v219 = 1024;
        int v220 = v120;
        unsigned int v221 = 2048;
        int v222 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,Locat ionTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestam pGps,%.3lf,integrity,%d,propagation_us,%.3f",  buf,  0xBAu);
      }

      if (sub_1002921D0(117, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934A90 != -1) {
          dispatch_once(&qword_101934A90, &stru_101838CA0);
        }
        int v130 = *(void *)&v188[4];
        uint64_t v134 = *(double *)&v188[12];
        int v136 = *(double *)&v188[20];
        uint64_t v138 = *(double *)&qword_101934A98;
        int v100 = v189[0];
        int v132 = sub_100832C40(v189[0]);
        int v101 = *(void *)&v188[44];
        unsigned int v102 = *(void *)&v188[60];
        LODWORD(v124) = *(_DWORD *)&v188[84];
        v126 = *(double *)&v188[88];
        int v128 = *(double *)&v188[76];
        int v103 = sub_10037FE24();
        int v104 = *(double *)&v188[76];
        uint64_t v105 = *(void *)&v188[28];
        unsigned int v106 = *(void *)&v188[36];
        int v107 = *(void *)&v188[52];
        unsigned int v119 = *(double *)&v188[68];
        uint64_t v121 = v192;
        int v123 = *(_DWORD *)v190;
        int v108 = sub_10080E94C();
        uint64_t v109 = sub_10080EF30(v108);
        *(_DWORD *)v170 = 136320002;
        *(void *)&v170[4] = "CL-mapmatched";
        v171 = 1024;
        *(_DWORD *)v172 = 1;
        *(_WORD *)&v172[4] = 2048;
        *(void *)&v172[6] = v130;
        *(_WORD *)&v172[14] = 2048;
        *(double *)&v172[16] = v134;
        *(_WORD *)&v172[24] = 2048;
        *(double *)&v172[26] = v136;
        *(_WORD *)&v172[34] = 1024;
        *(_DWORD *)&v172[36] = v100;
        *(_WORD *)&v172[40] = 2080;
        *(void *)&v172[42] = v132;
        *(_WORD *)&v172[50] = 2048;
        *(void *)&v172[52] = v101;
        *(_WORD *)&v172[60] = 2048;
        *(void *)&v172[62] = v102;
        *(_WORD *)&v172[70] = 1024;
        *(_DWORD *)&v172[72] = (_DWORD)v124;
        *(_WORD *)int v173 = 2048;
        *(double *)&v173[2] = v126;
        *(_WORD *)int v174 = 2048;
        *(double *)&v174[2] = v128;
        *(_WORD *)int v175 = 2048;
        *(double *)&v175[2] = v103 - v104;
        *(_WORD *)&v175[10] = 2048;
        *(void *)&v175[12] = v105;
        unsigned int v176 = 2048;
        int v177 = v106;
        int v178 = 2048;
        v179 = v107;
        v180 = 2048;
        v181 = v119;
        int v182 = 2048;
        int v183 = v121;
        int v184 = 1024;
        unsigned int v185 = v123;
        int v186 = 2048;
        int v187 = v109;
        int v110 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  *(void *)&v138,  2LL,  "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Life span,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3 f,CourseAccuracy,%.1f,timestampGps,%.3lf,integrity,%d,propagation_us,%.3f",  v170,  186,  v117,  v119,  v121,  v123,  v124,  v126,  v128,  v130,  *(double *)&v132,  v134,  v136,  v138,  *(double *)&v139,  *((double *)&v139 + 1),  v140,  v141,  (_DWORD)v142,  *(double *)&v143);
        sub_10029211C( "LOCATION",  1LL,  0,  2LL,  "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v110);
        if (v110 != buf) {
          free(v110);
        }
      }
    }

    if (LODWORD(v189[0]) <= 8 && ((1 << SLOBYTE(v189[0])) & 0x1D0) != 0)
    {
      *(_OWORD *)&v188[44] = v139;
      *(_OWORD *)&v188[60] = v139;
    }

    if (sub_100423348(a1, (uint64_t)v188, (uint64_t)v191))
    {
      if (qword_101934830 != -1) {
        dispatch_once(&qword_101934830, &stru_101838C20);
      }
      int v44 = (os_log_s *)qword_101934838;
      if (os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_INFO))
      {
        int v45 = *(void *)&v188[4];
        int v46 = *(void *)&v188[12];
        int v47 = *(void *)&v188[20];
        unsigned int v48 = v189[0];
        int v49 = sub_100832C40(v189[0]);
        *(_DWORD *)buf = 134286083;
        *(void *)&buf[4] = v45;
        *(_WORD *)&buf[12] = 2049;
        *(void *)&buf[14] = v46;
        *(_WORD *)&buf[22] = 2050;
        *(void *)&buf[24] = v47;
        *(_WORD *)&buf[32] = 1026;
        *(_DWORD *)&buf[34] = v48;
        *(_WORD *)&buf[38] = 2082;
        *(void *)&buf[40] = v49;
        *(_WORD *)&buf[48] = 2049;
        *(void *)&buf[50] = *(void *)&v188[28];
        *(_WORD *)&buf[58] = 2050;
        *(void *)&buf[60] = *(void *)&v188[36];
        *(_WORD *)&buf[68] = 2050;
        *(void *)&buf[70] = v196;
        *(_WORD *)&buf[78] = 2050;
        *(void *)&buf[80] = v197;
        *(_WORD *)&buf[88] = 2049;
        *(double *)&buf[90] = v194;
        *(_WORD *)&buf[98] = 1026;
        *(_DWORD *)&buf[100] = v193;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "DEM,query,%{private}.7f,%{private}.7f,HorUnc,%{public}.2lf,Type,%{public}d,%{public}s,Alt,%{private}.2f,AltUnc ,%{public}.2f,GroundAlt,%{public}.2lf,GroundAltUnc,%{public}.2lf,Undulation,%{private}.3lf,UndulationModel,%{public}d,",  buf,  0x68u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934830 != -1) {
          dispatch_once(&qword_101934830, &stru_101838C20);
        }
        int v91 = qword_101934838;
        int v92 = *(void *)&v188[4];
        unsigned int v93 = *(void *)&v188[12];
        int v94 = *(void *)&v188[20];
        int v95 = v189[0];
        int v96 = sub_100832C40(v189[0]);
        *(_DWORD *)v170 = 134286083;
        *(void *)&v170[4] = v92;
        v171 = 2049;
        *(void *)v172 = v93;
        *(_WORD *)&v172[8] = 2050;
        *(void *)&v172[10] = v94;
        *(_WORD *)&v172[18] = 1026;
        *(_DWORD *)&v172[20] = v95;
        *(_WORD *)&v172[24] = 2082;
        *(void *)&v172[26] = v96;
        *(_WORD *)&v172[34] = 2049;
        *(void *)&v172[36] = *(void *)&v188[28];
        *(_WORD *)&v172[44] = 2050;
        *(void *)&v172[46] = *(void *)&v188[36];
        *(_WORD *)&v172[54] = 2050;
        *(void *)&v172[56] = v196;
        *(_WORD *)&v172[64] = 2050;
        *(void *)&v172[66] = v197;
        *(_WORD *)&v172[74] = 2049;
        *(double *)int v173 = v194;
        *(_WORD *)&v173[8] = 1026;
        *(_DWORD *)int v174 = v193;
        LODWORD(v116) = 104;
        uint64_t v97 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v91,  1LL,  "DEM,query,%{private}.7f,%{private}.7f,HorUnc,%{public}.2lf,Type,%{public}d,%{public}s,Alt,%{priv ate}.2f,AltUnc,%{public}.2f,GroundAlt,%{public}.2lf,GroundAltUnc,%{public}.2lf,Undulation,%{priv ate}.3lf,UndulationModel,%{public}d,",  v170,  v116);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v97);
        if (v97 != buf) {
          free(v97);
        }
      }
    }

    *(void *)&v190[16] = 0LL;
    int v50 = *(double *)&v188[20];
    if (*(double *)&v188[20] >= 0.0 && *(double *)&v188[20] != *(double *)(a1 + 224))
    {
      *(double *)&v188[20] = v50;
    }

    int v51 = *(double *)&v188[36];
    if (*(double *)&v188[36] >= 0.0)
    {
      *(double *)&v188[36] = v51;
    }

    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101838C80);
    }
    int v52 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134286593;
      *(void *)&buf[4] = *(void *)&v188[4];
      *(_WORD *)&buf[12] = 2049;
      *(void *)&buf[14] = *(void *)&v188[12];
      *(_WORD *)&buf[22] = 2050;
      *(void *)&buf[24] = *(void *)&v188[20];
      *(_WORD *)&buf[32] = 2049;
      *(void *)&buf[34] = *(void *)&v188[44];
      *(_WORD *)&buf[42] = 2049;
      *(void *)&buf[44] = *(void *)&v188[60];
      *(_WORD *)&buf[52] = 1026;
      *(_DWORD *)&buf[54] = v189[0];
      *(_WORD *)&buf[58] = 2049;
      *(void *)&buf[60] = *(void *)&v188[28];
      *(_WORD *)&buf[68] = 2050;
      *(void *)&buf[70] = *(void *)&v188[36];
      *(_WORD *)&buf[78] = 2049;
      *(void *)&buf[80] = *(void *)&v190[16];
      *(_WORD *)&buf[88] = 2050;
      *(void *)&buf[90] = *(void *)&v188[52];
      *(_WORD *)&buf[98] = 2050;
      *(void *)&buf[100] = *(void *)&v188[68];
      *(_WORD *)&buf[108] = 1025;
      *(_DWORD *)&buf[110] = *(_DWORD *)&v190[12];
      *(_WORD *)&buf[114] = 2050;
      *(void *)&buf[116] = *(void *)&v188[76];
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "@ClxClient, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private }.1f, type, %{public}d, alt, %{private}.1f, altunc, %{public}.1f, ellipsoidalAlt, %{private}.1f, speedUnc, %{pub lic}.1f, courseUnc, %{public}.1f, signalEnv, %{private}d, timestamp, %{public}.3f",  buf,  0x7Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101838C80);
      }
      *(_DWORD *)v170 = 134286593;
      *(void *)&v170[4] = *(void *)&v188[4];
      v171 = 2049;
      *(void *)v172 = *(void *)&v188[12];
      *(_WORD *)&v172[8] = 2050;
      *(void *)&v172[10] = *(void *)&v188[20];
      *(_WORD *)&v172[18] = 2049;
      *(void *)&v172[20] = *(void *)&v188[44];
      *(_WORD *)&v172[28] = 2049;
      *(void *)&v172[30] = *(void *)&v188[60];
      *(_WORD *)&v172[38] = 1026;
      *(_DWORD *)&v172[40] = v189[0];
      *(_WORD *)&v172[44] = 2049;
      *(void *)&v172[46] = *(void *)&v188[28];
      *(_WORD *)&v172[54] = 2050;
      *(void *)&v172[56] = *(void *)&v188[36];
      *(_WORD *)&v172[64] = 2049;
      *(void *)&v172[66] = *(void *)&v190[16];
      *(_WORD *)&v172[74] = 2050;
      *(void *)int v173 = *(void *)&v188[52];
      *(_WORD *)&v173[8] = 2050;
      *(void *)int v174 = *(void *)&v188[68];
      *(_WORD *)&v174[8] = 1025;
      *(_DWORD *)int v175 = *(_DWORD *)&v190[12];
      *(_WORD *)&v175[4] = 2050;
      *(void *)&v175[6] = *(void *)&v188[76];
      LODWORD(v116) = 124;
      int v90 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "@ClxClient, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, cou rse, %{private}.1f, type, %{public}d, alt, %{private}.1f, altunc, %{public}.1f, ellipsoidalAlt, %{ private}.1f, speedUnc, %{public}.1f, courseUnc, %{public}.1f, signalEnv, %{private}d, timestamp, %{public}.3f",  v170,  v116);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v90);
      if (v90 != buf) {
        free(v90);
      }
    }

    if (sub_10029286C(*(double *)&v188[4], *(double *)&v188[12]))
    {
      int v55 = sub_100832C40(v189[0]);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101838C80);
      }
      int v56 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136380931;
        *(void *)&buf[4] = "client, null";
        *(_WORD *)&buf[12] = 2081;
        *(void *)&buf[14] = v55;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEBUG,  "ClxMetric, islands, %{private}s, %{private}s",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101838C80);
        }
        *(_DWORD *)v170 = 136380931;
        *(void *)&v170[4] = "client, null";
        v171 = 2081;
        *(void *)v172 = v55;
        LODWORD(v116) = 22;
        v98 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "ClxMetric, islands, %{private}s, %{private}s",  v170,  v116);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v98);
        if (v98 != buf) {
          free(v98);
        }
      }

      v147[0] = _NSConcreteStackBlock;
      v147[1] = 3221225472LL;
      v147[2] = sub_1004353AC;
      v147[3] = &unk_101820718;
      v147[4] = v55;
      AnalyticsSendEventLazy(@"com.apple.clx.islands", v147);
    }

    v54.n128_u64[0] = *(void *)&v188[4];
    v53.n128_u64[0] = -1.0;
    if (*(double *)&v188[4] == -1.0)
    {
      v54.n128_u64[0] = *(void *)&v188[12];
      if (*(double *)&v188[12] == -1.0)
      {
        unsigned int v57 = sub_100832C40(v189[0]);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101838C80);
        }
        int v58 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136380931;
          *(void *)&buf[4] = "client, sentinel";
          *(_WORD *)&buf[12] = 2081;
          *(void *)&buf[14] = v57;
          _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "ClxMetric, islands, %{private}s, %{private}s",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101838C80);
          }
          *(_DWORD *)v170 = 136380931;
          *(void *)&v170[4] = "client, sentinel";
          v171 = 2081;
          *(void *)v172 = v57;
          LODWORD(v116) = 22;
          int v99 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "ClxMetric, islands, %{private}s, %{private}s",  v170,  v116);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)",  "%s\n",  v99);
          if (v99 != buf) {
            free(v99);
          }
        }

        uint64_t v142 = _NSConcreteStackBlock;
        v143 = 3221225472LL;
        unsigned int v144 = sub_100435454;
        int v145 = &unk_101820718;
        int v146 = v57;
        AnalyticsSendEventLazy(@"com.apple.clx.islands", &v142);
      }
    }

    *(_DWORD *)buf = 39;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t, void, __n128, __n128))(*(void *)a1 + 152LL))( a1,  buf,  v188,  1LL,  0xFFFFFFFFLL,  0LL,  v53,  v54);
    if (_os_feature_enabled_impl("CoreLocation", "CLLoiLocationProvider"))
    {
      sub_1006B97C0(a1 + 344, (uint64_t)v188, buf);
      v189[0] = *(_OWORD *)&buf[96];
      v189[1] = *(_OWORD *)&buf[112];
      *(_OWORD *)v190 = *(_OWORD *)&buf[128];
      *(_OWORD *)&v190[12] = *(_OWORD *)&buf[140];
      *(_OWORD *)&v188[32] = *(_OWORD *)&buf[32];
      *(_OWORD *)&v188[48] = *(_OWORD *)&buf[48];
      *(_OWORD *)&v188[64] = *(_OWORD *)&buf[64];
      *(_OWORD *)&v188[80] = *(_OWORD *)&buf[80];
      *(_OWORD *)v188 = *(_OWORD *)buf;
      *(_OWORD *)&v188[16] = *(_OWORD *)&buf[16];
    }

    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  v188,  1LL,  0xFFFFFFFFLL,  0LL);
    *(void *)v170 = 0xBFF0000000000000LL;
    HIBYTE(v141) = 0;
    (*(void (**)(void, _BYTE *, char *, _BYTE *))(**(void **)(a1 + 288) + 216LL))( *(void *)(a1 + 288),  v188,  (char *)&v141 + 7,  v170);
    if (HIBYTE(v141))
    {
      sub_100246564((uint64_t)buf);
      v225 = *(void *)v170;
      v226 = *(void *)&v188[76];
      LODWORD(v141) = 20;
      (*(void (**)(uint64_t, double *, _BYTE *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v141,  buf,  1LL,  0xFFFFFFFFLL,  0LL);

      int v59 = v229;
      if (v229)
      {
        p_shared_owners = (unint64_t *)&v229->__shared_owners_;
        do
          uint64_t v61 = __ldaxr(p_shared_owners);
        while (__stlxr(v61 - 1, p_shared_owners));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }

      if (v228 < 0) {
        operator delete(__p);
      }
      v62 = v224;
      if (v224)
      {
        int v63 = (unint64_t *)&v224->__shared_owners_;
        do
          int v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }

      int v65 = v223;
      if (v223)
      {
        unsigned int v66 = (unint64_t *)&v223->__shared_owners_;
        do
          int v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
    }

    int v68 = *(void *)(a1 + 304);
    if (v68) {
      sub_100AF18B4(v68, (uint64_t)v188, v195);
    }
    sub_100D8DC7C(a1 + 5120, (uint64_t)v188);

    uint64_t v69 = v214;
    if (v214)
    {
      int v70 = (unint64_t *)&v214->__shared_owners_;
      do
        int v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }

    if (v213 < 0) {
      operator delete(v212);
    }
    int v72 = v211;
    if (v211)
    {
      int v73 = (unint64_t *)&v211->__shared_owners_;
      do
        int v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }

    unsigned int v75 = v210;
    if (v210)
    {
      int v76 = (unint64_t *)&v210->__shared_owners_;
      do
        int v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }

    goto LABEL_145;
  }

  PBDataWriterWriteFloatField(a3, 22LL, self->_userMaxCatherine);
  if ((*(_DWORD *)&self->_has & 0x80000) != 0) {
    goto LABEL_45;
  }
}

  *((_DWORD *)a3 + 25) = LODWORD(self->_userMaxCatherine);
  *((_DWORD *)a3 + 26) |= 0x200000u;
  if ((*(_DWORD *)&self->_has & 0x80000) != 0) {
    goto LABEL_45;
  }
}

  *((_DWORD *)result + 21) = LODWORD(self->_onsetCatherine);
  *((_DWORD *)result + 26) |= 0x20000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x200000) == 0)
  {
LABEL_22:
    if ((*(_DWORD *)&has & 0x80000) == 0) {
      return result;
    }
    goto LABEL_23;
  }

  self->_userMaxCatherine = *((float *)a3 + 25);
  *(_DWORD *)&self->_has |= 0x200000u;
  if ((*((_DWORD *)a3 + 26) & 0x80000) != 0) {
    goto LABEL_45;
  }
}

      uint64_t v12 = (char *)v12 + 1;
    }

    while (v9 != v12);
    int v30 = [a2 countByEnumeratingWithState:&v72 objects:v86 count:16];
    uint64_t v9 = v30;
  }

  while (v30);
LABEL_96:
  int v68 = 0u;
  uint64_t v69 = 0u;
  unsigned int v66 = 0u;
  int v67 = 0u;
  BOOL v31 = [a3 countByEnumeratingWithState:&v66 objects:v79 count:16];
  if (v31)
  {
    int v32 = *(void *)v67;
    do
    {
      uint64_t v33 = 0LL;
      do
      {
        if (*(void *)v67 != v32) {
          objc_enumerationMutation(a3);
        }
        uint64_t v34 = *(void *)(*((void *)&v66 + 1) + 8LL * (void)v33);
        int v35 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
        int v36 = sub_10053D6E0( (uint64_t)a1,  (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithClientAnchor:anchorType:",  v34,  105LL));
        if (sub_100556968((uint64_t)a1, (uint64_t)v36, &v76))
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018401A0);
          }
          int v37 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = *((void *)a1 + 30);
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(void *)&buf[20] = v36;
            *(_WORD *)&buf[28] = 2050;
            *(void *)&buf[30] = v38;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#ClearClient Client restored within safe harbor threshold - keeping, Client:% {public, location:escape_only}@, safe harbor threshold_s:%{public}.09f}",  buf,  0x26u);
          }

          sub_10054BE50((id *)a1, (uint64_t)v36);
          unsigned int v39 = (void *)*((void *)a1 + 17);
          *(void *)buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = sub_100554B60;
          *(void *)&buf[24] = &unk_10183FB60;
          *(void *)&buf[40] = a1;
          *(void *)&buf[32] = v36;
          [v39 iterateIdentitiesRelatedToKeyPath:v36 withBlock:buf];
        }

        uint64_t v33 = (char *)v33 + 1;
      }

      while (v31 != v33);
      BOOL v31 = [a3 countByEnumeratingWithState:&v66 objects:v79 count:16];
    }

    while (v31);
  }

  int v64 = 0u;
  int v65 = 0u;
  v62 = 0u;
  int v63 = 0u;
  int v40 = [a4 countByEnumeratingWithState:&v62 objects:v78 count:16];
  if (v40)
  {
    int v41 = *(void *)v63;
    do
    {
      uint64_t v42 = 0LL;
      do
      {
        if (*(void *)v63 != v41) {
          objc_enumerationMutation(a4);
        }
        int v43 = *(void *)(*((void *)&v62 + 1) + 8LL * (void)v42);
        int v44 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
        int v45 = sub_10053D6E0( (uint64_t)a1,  (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:]( &OBJC_CLASS___CLClientKeyPath,  "clientKeyPathWithClientAnchor:anchorType:",  v43,  105LL));
        if (sub_100556968((uint64_t)a1, (uint64_t)v45, &v76))
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018401A0);
          }
          int v46 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
          {
            int v47 = *((void *)a1 + 30);
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(void *)&buf[20] = v45;
            *(_WORD *)&buf[28] = 2050;
            *(void *)&buf[30] = v47;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#ClearClient Client restored (remotely) within safe harbor threshold - keeping,  Client:%{public, location:escape_only}@, safe harbor threshold_s:%{public}.09f}",  buf,  0x26u);
          }

          sub_10054BE50((id *)a1, (uint64_t)v45);
        }

        [*((id *)a1 + 17) setBool:1 forKey:@"SyncedAuthForUninstalledApp" atKeyPath:v45];

        uint64_t v42 = (char *)v42 + 1;
      }

      while (v40 != v42);
      int v40 = [a4 countByEnumeratingWithState:&v62 objects:v78 count:16];
    }

    while (v40);
  }

  unsigned int v48 = (void *)*((void *)a1 + 31);
  if (v11 == -1.0)
  {
    [v48 setNextFireDelay:1.79769313e308];
  }

  else
  {
    [v48 nextFireDelay];
    if (v11 < v49)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_1018401A0);
      }
      int v50 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "#ClearClient updated AppUninstallTimer; next timer will fire in %.3fs",
          buf,
          0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_1018401A0);
        }
        LODWORD(v80[0]) = 134217984;
        *(void **)((char *)v80 + 4) = *(void **)&v11;
        unsigned int v57 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#ClearClient updated AppUninstallTimer; next timer will fire in %.3fs",
                        COERCE_DOUBLE(v80));
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLClientManager::handleAppInstallationStatus(NSArray<NSString *> *, NSArray<NSString *> *, NSArray<NSString *> *)",  "%s\n",  v57);
      }

      [*((id *)a1 + 31) setNextFireDelay:v11];
    }
  }

  [*((id *)a1 + 17) persist];
  sub_100547C58((uint64_t)a1);
  return sub_1005569D8(a1);
}

            if (v9 != (id)++v10) {
              continue;
            }
            uint64_t v9 = [obj countByEnumeratingWithState:&v32 objects:v49 count:16];
            if (!v9) {
              return;
            }
            goto LABEL_4;
          default:
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
            int v15 = qword_101934988;
            if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_44;
            }
            __p = (void *)68289538;
            int v37 = 2082;
            int v38 = "";
            unsigned int v39 = 2114;
            int v40 = v7;
            int v41 = 1026;
            uint64_t v42 = a3;
            int v16 = (os_log_s *)v15;
            uint64_t v17 = "{msg%{public}.0s:#Warning #dic rehydration, unrecognized dic type, Client:%{public, locati"
                  "on:escape_only}@, dicType:%{public}d}";
            goto LABEL_43;
        }
      }
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_1018401A0);
    }
    uint64_t v25 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289538;
      int v37 = 2082;
      int v38 = "";
      unsigned int v39 = 2114;
      int v40 = v7;
      int v41 = 1026;
      uint64_t v42 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:skip #dic rehydration, specified dic type does not exists, Client:%{public, locatio n:escape_only}@, dicType:%{public}d}",  (uint8_t *)&__p,  0x22u);
    }
  }

  else {
    BOOL v21 = v15;
  }
  if (!v21) {
    goto LABEL_49;
  }
  uint64_t v4 = 0LL;
LABEL_50:
  uint64_t v22 = !v15;
  if (!*(_BYTE *)(a1 + 85)) {
    uint64_t v22 = 1;
  }
  if ((v22 & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 152)) {
      sub_100208C68(a1 + 152);
    }
    char v23 = *(float *)(a1 + 156);
    uint64_t v24 = *(float *)(a1 + 72);
    uint64_t v3 = v23 <= v24;
    if (v23 > v24) {
      uint64_t v4 = 1LL;
    }
    else {
      uint64_t v4 = v4;
    }
  }

  return v3 | (v4 << 32);
}

  fclose(v11);
LABEL_45:
  uint64_t v25 = 0LL;
LABEL_46:
  if (SHIBYTE(v77) < 0) {
    operator delete(v75);
  }
  return v25;
}

  uint64_t v20 = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 124) |= 0x1000u;
  *(void *)(a1 + 88) = v20;
  uint64_t v5 = *(_DWORD *)(a2 + 124);
  if ((v5 & 0x2000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_47;
  }

  if ((v3 & 0x40) != 0) {
    uint64_t result = v4 + 2;
  }
  else {
    uint64_t result = v4;
  }
LABEL_47:
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

  char v23 = *(_DWORD *)(a1 + 24);
  uint64_t v24 = (v23 + v4);
  if (v23 >= 1)
  {
    uint64_t v25 = 0LL;
    do
    {
      int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1006355D0( *(void *)(*(void *)(a1 + 16) + 8 * v25),  a2);
      int v27 = (int)v26;
      else {
        int v28 = 1;
      }
      uint64_t v24 = (v27 + v24 + v28);
      ++v25;
    }

    while (v25 < *(int *)(a1 + 24));
  }

  *(_DWORD *)(a1 + 68) = v24;
  return v24;
}

  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  v5[9],  a2,  a4);
  uint64_t v6 = v5[37];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }

  int v37 = (uint64_t *)__p;
  int v36 = v58;
  if (__p == v58) {
    goto LABEL_58;
  }
  unsigned int v39 = (uint64_t *)v72;
  int v38 = v73;
  if (a5 > ((char *)v73 - (_BYTE *)v72) >> 3
    || a5 > ((char *)v70 - (_BYTE *)v69) >> 3
    || a4 > 0x63
    || ((char *)v58 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v39 != v38)
    {
      int v40 = (uint64_t *)__p;
      if (__p != v36)
      {
        while ((sub_10084CBD8(a6, *v39, *v40) & 1) != 0)
        {
          if (++v40 == v58)
          {
            int v38 = v73;
            int v36 = v40;
            goto LABEL_52;
          }
        }

        goto LABEL_95;
      }

  int v38 = (uint64_t *)__p;
  int v37 = v59;
  if (__p == v59) {
    goto LABEL_58;
  }
  int v40 = (uint64_t *)v73;
  unsigned int v39 = v74;
  if (a5 > ((char *)v74 - (_BYTE *)v73) >> 3
    || a5 > ((char *)v71 - (_BYTE *)v70) >> 3
    || a4 > 0x63
    || ((char *)v59 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v40 != v39)
    {
      int v41 = (uint64_t *)__p;
      if (__p != v37)
      {
        while ((sub_10084CBD8(a6, *v40, *v41) & 1) != 0)
        {
          if (++v41 == v59)
          {
            unsigned int v39 = v74;
            int v37 = v41;
            goto LABEL_52;
          }
        }

        goto LABEL_95;
      }

        int v46 = 0LL;
        v105[0] = v79;
        v105[1] = v38;
        v105[2] = v39;
        v105[3] = v42;
        v105[4] = v83;
        v105[5] = v89;
        v105[6] = v86;
        unsigned int v106 = 0;
        int v107 = 0;
        unsigned int v93 = 0;
        int v94 = 0;
        int v95 = -1LL;
        int v96 = 0;
        do
        {
          int v47 = (char *)&v92 + v46;
          *((_DWORD *)v47 + 10) = 0;
          *((_OWORD *)v47 + 3) = v45;
          *((_OWORD *)v47 + 4) = v45;
          *((void *)v47 + 10) = -1LL;
          *(_OWORD *)(v47 + 88) = xmmword_1013394A0;
          v46 += 80LL;
          *((void *)v47 + 13) = 0LL;
          *((void *)v47 + 14) = 0LL;
        }

        while (v46 != 160);
        uint64_t v97 = v88;
        v98 = *(_OWORD *)(a3 + 16);
        int v99 = v23;
        int v100 = -1LL;
        int v101 = v78;
        unsigned int v102 = *((_OWORD *)v79 + 1);
        int v103 = v38;
        int v104 = -1LL;
        unsigned int v48 = a11[5];
        int v49 = sub_10084F158((uint64_t)v108, (uint64_t)v105, (uint64_t)&v92, a9, a10, a11);
        if (a11[5] < v48) {
          sub_10124CD48((uint64_t)v49, v50, v51);
        }
        int v52 = a11[4];
        uint64_t v53 = a11[1];
        int v54 = (void *)(v53 + 8 * (v52 / 0x14));
        if (a11[2] == v53) {
          int v55 = 0LL;
        }
        else {
          int v55 = *v54 + 200 * (v52 % 0x14);
        }
        int v111 = v54;
        int v112 = v55;
        sub_100854DA8(&v111, v48);
        int v56 = a11[1];
        if (a11[2] == v56)
        {
          int v58 = 0LL;
        }

        else
        {
          unsigned int v57 = a11[5] + a11[4];
          int v58 = *(void *)(v56 + 8 * (v57 / 0x14)) + 200 * (v57 % 0x14);
        }

        int v59 = v112;
        if (v58 != v112)
        {
          int v60 = v111;
          while (*(void *)(v59 + 64) != *(void *)(v59 + 144))
          {
            uint64_t v61 = *(_DWORD *)(v59 + 16);
            v62 = *(_DWORD *)(v59 + 40);
            int v63 = v61 == 4 && v62 == 2;
            if (!v63 && (v61 != 3 || v62 != 2)) {
              break;
            }
            if (*(_DWORD *)(v59 + 120) != 2) {
              break;
            }
            v59 += 200LL;
            if (v59 - *v60 == 4000)
            {
              int v65 = v60[1];
              ++v60;
              int v59 = v65;
            }

            if (v59 == v58) {
              goto LABEL_69;
            }
          }

          uint64_t result = 0LL;
          *a12 = 1;
          return result;
        }

  int v37 = (double **)__p;
  int v36 = v58;
  if (__p == v58) {
    goto LABEL_58;
  }
  unsigned int v39 = (double **)v72;
  int v38 = v73;
  if (a5 > ((char *)v73 - (_BYTE *)v72) >> 3
    || a5 > ((char *)v70 - (_BYTE *)v69) >> 3
    || a4 > 0x63
    || ((char *)v58 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v39 != v38)
    {
      int v40 = (double **)__p;
      if (__p != v36)
      {
        while ((sub_10085A3D8(a6, *v39, *v40) & 1) != 0)
        {
          if (++v40 == v58)
          {
            int v38 = v73;
            int v36 = v40;
            goto LABEL_52;
          }
        }

        goto LABEL_95;
      }

  int v38 = (double **)__p;
  int v37 = v59;
  if (__p == v59) {
    goto LABEL_58;
  }
  int v40 = (double **)v73;
  unsigned int v39 = v74;
  if (a5 > ((char *)v74 - (_BYTE *)v73) >> 3
    || a5 > ((char *)v71 - (_BYTE *)v70) >> 3
    || a4 > 0x63
    || ((char *)v59 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v40 != v39)
    {
      int v41 = (double **)__p;
      if (__p != v37)
      {
        while ((sub_10085A3D8(a6, *v40, *v41) & 1) != 0)
        {
          if (++v41 == v59)
          {
            unsigned int v39 = v74;
            int v37 = v41;
            goto LABEL_52;
          }
        }

        goto LABEL_95;
      }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(_DWORD *)(v5 + 96),  (int)a2,  a4);
  if ((*(_DWORD *)(v5 + 172) & 0x2000) != 0) {
LABEL_18:
  }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(_DWORD *)(v5 + 100),  (int)a2,  a4);
LABEL_19:
  if (*(int *)(v5 + 112) >= 1)
  {
    uint64_t v9 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  *(void *)(*(void *)(v5 + 104) + 8 * v9++),  a2,  a4);
    while (v9 < *(int *)(v5 + 112));
  }

  unsigned int v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x8000) != 0)
  {
    uint64_t v12 = *(void *)(v5 + 128);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_1019A1AE0 + 128);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  v12,  a2,  a4);
    unsigned int v10 = *(_DWORD *)(v5 + 172);
    if ((v10 & 0x10000) == 0)
    {
LABEL_24:
      if ((v10 & 0x20000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_50;
    }
  }

  else if ((v10 & 0x10000) == 0)
  {
    goto LABEL_24;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  *(_DWORD *)(v5 + 136),  (int)a2,  a4);
  unsigned int v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x20000) == 0)
  {
LABEL_25:
    if ((v10 & 0x40000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_51;
  }

            int v59 = v18;
            v14 += 88LL;
            if (v14 == v15)
            {
              int v27 = v58;
              uint64_t v17 = &OBJC_INSTANCE_METHODS_TRANSITPbTransitMacTile;
              goto LABEL_55;
            }
          }
        }

        int v27 = 0LL;
        uint64_t v18 = 0LL;
LABEL_55:
        sub_100680F80((uint64_t *)&v55, (uint64_t)&v58);
        int v28 = (uint64_t)(v18 - v27) >> 3;
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_10186A5E8);
        }
        unsigned int v29 = 0x2E8BA2E8BA2E8BA3LL * v28;
        int v30 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v17[231];
          *(void *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * (v56 - v55);
          *(_WORD *)&buf[12] = 2050;
          *(void *)&buf[14] = v29;
          int v65 = 2050;
          unsigned int v66 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "@WsbGroup, last, %{public}lu, aps, %{public}lu, time, %{public}.1f",  buf,  0x20u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_10186A5E8);
          }
          *(_DWORD *)int v68 = 134349568;
          *(void *)&v68[4] = 0xAAAAAAAAAAAAAAABLL * (v56 - v55);
          *(_WORD *)&v68[12] = 2050;
          *(void *)&v68[14] = v29;
          uint64_t v69 = 2050;
          int v70 = v16;
          LODWORD(v48) = 32;
          int v45 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WsbGroup, last, %{public}lu, aps, %{public}lu, time, %{public}.1f",  v68,  v48);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const",  "%s\n",  v45);
          if (v45 != buf) {
            free(v45);
          }
        }

        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_10186A5E8);
        }
        BOOL v31 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(void *)&buf[4] = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "WsbMetric, scanaps, %{public}lu",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_10186A5E8);
          }
          *(_DWORD *)int v68 = 134349056;
          *(void *)&v68[4] = v29;
          LODWORD(v48) = 12;
          int v46 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, scanaps, %{public}lu",  v68,  v48);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const",  "%s\n",  v46);
          if (v46 != buf) {
            free(v46);
          }
        }

        v53[0] = _NSConcreteStackBlock;
        v53[1] = 3221225472LL;
        v53[2] = sub_100A5EDE8;
        v53[3] = &unk_101820718;
        v53[4] = v29;
        AnalyticsSendEventLazy(@"com.apple.clx.wsb.scanaps", v53);
        int v32 = v55;
        uint64_t v33 = v56;
        if (v55 != v56)
        {
          uint64_t v34 = 0;
          do
          {
            int v35 = *(double *)(*v32 + 56) - *(double *)(a1 + 6144);
            if (v35 > 0.0 && *(_BYTE *)(a1 + 6376))
            {
              int v36 = *(void *)(a3 + 1080);
              if (v36 >= *(void *)(a3 + 1088))
              {
                int v37 = sub_100A69634((uint64_t *)(a3 + 1072), v32);
              }

              else
              {
                sub_100A695D0(a3 + 1072, v32);
                int v37 = v36 + 24;
              }

              *(void *)(a3 + 1080) = v37;
            }

            else
            {
              if (qword_101934860 != -1) {
                dispatch_once(&qword_101934860, &stru_10186A5E8);
              }
              int v38 = (os_log_s *)qword_101934868;
              if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v39 = *(void *)(*v32 + 56);
                int v40 = 0x2E8BA2E8BA2E8BA3LL * ((v32[1] - *v32) >> 3);
                *(_DWORD *)buf = 134349568;
                *(void *)&buf[4] = v39;
                *(_WORD *)&buf[12] = 2050;
                *(void *)&buf[14] = v40;
                int v65 = 2050;
                unsigned int v66 = v35;
                _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "@WsbDiscard, privacy, %{public}.1f, aps, %{public}ld, delta, %{public}.1f",  buf,  0x20u);
              }

              ++v34;
              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934860 != -1) {
                  dispatch_once(&qword_101934860, &stru_10186A5E8);
                }
                int v41 = *(void *)(*v32 + 56);
                uint64_t v42 = 0x2E8BA2E8BA2E8BA3LL * ((v32[1] - *v32) >> 3);
                *(_DWORD *)int v68 = 134349568;
                *(void *)&v68[4] = v41;
                *(_WORD *)&v68[12] = 2050;
                *(void *)&v68[14] = v42;
                uint64_t v69 = 2050;
                int v70 = v35;
                LODWORD(v48) = 32;
                int v43 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@WsbDiscard, privacy, %{public}.1f, aps, %{public}ld, delta, %{public}.1f",  v68,  v48);
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::W ifi::Wsb &) const",  "%s\n",  v43);
                if (v43 != buf) {
                  free(v43);
                }
              }
            }

            v32 += 3;
          }

          while (v32 != v33);
          if (v34 > 0)
          {
            if (qword_101934860 != -1) {
              dispatch_once(&qword_101934860, &stru_10186A5E8);
            }
            int v44 = (os_log_s *)qword_101934868;
            if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)&buf[4] = v34;
              _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "WsbMetric, groupresult, privacy, %{public}d",  buf,  8u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934860 != -1) {
                dispatch_once(&qword_101934860, &stru_10186A5E8);
              }
              *(_DWORD *)int v68 = 67240192;
              *(_DWORD *)&v68[4] = v34;
              LODWORD(v48) = 8;
              int v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, groupresult, privacy, %{public}d",  v68,  v48);
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const",  "%s\n",  v47);
              if (v47 != buf) {
                free(v47);
              }
            }

            v51[0] = _NSConcreteStackBlock;
            v51[1] = 3221225472LL;
            v51[2] = sub_100A5EE68;
            v51[3] = &unk_1018333B8;
            int v52 = v34;
            AnalyticsSendEventLazy(@"com.apple.clx.wsb.groupresult", v51);
            v49[0] = _NSConcreteStackBlock;
            v49[1] = 3221225472LL;
            v49[2] = sub_100A5EEFC;
            v49[3] = &unk_1018333B8;
            int v50 = v34;
            AnalyticsSendEventLazy(@"com.apple.clx.wsb.groupresult", v49);
          }
        }

        *(void *)buf = &v55;
        sub_1002E067C((void ***)buf);
        *(void *)buf = &v58;
        sub_100023498((void ***)buf);
      }
    }

    *(void *)buf = &v61;
    sub_100023498((void ***)buf);
  }

  int v15 = *(void *)(v5 + 88);
  if (!v15) {
    int v15 = *(void *)(qword_1019A1C80 + 88);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  v15,  a2,  a4);
  if ((*(_DWORD *)(v5 + 112) & 0x2000) != 0)
  {
LABEL_47:
    int v16 = *(void *)(v5 + 96);
    if (!v16) {
      int v16 = *(void *)(qword_1019A1C80 + 96);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  v16,  a2,  a4);
  }

  return result;
}

  unsigned int v10 = *(void *)(v5 + 48);
  if (!v10) {
    unsigned int v10 = *(void *)(qword_1019A1D48 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v10,  a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }

  BOOL v21 = *(void *)(a1 + 48);
  if (!v21) {
    BOOL v21 = *(void *)(qword_1019A1D48 + 48);
  }
  uint64_t v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BBEA28(v21, a2);
  char v23 = (int)v22;
  else {
    uint64_t v24 = 1;
  }
  uint64_t v4 = (v4 + v23 + v24 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 224);
  if ((v3 & 0x80) != 0)
  {
LABEL_50:
    uint64_t v25 = *(void *)(a1 + 56);
    if (!v25) {
      uint64_t v25 = *(void *)(qword_1019A1D48 + 56);
    }
    int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10050490C(v25, a2);
    int v27 = (int)v26;
    else {
      int v28 = 1;
    }
    uint64_t v4 = (v4 + v27 + v28 + 1);
    uint64_t v3 = *(_DWORD *)(a1 + 224);
  }

  if ((v20 & 1) != 0)
  {
    if ((a4 & 1) == 0)
    {
      int v37 = v19 >= 360.0 || v19 < 0.0;
      int v38 = dbl_10135CDD0[v19 > 180.0];
      if (v37) {
        int v38 = -0.0;
      }
      int v19 = v19 + v38;
    }

    unsigned int v39 = *a3;
    else {
      buf[0] = *(std::string *)((_BYTE *)v39 + 2);
    }
    std::string::operator=((std::string *)(a2 + 128), buf);
    int v44 = *a3;
    *(double *)(a2 + 112) = **a3;
    *(double *)(a2 + 120) = *(double *)((char *)v44 + 20);
    *(double *)(a2 + 152) = v30;
    *(double *)(a2 + 160) = v29;
    *(double *)(a2 + 168) = v19;
    *(double *)(a2 + 272) = v17;
    return 1LL;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_101880CB0);
  }
  int v40 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "CLMM,interpolateOnRoad,interpolateProjections returned false",  (uint8_t *)buf,  2u);
  }

  uint64_t result = sub_1002921D0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_101880CB0);
    }
    LOWORD(v83[0]) = 0;
    LODWORD(v81) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  16LL,  "CLMM,interpolateOnRoad,interpolateProjections returned false",  v83,  v81);
    int v43 = (std::string *)v42;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLMapGeometry::interpolateOnRoad(CLMapCrumb &, const CLMapRoadPtr &, BOOL, const double *, int) const",  "%s\n",  v42);
    if (v43 != buf) {
      free(v43);
    }
    return 0LL;
  }

  return result;
}

  if (v42 < 0) {
    operator delete(v41);
  }
}

  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "crown", *(_DWORD *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 6u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x100uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  int v2 = *(void *)(a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "fallTime", *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 7u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }

  int v19 = *(void *)(a2 + 264);
  v10 |= 0x20u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 264) = v19;
  uint64_t v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x100) == 0)
  {
LABEL_12:
    if ((v9 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }

  uint64_t result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 80) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 1) == 0)
  {
LABEL_25:
    if ((v2 & 0x800) == 0) {
      return result;
    }
LABEL_46:
    uint64_t result = *(double *)(a2 + 96);
    *(_DWORD *)(a1 + 176) = v3 | 0x800;
    *(double *)(a1 + 96) = result;
    return result;
  }

  PB::TextFormatter::format(this, "totalStrideCount", *(void *)(a1 + 144));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40000) != 0) {
    goto LABEL_45;
  }
LABEL_22:
  if ((v5 & 0x80000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0x15u);
  if ((*(_DWORD *)(v3 + 176) & 0x800) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 96), 0x16u);
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_46;
  }

  unint64_t v11 = *(_BYTE *)(a2 + 93);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 93) = v11;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x100000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "previousImpulseStartTime", *(void *)(a1 + 32));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 95), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }

  char v23 = *(_DWORD *)(a2 + 108);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 108) = v23;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_46:
    uint64_t v25 = *(void *)(a2 + 40);
    *(_DWORD *)(result + 116) = v3 | 0x10;
    *(void *)(result + 40) = v25;
    return result;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) != 0) {
    goto LABEL_45;
  }
LABEL_22:
  if ((v5 & 0x200000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(this, "waitingToConfirmLoft", *(_BYTE *)(a1 + 115));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0x15u);
  if ((*(_DWORD *)(v3 + 116) & 0x10) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0x16u);
  }
  return result;
}

  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 100));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }

        if (PB::Reader::placeMark(this, v60, v38, v39)
          && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v40 + 16LL))(v40, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v60);
LABEL_77:
          int v2 = *((void *)this + 1);
          uint64_t v3 = *((void *)this + 2);
          uint64_t v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      case 6u:
        *(_BYTE *)(a1 + 60) |= 4u;
        int v43 = *((void *)this + 1);
        if (v43 >= *((void *)this + 2))
        {
          int v46 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          int v44 = v43 + 1;
          int v45 = *(unsigned __int8 *)(*(void *)this + v43);
          *((void *)this + 1) = v44;
          int v46 = v45 != 0;
        }

        *(_BYTE *)(a1 + 56) = v46;
        goto LABEL_77;
      case 7u:
        *(_BYTE *)(a1 + 60) |= 8u;
        int v47 = *((void *)this + 1);
        if (v47 >= *((void *)this + 2))
        {
          int v50 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          unsigned int v48 = v47 + 1;
          int v49 = *(unsigned __int8 *)(*(void *)this + v47);
          *((void *)this + 1) = v48;
          int v50 = v49 != 0;
        }

        *(_BYTE *)(a1 + 57) = v50;
        goto LABEL_77;
      default:
        uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_77;
    }
  }

  int v16 = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 212) |= 0x10u;
  *(_DWORD *)(a1 + 112) = v16;
  unsigned int v10 = *(_DWORD *)(a2 + 212);
  if ((v10 & 0x80000) == 0)
  {
LABEL_15:
    if ((v10 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }

  int v8 = *(_BYTE *)(a2 + 102);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_BYTE *)(a1 + 102) = v8;
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "isAudioTPQ", *(_BYTE *)(a1 + 100));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 101), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }

  uint64_t result = *(float *)(a2 + 124);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 124) = result;
  int v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x400000) == 0)
  {
LABEL_17:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "epochLastTimestamp", *(void *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 4) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }

  int v16 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 84) = v16;
  int v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x200000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "lastDetectedTransitionSpeedEnd", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 0x67u);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 128), 0xC9u);
  uint64_t v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0) {
      goto LABEL_15;
    }
LABEL_46:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 184), 0xCBu);
    if ((*(_WORD *)(v3 + 204) & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 116);
  v3 |= 0x200000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 116) = v12;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "configZgThreshold", *(float *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0xAu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "basalCalories", *(void *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 5u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000000LL) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_46;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  int v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x1000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0x13u);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  int v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "habcRateBaselineSigma", *(float *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }

  unint64_t v11 = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000uLL;
  *(void *)(result + 164) = v3;
  *(_DWORD *)(result + 80) = v11;
  int v2 = *(void *)(a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "numAperturedSPADs", *(_DWORD *)(a1 + 76));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 9u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000LL) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "left_eye_y", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }

  uint64_t result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 112) = result;
  int v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 136));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104), 0x12u);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 3u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }

  uint64_t result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 96) = result;
  int v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtMean", *(double *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }

  uint64_t result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 56) = result;
  int v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log", *(double *)(a1 + 128));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "firstStepTime", *(double *)(a1 + 48));
  uint64_t v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x4000) == 0)
  {
LABEL_15:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  uint64_t result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 32) = result;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "meanGravZ", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }

  uint64_t v18 = *(_BYTE *)(a2 + 112);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 112) = v18;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "tilt", *(float *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 110), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }

  char v23 = *(void *)(a2 + 8);
  v5 |= 1u;
  *(_DWORD *)(a1 + 180) = v5;
  *(void *)(a1 + 8) = v23;
  uint64_t v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "horzUncSemiMin", *(float *)(a1 + 148));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }

  int v13 = *(void *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 220) = v3;
  *(void *)(result + 168) = v13;
  int v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "horzUncSemiMajAz", *(float *)(a1 + 180));
  uint64_t v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 204), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 76);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 76) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "userAccelInerXYMean", *(float *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x14u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_46;
  }

  int v13 = *(_BYTE *)(a2 + 124);
  v3 |= 0x20000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 124) = v13;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "inHeadTurnState", *(_BYTE *)(a1 + 121));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 120), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }

  int v16 = *(_DWORD *)(a2 + 124);
  v6 |= 0x8000u;
  *(_DWORD *)(a1 + 164) = v6;
  *(_DWORD *)(a1 + 124) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "btzQuiescentDurationLoose", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }

  uint64_t v7 = *(_BYTE *)(a2 + 221);
  v3 |= 0x400000000uLL;
  *(void *)(a1 + 224) = v3;
  *(_BYTE *)(a1 + 221) = v7;
  int v2 = *(void *)(a2 + 224);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "groundContactTimeGradeSource", *(_DWORD *)(a1 + 196));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 8u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }

  char v23 = *(_BYTE *)(a2 + 120);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 120) = v23;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0) {
      return result;
    }
LABEL_46:
    uint64_t v25 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(result + 128) = v3 | 0x4000;
    *(_DWORD *)(result + 112) = v25;
    return result;
  }

  PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 80));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) != 0) {
    goto LABEL_45;
  }
LABEL_22:
  if ((v5 & 0x800) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(this, "workrateMETs", *(double *)(a1 + 96));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 122), 0x15u);
  if ((*(_DWORD *)(v3 + 128) & 0x4000) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x16u);
  }
  return result;
}

  uint64_t v17 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 16) = v17;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "isValidPedometerSpeed", *(_BYTE *)(a1 + 183));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }

  int v19 = *(void *)(a2 + 192);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 192) = v19;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }

  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 120));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 0x11u);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }

        while (1)
        {
          uint64_t v18 = v23 - 12;
          do
            v18 += 12LL;
          while (!(*(unsigned int (**)(void))(*(void *)a4 + 16LL))());
          char v23 = v18 + 12;
          do
          {
            unsigned int v10 = (uint64_t *)((char *)v10 - 12);
            uint64_t result = (*(uint64_t (**)(void))(*(void *)a4 + 16LL))();
          }

          while ((result & 1) != 0);
          int v44 = *(_DWORD *)(v18 + 8);
          int v37 = *(void *)v18;
          uint64_t v25 = *v10;
          *(_DWORD *)(v18 + 8) = *((_DWORD *)v10 + 2);
          *(void *)uint64_t v18 = v25;
          *((_DWORD *)v10 + 2) = v44;
          *unsigned int v10 = v37;
        }

        if (v18 > a2) {
          return result;
        }
      }

      uint64_t v7 = v18;
    }

    while (v5 != a2);
  }

  return result;
}

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      goto LABEL_46;
    }
LABEL_59:
    *(void *)&uint64_t v25 = __p.__r_.__value_.__r.__words[0];
    *a2 = __p;
    return *(double *)&v25;
  }

  if (!*(_BYTE *)(a1 + 23)) {
    goto LABEL_59;
  }
LABEL_46:
  sub_10066CEA4(91, (const void **)a1, (uint64_t)&v30);
  std::string::push_back(&v30, 93);
  int v28 = v30;
  memset(&v30, 0, sizeof(v30));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v23 = __p.__r_.__value_.__s.__size_;
  }
  else {
    char v23 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v24 = std::string::append(&v28, (const std::string::value_type *)p_p, v23);
  uint64_t v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  return *(double *)&v25;
}

uint64_t sub_1000877B8( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 128);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 72),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 128);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v5 + 8),  a3);
  int v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }

LABEL_35:
  uint64_t v12 = *(void *)(v5 + 48);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A0980 + 48);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v12,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 128);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }

  *(_DWORD *)(a1 + 44) = v5;
  return v5;
}

  uint64_t v17 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v17 + 112)) {
    goto LABEL_45;
  }
  uint64_t v18 = v2[1];
  *(void *)buf = *(void *)v17;
  if (*(char *)(v17 + 31) < 0)
  {
    sub_1010DD48C(v36, *(void **)(v17 + 8), *(void *)(v17 + 16));
  }

  else
  {
    int v19 = *(_OWORD *)(v17 + 8);
    *(void *)&v36[16] = *(void *)(v17 + 24);
    *(_OWORD *)int v36 = v19;
  }

  uint64_t v20 = *(_OWORD *)(v17 + 32);
  int v37 = *(_DWORD *)(v17 + 48);
  *(_OWORD *)&v36[24] = v20;
  sub_10008C06C(v38, v17 + 56);
  int v44 = 0uLL;
  v45[0] = 0LL;
  *(void *)int v46 = &v44;
  v46[8] = 0;
  *(void *)&int v44 = operator new(0x70uLL);
  *((void *)&v44 + 1) = v44;
  v45[0] = v44 + 112;
  *((void *)&v44 + 1) = sub_1000A85FC((uint64_t)v45, (uint64_t)buf, (uint64_t)&v39, v44);
  BOOL v21 = sub_1000A6898(v18, (uint64_t *)&v44);
  *(void *)int v46 = &v44;
  sub_100050CAC((void ***)v46);
  sub_10008C0E0((wireless_diagnostics::google::protobuf::MessageLite *)v38);
  if ((v36[23] & 0x80000000) != 0) {
    operator delete(*(void **)v36);
  }
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CBC8);
  }
  uint64_t v22 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    char v23 = **(unsigned int **)(a1 + 8);
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)int v36 = 2082;
    *(void *)&v36[2] = "";
    *(_WORD *)&v36[10] = 2050;
    *(void *)&v36[12] = v23;
    *(_WORD *)&v36[20] = 1026;
    *(_DWORD *)&v36[22] = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Configuration generated, ModelType:%{public}lu, Inserted:%{public}hhd}",  buf,  0x22u);
LABEL_45:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CBC8);
    }
  }

  uint64_t v24 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = **(unsigned __int8 **)(a1 + 16);
    int v26 = **(unsigned int **)(a1 + 8);
    int v27 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 8LL);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)int v36 = 2082;
    *(void *)&v36[2] = "";
    *(_WORD *)&v36[10] = 1026;
    *(_DWORD *)&v36[12] = v25;
    *(_WORD *)&v36[16] = 2050;
    *(void *)&v36[18] = v26;
    *(_WORD *)&v36[26] = 2050;
    *(void *)&v36[28] = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:sending CoreAnalytics com.apple.MicroLocation.ModelLearning, sending enabled:%{public }hhd, model type:%{public}lu, has_value:%{public}lu}",  buf,  0x2Cu);
  }

  if (**(_BYTE **)(a1 + 16))
  {
    int v28 = *(void *)(a1 + 40);
    if (*(_BYTE *)(v28 + 8)) {
      AnalyticsSendEvent(@"com.apple.MicroLocation.ModelLearning", *(void *)v28);
    }
  }

  unsigned int v29 = *(uint64_t **)(a1 + 40);
  if (*((_BYTE *)v29 + 8)) {
    int v30 = *v29;
  }
  else {
    int v30 = 0LL;
  }
  (*(void (**)(void, void, void, uint64_t))(*(void *)*v2 + 24LL))( *v2,  **(unsigned int **)(a1 + 8),  *(void *)(a1 + 24),  v30);
  sub_10001D050(*(void *)(a1 + 24));
  sub_1000A7874(*(void *)(a1 + 32));
  BOOL v31 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v31 + 8)) {
    *(_BYTE *)(v31 + 8) = 0;
  }
}

    a6->n128_u8[0] = 0;
    a6[2].n128_u8[0] = 0;
    uint64_t v18 = 25LL;
    goto LABEL_36;
  }

  a6->n128_u8[0] = 0;
  a6[2].n128_u8[0] = 0;
  uint64_t v18 = 24LL;
LABEL_36:
  a6[2].n128_u64[1] = v18;
  return sub_1000EA040((uint64_t)v25);
}

  BOOL v21 = *(void *)(a1 + 40);
  if (!v21) {
    BOOL v21 = *(void *)(qword_1019A0AA8 + 40);
  }
  uint64_t v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C64D8(v21, a2);
  char v23 = (int)v22;
  else {
    uint64_t v24 = 1;
  }
  uint64_t v4 = (v4 + v23 + v24 + 1);
  if ((*(_DWORD *)(a1 + 60) & 0x20) != 0)
  {
LABEL_41:
    uint64_t v25 = *(void *)(a1 + 48);
    if (!v25) {
      uint64_t v25 = *(void *)(qword_1019A0AA8 + 48);
    }
    int v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001C1C44(v25, a2);
    int v28 = (int)v26;
    else {
      unsigned int v29 = 1;
    }
    uint64_t v4 = (v4 + v28 + v29 + 1);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(_DWORD *)(v5 + 60),  (int)a2,  a4);
  uint64_t v10 = *(_DWORD *)(v5 + 168);
  if ((v10 & 0x2000) == 0)
  {
LABEL_22:
    if ((v10 & 0x4000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  (int)a2,  *(double *)(v5 + 152),  a3);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  (int)a2,  *(double *)(v5 + 80),  a3);
  int v6 = *(_DWORD *)(v5 + 160);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  (int)a2,  *(double *)(v5 + 80),  a3);
  int v6 = *(_DWORD *)(v5 + 152);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }

    uint64_t result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 100) |= 0x40u;
    *(double *)(a1 + 48) = result;
    int v6 = *(_DWORD *)(a2 + 100);
    if ((v6 & 0x80) == 0) {
      goto LABEL_38;
    }
LABEL_36:
    uint64_t v17 = *(_DWORD *)(a2 + 72);
    if (v17 >= 3) {
      sub_10122FC34();
    }
    *(_DWORD *)(a1 + 100) |= 0x80u;
    *(_DWORD *)(a1 + 72) = v17;
    int v6 = *(_DWORD *)(a2 + 100);
  }

  uint64_t v14 = *(_DWORD *)(a2 + 52);
  if ((sub_1001D2F60(v14) & 1) == 0) {
    sub_10122FCFC();
  }
  *(_DWORD *)(a1 + 92) |= 0x800u;
  *(_DWORD *)(a1 + 52) = v14;
  uint64_t v5 = *(_DWORD *)(a2 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_29:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_39;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(v5 + 40),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 148);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }

  uint64_t v20 = *(void *)(a1 + 56);
  if (!v20) {
    uint64_t v20 = *(void *)(qword_1019A0DB0 + 56);
  }
  BOOL v21 = 2 * (*(_DWORD *)(v20 + 16) & 1);
  if ((*(_DWORD *)(v20 + 16) & 2) != 0) {
    v21 += 2;
  }
  else {
    uint64_t v22 = 0;
  }
  *(_DWORD *)(v20 + 12) = v22;
  v4 += v22 + 2;
  if ((*(_DWORD *)(a1 + 76) & 0x40) != 0) {
LABEL_17:
  }
    v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 64),  a2)
        + 1;
LABEL_18:
  uint64_t v9 = *(_DWORD *)(a1 + 24);
  uint64_t v10 = (v9 + v4);
  if (v9 >= 1)
  {
    uint64_t v11 = 0LL;
    do
    {
      uint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002009C0( *(void *)(*(void *)(a1 + 16) + 8 * v11),  a2);
      uint64_t v13 = (int)v12;
      else {
        uint64_t v14 = 1;
      }
      uint64_t v10 = (v13 + v10 + v14);
      ++v11;
    }

    while (v11 < *(int *)(a1 + 24));
  }

  *(_DWORD *)(a1 + 72) = v10;
  return v10;
}

  uint64_t v15 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 84) |= 0x10u;
  *(_DWORD *)(a1 + 32) = v15;
  uint64_t v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x20) != 0) {
    goto LABEL_36;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_37:
  uint64_t v17 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 84) |= 0x40u;
  *(_DWORD *)(a1 + 40) = v17;
  uint64_t v5 = *(_DWORD *)(a2 + 84);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    int v6 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 84) |= 0x80u;
    *(_DWORD *)(a1 + 44) = v6;
    uint64_t v5 = *(_DWORD *)(a2 + 84);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  *(unsigned __int8 *)(v5 + 73),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 84);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  *(_DWORD *)(v5 + 76),  a2,  a4);
  }

    uint64_t v18 = (void *)CLConnectionMessage::name(*a2);
    int v19 = *((char *)v18 + 23);
    if (v19 < 0)
    {
      if (v18[1] != 61LL) {
        goto LABEL_51;
      }
      uint64_t v18 = (void *)*v18;
    }

    else if (v19 != 61)
    {
      goto LABEL_51;
    }

    if (!memcmp(v18, "PedestrianFence/kCLConnectionMessagePedestrianFenceSimulation", 0x3DuLL))
    {
      unsigned int v39 = *a2;
      int v28 = a2[1];
      v57[0] = v39;
      v57[1] = v28;
      if (v28)
      {
        int v40 = (unint64_t *)((char *)v28 + 8);
        do
          int v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }

      sub_100214C60(a1, v57);
      if (!v28) {
        return;
      }
      uint64_t v42 = (unint64_t *)((char *)v28 + 8);
      do
        int v32 = __ldaxr(v42);
      while (__stlxr(v32 - 1, v42));
      goto LABEL_111;
    }

  if ((*(_BYTE *)&self->_has & 2) != 0)
  {
    if ((*((_BYTE *)a3 + 44) & 2) == 0 || self->_exitState != *((_DWORD *)a3 + 5)) {
      goto LABEL_44;
    }
  }

  else if ((*((_BYTE *)a3 + 44) & 2) != 0)
  {
    goto LABEL_44;
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = (*((_BYTE *)a3 + 44) & 1) == 0;
  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
    if ((*((_BYTE *)a3 + 44) & 1) == 0 || self->_startTime != *((void *)a3 + 1)) {
      goto LABEL_44;
    }
    LOBYTE(sub_1012279C0(0LL, v4, v5) = 1;
  }

  return v5;
}

  *(double *)(v4 + 488) = Current;
  int v81 = (uint64_t *)(v4 + 496);
  sub_1000234D8((uint64_t *)(v4 + 496));
  memset(&v108, 0, sizeof(v108));
  if ((byte_1019A1918[23] & 0x80000000) == 0)
  {
    __dst = *(std::string *)byte_1019A1918;
    *(void *)int v115 = qword_1019A1910;
LABEL_47:
    *(_OWORD *)&v115[8] = *(_OWORD *)byte_1019A1918;
    *(void *)&v115[24] = *(void *)&byte_1019A1918[16];
    goto LABEL_48;
  }

  sub_1010DD48C(&__dst, *(void **)byte_1019A1918, *(unint64_t *)&byte_1019A1918[8]);
  *(void *)int v115 = qword_1019A1910;
  if ((byte_1019A1918[23] & 0x80000000) == 0) {
    goto LABEL_47;
  }
  sub_1010DD48C(&v115[8], *(void **)byte_1019A1918, *(unint64_t *)&byte_1019A1918[8]);
LABEL_48:
  int v116 = xmmword_1019A1930;
  unsigned int v117 = xmmword_1019A1940;
  v118 = xmmword_1019A1950;
  unsigned int v119 = qword_1019A1960;
  if ((int)Count < 1)
  {
    int v85 = 0;
  }

  else
  {
    unsigned int v29 = 0LL;
    int v85 = 0;
    do
    {
      if ((char)v108.__r_.__value_.__s.__size_ < 0)
      {
        *v108.__r_.__value_.__l.__data_ = 0;
        v108.__r_.__value_.__l.__size_ = 0LL;
      }

      else
      {
        v108.__r_.__value_.__s.__data_[0] = 0;
        v108.__r_.__value_.__s.__size_ = 0;
      }

      int v30 = -[__CFArray objectAtIndexedSubscript:](a4, "objectAtIndexedSubscript:", v29);
      Property = (const __CFString *)WiFiNetworkGetProperty(v30, @"BSSID");
      sub_1002AA05C(Property, &v108);
      int v32 = WiFiNetworkGetIntProperty(v30, @"RSSI");
      uint64_t v33 = WiFiNetworkGetIntProperty(v30, @"CHANNEL");
      if (v30 && WiFiNetworkGetChannel(v30)) {
        uint64_t v34 = off_101833728[(int)WiFiNetworkGetOperatingBand()];
      }
      else {
        uint64_t v34 = "NA";
      }
      sub_1010DDBC0(v105, v34);
      int v35 = WiFiNetworkGetIntProperty(v30, @"AGE");
      int v36 = WiFiNetworkGetIntProperty(v30, @"AP_MODE");
      IsApplePersonalHotspot = WiFiNetworkIsApplePersonalHotspot(v30);
      int v104 = 0;
      int v38 = (const void *)WiFiNetworkGetProperty(v30, @"CHANNEL_FLAGS");
      if (!v38 || (sub_1002A94C8(v38, &v104) & 1) == 0) {
        int v104 = 0;
      }
      unsigned int v39 = (void **)sub_1007EBE44((uint64_t *)&v108);
      else {
        uint64_t v97 = __dst;
      }
      __p = v97;
      memset(&v97, 0, sizeof(v97));
      v98 = v39;
      LODWORD(v100) = v32;
      *(void *)((char *)&v100 + 4) = __PAIR64__(v33, v36);
      *(double *)&int v101 = (double)v35;
      *((double *)&v101 + 1) = Current - (double)v35;
      LOBYTE(v102) = IsApplePersonalHotspot != 0;
      BYTE1(v102) = 1;
      DWORD1(v102) = v104;
      BYTE8(v102) = 0;
      int v103 = 0LL;
      if (WiFiNetworkGetIntProperty(v30, @"CONNECTED_BSSID"))
      {
        BYTE8(v102) = 1;
        *(void *)int v115 = v98;
        std::string::operator=((std::string *)&v115[8], &__p);
        int v116 = v100;
        unsigned int v117 = v101;
        v118 = v102;
        unsigned int v119 = v103;
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        int v40 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
        {
          sub_10099E630((uint64_t *)&v98, (std::stringbuf::string_type *)buf);
          int v41 = buf;
          if (buf[23] < 0) {
            int v41 = *(_BYTE **)buf;
          }
          *(_DWORD *)int v114 = 136380675;
          *(void *)&v114[4] = v41;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "@WsbCb, associated AP, %{private}s",  v114,  0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101833578);
          }
          uint64_t v42 = qword_101934868;
          sub_10099E630((uint64_t *)&v98, (std::stringbuf::string_type *)v114);
          int v43 = v114;
          if (v114[23] < 0) {
            int v43 = *(_BYTE **)v114;
          }
          LODWORD(v113.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v113.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
          LODWORD(v80) = 12;
          int v44 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v42,  0LL,  "@WsbCb, associated AP, %{private}s",  &v113,  v80);
          if ((v114[23] & 0x80000000) != 0) {
            operator delete(*(void **)v114);
          }
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v44);
          if (v44 != buf) {
            free(v44);
          }
        }
      }

      else
      {
        BYTE8(v102) = 0;
      }

      int v103 = *(void *)&Current;
      if ((DWORD2(v100) - 257) >= 0xFFFFFF00
        && *(double *)&v101 >= 0.0
        && *(double *)&v101 <= 86400.0
        && (*(void *)buf = v98, sub_1005B46E8((uint64_t)buf)))
      {
        int v52 = *(void *)(v82 + 504);
        if (v52 >= *(void *)(v82 + 512))
        {
          uint64_t v53 = sub_100023888(v81, (uint64_t)&v98);
        }

        else
        {
          sub_100023800((uint64_t)v81, (uint64_t)&v98);
          uint64_t v53 = v52 + 88;
        }

        *(void *)(v82 + 504) = v53;
        [*(id *)(v82 + 656) processEventTime:Current - (double)v35];
      }

      else
      {
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        int v45 = (os_log_s *)qword_101934868;
        if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_ERROR))
        {
          int v46 = DWORD2(v100);
          int v47 = v101;
          v113.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
          sub_1007EC454((std::string *)v114);
          unsigned int v48 = v114;
          if (v114[23] < 0) {
            unsigned int v48 = *(_BYTE **)v114;
          }
          *(_DWORD *)buf = 67240963;
          *(_DWORD *)&buf[4] = 1;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v46;
          *(_WORD *)&buf[14] = 2050;
          *(void *)&buf[16] = v47;
          *(_WORD *)&buf[24] = 2081;
          *(void *)&buf[26] = v48;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "@WsbCb, bad, %{public}d, channel, %{public}d, age, %{public}.0f, mac, %{private}s",  buf,  0x22u);
          if ((v114[23] & 0x80000000) != 0) {
            operator delete(*(void **)v114);
          }
        }

        ++v85;
        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934860 != -1) {
            dispatch_once(&qword_101934860, &stru_101833578);
          }
          int v58 = qword_101934868;
          int v59 = DWORD2(v100);
          int v60 = v101;
          int v96 = v98;
          sub_1007EC454(&v113);
          uint64_t v61 = &v113;
          if ((v113.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v61 = (std::stringbuf::string_type *)v113.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)int v114 = 67240963;
          *(_DWORD *)&v114[4] = 1;
          *(_WORD *)&v114[8] = 1026;
          *(_DWORD *)&v114[10] = v59;
          *(_WORD *)&v114[14] = 2050;
          *(void *)&v114[16] = v60;
          *(_WORD *)&v114[24] = 2081;
          *(void *)&v114[26] = v61;
          LODWORD(v80) = 34;
          v62 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v58,  16LL,  "@WsbCb, bad, %{public}d, channel, %{public}d, age, %{public}.0f, mac, %{private}s",  v114,  v80);
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v62);
          if (v62 != buf) {
            free(v62);
          }
        }
      }

      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101833578);
      }
      int v49 = (os_log_s *)qword_101934868;
      if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
      {
        sub_10099E630((uint64_t *)&v98, (std::stringbuf::string_type *)v114);
        int v50 = v114;
        if (v114[23] < 0) {
          int v50 = *(_BYTE **)v114;
        }
        int v51 = v105;
        if (v106 < 0) {
          int v51 = (void **)v105[0];
        }
        *(_DWORD *)buf = 67240707;
        *(_DWORD *)&buf[4] = v29 + 1;
        *(_WORD *)&buf[8] = 2081;
        *(void *)&buf[10] = v50;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v51;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "@WsbCb, AP, %{public}d, %{private}s, band, %{public}s",  buf,  0x1Cu);
        if ((v114[23] & 0x80000000) != 0) {
          operator delete(*(void **)v114);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934860 != -1) {
          dispatch_once(&qword_101934860, &stru_101833578);
        }
        int v54 = qword_101934868;
        sub_10099E630((uint64_t *)&v98, &v113);
        int v55 = &v113;
        if ((v113.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          int v55 = (std::stringbuf::string_type *)v113.__r_.__value_.__r.__words[0];
        }
        int v56 = v105;
        if (v106 < 0) {
          int v56 = (void **)v105[0];
        }
        *(_DWORD *)int v114 = 67240707;
        *(_DWORD *)&v114[4] = v29 + 1;
        *(_WORD *)&v114[8] = 2081;
        *(void *)&v114[10] = v55;
        *(_WORD *)&v114[18] = 2082;
        *(void *)&v114[20] = v56;
        LODWORD(v80) = 28;
        unsigned int v57 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v54,  2LL,  "@WsbCb, AP, %{public}d, %{private}s, band, %{public}s",  v114,  v80);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v57);
        if (v57 != buf) {
          free(v57);
        }
      }

      if (v106 < 0) {
        operator delete(v105[0]);
      }
      ++v29;
    }

    while (Count != v29);
  }

  uint64_t v4 = v82;
  uint64_t v15 = &OBJC_INSTANCE_METHODS_TRANSITPbTransitMacTile;
  if (4 * v85 < (int)Count)
  {
    *(_WORD *)buf = -256;
    buf[8] = 0;
    int v123 = 0;
    memset(v124, 0, sizeof(v124));
    uint64_t v125 = 0LL;
    sub_1003516E4((uint64_t)&buf[8], (uint64_t)v115);
    HIDWORD(v125) = 1;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(void *)v82 + 240LL))(v82, &v124[8], v124);
    LODWORD(v98) = 12;
    (*(void (**)(uint64_t, void ***, _BYTE *, void, uint64_t, void))(*(void *)v82 + 152LL))( v82,  &v98,  buf,  0LL,  0xFFFFFFFFLL,  0LL);
    v98 = (void **)&v124[8];
    sub_100023498(&v98);
    if (v123)
    {
      if (v122 < 0) {
        operator delete(*(void **)&buf[16]);
      }
    }
  }

  if ((v115[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v115[8]);
  }
LABEL_150:
  int v65 = *(double *)(v4 + 288);
  if (v65 <= 0.0) {
    unsigned int v66 = -1;
  }
  else {
    unsigned int v66 = (int)(Current - v65);
  }
  if (*(_BYTE *)(v4 + 246))
  {
    int v67 = "fake";
  }

  else if (*(void *)(v4 + 248))
  {
    int v67 = "fences";
  }

  else
  {
    int v67 = "off";
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_101833578);
  }
  int v68 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240706;
    *(_DWORD *)&buf[4] = v83;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v66;
    *(_WORD *)&buf[14] = 2082;
    *(void *)&buf[16] = v67;
    _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "WsbMetric, callback, aps, %{public}d, delta, %{public}d, active, %{public}s",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101833578);
    }
    *(_DWORD *)int v115 = 67240706;
    *(_DWORD *)&v115[4] = v83;
    *(_WORD *)&v115[8] = 1026;
    *(_DWORD *)&v115[10] = v66;
    *(_WORD *)&v115[14] = 2082;
    *(void *)&v115[16] = v67;
    LODWORD(v80) = 24;
    int v76 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  2LL,  "WsbMetric, callback, aps, %{public}d, delta, %{public}d, active, %{public}s",  v115,  v80);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)",  "%s\n",  v76);
    if (v76 != buf) {
      free(v76);
    }
  }

  v86[0] = _NSConcreteStackBlock;
  v86[1] = v15[328];
  v86[2] = sub_10034627C;
  v86[3] = &unk_101827B10;
  int v87 = v83;
  int v88 = v66;
  v86[4] = v67;
  AnalyticsSendEventLazy(@"com.apple.clx.wsb.callback", v86);
  *(double *)(v4 + 288) = Current;
  os_activity_scope_leave(&state);
  if (HIBYTE(v112))
  {
    if ((_BYTE)v112) {
      pthread_mutex_unlock(v111);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v110 + 24LL))(v110);
    }
  }

  PBDataWriterWriteFloatField(a3, 13LL, self->_meanGoodCatherine);
  has = self->_has;
  if ((*(_BYTE *)&has & 2) == 0)
  {
LABEL_14:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  *((_DWORD *)a3 + 10) = LODWORD(self->_meanGoodCatherine);
  *((_DWORD *)a3 + 26) |= 0x40u;
  has = self->_has;
  if ((*(_BYTE *)&has & 2) == 0)
  {
LABEL_14:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  *((_DWORD *)result + 9) = LODWORD(self->_meanCatherine);
  *((_DWORD *)result + 26) |= 0x20u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x40) == 0)
  {
LABEL_13:
    if ((*(_BYTE *)&has & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }

  self->_meanGoodCatherine = *((float *)a3 + 10);
  *(_DWORD *)&self->_has |= 0x40u;
  uint64_t v3 = *((_DWORD *)a3 + 26);
  if ((v3 & 2) == 0)
  {
LABEL_14:
    if ((v3 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  *(_DWORD *)(v5 + 100),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 124);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }

  uint64_t v16 = *(_BYTE *)(a2 + 98);
  *(_DWORD *)(a1 + 104) |= 0x2000u;
  *(_BYTE *)(a1 + 98) = v16;
  uint64_t v5 = *(_DWORD *)(a2 + 104);
  if ((v5 & 0x4000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000) == 0) {
      return;
    }
    goto LABEL_41;
  }

  uint64_t v17 = a2[16];
  if (v17 >= 7) {
    sub_1012416C4();
  }
  a1[20] |= 0x4000u;
  a1[16] = v17;
  uint64_t v5 = a2[20];
  if ((v5 & 0x8000) != 0)
  {
LABEL_25:
    uint64_t v9 = a2[17];
    a1[20] |= 0x8000u;
    a1[17] = v9;
    uint64_t v5 = a2[20];
  }

  uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[7];
  if (v15 >= 0x80)
  {
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
    uint64_t v3 = a1[20];
  }

  else
  {
    uint64_t v16 = 1;
  }

  uint64_t v4 = (v4 + v16 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_21:
    if ((v3 & 0x80) == 0) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }

  uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v17 >= 0x80)
  {
    uint64_t v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
    uint64_t v3 = *(_DWORD *)(a1 + 60);
  }

  else
  {
    uint64_t v18 = 2;
  }

  uint64_t v4 = (v18 + v4);
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

  uint64_t v15 = *(void *)(a1 + 24);
  if (!v15) {
    uint64_t v15 = *(void *)(qword_1019A1388 + 24);
  }
  uint64_t v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10062719C(v15, a2);
  uint64_t v17 = (int)v16;
  else {
    uint64_t v18 = 1;
  }
  uint64_t v4 = (v4 + v17 + v18 + 1);
  uint64_t v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 0x40) != 0) {
    goto LABEL_41;
  }
LABEL_21:
  if ((v3 & 0x80) == 0) {
    goto LABEL_51;
  }
LABEL_45:
  BOOL v21 = *(void *)(a1 + 40);
  if (!v21) {
    BOOL v21 = *(void *)(qword_1019A1388 + 40);
  }
  uint64_t v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100631228(v21, a2);
  uint64_t v24 = (int)v22;
  else {
    uint64_t v25 = 1;
  }
  uint64_t v4 = (v4 + v24 + v25 + 1);
LABEL_51:
  *(_DWORD *)(a1 + 48) = v4;
  return v4;
}

  int v19 = a2[14];
  if (v19 >= 7) {
    sub_1012419E4();
  }
  a1[17] |= 0x1000u;
  a1[14] = v19;
  if ((a2[17] & 0x2000) != 0)
  {
LABEL_20:
    uint64_t v7 = a2[15];
    a1[17] |= 0x2000u;
    a1[15] = v7;
  }

  uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[7];
  if (v15 >= 0x80)
  {
    uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
    uint64_t v3 = a1[17];
  }

  else
  {
    uint64_t v16 = 1;
  }

  uint64_t v4 = (v4 + v16 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_19:
    if ((v3 & 0x80) == 0) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }

  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

  if (v2 == v4)
  {
    int v19 = fabs(v2);
  }

  else
  {
    if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 0LL;
    }

    int v26 = vabdd_f64(v2, v4);
    int v19 = fabs(v2);
    int v27 = fabs(v4);
    if (v19 >= v27) {
      int v27 = v19;
    }
    int v28 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
    if (v26 > v28) {
      return 0LL;
    }
  }

  if (v19 == 90.0) {
    goto LABEL_2;
  }
  if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    uint64_t v20 = fabs(v19 + -90.0);
    if (v19 < 90.0) {
      int v19 = 90.0;
    }
    BOOL v21 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
    if (v20 <= v21) {
      goto LABEL_2;
    }
  }

  return 0LL;
}
}

  uint64_t v14 = *(void *)(v5 + 64);
  if (!v14) {
    uint64_t v14 = *(void *)(qword_1019A1A48 + 64);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9,  v14,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      return result;
    }
    goto LABEL_41;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  *(_DWORD *)(v5 + 48),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_gradeMean),  @"gradeMean");
  has = self->_has;
  if ((*(_BYTE *)&has & 1) == 0)
  {
LABEL_14:
    if ((*(_WORD *)&has & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  PBDataWriterWriteDoubleField(a3, 13LL, self->_cadenceMean);
  has = self->_has;
  if ((*(_WORD *)&has & 0x800) == 0)
  {
LABEL_15:
    if ((*(_BYTE *)&has & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }

  *((void *)a3 + 1) = *(void *)&self->_cadenceMean;
  *((_DWORD *)a3 + 41) |= 1u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x800) == 0)
  {
LABEL_15:
    if ((*(_BYTE *)&has & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }

  *((void *)result + 3) = *(void *)&self->_gradeMean;
  *((_DWORD *)result + 41) |= 4u;
  has = self->_has;
  if ((*(_BYTE *)&has & 1) == 0)
  {
LABEL_14:
    if ((*(_WORD *)&has & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  self->_cadenceMean = *((double *)a3 + 1);
  *(_DWORD *)&self->_has |= 1u;
  uint64_t v3 = *((_DWORD *)a3 + 41);
  if ((v3 & 0x800) == 0)
  {
LABEL_15:
    if ((v3 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }

  if (v22 < 2) {
    return 0LL;
  }
  int v40 = *(void *)(a1 + 248);
  if (v40 < 2) {
    return 0LL;
  }
  int v41 = v22 + v21 - 1;
  uint64_t v42 = *(void *)(v23 + ((v41 >> 7) & 0x1FFFFFFFFFFFFF8LL));
  int v43 = *(float **)(a1 + 88);
  int v44 = v41 & 0x3FF;
  int v45 = *(void *)(a1 + 240);
  int v46 = v40 + v45 - 1;
  int v47 = *(void *)(a1 + 216);
  unsigned int v48 = *(void *)(a1 + 176);
  int v214 = (char *)(v23 + 8 * (v21 >> 10));
  if (v48 == v23) {
    int v49 = 0LL;
  }
  else {
    int v49 = *(void *)(v23 + 8 * (v21 >> 10)) + 4 * (v21 & 0x3FF);
  }
  int v56 = *(float *)(v42 + 4 * v44);
  unsigned int v57 = *v43;
  int v58 = v43[1];
  *(void *)&v216 = *(void *)(a1 + 88);
  int v59 = *(void *)(v47 + ((v46 >> 7) & 0x1FFFFFFFFFFFFF8LL));
  int v60 = v46 & 0x3FF;
  uint64_t v61 = *(void *)(a1 + 144);
  v62 = v61 + *(void *)(a1 + 152);
  int v63 = *(void *)(a1 + 120);
  int v64 = *(void *)(a1 + 128);
  int v65 = (uint64_t *)(v63 + 8 * (v62 >> 10));
  if (v64 == v63) {
    unsigned int v66 = 0LL;
  }
  else {
    unsigned int v66 = *v65 + 4 * (v62 & 0x3FF);
  }
  int v67 = *(float *)(v59 + 4 * v60);
  int v68 = v58 + (float)(v57 * v56);
  uint64_t v69 = v45 + v40;
  int v70 = (uint64_t *)(v47 + 8 * ((v45 + v40) >> 10));
  if (*(void *)(a1 + 224) == v47) {
    int v71 = 0LL;
  }
  else {
    int v71 = *v70 + 4LL * (v69 & 0x3FF);
  }
  int v72 = v68 - v67;
  int v73 = (uint64_t *)(v23 + 8 * ((v21 + v22) >> 10));
  *(void *)&int v211 = v21 + v22;
  if (v48 == v23) {
    int v74 = 0LL;
  }
  else {
    int v74 = *v73 + 4LL * (((_WORD)v21 + (_WORD)v22) & 0x3FF);
  }
  unsigned int v212 = (uint64_t *)(v23 + 8 * ((v21 + v22) >> 10));
  int v213 = *(double *)(a1 + 176);
  unsigned int v75 = v72 * v72;
  if (v74 == v49)
  {
    int v80 = 0.0;
    int v79 = 0.0;
    int v78 = 0.0;
    int v77 = 0.0;
    int v76 = 0.0;
  }

  else
  {
    v217 = v61 >> 10;
    int v76 = 0.0;
    int v77 = 0.0;
    int v78 = 0.0;
    int v79 = 0.0;
    int v80 = 0.0;
    do
    {
      if (v64 == v63) {
        int v81 = 0LL;
      }
      else {
        int v81 = *(void *)(v63 + 8 * v217) + 4 * (*(void *)(a1 + 144) & 0x3FFLL);
      }
      if (v66 == v81) {
        break;
      }
      int v82 = *v65;
      int v83 = v66;
      if (v66 == *v65) {
        int v83 = *(v65 - 1) + 4096;
      }
      unsigned int v84 = *v70;
      int v85 = v71;
      if (v71 == *v70) {
        int v85 = *(v70 - 1) + 4096;
      }
      int v86 = *v73;
      int v87 = v74;
      if (v74 == *v73) {
        int v87 = *(v73 - 1) + 4096;
      }
      int v88 = v66;
      if (v66 == v82) {
        int v88 = *(v65 - 1) + 4096;
      }
      uint64_t v89 = v74;
      if (v74 == v86) {
        uint64_t v89 = *(v73 - 1) + 4096;
      }
      int v90 = v66;
      if (v66 == v82) {
        int v90 = *(v65 - 1) + 4096;
      }
      int v91 = v71;
      if (v71 == v84) {
        int v91 = *(v70 - 1) + 4096;
      }
      int v92 = v66;
      if (v66 == v82) {
        int v92 = *(v65 - 1) + 4096;
      }
      unsigned int v93 = v74;
      if (v74 == v86) {
        unsigned int v93 = *(v73 - 1) + 4096;
      }
      if (v66 == v82)
      {
        int v94 = *--v65;
        unsigned int v66 = v94 + 4096;
      }

      int v95 = *(float *)(v83 - 4);
      if (v71 == v84)
      {
        int v96 = *--v70;
        int v71 = v96 + 4096;
      }

      if (v74 == v86)
      {
        uint64_t v97 = *--v73;
        int v74 = v97 + 4096;
      }

      int v76 = v76 + v95;
      int v77 = v77 + (float)((float)(v95 * *(float *)(v85 - 4)) * *(float *)(v87 - 4));
      int v78 = v78 + (float)(*(float *)(v88 - 4) * *(float *)(v89 - 4));
      int v79 = v79 + (float)(*(float *)(v90 - 4) * *(float *)(v91 - 4));
      int v80 = v80 + (float)((float)(*(float *)(v92 - 4) * *(float *)(v93 - 4)) * *(float *)(v93 - 4));
      v66 -= 4LL;
      v71 -= 4LL;
      v74 -= 4LL;
    }

    while (v74 != v49);
  }

  v98 = (float)((float)(v76 * v77) - (float)(v78 * v79));
  int v99 = (float)(v80 * v76) - v78 * v78;
  *(float *)&v98 = v98 / v99;
  int v100 = (float)((float)(v80 * v79) - (float)(v78 * v77)) / v99;
  *(_DWORD *)v216 = LODWORD(v98);
  *(float *)(v216 + 4) = v100;
  if (v75 > 2.0)
  {
    int v101 = *v212;
    if (*(void *)&v213 == v23)
    {
      int v103 = 0LL;
      int v104 = 0LL;
      unsigned int v102 = v214;
    }

    else
    {
      unsigned int v102 = (char *)(v23 + 8 * (v21 >> 10));
      int v103 = *(void *)v214 + 4 * (v21 & 0x3FF);
      int v104 = v101 + 4LL * (LOWORD(v211) & 0x3FF);
    }

    uint64_t v105 = v104 - v101;
    unsigned int v106 = (v104 - v101) >> 2;
    if (v105 < 9)
    {
      int v110 = 1025 - v106;
      int v108 = (char *)&v212[-(v110 >> 10)];
      uint64_t v109 = *(void *)v108 + 4LL * (~(_WORD)v110 & 0x3FF);
    }

    else
    {
      int v107 = v106 - 2;
      int v108 = (char *)&v212[v107 >> 10];
      uint64_t v109 = *(void *)v108 + 4 * (v107 & 0x3FF);
    }

    sub_100B7E168((void *)(a1 + 160), v102, v103, v108, v109);
    int v111 = *(void *)(a1 + 240);
    int v112 = *(void *)(a1 + 216);
    unsigned int v113 = (char *)(v112 + 8 * (v111 >> 10));
    if (*(void *)(a1 + 224) == v112)
    {
      int v114 = 0LL;
      v118 = 0LL;
      int v116 = (uint64_t *)(v112 + 8 * ((*(void *)(a1 + 248) + v111) >> 10));
      unsigned int v117 = *v116;
    }

    else
    {
      int v114 = *(void *)v113 + 4 * (*(void *)(a1 + 240) & 0x3FFLL);
      int v115 = *(void *)(a1 + 248) + v111;
      int v116 = (uint64_t *)(v112 + 8 * (v115 >> 10));
      unsigned int v117 = *v116;
      v118 = *v116 + 4 * (v115 & 0x3FF);
    }

    unsigned int v119 = v118 - v117;
    int v120 = v119 >> 2;
    if (v119 < 9)
    {
      uint64_t v125 = 1025 - v120;
      unsigned int v122 = (char *)&v116[-(v125 >> 10)];
      int v123 = *(void *)v122;
      uint64_t v124 = ~(_DWORD)v125 & 0x3FFLL;
    }

    else
    {
      uint64_t v121 = v120 - 2;
      unsigned int v122 = (char *)&v116[v121 >> 10];
      int v123 = *(void *)v122;
      uint64_t v124 = v121 & 0x3FF;
    }

    sub_100B7E168((void *)(a1 + 208), v113, v114, v122, v123 + 4 * v124);
    v126 = *(void *)(a1 + 192);
    int v127 = v126 >> 10;
    int v128 = *(void *)(a1 + 168);
    uint64_t v129 = *(void *)(a1 + 176);
    if (v129 == v128) {
      int v130 = 0LL;
    }
    else {
      int v130 = *(void *)(v128 + 8 * v127) + 4 * (*(void *)(a1 + 192) & 0x3FFLL);
    }
    int v131 = *(void *)(a1 + 240);
    int v132 = v131 + *(void *)(a1 + 248);
    int v133 = *(void *)(a1 + 216);
    uint64_t v134 = (void *)(v133 + 8 * (v132 >> 10));
    if (*(void *)(a1 + 224) == v133) {
      v135 = 0LL;
    }
    else {
      v135 = *v134 + 4 * (v132 & 0x3FF);
    }
    int v137 = *(void *)(a1 + 200) + v126;
    uint64_t v138 = (uint64_t *)(v128 + 8 * (v137 >> 10));
    if (v129 == v128) {
      int v139 = 0LL;
    }
    else {
      int v139 = *v138 + 4 * (v137 & 0x3FF);
    }
    int v140 = (float)((float)*(unsigned int *)(a1 + 16) - (float)*(unsigned int *)(a1 + 20)) * 0.01;
    int v136 = *(double *)(a1 + 8);
    int v141 = v136;
    if (v139 != v130)
    {
      uint64_t v142 = *(double *)(a1 + 64);
      v143 = *v138;
      do
      {
        unsigned int v144 = v139;
        if (v139 == v143) {
          unsigned int v144 = *(v138 - 1) + 4096;
        }
        int v145 = v142 + *(float *)(v144 - 4) - v141;
        *(float *)(v144 - 4) = v145;
        if (v135 == *v134)
        {
          int v146 = *--v134;
          *(float *)(v146 + 4092) = (float)(*(float *)(v146 + 4092) + *(float *)(a1 + 72)) - v140;
          v135 = v146 + 4096;
        }

        else
        {
          *(float *)(v135 - 4) = (float)(*(float *)(v135 - 4) + *(float *)(a1 + 72)) - v140;
        }

        if (v139 == v143)
        {
          int v147 = *--v138;
          v143 = v147;
          int v139 = v147 + 4096;
        }

        v135 -= 4LL;
        v139 -= 4LL;
      }

      while (v139 != v130);
    }

    *(double *)(a1 + 64) = v141;
    *(float *)(a1 + 72) = v140;
    int v148 = *(float *)(*(void *)(v133 + (((v131 + 1) >> 7) & 0x1FFFFFFFFFFFFF8LL)) + 4 * ((v131 + 1) & 0x3FF));
    unsigned int v149 = *(void *)(v133 + ((v131 >> 7) & 0x1FFFFFFFFFFFFF8LL));
    int v150 = v131 & 0x3FF;
    int v151 = *(void *)(v128 + (((v126 + 1) >> 7) & 0x1FFFFFFFFFFFFF8LL));
    v152 = (v126 + 1) & 0x3FF;
    v153 = *(void *)(v128 + 8 * v127);
    v154 = v126 & 0x3FF;
    int v156 = *(float **)(a1 + 88);
    *int v156 = v155;
    v156[1] = *(float *)(v149 + 4 * v150) - (float)(v155 * *(float *)(v153 + 4 * v154));
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101873F90);
    }
    int v157 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v158 = *((void *)a2 + 1);
      int v159 = *((_DWORD *)a2 + 4);
      int v160 = *((_DWORD *)a2 + 5);
      *(_DWORD *)buf = 134219008;
      *(void *)v235 = v158;
      *(_WORD *)&v235[8] = 1024;
      *(_DWORD *)&v235[10] = v159;
      *(_WORD *)&v235[14] = 1024;
      *(_DWORD *)&v235[16] = v160;
      *(_WORD *)&v235[20] = 2048;
      *(double *)&v235[22] = v219;
      *(_WORD *)&v235[30] = 2048;
      *(double *)&v235[32] = v75;
      _os_log_impl( (void *)&_mh_execute_header,  v157,  OS_LOG_TYPE_DEBUG,  "Input, Elevation, Online grade estimation regime change, time start, %.2lf, elevationAscended, %d, elevationDesc ended, %d,input_altitude, %.4f, Prediction Error, %.4f",  buf,  0x2Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_101873F90);
      }
      int v205 = *((void *)a2 + 1);
      v206 = *((_DWORD *)a2 + 4);
      v207 = *((_DWORD *)a2 + 5);
      int v220 = 134219008;
      *(void *)unsigned int v221 = v205;
      *(_WORD *)&v221[8] = 1024;
      *(_DWORD *)&v221[10] = v206;
      *(_WORD *)&v221[14] = 1024;
      *(_DWORD *)&v221[16] = v207;
      *(_WORD *)&v221[20] = 2048;
      *(double *)&v221[22] = v219;
      *(_WORD *)&v221[30] = 2048;
      *(double *)&v221[32] = v75;
      v208 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Input, Elevation, Online grade estimation regime change, time start, %.2lf, elevationAscended, %d , elevationDescended, %d,input_altitude, %.4f, Prediction Error, %.4f",  COERCE_DOUBLE(&v220),  44,  LODWORD(v210),  v211,  *(double *)&v212);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)",  "%s\n",  v208);
    }
  }

  v161 = *(void *)(a1 + 192);
  v162 = **(float **)(a1 + 88);
  v163 = v162
       * (float)(*(float *)(*(void *)(*(void *)(a1 + 168)
                                      + (((*(void *)(a1 + 200) + v161 - 1) >> 7) & 0x1FFFFFFFFFFFFF8LL))
                          + 4 * ((*(void *)(a1 + 200) + v161 - 1) & 0x3FF))
               - *(float *)(*(void *)(*(void *)(a1 + 168) + ((v161 >> 7) & 0x1FFFFFFFFFFFFF8LL)) + 4 * (v161 & 0x3FF)));
  int v164 = *((double *)a2 + 1);
  if (v164 - *(double *)(a1 + 80) > 15.0)
  {
    *(_BYTE *)(a1 + 76) = 0;
    *(void *)(a1 + 80) = 0xBFF0000000000000LL;
  }

  if (v163 <= 2.0)
  {
    if (v163 >= -2.0)
    {
      int v165 = *(_BYTE *)(a1 + 76) != 0;
      if (*(_BYTE *)(a1 + 76)) {
        int v166 = 3;
      }
      else {
        int v166 = 2;
      }
    }

    else
    {
      *(double *)(a1 + 80) = v164;
      int v165 = 1;
      *(_BYTE *)(a1 + 76) = 1;
      int v166 = 3;
    }
  }

  else
  {
    *(_BYTE *)(a1 + 76) = 0;
    int v165 = 1;
    int v166 = 1;
  }

  sub_1004F2598();
  unsigned int v167 = sub_1004F97F4();
  int v168 = v162;
  int v169 = *((_DWORD *)a2 + 10);
  if ((v167 & 0x1000000000LL) == 0)
  {
    v170 = v169 == 1 && v165;
    v171 = v215;
    if (v169 != 3 && !v170) {
      goto LABEL_148;
    }
    goto LABEL_147;
  }

  v171 = v215;
  if (v169 == 3) {
LABEL_147:
  }
    int v166 = 0;
LABEL_148:
  v172 = a2[3];
  int v173 = *a2;
  int v174 = a2[1];
  *(_OWORD *)(*(void *)&v171 + 32LL) = a2[2];
  *(_OWORD *)(*(void *)&v171 + 48LL) = v172;
  **(_OWORD **)&v171 = v173;
  *(_OWORD *)(*(void *)&v171 + 16LL) = v174;
  *(_DWORD *)(*(void *)&v171 + 24LL) = v166;
  *(double *)(*(void *)&v171 + 32LL) = v168;
  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101873F90);
  }
  int v175 = v163;
  unsigned int v176 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    int v177 = *(_DWORD *)(*(void *)&v171 + 24LL);
    int v178 = *((void *)a2 + 1);
    v179 = *(float **)(a1 + 88);
    v180 = *v179;
    v181 = v179[1];
    int v182 = *(void *)(a1 + 168);
    int v183 = *(float *)(*(void *)(v182
    LODWORD(v179) = *((_DWORD *)a2 + 4);
    unsigned int v185 = *((_DWORD *)a2 + 5);
    *(_DWORD *)buf = 67111680;
    *(_DWORD *)v235 = v177;
    *(_WORD *)&v235[4] = 2048;
    *(void *)&v235[6] = v178;
    *(_WORD *)&v235[14] = 2048;
    *(double *)&v235[16] = v175;
    *(_WORD *)&v235[24] = 2048;
    *(double *)&v235[26] = v168;
    *(_WORD *)&v235[34] = 2048;
    *(double *)&v235[36] = v180;
    *(_WORD *)int v236 = 2048;
    *(double *)&v236[2] = v181;
    int v237 = 2048;
    int v238 = v183;
    unsigned int v239 = 2048;
    int v240 = v184;
    int v241 = 1024;
    v242 = (int)v179;
    v243 = 1024;
    v244 = v185;
    int v245 = 2048;
    int v246 = v219;
    _os_log_impl( (void *)&_mh_execute_header,  v176,  OS_LOG_TYPE_DEBUG,  "Input, Elevation, Online grade estimation, gradeType, %d, time start, %.2lf, altitude delta, %.2f, vspeed, %.2f, f Param_m, %f, fParam_b, %f,fTimeBufferFront, %f,fTimeBufferBack, %f, elevationAscended, %d, elevationDescended, %d, input_altitude, %.4f",  buf,  0x64u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101873F90);
    }
    int v192 = *(_DWORD *)(*(void *)&v215 + 24LL);
    int v193 = *((void *)a2 + 1);
    unsigned int v194 = *(float **)(a1 + 88);
    int v195 = *v194;
    int v196 = v194[1];
    v197 = *(void *)(a1 + 168);
    v198 = *(float *)(*(void *)(v197
    LODWORD(v194) = *((_DWORD *)a2 + 4);
    int v200 = *((_DWORD *)a2 + 5);
    int v220 = 67111680;
    *(_DWORD *)unsigned int v221 = v192;
    *(_WORD *)&v221[4] = 2048;
    *(void *)&v221[6] = v193;
    *(_WORD *)&v221[14] = 2048;
    *(double *)&v221[16] = v175;
    *(_WORD *)&v221[24] = 2048;
    *(double *)&v221[26] = v168;
    *(_WORD *)&v221[34] = 2048;
    *(double *)&v221[36] = v195;
    int v222 = 2048;
    int v223 = v196;
    v224 = 2048;
    v225 = v198;
    v226 = 2048;
    int v227 = v199;
    int v228 = 1024;
    int v229 = (int)v194;
    unsigned int v230 = 1024;
    int v231 = v200;
    int v232 = 2048;
    v233 = v219;
    LODWORD(v209) = 100;
    int v201 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Input, Elevation, Online grade estimation, gradeType, %d, time start, %.2lf, altitude delta, %.2f, vspeed, %.2f, fParam_m, %f, fParam_b, %f,fTimeBufferFront, %f,fTimeBufferBack, %f, elevationAscende d, %d, elevationDescended, %d, input_altitude, %.4f",  &v220,  v209,  v210,  v211,  *(double *)&v212,  v213,  *(double *)&v214,  v215,  (_DWORD)v216,  DWORD2(v216),  *(double *)&v217);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)",  "%s\n",  v201);
  }

  if (qword_1019344D0 != -1) {
    dispatch_once(&qword_1019344D0, &stru_101873F90);
  }
  int v186 = (os_log_s *)qword_1019344D8;
  if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEBUG))
  {
    int v187 = *(_DWORD *)(*(void *)&v215 + 24LL);
    v188 = *(void *)(*(void *)&v215 + 32LL);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v235 = v187;
    *(_WORD *)&v235[4] = 2048;
    *(void *)&v235[6] = v188;
    _os_log_impl( (void *)&_mh_execute_header,  v186,  OS_LOG_TYPE_DEBUG,  "Input, Elevation, Hardware gradeTypeFilter, gradeType, %d, vspeed, %.4f",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_101873F90);
    }
    int v202 = *(_DWORD *)(*(void *)&v215 + 24LL);
    unsigned int v203 = *(void *)(*(void *)&v215 + 32LL);
    int v220 = 67109376;
    *(_DWORD *)unsigned int v221 = v202;
    *(_WORD *)&v221[4] = 2048;
    *(void *)&v221[6] = v203;
    LODWORD(v209) = 18;
    int v204 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  2LL,  "Input, Elevation, Hardware gradeTypeFilter, gradeType, %d, vspeed, %.4f",  &v220,  v209);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLElevationGradeEstimator::estimateGrade(const CLElevationChangeEntry &, CLElevationChangeEntry &)",  "%s\n",  v204);
  }

  v189 = **(_OWORD **)&v215;
  v190 = *(_OWORD *)(*(void *)&v215 + 16LL);
  int v191 = *(_OWORD *)(*(void *)&v215 + 48LL);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(*(void *)&v215 + 32LL);
  *(_OWORD *)(a1 + 48) = v191;
  *(_OWORD *)a1 = v189;
  *(_OWORD *)(a1 + 16) = v190;
  return 1LL;
}

  uint64_t v7 = *(void *)(v5 + 24);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A1D48 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  v7,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_41;
  }

  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[6];
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v14 = 11;
  }

  else if (v13 >= 0x80)
  {
    uint64_t v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2) + 1;
    uint64_t v3 = a1[14];
  }

  else
  {
    uint64_t v14 = 2;
  }

  LODWORD(v4) = v14 + v4;
  if ((v3 & 0x20) != 0)
  {
LABEL_41:
    uint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)a1[7];
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v16 = 11;
    }

    else if (v15 >= 0x80)
    {
      uint64_t v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2) + 1;
      uint64_t v3 = a1[14];
    }

    else
    {
      uint64_t v16 = 2;
    }

    LODWORD(v4) = v16 + v4;
  }

    *((_OWORD *)v8 + 3) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    v8[8] = v31;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    uint64_t v14 = sub_100C598F0(v7, &v26, (uint64_t)&unk_1012CF090, &__p.__r_.__value_.__l.__data_);
    *(_BYTE *)a3 = *((_BYTE *)v14 + 40);
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 0LL;
    *(void *)(a3 + 8) = 0LL;
    sub_10001B72C((void *)(a3 + 8), v14[6], (uint64_t)v14[7], ((char *)v14[7] - (char *)v14[6]) >> 2);
    uint64_t v10 = 1;
    goto LABEL_36;
  }

  sub_100C57F44(a1 + 8, (uint64_t)&__p);
  sub_10004ABE4((uint64_t)&v23, (__n128 *)&__p);
  if ((_BYTE)v31 && __p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  uint64_t v10 = v25;
  if (v25)
  {
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_101879C10);
    }
    uint64_t v11 = (os_log_s *)qword_101934868;
    if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
    {
      if (!v25) {
        sub_100036CD8();
      }
      sub_10099EFA8((unsigned int **)&v23, &__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v12 = &__p;
      }
      else {
        uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "@WifiChannel, apply, default 5GHz channel selector overrides, %{public}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_101934860 != -1) {
        dispatch_once(&qword_101934860, &stru_101879C10);
      }
      if (!v25) {
        sub_100036CD8();
      }
      int v19 = qword_101934868;
      sub_10099EFA8((unsigned int **)&v23, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v20 = &buf;
      }
      else {
        uint64_t v20 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v28 = 136446210;
      unsigned int v29 = v20;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v19,  1LL,  "@WifiChannel, apply, default 5GHz channel selector overrides, %{public}s",  &v28,  12);
      uint64_t v22 = v21;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual std::optional<CLWifiLocationChannelSelectionService_Type::ChannelRecommendation> CLWifiLocation5GHzChann elSelectionService::recommendedChannels(CLWifiService_Type::ScanType)",  "%s\n",  (const char *)v22);
      if (v22 != &__p) {
        free(v22);
      }
    }

    if (!v25) {
      sub_100036CD8();
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    BOOL v31 = 0LL;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    sub_10001B72C(&__p.__r_.__value_.__l.__size_, v23, (uint64_t)v24, (v24 - (_BYTE *)v23) >> 2);
    uint64_t v7 = (uint64_t **)(a1 + 96);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    uint64_t v8 = sub_100C598F0(v7, &v26, (uint64_t)&unk_1012CF090, &buf.__r_.__value_.__l.__data_);
    *((_BYTE *)v8 + 40) = __p.__r_.__value_.__s.__data_[0];
    uint64_t v13 = v8[6];
    if (v13)
    {
      v8[7] = v13;
      operator delete(v13);
      v8[6] = 0LL;
      v8[7] = 0LL;
      v8[8] = 0LL;
    }

    goto LABEL_35;
  }

  *(_BYTE *)a3 = 0;
LABEL_36:
  *(_BYTE *)(a3 + 32) = v10;
  if (v25)
  {
    if (v23)
    {
      uint64_t v24 = v23;
      operator delete(v23);
    }
  }

  int v26 = v37;
  if (__p)
  {
    int v40 = (unsigned __int8 *)__p;
    operator delete(__p);
  }

  if (v42)
  {
    int v43 = v42;
    operator delete(v42);
  }

  return v26;
}

      uint64_t v20 = 0LL;
LABEL_36:
    }
  }

  sub_1002722AC((uint64_t)buf);
}

    if (v12 <= 0) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v12 - 1;
    }
    goto LABEL_38;
  }

  if (v9 <= 6.0)
  {
    if (v8 > 45.0)
    {
      if (v9 <= 8.0)
      {
        uint64_t v16 = *(_DWORD *)(a1 + 2972);
        if (v9 <= 10.0) {
          uint64_t v11 = v16 + 4;
        }
        else {
          uint64_t v11 = v16 + 3;
        }
        goto LABEL_38;
      }

      uint64_t v12 = *(_DWORD *)(a1 + 2972);
      goto LABEL_33;
    }

    uint64_t v12 = *(_DWORD *)(a1 + 2972);
    goto LABEL_35;
  }

  uint64_t v11 = *(_DWORD *)(a1 + 2972) + 1;
LABEL_38:
  *(_DWORD *)(a1 + 2972) = v11;
  if (v11 >= 1)
  {
    if (v11 >= 0x1F)
    {
      uint64_t v11 = 30;
      *(_DWORD *)(a1 + 2972) = 30;
    }

    uint64_t v13 = (double)v11 / 40.0;
    uint64_t v3 = *(double *)(a1 + 1184) * v13 + (1.0 - v13) * v3;
    uint64_t v4 = v13 * *(double *)(a1 + 1192) + (1.0 - v13) * v4;
    if (v8 >= 0.0 && v8 > 20.0) {
      *(void *)(a1 + 1296) = *(void *)(a1 + 1232);
    }
    *(_DWORD *)(a1 + 1408) = 3;
    *(double *)(a1 + 1280) = v3;
    *(double *)(a1 + 1288) = v4;
    if (*(_BYTE *)(a1 + 96))
    {
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_1018819B8);
      }
      uint64_t v14 = (os_log_s *)qword_1019348B8;
      if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(_DWORD *)(a1 + 2972);
        *(_DWORD *)buf = 67240704;
        unsigned int v29 = v15;
        int v30 = 2050;
        BOOL v31 = v13;
        int v32 = 2050;
        uint64_t v33 = 1.0 - v13;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "CLMM,partial snapping,poorVarFactorCount,%{public}d,weightGPS,%{public}.2lf,weightSnap,%{public}.2lf",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        int v19 = *(_DWORD *)(a1 + 2972);
        v23[0] = 67240704;
        v23[1] = v19;
        uint64_t v24 = 2050;
        uint64_t v25 = v13;
        int v26 = 2050;
        int v27 = 1.0 - v13;
        LODWORD(v22) = 28;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,partial snapping,poorVarFactorCount,%{public}d,weightGPS,%{public}.2lf,weightSnap,%{public}.2lf",  v23,  v22);
        BOOL v21 = (uint8_t *)v20;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLParticleMapMatcher::performPartialMatching()", "%s\n", v20);
        if (v21 != buf) {
          free(v21);
        }
      }
    }
  }

  *(double *)(a1 + 1456) = v3;
  *(double *)(a1 + 1464) = v4;
}

  uint64_t v4 = 0LL;
  ++*(_DWORD *)(a1 + 104);
  if (!v6) {
    return v4;
  }
LABEL_189:
  int v87 = (unint64_t *)&v6->__shared_owners_;
  do
    int v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

  return v4;
}

    int v2 = v17;
    sub_1002A5590(v16);
    return v2;
  }

  return 0LL;
}

        int v19 = 1;
LABEL_46:
        v5 += 450LL;
        if ((v19 & 1) == 0) {
          goto LABEL_76;
        }
      }

      if (qword_101934910 != -1) {
        dispatch_once(&qword_101934910, &stru_101882760);
      }
      uint64_t v15 = (os_log_s *)qword_101934918;
      if (os_log_type_enabled((os_log_t)qword_101934918, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = (void *)(a1 + 8);
        uint64_t v17 = *(_DWORD *)(a1 + 740);
        uint64_t v18 = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136446723;
        unsigned int v57 = v16;
        int v58 = 1026;
        int v59 = v17;
        int v60 = 2081;
        uint64_t v61 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "#p%{public}s,#ms,%{public}d,%{private}s",  buf,  0x1Cu);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_35;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934910 != -1) {
        dispatch_once(&qword_101934910, &stru_101882760);
      }
      uint64_t v24 = (void *)(a1 + 8);
      uint64_t v25 = *(_DWORD *)(a1 + 740);
      int v26 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v50 = 136446723;
      int v51 = v24;
      int v52 = 1026;
      uint64_t v53 = v25;
      int v54 = 2081;
      int v55 = v26;
      LODWORD(v43) = 28;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934918,  1LL,  "#p%{public}s,#ms,%{public}d,%{private}s",  &v50,  v43);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProtobufSerializer::append(const std::string &)", "%s\n", v14);
      goto LABEL_57;
    }

    sub_100DA01A0((uint64_t *)a2, &__p);
    if (qword_101934910 != -1) {
      dispatch_once(&qword_101934910, &stru_101882760);
    }
    BOOL v31 = (os_log_s *)qword_101934918;
    if (os_log_type_enabled((os_log_t)qword_101934918, OS_LOG_TYPE_INFO))
    {
      int v32 = (void *)(a1 + 8);
      uint64_t v33 = *(_DWORD *)(a1 + 740);
      uint64_t v34 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136446723;
      unsigned int v57 = v32;
      int v58 = 1026;
      int v59 = v33;
      int v60 = 2081;
      uint64_t v61 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "#p%{public}s,#s,%{public}d,%{private}s",  buf,  0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934910 != -1) {
        dispatch_once(&qword_101934910, &stru_101882760);
      }
      int v40 = *(_DWORD *)(a1 + 740);
      int v41 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v50 = 136446723;
      int v51 = v4;
      int v52 = 1026;
      uint64_t v53 = v40;
      int v54 = 2081;
      int v55 = v41;
      uint64_t v42 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934918,  1LL,  "#p%{public}s,#s,%{public}d,%{private}s",  &v50,  28);
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLProtobufSerializer::append(const std::string &)", "%s\n", v42);
    }

    *((void *)this + 1) = v21 + 1;
  }

  if (qword_1019348B0 != -1) {
    dispatch_once(&qword_1019348B0, &stru_10188A8E0);
  }
  uint64_t v22 = (os_log_s *)qword_1019348B8;
  if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134350080;
    unsigned int v39 = v6;
    int v40 = 2050;
    int v41 = v15;
    uint64_t v42 = 2050;
    int v43 = v10;
    int v44 = 2050;
    int v45 = v17;
    int v46 = 2050;
    int v47 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "CLMMPED,%{public}.1lf,distToNextMulti,%{public}.1lf,distFromPriorCrumb,%{public}.1lf,fabsCourseDiffWithSnap,%{publ ic}.1lf,fabsCourseDiffWithPriorFullSnap,%{public}.1lf",  buf,  0x34u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10188A8E0);
    }
    int v28 = 134350080;
    unsigned int v29 = v6;
    int v30 = 2050;
    BOOL v31 = v15;
    int v32 = 2050;
    uint64_t v33 = v10;
    uint64_t v34 = 2050;
    int v35 = v17;
    int v36 = 2050;
    int v37 = v13;
    LODWORD(v27) = 52;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMPED,%{public}.1lf,distToNextMulti,%{public}.1lf,distFromPriorCrumb,%{public}.1lf,fabsCourseDiffWithSnap,%{publ ic}.1lf,fabsCourseDiffWithPriorFullSnap,%{public}.1lf",  &v28,  v27);
    uint64_t v24 = (uint8_t *)v23;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLParticleMM::MMFilterData::shallUseSnapCourse(const MMSnapData &)",  "%s\n",  v23);
    if (v24 != buf) {
      free(v24);
    }
  }

  return v3;
}

  char v23 = sub_100F5EF88(a2, 13);
  sub_100F5EFD0(v23, v24, (uint64_t)&v25, (uint64_t *)a3);
}

  char v23 = sub_100F5EF88(a2, 12);
  sub_100F5EFD0(v23, v24, (uint64_t)&v25, (uint64_t *)a3);
}

  char v23 = sub_100F5EF88(a2, 7);
  sub_100F5EFD0(v23, v24, (uint64_t)&v25, (uint64_t *)a3);
}

  BOOL v21 = *(_DWORD *)(a1 + 40);
  uint64_t v22 = (v21 + v3);
  if (v21 >= 1)
  {
    char v23 = 0LL;
    do
    {
      uint64_t v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100FA7EEC( *(void *)(*(void *)(a1 + 32) + 8 * v23),  a2);
      uint64_t v25 = (int)v24;
      else {
        int v26 = 1;
      }
      uint64_t v22 = (v25 + v22 + v26);
      ++v23;
    }

    while (v23 < *(int *)(a1 + 40));
  }

  *(_DWORD *)(a1 + 68) = v22;
  return v22;
}

  sub_1003C0E18(*(void *)(a1 + 80));
  unsigned int v39 = 0LL;
  if (v14) {
LABEL_36:
  }
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
LABEL_37:
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  if (v107) {
    (*(void (**)(uint64_t))(*(void *)v107 + 8LL))(v107);
  }
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  return v39;
}

    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v13,  v14,  buf,  0x26u);
    return 0LL;
  }

  if (!_os_feature_enabled_impl("CoreLocation", "StandardUT"))
  {
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_1018985D0);
    }
    int v40 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289539;
      int v86 = 0;
      int v87 = 2082;
      int v88 = "";
      uint64_t v89 = 2113;
      int v90 = a3;
      int v91 = 2113;
      int v92 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLAvengerScannerParser advertisement type check should not have allowed this else case, advertisementData:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}",  buf,  0x26u);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_1018985D0);
      }
    }

    uint64_t v12 = (os_log_s *)qword_101934848;
    if (!os_signpost_enabled((os_log_t)qword_101934848)) {
      return 0LL;
    }
    *(_DWORD *)buf = 68289539;
    int v86 = 0;
    int v87 = 2082;
    int v88 = "";
    uint64_t v89 = 2113;
    int v90 = a3;
    int v91 = 2113;
    int v92 = a4;
    uint64_t v13 = "CLAvengerScannerParser advertisement type check should not have allowed this else case";
    uint64_t v14 = "{msg%{public}.0s:CLAvengerScannerParser advertisement type check should not have allowed this else case"
          ", advertisementData:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}";
    goto LABEL_35;
  }

  uint64_t v24 = [a3 objectForKey:v10];
  uint64_t v25 = +[CBUUID UUIDWithString:](&OBJC_CLASS___CBUUID, "UUIDWithString:", @"FCB2");
  int v26 = +[CBUUID UUIDWithString:](&OBJC_CLASS___CBUUID, "UUIDWithString:", @"FEAA");
  int v27 = [v24 objectForKey:v25];
  if (v27)
  {
    int v28 = (NSMutableData *)[v24 objectForKey:v25];
  }

  else
  {
    if (![v24 objectForKey:v26])
    {
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_1018985D0);
      }
      int v54 = (os_log_s *)qword_101934848;
      if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289539;
        int v86 = 0;
        int v87 = 2082;
        int v88 = "";
        uint64_t v89 = 2113;
        int v90 = a3;
        int v91 = 2113;
        int v92 = a4;
        _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLAvengerScannerParser missing posh service data, advertisementData:%{private, lo cation:escape_only}@, rssi:%{private, location:escape_only}@}",  buf,  0x26u);
        if (qword_101934840 != -1) {
          dispatch_once(&qword_101934840, &stru_1018985D0);
        }
      }

      uint64_t v12 = (os_log_s *)qword_101934848;
      if (!os_signpost_enabled((os_log_t)qword_101934848)) {
        return 0LL;
      }
      *(_DWORD *)buf = 68289539;
      int v86 = 0;
      int v87 = 2082;
      int v88 = "";
      uint64_t v89 = 2113;
      int v90 = a3;
      int v91 = 2113;
      int v92 = a4;
      uint64_t v13 = "CLAvengerScannerParser missing posh service data";
      uint64_t v14 = "{msg%{public}.0s:CLAvengerScannerParser missing posh service data, advertisementData:%{private, "
            "location:escape_only}@, rssi:%{private, location:escape_only}@}";
      goto LABEL_35;
    }

    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_1018985D0);
    }
    int v41 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      int v86 = 0;
      int v87 = 2082;
      int v88 = "";
      uint64_t v89 = 2113;
      int v90 = a3;
      int v91 = 2113;
      int v92 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:CLAvengerScannerParser parsing backwardsPosh service data, advertisementData:%{priv ate, location:escape_only}@, rssi:%{private, location:escape_only}@}",  buf,  0x26u);
    }

    int v28 = +[NSMutableData dataWithBytes:length:]( &OBJC_CLASS___NSMutableData,  "dataWithBytes:length:",  &unk_1013DE992,  1LL);
    -[NSMutableData appendData:](v28, "appendData:", [v24 objectForKey:v26]);
  }

  if (-[NSMutableData length](v28, "length") <= 1)
  {
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_1018985D0);
    }
    uint64_t v42 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289539;
      int v86 = 0;
      int v87 = 2082;
      int v88 = "";
      uint64_t v89 = 2113;
      int v90 = a3;
      int v91 = 2113;
      int v92 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLAvengerScannerParser length not long enough to extract posh preamble, advertisement Data:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}",  buf,  0x26u);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_1018985D0);
      }
    }

    uint64_t v12 = (os_log_s *)qword_101934848;
    if (!os_signpost_enabled((os_log_t)qword_101934848)) {
      return 0LL;
    }
    *(_DWORD *)buf = 68289539;
    int v86 = 0;
    int v87 = 2082;
    int v88 = "";
    uint64_t v89 = 2113;
    int v90 = a3;
    int v91 = 2113;
    int v92 = a4;
    uint64_t v13 = "CLAvengerScannerParser length not long enough to extract posh preamble";
    uint64_t v14 = "{msg%{public}.0s:CLAvengerScannerParser length not long enough to extract posh preamble, advertiseme"
          "ntData:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}";
    goto LABEL_35;
  }

  int v43 = (unsigned __int8 *)-[NSMutableData bytes](v28, "bytes");
  int v44 = -[NSNumber initWithInt:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithInt:", *v43);
  int v45 = *v43;
  int v46 = -[NSMutableData length](v28, "length");
  if (v45 == 1)
  {
    if (v46 != (id)4 && (id)-[NSMutableData length](v28, "length") != (id)27)
    {
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_1018985D0);
      }
      int v47 = (os_log_s *)qword_101934848;
      if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289539;
        int v86 = 0;
        int v87 = 2082;
        int v88 = "";
        uint64_t v89 = 2113;
        int v90 = a3;
        int v91 = 2113;
        int v92 = a4;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLAvengerScannerParser unrecognized Apple Posh service data length, advertisementDa ta:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}",  buf,  0x26u);
        if (qword_101934840 != -1) {
          dispatch_once(&qword_101934840, &stru_1018985D0);
        }
      }

      uint64_t v12 = (os_log_s *)qword_101934848;
      if (!os_signpost_enabled((os_log_t)qword_101934848)) {
        return 0LL;
      }
      *(_DWORD *)buf = 68289539;
      int v86 = 0;
      int v87 = 2082;
      int v88 = "";
      uint64_t v89 = 2113;
      int v90 = a3;
      int v91 = 2113;
      int v92 = a4;
      uint64_t v13 = "CLAvengerScannerParser unrecognized Apple Posh service data length";
      uint64_t v14 = "{msg%{public}.0s:CLAvengerScannerParser unrecognized Apple Posh service data length, advertisement"
            "Data:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}";
      goto LABEL_35;
    }
  }

  else if ((unint64_t)v46 >= 0x1C)
  {
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_1018985D0);
    }
    unsigned int v48 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289539;
      int v86 = 0;
      int v87 = 2082;
      int v88 = "";
      uint64_t v89 = 2113;
      int v90 = a3;
      int v91 = 2113;
      int v92 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLAvengerScannerParser unrecognized non-Apple Posh service data length, advertisement Data:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}",  buf,  0x26u);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_1018985D0);
      }
    }

    uint64_t v12 = (os_log_s *)qword_101934848;
    if (!os_signpost_enabled((os_log_t)qword_101934848)) {
      return 0LL;
    }
    *(_DWORD *)buf = 68289539;
    int v86 = 0;
    int v87 = 2082;
    int v88 = "";
    uint64_t v89 = 2113;
    int v90 = a3;
    int v91 = 2113;
    int v92 = a4;
    uint64_t v13 = "CLAvengerScannerParser unrecognized non-Apple Posh service data length";
    uint64_t v14 = "{msg%{public}.0s:CLAvengerScannerParser unrecognized non-Apple Posh service data length, advertiseme"
          "ntData:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}";
    goto LABEL_35;
  }

  if (v27) {
    int v36 = v43[1];
  }
  else {
    int v36 = (v43[1] & 1) == 0;
  }
  if (v45 == 1)
  {
    int v49 = -[NSMutableData length](v28, "length");
    if ((v36 & 1) != 0)
    {
      if (v49 != (id)4)
      {
        if (qword_101934840 != -1) {
          dispatch_once(&qword_101934840, &stru_1018985D0);
        }
        int v64 = (os_log_s *)qword_101934848;
        if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289539;
          int v86 = 0;
          int v87 = 2082;
          int v88 = "";
          uint64_t v89 = 2113;
          int v90 = a3;
          int v91 = 2113;
          int v92 = a4;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLAvengerScannerParser incorrect posh service data length for Apple near owner type , advertisementData:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}",  buf,  0x26u);
          if (qword_101934840 != -1) {
            dispatch_once(&qword_101934840, &stru_1018985D0);
          }
        }

        uint64_t v12 = (os_log_s *)qword_101934848;
        if (!os_signpost_enabled((os_log_t)qword_101934848)) {
          return 0LL;
        }
        *(_DWORD *)buf = 68289539;
        int v86 = 0;
        int v87 = 2082;
        int v88 = "";
        uint64_t v89 = 2113;
        int v90 = a3;
        int v91 = 2113;
        int v92 = a4;
        uint64_t v13 = "CLAvengerScannerParser incorrect posh service data length for Apple near owner type";
        uint64_t v14 = "{msg%{public}.0s:CLAvengerScannerParser incorrect posh service data length for Apple near owner type"
              ", advertisementData:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}";
        goto LABEL_35;
      }

      unsigned int v84 = v44;
      int v50 = (unsigned __int8 *)-[NSMutableData bytes](v28, "bytes");
      int v51 = v50[2];
      int v37 = +[NSMutableData dataWithBytes:length:](&OBJC_CLASS___NSMutableData, "dataWithBytes:length:", v50 + 3, 1LL);
      int v52 = +[NSData data](&OBJC_CLASS___NSData, "data");
    }

    else
    {
      if (v49 != (id)27)
      {
        if (qword_101934840 != -1) {
          dispatch_once(&qword_101934840, &stru_1018985D0);
        }
        int v65 = (os_log_s *)qword_101934848;
        if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68289539;
          int v86 = 0;
          int v87 = 2082;
          int v88 = "";
          uint64_t v89 = 2113;
          int v90 = a3;
          int v91 = 2113;
          int v92 = a4;
          _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLAvengerScannerParser incorrect posh service data length for Apple wild type, ad vertisementData:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}",  buf,  0x26u);
          if (qword_101934840 != -1) {
            dispatch_once(&qword_101934840, &stru_1018985D0);
          }
        }

        uint64_t v12 = (os_log_s *)qword_101934848;
        if (!os_signpost_enabled((os_log_t)qword_101934848)) {
          return 0LL;
        }
        *(_DWORD *)buf = 68289539;
        int v86 = 0;
        int v87 = 2082;
        int v88 = "";
        uint64_t v89 = 2113;
        int v90 = a3;
        int v91 = 2113;
        int v92 = a4;
        uint64_t v13 = "CLAvengerScannerParser incorrect posh service data length for Apple wild type";
        uint64_t v14 = "{msg%{public}.0s:CLAvengerScannerParser incorrect posh service data length for Apple wild type, "
              "advertisementData:%{private, location:escape_only}@, rssi:%{private, location:escape_only}@}";
        goto LABEL_35;
      }

      unsigned int v84 = v44;
      int v56 = (unsigned __int8 *)-[NSMutableData bytes](v28, "bytes");
      int v51 = v56[2];
      int v37 = +[NSMutableData dataWithBytes:length:](&OBJC_CLASS___NSMutableData, "dataWithBytes:length:", v56 + 25, 2LL);
      int v52 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v56 + 3, 22LL);
    }

    int v38 = v52;
  }

  else
  {
    if ((v36 & 1) != 0 || (_os_feature_enabled_impl("CoreLocation", "StandardUTNonApple") & 1) == 0)
    {
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_1018985D0);
      }
      int v55 = qword_101934848;
      if (!os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_DEBUG)) {
        return 0LL;
      }
      *(_DWORD *)buf = 68289283;
      int v86 = 0;
      int v87 = 2082;
      int v88 = "";
      uint64_t v89 = 1025;
      LODWORD(v90) = v36 & 1;
      uint64_t v17 = "{msg%{public}.0s:CLAvengerScannerParser ignoring non apple posh, isNearOwner:%{private}hhd}";
      uint64_t v18 = (os_log_s *)v55;
      int v19 = OS_LOG_TYPE_DEBUG;
      uint64_t v20 = 24;
      goto LABEL_42;
    }

    unsigned int v84 = v44;
    int v37 = (NSMutableData *)+[NSMutableData data](&OBJC_CLASS___NSMutableData, "data");
    int v38 = +[NSData data](&OBJC_CLASS___NSData, "data");
    int v51 = 0;
  }

  if (qword_101934840 != -1) {
    dispatch_once(&qword_101934840, &stru_1018985D0);
  }
  unsigned int v57 = (os_log_s *)qword_101934848;
  int v83 = v51;
  if (!os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_INFO))
  {
    if (v45 != 1)
    {
      uint64_t v61 = 0;
      int v60 = 1;
      goto LABEL_194;
    }

  uint64_t v18 = *(_DWORD *)(a2 + 36);
  v3 |= 0x80u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 36) = v18;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "slipFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 52));
  uint64_t v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_18;
    }
LABEL_37:
    PB::TextFormatter::format(this, "userAgeBucket", *(_DWORD *)(a1 + 60));
    if ((*(_DWORD *)(a1 + 72) & 0x4000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_19;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 68), 0x12u);
  }

  int v6 = *(void *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(void *)(a1 + 144) = v6;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "resistanceLevel", *(double *)(a1 + 72));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 152), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "floors", *(_DWORD *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }

  uint64_t result = *(float *)(a2 + 52);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 52) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "isNotRunning", *(_BYTE *)(a1 + 94));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }

  uint64_t v14 = *(_DWORD *)(a2 + 92);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 92) = v14;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "firstLoft", *(_BYTE *)(a1 + 112));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "flags", *(_DWORD *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }

  uint64_t v16 = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 92) = v16;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x20000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "posPeakTimestampUs", *(void *)(a1 + 16));
  uint64_t v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }

  uint64_t v20 = *(_DWORD *)(a2 + 132);
  v6 |= 0x8000u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 132) = v20;
  uint64_t v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "inertialApproachZ", *(float *)(a1 + 120));
  uint64_t v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 1) == 0)
  {
LABEL_14:
    if ((v9 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }

  uint64_t result = *(float *)(a2 + 68);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 68) = result;
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "configPeakEnergyFpThreshold", *(float *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "configMinimumAccelNormOverEpochThreshold", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "deltaTriggerTime", *(_DWORD *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 5u);
  uint64_t v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "maxDeltaAngleShort", *(float *)(a1 + 176));
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "slowRollCumCoherentAngle", *(float *)(a1 + 180));
LABEL_10:
  int v6 = *(float **)(a1 + 8);
  uint64_t v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    PB::TextFormatter::format(this, "slowRollSegmentMaxAxisVariance", v8);
  }

  uint64_t v9 = *(float **)(a1 + 32);
  uint64_t v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    PB::TextFormatter::format(this, "slowRollSegmentMaxFiltRotRate", v11);
  }

  uint64_t v12 = *(float **)(a1 + 56);
  uint64_t v13 = *(float **)(a1 + 64);
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    PB::TextFormatter::format(this, "slowRollSegmentMinFiltRotRate", v14);
  }

  uint64_t v15 = *(unint64_t **)(a1 + 80);
  uint64_t v16 = *(unint64_t **)(a1 + 88);
  while (v15 != v16)
  {
    uint64_t v17 = *v15++;
    PB::TextFormatter::format(this, "slowRollSegmentStartTimes", v17);
  }

  uint64_t v18 = *(unint64_t **)(a1 + 104);
  int v19 = *(unint64_t **)(a1 + 112);
  while (v18 != v19)
  {
    uint64_t v20 = *v18++;
    PB::TextFormatter::format(this, "slowRollSegmentStopTimes", v20);
  }

  BOOL v21 = *(_WORD *)(a1 + 204);
  if ((v21 & 4) != 0)
  {
    PB::TextFormatter::format(this, "slowRollStartTime", *(void *)(a1 + 144));
    BOOL v21 = *(_WORD *)(a1 + 204);
    if ((v21 & 8) == 0)
    {
LABEL_22:
      if ((v21 & 0x200) == 0) {
        goto LABEL_23;
      }
      goto LABEL_39;
    }
  }

  else if ((v21 & 8) == 0)
  {
    goto LABEL_22;
  }

  PB::TextFormatter::format(this, "slowRollStopTime", *(void *)(a1 + 152));
  BOOL v21 = *(_WORD *)(a1 + 204);
  if ((v21 & 0x200) == 0)
  {
LABEL_23:
    if ((v21 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_40;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 160), 0x65u);
  uint64_t v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x4000) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }

  uint64_t v15 = *(_BYTE *)(a2 + 62);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 62) = v15;
  int v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "kEarlyDecision", *(_BYTE *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x100000) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 59), 0x132u);
  uint64_t v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }

  uint64_t v17 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 92) = v3;
  *(void *)(result + 8) = v17;
  int v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "staticGpsCount", *(_DWORD *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0xCBu);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }

  uint64_t v17 = *(_BYTE *)(a2 + 108);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 112) = v3;
  *(_BYTE *)(result + 108) = v17;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "runningDeltaVXThisImpact", *(float *)(a1 + 88));
  uint64_t v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }

  BOOL v21 = *(_BYTE *)(a2 + 148);
  v6 |= 0x10000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_BYTE *)(a1 + 148) = v21;
  uint64_t v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x40) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "peakSeparation", *(_BYTE *)(a1 + 149));
  uint64_t v11 = *(_DWORD *)(a1 + 152);
  if ((v11 & 4) == 0)
  {
LABEL_18:
    if ((v11 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 96), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "polylinesLocation1Longitude", *(double *)(a1 + 144));
  uint64_t v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104), 0xCu);
  uint64_t v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x20) == 0)
  {
LABEL_21:
    if ((v14 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168), 0xAu);
  uint64_t v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x20) == 0)
  {
LABEL_21:
    if ((v16 & 0x10) == 0) {
      goto LABEL_22;
    }
LABEL_37:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172), 0xCu);
    if ((*(_WORD *)(v3 + 192) & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  uint64_t v5 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 28) = v5;
  int v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "scaleX", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
LABEL_37:
    PB::TextFormatter::format(this, "scaleZ", *(float *)(a1 + 72));
    if ((*(_DWORD *)(a1 + 80) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_19;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 77), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 44), 0x12u);
  }

  int v6 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 44) = v6;
  if ((*(_DWORD *)(a2 + 80) & 0x200) == 0) {
    return *(float *)&v4;
  }
LABEL_36:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 80) = v3 | 0x200;
  *(_DWORD *)(a1 + 48) = v4;
  return *(float *)&v4;
}

  BOOL v21 = *(_BYTE *)(a2 + 121);
  *(_DWORD *)(a1 + 124) |= 0x10000u;
  *(_BYTE *)(a1 + 121) = v21;
  uint64_t v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x8000) == 0)
  {
LABEL_20:
    if ((v10 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "unitDistanceLargeBufferDelta", *(float *)(a1 + 92));
  uint64_t v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x200) == 0)
  {
LABEL_19:
    if ((v12 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0xCu);
  uint64_t v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x400) == 0)
  {
LABEL_19:
    if ((v11 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }

  uint64_t v12 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 52) = v12;
  int v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 0xEu);
  uint64_t v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  int v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "mode", *(_DWORD *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0xAu);
  uint64_t v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  int v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "habcBiasCorrectedDenominator", *(float *)(a1 + 36));
  uint64_t v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }

  int v19 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 72) = v19;
  if ((*(_DWORD *)(a2 + 92) & 0x10000) != 0) {
    goto LABEL_36;
  }
  return result;
}

  uint64_t v18 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 48) = v18;
  int v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "userAccelerationX", *(float *)(a1 + 76));
  uint64_t v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
LABEL_37:
    PB::TextFormatter::format(this, "userAccelerationZ", *(float *)(a1 + 84));
    if ((*(_DWORD *)(a1 + 96) & 0x8000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_19;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 92), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x12u);
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }

  uint64_t result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 48) = result;
  int v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "rotationProjectedGravityAmplitude", *(double *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 9u);
  uint64_t v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }

  uint64_t result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 72) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedMedianSqrtheightnorm", *(double *)(a1 + 96));
  uint64_t v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160), 0xDu);
  uint64_t v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApMedian", *(double *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  uint64_t v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }

  uint64_t result = *(double *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 176) = result;
  int v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x800000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2P5", *(double *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 192), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }

  uint64_t result = *(float *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 56) = result;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "accelFFTBin6", *(float *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }

  uint64_t v17 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 32) = v17;
  int v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "pocketProbEnter", *(float *)(a1 + 68));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }

  uint64_t v18 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 84) = v3;
  *(void *)(result + 32) = v18;
  int v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0) {
      goto LABEL_18;
    }
LABEL_37:
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 72));
    if ((*(_DWORD *)(a1 + 84) & 0x20000) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_19;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 0x10u);
  uint64_t v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x40) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 0x12u);
  }

  uint64_t v9 = *(_DWORD *)(a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 88) = v9;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "isStanding", *(_BYTE *)(a1 + 108));
  uint64_t v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200000) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 7u);
  uint64_t v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  uint64_t v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 3u);
  uint64_t v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }

  LODWORD(result) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 24) = LODWORD(result);
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "rotRateInerXYStd", *(float *)(a1 + 60));
  uint64_t v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xBu);
  uint64_t v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }

  uint64_t result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 40) = result;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 4) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "proxBufferMax", *(float *)(a1 + 64));
  uint64_t v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 0xFu);
  uint64_t v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }

  uint64_t v14 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 128) = v3;
  *(void *)(result + 24) = v14;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "isGradeOnsetEscalated", *(_BYTE *)(a1 + 121));
  uint64_t v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 123), 0xCu);
  uint64_t v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }

  uint64_t v8 = *(void *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 188) = v3;
  *(void *)(result + 144) = v8;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "deltaOdometerTime", *(double *)(a1 + 40));
  uint64_t v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136), 6u);
  uint64_t v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }

  uint64_t result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 136) = v3;
  *(double *)(a1 + 72) = result;
  if ((*(_DWORD *)(a2 + 136) & 2) != 0) {
    goto LABEL_36;
  }
  return result;
}

  uint64_t v10 = *(void *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 212) = v3;
  *(void *)(result + 200) = v10;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }

  PB::TextFormatter::format(this, "integratedRotationAxisWZForwards", *(double *)(a1 + 56));
  uint64_t v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176), 8u);
  uint64_t v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }

uint64_t sub_100087A58(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 128);
  if (!(_BYTE)v3)
  {
    int v5 = 0;
    goto LABEL_57;
  }

  if ((v3 & 1) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 72);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 10;
    }

    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
      int v3 = *(_DWORD *)(a1 + 128);
    }

    else
    {
      int v7 = 1;
    }

    int v4 = v7 + 1;
  }

  else
  {
    int v4 = 0;
  }

  if ((v3 & 2) != 0) {
    int v5 = v4 + 9;
  }
  else {
    int v5 = v4;
  }
  if ((v3 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A0980 + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100071D78(v8, a2);
    int v10 = (int)v9;
    else {
      int v11 = 1;
    }
    v5 += v10 + v11 + 1;
    int v3 = *(_DWORD *)(a1 + 128);
    if ((v3 & 8) == 0)
    {
LABEL_16:
      if ((v3 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_33;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_16;
  }

  uint64_t v12 = *(void *)(a1 + 24);
  if (!v12) {
    uint64_t v12 = *(void *)(qword_1019A0980 + 24);
  }
  uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10007316C(v12, a2);
  int v14 = (int)v13;
  else {
    int v15 = 1;
  }
  v5 += v14 + v15 + 1;
  int v3 = *(_DWORD *)(a1 + 128);
  if ((v3 & 0x10) == 0)
  {
LABEL_17:
    if ((v3 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }

LABEL_98:
  int v50 = *(_DWORD *)(a1 + 112);
  if (v50 < 1)
  {
    int v52 = 0;
  }

  else
  {
    uint64_t v51 = 0LL;
    int v52 = 0;
    do
    {
      if ((v53 & 0x80000000) != 0)
      {
        int v54 = 10;
      }

      else if (v53 >= 0x80)
      {
        int v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v53, a2);
        int v50 = *(_DWORD *)(a1 + 112);
      }

      else
      {
        int v54 = 1;
      }

      v52 += v54;
      ++v51;
    }

    while (v51 < v50);
  }

  uint64_t result = (v52 + v5 + 2 * v50);
  *(_DWORD *)(a1 + 124) = result;
  return result;
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D,  (int)a2,  *(double *)(v5 + 176),  a3);
  int v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_32;
    }
LABEL_100:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F,  *(unsigned __int8 *)(v5 + 115),  (BOOL)a2,  a4);
    if ((*(_DWORD *)(v5 + 364) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_101;
  }

    LOBYTE(v32) = 1;
    goto LABEL_99;
  }

  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10182B5B0);
  }
  uint64_t v36 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, metadataX, 3", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10182B5B0);
    }
    *(_WORD *)int v86 = 0;
    LODWORD(v74) = 2;
    int v63 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  0LL,  "@GtsFlow, CS, metadataX, 3",  v86,  v74);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)",  "%s\n",  v63);
    if (v63 != buf) {
      free(v63);
    }
  }

  LOBYTE(v32) = 1;
LABEL_100:
  if (qword_101934860 != -1) {
    dispatch_once(&qword_101934860, &stru_10182B5B0);
  }
  unsigned int v48 = (os_log_s *)qword_101934868;
  if (os_log_type_enabled((os_log_t)qword_101934868, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = v2;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v32;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v30;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_INFO,  "@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934860 != -1) {
      dispatch_once(&qword_101934860, &stru_10182B5B0);
    }
    *(_DWORD *)int v86 = 67240704;
    *(_DWORD *)&v86[4] = v2;
    *(_WORD *)&v86[8] = 1026;
    *(_DWORD *)&v86[10] = v32;
    *(_WORD *)&v86[14] = 1026;
    *(_DWORD *)&v86[16] = v30;
    LODWORD(v74) = 20;
    int v58 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934868,  1LL,  "@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d",  v86,  v74);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)",  "%s\n",  v58);
    if (v58 != buf) {
      free(v58);
    }
  }

  return v2 | (v32 << 8) | (v30 << 16);
}

  if ((has & 0x80) != 0)
  {
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_isStanding),  @"isStanding");
    has = (__int16)self->_has;
  }

  if ((has & 0x40) != 0)
  {
    *(float *)&int v6 = self->_tilt;
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6),  @"tilt");
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_timestamp),  @"timestamp");
  int v14 = (__int16)self->_has;
  if ((v14 & 8) != 0)
  {
    exitState = self->_exitState;
    if (exitState >= 3) {
      uint64_t v17 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_exitState);
    }
    else {
      uint64_t v17 = (NSString *)*(&off_10182CB10 + exitState);
    }
    [v3 setObject:v17 forKey:@"exitState"];
    int v14 = (__int16)self->_has;
    if ((v14 & 1) == 0)
    {
LABEL_104:
      if ((v14 & 2) == 0) {
        goto LABEL_105;
      }
LABEL_113:
      objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_startTime),  @"startTime");
      if ((*(_WORD *)&self->_has & 0x100) == 0) {
        return v3;
      }
      goto LABEL_106;
    }
  }

  else if ((v14 & 1) == 0)
  {
    goto LABEL_104;
  }

  objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", self->_estExitTime),  @"estExitTime");
  int v14 = (__int16)self->_has;
  if ((v14 & 2) != 0) {
    goto LABEL_113;
  }
LABEL_105:
  if ((v14 & 0x100) != 0) {
LABEL_106:
  }
    objc_msgSend( v3,  "setObject:forKey:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", self->_isVehicleConnected),  @"isVehicleConnected");
  return v3;
}

      goto LABEL_50;
    }

    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10183CC20);
    }
    int v31 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 134349056;
      *(void *)((char *)buf + 4) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "CLMMLE,%{public}.1lf,Flowline data not available",  (uint8_t *)buf,  0xCu);
    }

    uint64_t result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10183CC20);
      }
      LODWORD(v82) = 134349056;
      *(void *)((char *)&v82 + 4) = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMLE,%{public}.1lf,Flowline data not available",  &v82,  12);
      int v30 = (char *)v32;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLaneEstimator::getFlowlines(const CLMapRoadPtr &, const BOOL, const CLMapCrumb &, std::vector<CLMapFlowLinePtr> &)",  "%s\n",  v32);
LABEL_34:
      return 0LL;
    }
  }

  else
  {
    if (qword_1019348B0 != -1) {
      dispatch_once(&qword_1019348B0, &stru_10183CC20);
    }
    int v27 = (os_log_s *)qword_1019348B8;
    if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 134349056;
      *(void *)((char *)buf + 4) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "CLMMLE,%{public}.1lf,road is nullptr",  (uint8_t *)buf,  0xCu);
    }

    uint64_t result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348B0 != -1) {
        dispatch_once(&qword_1019348B0, &stru_10183CC20);
      }
      LODWORD(v82) = 134349056;
      *(void *)((char *)&v82 + 4) = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMMLE,%{public}.1lf,road is nullptr",  &v82,  12);
      int v30 = (char *)v29;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLLaneEstimator::getFlowlines(const CLMapRoadPtr &, const BOOL, const CLMapCrumb &, std::vector<CLMapFlowLinePtr> &)",  "%s\n",  v29);
      goto LABEL_34;
    }
  }

  return result;
}

      int v47 = &off_10182CE18;
      int v6 = *(void *)(v6 + 8);
      if (v6 == a4) {
        goto LABEL_123;
      }
    }

    int v15 = sub_100528D38((uint64_t)v7, (uint64_t)&v47);
    if (v46 != v15 && sub_100528EF4((uint64_t)(v15 + 9), v6 + 16))
    {
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_10183EE90);
      }
      uint64_t v16 = (os_log_s *)qword_101934848;
      if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v8 + 16LL))(buf, v6 + 16);
        uint64_t v17 = buf;
        if (buf[23] < 0) {
          uint64_t v17 = *(_BYTE **)buf;
        }
        __p = (void *)68289283;
        int v55 = 2082;
        int v56 = "";
        unsigned int v57 = 2081;
        int v58 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:iB: Suspending monitoring for fence, region:%{private, location:escape_only}s}",  (uint8_t *)&__p,  0x1Cu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      *(void *)buf = &off_10182CE18;
      *(_OWORD *)&buf[8] = 0u;
      int v60 = 0u;
      std::string::operator=((std::string *)&buf[8], &v48);
      *((void *)&v60 + 1) = v49;
      if ((objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 32), "vendor"),  "proxyForService:",  @"CLBTLEBeaconProvider"),  "syncgetRemoveProximityZone:",  buf) & 1) == 0)
      {
        if (qword_101934840 != -1) {
          dispatch_once(&qword_101934840, &stru_10183EE90);
        }
        int v18 = (os_log_s *)qword_101934848;
        if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_FAULT))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 16LL))(&__p, v6 + 16);
          int v19 = &__p;
          if (SBYTE3(v58) < 0) {
            int v19 = __p;
          }
          *(_DWORD *)int v50 = 136380675;
          *(void *)&v50[4] = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_FAULT,  "Unable to unmonitor the zone for fence,%{private}s",  v50,  0xCu);
          if (SBYTE3(v58) < 0) {
            operator delete(__p);
          }
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_101934840 != -1) {
            dispatch_once(&qword_101934840, &stru_10183EE90);
          }
          int v39 = qword_101934848;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v8 + 16LL))(v50, v6 + 16);
          uint64_t v40 = v50;
          if (v51 < 0) {
            uint64_t v40 = *(_BYTE **)v50;
          }
          int v52 = 136380675;
          uint64_t v53 = v40;
          LODWORD(v44) = 12;
          int v41 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v39,  17LL,  "Unable to unmonitor the zone for fence,%{private}s",  &v52,  v44);
          if (v51 < 0) {
            operator delete(*(void **)v50);
          }
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Ty pe::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)",  "%s\n",  v41);
        }
      }

      __p = &v47;
      uint64_t v20 = sub_100529190(v7, (uint64_t)&v47, (uint64_t)&unk_1012CF090, (uint64_t *)&__p);
      sub_100529560((uint64_t **)v20 + 9, v6 + 16);
      __p = &v47;
      if (!*(_BYTE *)(a4 + 28)) {
        goto LABEL_96;
      }
      BOOL v21 = *(void *)(a1 + 328);
      if (v21)
      {
        sub_10050E96C(v21, v6 + 16);
        goto LABEL_96;
      }

      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_10183EE90);
      }
      int v35 = (os_log_s *)qword_101934848;
      if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "iB: state kNotificationFenceSuspend, before first unlock",  (uint8_t *)&__p,  2u);
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_96;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_101934840 != -1) {
        dispatch_once(&qword_101934840, &stru_10183EE90);
      }
      *(_WORD *)int v50 = 0;
      LODWORD(v44) = 2;
      int v34 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  qword_101934848,  16LL,  "iB: state kNotificationFenceSuspend, before first unlock",  v50,  v44);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type:: Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)",  "%s\n",  v34);
LABEL_121:
      goto LABEL_96;
    }

    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_10183EE90);
    }
    unsigned int v29 = (os_log_s *)qword_101934848;
    if (os_log_type_enabled((os_log_t)qword_101934848, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 16LL))(&__p, v6 + 16);
      int v30 = &__p;
      if (SBYTE3(v58) < 0) {
        int v30 = __p;
      }
      *(_DWORD *)buf = 136380675;
      *(void *)&buf[4] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "iB: Fence,%{private}s, is not being monitored, the suspension request will be ignored",  buf,  0xCu);
      if (SBYTE3(v58) < 0) {
        operator delete(__p);
      }
    }

    if (!sub_1002921D0(115, 2)) {
      goto LABEL_98;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_101934840 != -1) {
      dispatch_once(&qword_101934840, &stru_10183EE90);
    }
    int v31 = qword_101934848;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)v8 + 16LL))(buf, v6 + 16);
    uint64_t v32 = buf;
    if (buf[23] < 0) {
      uint64_t v32 = *(_BYTE **)buf;
    }
    *(_DWORD *)int v50 = 136380675;
    *(void *)&v50[4] = v32;
    LODWORD(v44) = 12;
    int v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  &__p,  1628LL,  &_mh_execute_header,  v31,  2LL,  "iB: Fence,%{private}s, is not being monitored, the suspension request will be ignored",  v50,  v44);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_81;
  }

          if (v31 != buf) {
            free(v31);
          }
          goto LABEL_65;
        }

        if (qword_1019347C0 != -1) {
          dispatch_once(&qword_1019347C0, &stru_10185A968);
        }
        uint64_t v20 = (os_log_s *)qword_1019347C8;
        if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
        {
          BOOL v21 = (void *)(a1 + 120);
          *(_DWORD *)buf = 136446466;
          int v67 = v21;
          int v68 = 1026;
          LODWORD(v69) = ChildEntry;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] IORegistryEntryGetChildEntry failed for AppleSPUFastpathInterface 0x%{public}0x",  buf,  0x12u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019347C0 != -1) {
            dispatch_once(&qword_1019347C0, &stru_10185A968);
          }
          int v22 = (void *)(a1 + 120);
          *(_DWORD *)name = 136446466;
          *(void *)&name[4] = v22;
          *(_WORD *)&name[12] = 1026;
          *(_DWORD *)&name[14] = ChildEntry;
          LODWORD(v51) = 18;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] IORegistryEntryGetChildEntry failed for AppleSPUFastpathInterface 0x%{public}0x",  name,  v51);
          uint64_t v24 = (uint8_t *)v23;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)",  "%s\n",  v23);
          if (v24 != buf) {
            free(v24);
          }
        }
      }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x34,  *(_DWORD *)(v5 + 200),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
LABEL_100:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x36,  *(_DWORD *)(v5 + 216),  a2,  a4);
    if ((*(_DWORD *)(v5 + 224) & 0x20000000) == 0) {
      return result;
    }
    goto LABEL_101;
  }

              int v258 = v105;
LABEL_141:
              int v259 = v10;
LABEL_142:
              return;
            }

    sub_100890314((uint64_t *)(a1 + 1784));
    int v11 = (uint64_t *)(a1 + 1808);
  }

  sub_100890314(v11);
  return v10;
}

  uint64_t result = *(float *)(a2 + 56);
  v3 |= 0x200uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 56) = result;
  int v2 = *(void *)(a2 + 216);
  if ((v2 & 0x400000) == 0)
  {
LABEL_52:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_100:
    uint64_t result = *(float *)(a2 + 32);
    *(void *)(a1 + 216) = v3 | 8;
    *(float *)(a1 + 32) = result;
    return result;
  }

  PB::TextFormatter::format(this, "zMax", *(float *)(a1 + 204));
  int v5 = *(void *)(a1 + 216);
  if ((v5 & 0x800000000000LL) != 0) {
    goto LABEL_99;
  }
LABEL_49:
  if ((v5 & 0x1000000000000LL) != 0) {
LABEL_50:
  }
    PB::TextFormatter::format(this, "zZCTime", *(float *)(a1 + 212));
  return PB::TextFormatter::endObject(this);
}

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x30u);
  if ((*(void *)(v3 + 216) & 8) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 32), 0x31u);
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 232);
  v5 |= 0x800000000000uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 232) = result;
  int v7 = *v3;
  int v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x1000000000000LL) == 0)
  {
LABEL_33:
    if ((v7 & 0x1000000000000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_100;
  }

  PB::TextFormatter::format(this, "hgArclengthXYZBiggestImpact", *(float *)(a1 + 164));
  int v6 = *v5;
  int v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x100000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_100;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 232), 0x1Cu);
  int v6 = *v4;
  int v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x1000000000000LL) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_100;
  }

  uint64_t result = *(float *)(a2 + 224);
  v5 |= 0x20000000000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 224) = result;
  int v4 = *v3;
  int v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_100;
  }

  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold1", *(float *)(a1 + 88));
  int v6 = *v5;
  int v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_100;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 0x13u);
  int v5 = *v4;
  int v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000000LL) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_100;
  }

  uint64_t result = *(float *)(a2 + 112);
  v5 |= 0x2000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 112) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  int v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_100;
  }

  PB::TextFormatter::format(this, "kAudioDvChaosThresholdMaxRO", *(float *)(a1 + 44));
  int v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_17:
    if ((v6 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_100;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 0x6Eu);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  int v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_100;
  }

  int v22 = *(_BYTE *)(a2 + 165);
  v3 |= 0x40000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 165) = v22;
  int v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  int v2 = *(void *)(a2 + 204);
  if ((*(_WORD *)(a2 + 212) & 0x400) == 0)
  {
LABEL_20:
    if ((v2 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_100;
  }

  PB::TextFormatter::format(this, "energyMet0", *(_BYTE *)(a1 + 169));
  int v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  int v5 = *(void *)(a1 + 204);
  if ((v5 & 0x800000000000LL) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000000000000LL) == 0) {
      goto LABEL_20;
    }
    goto LABEL_100;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0x73u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  int v4 = *(void *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_21;
    }
    goto LABEL_100;
  }

          *(_DWORD *)(a1 + 36) = v31;
          break;
        case 0xC9:
          *(_BYTE *)(a1 + 40) |= 1u;
          uint64_t v33 = *((void *)this + 1);
          int v2 = *((void *)this + 2);
          int v34 = *(void *)this;
          if (v33 > 0xFFFFFFFFFFFFFFF5LL || v33 + 10 > v2)
          {
            int v54 = 0;
            int v55 = 0;
            int v37 = 0LL;
            if (v2 <= v33) {
              int v2 = *((void *)this + 1);
            }
            while (1)
            {
              if (v2 == v33)
              {
                int v37 = 0LL;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_103;
              }

              int v56 = v33++;
              unsigned int v57 = *(_BYTE *)(v34 + v56);
              *((void *)this + 1) = v33;
              v37 |= (unint64_t)(v57 & 0x7F) << v54;
              if ((v57 & 0x80) == 0) {
                break;
              }
              v54 += 7;
              int v14 = v55++ > 8;
              if (v14)
              {
                int v37 = 0LL;
                goto LABEL_102;
              }
            }

            if (*((_BYTE *)this + 24)) {
              int v37 = 0LL;
            }
LABEL_102:
            int v2 = v56 + 1;
          }

          else
          {
            int v35 = 0;
            uint64_t v36 = 0;
            int v37 = 0LL;
            while (1)
            {
              int v2 = v33 + 1;
              *((void *)this + 1) = v33 + 1;
              int v38 = *(_BYTE *)(v34 + v33);
              v37 |= (unint64_t)(v38 & 0x7F) << v35;
              if ((v38 & 0x80) == 0) {
                break;
              }
              v35 += 7;
              uint64_t v33 = v2;
              int v14 = v36++ > 8;
              if (v14)
              {
                int v37 = 0LL;
                break;
              }
            }
          }

            PB::Reader::recallMark(this, v94);
          }

          else
          {
            int v74 = *(char **)(a1 + 16);
            int v73 = *(void *)(a1 + 24);
            if ((unint64_t)v74 >= v73)
            {
              int v81 = (char *)*v10;
              int v82 = (v74 - (_BYTE *)*v10) >> 2;
              int v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 62) {
LABEL_150:
              }
                sub_100007008();
              unsigned int v84 = v73 - (void)v81;
              if (v84 >> 1 > v83) {
                int v83 = v84 >> 1;
              }
              else {
                int v85 = v83;
              }
              if (v85)
              {
                int v86 = (char *)sub_10000956C(v11, v85);
                int v81 = *(char **)(a1 + 8);
                int v74 = *(char **)(a1 + 16);
              }

              else
              {
                int v86 = 0LL;
              }

              uint64_t v89 = &v86[4 * v82];
              *(_DWORD *)uint64_t v89 = 0;
              int v72 = v89 + 4;
              while (v74 != v81)
              {
                int v90 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v89 - 1) = v90;
                v89 -= 4;
              }

              *(void *)(a1 + 8) = v89;
              *(void *)(a1 + 16) = v72;
              *(void *)(a1 + 24) = &v86[4 * v85];
              if (v81) {
                operator delete(v81);
              }
            }

            else
            {
              *(_DWORD *)int v74 = 0;
              int v72 = v74 + 4;
            }

            *(void *)(a1 + 16) = v72;
LABEL_133:
            int v91 = *((void *)this + 1);
            if (v91 <= 0xFFFFFFFFFFFFFFFBLL && v91 + 4 <= *((void *)this + 2))
            {
              *(v72 - 1) = *(_DWORD *)(*(void *)this + v91);
LABEL_137:
              uint64_t v36 = *((void *)this + 1) + 4LL;
LABEL_138:
              *((void *)this + 1) = v36;
            }

            else
            {
LABEL_135:
              *((_BYTE *)this + 24) = 1;
            }
          }

  int v49 = *(_DWORD *)(a2 + 176);
  v3 |= 0x20000000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 176) = v49;
  int v2 = *(void *)(a2 + 188);
  if ((v2 & 0x10000000000LL) == 0)
  {
LABEL_51:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_100;
  }

  PB::TextFormatter::format(this, "verticalTranslationSimilarityBaseline", *(float *)(a1 + 164));
  int v5 = *(void *)(a1 + 188);
  if ((v5 & 0x8000000000LL) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000000000LL) == 0) {
      goto LABEL_49;
    }
    goto LABEL_100;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172), 0x2Fu);
  int v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_49:
    if ((v4 & 0x800000000000LL) == 0) {
      goto LABEL_50;
    }
    goto LABEL_100;
  }

void sub_100087E7C(uint64_t a1, void *lpsrc)
{
}

void sub_100087EC8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100085FE0(a1, a2);
  }

uint64_t sub_100087F08()
{
  return 1LL;
}

void *sub_100087F10@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.RecordingEvent");
}

uint64_t sub_100087F20(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = 48;
  *(void *)a1 = off_10181BDA0;
  *(void *)(a1 + 8) = 0LL;
  *(_WORD *)(a1 + 28) = 0;
  *(void *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 48) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 64) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 80) = 0;
  sub_100085604(a1, a2);
  return a1;
}

void sub_100087F84(_Unwind_Exception *a1)
{
}

void sub_100087F9C(void *a1)
{
  uint64_t v2 = a1[2];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  uint64_t v4 = a1[4];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    operator delete((void *)v4);
  }

  uint64_t v6 = a1[5];
  if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v6 != 0)
  {
    operator delete((void *)v6);
  }

  uint64_t v8 = a1[6];
  if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v8 != 0)
  {
    operator delete((void *)v8);
  }

  uint64_t v10 = a1[8];
  if ((_UNKNOWN *)v10 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v10)
  {
    operator delete((void *)v10);
  }

void sub_10008809C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BDA0;
  sub_100087F9C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1000880CC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BDA0;
  sub_100087F9C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_100088100()
{
  v0 = operator new(0x58uLL);
  v0[6] = 48;
  *(void *)v0 = off_10181BDA0;
  *((void *)v0 + 1) = 0LL;
  *((_WORD *)v0 + 14) = 0;
  *((void *)v0 + 2) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)v0 + 4) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)v0 + 5) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)v0 + 6) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  double result = 0.0;
  *((void *)v0 + 7) = 0LL;
  *((void *)v0 + 9) = 0LL;
  *((void *)v0 + 8) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  v0[20] = 0;
  return result;
}

uint64_t sub_100088158( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_39:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v21 = ((1 << v9) & 0x76B6) == 0) : (BOOL v21 = 1), !v21))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_101228204();
            }
            *(_DWORD *)(a1 + 80) |= 1u;
            *(_DWORD *)(a1 + 24) = v9;
          }

          int v22 = (_BYTE *)*((void *)this + 1);
          if ((unint64_t)v22 < *((void *)this + 2) && *v22 == 17)
          {
            *((void *)this + 1) = v22 + 1;
            goto LABEL_51;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
        if ((_DWORD)result)
        {
          unsigned int v9 = v43[0];
          goto LABEL_39;
        }

        break;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_34;
        }
LABEL_51:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v43) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v43;
        *(_DWORD *)(a1 + 80) |= 2u;
        int v23 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        int v11 = v23 + 1;
        *((void *)this + 1) = v11;
LABEL_55:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v24 = v43[0];
          uint64_t v25 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v24 = *v11;
          uint64_t v25 = v11 + 1;
          *((void *)this + 1) = v25;
        }

        *(_BYTE *)(a1 + 28) = v24 != 0;
        int v12 = *(_DWORD *)(a1 + 80) | 4;
        *(_DWORD *)(a1 + 80) = v12;
        *((void *)this + 1) = v25 + 1;
LABEL_63:
        *(_DWORD *)(a1 + 80) = v12 | 8;
        int v26 = *(void **)(a1 + 16);
        if (v26 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v26 = operator new(0x18uLL);
          v26[1] = 0LL;
          v26[2] = 0LL;
          *int v26 = 0LL;
          *(void *)(a1 + 16) = v26;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v26);
        if (!(_DWORD)result) {
          return result;
        }
        int v27 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v27 + 1;
LABEL_69:
        *(_DWORD *)(a1 + 80) |= 0x10u;
        uint64_t v28 = *(void **)(a1 + 32);
        if (v28 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v28 = operator new(0x18uLL);
          v28[1] = 0LL;
          v28[2] = 0LL;
          *uint64_t v28 = 0LL;
          *(void *)(a1 + 32) = v28;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v28);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v29 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v29 + 1;
LABEL_75:
        *(_DWORD *)(a1 + 80) |= 0x20u;
        int v30 = *(void **)(a1 + 40);
        if (v30 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v30 = operator new(0x18uLL);
          v30[1] = 0LL;
          v30[2] = 0LL;
          *int v30 = 0LL;
          *(void *)(a1 + 40) = v30;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v30);
        if (!(_DWORD)result) {
          return result;
        }
        int v31 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v31 + 1;
LABEL_81:
        *(_DWORD *)(a1 + 80) |= 0x40u;
        uint64_t v32 = *(void **)(a1 + 48);
        if (v32 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v32 = operator new(0x18uLL);
          v32[1] = 0LL;
          v32[2] = 0LL;
          void *v32 = 0LL;
          *(void *)(a1 + 48) = v32;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v32);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v33 = (_BYTE *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        uint64_t v16 = v33 + 1;
        *((void *)this + 1) = v16;
LABEL_87:
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v34 = v43[0];
          int v35 = (_BYTE *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }

        else
        {
          unsigned int v34 = *v16;
          int v35 = v16 + 1;
          *((void *)this + 1) = v35;
        }

        *(_BYTE *)(a1 + 29) = v34 != 0;
        *(_DWORD *)(a1 + 80) |= 0x80u;
        uint64_t v17 = v35 + 1;
        *((void *)this + 1) = v17;
LABEL_95:
        if ((unint64_t)v17 >= v15 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v36 = v43[0];
        }

        else
        {
          unsigned int v36 = *v17;
          *((void *)this + 1) = v17 + 1;
        }

        if (v36 <= 1)
        {
          *(_DWORD *)(a1 + 80) |= 0x100u;
          *(_DWORD *)(a1 + 56) = v36;
        }

        int v37 = (_BYTE *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        int v14 = v37 + 1;
        *((void *)this + 1) = v14;
LABEL_105:
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v38 = v43[0];
        }

        else
        {
          unsigned int v38 = *v14;
          *((void *)this + 1) = v14 + 1;
        }

        if (v38 <= 5)
        {
          *(_DWORD *)(a1 + 80) |= 0x200u;
          *(_DWORD *)(a1 + 60) = v38;
        }

        int v39 = (_BYTE *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        int v19 = v39 + 1;
        *((void *)this + 1) = v19;
LABEL_115:
        if ((unint64_t)v19 >= v18 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v40 = v43[0];
        }

        else
        {
          unsigned int v40 = *v19;
          *((void *)this + 1) = v19 + 1;
        }

        if (v40 <= 5)
        {
          *(_DWORD *)(a1 + 80) |= 0x400u;
          *(_DWORD *)(a1 + 72) = v40;
        }

        int v41 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v41 + 1;
LABEL_125:
        *(_DWORD *)(a1 + 80) |= 0x800u;
        int v42 = *(void **)(a1 + 64);
        if (v42 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          int v42 = operator new(0x18uLL);
          v42[1] = 0LL;
          v42[2] = 0LL;
          void *v42 = 0LL;
          *(void *)(a1 + 64) = v42;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v42);
        if (!(_DWORD)result) {
          return result;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }

        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_55;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_34;
        }
        int v12 = *(_DWORD *)(a1 + 80);
        goto LABEL_63;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_69;
        }
        goto LABEL_34;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_75;
        }
        goto LABEL_34;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_81;
        }
        goto LABEL_34;
      case 8u:
        int v7 = TagFallback & 7;
        uint64_t v16 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_87;
      case 9u:
        int v7 = TagFallback & 7;
        uint64_t v17 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_95;
      case 0xAu:
        int v7 = TagFallback & 7;
        int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_105;
      case 0xBu:
        int v7 = TagFallback & 7;
        int v19 = (char *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        goto LABEL_115;
      case 0xCu:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_125;
        }
        goto LABEL_34;
      default:
        int v7 = TagFallback & 7;
LABEL_34:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_1000887D0( uint64_t result, uint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 80);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 24),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 80);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 8),  a3);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_100088944(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 80);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_60;
  }

  if ((v3 & 1) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 10;
    }

    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
      int v3 = *(_DWORD *)(a1 + 80);
    }

    else
    {
      int v7 = 1;
    }

    int v4 = v7 + 1;
  }

  else
  {
    int v4 = 0;
  }

  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  if ((v3 & 4) != 0) {
    LODWORD(sub_1012279C0(0LL, v4, v5) = v4 + 2;
  }
  else {
    LODWORD(sub_1012279C0(0LL, v4, v5) = v4;
  }
  if ((v3 & 8) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    int v9 = *(unsigned __int8 *)(v8 + 23);
    char v10 = v9;
    uint64_t v11 = *(void *)(v8 + 8);
    if ((v9 & 0x80u) == 0) {
      unint64_t v12 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12 >= 0x80)
    {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12,  a2);
      int v9 = *(unsigned __int8 *)(v8 + 23);
      uint64_t v11 = *(void *)(v8 + 8);
      int v3 = *(_DWORD *)(a1 + 80);
      char v10 = *(_BYTE *)(v8 + 23);
    }

    else
    {
      int v13 = 1;
    }

    if (v10 < 0) {
      int v9 = v11;
    }
    LODWORD(sub_1012279C0(0LL, v4, v5) = v5 + v13 + v9 + 1;
    if ((v3 & 0x10) == 0)
    {
LABEL_18:
      if ((v3 & 0x20) == 0) {
        goto LABEL_19;
      }
LABEL_39:
      uint64_t v20 = *(void *)(a1 + 40);
      int v21 = *(unsigned __int8 *)(v20 + 23);
      char v22 = v21;
      uint64_t v23 = *(void *)(v20 + 8);
      if ((v21 & 0x80u) == 0) {
        unint64_t v24 = *(unsigned __int8 *)(v20 + 23);
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24 >= 0x80)
      {
        int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v24,  a2);
        int v21 = *(unsigned __int8 *)(v20 + 23);
        uint64_t v23 = *(void *)(v20 + 8);
        int v3 = *(_DWORD *)(a1 + 80);
        char v22 = *(_BYTE *)(v20 + 23);
      }

      else
      {
        int v25 = 1;
      }

      if (v22 < 0) {
        int v21 = v23;
      }
      LODWORD(sub_1012279C0(0LL, v4, v5) = v5 + v25 + v21 + 1;
      if ((v3 & 0x40) == 0) {
        goto LABEL_57;
      }
      goto LABEL_48;
    }
  }

  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_18;
  }

  uint64_t v14 = *(void *)(a1 + 32);
  int v15 = *(unsigned __int8 *)(v14 + 23);
  char v16 = v15;
  uint64_t v17 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >= 0x80)
  {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18,  a2);
    int v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v17 = *(void *)(v14 + 8);
    int v3 = *(_DWORD *)(a1 + 80);
    char v16 = *(_BYTE *)(v14 + 23);
  }

  else
  {
    int v19 = 1;
  }

  if (v16 < 0) {
    int v15 = v17;
  }
  LODWORD(sub_1012279C0(0LL, v4, v5) = v5 + v19 + v15 + 1;
  if ((v3 & 0x20) != 0) {
    goto LABEL_39;
  }
LABEL_19:
  if ((v3 & 0x40) != 0)
  {
LABEL_48:
    uint64_t v26 = *(void *)(a1 + 48);
    int v27 = *(unsigned __int8 *)(v26 + 23);
    char v28 = v27;
    uint64_t v29 = *(void *)(v26 + 8);
    if ((v27 & 0x80u) == 0) {
      unint64_t v30 = *(unsigned __int8 *)(v26 + 23);
    }
    else {
      unint64_t v30 = v29;
    }
    if (v30 >= 0x80)
    {
      int v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v30,  a2);
      int v27 = *(unsigned __int8 *)(v26 + 23);
      uint64_t v29 = *(void *)(v26 + 8);
      int v3 = *(_DWORD *)(a1 + 80);
      char v28 = *(_BYTE *)(v26 + 23);
    }

    else
    {
      int v31 = 1;
    }

    if (v28 < 0) {
      int v27 = v29;
    }
    LODWORD(sub_1012279C0(0LL, v4, v5) = v5 + v31 + v27 + 1;
  }

void sub_100088C58(uint64_t a1, void *lpsrc)
{
}

void sub_100088CA4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100085604(a1, a2);
  }

uint64_t sub_100088CE4()
{
  return 1LL;
}

void *sub_100088CEC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.TriggerEvent");
}

void sub_100088CFC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BE18;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100088D0C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BE18;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_100088D2C()
{
  v0 = (char *)operator new(0x18uLL);
  *(void *)v0 = off_10181BE18;
  *(void *)&double result = 0x100000031LL;
  *(_OWORD *)(v0 + 8) = xmmword_1012CA3E0;
  return result;
}

uint64_t sub_100088D5C( _DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v7 = TagFallback & 7;
      char v10 = (char *)*((void *)this + 1);
      if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v11 = v18;
      }

      else
      {
        unsigned int v11 = *v10;
        *((void *)this + 1) = v10 + 1;
      }

      if (v11 - 31 < 0x19 || (v11 <= 0xE ? (BOOL v12 = ((1 << v11) & 0x76B6) == 0) : (BOOL v12 = 1), !v12))
      {
        if (v11 - 31 >= 0x19 && (v11 > 0xE || ((1 << v11) & 0x76B6) == 0)) {
          sub_101228254();
        }
        a1[5] |= 1u;
        a1[2] = v11;
      }

      uint64_t v14 = (_BYTE *)*((void *)this + 1);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v14 < v8 && *v14 == 16)
      {
        int v9 = v14 + 1;
        *((void *)this + 1) = v9;
LABEL_34:
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v17);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v17;
        }

        else
        {
          unsigned int v15 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v15 - 1 < 2 || v15 == 255)
        {
          a1[5] |= 2u;
          a1[3] = v15;
        }

        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_34;
      }
    }

    else
    {
      int v7 = TagFallback & 7;
    }

uint64_t sub_100088F5C( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 12),  a2,  a4);
  }
  return result;
}

uint64_t sub_100088FB4(uint64_t a1, unsigned int a2)
{
  char v3 = *(_BYTE *)(a1 + 20);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }

      else if (v5 >= 0x80)
      {
        if ((*(_DWORD *)(a1 + 20) & 2) == 0) {
          goto LABEL_19;
        }
      }

      else
      {
        uint64_t v4 = 2LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
    }

    else
    {
      uint64_t v4 = 0LL;
      if ((*(_BYTE *)(a1 + 20) & 2) == 0) {
        goto LABEL_19;
      }
    }

    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
    if ((v6 & 0x80000000) != 0)
    {
      int v7 = 11;
    }

    else if (v6 >= 0x80)
    {
      int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    }

    else
    {
      int v7 = 2;
    }

    uint64_t v4 = (v7 + v4);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

void sub_10008905C(_DWORD *a1, void *lpsrc)
{
}

void sub_1000890A8(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 != a1)
  {
    (*(void (**)(_DWORD *))(*(void *)a1 + 32LL))(a1);
    sub_100085938(a1, a2);
  }

uint64_t sub_1000890E8()
{
  return 1LL;
}

void *sub_1000890F0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.LegacyClientStatusUpdate");
}

void sub_100089100(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BE90;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100089110(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BE90;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

_DWORD *sub_100089130()
{
  uint64_t result = operator new(0x18uLL);
  *(void *)uint64_t result = off_10181BE90;
  result[2] = 50;
  *((_BYTE *)result + 12) = 0;
  *((void *)result + 2) = 0LL;
  return result;
}

uint64_t sub_100089164( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v7 = TagFallback & 7;
      char v10 = (char *)*((void *)this + 1);
      if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v11 = v18;
      }

      else
      {
        unsigned int v11 = *v10;
        *((void *)this + 1) = v10 + 1;
      }

      if (v11 - 31 < 0x19 || (v11 <= 0xE ? (BOOL v12 = ((1 << v11) & 0x76B6) == 0) : (BOOL v12 = 1), !v12))
      {
        if (v11 - 31 >= 0x19 && (v11 > 0xE || ((1 << v11) & 0x76B6) == 0)) {
          sub_10122827C();
        }
        *(_DWORD *)(a1 + 20) |= 1u;
        *(_DWORD *)(a1 + 8) = v11;
      }

      uint64_t v14 = (_BYTE *)*((void *)this + 1);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v14 < v8 && *v14 == 16)
      {
        int v9 = v14 + 1;
        *((void *)this + 1) = v9;
LABEL_34:
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v19);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v19;
          char v16 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v15 = *v9;
          char v16 = (unsigned __int8 *)(v9 + 1);
          *((void *)this + 1) = v16;
        }

        *(_BYTE *)(a1 + 12) = v15 != 0;
        *(_DWORD *)(a1 + 20) |= 2u;
        if (v16 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_34;
      }
    }

    else
    {
      int v7 = TagFallback & 7;
    }

uint64_t sub_100089358( uint64_t result, char a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  }
  return result;
}

uint64_t sub_1000893B0(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 20);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v4 = 11;
      }

      else if (v6 >= 0x80)
      {
        unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 20);
      }

      else
      {
        unsigned int v4 = 2;
      }
    }

    else
    {
      unsigned int v4 = 0;
    }

    if ((v3 & 2) != 0) {
      uint64_t result = v4 + 2;
    }
    else {
      uint64_t result = v4;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100089424(uint64_t a1, void *lpsrc)
{
}

void sub_100089470(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100085A3C(a1, a2);
  }

uint64_t sub_1000894B0()
{
  return 1LL;
}

void *sub_1000894B8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.SpectatingMotionUpdate");
}

void sub_1000894C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BF08;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1000894D8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BF08;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

void *sub_1000894F8()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = off_10181BF08;
  result[1] = 51LL;
  *((_DWORD *)result + 5) = 0;
  *((_DWORD *)result + 6) = 0;
  *((_WORD *)result + 8) = 0;
  return result;
}

uint64_t sub_100089528( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        unint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 < *((void *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
LABEL_29:
          if (v9 - 31 < 0x19 || (v9 <= 0xE ? (BOOL v17 = ((1 << v9) & 0x76B6) == 0) : (BOOL v17 = 1), !v17))
          {
            if (v9 - 31 >= 0x19 && (v9 > 0xE || ((1 << v9) & 0x76B6) == 0)) {
              sub_1012282A4();
            }
            *(_DWORD *)(a1 + 24) |= 1u;
            *(_DWORD *)(a1 + 8) = v9;
          }

          unsigned int v18 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
          if ((unint64_t)v18 < v10 && *v18 == 16)
          {
            int v13 = v18 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_41;
          }

          continue;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32);
        if ((_DWORD)result)
        {
          unsigned int v9 = v32;
          goto LABEL_29;
        }

        break;
      case 2u:
        int v7 = TagFallback & 7;
        int v13 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_41:
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v19 = v32;
          uint64_t v20 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v19 = *v13;
          uint64_t v20 = v13 + 1;
          *((void *)this + 1) = v20;
        }

        *(_BYTE *)(a1 + 12) = v19 != 0;
        *(_DWORD *)(a1 + 24) |= 2u;
        unsigned int v11 = v20 + 1;
        *((void *)this + 1) = v11;
LABEL_49:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v21 = v32;
          char v22 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v21 = *v11;
          char v22 = v11 + 1;
          *((void *)this + 1) = v22;
        }

        *(_BYTE *)(a1 + 13) = v21 != 0;
        *(_DWORD *)(a1 + 24) |= 4u;
        uint64_t v14 = v22 + 1;
        *((void *)this + 1) = v14;
LABEL_57:
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v23 = v32;
          unint64_t v24 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v23 = *v14;
          unint64_t v24 = v14 + 1;
          *((void *)this + 1) = v24;
        }

        *(_BYTE *)(a1 + 14) = v23 != 0;
        *(_DWORD *)(a1 + 24) |= 8u;
        BOOL v12 = v24 + 1;
        *((void *)this + 1) = v12;
LABEL_65:
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v25 = v32;
          uint64_t v26 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v25 = *v12;
          uint64_t v26 = v12 + 1;
          *((void *)this + 1) = v26;
        }

        *(_BYTE *)(a1 + 15) = v25 != 0;
        *(_DWORD *)(a1 + 24) |= 0x10u;
        unsigned int v15 = v26 + 1;
        *((void *)this + 1) = v15;
LABEL_73:
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v27 = v32;
          char v28 = (_BYTE *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v27 = *v15;
          char v28 = v15 + 1;
          *((void *)this + 1) = v28;
        }

        *(_BYTE *)(a1 + 16) = v27 != 0;
        *(_DWORD *)(a1 + 24) |= 0x20u;
        char v16 = v28 + 1;
        *((void *)this + 1) = v16;
LABEL_81:
        if ((unint64_t)v16 >= v10 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v29 = v32;
          unint64_t v30 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          unsigned int v29 = *v16;
          unint64_t v30 = (unsigned __int8 *)(v16 + 1);
          *((void *)this + 1) = v30;
        }

        *(_BYTE *)(a1 + 17) = v29 != 0;
        *(_DWORD *)(a1 + 24) |= 0x40u;
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        int v7 = TagFallback & 7;
        unsigned int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_49;
      case 4u:
        int v7 = TagFallback & 7;
        uint64_t v14 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_57;
      case 5u:
        int v7 = TagFallback & 7;
        BOOL v12 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_65;
      case 6u:
        int v7 = TagFallback & 7;
        unsigned int v15 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_73;
      case 7u:
        int v7 = TagFallback & 7;
        char v16 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_81;
      default:
        int v7 = TagFallback & 7;
LABEL_23:
        if (v7 == 4) {
          return 1LL;
        }
        return 0LL;
    }

    return result;
  }

uint64_t sub_1000899A8( uint64_t result, char a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 24);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_100089A90(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 24);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v4 = 11;
      }

      else if (v6 >= 0x80)
      {
        unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 24);
      }

      else
      {
        unsigned int v4 = 2;
      }
    }

    else
    {
      unsigned int v4 = 0;
    }

    if ((v3 & 2) != 0) {
      v4 += 2;
    }
    if ((v3 & 4) != 0) {
      v4 += 2;
    }
    if ((v3 & 8) != 0) {
      v4 += 2;
    }
    if ((v3 & 0x10) != 0) {
      v4 += 2;
    }
    if ((v3 & 0x20) != 0) {
      v4 += 2;
    }
    if ((v3 & 0x40) != 0) {
      uint64_t result = v4 + 2;
    }
    else {
      uint64_t result = v4;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void sub_100089B40(uint64_t a1, void *lpsrc)
{
}

void sub_100089B8C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_100085B28(a1, a2);
  }

uint64_t sub_100089BCC()
{
  return 1LL;
}

void *sub_100089BD4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.EnabledStateUpdate");
}

void sub_100089BE4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BF80;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100089BF4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BF80;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

_DWORD *sub_100089C14()
{
  uint64_t result = operator new(0x18uLL);
  *(void *)uint64_t result = off_10181BF80;
  result[2] = 52;
  *((_BYTE *)result + 12) = 0;
  *((void *)result + 2) = 0LL;
  return result;
}

uint64_t sub_100089C48( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v7 = TagFallback & 7;
      unint64_t v10 = (char *)*((void *)this + 1);
      if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v18);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v11 = v18;
      }

      else
      {
        unsigned int v11 = *v10;
        *((void *)this + 1) = v10 + 1;
      }

      if (v11 - 31 < 0x19 || (v11 <= 0xE ? (BOOL v12 = ((1 << v11) & 0x76B6) == 0) : (BOOL v12 = 1), !v12))
      {
        if (v11 - 31 >= 0x19 && (v11 > 0xE || ((1 << v11) & 0x76B6) == 0)) {
          sub_1012282CC();
        }
        *(_DWORD *)(a1 + 20) |= 1u;
        *(_DWORD *)(a1 + 8) = v11;
      }

      uint64_t v14 = (_BYTE *)*((void *)this + 1);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v14 < v8 && *v14 == 16)
      {
        unsigned int v9 = v14 + 1;
        *((void *)this + 1) = v9;
LABEL_34:
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v19);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v15 = v19;
          char v16 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v8 = *((void *)this + 2);
        }

        else
        {
          unsigned int v15 = *v9;
          char v16 = (unsigned __int8 *)(v9 + 1);
          *((void *)this + 1) = v16;
        }

        *(_BYTE *)(a1 + 12) = v15 != 0;
        *(_DWORD *)(a1 + 20) |= 2u;
        if (v16 == (unsigned __int8 *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        unsigned int v9 = (char *)*((void *)this + 1);
        unint64_t v8 = *((void *)this + 2);
        goto LABEL_34;
      }
    }

    else
    {
      int v7 = TagFallback & 7;
    }

uint64_t sub_100089E3C( uint64_t result, char a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(unsigned __int8 *)(v5 + 12),  a2,  a4);
  }
  return result;
}

uint64_t sub_100089E94(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 20);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v4 = 11;
      }

      else if (v6 >= 0x80)
      {
        unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 20);
      }

      else
      {
        unsigned int v4 = 2;
      }
    }

    else
    {
      unsigned int v4 = 0;
    }

    if ((v3 & 2) != 0) {
      uint64_t result = v4 + 2;
    }
    else {
      uint64_t result = v4;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100089F08(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100089F54()
{
  return 1LL;
}

void *sub_100089F5C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ScreenStateUpdate");
}

void sub_100089F6C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BFF8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100089F7C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181BFF8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_100089F9C()
{
  v0 = operator new(0x18uLL);
  void *v0 = off_10181BFF8;
  *(void *)&double result = 53LL;
  v0[1] = 53LL;
  *((_DWORD *)v0 + 4) = 0;
  return result;
}

uint64_t sub_100089FD0( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v8 = v12;
      }

      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }

      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_1012282F4();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_10008A130( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_10008A14C(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11LL;
    }

    else if (v4 >= 0x80)
    {
    }

    else
    {
      uint64_t result = 2LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_10008A1A4(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_10008A1F0()
{
  return 1LL;
}

void *sub_10008A1F8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.CloudBackupExport");
}

void sub_10008A208(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181C070;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10008A218(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181C070;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_10008A238()
{
  v0 = operator new(0x18uLL);
  void *v0 = off_10181C070;
  *(void *)&double result = 54LL;
  v0[1] = 54LL;
  *((_DWORD *)v0 + 4) = 0;
  return result;
}

uint64_t sub_10008A26C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 8) {
        break;
      }
      int v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v8 = v12;
      }

      else
      {
        unsigned int v8 = *v7;
        *((void *)this + 1) = v7 + 1;
      }

      if (v8 - 31 < 0x19 || (v8 <= 0xE ? (BOOL v9 = ((1 << v8) & 0x76B6) == 0) : (BOOL v9 = 1), !v9))
      {
        if (v8 - 31 >= 0x19 && (v8 > 0xE || ((1 << v8) & 0x76B6) == 0)) {
          sub_10122831C();
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 8) = v8;
      }

      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_10008A3CC( uint64_t result, int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_10008A3E8(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      uint64_t result = 11LL;
    }

    else if (v4 >= 0x80)
    {
    }

    else
    {
      uint64_t result = 2LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 12) = result;
  return result;
}

void sub_10008A440(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_10008A48C()
{
  return 1LL;
}

void *sub_10008A494@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.CloudBackupImport");
}

uint64_t sub_10008A4A4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_10181C0E8;
  *(_DWORD *)(a1 + 24) = 0;
  sub_10008A4F0(a1, a2);
  return a1;
}

void sub_10008A4DC(_Unwind_Exception *a1)
{
}

void sub_10008A4F0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  20314LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
    }

    if ((v5 & 2) != 0)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 2u;
      *(void *)(a1 + 8) = v7;
    }
  }

void sub_10008A598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10008A5B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181C0E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10008A5C4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181C0E8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

void *sub_10008A5E4()
{
  uint64_t result = operator new(0x20uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = off_10181C0E8;
  *((_DWORD *)result + 6) = 0;
  return result;
}

uint64_t sub_10008A610(uint64_t result)
{
  if (*(_BYTE *)(result + 24))
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)(result + 8) = 0LL;
  }

  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10008A628( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unsigned int *)(a1 + 16);
  int v6 = (unint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      uint64_t v7 = (char *)*((void *)this + 1);
      if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v7 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v9 = TagFallback & 7;
      unsigned int v12 = (char *)*((void *)this + 1);
      unint64_t v10 = *((void *)this + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (!(_DWORD)result) {
          return result;
        }
        int v13 = (_BYTE *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
      }

      else
      {
        *int v5 = *v12;
        int v13 = v12 + 1;
        *((void *)this + 1) = v13;
      }

      *(_DWORD *)(a1 + 24) |= 1u;
      if ((unint64_t)v13 < v10 && *v13 == 16)
      {
        unsigned int v11 = v13 + 1;
        *((void *)this + 1) = v11;
LABEL_24:
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v14 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }

        else
        {
          *int v6 = *v11;
          uint64_t v14 = (unsigned __int8 *)(v11 + 1);
          *((void *)this + 1) = v14;
        }

        *(_DWORD *)(a1 + 24) |= 2u;
        if (v14 == (unsigned __int8 *)v10
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }

    if (TagFallback >> 3 == 2)
    {
      int v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        unsigned int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_24;
      }
    }

    else
    {
      int v9 = TagFallback & 7;
    }

uint64_t sub_10008A7C4( uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 24);
  }

  if ((v6 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(void *)(v5 + 8),  a2,  a4);
  }
  return result;
}

uint64_t sub_10008A81C(uint64_t a1, unint64_t a2)
{
  char v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    {
      uint64_t v4 = 0LL;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v5 < 0x80)
    {
      uint64_t v4 = 2LL;
      if ((v3 & 2) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
    if ((*(_DWORD *)(a1 + 24) & 2) != 0) {
LABEL_10:
    }
      uint64_t v4 = v4
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8),  a2)
         + 1;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

void sub_10008A898(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_10008A8E4()
{
  return 1LL;
}

void *sub_10008A8EC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.ChannelAndCount");
}

void sub_10008A8FC(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v15,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  20519LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v15,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = a1[5];
      uint64_t v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  v7 + 1);
          int v7 = a1[5];
        }

        a1[5] = v7 + 1;
        unint64_t v10 = operator new(0x20uLL);
        v10[1] = 0LL;
        v10[2] = 0LL;
        *unint64_t v10 = off_10181C0E8;
        *((_DWORD *)v10 + 6) = 0;
        uint64_t v11 = *((void *)a1 + 1);
        uint64_t v12 = (int)a1[4];
        a1[4] = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *((void *)a1 + 1);
        a1[4] = v8 + 1;
        unint64_t v10 = *(void **)(v9 + 8 * v8);
      }

      sub_10008A4F0((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 16));
  }

  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 32);
    if (v13 >= 3) {
      sub_10122836C();
    }
    a1[10] |= 1u;
    a1[8] = v13;
  }

void sub_10008AA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10008AA78(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181C160;
  sub_10008D0EC((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10008AAB0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_10008AAC4()
{
  uint64_t result = operator new(0x30uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = off_10181C160;
  *((_DWORD *)result + 6) = 0;
  result[4] = 0LL;
  *((_DWORD *)result + 10) = 0;
  return result;
}

uint64_t sub_10008AAF8(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_BYTE *)(result + 40)) {
    *(_DWORD *)(result + 32) = 0;
  }
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 8 * v2);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
      ++v2;
    }

    while (v2 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_10008AB5C( int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v6 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v8 = TagFallback & 7;
        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v28;
        }

        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v10 <= 2)
        {
          a1[10] |= 1u;
          a1[8] = v10;
        }

        uint64_t v12 = (_BYTE *)*((void *)this + 1);
      }

      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_16;
      }
      while (1)
      {
        int v13 = a1[5];
        uint64_t v14 = a1[4];
        if ((int)v14 >= v13)
        {
          if (v13 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v13 + 1);
            int v13 = a1[5];
          }

          a1[5] = v13 + 1;
          char v16 = operator new(0x20uLL);
          v16[1] = 0LL;
          v16[2] = 0LL;
          void *v16 = off_10181C0E8;
          *((_DWORD *)v16 + 6) = 0;
          uint64_t v17 = *((void *)a1 + 1);
          uint64_t v18 = a1[4];
          a1[4] = v18 + 1;
          *(void *)(v17 + 8 * v18) = v16;
        }

        else
        {
          uint64_t v15 = *((void *)a1 + 1);
          a1[4] = v14 + 1;
          char v16 = *(void **)(v15 + 8 * v14);
        }

        unsigned int v19 = (char *)*((void *)this + 1);
        if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v29)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v29 = *v19;
          *((void *)this + 1) = v19 + 1;
        }

        int v20 = *((_DWORD *)this + 14);
        int v21 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v20 + 1;
        if (v20 >= v21) {
          return 0LL;
        }
        int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v29);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
        int v24 = *((_DWORD *)this + 14);
        BOOL v25 = __OFSUB__(v24, 1);
        int v26 = v24 - 1;
        if (v26 < 0 == v25) {
          *((_DWORD *)this + 14) = v26;
        }
        uint64_t v12 = (_BYTE *)*((void *)this + 1);
        unsigned int v27 = (_BYTE *)*((void *)this + 2);
        if (v12 >= v27 || *v12 != 18) {
          break;
        }
LABEL_25:
        *((void *)this + 1) = v12 + 1;
      }

      if (v12 == v27 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    int v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4) {
      return 1LL;
    }
  }

uint64_t sub_10008ADF0( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if ((*(_BYTE *)(result + 40) & 1) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 32),  (int)a2,  a4);
  }
  if (*(int *)(v5 + 16) >= 1)
  {
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  return result;
}

uint64_t sub_10008AE64(uint64_t a1, unint64_t a2)
{
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v4 & 0x80000000) != 0)
    {
      int v3 = 11;
    }

    else if (v4 >= 0x80)
    {
      int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4, a2) + 1;
    }

    else
    {
      int v3 = 2;
    }
  }

  else
  {
    int v3 = 0;
  }

  int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = (v5 + v3);
  if (v5 >= 1)
  {
    uint64_t v7 = 0LL;
    do
    {
      int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10008A81C( *(void *)(*(void *)(a1 + 8) + 8 * v7),  a2);
      int v9 = (int)v8;
      else {
        int v10 = 1;
      }
      uint64_t v6 = (v9 + v6 + v10);
      ++v7;
    }

    while (v7 < *(int *)(a1 + 16));
  }

  *(_DWORD *)(a1 + 36) = v6;
  return v6;
}

void sub_10008AF1C(_DWORD *a1, void *lpsrc)
{
}

void sub_10008AF68(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 != a1)
  {
    (*(void (**)(_DWORD *))(*(void *)a1 + 32LL))(a1);
    sub_10008A8FC(a1, a2);
  }

uint64_t sub_10008AFA8()
{
  return 1LL;
}

void *sub_10008AFB0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.WifiHistogram");
}

void sub_10008AFC0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  20730LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= 3) {
        sub_101228394();
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 16) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 24) |= 2u;
      uint64_t v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        uint64_t v7 = operator new(0x28uLL);
        v7[1] = 0LL;
        v7[2] = 0LL;
        *uint64_t v7 = off_10181AB58;
        *((_DWORD *)v7 + 6) = 0;
        v7[4] = 0LL;
        *(void *)(a1 + 8) = v7;
      }

      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A09D0 + 8);
      }
      sub_10006C44C(v7, v8);
    }
  }

void sub_10008B0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10008B0C8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_10181C1D8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A09D0 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10008B11C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

double sub_10008B130()
{
  v0 = operator new(0x20uLL);
  *(void *)&double result = 1LL;
  v0[2] = 1LL;
  void *v0 = &off_10181C1D8;
  v0[1] = 0LL;
  *((_DWORD *)v0 + 6) = 0;
  return result;
}

uint64_t sub_10008B164(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(_BYTE *)(result + 24);
  if (v2)
  {
    *(_DWORD *)(result + 16) = 1;
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 8);
      if (v3)
      {
        if (*(int *)(v3 + 16) >= 1)
        {
          uint64_t v4 = 0LL;
          do
          {
            uint64_t v5 = *(void *)(*(void *)(v3 + 8) + 8 * v4);
            double result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32LL))(v5);
            ++v4;
          }

          while (v4 < *(int *)(v3 + 16));
        }

        *(_DWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_10008B1E4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v7 = TagFallback & 7;
        uint64_t v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v21;
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 <= 2)
        {
          *(_DWORD *)(a1 + 24) |= 1u;
          *(_DWORD *)(a1 + 16) = v9;
        }

        uint64_t v11 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v11 < *((void *)this + 2) && *v11 == 18)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_25;
        }
      }

      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_15;
      }

      int v7 = TagFallback & 7;
      if (v7 == 2) {
        break;
      }
LABEL_15:
      if (v7 == 4) {
        return 1LL;
      }
    }

uint64_t sub_10008B420( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 16),  (int)a2,  a4);
    if ((*(_DWORD *)(v5 + 24) & 2) == 0) {
      return result;
    }
  }

  else if ((v6 & 2) == 0)
  {
    return result;
  }

  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A09D0 + 8);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v7,  a2,  a4);
}

uint64_t sub_10008B48C(uint64_t a1, unsigned int a2)
{
  char v3 = *(_BYTE *)(a1 + 24);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t v4 = 11LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }

      else if (v5 >= 0x80)
      {
        if ((*(_DWORD *)(a1 + 24) & 2) == 0) {
          goto LABEL_19;
        }
      }

      else
      {
        uint64_t v4 = 2LL;
        if ((v3 & 2) == 0) {
          goto LABEL_19;
        }
      }
    }

    else
    {
      uint64_t v4 = 0LL;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0) {
        goto LABEL_19;
      }
    }

    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A09D0 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10006C8FC(v6, a2);
    int v9 = (int)v7;
    else {
      int v10 = 1;
    }
    uint64_t v4 = (v4 + v9 + v10 + 1);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

void sub_10008B550(uint64_t a1, void *lpsrc)
{
}

void sub_10008B59C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10008AFC0(a1, a2);
  }

uint64_t sub_10008B5DC()
{
  return 1LL;
}

void *sub_10008B5E4@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.AnchorAppearanceConfiguration");
}

void sub_10008B5F4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v12,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  20980LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v12,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 24);
      if (v6 >= 3) {
        sub_1012283BC();
      }
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 32) |= 2u;
      uint64_t v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        uint64_t v7 = operator new(0x28uLL);
        v7[1] = 0LL;
        v7[2] = 0LL;
        *uint64_t v7 = off_10181ACC0;
        *((_DWORD *)v7 + 6) = 0;
        v7[4] = 0LL;
        *(void *)(a1 + 8) = v7;
      }

      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A09D8 + 8);
      }
      sub_10006D698(v7, v8);
      int v5 = *(_DWORD *)(a2 + 32);
    }

    if ((v5 & 4) != 0)
    {
      int v9 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 4u;
      int v10 = *(std::string **)(a1 + 16);
      if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v10 = (std::string *)operator new(0x18uLL);
        v10->__r_.__value_.__l.__size_ = 0LL;
        v10->__r_.__value_.__l.__cap_ = 0LL;
        v10->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 16) = v10;
      }

      std::string::operator=(v10, v9);
    }
  }

void sub_10008B72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10008B744(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    operator delete((void *)v2);
  }

  if (qword_1019A09D8 != a1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

void sub_10008B7BC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181C250;
  sub_10008B744((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10008B7EC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181C250;
  sub_10008B744((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10008B820()
{
  v0 = operator new(0x28uLL);
  *(void *)&double result = 2LL;
  v0[3] = 2LL;
  void *v0 = off_10181C250;
  v0[1] = 0LL;
  v0[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((_DWORD *)v0 + 8) = 0;
  return result;
}

uint64_t sub_10008B860(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 32);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 24) = 2;
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *(void *)(result + 8);
      if (v3)
      {
        if (*(int *)(v3 + 16) >= 1)
        {
          uint64_t v4 = 0LL;
          do
          {
            uint64_t v5 = *(void *)(*(void *)(v3 + 8) + 8 * v4);
            double result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32LL))(v5);
            ++v4;
          }

          while (v4 < *(int *)(v3 + 16));
        }

        *(_DWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 32);
      }
    }

    if ((v2 & 4) != 0)
    {
      uint64_t v6 = *(void *)(v1 + 16);
      if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t sub_10008B91C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        unsigned int v7 = TagFallback >> 3;
        int v8 = TagFallback & 7;
        int v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v24);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v10 = v24;
        }

        else
        {
          unsigned int v10 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        if (v10 <= 2)
        {
          *(_DWORD *)(a1 + 32) |= 1u;
          *(_DWORD *)(a1 + 24) = v10;
        }

        uint64_t v12 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 18)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_28;
        }
      }

      if (v7 == 2) {
        break;
      }
      if (v7 == 3)
      {
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_42;
        }
      }

      else
      {
        int v8 = TagFallback & 7;
      }

uint64_t sub_10008BBD4( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 24),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return result;
      }
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A09D8 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v7,  a2,  a4);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes(3LL, *(void *)(v5 + 16), a2);
  }
  return result;
}

uint64_t sub_10008BC5C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_29;
  }

  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
      goto LABEL_19;
    }
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A09D8 + 8);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10006DB48(v6, a2);
    int v8 = (int)v7;
    else {
      int v9 = 1;
    }
    uint64_t v4 = (v4 + v8 + v9 + 1);
    int v3 = *(_DWORD *)(a1 + 32);
    goto LABEL_19;
  }

  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v4 = 11LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

  else
  {
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }

    uint64_t v4 = 2LL;
    if ((v3 & 2) != 0) {
      goto LABEL_13;
    }
  }

void sub_10008BD78(uint64_t a1, void *lpsrc)
{
}

void sub_10008BDC4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10008B5F4(a1, a2);
  }

uint64_t sub_10008BE04()
{
  return 1LL;
}

void *sub_10008BE0C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.AnchorValueStatisticsConfiguration");
}

uint64_t sub_10008BE1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10181C2C8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  sub_10008BE70(a1, a2);
  return a1;
}

void sub_10008BE5C(_Unwind_Exception *a1)
{
}

void sub_10008BE70(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v15,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  21304LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v15,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 48);
  if (!(_BYTE)v5) {
    return;
  }
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 40);
    if (v6 >= 3) {
      sub_1012283E4();
    }
    *(_DWORD *)(a1 + 48) |= 1u;
    *(_DWORD *)(a1 + 40) = v6;
    int v5 = *(_DWORD *)(a2 + 48);
  }

  if ((v5 & 2) == 0)
  {
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_13:
    *(_DWORD *)(a1 + 48) |= 4u;
    int v8 = *(void **)(a1 + 16);
    if (!v8)
    {
      int v8 = operator new(0x30uLL);
      v8[1] = 0LL;
      v8[2] = 0LL;
      *int v8 = off_10181C160;
      *((_DWORD *)v8 + 6) = 0;
      v8[4] = 0LL;
      *((_DWORD *)v8 + 10) = 0;
      *(void *)(a1 + 16) = v8;
    }

    uint64_t v9 = *(void *)(a2 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A09E0 + 16);
    }
    sub_10008A8FC(v8, v9);
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 8) == 0)
    {
LABEL_10:
      if ((v5 & 0x10) == 0) {
        return;
      }
      goto LABEL_23;
    }

    goto LABEL_18;
  }

  uint64_t v7 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 48) |= 2u;
  *(void *)(a1 + 8) = v7;
  int v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 4) != 0) {
    goto LABEL_13;
  }
LABEL_9:
  if ((v5 & 8) == 0) {
    goto LABEL_10;
  }
LABEL_18:
  *(_DWORD *)(a1 + 48) |= 8u;
  uint64_t v10 = *(void **)(a1 + 24);
  if (!v10)
  {
    uint64_t v10 = operator new(0x20uLL);
    v10[2] = 1LL;
    *uint64_t v10 = &off_10181C1D8;
    v10[1] = 0LL;
    *((_DWORD *)v10 + 6) = 0;
    *(void *)(a1 + 24) = v10;
  }

  uint64_t v11 = *(void *)(a2 + 24);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_1019A09E0 + 24);
  }
  sub_10008AFC0((uint64_t)v10, v11);
  if ((*(_DWORD *)(a2 + 48) & 0x10) != 0)
  {
LABEL_23:
    *(_DWORD *)(a1 + 48) |= 0x10u;
    char v12 = *(void **)(a1 + 32);
    if (!v12)
    {
      char v12 = operator new(0x28uLL);
      v12[3] = 2LL;
      *char v12 = off_10181C250;
      v12[1] = 0LL;
      v12[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((_DWORD *)v12 + 8) = 0;
      *(void *)(a1 + 32) = v12;
    }

    uint64_t v13 = *(void *)(a2 + 32);
    if (!v13) {
      uint64_t v13 = *(void *)(qword_1019A09E0 + 32);
    }
    sub_10008B5F4((uint64_t)v12, v13);
  }

void sub_10008C054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_10008C070(void *result)
{
  if ((void *)qword_1019A09E0 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t v3 = v1[3];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t result = (void *)v1[4];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_10008C0E0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181C2C8;
  sub_10008C070(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10008C110(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181C2C8;
  sub_10008C070(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

double sub_10008C144()
{
  v0 = (char *)operator new(0x38uLL);
  *(void *)v0 = off_10181C2C8;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 36) = 0u;
  return result;
}

uint64_t sub_10008C178(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 48);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 40) = 0;
    *(void *)(result + 8) = 0LL;
    if ((v2 & 4) != 0)
    {
      double result = *(void *)(result + 16);
      if (result)
      {
        double result = sub_10008AAF8(result);
        int v2 = *(_DWORD *)(v1 + 48);
      }
    }

    if ((v2 & 8) != 0)
    {
      double result = *(void *)(v1 + 24);
      if (result)
      {
        double result = sub_10008B164(result);
        int v2 = *(_DWORD *)(v1 + 48);
      }
    }

    if ((v2 & 0x10) != 0)
    {
      double result = *(void *)(v1 + 32);
      if (result) {
        double result = sub_10008B860(result);
      }
    }
  }

  *(_DWORD *)(v1 + 48) = 0;
  return result;
}

uint64_t sub_10008C1E0( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_6;
    }

    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        int v8 = (char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v41);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v9 = v41[0];
        }

        else
        {
          unsigned int v9 = *v8;
          *((void *)this + 1) = v8 + 1;
        }

        if (v9 <= 2)
        {
          *(_DWORD *)(a1 + 48) |= 1u;
          *(_DWORD *)(a1 + 40) = v9;
        }

        char v12 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v12 < *((void *)this + 2) && *v12 == 17)
        {
          *((void *)this + 1) = v12 + 1;
          goto LABEL_29;
        }

        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_19;
        }
LABEL_29:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v41) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v41;
        int v10 = *(_DWORD *)(a1 + 48) | 2;
        *(_DWORD *)(a1 + 48) = v10;
        uint64_t v13 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v13 + 1;
LABEL_33:
        *(_DWORD *)(a1 + 48) = v10 | 4;
        char v14 = *(void **)(a1 + 16);
        if (!v14)
        {
          char v14 = operator new(0x30uLL);
          v14[1] = 0LL;
          v14[2] = 0LL;
          *char v14 = off_10181C160;
          *((_DWORD *)v14 + 6) = 0;
          v14[4] = 0LL;
          *((_DWORD *)v14 + 10) = 0;
          *(void *)(a1 + 16) = v14;
        }

        int v15 = (char *)*((void *)this + 1);
        if ((unint64_t)v15 >= *((void *)this + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v41)) {
            return 0LL;
          }
        }

        else
        {
          v41[0] = *v15;
          *((void *)this + 1) = v15 + 1;
        }

        int v16 = *((_DWORD *)this + 14);
        int v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17) {
          return 0LL;
        }
        int v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v41[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        int v20 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v20, 1);
        int v22 = v20 - 1;
        if (v22 < 0 == v21) {
          *((_DWORD *)this + 14) = v22;
        }
        unsigned int v23 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v23 + 1;
LABEL_47:
        *(_DWORD *)(a1 + 48) |= 8u;
        unsigned int v24 = *(void **)(a1 + 24);
        if (!v24)
        {
          unsigned int v24 = operator new(0x20uLL);
          v24[2] = 1LL;
          *unsigned int v24 = &off_10181C1D8;
          v24[1] = 0LL;
          *((_DWORD *)v24 + 6) = 0;
          *(void *)(a1 + 24) = v24;
        }

        unsigned int v25 = (char *)*((void *)this + 1);
        if ((unint64_t)v25 >= *((void *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v41)) {
            return 0LL;
          }
        }

        else
        {
          v41[0] = *v25;
          *((void *)this + 1) = v25 + 1;
        }

        int v26 = *((_DWORD *)this + 14);
        int v27 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v26 + 1;
        if (v26 >= v27) {
          return 0LL;
        }
        int v28 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v41[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v28);
        int v30 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v30, 1);
        int v31 = v30 - 1;
        if (v31 < 0 == v21) {
          *((_DWORD *)this + 14) = v31;
        }
        unsigned int v32 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v32 + 1;
LABEL_61:
        *(_DWORD *)(a1 + 48) |= 0x10u;
        int v33 = *(void **)(a1 + 32);
        if (!v33)
        {
          int v33 = operator new(0x28uLL);
          v33[3] = 2LL;
          *int v33 = off_10181C250;
          v33[1] = 0LL;
          v33[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
          *((_DWORD *)v33 + 8) = 0;
          *(void *)(a1 + 32) = v33;
        }

        unsigned int v34 = (char *)*((void *)this + 1);
        if ((unint64_t)v34 >= *((void *)this + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v41)) {
            return 0LL;
          }
        }

        else
        {
          v41[0] = *v34;
          *((void *)this + 1) = v34 + 1;
        }

        int v35 = *((_DWORD *)this + 14);
        int v36 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v35 + 1;
        if (v35 >= v36) {
          return 0LL;
        }
        int v37 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v41[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v37);
        int v39 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v39, 1);
        int v40 = v39 - 1;
        if (v40 < 0 == v21) {
          *((_DWORD *)this + 14) = v40;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }

        break;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_19;
        }
        int v10 = *(_DWORD *)(a1 + 48);
        goto LABEL_33;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_47;
        }
        goto LABEL_19;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_19;
        }
        goto LABEL_61;
      default:
        int v7 = TagFallback & 7;
LABEL_19:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_10008C6AC( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 48);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 40),  (int)a2,  a4);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v5 + 8),  a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_10008C78C(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_35;
  }

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v4 = 11;
    }

    else if (v6 >= 0x80)
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 48);
    }

    else
    {
      unsigned int v4 = 2;
    }
  }

  else
  {
    unsigned int v4 = 0;
  }

  if ((v3 & 2) != 0) {
    uint64_t v5 = v4 + 9;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 4) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A09E0 + 16);
    }
    uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10008AE64(v7, a2);
    int v9 = (int)v8;
    else {
      int v10 = 1;
    }
    uint64_t v5 = (v5 + v9 + v10 + 1);
    int v3 = *(_DWORD *)(a1 + 48);
    if ((v3 & 8) == 0)
    {
LABEL_15:
      if ((v3 & 0x10) == 0) {
        goto LABEL_35;
      }
      goto LABEL_29;
    }
  }

  else if ((v3 & 8) == 0)
  {
    goto LABEL_15;
  }

  uint64_t v11 = *(void *)(a1 + 24);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_1019A09E0 + 24);
  }
  char v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10008B48C(v11, a2);
  int v13 = (int)v12;
  else {
    int v14 = 1;
  }
  uint64_t v5 = (v5 + v13 + v14 + 1);
  if ((*(_DWORD *)(a1 + 48) & 0x10) != 0)
  {
LABEL_29:
    uint64_t v15 = *(void *)(a1 + 32);
    if (!v15) {
      uint64_t v15 = *(void *)(qword_1019A09E0 + 32);
    }
    int v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10008BC5C(v15, a2);
    int v18 = (int)v16;
    else {
      int v19 = 1;
    }
    uint64_t v5 = (v5 + v18 + v19 + 1);
  }

void sub_10008C8EC(uint64_t a1, void *lpsrc)
{
}

void sub_10008C938(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10008BE70(a1, a2);
  }

uint64_t sub_10008C978()
{
  return 1LL;
}

void *sub_10008C980@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.Configuration");
}

void *sub_10008C990(void *a1, uint64_t a2)
{
  *a1 = off_10181C340;
  a1[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[3] = 0LL;
  sub_10008C9E0((uint64_t)a1, a2);
  return a1;
}

void sub_10008C9CC(_Unwind_Exception *a1)
{
}

void sub_10008C9E0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v11,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/proto/gen-cpp/microlocation.pb.cc",  21530LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v11,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      int v6 = *(const std::string **)(a2 + 8);
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v7 = *(std::string **)(a1 + 8);
      if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        uint64_t v7 = (std::string *)operator new(0x18uLL);
        v7->__r_.__value_.__l.__size_ = 0LL;
        v7->__r_.__value_.__l.__cap_ = 0LL;
        v7->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 8) = v7;
      }

      std::string::operator=(v7, v6);
      int v5 = *(_DWORD *)(a2 + 28);
    }

    if ((v5 & 2) != 0)
    {
      uint64_t v8 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      int v9 = *(std::string **)(a1 + 16);
      if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        int v9 = (std::string *)operator new(0x18uLL);
        v9->__r_.__value_.__l.__size_ = 0LL;
        v9->__r_.__value_.__l.__cap_ = 0LL;
        v9->__r_.__value_.__r.__words[0] = 0LL;
        *(void *)(a1 + 16) = v9;
      }

      std::string::operator=(v9, v8);
    }
  }

void sub_10008CAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10008CAFC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181C340;
  sub_10007A578((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10008CB2C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_10181C340;
  sub_10007A578((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

void *sub_10008CB60()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = off_10181C340;
  result[1] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[2] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  result[3] = 0LL;
  return result;
}

uint64_t sub_10008CB90(uint64_t result)
{
  if (*(_BYTE *)(result + 28))
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      uint64_t v1 = *(void *)(result + 8);
      if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v1 + 23) < 0)
        {
          **(_BYTE **)uint64_t v1 = 0;
          *(void *)(v1 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v1 = 0;
          *(_BYTE *)(v1 + 23) = 0;
        }
      }
    }

    if ((*(_BYTE *)(result + 28) & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 16);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }
  }

  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_10008CC0C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!(_DWORD)TagFallback) {
            return 1LL;
          }
        }

        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_25;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        uint64_t v8 = *(void **)(a1 + 8);
        if (v8 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        {
          uint64_t v8 = operator new(0x18uLL);
          v8[1] = 0LL;
          v8[2] = 0LL;
          *uint64_t v8 = 0LL;
          *(void *)(a1 + 8) = v8;
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v8);
        if (!(_DWORD)result) {
          return result;
        }
        char v10 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 18)
        {
          *((void *)this + 1) = v10 + 1;
          goto LABEL_17;
        }
      }

      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_25;
      }

      int v7 = TagFallback & 7;
      if (v7 == 2) {
        break;
      }
LABEL_25:
      if (v7 == 4) {
        return 1LL;
      }
    }

uint64_t sub_10008CDA0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes( 1LL,  *(void *)(result + 8),  a2);
    int v4 = *(_DWORD *)(v3 + 28);
  }

  if ((v4 & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString(2LL, *(void *)(v3 + 16), a2);
  }
  return result;
}

uint64_t sub_10008CDF8(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0LL;
    goto LABEL_24;
  }

  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
  {
    uint64_t v4 = 0LL;
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }

  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(unsigned __int8 *)(v5 + 23);
  char v7 = v6;
  uint64_t v8 = *(void *)(v5 + 8);
  if ((v6 & 0x80u) == 0) {
    unint64_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9,  a2);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v8 = *(void *)(v5 + 8);
    int v10 = v11 + 1;
    int v3 = *(_DWORD *)(a1 + 28);
    char v7 = *(_BYTE *)(v5 + 23);
  }

  else
  {
    int v10 = 2;
  }

  if (v7 < 0) {
    int v6 = v8;
  }
  uint64_t v4 = (v10 + v6);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(unsigned __int8 *)(v12 + 23);
    char v14 = v13;
    uint64_t v15 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      unint64_t v16 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16 >= 0x80)
    {
      int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16,  a2);
      int v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v15 = *(void *)(v12 + 8);
      char v14 = *(_BYTE *)(v12 + 23);
    }

    else
    {
      int v17 = 1;
    }

    if (v14 < 0) {
      int v13 = v15;
    }
    uint64_t v4 = (v4 + v17 + v13 + 1);
  }

void sub_10008CEE8(uint64_t a1, void *lpsrc)
{
}

void sub_10008CF34(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    sub_10008C9E0(a1, a2);
  }

uint64_t sub_10008CF74()
{
  return 1LL;
}

void *sub_10008CF7C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLMicroLocationProto.RapportDevice");
}

uint64_t sub_10008CF8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_10008CF94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_10008CF9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_10008CFA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_10008CFAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_10008CFB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_10008CFBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_10008CFC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t sub_10008CFCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_10008CFD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 188);
}

uint64_t sub_10008CFDC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_10008CFE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t sub_10008CFEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_10008CFF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_10008CFFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_10008D004(uint64_t a1)
{
  return *(unsigned int *)(a1 + 288);
}

uint64_t sub_10008D00C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_10008D014(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_10008D01C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void sub_10008D024(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 < a2)
  {
    uint64_t v4 = *(void **)a1;
    int v5 = 2 * v2;
    if (v5 <= a2) {
      int v5 = a2;
    }
    if (v5 <= 4) {
      int v5 = 4;
    }
    *(_DWORD *)(a1 + 12) = v5;
    int v6 = operator new[](8LL * v5);
    *(void *)a1 = v6;
    if (v4)
    {
      memcpy(v6, v4, 8LL * *(int *)(a1 + 8));
      operator delete[](v4);
    }
  }

uint64_t sub_10008D09C(uint64_t result)
{
  if (*(int *)(result + 8) >= 1)
  {
    uint64_t v1 = 0LL;
    do
    {
      uint64_t v2 = *(void *)(*(void *)result + 8 * v1);
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0LL;
      }

      else
      {
        *(_BYTE *)uint64_t v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }

      ++v1;
    }

    while (v1 < *(int *)(result + 8));
  }

  *(_DWORD *)(result + 8) = 0;
  return result;
}

void sub_10008D0EC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    for (uint64_t i = 0LL; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*(void *)a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
        int v2 = *(_DWORD *)(a1 + 12);
      }
    }
  }

  if (*(void *)a1) {
    operator delete[](*(void **)a1);
  }
}

void sub_10008D154(uint64_t a1)
{
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v2 = 0LL;
    do
      wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete(*(void *)(*(void *)a1
                                                                                                + 8 * v2++));
    while (v2 < *(int *)(a1 + 12));
  }

  if (*(void *)a1) {
    operator delete[](*(void **)a1);
  }
}

void sub_10008D1B0(wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *a1, uint64_t a2)
{
  if (*(int *)(a2 + 8) >= 1)
  {
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = *(void *)(*(void *)a2 + 8 * v4);
      int v6 = *((_DWORD *)a1 + 3);
      uint64_t v7 = *((int *)a1 + 2);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)a1 + 4))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(a1, v6 + 1);
          int v6 = *((_DWORD *)a1 + 3);
        }

        *((_DWORD *)a1 + 3) = v6 + 1;
        unint64_t v9 = operator new(0x70uLL);
        v9[1] = 0LL;
        v9[2] = 0LL;
        *unint64_t v9 = off_10181A978;
        *((_DWORD *)v9 + 6) = 0;
        v9[9] = 0LL;
        v9[10] = 0LL;
        *((_DWORD *)v9 + 22) = 0;
        v9[4] = 0LL;
        v9[5] = 0LL;
        v9[6] = 0LL;
        v9[7] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        v9[8] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((_WORD *)v9 + 48) = 0;
        *((_DWORD *)v9 + 25) = 0;
        *((_DWORD *)v9 + 26) = 0;
        uint64_t v10 = *(void *)a1;
        uint64_t v11 = *((int *)a1 + 2);
        *((_DWORD *)a1 + 2) = v11 + 1;
        *(void *)(v10 + 8 * v11) = v9;
      }

      else
      {
        uint64_t v8 = *(void *)a1;
        *((_DWORD *)a1 + 2) = v7 + 1;
        unint64_t v9 = *(void **)(v8 + 8 * v7);
      }

      sub_100069D70((uint64_t)v9, v5);
      ++v4;
    }

    while (v4 < *(int *)(a2 + 8));
  }

void sub_10008D2BC(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

char *sub_10008D2C8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[31] < 0) {
    return (char *)sub_1010DD48C((_BYTE *)a2, *((void **)result + 1), *((void *)result + 2));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 16) = *((void *)result + 3);
  return result;
}

uint64_t sub_10008D2F4(uint64_t a1, char a2)
{
  *(void *)a1 = off_10181C9E8;
  sub_1010DDBC0((void *)(a1 + 8), "No Name Given");
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 48) = a1 + 56;
  *(_BYTE *)(a1 + 32) = 0;
  *(void *)(a1 + 64) = 0LL;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CA38);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:StateBase}",  (uint8_t *)v6,  0x12u);
  }

  *(_BYTE *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  sub_1000229D4(a1 + 48, *(char **)(a1 + 56));
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)(a1 + 80) = 0LL;
  return a1;
}

uint64_t sub_10008D43C(uint64_t a1)
{
  *(void *)a1 = off_10181C9E8;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CA38);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    __int16 v6 = 2082;
    __int16 v7 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:~StateBase}",  (uint8_t *)v5,  0x12u);
  }

  int v3 = *(char **)(a1 + 56);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  sub_1000229D4(a1 + 48, v3);
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  sub_1000229D4(a1 + 48, 0LL);
  return a1;
}

void sub_10008D574(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10008D43C(a1);
  operator delete(v1);
}

void *sub_10008D588(void *a1)
{
  *a1 = &off_10181CA08;
  a1[4] = 0LL;
  a1[3] = 0LL;
  uint64_t v2 = a1 + 3;
  a1[2] = a1 + 3;
  int v3 = a1 + 2;
  sub_10008E83C((uint64_t)(a1 + 2), 0LL);
  a1[4] = 0LL;
  a1[5] = 0LL;
  *int v3 = v2;
  void *v2 = 0LL;
  a1[1] = 0LL;
  a1[6] = 0LL;
  return a1;
}

void *sub_10008D5F4(void *a1)
{
  *a1 = &off_10181CA08;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CA38);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
  {
    v9[0] = 68289026;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:~StateMachineBase}",  (uint8_t *)v9,  0x12u);
  }

  int v3 = (void *)a1[2];
  if (v3 != a1 + 3)
  {
    do
    {
      uint64_t v4 = v3[7];
      v3[7] = 0LL;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      }
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          __int16 v6 = v5;
          uint64_t v5 = (void *)*v5;
        }

        while (v5);
      }

      else
      {
        do
        {
          __int16 v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          int v3 = v6;
        }

        while (!v7);
      }

      int v3 = v6;
    }

    while (v6 != a1 + 3);
  }

  a1[1] = 0LL;
  a1[5] = 0LL;
  a1[6] = 0LL;
  sub_10008E83C((uint64_t)(a1 + 2), (void *)a1[3]);
  return a1;
}

uint64_t sub_10008D760(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  BOOL v7 = a2;
  uint64_t v4 = sub_10008E95C((uint64_t **)(a1 + 16), (const void **)a2, (uint64_t)&unk_1012CF090, &v7);
  uint64_t v5 = *a3;
  *a3 = 0LL;
  uint64_t result = v4[7];
  v4[7] = v5;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_10008D7C4(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__p, (void *)*a2, a2[1]);
  }

  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v10 = a2[2];
  }

  uint64_t v4 = sub_10008E8D0((uint64_t)(a1 + 2), (const void **)__p);
  if (a1 + 3 == (void *)v4) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 56);
  }
  if (SHIBYTE(v10) < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_9;
    }
  }

  else if (v5)
  {
LABEL_9:
    sub_10008DA00(a1, v5);
    return;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CA38);
  }
  __int16 v6 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
  {
    BOOL v7 = v2;
    *(_DWORD *)buf = 68289283;
    int v12 = 0;
    __int16 v13 = 2082;
    char v14 = "";
    __int16 v15 = 2081;
    unint64_t v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:State Machine: Failed to initialize state because requested state doesn't exist in the stat e table, State:%{private, location:escape_only}s}",  buf,  0x1Cu);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CA38);
    }
  }

  uint64_t v8 = (os_log_s *)qword_1019348D8;
  if (os_signpost_enabled((os_log_t)qword_1019348D8))
  {
    *(_DWORD *)buf = 68289283;
    int v12 = 0;
    __int16 v13 = 2082;
    char v14 = "";
    __int16 v15 = 2081;
    unint64_t v16 = v2;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "State Machine: Failed to initialize state because requested state doesn't exist in the state table",  "{msg%{public}.0s:State Machine: Failed to initialize state because requested state doesn't exist in the stat e table, State:%{private, location:escape_only}s}",  buf,  0x1Cu);
  }

void sub_10008D9DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_10008DA00(void *a1, uint64_t a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CA38);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)(a2 + 8);
    int v11 = 68289283;
    int v12 = 0;
    __int16 v13 = 2082;
    char v14 = "";
    __int16 v15 = 2081;
    unint64_t v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:State Machine: Entering new state, New State:%{private, location:escape_only}s}",  (uint8_t *)&v11,  0x1Cu);
  }

  uint64_t v6 = a1[1];
  if (v6 && *(_BYTE *)(v6 + 32)) {
    a1[6] = v6;
  }
  a1[5] = v6;
  a1[1] = a2;
  BOOL v7 = *(void (****)(void, void *))(a2 + 40);
  if (v7)
  {
    (**v7)(v7, a1);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CA38);
    }
    uint64_t v8 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = a1[1];
      uint64_t v10 = (void *)(v9 + 8);
      int v11 = 68289283;
      int v12 = 0;
      __int16 v13 = 2082;
      char v14 = "";
      __int16 v15 = 2081;
      unint64_t v16 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:State Machine: State did not have an entry function, State:%{private, location:escape_only}s}",  (uint8_t *)&v11,  0x1Cu);
    }
  }

uint64_t sub_10008DBE0(void *a1, uint64_t a2)
{
  if (!a1[1])
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CA38);
    }
    uint64_t v5 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 31) < 0)
      {
        sub_1010DD48C(__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
      }

      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
        *(void *)&__p[16] = *(void *)(a2 + 24);
      }

      int v20 = __p;
      if (__p[23] < 0) {
        int v20 = *(_BYTE **)__p;
      }
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(void *)&buf[20] = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:State Machine: Failed to handle event because current state is NULL, Event:%{privat e, location:escape_only}s}",  buf,  0x1Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CA38);
      }
    }

    uint64_t v21 = qword_1019348D8;
    if (!os_signpost_enabled((os_log_t)qword_1019348D8)) {
      return 0LL;
    }
    if (*(char *)(a2 + 31) < 0)
    {
      sub_1010DD48C(__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }

    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
      *(void *)&__p[16] = *(void *)(a2 + 24);
    }

    int v22 = __p;
    if (__p[23] < 0) {
      int v22 = *(_BYTE **)__p;
    }
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(void *)&buf[20] = v22;
    unsigned int v23 = "State Machine: Failed to handle event because current state is NULL";
    unsigned int v24 = "{msg%{public}.0s:State Machine: Failed to handle event because current state is NULL, Event:%{priv"
          "ate, location:escape_only}s}";
    unsigned int v25 = (os_log_s *)v21;
    uint32_t v26 = 28;
    goto LABEL_111;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CA38);
  }
  uint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 31) < 0)
    {
      sub_1010DD48C(__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }

    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
      *(void *)&__p[16] = *(void *)(a2 + 24);
    }

    uint64_t v6 = __p;
    if (__p[23] < 0) {
      uint64_t v6 = *(_BYTE **)__p;
    }
    uint64_t v7 = a1[1];
    uint64_t v8 = (void *)(v7 + 8);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(void *)&buf[20] = v6;
    __int16 v48 = 2081;
    int v49 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:State Machine: Handling Event, Event:%{private, location:escape_only}s, Current Sta te:%{private, location:escape_only}s}",  buf,  0x26u);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  uint64_t v9 = a1[1];
  uint64_t v10 = (_OWORD *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1010DD48C(buf, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }

  else
  {
    *(_OWORD *)buf = *v10;
    *(void *)&buf[16] = *(void *)(a2 + 24);
  }

  uint64_t v11 = sub_10008E8D0(v9 + 48, (const void **)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (a1[1] + 56LL == v11)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CA38);
    }
    char v14 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 31) < 0)
      {
        sub_1010DD48C(__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
      }

      else
      {
        *(_OWORD *)__p = *v10;
        *(void *)&__p[16] = *(void *)(a2 + 24);
      }

      int v36 = __p;
      if (__p[23] < 0) {
        int v36 = *(_BYTE **)__p;
      }
      uint64_t v37 = a1[1];
      unsigned int v38 = (void *)(v37 + 8);
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(void *)&buf[20] = v36;
      __int16 v48 = 2081;
      int v49 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:State Machine: Failed to handle event because it is not a valid event for the current sta te, Event:%{private, location:escape_only}s, Current State:%{private, location:escape_only}s}",  buf,  0x26u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CA38);
      }
    }

    uint64_t v39 = qword_1019348D8;
    if (!os_signpost_enabled((os_log_t)qword_1019348D8)) {
      return 0LL;
    }
    if (*(char *)(a2 + 31) < 0)
    {
      sub_1010DD48C(__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }

    else
    {
      *(_OWORD *)__p = *v10;
      *(void *)&__p[16] = *(void *)(a2 + 24);
    }

    int v40 = __p;
    if (__p[23] < 0) {
      int v40 = *(_BYTE **)__p;
    }
    uint64_t v41 = a1[1];
    unint64_t v42 = (void *)(v41 + 8);
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(void *)&buf[20] = v40;
    __int16 v48 = 2081;
    int v49 = v42;
    unsigned int v23 = "State Machine: Failed to handle event because it is not a valid event for the current state";
    unsigned int v24 = "{msg%{public}.0s:State Machine: Failed to handle event because it is not a valid event for the current s"
          "tate, Event:%{private, location:escape_only}s, Current State:%{private, location:escape_only}s}";
    unsigned int v25 = (os_log_s *)v39;
    uint32_t v26 = 38;
LABEL_111:
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v23,  v24,  buf,  v26);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    return 0LL;
  }

  (***(void (****)(_BYTE *__return_ptr, void, void *, uint64_t))(v11 + 56))( buf,  *(void *)(v11 + 56),  a1,  a2);
  if (!buf[24])
  {
LABEL_69:
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CA38);
    }
    unsigned int v29 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = a1[1];
      int v31 = (void *)(v30 + 8);
      *(void *)__p = 68289283LL;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2081;
      *(void *)&__p[20] = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:State Machine: , New State:%{private, location:escape_only}s}",  __p,  0x1Cu);
    }

    uint64_t v18 = 1LL;
    goto LABEL_76;
  }

  uint64_t v12 = a1[1];
  if (*(char *)(v12 + 31) < 0)
  {
    sub_1010DD48C(__p, *(void **)(v12 + 8), *(void *)(v12 + 16));
  }

  else
  {
    __int128 v13 = *(_OWORD *)(v12 + 8);
    *(void *)&__p[16] = *(void *)(v12 + 24);
    *(_OWORD *)__p = v13;
  }

  BOOL v15 = sub_10008E5A8(buf, __p);
  BOOL v16 = v15;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v16) {
      goto LABEL_36;
    }
    goto LABEL_44;
  }

  if (!v15)
  {
LABEL_44:
    if (!buf[24]) {
      sub_100036CD8();
    }
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_1010DD48C(v44, *(void **)buf, *(unint64_t *)&buf[8]);
    }

    else
    {
      *(_OWORD *)uint64_t v44 = *(_OWORD *)buf;
      uint64_t v45 = *(void *)&buf[16];
    }

    uint64_t v27 = sub_10008E8D0((uint64_t)(a1 + 2), (const void **)v44);
    if (a1 + 3 == (void *)v27) {
      uint64_t v28 = 0LL;
    }
    else {
      uint64_t v28 = *(void *)(v27 + 56);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    if (!v28)
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CA38);
      }
      unsigned int v32 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
      {
        if (!buf[24]) {
          sub_100036CD8();
        }
        int v33 = buf;
        if (buf[23] < 0) {
          int v33 = *(_BYTE **)buf;
        }
        *(void *)__p = 68289283LL;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2081;
        *(void *)&__p[20] = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:State Machine: Failed to switch to new state because requested state doesn't exist in t he state table, State:%{private, location:escape_only}s}",  __p,  0x1Cu);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CA38);
        }
      }

      unsigned int v34 = (os_log_s *)qword_1019348D8;
      if (os_signpost_enabled((os_log_t)qword_1019348D8))
      {
        if (!buf[24]) {
          sub_100036CD8();
        }
        int v35 = buf;
        if (buf[23] < 0) {
          int v35 = *(_BYTE **)buf;
        }
        *(void *)__p = 68289283LL;
        *(_WORD *)&__p[8] = 2082;
        *(void *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2081;
        *(void *)&__p[20] = v35;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v34,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "State Machine: Failed to switch to new state because requested state doesn't exist in the state table",  "{msg%{public}.0s:State Machine: Failed to switch to new state because requested state doesn't exist in t he state table, State:%{private, location:escape_only}s}",  __p,  0x1Cu);
      }

      uint64_t v18 = 0LL;
      goto LABEL_76;
    }

    sub_10008E650((uint64_t)a1);
    sub_10008DA00(a1, v28);
    goto LABEL_69;
  }

void sub_10008E54C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25, char a26)
{
  if (a26)
  {
    if (a25 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

BOOL sub_10008E5A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[24];
  if (a1[24])
  {
    uint64_t v3 = a1[23];
    if ((v3 & 0x80u) == 0LL) {
      uint64_t v4 = a1[23];
    }
    else {
      uint64_t v4 = *((void *)a1 + 1);
    }
    uint64_t v5 = a2[23];
    int v6 = (char)v5;
    if ((v5 & 0x80u) != 0LL) {
      uint64_t v5 = *((void *)a2 + 1);
    }
    if (v4 == v5)
    {
      if (v6 < 0) {
        a2 = *(unsigned __int8 **)a2;
      }
      if ((v3 & 0x80) != 0)
      {
        return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
      }

      else if (a1[23])
      {
        uint64_t v7 = v3 - 1;
        do
        {
          int v9 = *a1++;
          int v8 = v9;
          int v11 = *a2++;
          int v10 = v11;
          BOOL v13 = v7-- != 0;
          BOOL v14 = v8 == v10;
          uint64_t v2 = v8 == v10;
        }

        while (v14 && v13);
      }

      else
      {
        return 1LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

void sub_10008E650(uint64_t a1)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CA38);
  }
  uint64_t v2 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = (void *)(v3 + 8);
    int v9 = 68289283;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2081;
    BOOL v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:State Machine: Exiting State, State:%{private, location:escape_only}s}",  (uint8_t *)&v9,  0x1Cu);
  }

  uint64_t v5 = *(void (****)(void, uint64_t))(*(void *)(a1 + 8) + 72LL);
  if (v5)
  {
    (**v5)(v5, a1);
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CA38);
    }
    int v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      int v8 = (void *)(v7 + 8);
      int v9 = 68289283;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2081;
      BOOL v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:State Machine: State did not have an exit function, State:%{private, location:escape_only}s}",  (uint8_t *)&v9,  0x1Cu);
    }
  }

void sub_10008E810(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10008E83C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10008E83C(a1, *a2);
    sub_10008E83C(a1, a2[1]);
    sub_10008E884((uint64_t)(a2 + 4));
    operator delete(a2);
  }

void sub_10008E884(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
}

uint64_t sub_10008E8D0(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_100022920(v5, (const void **)(v3 + 32), a2);
    int v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      int v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }

    uint64_t v3 = *v8;
  }

  while (*v8);
  return v6;
}

uint64_t *sub_10008E95C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v6 = (uint64_t **)sub_1000227E8((uint64_t)a1, &v11, a2);
  BOOL v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    sub_10008EA04((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000085FC(a1, v11, v8, v10[0]);
    BOOL v7 = v10[0];
    v10[0] = 0LL;
    sub_10008EA94((uint64_t)v10, 0LL);
  }

  return v7;
}

_BYTE *sub_10008EA04@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_1010DD48C(result, *(void **)v8, *((void *)v8 + 1));
  }

  else
  {
    __int128 v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }

  *((void *)v6 + 7) = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10008EA7C(_Unwind_Exception *a1)
{
}

void sub_10008EA94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10008E884((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }

void *sub_10008EAD8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, (&off_10181CAC0)[a1]);
}

id sub_10008EAEC(int a1, void *a2, const std::string *a3)
{
  if (!a1) {
    return 0LL;
  }
  id v5 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  sub_100103634(a2, (uint64_t)&__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  objc_msgSend( v5,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p),  @"domain");
  [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:@"cancelled"];
  [v5 setObject:&__kCFBooleanFalse forKeyedSubscript:@"valid"];
  if (a3[1].__r_.__value_.__s.__data_[0])
  {
    sub_100060770(a3, &__p);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      BOOL v7 = &__p;
    }
    else {
      BOOL v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    objc_msgSend( v5,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7),  @"clientIdentifier");
  }

  return v5;
}

void sub_10008EC20( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008EC40(uint64_t result, void *a2, void *a3, char a4, double a5)
{
  double v57 = a5;
  if (result)
  {
    int v8 = (void *)result;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    int v56 = 1065353216;
    unint64_t v9 = sub_1000EFCD4(a2);
    if (a4) {
      v9 += sub_1000EFCD4(a3);
    }
    objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v9),  @"numFingerprints");
    if (5 * (v9 / 5) >= 0x1F4) {
      unint64_t v10 = 500LL;
    }
    else {
      unint64_t v10 = 5 * (v9 / 5);
    }
    objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v10),  @"numFingerprintsBounded");
    if (v9)
    {
      double v52 = 1.79769313e308;
      double v53 = -1.79769313e308;
      double v50 = 1.79769313e308;
      double v51 = -1.79769313e308;
      v48[1] = 0LL;
      double v49 = 0.0;
      int v47 = (uint64_t *)v48;
      v48[0] = 0LL;
      v46[0] = 0LL;
      v46[1] = 0LL;
      v44[1] = 0LL;
      uint64_t v45 = (uint64_t *)v46;
      int v43 = (uint64_t *)v44;
      v44[0] = 0LL;
      uint64_t v41 = -1LL;
      uint64_t v42 = 0LL;
      unint64_t v40 = 0LL;
      v39[0] = &v57;
      v39[1] = &v54;
      v39[2] = &v53;
      v39[3] = &v52;
      v39[4] = &v51;
      v39[5] = &v50;
      v39[6] = &v49;
      v39[7] = &v47;
      v39[8] = &v45;
      v39[9] = &v43;
      v39[10] = &v42;
      v39[11] = &v41;
      v39[12] = &v40;
      sub_10008F4F8((uint64_t)v39, a2);
      if (a4) {
        sub_10008F4F8((uint64_t)v39, a3);
      }
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v53),  @"ageOfOldestFingerprint");
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)v53),  @"ageOfOldestFingerprintBounded");
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v52),  @"ageOfNewestFingerprint");
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v51),  @"maxFingerprintDuration");
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v50),  @"minFingerprintDuration");
      double v11 = (double)v9;
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v49 / (double)v9),  @"avgFingerprintDuration");
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v42),  @"maxFingerprintSize");
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v41),  @"minFingerprintSize");
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)v40 / (double)v9),  @"avgFingerprintSize");
      uint64_t v12 = v44[0];
      if (v44[0])
      {
        __int16 v13 = (int *)v44;
        BOOL v14 = (int *)v44[0];
        do
        {
          BOOL v15 = v14;
          BOOL v16 = v13;
          int v17 = v14[8];
          if (v17 >= 1) {
            __int16 v13 = v14;
          }
          else {
            v14 += 2;
          }
          BOOL v14 = *(int **)v14;
        }

        while (v14);
        if (v13 != (int *)v44)
        {
          if (v17 < 1) {
            BOOL v15 = v16;
          }
          if (v15[8] <= 1)
          {
            int v38 = 1;
            int v58 = &v38;
            objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  sub_10000C858(&v47, &v38, (uint64_t)&unk_1012CF090, &v58)[5]),  @"maxWifiFingerprintSize");
            int v38 = 1;
            int v58 = &v38;
            objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  sub_10000C858(&v45, &v38, (uint64_t)&unk_1012CF090, &v58)[5]),  @"minWifiFingerprintSize");
            int v38 = 1;
            int v58 = &v38;
            objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:]( NSNumber,  "numberWithDouble:",  (double)(unint64_t)sub_10000C858(&v43, &v38, (uint64_t)&unk_1012CF090, &v58)[5] / v11),  @"avgWifiFingerprintSize");
            uint64_t v12 = v44[0];
          }
        }

        if (v12)
        {
          uint64_t v18 = (int *)v44;
          int v19 = (int *)v12;
          do
          {
            int v20 = v19;
            uint64_t v21 = v18;
            int v22 = v19[8];
            if (v22 >= 5) {
              uint64_t v18 = v19;
            }
            else {
              v19 += 2;
            }
            int v19 = *(int **)v19;
          }

          while (v19);
          if (v18 != (int *)v44)
          {
            if (v22 < 5) {
              int v20 = v21;
            }
            if (v20[8] <= 5)
            {
              int v38 = 5;
              int v58 = &v38;
              objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  sub_10000C858(&v47, &v38, (uint64_t)&unk_1012CF090, &v58)[5]),  @"maxBleFingerprintSize");
              int v38 = 5;
              int v58 = &v38;
              objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  sub_10000C858(&v45, &v38, (uint64_t)&unk_1012CF090, &v58)[5]),  @"minBleFingerprintSize");
              int v38 = 5;
              int v58 = &v38;
              objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:]( NSNumber,  "numberWithDouble:",  (double)(unint64_t)sub_10000C858(&v43, &v38, (uint64_t)&unk_1012CF090, &v58)[5] / v11),  @"avgBleFingerprintSize");
              uint64_t v12 = v44[0];
            }
          }

          if (v12)
          {
            unsigned int v23 = v44;
            do
            {
              unsigned int v24 = v12;
              unsigned int v25 = v23;
              int v26 = *((_DWORD *)v12 + 8);
              uint64_t v27 = v12 + 1;
              if (v26 >= 6)
              {
                uint64_t v27 = v24;
                unsigned int v23 = (void **)v24;
              }

              uint64_t v12 = (void *)*v27;
            }

            while (v12);
            if (v23 != v44)
            {
              uint64_t v28 = (int *)(v26 >= 6 ? v24 : v25);
              if (v28[8] <= 6)
              {
                int v38 = 6;
                int v58 = &v38;
                objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  sub_10000C858(&v47, &v38, (uint64_t)&unk_1012CF090, &v58)[5]),  @"maxUwbFingerprintSize");
                int v38 = 6;
                int v58 = &v38;
                objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  sub_10000C858(&v45, &v38, (uint64_t)&unk_1012CF090, &v58)[5]),  @"minUwbFingerprintSize");
                int v38 = 6;
                int v58 = &v38;
                objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:]( NSNumber,  "numberWithDouble:",  (double)(unint64_t)sub_10000C858(&v43, &v38, (uint64_t)&unk_1012CF090, &v58)[5] / v11),  @"avgUwbFingerprintSize");
              }
            }
          }
        }
      }

      unsigned int v29 = (uint64_t *)v55;
      if ((void)v55)
      {
        uint64_t v30 = 0LL;
        do
        {
          if (*((_DWORD *)v29 + 6) == 1) {
            ++v30;
          }
          unsigned int v29 = (uint64_t *)*v29;
        }

        while (v29);
      }

      else
      {
        uint64_t v30 = 0LL;
      }

      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v30),  @"numSourcesWifi");
      else {
        uint64_t v31 = 5 * (v30 / 5);
      }
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v31),  @"numSourcesWifiBounded");
      unsigned int v32 = (uint64_t *)v55;
      if ((void)v55)
      {
        uint64_t v33 = 0LL;
        do
        {
          if (*((_DWORD *)v32 + 6) == 5) {
            ++v33;
          }
          unsigned int v32 = (uint64_t *)*v32;
        }

        while (v32);
      }

      else
      {
        uint64_t v33 = 0LL;
      }

      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v33),  @"numSourcesBle");
      if (v33 >= 15) {
        uint64_t v34 = 15LL;
      }
      else {
        uint64_t v34 = v33;
      }
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v34),  @"numSourcesBleBounded");
      int v35 = (uint64_t *)v55;
      if ((void)v55)
      {
        uint64_t v36 = 0LL;
        do
        {
          if (*((_DWORD *)v35 + 6) == 6) {
            ++v36;
          }
          int v35 = (uint64_t *)*v35;
        }

        while (v35);
      }

      else
      {
        uint64_t v36 = 0LL;
      }

      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v36),  @"numSourcesUwb");
      if (v36 >= 15) {
        uint64_t v37 = 15LL;
      }
      else {
        uint64_t v37 = v36;
      }
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v37),  @"numSourcesUwbBounded");
      sub_100008390((uint64_t)&v43, v44[0]);
      sub_100008390((uint64_t)&v45, v46[0]);
      sub_100008390((uint64_t)&v47, v48[0]);
    }

    return sub_10001AA60((uint64_t)&v54);
  }

  return result;
}

void sub_10008F480( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, char a33)
{
}

BOOL sub_10008F4F8(uint64_t a1, void *a2)
{
  v66[0] = sub_1000EFD0C((uint64_t)a2);
  v66[1] = v4;
  v65[0] = sub_1000EFD18(a2);
  v65[1] = v5;
  for (BOOL result = sub_1000EFC24(v66, v65); result; BOOL result = sub_1000EFC24(v66, v65))
  {
    uint64_t v7 = sub_1000EFC50(v66);
    int v8 = *(uint64_t **)(v7 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 8);
      do
      {
        sub_10001ADB4(v9, (uint64_t)(v8 + 2), (_OWORD *)v8 + 1);
        int v8 = (uint64_t *)*v8;
      }

      while (v8);
    }

    unint64_t v10 = *(double **)(a1 + 16);
    double v11 = *(double **)a1;
    double v12 = **(double **)a1 - *(double *)(v7 + 144);
    if (*v10 >= v12) {
      double v12 = *v10;
    }
    *unint64_t v10 = v12;
    __int16 v13 = *(double **)(a1 + 24);
    double v14 = *v11 - *(double *)(v7 + 144);
    if (v14 >= *v13) {
      double v14 = *v13;
    }
    *__int16 v13 = v14;
    BOOL v15 = *(double **)(a1 + 32);
    LODWORD(v67) = 1;
    BOOL v16 = sub_10001A29C((void *)(v7 + 104), (unsigned int *)&v67);
    double v17 = 0.0;
    double v18 = 0.0;
    if (v16) {
      double v18 = *((double *)v16 + 4) - *((double *)v16 + 3);
    }
    if (*v15 >= v18) {
      double v18 = *v15;
    }
    **(double **)(a1 + 32) = v18;
    int v19 = *(double **)(a1 + 40);
    LODWORD(v67) = 1;
    int v20 = sub_10001A29C((void *)(v7 + 104), (unsigned int *)&v67);
    if (v20) {
      double v17 = *((double *)v20 + 4) - *((double *)v20 + 3);
    }
    double v21 = *v19;
    if (v17 < *v19) {
      double v21 = v17;
    }
    **(double **)(a1 + 40) = v21;
    LODWORD(v67) = 1;
    int v22 = sub_10001A29C((void *)(v7 + 104), (unsigned int *)&v67);
    if (v22) {
      double v23 = *((double *)v22 + 4) - *((double *)v22 + 3);
    }
    else {
      double v23 = 0.0;
    }
    **(double **)(a1 + 48) = v23 + **(double **)(a1 + 48);
    unsigned int v24 = *(unint64_t **)(a1 + 80);
    unint64_t v25 = *(void *)(v7 + 24);
    if (*v24 > v25) {
      unint64_t v25 = *v24;
    }
    *unsigned int v24 = v25;
    int v26 = *(unint64_t **)(a1 + 88);
    unint64_t v27 = *(void *)(v7 + 24);
    if (v27 >= *v26) {
      unint64_t v27 = *v26;
    }
    *int v26 = v27;
    **(void **)(a1 + 96) += *(void *)(v7 + 24);
    for (uint64_t i = *(int **)(v7 + 80); i; uint64_t i = *(int **)i)
    {
      unsigned int v29 = i + 4;
      uint64_t v30 = *(void *)(a1 + 56);
      uint64_t v31 = *(void *)(v30 + 8);
      if (!v31) {
        goto LABEL_35;
      }
      int v32 = *v29;
      uint64_t v33 = v30 + 8;
      do
      {
        int v34 = *(_DWORD *)(v31 + 32);
        BOOL v35 = v34 < v32;
        if (v34 >= v32) {
          uint64_t v36 = (uint64_t *)v31;
        }
        else {
          uint64_t v36 = (uint64_t *)(v31 + 8);
        }
        if (!v35) {
          uint64_t v33 = v31;
        }
        uint64_t v31 = *v36;
      }

      while (*v36);
      if (v33 == v30 + 8 || v32 < *(_DWORD *)(v33 + 32))
      {
LABEL_35:
        int v67 = i + 4;
        sub_10000C858((uint64_t **)v30, i + 4, (uint64_t)&unk_1012CF090, &v67)[5] = 0LL;
        uint64_t v30 = *(void *)(a1 + 56);
      }

      int v67 = i + 4;
      uint64_t v37 = sub_10000C858((uint64_t **)v30, i + 4, (uint64_t)&unk_1012CF090, &v67);
      int v38 = *(uint64_t **)(v7 + 16);
      if (v38)
      {
        uint64_t v39 = 0LL;
        do
        {
          if (*((_DWORD *)v38 + 6) == *v29) {
            uint64_t v39 = (uint64_t *)((char *)v39 + 1);
          }
          int v38 = (uint64_t *)*v38;
        }

        while (v38);
      }

      else
      {
        uint64_t v39 = 0LL;
      }

      if (v37[5] <= v39) {
        unint64_t v40 = v39;
      }
      else {
        unint64_t v40 = v37[5];
      }
      uint64_t v41 = *(uint64_t ***)(a1 + 56);
      int v67 = i + 4;
      sub_10000C858(v41, i + 4, (uint64_t)&unk_1012CF090, &v67)[5] = v40;
      uint64_t v42 = *(void *)(a1 + 64);
      uint64_t v43 = *(void *)(v42 + 8);
      if (!v43) {
        goto LABEL_56;
      }
      int v44 = *v29;
      uint64_t v45 = v42 + 8;
      do
      {
        int v46 = *(_DWORD *)(v43 + 32);
        BOOL v47 = v46 < v44;
        if (v46 >= v44) {
          __int16 v48 = (uint64_t *)v43;
        }
        else {
          __int16 v48 = (uint64_t *)(v43 + 8);
        }
        if (!v47) {
          uint64_t v45 = v43;
        }
        uint64_t v43 = *v48;
      }

      while (*v48);
      if (v45 == v42 + 8 || v44 < *(_DWORD *)(v45 + 32)) {
LABEL_56:
      }
        uint64_t v45 = v42 + 8;
      if (v45 == *(void *)(a1 + 56) + 8LL)
      {
        int v67 = i + 4;
        sub_10000C858((uint64_t **)v42, i + 4, (uint64_t)&unk_1012CF090, &v67)[5] = (uint64_t *)-1LL;
        uint64_t v42 = *(void *)(a1 + 64);
      }

      int v67 = i + 4;
      double v49 = sub_10000C858((uint64_t **)v42, i + 4, (uint64_t)&unk_1012CF090, &v67);
      double v50 = *(uint64_t **)(v7 + 16);
      if (v50)
      {
        double v51 = 0LL;
        do
        {
          if (*((_DWORD *)v50 + 6) == *v29) {
            double v51 = (uint64_t *)((char *)v51 + 1);
          }
          double v50 = (uint64_t *)*v50;
        }

        while (v50);
      }

      else
      {
        double v51 = 0LL;
      }

      if (v51 >= v49[5]) {
        double v52 = v49[5];
      }
      else {
        double v52 = v51;
      }
      double v53 = *(uint64_t ***)(a1 + 64);
      int v67 = i + 4;
      sub_10000C858(v53, i + 4, (uint64_t)&unk_1012CF090, &v67)[5] = v52;
      uint64_t v54 = *(void *)(a1 + 72);
      uint64_t v55 = *(void *)(v54 + 8);
      if (!v55) {
        goto LABEL_79;
      }
      int v56 = *v29;
      uint64_t v57 = v54 + 8;
      do
      {
        int v58 = *(_DWORD *)(v55 + 32);
        BOOL v59 = v58 < v56;
        if (v58 >= v56) {
          int v60 = (uint64_t *)v55;
        }
        else {
          int v60 = (uint64_t *)(v55 + 8);
        }
        if (!v59) {
          uint64_t v57 = v55;
        }
        uint64_t v55 = *v60;
      }

      while (*v60);
      if (v57 == v54 + 8 || v56 < *(_DWORD *)(v57 + 32))
      {
LABEL_79:
        int v67 = i + 4;
        sub_10000C858((uint64_t **)v54, i + 4, (uint64_t)&unk_1012CF090, &v67)[5] = 0LL;
        int v56 = *v29;
      }

      uint64_t v61 = *(uint64_t **)(v7 + 16);
      if (v61)
      {
        uint64_t v62 = 0LL;
        do
        {
          if (*((_DWORD *)v61 + 6) == v56) {
            ++v62;
          }
          uint64_t v61 = (uint64_t *)*v61;
        }

        while (v61);
      }

      else
      {
        uint64_t v62 = 0LL;
      }

      int v63 = *(uint64_t ***)(a1 + 72);
      int v67 = i + 4;
      int v64 = sub_10000C858(v63, i + 4, (uint64_t)&unk_1012CF090, &v67);
      v64[5] = (uint64_t *)((char *)v64[5] + v62);
    }

    sub_1000EFC64((uint64_t)v66);
  }

  return result;
}

void sub_10008F980(void *a1, uint64_t a2)
{
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsAdaptiveSensorsEnable", 0x8000100u, kCFAllocatorNull);
  char v5 = sub_1002A6FD4(*(uint64_t *)buf, (uint64_t)v4, (BOOL *)v48);
  CFRelease(v4);
  int v6 = LOBYTE(v48[0]);
  uint64_t v7 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v8 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  if (v6) {
    char v10 = 1;
  }
  else {
    char v10 = v5 ^ 1;
  }
  v48[0] = &stru_1018A4B00;
  v48[1] = sub_100093AE4(1, 1, 1);
  char v49 = v10;
  double v50 = @"Wifi";
  uint64_t v51 = sub_100093AE4(1, 0, 0);
  char v52 = v10;
  double v53 = @"Ble";
  uint64_t v54 = sub_100093AE4(0, 1, 0);
  char v55 = v10;
  int v56 = @"Uwb";
  uint64_t v11 = 0LL;
  uint64_t v57 = sub_100093AE4(0, 0, 1);
  char v58 = v10;
  do
  {
    double v12 = &v48[v11];
    sub_1000BC648(a2, &v29);
    *(float *)&double v13 = v29;
    [a1 setObject:+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v13), +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@%@", @"minClusterRfSize", v48[v11]) forKeyedSubscript];
    *(float *)&double v14 = v30;
    [a1 setObject:+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v14), +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@%@", @"maxClusterRfSize", v48[v11]) forKeyedSubscript];
    *(float *)&double v15 = v31;
    [a1 setObject:+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v15), +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@%@", @"avgClusterRfSize", v48[v11]) forKeyedSubscript];
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CAA0);
    }
    BOOL v16 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *v12;
      *(_DWORD *)buf = 138413058;
      *(void *)&uint8_t buf[4] = v17;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v29;
      __int16 v44 = 2048;
      double v45 = v30;
      __int16 v46 = 2048;
      double v47 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Model cluster RF sizes %@: %f (min), %f(max), %f (mean)",  buf,  0x2Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CAA0);
      }
      uint64_t v23 = *v12;
      int v35 = 138413058;
      uint64_t v36 = v23;
      __int16 v37 = 2048;
      double v38 = v29;
      __int16 v39 = 2048;
      double v40 = v30;
      __int16 v41 = 2048;
      double v42 = v31;
      LODWORD(v27) = 42;
      unsigned int v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Model cluster RF sizes %@: %f (min), %f(max), %f (mean)",  &v35,  v27);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLMicroLocationCoreAnalyticsPublishHelper::updateClusterRfDistanceCharacteristics(NSMutableDictionar y *, const CLMicroLocationModel &)",  "%s\n",  v24);
      if (v24 != buf) {
        free(v24);
      }
    }

    if ((unint64_t)sub_1000954B4(a2) >= 2)
    {
      *(float *)&double v18 = v32;
      [a1 setObject:+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v18), +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@%@", @"minClusterRfDistance", *v12) forKeyedSubscript];
      *(float *)&double v19 = v33;
      [a1 setObject:+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v19), +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@%@", @"maxClusterRfDistance", *v12) forKeyedSubscript];
      *(float *)&double v20 = v34;
      [a1 setObject:+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v20), +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@%@", @"avgClusterRfDistance", *v12) forKeyedSubscript];
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CAA0);
      }
      double v21 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v22 = *v12;
        *(_DWORD *)buf = 138413058;
        *(void *)&uint8_t buf[4] = v22;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v32;
        __int16 v44 = 2048;
        double v45 = v33;
        __int16 v46 = 2048;
        double v47 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "Model cluster RF distances %@: %f (min), %f(max), %f (mean)",  buf,  0x2Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CAA0);
        }
        uint64_t v25 = *v12;
        int v35 = 138413058;
        uint64_t v36 = v25;
        __int16 v37 = 2048;
        double v38 = v32;
        __int16 v39 = 2048;
        double v40 = v33;
        __int16 v41 = 2048;
        double v42 = v34;
        LODWORD(v28) = 42;
        int v26 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  2LL,  "Model cluster RF distances %@: %f (min), %f(max), %f (mean)",  &v35,  v28);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static void CLMicroLocationCoreAnalyticsPublishHelper::updateClusterRfDistanceCharacteristics(NSMutableDiction ary *, const CLMicroLocationModel &)",  "%s\n",  v26);
        if (v26 != buf) {
          free(v26);
        }
      }
    }

    v11 += 3LL;
  }

  while (v11 != 12);
}

void sub_100090038( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100090058(void *a1, void *a2, uint64_t a3, double a4)
{
  if (a1)
  {
    [a1 setObject:&__kCFBooleanFalse forKeyedSubscript:@"cancelled"];
    else {
      int v8 = &__kCFBooleanFalse;
    }
    [a1 setObject:v8 forKeyedSubscript:@"valid"];
    objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", j__CFAbsoluteTimeGetCurrent_1() - a4),  @"runTime");
    uint64_t v9 = (uint64_t)objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", @"learnCounter"), "integerValue");
    if (v9)
    {
      if (v9 >= 100) {
        uint64_t v10 = 100LL;
      }
      else {
        uint64_t v10 = v9;
      }
      objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v10),  @"learnCounter");
    }

    if (sub_100097CA8((uint64_t)a2))
    {
      else {
        uint64_t v11 = @"Configuration_Candidate";
      }
      [a1 setObject:v11 forKeyedSubscript:@"configSelect"];
      objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  sub_1000954B4((uint64_t)a2)),  @"numClusters");
      sub_100090548(a1, (uint64_t)a2, a3);
      sub_10008F980(a1, (uint64_t)a2);
      objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", sub_1000992F4(a2)),  @"representativeFPsRatio");
      std::string __p = 0LL;
      __int16 v44 = 0LL;
      unint64_t v45 = 0LL;
      double v12 = (void *)a2[34];
      if (v12)
      {
        double v13 = 0LL;
        do
        {
          uint64_t v14 = (uint64_t)(v12[5] - v12[4]) >> 4;
          if ((unint64_t)v13 >= v45)
          {
            double v15 = (unint64_t *)__p;
            uint64_t v16 = ((char *)v13 - (_BYTE *)__p) >> 3;
            unint64_t v17 = v16 + 1;
            uint64_t v18 = v45 - (void)__p;
            else {
              unint64_t v19 = v17;
            }
            if (v19)
            {
              unint64_t v19 = (unint64_t)sub_1000071BC((uint64_t)&v45, v19);
              uint64_t v21 = v20;
              double v15 = (unint64_t *)__p;
              double v13 = v44;
            }

            else
            {
              uint64_t v21 = 0LL;
            }

            uint64_t v22 = (uint64_t *)(v19 + 8 * v16);
            *uint64_t v22 = v14;
            uint64_t v23 = (unint64_t *)(v22 + 1);
            while (v13 != v15)
            {
              uint64_t v24 = *--v13;
              *--uint64_t v22 = v24;
            }

            std::string __p = v22;
            __int16 v44 = v23;
            unint64_t v45 = v19 + 8 * v21;
            if (v15) {
              operator delete(v15);
            }
            double v13 = v23;
          }

          else
          {
            *v13++ = v14;
          }

          __int16 v44 = v13;
          double v12 = (void *)*v12;
        }

        while (v12);
        uint64_t v25 = (unint64_t *)__p;
      }

      else
      {
        double v13 = 0LL;
        uint64_t v25 = 0LL;
      }

      unint64_t v26 = 126 - 2 * __clz(v13 - v25);
      if (v13 == v25) {
        uint64_t v27 = 0LL;
      }
      else {
        uint64_t v27 = v26;
      }
      sub_100092094(v25, v13, (uint64_t)&v40, v27, 1);
      sub_1002F0B04(&v40);
      CFStringRef v28 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMaximumNumberOfClustersForLearningAnalytics",  0x8000100u,  kCFAllocatorNull);
      int v29 = sub_1002A77CC((uint64_t)v40, (uint64_t)v28, &v46);
      CFRelease(v28);
      unint64_t v30 = v46;
      float v31 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          unint64_t v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }

      if (v29) {
        unint64_t v34 = v30;
      }
      else {
        unint64_t v34 = 5LL;
      }
      uint64_t v36 = __p;
      int v35 = v44;
      if (v44 != __p)
      {
        unint64_t v37 = 0LL;
        uint64_t v38 = 0LL;
        do
        {
          if (v37 >= v34)
          {
            v38 += v36[v37];
          }

          else
          {
            [a1 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v36[v37]), +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"numFingerprintsInCluster%zu", v37) forKeyedSubscript];
            uint64_t v36 = __p;
            int v35 = v44;
          }

          ++v37;
        }

        while (v37 < v35 - v36);
        if (v38)
        {
          objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v38),  @"numFingerprintsInRemainingClusters");
          int v35 = v44;
        }
      }

      objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(v35 - 1)),  @"numFingerprintsInSmallestCluster");
      sub_10008EAD8(*(_DWORD *)a2, &v40);
      if (v42 >= 0) {
        __int16 v39 = &v40;
      }
      else {
        __int16 v39 = v40;
      }
      objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v39),  @"generationAlgorithm");
      sub_100090708(a1, (uint64_t)a2);
      if (v42 < 0) {
        operator delete(v40);
      }
      if (__p)
      {
        __int16 v44 = (unint64_t *)__p;
        operator delete(__p);
      }
    }
  }

void sub_1000904EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100090548(id result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    CFStringRef v4 = result;
    uint64_t v6 = *(void *)(a2 + 232);
    uint64_t v5 = *(void *)(a2 + 240);
    uint64_t v7 = (v5 - v6) >> 5;
    if (v5 == v6)
    {
      uint64_t v11 = 0LL;
      uint64_t v10 = 0LL;
      uint64_t v9 = 0LL;
      uint64_t v8 = 0LL;
    }

    else
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
      do
      {
        double v12 = *(uint64_t **)(*(void *)v6 + 16LL);
        if (v12)
        {
          uint64_t v13 = 0LL;
          uint64_t v14 = *(void *)(*(void *)v6 + 16LL);
          do
          {
            if (*(_DWORD *)(v14 + 24) == 1) {
              ++v13;
            }
            uint64_t v14 = *(void *)v14;
          }

          while (v14);
          uint64_t v15 = *(void *)(*(void *)v6 + 16LL);
          do
          {
            if (*(_DWORD *)(v15 + 24) == 5) {
              ++v14;
            }
            uint64_t v15 = *(void *)v15;
          }

          while (v15);
          v9 += v13;
          do
          {
            if (*((_DWORD *)v12 + 6) == 6) {
              ++v15;
            }
            double v12 = (uint64_t *)*v12;
          }

          while (v12);
          v10 += v14;
        }

        else
        {
          uint64_t v15 = 0LL;
        }

        v8 += *(void *)(*(void *)v6 + 24LL);
        v11 += v15;
        v6 += 32LL;
      }

      while (v6 != v5);
    }

    objc_msgSend( result,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v7),  @"modelSizeNumFingerprints");
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v8),  @"modelSizeNumMeasurements");
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v9),  @"modelSizeNumWiFiMeasurements");
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v10),  @"modelSizeNumBleMeasurements");
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v11),  @"modelSizeNumUwbMeasurements");
    return objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  (*(uint64_t (**)(uint64_t))(*(void *)a3 + 72))(a3)),  @"modelLoadedByteSize");
  }

  return result;
}

void sub_100090708(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100095798(a2);
  double v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v11 = 0LL;
  sub_10001B72C(&v11, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 2);
  unint64_t v5 = 126 - 2 * __clz((v12 - (_BYTE *)v11) >> 2);
  if (v12 == v11) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_100092C34((uint64_t)v11, (int *)v12, (uint64_t)&__p, v6, 1);
  memset(v10, 0, sizeof(v10));
  uint64_t v7 = (int *)v11;
  uint64_t v8 = v12;
  uint64_t v15 = v10;
  while (v7 != (int *)v8)
  {
    sub_100103DF4(*v7, &__p);
    sub_1000936E8(&v15, (__int128 *)&__p);
    ++v7;
  }

  sub_1000910EC(" ", v10, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p),  @"qualityReasons");
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  sub_1000129D4((void ***)&__p);
  if (v11)
  {
    double v12 = (char *)v11;
    operator delete(v11);
  }

void sub_1000908D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  *(void *)(v21 - 40) = &a10;
  sub_1000129D4((void ***)(v21 - 40));
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100090928(uint64_t result, void *a2, void *a3, uint64_t a4, char a5, double a6)
{
  if (result)
  {
    uint64_t v8 = (void *)result;
    if (a5) {
      objc_msgSend( (id)result,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a6 - *(double *)&a4),  @"ageOfOldModel");
    }
    BOOL result = sub_100097CA8((uint64_t)a2);
    if ((_DWORD)result)
    {
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  sub_1000954B4((uint64_t)a3)),  @"numOldClusters");
      int v9 = sub_1000954B4((uint64_t)a2);
      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  v9 - sub_1000954B4((uint64_t)a3)),  @"numClustersDiff");
      sub_10009773C(a2, (uint64_t)v14);
      sub_10009773C(a3, (uint64_t)v13);
      uint64_t v10 = v15;
      if (v15)
      {
        unint64_t v11 = 0LL;
        do
        {
          if (sub_10001A7B8(v13, v10 + 2)) {
            ++v11;
          }
          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        unint64_t v11 = 0LL;
      }

      objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v11),  @"numMatchingClustersInt");
      if (sub_1000954B4((uint64_t)a3))
      {
        *(float *)&double v12 = (float)v11 / (float)(unint64_t)sub_1000954B4((uint64_t)a3);
        objc_msgSend( v8,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12),  @"portionMatchingClusters");
      }

      else
      {
        [v8 setObject:&off_1018D5288 forKeyedSubscript:@"portionMatchingClusters"];
      }

      sub_100019CEC((uint64_t)v13);
      return sub_100019CEC((uint64_t)v14);
    }
  }

  return result;
}

void sub_100090ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_100090B04(void *a1, uint64_t *a2, unsigned int a3)
{
  if (a1)
  {
    if (a3)
    {
      unint64_t v5 = (a2[1] - *a2) >> 3;
      if (v5 >= a3)
      {
        unint64_t v10 = a3;
        if (v5 > a3)
        {
          unint64_t v12 = a3 - 1;
          [a1 setObject:+[NSNumber numberWithUnsignedLong:]( NSNumber, "numberWithUnsignedLong:", *(void *)(*a2 + 8 * v12) - *(void *)(*a2 + 8 * a3)), +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"numFingerprintsPrunedInIteration%u", v12) forKeyedSubscript];
          uint64_t v14 = *a2;
          unint64_t v15 = (a2[1] - *a2) >> 3;
          if (v15 > v12)
          {
            unint64_t v16 = *(void *)(v14 + 8 * v12);
            if (!v16) {
              return;
            }
            if (v15 > v10)
            {
              *(float *)&double v13 = 1.0 - (float)((float)*(unint64_t *)(v14 + 8 * v10) / (float)v16);
              [a1 setObject:+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v13), +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"portionFingerprintsPrunedInIteration%u", v12) forKeyedSubscript];
              return;
            }
          }
        }

        sub_100092C20();
      }
    }

    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CAA0);
    }
    uint64_t v6 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = (a2[1] - *a2) >> 3;
      *(_DWORD *)buf = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 2050;
      uint64_t v22 = a3;
      __int16 v23 = 2050;
      uint64_t v24 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:updateMagicalMomentsNumPrunedFingerprints called incorrectly, iteration:%{public}lu , numFingerprintsPerIteration size:%{public}lu}",  buf,  0x26u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CAA0);
      }
    }

    uint64_t v8 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      uint64_t v9 = (a2[1] - *a2) >> 3;
      *(_DWORD *)buf = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 2050;
      uint64_t v22 = a3;
      __int16 v23 = 2050;
      uint64_t v24 = v9;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "updateMagicalMomentsNumPrunedFingerprints called incorrectly",  "{msg%{public}.0s:updateMagicalMomentsNumPrunedFingerprints called incorrectly, iteration:%{public}lu , numFingerprintsPerIteration size:%{public}lu}",  buf,  0x26u);
    }
  }

id sub_100090DE0(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  id result = [a1 setObject:+[NSNumber numberWithUnsignedLong:]( NSNumber, "numberWithUnsignedLong:", a3 - sub_1000954B4(a2)), +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"numClustersPrunedIteration%u", a4) forKeyedSubscript];
  if (a3)
  {
    *(float *)&double v9 = 1.0 - (float)((float)(unint64_t)sub_1000954B4(a2) / (float)a3);
    return [a1 setObject:+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9), +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"portionClustersPrunedIteration%u", a4) forKeyedSubscript];
  }

  return result;
}

id sub_100090EDC(id result, void *a2, void *a3)
{
  if (result)
  {
    uint64_t v4 = result;
    unint64_t v5 = sub_1000EFCD4(a2);
    unint64_t v6 = sub_1000EFCD4(a3);
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v5),  @"numUnlabeledFingerprints");
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v6),  @"numLabeledFingerprints");
    unint64_t v7 = 5 * (v6 / 5);
    if (5 * (v5 / 5) >= 0x1F4) {
      unint64_t v8 = 500LL;
    }
    else {
      unint64_t v8 = 5 * (v5 / 5);
    }
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v8),  @"numUnlabeledFingerprintsBounded");
    if (v7 >= 0x1F4) {
      uint64_t v9 = 500LL;
    }
    else {
      uint64_t v9 = v7;
    }
    return objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v9),  @"numLabeledFingerprintsBounded");
  }

  return result;
}

id sub_100090FD8(void *a1, uint64_t a2, _BYTE *a3)
{
  objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100095788(a2) == 3),  @"IsHighQualityModel");
  objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1000954BC(a2)),  @"WasInHighQualityBefore");
  if (a3[1])
  {
    if (sub_1000954BC(a2))
    {
      if (a3[1]) {
        BOOL v6 = *a3 == 0;
      }
      else {
        BOOL v6 = 0;
      }
      BOOL v7 = v6;
    }

    else
    {
      BOOL v7 = 0LL;
    }
  }

  else
  {
    BOOL v7 = sub_1000954BC(a2);
  }

  return objc_msgSend( a1,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7),  @"IsBecomingHighQualityModelForTheFirstTime");
}

uint64_t *sub_1000910EC@<X0>(char *__s@<X1>, uint64_t *result@<X0>, std::string *a3@<X8>)
{
  uint64_t v5 = *result;
  uint64_t v6 = result[1];
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  a3->__r_.__value_.__r.__words[0] = 0LL;
  if (v5 == v6) {
    goto LABEL_10;
  }
  int v7 = *(char *)(v5 + 23);
  if (v7 >= 0) {
    unint64_t v8 = (char *)v5;
  }
  else {
    unint64_t v8 = *(char **)v5;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(v5 + 8);
  }
  for (id result = (uint64_t *)sub_10009382C(a3, (uint64_t)a3, v8, &v8[v9], v9);
        ;
        id result = (uint64_t *)sub_10009382C(a3, v16, v18, &v18[v19], v19))
  {
    v5 += 24LL;
LABEL_10:
    if (v5 == v6) {
      break;
    }
    std::string::size_type size = a3->__r_.__value_.__s.__size_;
    if ((size & 0x80u) == 0LL) {
      unint64_t v11 = a3;
    }
    else {
      unint64_t v11 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0LL) {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v12 = (uint64_t)v11 + size;
    size_t v13 = strlen(__s);
    sub_10009382C(a3, v12, __s, &__s[v13], v13);
    std::string::size_type v14 = a3->__r_.__value_.__s.__size_;
    if ((v14 & 0x80u) == 0LL) {
      unint64_t v15 = a3;
    }
    else {
      unint64_t v15 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v14 & 0x80u) != 0LL) {
      std::string::size_type v14 = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v16 = (uint64_t)v15 + v14;
    int v17 = *(char *)(v5 + 23);
    if (v17 >= 0) {
      int v18 = (char *)v5;
    }
    else {
      int v18 = *(char **)v5;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(v5 + 8);
    }
  }

  return result;
}

void sub_1000911EC(_Unwind_Exception *a1)
{
}

uint64_t sub_10009120C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  uint64_t result = sub_1000912B8();
  if ((_DWORD)result)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100091390;
    v15[3] = &unk_10181CA60;
    v15[6] = a2;
    v15[7] = a1;
    v15[8] = a3;
    v15[9] = a4;
    char v16 = a5;
    char v17 = a6;
    v15[4] = a7;
    v15[5] = @"com.apple.microlocation.triggers";
    return AnalyticsSendEventLazy(@"com.apple.microlocation.triggers", v15);
  }

  return result;
}

uint64_t sub_1000912B8()
{
  CFStringRef v0 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsAnalyticsSendEventEnabled", 0x8000100u, kCFAllocatorNull);
  int v1 = sub_1002A6FD4(v8, (uint64_t)v0, &v7);
  CFRelease(v0);
  BOOL v2 = v7;
  uint64_t v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  if (v2) {
    return 1LL;
  }
  else {
    return v1 ^ 1u;
  }
}

void sub_100091378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

id sub_100091390(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  uint64_t v3 = sub_100103D24(*(void *)(a1 + 56));
  uint64_t v4 = *(const void ***)(a1 + 48);
  else {
    size_t v5 = (size_t)v4[1];
  }
  uint64_t v6 = __p;
  sub_1000392EC((uint64_t)__p, v5 + 12);
  if (SBYTE3(v39) < 0) {
    uint64_t v6 = *(_BYTE **)__p;
  }
  if (v5)
  {
    else {
      BOOL v7 = *v4;
    }
    memmove(v6, v7, v5);
  }

  strcpy(&v6[v5], "TriggerEvent");
  if (SBYTE3(v39) >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = *(_BYTE **)__p;
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  v3,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  if (SBYTE3(v39) < 0) {
    operator delete(*(void **)__p);
  }
  std::string::size_type v9 = *(const void ***)(a1 + 48);
  else {
    size_t v10 = (size_t)v9[1];
  }
  unint64_t v11 = __p;
  sub_1000392EC((uint64_t)__p, v10 + 17);
  if (SBYTE3(v39) < 0) {
    unint64_t v11 = *(_BYTE **)__p;
  }
  if (v10)
  {
    else {
      uint64_t v12 = *v9;
    }
    memmove(v11, v12, v10);
  }

  strcpy(&v11[v10], "TriggerEventCount");
  if (SBYTE3(v39) >= 0) {
    size_t v13 = __p;
  }
  else {
    size_t v13 = *(_BYTE **)__p;
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  &off_1018D3008,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
  if (SBYTE3(v39) < 0) {
    operator delete(*(void **)__p);
  }
  sub_100060770(*(const std::string **)(a1 + 64), (std::string *)__p);
  if (SBYTE3(v39) >= 0) {
    std::string::size_type v14 = __p;
  }
  else {
    std::string::size_type v14 = *(_BYTE **)__p;
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14),  @"clientId");
  if (SBYTE3(v39) < 0) {
    operator delete(*(void **)__p);
  }
  unint64_t v15 = *(uint64_t **)(a1 + 72);
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15),  @"requestStatus");
  if (*(_BYTE *)(a1 + 80)) {
    char v16 = "On";
  }
  else {
    char v16 = "Off";
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16),  @"displayState");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 81)),  @"lowLatencySession");
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  char v17 = *(void **)(a1 + 32);
  id v18 = [v17 countByEnumeratingWithState:&v31 objects:v42 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v32;
    do
    {
      uint64_t v20 = 0LL;
      do
      {
        if (*(void *)v32 != v19) {
          objc_enumerationMutation(v17);
        }
        __int16 v21 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)v20);
        id v22 = [*(id *)(a1 + 32) objectForKey:v21];
        if ([v2 objectForKey:v21])
        {
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181CAA0);
          }
          __int16 v23 = (os_log_s *)qword_1019348D8;
          if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
          {
            id v24 = [v21 UTF8String];
            *(_DWORD *)std::string __p = 136315138;
            *(void *)&__p[4] = v24;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Trigger event already have %s. Ignoring.",  __p,  0xCu);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1019348D0 != -1) {
              dispatch_once(&qword_1019348D0, &stru_10181CAA0);
            }
            uint64_t v25 = qword_1019348D8;
            id v26 = [v21 UTF8String];
            int v35 = 136315138;
            id v36 = v26;
            uint64_t v27 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v25,  16LL,  "Trigger event already have %s. Ignoring.",  (const char *)&v35);
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "static void CLMicroLocationCoreAnalyticsPublishHelper::sendCommonTriggerEvent(const CLMicroLocationProto:: RecordingEvent &, const std::string &, const std::string &, const std::string &, const BOOL, const BOOL, N SMutableDictionary *)_block_invoke",  "%s\n",  v27);
            if (v27 != __p) {
              free(v27);
            }
          }
        }

        else
        {
          [v2 setObject:v22 forKeyedSubscript:v21];
        }

        uint64_t v20 = (char *)v20 + 1;
      }

      while (v18 != v20);
      id v18 = [v17 countByEnumeratingWithState:&v31 objects:v42 count:16];
    }

    while (v18);
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CAA0);
  }
  CFStringRef v28 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    id v29 = [*(id *)(a1 + 40) UTF8String];
    *(void *)std::string __p = 68289539LL;
    *(_WORD *)&__p[8] = 2082;
    *(void *)&__p[10] = "";
    __int16 v38 = 2081;
    id v39 = v29;
    __int16 v40 = 2113;
    id v41 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Sending CA event., name:%{private, location:escape_only}s, event:%{private, locat ion:escape_only}@}",  __p,  0x26u);
  }

  return v2;
}

void sub_10009192C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100091958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (sub_1000912B8())
  {
    if ((*(_BYTE *)(a1 + 128) & 8) != 0)
    {
      uint64_t v12 = *(void *)(a1 + 24);
      if (v12)
      {
        uint64_t v13 = *(void *)(a1 + 24);
        if ((*(_BYTE *)(v12 + 40) & 4) == 0) {
          goto LABEL_5;
        }
      }

      else
      {
        uint64_t v13 = *(void *)(qword_1019A0980 + 24);
        if ((*(_BYTE *)(v13 + 40) & 4) == 0) {
          goto LABEL_5;
        }
      }

      uint64_t v19 = *(void *)(v13 + 16);
      if (!v19) {
        uint64_t v19 = *(void *)(qword_1019A08A0 + 16);
      }
      if (*(_BYTE *)(v19 + 8))
      {
        BOOL v14 = 1;
      }

      else
      {
        if (!v12) {
          uint64_t v12 = *(void *)(qword_1019A0980 + 24);
        }
        uint64_t v20 = *(void *)(v12 + 16);
        if (!v20) {
          uint64_t v20 = *(void *)(qword_1019A08A0 + 16);
        }
        BOOL v14 = *(_BYTE *)(v20 + 9) != 0;
      }

      goto LABEL_6;
    }

void sub_100091C7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100091CB8(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3),  @"loiType");
  uint64_t v4 = sub_100103D24(*(void *)(a1 + 48));
  size_t v5 = *(const void ***)(a1 + 40);
  else {
    size_t v6 = (size_t)v5[1];
  }
  sub_1000392EC((uint64_t)&__p, v6 + 12);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    else {
      uint64_t v8 = *v5;
    }
    memmove(p_p, v8, v6);
  }

  strcpy((char *)p_p + v6, "TriggerEvent");
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v9 = &__p;
  }
  else {
    std::string::size_type v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  v4,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
  size_t v10 = *(const void ***)(a1 + 40);
  else {
    size_t v11 = (size_t)v10[1];
  }
  sub_1000392EC((uint64_t)&__p, v11 + 17);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v12 = &__p;
  }
  else {
    uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    else {
      uint64_t v13 = *v10;
    }
    memmove(v12, v13, v11);
  }

  strcpy((char *)v12 + v11, "TriggerEventCount");
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    BOOL v14 = &__p;
  }
  else {
    BOOL v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  &off_1018D3008,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
  unint64_t v15 = *(uint64_t **)(a1 + 56);
  __int128 v16 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v15);
  char v17 = *(const void ***)(a1 + 40);
  else {
    size_t v18 = (size_t)v17[1];
  }
  sub_1000392EC((uint64_t)&__p, v18 + 7);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v19 = &__p;
  }
  else {
    uint64_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v18)
  {
    else {
      uint64_t v20 = *v17;
    }
    memmove(v19, v20, v18);
  }

  strcpy((char *)v19 + v18, "Verdict");
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int16 v21 = &__p;
  }
  else {
    __int16 v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  v16,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
  sub_100060770(*(const std::string **)(a1 + 64), &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    id v22 = &__p;
  }
  else {
    id v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22),  @"clientId");
  if (*(_BYTE *)(a1 + 72)) {
    __int16 v23 = "On";
  }
  else {
    __int16 v23 = "Off";
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23),  @"displayState");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 73)),  @"isForcedLocalizationApp");
  return v2;
}

void sub_100092040( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100092068(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

unint64_t *sub_100092094( unint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = result;
LABEL_2:
  std::string::size_type v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    uint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        unint64_t v20 = *(a2 - 1);
        unint64_t v21 = *v9;
        if (v20 > *v9)
        {
          *std::string::size_type v9 = v20;
          *(a2 - 1) = v21;
        }

        return result;
      case 3uLL:
        unint64_t v22 = v9[1];
        unint64_t v23 = *(a2 - 1);
        if (v22 <= v23) {
          unint64_t v24 = *(a2 - 1);
        }
        else {
          unint64_t v24 = v9[1];
        }
        if (v22 >= v23) {
          unint64_t v22 = *(a2 - 1);
        }
        *(a2 - 1) = v22;
        v9[1] = v24;
        unint64_t v25 = *(a2 - 1);
        if (v25 <= *v9) {
          unint64_t v26 = *v9;
        }
        else {
          unint64_t v26 = *(a2 - 1);
        }
        if (v25 >= *v9) {
          unint64_t v25 = *v9;
        }
        *(a2 - 1) = v25;
        unint64_t v28 = *v9;
        unint64_t v27 = v9[1];
        if (v26 <= v27) {
          unint64_t v28 = v9[1];
        }
        if (v26 < v27) {
          unint64_t v27 = v26;
        }
        *std::string::size_type v9 = v28;
        v9[1] = v27;
        return result;
      case 4uLL:
        unint64_t v30 = v9[1];
        unint64_t v29 = v9[2];
        if (*v9 <= v29) {
          unint64_t v31 = v9[2];
        }
        else {
          unint64_t v31 = *v9;
        }
        if (*v9 < v29) {
          unint64_t v29 = *v9;
        }
        _DWORD v9[2] = v29;
        *std::string::size_type v9 = v31;
        unint64_t v32 = *(a2 - 1);
        if (v30 <= v32) {
          unint64_t v33 = *(a2 - 1);
        }
        else {
          unint64_t v33 = v30;
        }
        if (v30 < v32) {
          unint64_t v32 = v30;
        }
        *(a2 - 1) = v32;
        unint64_t v34 = *v9;
        if (*v9 <= v33) {
          unint64_t v35 = v33;
        }
        else {
          unint64_t v35 = *v9;
        }
        if (*v9 >= v33) {
          unint64_t v34 = v33;
        }
        *std::string::size_type v9 = v35;
        v9[1] = v34;
        unint64_t v36 = v9[2];
        unint64_t v37 = *(a2 - 1);
        if (v36 <= v37) {
          unint64_t v38 = *(a2 - 1);
        }
        else {
          unint64_t v38 = v9[2];
        }
        if (v36 >= v37) {
          unint64_t v36 = *(a2 - 1);
        }
        *(a2 - 1) = v36;
        unint64_t v39 = v9[1];
        if (v39 <= v38) {
          unint64_t v40 = v38;
        }
        else {
          unint64_t v40 = v9[1];
        }
        if (v39 >= v38) {
          unint64_t v39 = v38;
        }
        v9[1] = v40;
        _DWORD v9[2] = v39;
        return result;
      case 5uLL:
        unint64_t v41 = *v9;
        unint64_t v42 = v9[1];
        if (*v9 <= v42) {
          unint64_t v43 = v9[1];
        }
        else {
          unint64_t v43 = *v9;
        }
        if (*v9 >= v42) {
          unint64_t v41 = v9[1];
        }
        *std::string::size_type v9 = v43;
        v9[1] = v41;
        unint64_t v44 = v9[3];
        unint64_t v45 = *(a2 - 1);
        if (v44 <= v45) {
          unint64_t v46 = *(a2 - 1);
        }
        else {
          unint64_t v46 = v9[3];
        }
        if (v44 >= v45) {
          unint64_t v44 = *(a2 - 1);
        }
        *(a2 - 1) = v44;
        v9[3] = v46;
        unint64_t v47 = *(a2 - 1);
        unint64_t v48 = v9[2];
        if (v47 <= v48) {
          unint64_t v49 = v9[2];
        }
        else {
          unint64_t v49 = *(a2 - 1);
        }
        if (v47 >= v48) {
          unint64_t v47 = v9[2];
        }
        *(a2 - 1) = v47;
        unint64_t v51 = v9[2];
        unint64_t v50 = v9[3];
        unint64_t v52 = v9[1];
        if (v49 <= v50) {
          unint64_t v51 = v9[3];
        }
        if (v49 < v50) {
          unint64_t v50 = v49;
        }
        _DWORD v9[2] = v51;
        v9[3] = v50;
        unint64_t v53 = *(a2 - 1);
        if (v52 <= v53) {
          unint64_t v54 = *(a2 - 1);
        }
        else {
          unint64_t v54 = v52;
        }
        if (v52 < v53) {
          unint64_t v53 = v52;
        }
        *(a2 - 1) = v53;
        unint64_t v55 = *v9;
        unint64_t v57 = v9[2];
        unint64_t v56 = v9[3];
        if (v56 <= *v9) {
          unint64_t v58 = *v9;
        }
        else {
          unint64_t v58 = v9[3];
        }
        if (v56 >= *v9) {
          unint64_t v56 = *v9;
        }
        if (v58 <= v57) {
          unint64_t v55 = v9[2];
        }
        if (v58 < v57) {
          unint64_t v57 = v58;
        }
        if (v56 <= v54) {
          unint64_t v59 = v54;
        }
        else {
          unint64_t v59 = v56;
        }
        if (v56 >= v54) {
          unint64_t v56 = v54;
        }
        if (v59 <= v57) {
          unint64_t v54 = v57;
        }
        *std::string::size_type v9 = v55;
        v9[1] = v54;
        if (v59 >= v57) {
          unint64_t v60 = v57;
        }
        else {
          unint64_t v60 = v59;
        }
        _DWORD v9[2] = v60;
        v9[3] = v56;
        return result;
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2) {
              return sub_100092980(v9, a2, a2, a3);
            }
            return result;
          }

          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_100092504(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          else
          {
            sub_100092504(v9, &v9[v13 >> 1], a2 - 1);
            sub_100092504(v9 + 1, v15 - 1, a2 - 2);
            sub_100092504(v9 + 2, &v9[v14 + 1], a2 - 3);
            sub_100092504(v15 - 1, v15, &v9[v14 + 1]);
            unint64_t v16 = *v9;
            *std::string::size_type v9 = *v15;
            unint64_t *v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          if (*(v9 - 1) <= *v9)
          {
            uint64_t result = sub_10009258C(v9, (uint64_t *)a2);
            std::string::size_type v9 = result;
            goto LABEL_17;
          }

uint64_t sub_100092504(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  unint64_t v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1LL;
    }

    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4) {
      return 1LL;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2LL;
  }

  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    unint64_t v6 = *a1;
    if (*a2 <= *a1) {
      return 1LL;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2LL;
  }

  return 0LL;
}

unint64_t *sub_10009258C(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    unint64_t v5 = (uint64_t *)(a1 + 1);
    do
    {
      unint64_t v3 = (unint64_t *)v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }

    while (v2 <= *v3);
  }

  else
  {
    unint64_t v3 = a1;
    do
    {
      unint64_t v4 = v3[1];
      ++v3;
    }

    while (v2 <= v4);
  }

  if (v3 < (unint64_t *)a2)
  {
    do
      unint64_t v6 = *--a2;
    while (v2 > v6);
  }

  if (v3 < (unint64_t *)a2)
  {
    unint64_t v7 = *v3;
    unint64_t v8 = *a2;
    do
    {
      *unint64_t v3 = v8;
      *a2 = v7;
      do
      {
        unint64_t v9 = v3[1];
        ++v3;
        unint64_t v7 = v9;
      }

      while (v2 <= v9);
      do
      {
        unint64_t v10 = *--a2;
        unint64_t v8 = v10;
      }

      while (v2 > v10);
    }

    while (v3 < (unint64_t *)a2);
  }

  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

unint64_t *sub_10009263C(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 0LL;
  unint64_t v3 = *a1;
  do
    unint64_t v4 = a1[++v2];
  while (v4 > v3);
  unint64_t v5 = &a1[v2];
  unint64_t v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      unint64_t v8 = *--a2;
    }

    while (v8 <= v3);
  }

  else
  {
    do
      unint64_t v7 = *--a2;
    while (v7 <= v3);
  }

  if (v5 < a2)
  {
    unint64_t v9 = *a2;
    unint64_t v10 = &a1[v2];
    uint64_t v11 = a2;
    do
    {
      *unint64_t v10 = v9;
      unint64_t *v11 = v4;
      do
      {
        unint64_t v12 = v10[1];
        ++v10;
        unint64_t v4 = v12;
      }

      while (v12 > v3);
      do
      {
        unint64_t v13 = *--v11;
        unint64_t v9 = v13;
      }

      while (v13 <= v3);
    }

    while (v10 < v11);
    unint64_t v6 = v10 - 1;
  }

  if (v6 != a1) {
    *a1 = *v6;
  }
  *unint64_t v6 = v3;
  return v6;
}

BOOL sub_1000926F0(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 1LL;
  switch(a2 - a1)
  {
    case 0LL:
    case 1LL:
      return v2;
    case 2LL:
      unint64_t v3 = *(a2 - 1);
      unint64_t v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }

      return 1LL;
    case 3LL:
      unint64_t v20 = a1[1];
      unint64_t v21 = *(a2 - 1);
      if (v20 <= v21) {
        unint64_t v22 = *(a2 - 1);
      }
      else {
        unint64_t v22 = a1[1];
      }
      if (v20 >= v21) {
        unint64_t v20 = *(a2 - 1);
      }
      *(a2 - 1) = v20;
      a1[1] = v22;
      unint64_t v23 = *(a2 - 1);
      if (v23 <= *a1) {
        unint64_t v24 = *a1;
      }
      else {
        unint64_t v24 = *(a2 - 1);
      }
      if (v23 >= *a1) {
        unint64_t v23 = *a1;
      }
      *(a2 - 1) = v23;
      unint64_t v26 = *a1;
      unint64_t v25 = a1[1];
      if (v24 <= v25) {
        unint64_t v26 = a1[1];
      }
      if (v24 < v25) {
        unint64_t v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      return 1LL;
    case 4LL:
      unint64_t v48 = a1[1];
      unint64_t v47 = a1[2];
      if (*a1 <= v47) {
        unint64_t v49 = a1[2];
      }
      else {
        unint64_t v49 = *a1;
      }
      if (*a1 < v47) {
        unint64_t v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      unint64_t v50 = *(a2 - 1);
      if (v48 <= v50) {
        unint64_t v51 = *(a2 - 1);
      }
      else {
        unint64_t v51 = v48;
      }
      if (v48 < v50) {
        unint64_t v50 = v48;
      }
      *(a2 - 1) = v50;
      unint64_t v52 = *a1;
      if (*a1 <= v51) {
        unint64_t v53 = v51;
      }
      else {
        unint64_t v53 = *a1;
      }
      if (*a1 >= v51) {
        unint64_t v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      unint64_t v54 = a1[2];
      unint64_t v55 = *(a2 - 1);
      if (v54 <= v55) {
        unint64_t v56 = *(a2 - 1);
      }
      else {
        unint64_t v56 = a1[2];
      }
      if (v54 >= v55) {
        unint64_t v54 = *(a2 - 1);
      }
      *(a2 - 1) = v54;
      unint64_t v57 = a1[1];
      if (v57 <= v56) {
        unint64_t v58 = v56;
      }
      else {
        unint64_t v58 = a1[1];
      }
      if (v57 >= v56) {
        unint64_t v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      return 1LL;
    case 5LL:
      unint64_t v27 = *a1;
      unint64_t v28 = a1[1];
      if (*a1 <= v28) {
        unint64_t v29 = a1[1];
      }
      else {
        unint64_t v29 = *a1;
      }
      if (*a1 >= v28) {
        unint64_t v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      unint64_t v30 = a1[3];
      unint64_t v31 = *(a2 - 1);
      if (v30 <= v31) {
        unint64_t v32 = *(a2 - 1);
      }
      else {
        unint64_t v32 = a1[3];
      }
      if (v30 >= v31) {
        unint64_t v30 = *(a2 - 1);
      }
      *(a2 - 1) = v30;
      a1[3] = v32;
      unint64_t v33 = *(a2 - 1);
      unint64_t v34 = a1[2];
      if (v33 <= v34) {
        unint64_t v35 = a1[2];
      }
      else {
        unint64_t v35 = *(a2 - 1);
      }
      if (v33 >= v34) {
        unint64_t v33 = a1[2];
      }
      *(a2 - 1) = v33;
      unint64_t v37 = a1[2];
      unint64_t v36 = a1[3];
      unint64_t v38 = a1[1];
      if (v35 <= v36) {
        unint64_t v37 = a1[3];
      }
      if (v35 < v36) {
        unint64_t v36 = v35;
      }
      a1[2] = v37;
      a1[3] = v36;
      unint64_t v39 = *(a2 - 1);
      if (v38 <= v39) {
        unint64_t v40 = *(a2 - 1);
      }
      else {
        unint64_t v40 = v38;
      }
      if (v38 < v39) {
        unint64_t v39 = v38;
      }
      *(a2 - 1) = v39;
      unint64_t v41 = *a1;
      unint64_t v43 = a1[2];
      unint64_t v42 = a1[3];
      if (v42 <= *a1) {
        unint64_t v44 = *a1;
      }
      else {
        unint64_t v44 = a1[3];
      }
      if (v42 >= *a1) {
        unint64_t v42 = *a1;
      }
      if (v44 <= v43) {
        unint64_t v41 = a1[2];
      }
      if (v44 < v43) {
        unint64_t v43 = v44;
      }
      if (v42 <= v40) {
        unint64_t v45 = v40;
      }
      else {
        unint64_t v45 = v42;
      }
      if (v42 >= v40) {
        unint64_t v42 = v40;
      }
      if (v45 <= v43) {
        unint64_t v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43) {
        unint64_t v46 = v43;
      }
      else {
        unint64_t v46 = v45;
      }
      a1[2] = v46;
      a1[3] = v42;
      return 1LL;
    default:
      unint64_t v6 = a1 + 2;
      unint64_t v5 = a1[2];
      unint64_t v8 = *a1;
      unint64_t v7 = a1[1];
      if (v7 <= v5) {
        unint64_t v9 = a1[2];
      }
      else {
        unint64_t v9 = a1[1];
      }
      if (v7 < v5) {
        unint64_t v5 = a1[1];
      }
      if (v5 <= v8) {
        unint64_t v10 = *a1;
      }
      else {
        unint64_t v10 = v5;
      }
      if (v5 >= v8) {
        unint64_t v5 = *a1;
      }
      *unint64_t v6 = v5;
      if (v10 <= v9) {
        unint64_t v11 = v9;
      }
      else {
        unint64_t v11 = v8;
      }
      if (v10 >= v9) {
        unint64_t v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      unint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      int v13 = 0;
      uint64_t v14 = 24LL;
      break;
  }

  while (1)
  {
    unint64_t v15 = *v12;
    unint64_t v16 = *v6;
    if (*v12 > v16)
    {
      uint64_t v17 = v14;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v17) = v16;
        uint64_t v18 = v17 - 8;
        if (v17 == 8) {
          break;
        }
        unint64_t v16 = *(unint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8LL;
        if (v15 <= v16)
        {
          BOOL v19 = (unint64_t *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }

      BOOL v19 = a1;
LABEL_27:
      unint64_t *v19 = v15;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }

    unint64_t v6 = v12;
    v14 += 8LL;
    if (++v12 == a2) {
      return 1LL;
    }
  }

unint64_t *sub_100092980( unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[v10];
      do
      {
        sub_100092B5C((uint64_t)a1, a4, v9, v12--);
        --v11;
      }

      while (v11);
    }

    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        unint64_t v15 = *v14;
        if (*v14 > *a1)
        {
          *uint64_t v14 = *a1;
          *a1 = v15;
          sub_100092B5C((uint64_t)a1, a4, v9, a1);
        }

        ++v14;
      }

      while (v14 != a3);
      int v13 = a3;
    }

    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0LL;
        unint64_t v18 = *a1;
        BOOL v19 = a1;
        do
        {
          unint64_t v20 = &v19[v17 + 1];
          uint64_t v21 = (2 * v17) | 1;
          uint64_t v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            unint64_t v22 = *v20;
            uint64_t v17 = v21;
          }

          else
          {
            unint64_t v22 = *v20;
            unint64_t v23 = v20[1];
            if (*v20 >= v23) {
              unint64_t v22 = v20[1];
            }
            if (*v20 <= v23) {
              uint64_t v17 = v21;
            }
            else {
              ++v20;
            }
          }

          unint64_t *v19 = v22;
          BOOL v19 = v20;
        }

        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *unint64_t v20 = v18;
        }

        else
        {
          *unint64_t v20 = *v6;
          *unint64_t v6 = v18;
          uint64_t v24 = (char *)v20 - (char *)a1 + 8;
          if (v24 >= 9)
          {
            unint64_t v25 = (((unint64_t)v24 >> 3) - 2) >> 1;
            unint64_t v26 = &a1[v25];
            unint64_t v27 = *v26;
            unint64_t v28 = *v20;
            if (*v26 > *v20)
            {
              do
              {
                *unint64_t v20 = v27;
                unint64_t v20 = v26;
                if (!v25) {
                  break;
                }
                unint64_t v25 = (v25 - 1) >> 1;
                unint64_t v26 = &a1[v25];
                unint64_t v27 = *v26;
              }

              while (*v26 > v28);
              *unint64_t v20 = v28;
            }
          }
        }
      }

      while (v16-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t sub_100092B5C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (unint64_t *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = *v8;
      }

      else
      {
        unint64_t v10 = *v8;
        unint64_t v11 = v8[1];
        if (*v8 >= v11) {
          unint64_t v10 = v8[1];
        }
        if (*v8 > v11)
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }

      unint64_t v12 = *a4;
      if (v10 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(result + 8 * v13);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unint64_t v10 = *v8;
            uint64_t v7 = v13;
          }

          else
          {
            unint64_t v10 = *v8;
            unint64_t v14 = v8[1];
            if (*v8 >= v14) {
              unint64_t v10 = v8[1];
            }
            if (*v8 <= v14) {
              uint64_t v7 = v13;
            }
            else {
              ++v8;
            }
          }
        }

        while (v10 <= v12);
        *a4 = v12;
      }
    }
  }

  return result;
}

void sub_100092C20()
{
}

uint64_t sub_100092C34(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = (int *)result;
LABEL_2:
  uint64_t v9 = v8;
LABEL_3:
  uint64_t v10 = 1 - a4;
  while (2)
  {
    uint64_t v8 = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (char *)a2 - (char *)v9;
    unint64_t v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        int v20 = *(a2 - 1);
        int v21 = *v9;
        if (v20 < *v9)
        {
          *uint64_t v9 = v20;
          *(a2 - 1) = v21;
        }

        return result;
      case 3uLL:
        return sub_100092FCC(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return sub_100093324(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return sub_1000933A4(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2) {
              return (uint64_t)sub_100093448(v9, a2, a2, a3);
            }
            return result;
          }

          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            sub_100092FCC(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          else
          {
            sub_100092FCC(v9, &v9[v13 >> 1], a2 - 1);
            sub_100092FCC(v9 + 1, v15 - 1, a2 - 2);
            sub_100092FCC(v9 + 2, &v9[v14 + 1], a2 - 3);
            sub_100092FCC(v15 - 1, v15, &v9[v14 + 1]);
            int v16 = *v9;
            *uint64_t v9 = *v15;
            int *v15 = v16;
            if ((a5 & 1) != 0) {
              goto LABEL_12;
            }
          }

          if (*(v9 - 1) >= *v9)
          {
            uint64_t result = (uint64_t)sub_100093054(v9, a2);
            uint64_t v9 = (int *)result;
            goto LABEL_17;
          }

uint64_t sub_100092FCC(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  int v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1LL;
    }

    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1LL;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2LL;
  }

  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    int v6 = *a1;
    if (*a2 >= *a1) {
      return 1LL;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2LL;
  }

  return 0LL;
}

int *sub_100093054(int *a1, int *a2)
{
  int v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    int v5 = a1 + 1;
    do
    {
      int v3 = v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }

    while (v2 >= *v3);
  }

  else
  {
    int v3 = a1;
    do
    {
      int v4 = v3[1];
      ++v3;
    }

    while (v2 >= v4);
  }

  if (v3 < a2)
  {
    do
      int v6 = *--a2;
    while (v2 < v6);
  }

  if (v3 < a2)
  {
    int v7 = *v3;
    int v8 = *a2;
    do
    {
      *int v3 = v8;
      *a2 = v7;
      do
      {
        int v9 = v3[1];
        ++v3;
        int v7 = v9;
      }

      while (v2 >= v9);
      do
      {
        int v10 = *--a2;
        int v8 = v10;
      }

      while (v2 < v10);
    }

    while (v3 < a2);
  }

  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

int *sub_100093104(int *a1, int *a2)
{
  uint64_t v2 = 0LL;
  int v3 = *a1;
  do
    int v4 = a1[++v2];
  while (v4 < v3);
  int v5 = &a1[v2];
  int v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      int v8 = *--a2;
    }

    while (v8 >= v3);
  }

  else
  {
    do
      int v7 = *--a2;
    while (v7 >= v3);
  }

  if (v5 < a2)
  {
    int v9 = *a2;
    int v10 = &a1[v2];
    uint64_t v11 = a2;
    do
    {
      *int v10 = v9;
      int *v11 = v4;
      do
      {
        int v12 = v10[1];
        ++v10;
        int v4 = v12;
      }

      while (v12 < v3);
      do
      {
        int v13 = *--v11;
        int v9 = v13;
      }

      while (v13 >= v3);
    }

    while (v10 < v11);
    int v6 = v10 - 1;
  }

  if (v6 != a1) {
    *a1 = *v6;
  }
  *int v6 = v3;
  return v6;
}

BOOL sub_1000931B8(int *a1, int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }

      return result;
    case 3LL:
      sub_100092FCC(a1, a1 + 1, a2 - 1);
      return 1LL;
    case 4LL:
      sub_100093324(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1LL;
    case 5LL:
      sub_1000933A4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1LL;
    default:
      int v8 = a1 + 2;
      sub_100092FCC(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      int v10 = 0;
      uint64_t v11 = 12LL;
      break;
  }

  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 4;
        if (v14 == 4) {
          break;
        }
        int v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4LL;
        if (v12 >= v13)
        {
          int v16 = (int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }

      int v16 = a1;
LABEL_12:
      int *v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }

    int v8 = v9;
    v11 += 4LL;
    if (++v9 == a2) {
      return 1LL;
    }
  }

uint64_t sub_100093324(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result = sub_100092FCC(a1, a2, a3);
  int v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      int v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }

  return result;
}

uint64_t sub_1000933A4(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result = sub_100093324(a1, a2, a3, a4);
  int v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    int v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      int v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        int v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }

  return result;
}

int *sub_100093448(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[v10];
      do
      {
        sub_100093624((uint64_t)a1, a4, v9, v12--);
        --v11;
      }

      while (v11);
    }

    int v13 = v6;
    if (v6 != a3)
    {
      int v14 = v6;
      do
      {
        int v15 = *v14;
        if (*v14 < *a1)
        {
          *int v14 = *a1;
          *a1 = v15;
          sub_100093624((uint64_t)a1, a4, v9, a1);
        }

        ++v14;
      }

      while (v14 != a3);
      int v13 = a3;
    }

    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      do
      {
        uint64_t v17 = 0LL;
        int v18 = *a1;
        BOOL v19 = a1;
        do
        {
          int v20 = &v19[v17 + 1];
          uint64_t v21 = (2 * v17) | 1;
          uint64_t v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            int v22 = *v20;
            uint64_t v17 = v21;
          }

          else
          {
            int v22 = *v20;
            int v23 = v20[1];
            if (*v20 <= v23) {
              int v22 = v20[1];
            }
            if (*v20 >= v23) {
              uint64_t v17 = v21;
            }
            else {
              ++v20;
            }
          }

          int *v19 = v22;
          BOOL v19 = v20;
        }

        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *int v20 = v18;
        }

        else
        {
          *int v20 = *v6;
          *int v6 = v18;
          uint64_t v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            unint64_t v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            unint64_t v26 = &a1[v25];
            int v27 = *v26;
            int v28 = *v20;
            if (*v26 < *v20)
            {
              do
              {
                *int v20 = v27;
                int v20 = v26;
                if (!v25) {
                  break;
                }
                unint64_t v25 = (v25 - 1) >> 1;
                unint64_t v26 = &a1[v25];
                int v27 = *v26;
              }

              while (*v26 < v28);
              *int v20 = v28;
            }
          }
        }
      }

      while (v16-- > 2);
    }

    return v13;
  }

  return a3;
}

uint64_t sub_100093624(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        int v10 = *v8;
      }

      else
      {
        int v10 = *v8;
        int v11 = v8[1];
        if (*v8 <= v11) {
          int v10 = v8[1];
        }
        if (*v8 < v11)
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }

      int v12 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = (2 * v7) | 1;
          uint64_t v8 = (int *)(result + 4 * v13);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            int v10 = *v8;
            uint64_t v7 = v13;
          }

          else
          {
            int v10 = *v8;
            int v14 = v8[1];
            if (*v8 <= v14) {
              int v10 = v8[1];
            }
            if (*v8 >= v14) {
              uint64_t v7 = v13;
            }
            else {
              ++v8;
            }
          }
        }

        while (v10 >= v12);
        *a4 = v12;
      }
    }
  }

  return result;
}

uint64_t **sub_1000936E8(uint64_t **a1, __int128 *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v4) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555LL) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    v20[4] = v7;
    if (v15) {
      uint64_t v16 = (char *)sub_10000701C(v7, v15);
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v17 = &v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[24 * v15];
    __int128 v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v17 = v18;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    v20[2] = v17 + 24;
    sub_100013F10(v4, v20);
    uint64_t v11 = v4[1];
    sub_100014098((uint64_t)v20);
  }

  else
  {
    __int128 v10 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v10;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    uint64_t v11 = v5 + 24;
    v4[1] = v5 + 24;
  }

  v4[1] = v11;
  return a1;
}

void sub_100093818(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10009382C(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  uint64_t v6 = this;
  if (((char)this->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    std::string::size_type v7 = a2 - (void)this;
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__s.__size_;
      unint64_t v9 = this;
      goto LABEL_6;
    }

    return (uint64_t)v6 + v7;
  }

  unint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
  if (!__n_add)
  {
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }

  std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
  sub_100093A60(&__p, a3, a4);
  std::string::size_type v10 = __p.__r_.__value_.__s.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = sub_100093948(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
  return v12;
}

void sub_10009392C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100093948( std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  unint64_t v9 = this;
  if ((char)this->__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__l.__cap_ & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }

  else
  {
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v11 = 22LL;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }

  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0LL, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  else {
    v9->__r_.__value_.__s.__size_ = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    unint64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }

    while (a4 != a5);
  }

  return (uint64_t)v9 + __n_copy;
}

void sub_100093A60(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__l.__cap_ = 0LL;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }

void sub_100093AB4(void *a1)
{
}

void sub_100093AD0(_Unwind_Exception *a1)
{
}

uint64_t sub_100093AE4(int a1, int a2, int a3)
{
  uint64_t v3 = 2LL;
  if (!a1) {
    uint64_t v3 = 0LL;
  }
  if (a2) {
    v3 |= 0x20uLL;
  }
  if (a3) {
    return v3 | 0x40;
  }
  else {
    return v3;
  }
}

uint64_t sub_100093B0C(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t v4 = 0LL;
  if ((a2 & 0x80000000) == 0 && (a3 & 0x80000000) == 0)
  {
    int v5 = *(_DWORD *)(a1 + 12);
    if (v5 > a2)
    {
      if (*(_DWORD *)(a1 + 16) <= a3)
      {
        return 0LL;
      }

      else
      {
        *(double *)(*(void *)a1 + 8LL * (a2 + v5 * a3)) = a4;
        *(_BYTE *)(a1 + 8) = 0;
        return 1LL;
      }
    }
  }

  return v4;
}

uint64_t sub_100093B54(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  size_t v4 = 8LL * a3 * a2;
  if (a3 * a2 < 0) {
    size_t v5 = -1LL;
  }
  else {
    size_t v5 = 8LL * a3 * a2;
  }
  uint64_t v6 = operator new[](v5);
  *(void *)a1 = v6;
  bzero(v6, v4);
  return a1;
}

void sub_100093BA0(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_100093BAC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0LL;
  int v4 = *(_DWORD *)(a2 + 12);
  int v5 = *(_DWORD *)(a2 + 16);
  if (v5 * v4 < 0) {
    size_t v6 = -1LL;
  }
  else {
    size_t v6 = 8LL * v5 * v4;
  }
  std::string::size_type v7 = operator new[](v6);
  memcpy(v7, *(const void **)a2, 8LL * v5 * v4);
  *(void *)a1 = v7;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  return a1;
}

void sub_100093C1C(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  _Unwind_Resume(a1);
}

uint64_t sub_100093C28(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  *(void *)a2 = 0LL;
  *(void *)a1 = v4;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  int v5 = *(void **)a2;
  *(void *)a2 = 0LL;
  if (v5) {
    operator delete[](v5);
  }
  *(_WORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return a1;
}

uint64_t sub_100093C84(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v4 = *(_DWORD *)(a2 + 12);
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 * v4 < 0) {
      size_t v6 = -1LL;
    }
    else {
      size_t v6 = 8LL * v5 * v4;
    }
    std::string::size_type v7 = operator new[](v6);
    memcpy(v7, *(const void **)a2, 8LL * v5 * v4);
    unint64_t v8 = *(void **)a1;
    *(void *)a1 = v7;
    if (v8)
    {
      operator delete[](v8);
      int v4 = *(_DWORD *)(a2 + 12);
      int v5 = *(_DWORD *)(a2 + 16);
    }

    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v4;
    *(_DWORD *)(a1 + 16) = v5;
  }

  return a1;
}

uint64_t sub_100093D08(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v4 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v4) {
      operator delete[](v4);
    }
    int v5 = *(void **)a2;
    *(void *)a2 = 0LL;
    size_t v6 = *(void **)a1;
    *(void *)a1 = v5;
    if (v6) {
      operator delete[](v6);
    }
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(void *)(a1 + 12) = *(void *)(a2 + 12);
    std::string::size_type v7 = *(void **)a2;
    *(void *)a2 = 0LL;
    if (v7) {
      operator delete[](v7);
    }
    *(_WORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }

  return a1;
}

_DWORD *sub_100093D84@<X0>(_DWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  unsigned int v4 = result[4];
  BOOL v5 = v4 >= a2;
  unsigned int v6 = v4 - a2;
  if (v6 != 0 && v5)
  {
    unint64_t v8 = result;
    int v9 = result[3];
    __int16 v15 = 0;
    int v16 = v9;
    unsigned int v17 = v6;
    int v10 = v9 * v6;
    size_t v11 = 8LL * v10;
    if (v10 < 0) {
      size_t v12 = -1LL;
    }
    else {
      size_t v12 = 8LL * v10;
    }
    std::string __p = operator new[](v12);
    bzero(__p, v11);
    sub_100093E78(a3, (uint64_t)&__p);
    size_t v13 = __p;
    std::string __p = 0LL;
    if (v13) {
      operator delete[](v13);
    }
    uint64_t result = memcpy( *(void **)a3,  (const void *)(*(void *)v8 + 8LL * v8[3] * a2),  8LL * *(_DWORD *)(a3 + 16) * *(_DWORD *)(a3 + 12));
    *(_BYTE *)(a3 + 8) = 0;
  }

  return result;
}

void sub_100093E3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete[](__p);
  }
  if (*(_BYTE *)(v10 + 24))
  {
    size_t v12 = *(void **)v10;
    *(void *)uint64_t v10 = 0LL;
    if (v12) {
      operator delete[](v12);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100093E78(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24)) {
    return sub_100093D08(a1, a2);
  }
  uint64_t result = sub_100093C28(a1, a2);
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t sub_100093EA4(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2 < 0) {
    return 0LL;
  }
  uint64_t result = 0LL;
  if ((a3 & 0x80000000) == 0)
  {
    int v6 = *(_DWORD *)(a1 + 12);
    if (v6 > a2)
    {
      if (*(_DWORD *)(a1 + 16) > a3)
      {
        *a4 = *(void *)(*(void *)a1 + 8LL * (a2 + v6 * a3));
        return 1LL;
      }

      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100093EEC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return 1LL;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v3) {
    goto LABEL_24;
  }
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if ((int)v3 >= 1)
      {
        BOOL v5 = *(void **)a1;
        do
        {
          *v5++ = 0x3FF0000000000000LL;
          --v3;
        }

        while (v3);
      }

void sub_100094148(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 9);
  uint64_t v5 = 12LL;
  if (!*(_BYTE *)(a1 + 9)) {
    uint64_t v5 = 16LL;
  }
  int v6 = *(_DWORD *)(a1 + v5);
  if (*(_BYTE *)(a2 + 9)) {
    int v7 = *(_DWORD *)(a2 + 16);
  }
  else {
    int v7 = *(_DWORD *)(a2 + 12);
  }
  if (v6 != v7) {
    goto LABEL_25;
  }
  int v8 = *(_BYTE *)(a2 + 9) ? *(_DWORD *)(a2 + 12) : *(_DWORD *)(a2 + 16);
  if (v6 != 1 && v8 != 1) {
    goto LABEL_25;
  }
  uint64_t v11 = 16LL;
  if (!*(_BYTE *)(a1 + 9)) {
    uint64_t v11 = 12LL;
  }
  int v12 = *(_DWORD *)(a1 + v11);
  BOOL v13 = !v6 || v12 == 0;
  if (!v13 && v8 != 0)
  {
    if (v8 * v12 < 0) {
      size_t v17 = -1LL;
    }
    else {
      size_t v17 = 8LL * v8 * v12;
    }
    __Y = operator new[](v17);
    bzero(__Y, 8LL * v8 * v12);
    if (v4) {
      CBLAS_TRANSPOSE v19 = CblasTrans;
    }
    else {
      CBLAS_TRANSPOSE v19 = CblasNoTrans;
    }
    cblas_dgemv( CblasColMajor,  v19,  v12,  v6,  1.0,  *(const double **)a1,  v12,  *(const double **)a2,  1,  1.0,  (double *)__Y,  1);
    *(void *)a3 = __Y;
    *(_WORD *)(a3 + 8) = 0;
    char v15 = 1;
    *(_DWORD *)(a3 + 12) = v12;
    *(_DWORD *)(a3 + 16) = v8;
  }

  else
  {
LABEL_25:
    char v15 = 0;
    *(_BYTE *)a3 = 0;
  }

  *(_BYTE *)(a3 + 24) = v15;
}

void sub_10009427C(_Unwind_Exception *a1)
{
}

uint64_t sub_100094290(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(a1 + 16))
  {
    unsigned int v6 = *(_DWORD *)(a2 + 12);
    unsigned int v7 = a3 - v6;
    if (a3 >= v6)
    {
      if (a3 == v6)
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CAF0);
        }
        __int128 v18 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v19 = *(_DWORD *)(a2 + 16);
          *(_DWORD *)buf = 68289538;
          int v39 = 0;
          __int16 v40 = 2082;
          unint64_t v41 = "";
          __int16 v42 = 1026;
          unsigned int v43 = a3;
          __int16 v44 = 1026;
          unsigned int v45 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:rows to append are max length - copy, MaxNumRows:%{public}d, NumRowsToAppend:%{public}d}",  buf,  0x1Eu);
        }

        sub_100093C84(a1, a2);
      }

      else
      {
        unsigned int v20 = *(_DWORD *)(a1 + 12) + v6;
        if (v20 >= a3) {
          unsigned int v21 = a3;
        }
        else {
          unsigned int v21 = v20;
        }
        if (v20 <= a3) {
          unsigned int v22 = *(_DWORD *)(a1 + 12);
        }
        else {
          unsigned int v22 = v7;
        }
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CAF0);
        }
        int v23 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v24 = *(_DWORD *)(a1 + 12);
          int v25 = *(_DWORD *)(a2 + 16);
          *(_DWORD *)buf = 68289794;
          int v39 = 0;
          __int16 v40 = 2082;
          unint64_t v41 = "";
          __int16 v42 = 1026;
          unsigned int v43 = v24;
          __int16 v44 = 1026;
          unsigned int v45 = v22;
          __int16 v46 = 1026;
          int v47 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:appending rows, NumOldRows:%{public}d, NumOldRowsToKeep:%{public}d, NumRo wsToAppend:%{public}d}",  buf,  0x24u);
        }

        uint64_t v35 = a2;
        uint64_t v26 = *(unsigned int *)(a1 + 16);
        int v27 = (char *)operator new[](8LL * v26 * v21);
        uint64_t v34 = a1;
        int v28 = *(char **)a1;
        if ((_DWORD)v26)
        {
          unsigned int v29 = 0;
          unsigned int v30 = 0;
          int v31 = 0;
          uint64_t v32 = *(int *)(v35 + 12);
          uint64_t v37 = *(void *)v35;
          int v36 = *(_DWORD *)(v34 + 12);
          size_t v33 = 8LL * v22;
          do
          {
            memcpy(&v27[8 * v29], (const void *)(v37 + 8LL * v30), 8 * v32);
            memcpy(&v27[8 * v29 + 8 * v32], &v28[8 * v31], v33);
            v31 += v36;
            v30 += v32;
            v29 += v21;
            --v26;
          }

          while (v26);
        }

        *(void *)uint64_t v34 = v27;
        if (!*(_BYTE *)(v35 + 8)) {
          *(_BYTE *)(v34 + 8) = 0;
        }
        *(_DWORD *)(v34 + 12) = v21;
        if (v28) {
          operator delete[](v28);
        }
      }

      return 1LL;
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CAF0);
      }
      uint64_t v8 = qword_1019348D8;
      BOOL v9 = os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0LL;
      if (v9)
      {
        unsigned int v11 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)buf = 68289538;
        int v39 = 0;
        __int16 v40 = 2082;
        unint64_t v41 = "";
        __int16 v42 = 1026;
        unsigned int v43 = a3;
        __int16 v44 = 1026;
        unsigned int v45 = v11;
        int v12 = "{msg%{public}.0s:cannot append rows more rows than allowed, MaxNumRows:%{public}d, NumRowsTo"
              "Append:%{public}d}";
        BOOL v13 = (os_log_s *)v8;
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, buf, 0x1Eu);
        return 0LL;
      }
    }
  }

  else
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CAF0);
    }
    uint64_t v14 = qword_1019348D8;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0LL;
    if (v15)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 16);
      unsigned int v17 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)buf = 68289538;
      int v39 = 0;
      __int16 v40 = 2082;
      unint64_t v41 = "";
      __int16 v42 = 1026;
      unsigned int v43 = v16;
      __int16 v44 = 1026;
      unsigned int v45 = v17;
      int v12 = "{msg%{public}.0s:cannot append rows with incompatible number of columns, NumColumns:%{public}d, "
            "OtherNumColumns:%{public}d}";
      BOOL v13 = (os_log_s *)v14;
      goto LABEL_11;
    }
  }

  return result;
}

void *sub_1000946B0@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, (&off_10181CB10)[a1]);
}

__n128 sub_1000946C8(uint64_t a1, char a2, char a3, char a4, uint64_t a5, __n128 *a6, double a7)
{
  *(double *)a1 = a7;
  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 9) = a3;
  *(_BYTE *)(a1 + 10) = a4;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a5;
  *(void *)(a1 + 32) = *(void *)(a5 + 16);
  *(void *)a5 = 0LL;
  *(void *)(a5 + 8) = 0LL;
  *(void *)(a5 + 16) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  __n128 result = *a6;
  *(__n128 *)(a1 + 40) = *a6;
  *(void *)(a1 + 56) = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0LL;
  a6->n128_u64[1] = 0LL;
  a6[1].n128_u64[0] = 0LL;
  return result;
}

void *sub_10009471C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_1010DDBC0(a2, (&off_10181CB28)[a1]);
}

unint64_t sub_100094730(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0LL;
  for (uint64_t i = 0LL; i != 16; ++i)
    result ^= (result << 6) + (result >> 2) + 2654435769u + *(unsigned __int8 *)(a2 + i);
  return result;
}

uint64_t sub_100094768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 == *(void *)a3 && *(void *)(a2 + 8) == *(void *)(a3 + 8)) {
    return sub_100094790((unsigned __int8 *)(a2 + 16), (unsigned __int8 *)(a3 + 16));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100094790(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[24]) {
    BOOL v2 = a2[24] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (a1[24] != 0) == (a2[24] != 0);
  }
  uint64_t v4 = a1[23];
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return 0LL;
  }
  if (v7 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1LL;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a1++;
    int v9 = v10;
    int v12 = *a2++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    BOOL v2 = v9 == v11;
    BOOL v3 = v9 == v11;
  }

  while (v2 && v14);
  return v3;
}

unint64_t sub_100094860(int a1)
{
  else {
    return qword_1012CB178[a1 - 1] | (unint64_t)&_mh_execute_header;
  }
}

BOOL sub_100094888(int a1)
{
  return a1 == 1;
}

void sub_100094894(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1000948C0(uint64_t *a1@<X1>, double *a2@<X2>, _BYTE *a3@<X8>)
{
  if (*((_BYTE *)a1 + 16)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = *((_BYTE *)a1 + 9) == 0;
  }
  int v7 = !v6;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CB68);
  }
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *a1;
      int v10 = *((unsigned __int8 *)a1 + 8);
      int v11 = *((unsigned __int8 *)a1 + 9);
      int v12 = *((_DWORD *)a1 + 3);
      int v13 = *((unsigned __int8 *)a1 + 16);
      *(_DWORD *)buf = 68290563;
      int v18 = 0;
      __int16 v19 = 2082;
      unsigned int v20 = "";
      __int16 v21 = 2049;
      uint64_t v22 = v9;
      __int16 v23 = 1025;
      int v24 = v10;
      __int16 v25 = 1025;
      int v26 = v11;
      __int16 v27 = 1025;
      int v28 = v12;
      __int16 v29 = 1025;
      int v30 = v13;
      __int16 v31 = 1025;
      int v32 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:batterylevel, level:%{private}f, charged:%{private}d, connected:%{priva te}d, chargerType:%{private}d, wasConnected:%{private}d, isNewlyConnected:%{private}d}",  buf,  0x3Au);
    }
  }

  double v14 = *a2;
  sub_1000635F8((uint64_t)v15);
  sub_100094AD4((uint64_t)v15, 0, 0, 3u, (uint64_t)v16, v14);
  buf[0] = v7;
  sub_1000865CC(&v19);
  *a3 = buf[0];
  sub_1000865CC(a3 + 8);
  sub_100086708(&v19);
  sub_100086708(v16);
  sub_100073A20((wireless_diagnostics::google::protobuf::MessageLite *)v15);
}

void sub_100094A98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_100094AD4( uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unsigned int v12 = *(_DWORD *)(a1 + 8);
  if (!sub_100064160(v12))
  {
    double v14 = "::CLMicroLocationProto::EventType_IsValid(value)";
    int v15 = 19803;
    unsigned int v16 = "set_eventtype";
    goto LABEL_6;
  }

  int v13 = *(_DWORD *)(a5 + 128);
  *(_DWORD *)(a5 + 72) = v12;
  *(double *)(a5 + 8) = a6;
  *(_BYTE *)(a5 + 77) = a2;
  *(_DWORD *)(a5 + 128) = v13 | 0x2803;
  *(_BYTE *)(a5 + 76) = a3;
  if ((sub_100064130(a4) & 1) == 0)
  {
    double v14 = "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)";
    int v15 = 20312;
    unsigned int v16 = "set_confidencelevel";
LABEL_6:
    __assert_rtn(v16, "microlocation.pb.h", v15, v14);
  }

  *(_DWORD *)(a5 + 128) |= 0x4000u;
  *(_DWORD *)(a5 + 120) = a4;
  sub_100101ADC(a5, a1);
}

void sub_100094BB8(_Unwind_Exception *a1)
{
}

void sub_100094BCC(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_100094BF8(uint64_t a1)
{
  *(_DWORD *)(a1 + 12) = 0;
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 0;
  sub_10014C3A8(a1 + 16);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 280) = 0LL;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  sub_1002F0B04(&v10);
  memset(&v9, 0, sizeof(v9));
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsVersion", 0x8000100u, kCFAllocatorNull);
  BOOL v3 = sub_1002A85D0(v10, (uint64_t)v2, &v9);
  CFRelease(v2);
  if (v3)
  {
    else {
      std::string __p = v9;
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      sub_1010DD48C((_BYTE *)(a1 + 328), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }

    else
    {
      *(std::string *)(a1 + 328) = __p;
    }
  }

  else
  {
    sub_1010DDBC0((void *)(a1 + 328), "2.0.9");
  }

  uint64_t v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_100094D9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_10000AE14((uint64_t)&a21);
  __int16 v25 = *(void **)(v21 + 304);
  if (v25)
  {
    *(void *)(v21 + 312) = v25;
    operator delete(v25);
  }

  sub_100019B90(v21 + 256);
  sub_100019C0C((void ***)&a15);
  sub_100019C7C(v23);
  sub_100019CEC(v22);
  _Unwind_Resume(a1);
}

std::string *sub_100094E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 232);
  for (uint64_t i = *(void *)(a1 + 240); v4 != i; v4 += 32LL)
  {
    int v6 = *(_DWORD *)(a2 + 20);
    uint64_t v7 = *(int *)(a2 + 16);
    if ((int)v7 >= v6)
    {
      if (v6 == *(_DWORD *)(a2 + 24))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8),  v6 + 1);
        int v6 = *(_DWORD *)(a2 + 20);
      }

      *(_DWORD *)(a2 + 20) = v6 + 1;
      std::string v9 = sub_10009AF4C();
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = *(int *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = v11 + 1;
      *(void *)(v10 + 8 * v11) = v9;
    }

    else
    {
      uint64_t v8 = *(void *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v7 + 1;
      std::string v9 = *(void **)(v8 + 8 * v7);
    }

    uint64_t v12 = *(void *)v4;
    __int128 v56 = *(_OWORD *)(v4 + 16);
    char v57 = 1;
    sub_10013B390(v12, (uint64_t)&v56, (uint64_t)&__str);
    sub_10006AD74((uint64_t)v9, (uint64_t)&__str);
    sub_10006A1BC(&__str);
  }

  for (j = *(void **)(a1 + 272); j; j = (void *)*j)
  {
    int v14 = *(_DWORD *)(a2 + 68);
    uint64_t v15 = *(int *)(a2 + 64);
    if ((int)v15 >= v14)
    {
      if (v14 == *(_DWORD *)(a2 + 72))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 56),  v14 + 1);
        int v14 = *(_DWORD *)(a2 + 68);
      }

      *(_DWORD *)(a2 + 68) = v14 + 1;
      unsigned int v17 = (int *)sub_10009AF8C();
      uint64_t v18 = *(void *)(a2 + 56);
      uint64_t v19 = *(int *)(a2 + 64);
      *(_DWORD *)(a2 + 64) = v19 + 1;
      *(void *)(v18 + 8 * v19) = v17;
    }

    else
    {
      uint64_t v16 = *(void *)(a2 + 56);
      *(_DWORD *)(a2 + 64) = v15 + 1;
      unsigned int v17 = *(int **)(v16 + 8 * v15);
    }

    uint64_t v20 = 0LL;
    __str.__r_.__value_.__s.__size_ = 16;
    do
    {
      __str.__r_.__value_.__s.__data_[v20] = *((_BYTE *)j + v20 + 16);
      ++v20;
    }

    while (v20 != 16);
    __str.__r_.__value_.__s.__data_[16] = 0;
    v17[11] |= 1u;
    uint64_t v21 = (std::string *)*((void *)v17 + 1);
    if (v21 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      uint64_t v21 = (std::string *)operator new(0x18uLL);
      v21->__r_.__value_.__r.__words[0] = 0LL;
      v21->__r_.__value_.__l.__size_ = 0LL;
      v21->__r_.__value_.__l.__cap_ = 0LL;
      *((void *)v17 + 1) = v21;
    }

    uint64_t v22 = std::string::operator=(v21, &__str);
    uint64_t v24 = j[4];
    for (uint64_t k = j[5]; v24 != k; v24 += 16LL)
    {
      uint64_t v25 = 0LL;
      __str.__r_.__value_.__s.__size_ = 16;
      do
      {
        __str.__r_.__value_.__s.__data_[v25] = *(_BYTE *)(v24 + v25);
        ++v25;
      }

      while (v25 != 16);
      __str.__r_.__value_.__s.__data_[16] = 0;
      int v26 = v17[7];
      uint64_t v27 = v17[6];
      if ((int)v27 >= v26)
      {
        if (v26 == v17[8])
        {
          uint64_t v22 = (std::string *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v17 + 4),  v26 + 1);
          int v26 = v17[7];
        }

        v17[7] = v26 + 1;
        __int16 v29 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)v22);
        uint64_t v30 = *((void *)v17 + 2);
        uint64_t v31 = v17[6];
        v17[6] = v31 + 1;
        *(void *)(v30 + 8 * v31) = v29;
      }

      else
      {
        uint64_t v28 = *((void *)v17 + 2);
        v17[6] = v27 + 1;
        __int16 v29 = *(std::string **)(v28 + 8 * v27);
      }

      uint64_t v22 = std::string::operator=(v29, &__str);
    }
  }

  uint64_t v32 = *(void *)(a1 + 280);
  *(_DWORD *)(a2 + 192) |= 2u;
  *(void *)(a2 + 32) = v32;
  unsigned int v33 = *(_DWORD *)a1;
  if (!sub_1000641A8(*(_DWORD *)a1))
  {
    unint64_t v51 = "::CLMicroLocationProto::Model_GenerationAlgorithm_IsValid(value)";
    int v52 = 12260;
    unint64_t v53 = "set_generationalgorithm";
    goto LABEL_58;
  }

  *(_DWORD *)(a2 + 192) |= 8u;
  *(_DWORD *)(a2 + 48) = v33;
  unsigned int v34 = *(_DWORD *)(a1 + 4);
  if (!sub_10006ED58(v34))
  {
    unint64_t v51 = "::CLMicroLocationProto::Model_ModelType_IsValid(value)";
    int v52 = 12283;
    unint64_t v53 = "set_modeltype";
LABEL_58:
    __assert_rtn(v53, "microlocation.pb.h", v52, v51);
  }

  *(_DWORD *)(a2 + 192) |= 0x10u;
  *(_DWORD *)(a2 + 52) = v34;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CB88);
  }
  uint64_t v35 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    BOOL v36 = sub_1000954BC(a1);
    __str.__r_.__value_.__r.__words[0] = 68289282LL;
    LOWORD(__str.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    WORD1(__str.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(__str.__r_.__value_.__r.__words[2]) = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:isStable, toProtobuf, isStableflag:%{public}hhd}",  (uint8_t *)&__str,  0x18u);
  }

  BOOL v37 = sub_1000954BC(a1);
  int v38 = *(_DWORD *)(a2 + 192);
  *(_BYTE *)(a2 + 104) = v37;
  *(_DWORD *)(a2 + 108) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 192) = v38 | 0x380;
  int v39 = *(_DWORD **)(a2 + 112);
  if (!v39)
  {
    int v39 = operator new(0x28uLL);
    sub_10006341C((uint64_t)v39);
    *(void *)(a2 + 112) = v39;
  }

  sub_10014C640(a1 + 16, (int *)&__str);
  sub_10006C9C4(v39, (uint64_t)&__str);
  sub_10006C5E8((wireless_diagnostics::google::protobuf::MessageLite *)&__str);
  unsigned int v40 = *(_DWORD *)(a1 + 296);
  if (!sub_10006ED58(v40))
  {
    int v54 = 12484;
    unint64_t v55 = "set_qualityindicator";
    goto LABEL_61;
  }

  *(_DWORD *)(a2 + 192) |= 0x800u;
  *(_DWORD *)(a2 + 128) = v40;
  unsigned int v41 = *(_DWORD *)(a1 + 300);
  if (!sub_10006ED58(v41))
  {
    int v54 = 12507;
    unint64_t v55 = "set_candidatequalityindicator";
LABEL_61:
    __assert_rtn(v55, "microlocation.pb.h", v54, "::CLMicroLocationProto::Model_ModelQualityLevel_IsValid(value)");
  }

  *(_DWORD *)(a2 + 192) |= 0x1000u;
  *(_DWORD *)(a2 + 132) = v41;
  __int16 v42 = *(unsigned int **)(a1 + 304);
  for (m = *(unsigned int **)(a1 + 312); v42 != m; ++v42)
  {
    unsigned int v44 = *v42;
    if (!sub_100064154(*v42)) {
      __assert_rtn( "add_candidatequalityreasons",  "microlocation.pb.h",  12527,  "::CLMicroLocationProto::ServiceQualityReasonEnum_IsValid(value)");
    }
    int v45 = *(_DWORD *)(a2 + 144);
    if (v45 == *(_DWORD *)(a2 + 148))
    {
      sub_10004AAFC(a2 + 136, v45 + 1);
      int v45 = *(_DWORD *)(a2 + 144);
    }

    uint64_t v46 = *(void *)(a2 + 136);
    *(_DWORD *)(a2 + 144) = v45 + 1;
    *(_DWORD *)(v46 + 4LL * v45) = v44;
  }

  if (*(_DWORD *)(a1 + 4) == 2 && *(_BYTE *)(a1 + 192))
  {
    *(_DWORD *)(a2 + 192) |= 0x400u;
    int v47 = *(void **)(a2 + 120);
    if (!v47)
    {
      int v47 = operator new(0x50uLL);
      sub_1000634B8((uint64_t)v47);
      *(void *)(a2 + 120) = v47;
    }

    sub_1000957A0((uint64_t *)(a1 + 72), (uint64_t)&__str);
    sub_10006ED00((uint64_t)v47, (uint64_t)&__str);
    sub_10006E620((wireless_diagnostics::google::protobuf::MessageLite *)&__str);
  }

  int v48 = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 200);
  *(void *)(a2 + 168) = *(void *)(a1 + 216);
  *(_DWORD *)(a2 + 184) = *(_DWORD *)(a1 + 224);
  *(_DWORD *)(a2 + 192) = v48 | 0x3FC000;
  unint64_t v49 = *(std::string **)(a2 + 176);
  if (v49 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
  {
    unint64_t v49 = (std::string *)operator new(0x18uLL);
    v49->__r_.__value_.__r.__words[0] = 0LL;
    v49->__r_.__value_.__l.__size_ = 0LL;
    v49->__r_.__value_.__l.__cap_ = 0LL;
    *(void *)(a2 + 176) = v49;
  }

  return std::string::operator=(v49, (const std::string *)(a1 + 328));
}

void sub_100095418( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

uint64_t sub_1000954B4(uint64_t a1)
{
  return *(void *)(a1 + 280);
}

BOOL sub_1000954BC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4) == 2) {
    return *(_BYTE *)(a1 + 8) != 0;
  }
  BOOL v3 = *(void **)(a1 + 272);
  if (v3)
  {
    unint64_t v4 = 0LL;
    do
    {
      v4 += (uint64_t)(v3[5] - v3[4]) >> 4;
      BOOL v3 = (void *)*v3;
    }

    while (v3);
  }

  else
  {
    unint64_t v4 = 0LL;
  }

  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CB88);
  }
  uint64_t v5 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    int v7 = *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v25 = 2082;
    *(void *)&v25[2] = "";
    __int16 v26 = 2050;
    unint64_t v27 = v4;
    __int16 v28 = 2050;
    uint64_t v29 = v6;
    __int16 v30 = 1026;
    int v31 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:isStable, getter, numRecordingsBeforePruning:%{public}ld, numDaysWithRecordings:% {public}ld, fIsStable:%{public}hhd}",  buf,  0x2Cu);
  }

  if (*(_BYTE *)(a1 + 8)) {
    return 1LL;
  }
  sub_1002F0B04(buf);
  CFStringRef v8 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumNumberOfRecordingsInStableModel",  0x8000100u,  kCFAllocatorNull);
  int v9 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v8, &v23);
  CFRelease(v8);
  unint64_t v10 = v23;
  uint64_t v11 = *(std::__shared_weak_count **)v25;
  if (*(void *)v25)
  {
    uint64_t v12 = (unint64_t *)(*(void *)v25 + 8LL);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  unint64_t v14 = 200LL;
  if (v9) {
    unint64_t v14 = v10;
  }
  if (v4 >= v14) {
    return 1LL;
  }
  unint64_t v15 = *(unsigned int *)(a1 + 12);
  sub_1002F0B04(buf);
  CFStringRef v16 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsMinimumNumberOfDaysWithRecordingsInStableModel",  0x8000100u,  kCFAllocatorNull);
  int v17 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v16, &v23);
  CFRelease(v16);
  unint64_t v18 = v23;
  uint64_t v19 = *(std::__shared_weak_count **)v25;
  if (*(void *)v25)
  {
    uint64_t v20 = (unint64_t *)(*(void *)v25 + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  unint64_t v22 = 10LL;
  if (v17) {
    unint64_t v22 = v18;
  }
  return v22 <= v15;
}

void sub_100095760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_100095788(uint64_t a1)
{
  return *(unsigned int *)(a1 + 296);
}

uint64_t sub_100095790(uint64_t a1)
{
  return *(unsigned int *)(a1 + 300);
}

uint64_t sub_100095798(uint64_t a1)
{
  return a1 + 304;
}

void sub_1000957A0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)sub_1000634B8(a2);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      uint64_t v7 = 0LL;
      __str.__r_.__value_.__s.__size_ = 16;
      do
      {
        __str.__r_.__value_.__s.__data_[v7] = *(_BYTE *)(v5 + v7);
        ++v7;
      }

      while (v7 != 16);
      __str.__r_.__value_.__s.__data_[16] = 0;
      int v8 = *(_DWORD *)(a2 + 20);
      uint64_t v9 = *(int *)(a2 + 16);
      if ((int)v9 >= v8)
      {
        if (v8 == *(_DWORD *)(a2 + 24))
        {
          unint64_t v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 8),  v8 + 1);
          int v8 = *(_DWORD *)(a2 + 20);
        }

        *(_DWORD *)(a2 + 20) = v8 + 1;
        uint64_t v11 = (std::string *)wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(v4);
        uint64_t v12 = *(void *)(a2 + 8);
        uint64_t v13 = *(int *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v13 + 1;
        *(void *)(v12 + 8 * v13) = v11;
      }

      else
      {
        uint64_t v10 = *(void *)(a2 + 8);
        *(_DWORD *)(a2 + 16) = v9 + 1;
        uint64_t v11 = *(std::string **)(v10 + 8 * v9);
      }

      unint64_t v4 = (wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)std::string::operator=( v11,  &__str);
      v5 += 16LL;
    }

    while (v5 != v6);
  }

  unint64_t v14 = (unsigned int *)a1[10];
  for (uint64_t i = (unsigned int *)a1[11]; v14 != i; ++v14)
  {
    unsigned int v16 = *v14;
    if ((sub_100064130(*v14) & 1) == 0) {
      __assert_rtn( "add_eventconfidences",  "microlocation.pb.h",  12157,  "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)");
    }
    int v17 = *(_DWORD *)(a2 + 64);
    if (v17 == *(_DWORD *)(a2 + 68))
    {
      sub_10004AAFC(a2 + 56, v17 + 1);
      int v17 = *(_DWORD *)(a2 + 64);
    }

    uint64_t v18 = *(void *)(a2 + 56);
    *(_DWORD *)(a2 + 64) = v17 + 1;
    *(_DWORD *)(v18 + 4LL * v17) = v16;
  }

  uint64_t v19 = a1[3];
  if (a1[4] != v19)
  {
    uint64_t v20 = 0LL;
    unint64_t v21 = 0LL;
    do
    {
      int v22 = *(_DWORD *)(a2 + 44);
      uint64_t v23 = *(int *)(a2 + 40);
      if ((int)v23 >= v22)
      {
        if (v22 == *(_DWORD *)(a2 + 48))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 32),  v22 + 1);
          int v22 = *(_DWORD *)(a2 + 44);
        }

        *(_DWORD *)(a2 + 44) = v22 + 1;
        uint64_t v25 = sub_10009B064();
        uint64_t v26 = *(void *)(a2 + 32);
        uint64_t v27 = *(int *)(a2 + 40);
        *(_DWORD *)(a2 + 40) = v27 + 1;
        *(void *)(v26 + 8 * v27) = v25;
        uint64_t v19 = a1[3];
      }

      else
      {
        uint64_t v24 = *(void *)(a2 + 32);
        *(_DWORD *)(a2 + 40) = v23 + 1;
        uint64_t v25 = *(void **)(v24 + 8 * v23);
      }

      uint64_t v28 = 0LL;
      __str.__r_.__value_.__s.__size_ = 16;
      uint64_t v29 = v19 + v20;
      do
      {
        __str.__r_.__value_.__s.__data_[v28] = *(_BYTE *)(v29 + v28);
        ++v28;
      }

      while (v28 != 16);
      __str.__r_.__value_.__s.__data_[16] = 0;
      *((_DWORD *)v25 + 9) |= 1u;
      __int16 v30 = (std::string *)v25[1];
      if (v30 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        __int16 v30 = (std::string *)operator new(0x18uLL);
        v30->__r_.__value_.__r.__words[0] = 0LL;
        v30->__r_.__value_.__l.__size_ = 0LL;
        v30->__r_.__value_.__l.__cap_ = 0LL;
        v25[1] = v30;
      }

      std::string::operator=(v30, &__str);
      if (a1[1] != *a1)
      {
        unint64_t v31 = 0LL;
        do
        {
          sub_100093EA4((uint64_t)(a1 + 6), v21, v31, &__str);
          std::string::size_type v32 = __str.__r_.__value_.__r.__words[0];
          int v33 = *((_DWORD *)v25 + 6);
          if (v33 == *((_DWORD *)v25 + 7))
          {
            sub_10008D024((uint64_t)(v25 + 2), v33 + 1);
            int v33 = *((_DWORD *)v25 + 6);
          }

          uint64_t v34 = v25[2];
          *((_DWORD *)v25 + 6) = v33 + 1;
          *(void *)(v34 + 8LL * v33) = v32;
          ++v31;
        }

        while (v31 < (a1[1] - *a1) >> 4);
      }

      ++v21;
      uint64_t v19 = a1[3];
      v20 += 16LL;
    }

    while (v21 < (a1[4] - v19) >> 4);
  }

void sub_100095AB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_100095AF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v91 = 0uLL;
  __int128 v90 = 0uLL;
  uint64_t v71 = a1;
  uint64_t v6 = *(int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    uint64_t v7 = *(uint64_t **)(a1 + 8);
    uint64_t v8 = 8 * v6;
    while (1)
    {
      uint64_t v9 = *v7;
      int v10 = *(_DWORD *)(*v7 + 104);
      if ((v10 & 0x20) != 0) {
        break;
      }
      if ((v10 & 2) != 0)
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CB88);
        }
        unint64_t v15 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "#Warning The protobuf fingerprint is using a deprecated uint64 cluster label",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181CB88);
          }
          LOWORD(v76[0]) = 0;
          LODWORD(v70) = 2;
          int v17 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning The protobuf fingerprint is using a deprecated uint64 cluster label",  v76,  v70);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "static CLMicroLocationModel CLMicroLocationModel::fromProtobuf(const CLMicroLocationProto::Model &, CLMicroL ocationFingerprintPool &)",  "%s\n",  v17);
        }

        *(void *)&__int128 v91 = *(void *)(v9 + 32);
        goto LABEL_25;
      }

      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CB88);
      }
      uint64_t v11 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning The protobuf fingerprint does not have a cluster identifer",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CB88);
        }
        LOWORD(v76[0]) = 0;
        LODWORD(v70) = 2;
        uint64_t v12 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "#Warning The protobuf fingerprint does not have a cluster identifer",  v76,  v70);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static CLMicroLocationModel CLMicroLocationModel::fromProtobuf(const CLMicroLocationProto::Model &, CLMicroLoc ationFingerprintPool &)",  "%s\n",  v12);
LABEL_42:
      }

LABEL_81:
  uint64_t v33 = v71;
  int v34 = *(_DWORD *)(v71 + 52) & ((int)(*(_DWORD *)(v71 + 192) << 27) >> 31);
  *(_DWORD *)a3 = *(_DWORD *)(v71 + 48);
  *(_DWORD *)(a3 + 4) = v34;
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CB88);
  }
  uint64_t v35 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    int v36 = *(unsigned __int8 *)(v71 + 104);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:isStable, fromProtobuf, isStableFlag:%{public}hhd}",  buf,  0x18u);
  }

  *(_BYTE *)(a3 + 8) = *(_BYTE *)(v71 + 104);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(v71 + 108);
  if ((*(_BYTE *)(v71 + 193) & 1) != 0)
  {
    uint64_t v37 = *(void *)(v71 + 112);
    if (!v37) {
      uint64_t v37 = *(void *)(qword_1019A0880 + 112);
    }
    sub_10014C3FC((uint64_t)buf, v37);
    if ((uint8_t *)(a3 + 16) != buf)
    {
      *(_DWORD *)(a3 + 48) = *(_DWORD *)&buf[32];
      sub_1000193A0((void *)(a3 + 16), *(uint64_t **)&buf[16], 0LL);
    }

    *(_OWORD *)(a3 + 56) = *(_OWORD *)&buf[40];
    sub_100019CEC((uint64_t)buf);
  }

  int v38 = *(_DWORD *)(v71 + 128);
  *(_DWORD *)(a3 + 296) = v38;
  if (!v38)
  {
    int v39 = *(void **)(a3 + 272);
    if (v39)
    {
      unint64_t v40 = 0LL;
      do
      {
        v40 += (uint64_t)(v39[5] - v39[4]) >> 4;
        int v39 = (void *)*v39;
      }

      while (v39);
    }

    else
    {
      unint64_t v40 = 0LL;
    }

    sub_1002F0B04(buf);
    CFStringRef v41 = CFStringCreateWithCStringNoCopy( 0LL,  "MicroLocationsModelQualityNumFingerprintsWiFiOnlyThreshold",  0x8000100u,  kCFAllocatorNull);
    int v42 = sub_1002A77CC(*(uint64_t *)buf, (uint64_t)v41, v76);
    CFRelease(v41);
    unint64_t v43 = v76[0];
    unsigned int v44 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      int v45 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }

    unint64_t v47 = 200LL;
    if (v42) {
      unint64_t v47 = v43;
    }
    if (v40 <= v47) {
      int v48 = 1;
    }
    else {
      int v48 = 3;
    }
    *(_DWORD *)(a3 + 296) = v48;
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CB88);
    }
    uint64_t v33 = v71;
    unint64_t v49 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
    {
      int v50 = *(_DWORD *)(a3 + 296);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v50;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Loaded model doesn't have model quality, calculate on the fly, QualityIndicator:%{public}d}",  buf,  0x18u);
    }
  }

  *(_DWORD *)(a3 + 300) = *(_DWORD *)(v33 + 132);
  __src = 0LL;
  int v79 = 0LL;
  int v80 = 0LL;
  uint64_t v51 = *(int *)(v33 + 144);
  if ((_DWORD)v51)
  {
    int v52 = 0LL;
    unint64_t v53 = *(int **)(v33 + 136);
    int v54 = &v53[v51];
    do
    {
      int v55 = *v53;
      if (v52 >= v80)
      {
        char v57 = (char *)__src;
        uint64_t v58 = (v52 - (_BYTE *)__src) >> 2;
        unint64_t v59 = v58 + 1;
        uint64_t v60 = v80 - (_BYTE *)__src;
        if ((v80 - (_BYTE *)__src) >> 1 > v59) {
          unint64_t v59 = v60 >> 1;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          uint64_t v62 = (char *)sub_10000956C((uint64_t)&v80, v61);
          char v57 = (char *)__src;
          int v52 = v79;
        }

        else
        {
          uint64_t v62 = 0LL;
        }

        BOOL v63 = &v62[4 * v58];
        *(_DWORD *)BOOL v63 = v55;
        uint64_t v56 = (uint64_t)(v63 + 4);
        while (v52 != v57)
        {
          int v64 = *((_DWORD *)v52 - 1);
          v52 -= 4;
          *((_DWORD *)v63 - 1) = v64;
          v63 -= 4;
        }

        __src = v63;
        int v79 = (char *)v56;
        int v80 = &v62[4 * v61];
        if (v57) {
          operator delete(v57);
        }
      }

      else
      {
        *(_DWORD *)int v52 = v55;
        uint64_t v56 = (uint64_t)(v52 + 4);
      }

      int v79 = (char *)v56;
      ++v53;
      int v52 = (char *)v56;
    }

    while (v53 != v54);
  }

  else
  {
    uint64_t v56 = 0LL;
  }

  if ((*(_BYTE *)(v71 + 193) & 4) != 0)
  {
    uint64_t v68 = *(void *)(v71 + 120);
    if (!v68) {
      uint64_t v68 = *(void *)(qword_1019A0880 + 120);
    }
    sub_100096B78(v68, (uint64_t)buf);
    sub_100097650(a3 + 72, (uint64_t)buf);
    if (v84)
    {
      int v85 = v84;
      operator delete(v84);
    }

    if (v83)
    {
      uint64_t v69 = *(void **)&buf[48];
      *(void *)&buf[48] = 0LL;
      if (v69) {
        operator delete[](v69);
      }
    }

    if (*(void *)&buf[24])
    {
      *(void *)&buf[32] = *(void *)&buf[24];
      operator delete(*(void **)&buf[24]);
    }

    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }

  else if (v34 == 2)
  {
    sub_10009773C((void *)a3, (uint64_t)v76);
    int v74 = 0LL;
    uint64_t v75 = 0LL;
    int v73 = 0LL;
    unint64_t v65 = 0LL;
    if (v77)
    {
      unint64_t v66 = v77;
      do
      {
        ++v65;
        unint64_t v66 = (uint64_t *)*v66;
      }

      while (v66);
    }

    sub_10009B1D0((char *)&v73, v77, 0LL, v65);
    char v83 = 0;
    v87[8] = 0;
    memset(buf, 0, 49);
    int v85 = 0LL;
    uint64_t v86 = 0LL;
    unsigned int v84 = 0LL;
    v87[0] = 0;
    memset(v72, 0, sizeof(v72));
    sub_1000977A8((uint64_t)buf, (unint64_t **)&v73, v72);
    sub_100097B14(a3 + 72, (uint64_t)buf);
    if (v84)
    {
      int v85 = v84;
      operator delete(v84);
    }

    if (v83)
    {
      unint64_t v67 = *(void **)&buf[48];
      *(void *)&buf[48] = 0LL;
      if (v67) {
        operator delete[](v67);
      }
    }

    if (*(void *)&buf[24])
    {
      *(void *)&buf[32] = *(void *)&buf[24];
      operator delete(*(void **)&buf[24]);
    }

    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    if (v73)
    {
      int v74 = v73;
      operator delete(v73);
    }

    sub_100019CEC((uint64_t)v76);
  }

  *(_OWORD *)(a3 + 200) = *(_OWORD *)(v71 + 152);
  *(void *)(a3 + 216) = *(void *)(v71 + 168);
  *(_DWORD *)(a3 + 224) = *(_DWORD *)(v71 + 184);
  std::string::operator=((std::string *)(a3 + 328), *(const std::string **)(v71 + 176));
  if (__src)
  {
    int v79 = (char *)__src;
    operator delete(__src);
  }

          BOOL v63 = (double *)a2;
          if (i < (unint64_t)a2)
          {
            for (j = (double *)a2 - 7; ; j -= 12)
            {
              if (v22 <= v59)
              {
                if (v22 != v59) {
                  break;
                }
                unint64_t v65 = *((_DWORD *)j - 4);
                if (v56 <= v65 && (v56 != v65 || v57 >= *j)) {
                  break;
                }
              }

              unint64_t v59 = *((_DWORD *)j - 20);
            }

            BOOL v63 = j - 5;
          }

          while (i < (unint64_t)v63)
          {
            int v227 = *(_OWORD *)i;
            v235 = *(_OWORD *)(i + 16);
            *(_OWORD *)int v250 = *(_OWORD *)(i + 64);
            *(_OWORD *)&v250[16] = *(_OWORD *)(i + 80);
            int v240 = *(_OWORD *)(i + 32);
            int v245 = *(_OWORD *)(i + 48);
            uint64_t v70 = *((_OWORD *)v63 + 3);
            uint64_t v69 = *((_OWORD *)v63 + 4);
            uint64_t v71 = *((_OWORD *)v63 + 2);
            *(_OWORD *)(i + 73) = *(_OWORD *)((char *)v63 + 73);
            *(_OWORD *)(i + 48) = v70;
            *(_OWORD *)(i + 64) = v69;
            *(_OWORD *)(i + 32) = v71;
            int v72 = *((_OWORD *)v63 + 1);
            *(_OWORD *)uint64_t i = *(_OWORD *)v63;
            *(_OWORD *)(i + 16) = v72;
            *(_OWORD *)BOOL v63 = v227;
            *((_OWORD *)v63 + 1) = v235;
            *(_OWORD *)((char *)v63 + 73) = *(_OWORD *)&v250[9];
            *((_OWORD *)v63 + 3) = v245;
            *((_OWORD *)v63 + 4) = *(_OWORD *)v250;
            *((_OWORD *)v63 + 2) = v240;
            int v73 = i + 96;
            int v74 = *(_DWORD *)(i + 152);
            if (v22 <= v74)
            {
              uint64_t v75 = i + 136;
              do
              {
                if (v22 == v74)
                {
                  int v76 = *(_DWORD *)(v75 - 16);
                  if (v56 > v76) {
                    break;
                  }
                }

                v73 += 96LL;
                int v74 = *(_DWORD *)(v75 + 112);
                v75 += 96LL;
              }

              while (v22 <= v74);
              uint64_t i = v75 - 40;
            }

            else
            {
LABEL_103:
              uint64_t i = v73;
            }

            do
            {
              do
              {
                v63 -= 12;
                int v77 = *((_DWORD *)v63 + 14);
              }

              while (v22 > v77);
              if (v22 != v77) {
                break;
              }
              int v78 = *((_DWORD *)v63 + 6);
            }

            while (v56 > v78 || v56 == v78 && v57 < v63[5]);
          }

          int v79 = (_OWORD *)(i - 96);
          if (i - 96 != a1)
          {
            int v80 = *(_OWORD *)(i - 80);
            *(_OWORD *)a1 = *v79;
            *(_OWORD *)(a1 + 16) = v80;
            int v81 = *(_OWORD *)(i - 64);
            uint64_t v82 = *(_OWORD *)(i - 48);
            char v83 = *(_OWORD *)(i - 32);
            *(_OWORD *)(a1 + 73) = *(_OWORD *)(i - 23);
            *(_OWORD *)(a1 + 48) = v82;
            *(_OWORD *)(a1 + 64) = v83;
            *(_OWORD *)(a1 + 32) = v81;
          }

          a4 = 0;
          *(void *)(i - 80) = v223;
          *int v79 = v214;
          *(_DWORD *)(i - 72) = v56;
          *(_DWORD *)(i - 60) = v211;
          *(void *)(i - 68) = v208;
          *(double *)(i - 56) = v57;
          *(void *)(i - 48) = v58;
          *(_DWORD *)(i - 40) = v22;
          *(_OWORD *)(i - 23) = *(_OWORD *)&v199[13];
          *(_OWORD *)(i - 36) = *(_OWORD *)v199;
          continue;
        }

        uint64_t v21 = *(_DWORD *)(a1 + 56);
LABEL_17:
        uint64_t v24 = 0LL;
        int v222 = *(void *)(a1 + 16);
        int v213 = *(_OWORD *)a1;
        uint64_t v25 = *(_DWORD *)(a1 + 24);
        v207 = *(void *)(a1 + 28);
        int v210 = *(_DWORD *)(a1 + 36);
        uint64_t v26 = *(double *)(a1 + 40);
        uint64_t v27 = *(void *)(a1 + 48);
        *(_OWORD *)v198 = *(_OWORD *)(a1 + 60);
        *(_OWORD *)&v198[16] = *(_OWORD *)(a1 + 76);
        while (1)
        {
          int v28 = *(_DWORD *)(a1 + v24 + 152);
          if (v28 <= v21)
          {
            if (v28 != v21) {
              break;
            }
            uint64_t v29 = *(_DWORD *)(a1 + v24 + 120);
          }

          v24 += 96LL;
        }

        __int16 v30 = a1 + v24 + 96;
        if (v24)
        {
          unint64_t v31 = *((_DWORD *)a2 - 10);
          std::string::size_type v32 = (double *)a2 - 7;
          uint64_t v33 = (double *)(a2 - 6);
          if (v31 <= v21)
          {
            do
            {
              if (v31 == v21)
              {
                int v34 = *((_DWORD *)v32 - 4);
                if (v34 > v25) {
                  goto LABEL_48;
                }
                if (v34 == v25 && *v32 < v26) {
                  break;
                }
              }

              v33 -= 12;
              unint64_t v31 = *((_DWORD *)v32 - 20);
              v32 -= 12;
            }

            while (v31 <= v21);
LABEL_31:
            uint64_t v33 = v32 - 5;
          }
        }

        else
        {
          uint64_t v33 = (double *)a2;
          if (v30 < (unint64_t)a2)
          {
            uint64_t v35 = *((_DWORD *)a2 - 10);
            uint64_t v33 = (double *)(a2 - 6);
            if (v35 <= v21)
            {
              std::string::size_type v32 = (double *)a2 - 7;
              uint64_t v33 = (double *)(a2 - 6);
              while (1)
              {
                int v36 = v32 - 5;
                if (v35 != v21) {
                  goto LABEL_44;
                }
                uint64_t v37 = *((_DWORD *)v32 - 4);
                if (v37 > v25) {
                  break;
                }
                if (v37 == v25)
                {
                }

                else
                {
LABEL_44:
                  if (v30 >= (unint64_t)v36)
                  {
                    uint64_t v33 = v32 - 5;
                    break;
                  }
                }

                v33 -= 12;
                uint64_t v35 = *((_DWORD *)v32 - 20);
                v32 -= 12;
                if (v35 > v21) {
                  goto LABEL_31;
                }
              }
            }
          }
        }

          uint64_t v62 = (double *)a2;
          if (i < (unint64_t)a2)
          {
            for (j = (double *)(a2 - 4); ; j -= 12)
            {
              if (v22 <= v58)
              {
                if (v22 != v58) {
                  break;
                }
                int v64 = *((_DWORD *)j - 2);
                if (v55 <= v64 && (v55 != v64 || v57 >= *j)) {
                  break;
                }
              }

              uint64_t v58 = *((_DWORD *)j - 18);
            }

            uint64_t v62 = j - 4;
          }

          while (i < (unint64_t)v62)
          {
            int v223 = *(_OWORD *)i;
            int v231 = *(_OWORD *)(i + 16);
            *(_OWORD *)int v246 = *(_OWORD *)(i + 64);
            *(_OWORD *)&v246[16] = *(_OWORD *)(i + 80);
            int v236 = *(_OWORD *)(i + 32);
            int v241 = *(_OWORD *)(i + 48);
            uint64_t v69 = *((_OWORD *)v62 + 3);
            uint64_t v68 = *((_OWORD *)v62 + 4);
            uint64_t v70 = *((_OWORD *)v62 + 2);
            *(_OWORD *)(i + 73) = *(_OWORD *)((char *)v62 + 73);
            *(_OWORD *)(i + 48) = v69;
            *(_OWORD *)(i + 64) = v68;
            *(_OWORD *)(i + 32) = v70;
            uint64_t v71 = *((_OWORD *)v62 + 1);
            *(_OWORD *)uint64_t i = *(_OWORD *)v62;
            *(_OWORD *)(i + 16) = v71;
            *(_OWORD *)uint64_t v62 = v223;
            *((_OWORD *)v62 + 1) = v231;
            *(_OWORD *)((char *)v62 + 73) = *(_OWORD *)&v246[9];
            *((_OWORD *)v62 + 3) = v241;
            *((_OWORD *)v62 + 4) = *(_OWORD *)v246;
            *((_OWORD *)v62 + 2) = v236;
            int v72 = i + 96;
            int v73 = *(_DWORD *)(i + 152);
            if (v22 <= v73)
            {
              int v74 = i + 128;
              do
              {
                if (v22 == v73)
                {
                  uint64_t v75 = *(_DWORD *)(v74 - 8);
                  if (v55 > v75) {
                    break;
                  }
                }

                v72 += 96LL;
                int v73 = *(_DWORD *)(v74 + 120);
                v74 += 96LL;
              }

              while (v22 <= v73);
              uint64_t i = v74 - 32;
            }

            else
            {
LABEL_103:
              uint64_t i = v72;
            }

            do
            {
              do
              {
                v62 -= 12;
                int v76 = *((_DWORD *)v62 + 14);
              }

              while (v22 > v76);
              if (v22 != v76) {
                break;
              }
              int v77 = *((_DWORD *)v62 + 6);
            }

            while (v55 > v77 || v55 == v77 && v57 < v62[4]);
          }

          int v78 = (_OWORD *)(i - 96);
          if (i - 96 != a1)
          {
            int v79 = *(_OWORD *)(i - 80);
            *(_OWORD *)a1 = *v78;
            *(_OWORD *)(a1 + 16) = v79;
            int v80 = *(_OWORD *)(i - 64);
            int v81 = *(_OWORD *)(i - 48);
            uint64_t v82 = *(_OWORD *)(i - 32);
            *(_OWORD *)(a1 + 73) = *(_OWORD *)(i - 23);
            *(_OWORD *)(a1 + 48) = v81;
            *(_OWORD *)(a1 + 64) = v82;
            *(_OWORD *)(a1 + 32) = v80;
          }

          a4 = 0;
          *(void *)(i - 80) = v219;
          *int v78 = v213;
          *(_DWORD *)(i - 72) = v55;
          *(_DWORD *)(i - 68) = v56;
          *(double *)(i - 64) = v57;
          *(_OWORD *)(i - 56) = v210;
          *(_DWORD *)(i - 40) = v22;
          *(_OWORD *)(i - 23) = *(_OWORD *)&v201[13];
          *(_OWORD *)(i - 36) = *(_OWORD *)v201;
          continue;
        }

        uint64_t v21 = *(_DWORD *)(a1 + 56);
LABEL_17:
        uint64_t v24 = 0LL;
        int v218 = *(void *)(a1 + 16);
        uint64_t v25 = *(void *)(a1 + 24);
        uint64_t v26 = *(double *)(a1 + 32);
        int v209 = *(_OWORD *)(a1 + 40);
        unsigned int v212 = *(_OWORD *)a1;
        *(_OWORD *)int v200 = *(_OWORD *)(a1 + 60);
        *(_OWORD *)&v200[16] = *(_OWORD *)(a1 + 76);
        while (1)
        {
          uint64_t v27 = *(_DWORD *)(a1 + v24 + 152);
          if (v27 <= v21)
          {
            if (v27 != v21) {
              break;
            }
            int v28 = *(_DWORD *)(a1 + v24 + 120);
          }

          v24 += 96LL;
        }

        uint64_t v29 = a1 + v24 + 96;
        if (v24)
        {
          __int16 v30 = *((_DWORD *)a2 - 10);
          unint64_t v31 = (double *)(a2 - 4);
          std::string::size_type v32 = (double *)(a2 - 6);
          if (v30 <= v21)
          {
            do
            {
              if (v30 == v21)
              {
                uint64_t v33 = *((_DWORD *)v31 - 2);
                if (v33 == (_DWORD)v25 && *v31 < v26) {
                  break;
                }
              }

              v32 -= 12;
              __int16 v30 = *((_DWORD *)v31 - 18);
              v31 -= 12;
            }

            while (v30 <= v21);
LABEL_31:
            std::string::size_type v32 = v31 - 4;
          }
        }

        else
        {
          std::string::size_type v32 = (double *)a2;
          if (v29 < (unint64_t)a2)
          {
            int v34 = *((_DWORD *)a2 - 10);
            std::string::size_type v32 = (double *)(a2 - 6);
            if (v34 <= v21)
            {
              unint64_t v31 = (double *)(a2 - 4);
              std::string::size_type v32 = (double *)(a2 - 6);
              while (1)
              {
                uint64_t v35 = v31 - 4;
                if (v34 != v21) {
                  goto LABEL_44;
                }
                int v36 = *((_DWORD *)v31 - 2);
                if (v36 == (_DWORD)v25)
                {
                }

                else
                {
LABEL_44:
                  if (v29 >= (unint64_t)v35)
                  {
                    std::string::size_type v32 = v31 - 4;
                    break;
                  }
                }

                v32 -= 12;
                int v34 = *((_DWORD *)v31 - 18);
                v31 -= 12;
                if (v34 > v21) {
                  goto LABEL_31;
                }
              }
            }
          }
        }

  int v81 = (char *)v104;
  uint64_t v82 = v105;
  if (v104 != v105)
  {
    do
    {
      sub_1004C3264((uint64_t **)(v102 + 416), (void *)v81 + 22);
      v81 += 184;
    }

    while (v81 != v82);
    int v81 = (char *)v104;
  }

  if (v81)
  {
    uint64_t v105 = v81;
    operator delete(v81);
  }

  if (v110)
  {
    int v111 = v110;
    operator delete(v110);
  }

          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_1018401A0);
          }
          uint64_t v37 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
          {
            int v38 = [v10 UTF8String];
            int v39 = *((char *)a4 + 23) >= 0 ? a4 : (void *)*a4;
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)int v50 = 2082;
            *(void *)&v50[2] = "";
            uint64_t v51 = 2082;
            int v52 = v38;
            unint64_t v53 = 2082;
            int v54 = (uint64_t)v39;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#locationUpdater unknnown DaemonIdentifiable client type, Client:%{public, lo cation:escape_only}s, ClientType:%{public, location:escape_only}s}",  buf,  0x26u);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_1018401A0);
            }
          }

          unint64_t v40 = (os_log_s *)qword_101934988;
          if (os_signpost_enabled((os_log_t)qword_101934988))
          {
            CFStringRef v41 = [v10 UTF8String];
            else {
              int v42 = (void *)*a4;
            }
            *(_DWORD *)buf = 68289538;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)int v50 = 2082;
            *(void *)&v50[2] = "";
            uint64_t v51 = 2082;
            int v52 = v41;
            unint64_t v53 = 2082;
            int v54 = (uint64_t)v42;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v40,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#locationUpdater unknnown DaemonIdentifiable client type",  "{msg%{public}.0s:#locationUpdater unknnown DaemonIdentifiable client type, Client:%{public, lo cation:escape_only}s, ClientType:%{public, location:escape_only}s}",  buf,  0x26u);
          }

          return;
        }

        unint64_t v31 = *a4 == 0x6E6F697461636F4CLL
           && a4[1] == 0x4C72657461647055LL
           && *(void *)((char *)a4 + 11) == 0x6576694C72657461LL;
        uint64_t v29 = a4;
        if (!v31)
        {
LABEL_74:
          std::string::size_type v32 = *v29;
          uint64_t v33 = v29[1];
          int v34 = *(uint64_t *)((char *)v29 + 11);
          if (v32 != 0x756363416C6C7546LL || v33 != 0x7373655379636172LL || v34 != 0x6E6F697373655379LL) {
            goto LABEL_81;
          }
          unint64_t v43 = operator new(0xD0uLL);
          sub_100BD2E80(v43, v11, a2, DictionaryOfClasses, a1, *(void *)(a1 + 32));
          goto LABEL_110;
        }

              unint64_t v61 = 1;
              uint64_t v60 = 1;
              goto LABEL_82;
            }

            if (qword_101934740 != -1) {
              dispatch_once(&qword_101934740, &stru_101841208);
            }
            int v38 = (os_log_s *)qword_101934748;
            if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "[FormController] Just rejected a step prediction, TO before IC prediction",  buf,  2u);
            }

            unint64_t result = sub_1002921D0(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934740 != -1) {
                dispatch_once(&qword_101934740, &stru_101841208);
              }
              LOWORD(v93) = 0;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  2LL,  "[FormController] Just rejected a step prediction, TO before IC prediction",  &v93,  2);
              uint64_t v29 = (uint8_t *)v39;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)",  "%s\n",  v39);
LABEL_57:
              if (v29 != buf) {
                free(v29);
              }
              return 0LL;
            }
          }

          else
          {
            if (qword_101934740 != -1) {
              dispatch_once(&qword_101934740, &stru_101841208);
            }
            int v36 = (os_log_s *)qword_101934748;
            if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "[FormController] Ground contact time prediction failed",  buf,  2u);
            }

            unint64_t result = sub_1002921D0(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934740 != -1) {
                dispatch_once(&qword_101934740, &stru_101841208);
              }
              LOWORD(v93) = 0;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  2LL,  "[FormController] Ground contact time prediction failed",  &v93,  2);
              uint64_t v29 = (uint8_t *)v37;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)",  "%s\n",  v37);
              goto LABEL_57;
            }
          }
        }

        else
        {
          if (qword_101934740 != -1) {
            dispatch_once(&qword_101934740, &stru_101841208);
          }
          int v34 = (os_log_s *)qword_101934748;
          if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "[FormController] Toe off prediction failed",  buf,  2u);
          }

          unint64_t result = sub_1002921D0(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934740 != -1) {
              dispatch_once(&qword_101934740, &stru_101841208);
            }
            LOWORD(v93) = 0;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  2LL,  "[FormController] Toe off prediction failed",  &v93,  2);
            uint64_t v29 = (uint8_t *)v35;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)",  "%s\n",  v35);
            goto LABEL_57;
          }
        }
      }

      else
      {
        if (qword_101934740 != -1) {
          dispatch_once(&qword_101934740, &stru_101841208);
        }
        std::string::size_type v32 = (os_log_s *)qword_101934748;
        if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "[FormController] Initial contact prediction failed",  buf,  2u);
        }

        unint64_t result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934740 != -1) {
            dispatch_once(&qword_101934740, &stru_101841208);
          }
          LOWORD(v93) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  2LL,  "[FormController] Initial contact prediction failed",  &v93,  2);
          uint64_t v29 = (uint8_t *)v33;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)",  "%s\n",  v33);
          goto LABEL_57;
        }
      }
    }

    else
    {
      if (qword_101934740 != -1) {
        dispatch_once(&qword_101934740, &stru_101841208);
      }
      __int16 v30 = (os_log_s *)qword_101934748;
      if (os_log_type_enabled((os_log_t)qword_101934748, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "[FormController] GroundContactTime - Classification Failed!",  buf,  2u);
      }

      unint64_t result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934740 != -1) {
          dispatch_once(&qword_101934740, &stru_101841208);
        }
        LOWORD(v93) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934748,  2LL,  "[FormController] GroundContactTime - Classification Failed!",  &v93,  2);
        uint64_t v29 = (uint8_t *)v31;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)",  "%s\n",  v31);
        goto LABEL_57;
      }
    }
  }

  return result;
}

  uint64_t v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
  if ((v27 & 0x80000000) != 0)
  {
    int v28 = 10;
  }

  else if (v27 >= 0x80)
  {
    int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2);
    BOOL v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    int v28 = 1;
  }

  unint64_t v4 = (v4 + v28 + 1);
  if ((v3 & 0x1000) == 0)
  {
LABEL_63:
    if ((v3 & 0x2000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_93;
  }

    uint64_t v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_activityType);
    goto LABEL_82;
  }

  if (activityType > 40)
  {
    if (activityType > 99)
    {
      if (activityType > 2019)
      {
        if (activityType == 2020)
        {
          uint64_t v5 = @"kTypeCalisthenics";
          goto LABEL_82;
        }

        if (activityType == 2022)
        {
          uint64_t v5 = @"kTypeFunctionalStrength";
          goto LABEL_82;
        }
      }

      else
      {
        if (activityType == 100)
        {
          uint64_t v5 = @"kTypeCyclingLeg";
          goto LABEL_82;
        }

        if (activityType == 2010)
        {
          uint64_t v5 = @"kTypeStationaryCycling";
          goto LABEL_82;
        }
      }
    }

    else if (activityType > 55)
    {
      if (activityType == 56)
      {
        uint64_t v5 = @"kTypeDrivingOther";
        goto LABEL_82;
      }

      if (activityType == 63)
      {
        uint64_t v5 = @"kTypeMultiSportTransition";
        goto LABEL_82;
      }
    }

    else
    {
      if (activityType == 41)
      {
        uint64_t v5 = @"kTypeWalkingSlow";
        goto LABEL_82;
      }

      if (activityType == 52)
      {
        uint64_t v5 = @"kTypeVehicularInHand";
        goto LABEL_82;
      }
    }

    goto LABEL_81;
  }

  uint64_t v5 = @"kTypeUnknown";
  switch(activityType)
  {
    case 0:
      break;
    case 1:
      uint64_t v5 = @"kTypeFrozen";
      break;
    case 2:
      uint64_t v5 = @"kTypeStatic";
      break;
    case 3:
      uint64_t v5 = @"kTypeMoving";
      break;
    case 4:
      uint64_t v5 = @"kTypeWalking";
      break;
    case 5:
      uint64_t v5 = @"kTypeDriving";
      break;
    case 6:
      uint64_t v5 = @"kTypeCycling";
      break;
    case 7:
      uint64_t v5 = @"kTypeSemiStationary";
      break;
    case 8:
      uint64_t v5 = @"kTypeRunning";
      break;
    case 9:
      uint64_t v5 = @"kTypeMovingCoarse";
      break;
    case 10:
      uint64_t v5 = @"kTypeInVehicleFrozen";
      break;
    case 11:
      uint64_t v5 = @"kTypeInVehicleStatic";
      break;
    default:
      goto LABEL_81;
  }

  while (i < j)
  {
    int v115 = *(_OWORD *)i;
    CFStringRef v41 = *(_OWORD *)(i + 16);
    int v42 = *(_OWORD *)(i + 32);
    unint64_t v43 = *(_OWORD *)(i + 64);
    v118 = *(_OWORD *)(i + 48);
    unsigned int v119 = v43;
    int v116 = v41;
    unsigned int v117 = v42;
    unsigned int v44 = *(_OWORD *)(i + 80);
    int v45 = *(_OWORD *)(i + 96);
    unint64_t v46 = *(_OWORD *)(i + 128);
    unsigned int v122 = *(_OWORD *)(i + 112);
    int v123 = v46;
    int v120 = v44;
    uint64_t v121 = v45;
    unint64_t v47 = *(_OWORD *)(i + 144);
    int v48 = *(_OWORD *)(i + 160);
    unint64_t v49 = *(_OWORD *)(i + 176);
    int v127 = *(void *)(i + 192);
    uint64_t v125 = v48;
    v126 = v49;
    uint64_t v124 = v47;
    *(_OWORD *)uint64_t i = *(_OWORD *)j;
    int v50 = *(_OWORD *)(j + 16);
    uint64_t v51 = *(_OWORD *)(j + 32);
    int v52 = *(_OWORD *)(j + 64);
    *(_OWORD *)(i + 48) = *(_OWORD *)(j + 48);
    *(_OWORD *)(i + 64) = v52;
    *(_OWORD *)(i + 16) = v50;
    *(_OWORD *)(i + 32) = v51;
    unint64_t v53 = *(_OWORD *)(j + 80);
    int v54 = *(_OWORD *)(j + 96);
    int v55 = *(_OWORD *)(j + 128);
    *(_OWORD *)(i + 112) = *(_OWORD *)(j + 112);
    *(_OWORD *)(i + 128) = v55;
    *(_OWORD *)(i + 80) = v53;
    *(_OWORD *)(i + 96) = v54;
    uint64_t v56 = *(_OWORD *)(j + 144);
    char v57 = *(_OWORD *)(j + 160);
    uint64_t v58 = *(_OWORD *)(j + 176);
    *(void *)(i + 192) = *(void *)(j + 192);
    *(_OWORD *)(i + sub_10001AA60(v34 - 160) = v57;
    *(_OWORD *)(i + 176) = v58;
    *(_OWORD *)(i + 144) = v56;
    *(_OWORD *)j = v115;
    unint64_t v59 = v116;
    uint64_t v60 = v117;
    unint64_t v61 = v119;
    *(_OWORD *)(j + 48) = v118;
    *(_OWORD *)(j + 64) = v61;
    *(_OWORD *)(j + 16) = v59;
    *(_OWORD *)(j + 32) = v60;
    uint64_t v62 = v120;
    BOOL v63 = v121;
    int v64 = v123;
    *(_OWORD *)(j + 112) = v122;
    *(_OWORD *)(j + 128) = v64;
    *(_OWORD *)(j + 80) = v62;
    *(_OWORD *)(j + 96) = v63;
    unint64_t v65 = v124;
    unint64_t v66 = v125;
    unint64_t v67 = v126;
    *(void *)(j + 192) = v127;
    *(_OWORD *)(j + sub_10001AA60(v34 - 160) = v66;
    *(_OWORD *)(j + 176) = v67;
    *(_OWORD *)(j + 144) = v65;
    do
    {
      while (1)
      {
        i += 200LL;
        uint64_t v68 = *(void *)(i + 48);
        if ((void)v105 == v68) {
          break;
        }
      }

      uint64_t v69 = *(void *)(i + 56);
      uint64_t v71 = __OFSUB__(*((void *)&v105 + 1), v69);
      uint64_t v70 = *((void *)&v105 + 1) - v69 < 0;
      if (*((void *)&v105 + 1) == v69)
      {
        int v72 = *(void *)(i + 64);
        uint64_t v71 = __OFSUB__((void)v106, v72);
        uint64_t v70 = (uint64_t)v106 - v72 < 0;
        if ((void)v106 == v72)
        {
          int v73 = *(void *)(i + 80);
          uint64_t v71 = __OFSUB__((void)v107, v73);
          uint64_t v70 = (uint64_t)v107 - v73 < 0;
          if ((void)v107 == v73)
          {
            int v74 = *(void *)(i + 72);
            uint64_t v71 = __OFSUB__(*((void *)&v106 + 1), v74);
            uint64_t v70 = *((void *)&v106 + 1) - v74 < 0;
          }
        }
      }
    }

    while (v70 == v71
         && (v106 != *(_OWORD *)(i + 64)
          || (void)v107 != *(void *)(i + 80)
          || *((void *)&v105 + 1) != v69
          || !sub_10085DFAC((uint64_t)&v102, i, a3)));
    do
    {
LABEL_71:
      while (1)
      {
        j -= 200LL;
        uint64_t v75 = *(void *)(j + 48);
        if ((void)v105 == v75) {
          break;
        }
      }

      int v76 = *(void *)(j + 56);
      int v78 = __OFSUB__(*((void *)&v105 + 1), v76);
      int v77 = *((void *)&v105 + 1) - v76 < 0;
      if (*((void *)&v105 + 1) == v76)
      {
        int v79 = *(void *)(j + 64);
        int v78 = __OFSUB__((void)v106, v79);
        int v77 = (uint64_t)v106 - v79 < 0;
        if ((void)v106 == v79)
        {
          int v80 = *(void *)(j + 80);
          int v78 = __OFSUB__((void)v107, v80);
          int v77 = (uint64_t)v107 - v80 < 0;
          if ((void)v107 == v80)
          {
            int v81 = *(void *)(j + 72);
            int v78 = __OFSUB__(*((void *)&v106 + 1), v81);
            int v77 = *((void *)&v106 + 1) - v81 < 0;
          }
        }
      }
    }

    while (v77 != v78
         || v106 == *(_OWORD *)(j + 64)
         && *((void *)&v105 + 1) == v76
         && (void)v107 == *(void *)(j + 80)
         && (sub_10085DFAC((uint64_t)&v102, j, a3) & 1) != 0);
  }

  uint64_t v82 = (__int128 *)(i - 200);
  if ((__int128 *)(i - 200) != a1)
  {
    *a1 = *v82;
    char v83 = *(_OWORD *)(i - 184);
    unsigned int v84 = *(_OWORD *)(i - 168);
    int v85 = *(_OWORD *)(i - 136);
    a1[3] = *(_OWORD *)(i - 152);
    a1[4] = v85;
    a1[1] = v83;
    a1[2] = v84;
    uint64_t v86 = *(_OWORD *)(i - 120);
    int v87 = *(_OWORD *)(i - 104);
    int v88 = *(_OWORD *)(i - 72);
    a1[7] = *(_OWORD *)(i - 88);
    a1[8] = v88;
    a1[5] = v86;
    a1[6] = v87;
    uint64_t v89 = *(_OWORD *)(i - 56);
    __int128 v90 = *(_OWORD *)(i - 40);
    __int128 v91 = *(_OWORD *)(i - 24);
    *((void *)a1 + 24) = *(void *)(i - 8);
    a1[10] = v90;
    a1[11] = v91;
    a1[9] = v89;
  }

  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v82 = v102;
  int v92 = v103;
  unsigned int v93 = v104;
  int v94 = v106;
  *(_OWORD *)(i - 152) = v105;
  *(_OWORD *)(i - 136) = v94;
  *(_OWORD *)(i - 184) = v92;
  *(_OWORD *)(i - 168) = v93;
  int v95 = v107;
  int v96 = v108;
  uint64_t v97 = v110;
  *(_OWORD *)(i - 88) = v109;
  *(_OWORD *)(i - 72) = v97;
  *(_OWORD *)(i - 120) = v95;
  *(_OWORD *)(i - 104) = v96;
  v98 = v111;
  int v99 = v112;
  int v100 = v113;
  *(void *)(i - 8) = v114;
  *(_OWORD *)(i - 40) = v99;
  *(_OWORD *)(i - 24) = v100;
  *(_OWORD *)(i - 56) = v98;
  return i;
}

  while (i < j)
  {
    int v115 = *(_OWORD *)i;
    CFStringRef v41 = *(_OWORD *)(i + 16);
    int v42 = *(_OWORD *)(i + 32);
    unint64_t v43 = *(_OWORD *)(i + 64);
    v118 = *(_OWORD *)(i + 48);
    unsigned int v119 = v43;
    int v116 = v41;
    unsigned int v117 = v42;
    unsigned int v44 = *(_OWORD *)(i + 80);
    int v45 = *(_OWORD *)(i + 96);
    unint64_t v46 = *(_OWORD *)(i + 128);
    unsigned int v122 = *(_OWORD *)(i + 112);
    int v123 = v46;
    int v120 = v44;
    uint64_t v121 = v45;
    unint64_t v47 = *(_OWORD *)(i + 144);
    int v48 = *(_OWORD *)(i + 160);
    unint64_t v49 = *(_OWORD *)(i + 176);
    int v127 = *(void *)(i + 192);
    uint64_t v125 = v48;
    v126 = v49;
    uint64_t v124 = v47;
    *(_OWORD *)uint64_t i = *(_OWORD *)j;
    int v50 = *(_OWORD *)(j + 16);
    uint64_t v51 = *(_OWORD *)(j + 32);
    int v52 = *(_OWORD *)(j + 64);
    *(_OWORD *)(i + 48) = *(_OWORD *)(j + 48);
    *(_OWORD *)(i + 64) = v52;
    *(_OWORD *)(i + 16) = v50;
    *(_OWORD *)(i + 32) = v51;
    unint64_t v53 = *(_OWORD *)(j + 80);
    int v54 = *(_OWORD *)(j + 96);
    int v55 = *(_OWORD *)(j + 128);
    *(_OWORD *)(i + 112) = *(_OWORD *)(j + 112);
    *(_OWORD *)(i + 128) = v55;
    *(_OWORD *)(i + 80) = v53;
    *(_OWORD *)(i + 96) = v54;
    uint64_t v56 = *(_OWORD *)(j + 144);
    char v57 = *(_OWORD *)(j + 160);
    uint64_t v58 = *(_OWORD *)(j + 176);
    *(void *)(i + 192) = *(void *)(j + 192);
    *(_OWORD *)(i + sub_10001AA60(v34 - 160) = v57;
    *(_OWORD *)(i + 176) = v58;
    *(_OWORD *)(i + 144) = v56;
    *(_OWORD *)j = v115;
    unint64_t v59 = v116;
    uint64_t v60 = v117;
    unint64_t v61 = v119;
    *(_OWORD *)(j + 48) = v118;
    *(_OWORD *)(j + 64) = v61;
    *(_OWORD *)(j + 16) = v59;
    *(_OWORD *)(j + 32) = v60;
    uint64_t v62 = v120;
    BOOL v63 = v121;
    int v64 = v123;
    *(_OWORD *)(j + 112) = v122;
    *(_OWORD *)(j + 128) = v64;
    *(_OWORD *)(j + 80) = v62;
    *(_OWORD *)(j + 96) = v63;
    unint64_t v65 = v124;
    unint64_t v66 = v125;
    unint64_t v67 = v126;
    *(void *)(j + 192) = v127;
    *(_OWORD *)(j + sub_10001AA60(v34 - 160) = v66;
    *(_OWORD *)(j + 176) = v67;
    *(_OWORD *)(j + 144) = v65;
    do
    {
      while (1)
      {
        i += 200LL;
        uint64_t v68 = *(void *)(i + 128);
        if ((void)v110 == v68) {
          break;
        }
      }

      uint64_t v69 = *(void *)(i + 136);
      uint64_t v71 = __OFSUB__(*((void *)&v110 + 1), v69);
      uint64_t v70 = *((void *)&v110 + 1) - v69 < 0;
      if (*((void *)&v110 + 1) == v69)
      {
        int v72 = *(void *)(i + 144);
        uint64_t v71 = __OFSUB__((void)v111, v72);
        uint64_t v70 = (uint64_t)v111 - v72 < 0;
        if ((void)v111 == v72)
        {
          int v73 = *(void *)(i + 160);
          uint64_t v71 = __OFSUB__((void)v112, v73);
          uint64_t v70 = (uint64_t)v112 - v73 < 0;
          if ((void)v112 == v73)
          {
            int v74 = *(void *)(i + 152);
            uint64_t v71 = __OFSUB__(*((void *)&v111 + 1), v74);
            uint64_t v70 = *((void *)&v111 + 1) - v74 < 0;
          }
        }
      }
    }

    while (v70 == v71
         && (v111 != *(_OWORD *)(i + 144)
          || (void)v112 != *(void *)(i + 160)
          || *((void *)&v110 + 1) != v69
          || !sub_100862154((uint64_t)&v102, i, a3)));
    do
    {
LABEL_71:
      while (1)
      {
        j -= 200LL;
        uint64_t v75 = *(void *)(j + 128);
        if ((void)v110 == v75) {
          break;
        }
      }

      int v76 = *(void *)(j + 136);
      int v78 = __OFSUB__(*((void *)&v110 + 1), v76);
      int v77 = *((void *)&v110 + 1) - v76 < 0;
      if (*((void *)&v110 + 1) == v76)
      {
        int v79 = *(void *)(j + 144);
        int v78 = __OFSUB__((void)v111, v79);
        int v77 = (uint64_t)v111 - v79 < 0;
        if ((void)v111 == v79)
        {
          int v80 = *(void *)(j + 160);
          int v78 = __OFSUB__((void)v112, v80);
          int v77 = (uint64_t)v112 - v80 < 0;
          if ((void)v112 == v80)
          {
            int v81 = *(void *)(j + 152);
            int v78 = __OFSUB__(*((void *)&v111 + 1), v81);
            int v77 = *((void *)&v111 + 1) - v81 < 0;
          }
        }
      }
    }

    while (v77 != v78
         || v111 == *(_OWORD *)(j + 144)
         && *((void *)&v110 + 1) == v76
         && (void)v112 == *(void *)(j + 160)
         && (sub_100862154((uint64_t)&v102, j, a3) & 1) != 0);
  }

  uint64_t v82 = (__int128 *)(i - 200);
  if ((__int128 *)(i - 200) != a1)
  {
    *a1 = *v82;
    char v83 = *(_OWORD *)(i - 184);
    unsigned int v84 = *(_OWORD *)(i - 168);
    int v85 = *(_OWORD *)(i - 136);
    a1[3] = *(_OWORD *)(i - 152);
    a1[4] = v85;
    a1[1] = v83;
    a1[2] = v84;
    uint64_t v86 = *(_OWORD *)(i - 120);
    int v87 = *(_OWORD *)(i - 104);
    int v88 = *(_OWORD *)(i - 72);
    a1[7] = *(_OWORD *)(i - 88);
    a1[8] = v88;
    a1[5] = v86;
    a1[6] = v87;
    uint64_t v89 = *(_OWORD *)(i - 56);
    __int128 v90 = *(_OWORD *)(i - 40);
    __int128 v91 = *(_OWORD *)(i - 24);
    *((void *)a1 + 24) = *(void *)(i - 8);
    a1[10] = v90;
    a1[11] = v91;
    a1[9] = v89;
  }

  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v82 = v102;
  int v92 = v103;
  unsigned int v93 = v104;
  int v94 = v106;
  *(_OWORD *)(i - 152) = v105;
  *(_OWORD *)(i - 136) = v94;
  *(_OWORD *)(i - 184) = v92;
  *(_OWORD *)(i - 168) = v93;
  int v95 = v107;
  int v96 = v108;
  uint64_t v97 = v110;
  *(_OWORD *)(i - 88) = v109;
  *(_OWORD *)(i - 72) = v97;
  *(_OWORD *)(i - 120) = v95;
  *(_OWORD *)(i - 104) = v96;
  v98 = v111;
  int v99 = v112;
  int v100 = v113;
  *(void *)(i - 8) = v114;
  *(_OWORD *)(i - 40) = v99;
  *(_OWORD *)(i - 24) = v100;
  *(_OWORD *)(i - 56) = v98;
  return i;
}

  sub_1002F0B04(buf);
  int v78 = sub_1002A82BC(*(uint64_t *)&buf[0], "FenceMonitorDelayedTriggerIntervalSeconds", (void *)(a1 + 712));
  int v79 = v78;
  int v80 = (std::__shared_weak_count *)*((void *)&buf[0] + 1);
  if (!*((void *)&buf[0] + 1)) {
    goto LABEL_85;
  }
  int v81 = (unint64_t *)(*((void *)&buf[0] + 1) + 8LL);
  do
    uint64_t v82 = __ldaxr(v81);
  while (__stlxr(v82 - 1, v81));
  if (!v82)
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
    if (!v79) {
      goto LABEL_91;
    }
  }

  else
  {
LABEL_85:
    if (!v78) {
      goto LABEL_91;
    }
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_101866E28);
  }
  char v83 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v84 = *v13;
    LODWORD(buf[0]) = 134283521;
    *(void *)((char *)buf + 4) = v84;
    _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "Fence: Overriding fDelayedTriggerIntervalSeconds, %{private}.1lf",  (uint8_t *)buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_101866E28);
    }
    uint64_t v142 = *v13;
    v161 = 134283521;
    v162 = v142;
    LODWORD(v157) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Fence: Overriding fDelayedTriggerIntervalSeconds, %{private}.1lf",  &v161,  v157);
    unsigned int v144 = (char *)v143;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLFenceMonitor::CLFenceMonitor(CLFenceMonitorClientProtocol *, CLFenceMonitor::DatabaseType)",  "%s\n",  v143);
  }

        if (!*(_BYTE *)(a1 + 2096) || v49 <= v47) {
          goto LABEL_89;
        }
        goto LABEL_83;
      }
    }
  }

  *(_DWORD *)(a1 + 396) |= 0x2000u;
  unint64_t v31 = *(char **)(a1 + 104);
  if (!v31)
  {
    unint64_t v31 = (char *)operator new(0x30uLL);
    *(void *)unint64_t v31 = off_101875C30;
    *(_OWORD *)(v31 + 8) = 0u;
    *(_OWORD *)(v31 + 24) = 0u;
    *((void *)v31 + 5) = 0LL;
    *(void *)(a1 + 104) = v31;
  }

  std::string::size_type v32 = *(void *)(a2 + 104);
  if (!v32) {
    std::string::size_type v32 = *(void *)(qword_1019A1D38 + 104);
  }
  sub_100BB91BC((uint64_t)v31, v32);
  uint64_t v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x4000) == 0)
  {
LABEL_54:
    if ((v7 & 0x8000) == 0) {
      goto LABEL_96;
    }
    goto LABEL_91;
  }

    uint64_t v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  self->_activityType);
    goto LABEL_82;
  }

  if (activityType > 40)
  {
    if (activityType > 99)
    {
      if (activityType > 2019)
      {
        if (activityType == 2020)
        {
          uint64_t v5 = @"kTypeCalisthenics";
          goto LABEL_82;
        }

        if (activityType == 2022)
        {
          uint64_t v5 = @"kTypeFunctionalStrength";
          goto LABEL_82;
        }
      }

      else
      {
        if (activityType == 100)
        {
          uint64_t v5 = @"kTypeCyclingLeg";
          goto LABEL_82;
        }

        if (activityType == 2010)
        {
          uint64_t v5 = @"kTypeStationaryCycling";
          goto LABEL_82;
        }
      }
    }

    else if (activityType > 55)
    {
      if (activityType == 56)
      {
        uint64_t v5 = @"kTypeDrivingOther";
        goto LABEL_82;
      }

      if (activityType == 63)
      {
        uint64_t v5 = @"kTypeMultiSportTransition";
        goto LABEL_82;
      }
    }

    else
    {
      if (activityType == 41)
      {
        uint64_t v5 = @"kTypeWalkingSlow";
        goto LABEL_82;
      }

      if (activityType == 52)
      {
        uint64_t v5 = @"kTypeVehicularInHand";
        goto LABEL_82;
      }
    }

    goto LABEL_81;
  }

  uint64_t v5 = @"kTypeUnknown";
  switch(activityType)
  {
    case 0:
      break;
    case 1:
      uint64_t v5 = @"kTypeFrozen";
      break;
    case 2:
      uint64_t v5 = @"kTypeStatic";
      break;
    case 3:
      uint64_t v5 = @"kTypeMoving";
      break;
    case 4:
      uint64_t v5 = @"kTypeWalking";
      break;
    case 5:
      uint64_t v5 = @"kTypeDriving";
      break;
    case 6:
      uint64_t v5 = @"kTypeCycling";
      break;
    case 7:
      uint64_t v5 = @"kTypeSemiStationary";
      break;
    case 8:
      uint64_t v5 = @"kTypeRunning";
      break;
    case 9:
      uint64_t v5 = @"kTypeMovingCoarse";
      break;
    case 10:
      uint64_t v5 = @"kTypeInVehicleFrozen";
      break;
    case 11:
      uint64_t v5 = @"kTypeInVehicleStatic";
      break;
    default:
      goto LABEL_81;
  }

  int v39 = *(void *)(a2 + 240);
  v5 |= 0x20000000uLL;
  void *v2 = v5;
  *(void *)(a1 + 240) = v39;
  unint64_t v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_83;
  }

  PB::TextFormatter::format(this, "sosCanceledBecauseOfAbsenceOfLongLie", *(void *)(a1 + 264));
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000000LL) == 0)
  {
LABEL_36:
    if ((v6 & 0x400000000LL) == 0) {
      goto LABEL_37;
    }
    goto LABEL_83;
  }

  unint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 232), 0x52u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_37:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_83;
  }

  PB::TextFormatter::format(this, "lastLockedStateDurationPreEnd", *(double *)(a1 + 312));
  unint64_t v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x1000) == 0)
  {
LABEL_33:
    if ((v15 & 0x2000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_83;
  }

  unint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 395), 0x29u);
  unint64_t v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_83;
  }

  uint64_t v13 = *(_DWORD *)(a2 + 52);
  v3 |= 0x100uLL;
  *(void *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 52) = v13;
  CFStringRef v2 = *(void *)(a2 + 216);
  if ((v2 & 0x200000000LL) == 0)
  {
LABEL_35:
    if ((v2 & 0x800) == 0) {
      goto LABEL_36;
    }
    goto LABEL_83;
  }

  PB::TextFormatter::format(this, "poseAtImpact", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_83;
  }

  unint64_t result = PB::Writer::write(this, *(float *)(v3 + 152), 0x1Fu);
  unint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_33:
    if ((v4 & 0x400) == 0) {
      goto LABEL_34;
    }
    goto LABEL_83;
  }

  unint64_t result = *(float *)(a2 + 108);
  v5 |= 0x10000uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 108) = result;
  uint64_t v7 = *v3;
  unint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_16:
    if ((v7 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_83;
  }

  PB::TextFormatter::format(this, "deltaVXYOverEpoch", *(float *)(a1 + 112));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_15:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_83;
  }

  unint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0xBu);
  uint64_t v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_83;
  }

  uint64_t v21 = *(_BYTE *)(a2 + 158);
  v3 |= 0x800000000uLL;
  *(void *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 158) = v21;
  CFStringRef v2 = *(void *)(a2 + 172);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_38:
    if ((v2 & 4) == 0) {
      goto LABEL_39;
    }
    goto LABEL_83;
  }

  PB::TextFormatter::format(this, "maxRMS", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 172);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_83;
  }

  unint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 136), 0xCAu);
  unint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 4) == 0)
  {
LABEL_36:
    if ((v4 & 8) == 0) {
      goto LABEL_37;
    }
    goto LABEL_83;
  }

        *(_DWORD *)(a1 + 48) = v35;
        goto LABEL_82;
      case 4u:
        *(_BYTE *)(a1 + 60) |= 2u;
        int v38 = *((void *)this + 1);
        if (v38 > 0xFFFFFFFFFFFFFFF7LL || v38 + 8 > *((void *)this + 2)) {
          goto LABEL_46;
        }
        *(void *)(a1 + 24) = *(void *)(*(void *)this + v38);
        goto LABEL_73;
      case 5u:
        *(_BYTE *)(a1 + 60) |= 1u;
        int v39 = *((void *)this + 1);
        if (v39 <= 0xFFFFFFFFFFFFFFF7LL && v39 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v39);
LABEL_73:
          *((void *)this + 1) += 8LL;
        }

        else
        {
LABEL_46:
          *((_BYTE *)this + 24) = 1;
        }

        goto LABEL_82;
      case 6u:
        *(_BYTE *)(a1 + 60) |= 0x20u;
        unint64_t v40 = *((void *)this + 1);
        if (v40 >= *((void *)this + 2))
        {
          unint64_t v43 = 0;
          *((_BYTE *)this + 24) = 1;
        }

        else
        {
          CFStringRef v41 = v40 + 1;
          int v42 = *(unsigned __int8 *)(*(void *)this + v40);
          *((void *)this + 1) = v41;
          unint64_t v43 = v42 != 0;
        }

        *(_BYTE *)(a1 + 56) = v43;
        goto LABEL_82;
      case 7u:
        unsigned int v44 = operator new(0x68uLL);
        sub_10114EEC4((uint64_t)v44);
        unint64_t v47 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v44;
        if (v47)
        {
          (*(void (**)(uint64_t))(*(void *)v47 + 8LL))(v47);
          unsigned int v44 = *(void **)(a1 + 40);
        }

        goto LABEL_53;
      case 8u:
        unsigned int v44 = operator new(0x30uLL);
        sub_101086074((uint64_t)v44);
        int v48 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v44;
        if (v48)
        {
          (*(void (**)(uint64_t))(*(void *)v48 + 8LL))(v48);
          unsigned int v44 = *(void **)(a1 + 8);
        }

  int v42 = *(void *)(a2 + 16);
  v3 |= 2uLL;
  *(void *)(result + 212) = v3;
  *(void *)(result + 16) = v42;
  if ((*(void *)(a2 + 212) & 1) != 0) {
    goto LABEL_82;
  }
  return result;
}

  unint64_t v66 = *(_DWORD *)(a2 + 208);
  v6 |= 0x2000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_DWORD *)(a1 + 208) = v66;
  int v39 = *(_DWORD *)(a2 + 244);
  if ((v39 & 0x20) == 0)
  {
LABEL_53:
    if ((v39 & 4) == 0) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }

  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x4000000uLL;
  *(void *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  CFStringRef v2 = *(void *)(a2 + 184);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_83;
  }

  PB::TextFormatter::format(this, "stepLengthPoincareSD2", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_83;
  }

  unint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0x23u);
  unint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_83;
  }

  int v48 = *(_DWORD *)(a2 + 168);
  *(void *)(a1 + 192) |= (unint64_t)&_mh_execute_header;
  *(_DWORD *)(a1 + 168) = v48;
  uint64_t v13 = *(void *)(a2 + 192);
  if ((v13 & 0x200000000LL) != 0) {
    goto LABEL_82;
  }
LABEL_45:
  if ((v13 & 0x400000000LL) != 0)
  {
LABEL_46:
    int v14 = *(_DWORD *)(a2 + 176);
    *(void *)(a1 + 192) |= 0x400000000uLL;
    *(_DWORD *)(a1 + 176) = v14;
  }

  return a1;
}

          PB::Reader::recallMark(this, v72);
        }

        else
        {
          unint64_t v49 = (char *)a1[2];
          int v48 = a1[3];
          if ((unint64_t)v49 >= v48)
          {
            uint64_t v51 = (char *)*v10;
            int v52 = (v49 - (_BYTE *)*v10) >> 2;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62) {
LABEL_118:
            }
              sub_100007008();
            int v54 = v48 - (void)v51;
            if (v54 >> 1 > v53) {
              unint64_t v53 = v54 >> 1;
            }
            else {
              int v55 = v53;
            }
            if (v55)
            {
              uint64_t v56 = (char *)sub_10000956C((uint64_t)v11, v55);
              uint64_t v51 = (char *)a1[1];
              unint64_t v49 = (char *)a1[2];
            }

            else
            {
              uint64_t v56 = 0LL;
            }

            char v57 = &v56[4 * v52];
            *(_DWORD *)char v57 = 0;
            int v50 = v57 + 4;
            while (v49 != v51)
            {
              uint64_t v58 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *((_DWORD *)v57 - 1) = v58;
              v57 -= 4;
            }

            a1[1] = v57;
            a1[2] = v50;
            a1[3] = &v56[4 * v55];
            if (v51) {
              operator delete(v51);
            }
          }

          else
          {
            *(_DWORD *)unint64_t v49 = 0;
            int v50 = v49 + 4;
          }

          a1[2] = v50;
          unint64_t v59 = *((void *)this + 1);
          uint64_t v60 = *((void *)this + 2);
          unint64_t v61 = *(void *)this;
          uint64_t v62 = 0;
          BOOL v63 = 0;
          if (v59 > 0xFFFFFFFFFFFFFFF5LL || v59 + 10 > v60)
          {
            unint64_t v67 = 0LL;
            if (v60 <= v59) {
              uint64_t v60 = *((void *)this + 1);
            }
            while (1)
            {
              if (v60 == v59)
              {
                LODWORD(v67) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_107;
              }

              unint64_t v65 = v59 + 1;
              unint64_t v66 = *(_BYTE *)(v61 + v59);
              *((void *)this + 1) = v65;
              v67 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0) {
                break;
              }
              v62 += 7;
              unint64_t v59 = v65;
              uint64_t v37 = v63++ > 8;
              if (v37)
              {
LABEL_103:
                LODWORD(v67) = 0;
                goto LABEL_107;
              }
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v67) = 0;
            }
          }

          else
          {
            unint64_t v67 = 0LL;
            while (1)
            {
              uint64_t v68 = v59 + 1;
              *((void *)this + 1) = v59 + 1;
              uint64_t v69 = *(_BYTE *)(v61 + v59);
              v67 |= (unint64_t)(v69 & 0x7F) << v62;
              if ((v69 & 0x80) == 0) {
                break;
              }
              v62 += 7;
              unint64_t v59 = v68;
              uint64_t v37 = v63++ > 8;
              if (v37) {
                goto LABEL_103;
              }
            }
          }

  std::string::size_type v32 = *(_DWORD *)(a2 + 84);
  v3 |= 0x40000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 84) = v32;
  CFStringRef v2 = *(void *)(a2 + 188);
  if ((v2 & 0x1000000000LL) == 0)
  {
LABEL_34:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_83;
  }

  PB::TextFormatter::format(this, "srcHorizontalTranslation", *(float *)(a1 + 100));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_83;
  }

  unint64_t result = PB::Writer::write(this, *(float *)(v3 + 156), 0x1Eu);
  unint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000LL) == 0) {
      goto LABEL_33;
    }
    goto LABEL_83;
  }

              *(_DWORD *)(a1 + 12) = v24;
              goto LABEL_92;
            case 2u:
              *(_BYTE *)(a1 + 24) |= 8u;
              BOOL v3 = *((void *)this + 1);
              CFStringRef v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                int v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                uint64_t v27 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                int v28 = v27 != 0;
              }

              *(_BYTE *)(a1 + 20) = v28;
              goto LABEL_92;
            case 3u:
              *(_BYTE *)(a1 + 24) |= 4u;
              uint64_t v29 = *((void *)this + 1);
              CFStringRef v2 = *((void *)this + 2);
              __int16 v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5LL || v29 + 10 > v2)
              {
                unint64_t v47 = 0;
                int v48 = 0;
                uint64_t v33 = 0LL;
                if (v2 <= v29) {
                  BOOL v3 = *((void *)this + 1);
                }
                else {
                  BOOL v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }

                  unint64_t v49 = v29++;
                  int v50 = *(_BYTE *)(v30 + v49);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  int v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_85:
                    BOOL v3 = v49 + 1;
                    goto LABEL_86;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_85;
              }

              unint64_t v31 = 0;
              std::string::size_type v32 = 0;
              uint64_t v33 = 0LL;
              do
              {
                BOOL v3 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                int v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v31 += 7;
                uint64_t v29 = v3;
                int v14 = v32++ > 8;
              }

              while (!v14);
              LODWORD(v33) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_92;
            case 4u:
              *(_BYTE *)(a1 + 24) |= 1u;
              uint64_t v35 = *((void *)this + 1);
              CFStringRef v2 = *((void *)this + 2);
              int v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5LL || v35 + 10 > v2)
              {
                uint64_t v51 = 0;
                int v52 = 0;
                int v39 = 0LL;
                if (v2 <= v35) {
                  BOOL v3 = *((void *)this + 1);
                }
                else {
                  BOOL v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }

                  unint64_t v53 = v35++;
                  int v54 = *(_BYTE *)(v36 + v53);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  int v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_90:
                    BOOL v3 = v53 + 1;
                    goto LABEL_91;
                  }
                }

                if (*((_BYTE *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_90;
              }

              uint64_t v37 = 0;
              int v38 = 0;
              int v39 = 0LL;
              do
              {
                BOOL v3 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                unint64_t v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v37 += 7;
                uint64_t v35 = v3;
                int v14 = v38++ > 8;
              }

              while (!v14);
              LODWORD(v39) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 8) = v39;
LABEL_92:
              unint64_t v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24)) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(_BYTE *)(a1 + 24) |= 0x10u;
              BOOL v3 = *((void *)this + 1);
              CFStringRef v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                int v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }

              else
              {
                CFStringRef v41 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                int v42 = v41 != 0;
              }

              *(_BYTE *)(a1 + 21) = v42;
              goto LABEL_92;
            default:
              unint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result) {
                return result;
              }
              BOOL v3 = *((void *)this + 1);
              CFStringRef v2 = *((void *)this + 2);
              goto LABEL_92;
          }
        }

        unint64_t v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

void sub_1000967F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1000968D4(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v16 = v14;
  int v17 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }

  __int128 v18 = *a3;
  sub_100099430((uint64_t *)(a1 + 232), (uint64_t)&v16);
  uint64_t v8 = v17;
  if (v17)
  {
    uint64_t v9 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  uint64_t v11 = v15;
  if (v15)
  {
    uint64_t v12 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_1000969E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va1);
  sub_10000AE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100096A04(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v18 = a2;
  unint64_t v4 = sub_10009C2A4(a1 + 256, a2, (uint64_t)&unk_1012CF090, &v18);
  uint64_t v5 = (_OWORD *)v4[5];
  unint64_t v6 = v4[6];
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = v4[4];
    uint64_t v9 = ((uint64_t)v5 - v8) >> 4;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v6 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_100037038((uint64_t)(v4 + 6), v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[16 * v9];
    unint64_t v15 = &v13[16 * v12];
    *(_OWORD *)uint64_t v14 = *a3;
    unint64_t v7 = v14 + 16;
    int v17 = (char *)v4[4];
    uint64_t v16 = (char *)v4[5];
    if (v16 != v17)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }

      while (v16 != v17);
      uint64_t v16 = (char *)v4[4];
    }

    v4[4] = v14;
    v4[5] = v7;
    v4[6] = v15;
    if (v16) {
      operator delete(v16);
    }
  }

  else
  {
    *uint64_t v5 = *a3;
    unint64_t v7 = v5 + 1;
  }

  v4[5] = v7;
}

uint64_t sub_100096B18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 296) = a2;
  return result;
}

uint64_t sub_100096B20(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 272);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  do
  {
    result += (uint64_t)(v1[5] - v1[4]) >> 4;
    uint64_t v1 = (void *)*v1;
  }

  while (v1);
  return result;
}

uint64_t sub_100096B4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 300) = a2;
  return result;
}

char *sub_100096B54(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(a1 + 304);
  return result;
}

void sub_100096B78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v65 = 0LL;
  unint64_t v66 = 0LL;
  unint64_t v67 = 0LL;
  uint64_t v3 = *(int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    unint64_t v4 = *(uint64_t ****)(a1 + 8);
    uint64_t v5 = &v4[v3];
    do
    {
      sub_1001014F0(*v4, &v72);
      if ((_BYTE)v73)
      {
        unint64_t v6 = v66;
        if (v66 >= v67)
        {
          uint64_t v11 = (v66 - (_BYTE *)v65) >> 4;
          unint64_t v12 = v11 + 1;
          uint64_t v13 = v67 - (_BYTE *)v65;
          if ((v67 - (_BYTE *)v65) >> 3 > v12) {
            unint64_t v12 = v13 >> 3;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14) {
            unint64_t v15 = (char *)sub_100037038((uint64_t)&v67, v14);
          }
          else {
            unint64_t v15 = 0LL;
          }
          uint64_t v19 = &v15[16 * v11];
          *(_OWORD *)uint64_t v19 = v72;
          uint64_t v21 = (char *)v65;
          uint64_t v20 = v66;
          int v22 = v19;
          if (v66 != v65)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v20 - 1);
              v22 -= 16;
              v20 -= 16;
            }

            while (v20 != v21);
            goto LABEL_38;
          }

          goto LABEL_39;
        }

        *(_OWORD *)unint64_t v66 = v72;
        unint64_t v7 = v6 + 16;
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CB88);
        }
        uint64_t v8 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          uint64_t buf = 68289026LL;
          __int16 v75 = 2082;
          int v76 = "";
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:CLMicroLocationSimilarityListData fromProtobuf - invalid clusterUuid conversion!}",  (uint8_t *)&buf,  0x12u);
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181CB88);
          }
        }

        uint64_t v9 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          uint64_t buf = 68289026LL;
          __int16 v75 = 2082;
          int v76 = "";
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "CLMicroLocationSimilarityListData fromProtobuf - invalid clusterUuid conversion!",  "{msg%{public}.0s:CLMicroLocationSimilarityListData fromProtobuf - invalid clusterUuid conversion!}",  (uint8_t *)&buf,  0x12u);
        }

        unint64_t v10 = v66;
        if (v66 >= v67)
        {
          uint64_t v16 = (v66 - (_BYTE *)v65) >> 4;
          unint64_t v17 = v16 + 1;
          uint64_t v18 = v67 - (_BYTE *)v65;
          if ((v67 - (_BYTE *)v65) >> 3 > v17) {
            unint64_t v17 = v18 >> 3;
          }
          else {
            unint64_t v14 = v17;
          }
          if (v14) {
            unint64_t v15 = (char *)sub_100037038((uint64_t)&v67, v14);
          }
          else {
            unint64_t v15 = 0LL;
          }
          uint64_t v19 = &v15[16 * v16];
          *(void *)uint64_t v19 = 0LL;
          *((void *)v19 + 1) = 0LL;
          int v23 = (char *)v65;
          uint64_t v20 = v66;
          int v22 = v19;
          if (v66 != v65)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v20 - 1);
              v22 -= 16;
              v20 -= 16;
            }

            while (v20 != v23);
LABEL_38:
            uint64_t v20 = (char *)v65;
          }

void sub_100097588( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26)
{
  uint64_t v29 = *(void **)(v27 - 184);
  if (v29)
  {
    *(void *)(v27 - 176) = v29;
    operator delete(v29);
  }

  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100097650(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 120))
  {
    sub_100007664(a1, (__n128 *)a2);
    sub_100007664(a1 + 24, (__n128 *)(a2 + 24));
    sub_10009AFF8(a1 + 48, a2 + 48);
    sub_100007664(a1 + 80, (__n128 *)(a2 + 80));
    uint64_t v4 = *(void *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(void *)(a1 + 104) = v4;
  }

  else
  {
    sub_10009B0A4(a1, a2);
    *(_BYTE *)(a1 + 120) = 1;
  }

  return a1;
}

uint64_t sub_1000976D4(uint64_t a1)
{
  CFStringRef v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }

  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v3 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = 0LL;
    if (v3) {
      operator delete[](v3);
    }
  }

  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }

  uint64_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }

  return a1;
}

void *sub_10009773C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = result[29];
  uint64_t v4 = result[30];
  while (v3 != v4)
  {
    uint64_t result = sub_10001A568(a2, (void *)(v3 + 16), (_OWORD *)(v3 + 16));
    v3 += 32LL;
  }

  return result;
}

void sub_100097794(_Unwind_Exception *a1)
{
}

void sub_1000977A8(uint64_t a1, unint64_t **a2, uint64_t *a3)
{
  char v41 = 1;
  sub_10009AFF8(a1 + 48, (uint64_t)&__p);
  if (v41)
  {
    unint64_t v6 = __p;
    std::string __p = 0LL;
    if (v6) {
      operator delete[](v6);
    }
  }

  unint64_t v7 = v37[0];
  v37[0] = 0LL;
  if (v7) {
    operator delete[](v7);
  }
  sub_10009C52C((uint64_t)&__p, *a2, a2[1]);
  sub_10009C900(v37, __p, &v40);
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
  }

  *(_OWORD *)a1 = *(_OWORD *)v37;
  unint64_t v10 = (char **)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v38;
  *(void *)(a1 + 32) = v9;
  uint64_t v11 = (void **)(a1 + 80);
  *(void *)(a1 + 88) = *(void *)(a1 + 80);
  sub_10005A29C((void **)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 2));
  sub_1000210A0((void **)(a1 + 80), 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 2));
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  if (*a3 != v13)
  {
    do
    {
      unint64_t v15 = *(_OWORD **)(a1 + 32);
      unint64_t v14 = *(void *)(a1 + 40);
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = ((char *)v15 - *v10) >> 4;
        unint64_t v18 = v17 + 1;
        uint64_t v19 = v14 - (void)*v10;
        if (v19 >> 3 > v18) {
          unint64_t v18 = v19 >> 3;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20) {
          uint64_t v21 = (char *)sub_100037038(a1 + 40, v20);
        }
        else {
          uint64_t v21 = 0LL;
        }
        int v22 = &v21[16 * v17];
        *(_OWORD *)int v22 = *(_OWORD *)v12;
        int v24 = *(char **)(a1 + 24);
        int v23 = *(char **)(a1 + 32);
        int v25 = v22;
        if (v23 != v24)
        {
          do
          {
            *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
            v25 -= 16;
            v23 -= 16;
          }

          while (v23 != v24);
          int v23 = *v10;
        }

        uint64_t v16 = v22 + 16;
        *(void *)(a1 + 24) = v25;
        *(void *)(a1 + 32) = v22 + 16;
        *(void *)(a1 + 40) = &v21[16 * v20];
        if (v23) {
          operator delete(v23);
        }
      }

      else
      {
        _OWORD *v15 = *(_OWORD *)v12;
        uint64_t v16 = v15 + 1;
      }

      *(void *)(a1 + 32) = v16;
      uint64_t v27 = *(char **)(a1 + 88);
      unint64_t v26 = *(void *)(a1 + 96);
      if ((unint64_t)v27 >= v26)
      {
        uint64_t v29 = (char *)*v11;
        uint64_t v30 = (v27 - (_BYTE *)*v11) >> 2;
        unint64_t v31 = v30 + 1;
        uint64_t v32 = v26 - (void)v29;
        if (v32 >> 1 > v31) {
          unint64_t v31 = v32 >> 1;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          uint64_t v34 = (char *)sub_10000956C(a1 + 96, v33);
          uint64_t v29 = *(char **)(a1 + 80);
          uint64_t v27 = *(char **)(a1 + 88);
        }

        else
        {
          uint64_t v34 = 0LL;
        }

        uint64_t v35 = &v34[4 * v30];
        *(_DWORD *)uint64_t v35 = *(_DWORD *)(v12 + 16);
        int v28 = v35 + 4;
        while (v27 != v29)
        {
          int v36 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }

        *(void *)(a1 + 80) = v35;
        *(void *)(a1 + 88) = v28;
        *(void *)(a1 + 96) = &v34[4 * v33];
        if (v29) {
          operator delete(v29);
        }
      }

      else
      {
        *(_DWORD *)uint64_t v27 = *(_DWORD *)(v12 + 16);
        int v28 = v27 + 4;
      }

      *(void *)(a1 + 88) = v28;
      v12 += 20LL;
    }

    while (v12 != v13);
  }

  sub_100008390((uint64_t)&__p, v40);
}

void sub_100097AB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, void *a14, uint64_t a15, char a16)
{
}

uint64_t sub_100097B14(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 120))
  {
    if (a1 == a2)
    {
      sub_10009B34C(a1 + 48, a1 + 48);
    }

    else
    {
      sub_10009B244((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
      sub_10009B244( (char *)(a1 + 24),  *(char **)(a2 + 24),  *(void *)(a2 + 32),  (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4);
      sub_10009B34C(a1 + 48, a2 + 48);
      sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    }

    uint64_t v4 = *(void *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    *(void *)(a1 + 104) = v4;
  }

  else
  {
    sub_10009B3B8(a1, a2);
    *(_BYTE *)(a1 + 120) = 1;
  }

  return a1;
}

void *sub_100097BC8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = *((_DWORD *)result + 1);
  if (v3 < 2)
  {
    sub_10009773C(result, (uint64_t)v5);
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    uint64_t v4 = v6;
    return (void *)sub_100019CEC((uint64_t)v5);
  }

  else
  {
    if (v3 == 2)
    {
      if (*((_BYTE *)result + 192))
      {
        *(void *)a2 = 0LL;
        *(void *)(a2 + 8) = 0LL;
        *(void *)(a2 + 16) = 0LL;
        return sub_1000577B4( (void *)a2,  (const void *)result[12],  result[13],  (uint64_t)(result[13] - result[12]) >> 4);
      }
    }

    else if (v3 != 3)
    {
      sub_10122855C();
    }

    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
  }

  return result;
}

void sub_100097C84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }

  sub_100019CEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_100097CA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 232);
  uint64_t v2 = *(void *)(a1 + 240);
  BOOL v3 = v1 == v2 && *(_DWORD *)(a1 + 4) == 3;
  if (v1 != v2)
  {
    if (*(void *)(a1 + 280))
    {
      sub_10009773C((void *)a1, (uint64_t)v8);
      if (v10 == *(void *)(a1 + 280))
      {
        uint64_t v5 = v9;
        if (v9)
        {
          unint64_t v6 = (void *)(a1 + 256);
          LOBYTE(v3) = 1;
          do
          {
            BOOL v3 = v3 && sub_10004ACA4(v6, v5 + 2) != 0LL;
            uint64_t v5 = (void *)*v5;
          }

          while (v5);
        }

        else
        {
          BOOL v3 = 1LL;
        }
      }

      else
      {
        BOOL v3 = 0LL;
      }

      sub_100019CEC((uint64_t)v8);
    }

    else
    {
      return 0LL;
    }
  }

  return v3;
}

void sub_100097D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100097D84(void *result, void *a2)
{
  BOOL v3 = result;
  for (uint64_t i = (void *)a2[2]; i; uint64_t i = (void *)*i)
  {
    if (i[2] != i[4] || i[3] != i[5])
    {
      uint64_t result = sub_10001A7B8(v3 + 32, i + 2);
      if (result)
      {
        sub_10009B504((uint64_t)(v3 + 32), i + 4, (_OWORD *)i + 2, (__int128 *)result + 2);
        if ((v6 & 1) == 0) {
          sub_101228740();
        }
        uint64_t result = sub_10009B7E4(v3 + 32, i + 2);
      }
    }
  }

  unint64_t v7 = (void *)v3[29];
  uint64_t v8 = (void *)v3[30];
  if (v7 != v8)
  {
    uint64_t v9 = v7 + 2;
    do
    {
      uint64_t result = sub_10004ACA4(a2, v9);
      if (result) {
        *(_OWORD *)uint64_t v9 = *((_OWORD *)result + 2);
      }
      uint64_t v10 = v9 + 2;
      v9 += 4;
    }

    while (v10 != v8);
  }

  return result;
}

uint64_t sub_100097E5C@<X0>(unint64_t a1@<X0>, void **a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  int v21 = 0;
  sub_100018E34(&v21);
  if (a1)
  {
    do
    {
      uint64_t v4 = sub_100017338((ssize_t)&v21);
      uint64_t v6 = v4;
      uint64_t v7 = v5;
      uint64_t v9 = (uint64_t *)a2[1];
      unint64_t v8 = (unint64_t)a2[2];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = ((char *)v9 - (_BYTE *)*a2) >> 4;
        unint64_t v12 = v11 + 1;
        uint64_t v13 = v8 - (void)*a2;
        if (v13 >> 3 > v12) {
          unint64_t v12 = v13 >> 3;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14) {
          unint64_t v15 = (char *)sub_100037038((uint64_t)(a2 + 2), v14);
        }
        else {
          unint64_t v15 = 0LL;
        }
        uint64_t v16 = (uint64_t *)&v15[16 * v11];
        uint64_t *v16 = v6;
        v16[1] = v7;
        unint64_t v18 = (char *)*a2;
        uint64_t v17 = (char *)a2[1];
        uint64_t v19 = v16;
        if (v17 != *a2)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 2;
            v17 -= 16;
          }

          while (v17 != v18);
          uint64_t v17 = (char *)*a2;
        }

        uint64_t v10 = v16 + 2;
        *a2 = v19;
        a2[1] = v16 + 2;
        a2[2] = &v15[16 * v14];
        if (v17) {
          operator delete(v17);
        }
      }

      else
      {
        *uint64_t v9 = v4;
        v9[1] = v5;
        uint64_t v10 = v9 + 2;
      }

      a2[1] = v10;
    }

    while (a1 > ((char *)v10 - (_BYTE *)*a2) >> 4);
  }

  return sub_100019D7C((unsigned int *)&v21);
}

void sub_100097FA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11)
{
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100097FD0(uint64_t a1, void *a2, void *a3)
{
  if (v72 == *(void *)(a1 + 280) && v69 == a2[35])
  {
    for (uint64_t i = v68; v68; uint64_t i = v68)
    {
      while (!sub_10001A7B8(v70, i + 2))
      {
        uint64_t i = (void *)*i;
        if (!i) {
          goto LABEL_16;
        }
      }

      sub_100097E5C(v72, __p);
      __int128 v76 = 0u;
      __int128 v77 = 0u;
      int v78 = 1065353216;
      uint64_t v6 = v71;
      if (v71)
      {
        uint64_t v7 = (__int128 *)__p[0];
        do
        {
          __int128 v81 = *((_OWORD *)v6 + 1);
          __int128 v82 = *v7;
          sub_10009B860((uint64_t)&v76, &v81, &v81);
          uint64_t v6 = (uint64_t *)*v6;
          ++v7;
        }

        while (v6);
      }

      sub_100097D84((void *)a1, &v76);
      sub_10001CE40(v70);
      uint64_t v9 = __p[0];
      unint64_t v8 = __p[1];
      while (v9 != v8)
      {
        sub_10001A568((uint64_t)v70, v9, v9);
        v9 += 2;
      }

      sub_100019CEC((uint64_t)&v76);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }

LABEL_99:
  sub_100019CEC((uint64_t)v67);
  return sub_100019CEC((uint64_t)v70);
}

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E,  (int)a2,  *(double *)(v5 + 184),  a3);
  uint64_t v6 = *(_DWORD *)(v5 + 364);
  if ((v6 & 0x40000000) != 0) {
    goto LABEL_100;
  }
LABEL_32:
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_101:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20,  (int)a2,  *(double *)(v5 + 192),  a3);
LABEL_33:
  uint64_t v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21,  (int)a2,  *(double *)(v5 + 200),  a3);
    uint64_t v7 = *(_DWORD *)(v5 + 368);
    if ((v7 & 2) == 0)
    {
LABEL_35:
      if ((v7 & 4) == 0) {
        goto LABEL_36;
      }
      goto LABEL_104;
    }
  }

  else if ((v7 & 2) == 0)
  {
    goto LABEL_35;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22,  *(unsigned __int8 *)(v5 + 276),  (BOOL)a2,  a4);
  uint64_t v7 = *(_DWORD *)(v5 + 368);
  if ((v7 & 4) == 0)
  {
LABEL_36:
    if ((v7 & 8) == 0) {
      goto LABEL_37;
    }
    goto LABEL_107;
  }

  *(_DWORD *)(a1 + 88) = v5;
  return v5;
}

  if (!*(_BYTE *)(a1 + 56))
  {
    unint64_t v32 = *(void *)(a1 + 16);
    (*(void (**)(uint64_t, std::string *))(*(void *)v32 + 16LL))(v32, p_p);
    if (!*v54)
    {
      *(void *)uint64_t buf = "TableName";
      *(_DWORD *)&uint8_t buf[8] = 3;
      *(_WORD *)&buf[12] = 1;
      buf[16] = 0;
      v58[10] = 0;
      unint64_t v59 = "SoftwareVersion";
      uint64_t v60 = 3;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      BOOL v63 = 0;
      __int128 v64 = "SerialNumber";
      unint64_t v65 = 3;
      uint64_t v66 = 0;
      unint64_t v67 = 0;
      __int128 v68 = 0;
      uint64_t v69 = 0LL;
      __int128 v70 = 5;
      int v71 = 0;
      unint64_t v72 = 0;
      int v73 = 0;
      sub_1003B3948(a1, "TableInfo", (const char **)buf, 0LL, 1);
      int *v54 = 1;
    }

    sub_1003B4838(a1);
    (*(void (**)(uint64_t))(*(void *)v32 + 24LL))(v32);
  }

  if (!sub_1003B4F44(a1, 1))
  {
    if (qword_101934A20 != -1) {
      dispatch_once(&qword_101934A20, &stru_101835C50);
    }
    double v33 = (os_log_s *)off_101934A28;
    if (os_log_type_enabled((os_log_t)off_101934A28, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unable to turn ON foreign keys check}",  buf,  0x12u);
      if (qword_101934A20 != -1) {
        dispatch_once(&qword_101934A20, &stru_101835C50);
      }
    }

    uint64_t v34 = (os_log_s *)off_101934A28;
    if (os_signpost_enabled((os_log_t)off_101934A28))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v34,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unable to turn ON foreign keys check",  "{msg%{public}.0s:Unable to turn ON foreign keys check}",  buf,  0x12u);
    }
  }

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  (const void *)a1,  (CFNotificationCallback)sub_1003B5098,  @"com.apple.locationd.DumpDiagnostics",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver( LocalCenter,  (const void *)a1,  (CFNotificationCallback)sub_1003B5098,  @"com.apple.locationd.DumpDiagnostics",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
LABEL_112:
}

  double v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
  if ((v33 & 0x80000000) != 0)
  {
    uint64_t v34 = 10;
  }

  else if (v33 >= 0x80)
  {
    uint64_t v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33, a2);
    BOOL v3 = *(_DWORD *)(a1 + 148);
  }

  else
  {
    uint64_t v34 = 1;
  }

  uint64_t v4 = (v4 + v34 + 1);
  if ((v3 & 0x8000) != 0)
  {
LABEL_105:
    uint64_t v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 68);
    if (v35 >= 0x80)
    {
      BOOL v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35, a2);
      BOOL v3 = *(_DWORD *)(a1 + 148);
    }

    else
    {
      BOOL v36 = 1;
    }

    uint64_t v4 = (v4 + v36 + 2);
  }

      unint64_t v67 = v114;
      if (v114)
      {
        __int128 v68 = (unint64_t *)&v114->__shared_owners_;
        do
          uint64_t v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }

      break;
    }

    double v26 = v113[1];
    uint64_t v27 = v119;
    if (v119 >= v120)
    {
      uint64_t v29 = (float *)__p;
      uint64_t v30 = ((char *)v119 - (_BYTE *)__p) >> 2;
      unint64_t v31 = v30 + 1;
      unint64_t v32 = (char *)v120 - (_BYTE *)__p;
      else {
        double v33 = v31;
      }
      if (v33)
      {
        uint64_t v34 = (char *)sub_10000956C((uint64_t)&v120, v33);
        uint64_t v29 = (float *)__p;
        uint64_t v27 = v119;
      }

      else
      {
        uint64_t v34 = 0LL;
      }

      uint64_t v35 = (float *)&v34[4 * v30];
      *uint64_t v35 = v26;
      int v28 = v35 + 1;
      while (v27 != v29)
      {
        BOOL v36 = *((_DWORD *)v27-- - 1);
        *((_DWORD *)v35-- - 1) = v36;
      }

      std::string __p = v35;
      unsigned int v119 = v28;
      int v120 = (float *)&v34[4 * v33];
      if (v29) {
        operator delete(v29);
      }
    }

    else
    {
      *unsigned int v119 = v26;
      int v28 = v27 + 1;
    }

    unsigned int v119 = v28;
    if (!i)
    {
      std::to_string(&v111, *v113);
      uint64_t v37 = std::string::insert(&v111, 0LL, "firstTimestamp,");
      double v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__l.__cap_ = v37->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0LL;
      v37->__r_.__value_.__l.__cap_ = 0LL;
      v37->__r_.__value_.__r.__words[0] = 0LL;
      double v39 = std::string::append(&v112, ",firstPressure,");
      __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v121.__r_.__value_.__l.__cap_ = v39->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0LL;
      v39->__r_.__value_.__l.__cap_ = 0LL;
      v39->__r_.__value_.__r.__words[0] = 0LL;
      std::to_string(&v110, v113[1]);
      if ((v110.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v41 = &v110;
      }
      else {
        char v41 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      if ((v110.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v42 = v110.__r_.__value_.__s.__size_;
      }
      else {
        int v42 = v110.__r_.__value_.__l.__size_;
      }
      unint64_t v43 = std::string::append(&v121, (const std::string::value_type *)v41, v42);
      unint64_t v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      *(void *)&buf[16] = v43->__r_.__value_.__l.__cap_;
      *(_OWORD *)uint64_t buf = v44;
      v43->__r_.__value_.__l.__size_ = 0LL;
      v43->__r_.__value_.__l.__cap_ = 0LL;
      v43->__r_.__value_.__r.__words[0] = 0LL;
      if (buf[23] >= 0) {
        unint64_t v45 = buf;
      }
      else {
        unint64_t v45 = *(const std::string::value_type **)buf;
      }
      if (buf[23] >= 0) {
        unint64_t v46 = buf[23];
      }
      else {
        unint64_t v46 = *(void *)&buf[8];
      }
      std::string::append(&v117, v45, v46);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    sub_1000F2F30(&v115, (uint64_t *)&v113);
    unint64_t v47 = v114;
    if (v114)
    {
      __int128 v48 = (unint64_t *)&v114->__shared_owners_;
      do
        uint64_t v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }

    if ((void *)v10 == *v9)
    {
      int v50 = (uint64_t)*--v9;
      CFStringRef v10 = v50 + 4096;
    }

    v10 -= 16LL;
    begin = a3->__map_.__begin_;
    end = a3->__map_.__end_;
  }

  if (i > 9)
  {
    std::to_string(&v111, *v115);
    int v74 = std::string::insert(&v111, 0LL, ",lastTimestamp,");
    __int128 v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v112.__r_.__value_.__l.__cap_ = v74->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0LL;
    v74->__r_.__value_.__l.__cap_ = 0LL;
    v74->__r_.__value_.__r.__words[0] = 0LL;
    __int128 v76 = std::string::append(&v112, ",lastPressure,");
    __int128 v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v121.__r_.__value_.__l.__cap_ = v76->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v110, v115[1]);
    if ((v110.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      int v78 = &v110;
    }
    else {
      int v78 = (std::string *)v110.__r_.__value_.__r.__words[0];
    }
    if ((v110.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v79 = v110.__r_.__value_.__s.__size_;
    }
    else {
      __int128 v79 = v110.__r_.__value_.__l.__size_;
    }
    char v80 = std::string::append(&v121, (const std::string::value_type *)v78, v79);
    __int128 v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    *(void *)&buf[16] = v80->__r_.__value_.__l.__cap_;
    *(_OWORD *)uint64_t buf = v81;
    v80->__r_.__value_.__l.__size_ = 0LL;
    v80->__r_.__value_.__l.__cap_ = 0LL;
    v80->__r_.__value_.__r.__words[0] = 0LL;
    if (buf[23] >= 0) {
      __int128 v82 = buf;
    }
    else {
      __int128 v82 = *(const std::string::value_type **)buf;
    }
    if (buf[23] >= 0) {
      char v83 = buf[23];
    }
    else {
      char v83 = *(void *)&buf[8];
    }
    std::string::append(&v117, v82, v83);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    unint64_t v72 = sub_10079239C((uint64_t)&__p, 10);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10184EA80);
    }
    unsigned int v84 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
    {
      int v85 = CFAbsoluteTimeGetCurrent();
      uint64_t v86 = &v117;
      if ((v117.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v86 = (std::string *)v117.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t buf = 134349826;
      *(double *)&uint8_t buf[4] = v85;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v72;
      *(_WORD *)&_BYTE buf[22] = 1026;
      *(_DWORD *)uint64_t v124 = i;
      *(_WORD *)&v124[4] = 2080;
      *(void *)&v124[6] = v86;
      _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "filtering surface calibration,timestamp,%{public}f,filteredValue,%{public}f,numCalibrations,%{public}d,%s",  buf,  0x26u);
    }

    if (!sub_1002921D0(115, 2))
    {
      int v73 = 1;
      goto LABEL_141;
    }

    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10184EA80);
    }
    int v96 = qword_1019346A8;
    uint64_t v97 = CFAbsoluteTimeGetCurrent();
    v98 = &v117;
    if ((v117.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      v98 = (std::string *)v117.__r_.__value_.__r.__words[0];
    }
    LODWORD(v121.__r_.__value_.__l.__data_) = 134349826;
    *(double *)((char *)v121.__r_.__value_.__r.__words + 4) = v97;
    WORD2(v121.__r_.__value_.__r.__words[1]) = 2050;
    *(double *)((char *)&v121.__r_.__value_.__r.__words[1] + 6) = v72;
    HIWORD(v121.__r_.__value_.__r.__words[2]) = 1026;
    *(_DWORD *)unsigned int v122 = i;
    *(_WORD *)&v122[4] = 2080;
    *(void *)&v122[6] = v98;
    LODWORD(v107) = 38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v96,  0LL,  "filtering surface calibration,timestamp,%{public}f,filteredValue,%{public}f,numCalibrations,%{public}d,%s",  &v121,  *(void *)&v107);
    int v100 = (char *)v99;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLContextManagerWaterSubmersion calculateFilterSurfaceCal:withSuccess:]",  "%s\n",  v99);
    int v87 = v109;
    if (v100 != buf) {
      free(v100);
    }
    int v73 = 1;
  }

  else
  {
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10184EA80);
    }
    __int128 v70 = (os_log_s *)qword_1019346A8;
    if (os_log_type_enabled((os_log_t)qword_1019346A8, OS_LOG_TYPE_DEFAULT))
    {
      int v71 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)uint64_t buf = 134349568;
      *(CFAbsoluteTime *)&uint8_t buf[4] = v71;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = i;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = 10;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "too few pressure samples to filter not updating surface cal,timestamp,%{public}f,numSamples,%{public}d,needed,%{public}d",  buf,  0x18u);
    }

    unint64_t v72 = -1.0;
    if (!sub_1002921D0(115, 2))
    {
      int v73 = 0;
LABEL_141:
      int v87 = v109;
      goto LABEL_142;
    }

    bzero(buf, 0x65CuLL);
    if (qword_1019346A0 != -1) {
      dispatch_once(&qword_1019346A0, &stru_10184EA80);
    }
    int v92 = qword_1019346A8;
    unsigned int v93 = CFAbsoluteTimeGetCurrent();
    LODWORD(v121.__r_.__value_.__l.__data_) = 134349568;
    *(CFAbsoluteTime *)((char *)v121.__r_.__value_.__r.__words + 4) = v93;
    WORD2(v121.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v121.__r_.__value_.__r.__words[1] + 6) = i;
    WORD1(v121.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v121.__r_.__value_.__r.__words[2]) = 10;
    LODWORD(v107) = 24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v92,  0LL,  "too few pressure samples to filter not updating surface cal,timestamp,%{public}f,numSamples,%{public}d,needed,%{public}d",  &v121,  *(void *)&v107);
    int v95 = (char *)v94;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "-[CLContextManagerWaterSubmersion calculateFilterSurfaceCal:withSuccess:]",  "%s\n",  v94);
    int v87 = v109;
    if (v95 != buf) {
      free(v95);
    }
    int v73 = 0;
  }

  uint64_t v53 = atomic_load((unsigned __int8 *)&qword_10198D5C8);
  if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_10198D5C8))
  {
    qword_10198D5C0 = 0x4066800000000000LL;
    __cxa_guard_release(&qword_10198D5C8);
  }

  uint64_t v54 = fabs(v49);
  uint64_t v55 = *(double *)&qword_10198D5C0;
  uint64_t v57 = v6 - v7;
  if ((*(void *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (qword_10198D5C0 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_160;
  }

  __int128 v76 = vabdd_f64(v54, *(double *)&qword_10198D5C0);
  __int128 v77 = fabs(*(double *)&qword_10198D5C0);
  if (v54 >= v77) {
    __int128 v77 = v54;
  }
  int v78 = v77 >= 1.0 ? v77 * 2.22044605e-16 : 2.22044605e-16;
  if (v76 <= v78)
  {
LABEL_101:
    uint64_t v56 = 0;
    if (v6 + v7 < 0.0) {
      uint64_t v55 = -*(double *)&qword_10198D5C0;
    }
    uint64_t v57 = v55 - (v6 + v7);
  }

  else
  {
LABEL_160:
    uint64_t v56 = 1;
  }

  __int128 v79 = atomic_load((unsigned __int8 *)&qword_10198D5C8);
  if ((v79 & 1) == 0)
  {
    int v99 = v57;
    int v100 = __cxa_guard_acquire(&qword_10198D5C8);
    uint64_t v57 = v99;
    if (v100)
    {
      qword_10198D5C0 = 0x4066800000000000LL;
      __cxa_guard_release(&qword_10198D5C8);
      uint64_t v57 = v99;
    }
  }

  char v80 = fabs(v52);
  __int128 v82 = v9 - v7;
  if ((*(void *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (qword_10198D5C0 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    char v83 = vabdd_f64(v80, *(double *)&qword_10198D5C0);
    unsigned int v84 = fabs(*(double *)&qword_10198D5C0);
    if (v80 >= v84) {
      unsigned int v84 = v80;
    }
    int v85 = v84 >= 1.0 ? v84 * 2.22044605e-16 : 2.22044605e-16;
    if (v83 <= v85)
    {
LABEL_163:
      __int128 v81 = v7 + v9;
      if (v7 + v9 >= 0.0) {
        __int128 v82 = *(double *)&qword_10198D5C0 - v81;
      }
      else {
        __int128 v82 = -*(double *)&qword_10198D5C0 - v81;
      }
      char v80 = 0.0;
    }
  }

  if (v56) {
    uint64_t v86 = v54;
  }
  else {
    uint64_t v86 = 0.0;
  }
  if (v80 >= v86) {
    char v80 = v86;
  }
  if (v27 || v36 || v41) {
    char v80 = 0.0;
  }
  int v87 = fabs(v57);
  int v88 = fabs(v82);
  if (v88 < v87) {
    int v87 = v88;
  }
  if (v80 >= v87)
  {
    uint64_t v57 = v49;
    __int128 v82 = v52;
  }

  if (v82 > 0.0 != v57 <= 0.0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1LL;
  }
}

      uint64_t v13 = 100LL;
    }

    else
    {
      sub_10091954C( (uint64_t)v141,  (unint64_t)v142,  126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v142 - (_BYTE *)v141) >> 3)),  1);
      unint64_t v14 = a2[1];
      unint64_t v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a2) >> 3));
      if (v14 == *a2) {
        int v16 = 0LL;
      }
      else {
        int v16 = v15;
      }
      sub_10091A320(*a2, v14, v16, 1);
      sub_100915DB0(v17, &v141, a2);
      int v18 = v141;
      uint64_t v19 = v142;
      if (v141 == v142)
      {
        uint64_t v13 = 100LL;
        if (!v141) {
          return v13;
        }
        goto LABEL_101;
      }

      while (1)
      {
        unint64_t v20 = v18[1];
        uint64_t v138 = *v18;
        int v139 = v20;
        int v140 = *((void *)v18 + 4);
        v135 = 0LL;
        int v136 = 0LL;
        int v137 = 0LL;
        int v21 = *((double *)&v138 + 1);
        unint64_t v22 = *(double *)&v20;
        double v23 = (*(uint64_t (**)(void, void **, double, double))(*(void *)a1[2] + 24LL))( a1[2],  &v135,  *((double *)&v138 + 1),  *(double *)&v20);
        if ((_DWORD)v23 == 100)
        {
          double v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v136 - (_BYTE *)v135) >> 5));
          uint64_t v27 = v136 == v135 ? 0LL : v26;
          sub_10091B0BC((uint64_t)v135, v136, v27, 1);
          int v28 = v22 + 0.2;
          int v132 = 0LL;
          int v133 = 0LL;
          uint64_t v134 = 0LL;
          if ((*(unsigned int (**)(void, void **, double, double))(*(void *)a1[4] + 16LL))( a1[4],  &v132,  v21 + 0.2,  v28) == 109)
          {
            uint64_t v29 = (os_log_s *)v11[215];
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t buf = 134349056;
              *(double *)int v177 = v21;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "BoutExtractor: Defering processing bout (%{public}.2f). Pedometer unavailable.",  buf,  0xCu);
            }

            if (sub_1002921D0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              char v80 = v11[215];
              LODWORD(__p.__r_.__value_.__l.__data_) = 134349056;
              *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v21;
              LODWORD(v101) = 12;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v80,  16LL,  "BoutExtractor: Defering processing bout (%{public}.2f). Pedometer unavailable.",  &__p,  v101);
              __int128 v82 = (uint8_t *)v81;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<Healt hKitWorkout>, std::vector<ProcessedBoutResult> &)",  "%s\n",  v81);
              if (v82 != buf) {
                free(v82);
              }
            }

            uint64_t v13 = 109LL;
            double v25 = 1;
          }

          else
          {
            uint64_t v30 = p_vtable;
            unint64_t v31 = v11;
            DWORD2(v139) = (*(uint64_t (**)(void, double, double))(*(void *)a1[4] + 24LL))( a1[4],  v21 + 0.2,  v28);
            unint64_t v32 = *((_DWORD *)a1 + 146);
            double v33 = *((_DWORD *)a1 + 142);
            uint64_t v34 = *((_DWORD *)a1 + 150);
            uint64_t v35 = v138;
            sub_1009160FC(a1, (uint64_t)&v138, &v135, (uint64_t *)&v132, (uint64_t)buf);
            unsigned int v102 = *(_DWORD *)buf;
            int v103 = *(_DWORD *)v177;
            unsigned int v106 = *(void *)&v177[4];
            int v108 = *(void *)&v177[12];
            int v104 = *(void *)v179;
            int v107 = v178;
            uint64_t v109 = *(_DWORD *)&v179[8];
            int v110 = v180;
            uint64_t v121 = BYTE8(v180);
            int v130 = *(_WORD *)((char *)&v180 + 9);
            int v131 = BYTE11(v180);
            int v111 = HIDWORD(v180);
            BOOL v36 = v181;
            uint64_t v37 = v182;
            uint64_t v105 = v183;
            double v38 = v184;
            int v112 = v185;
            unsigned int v113 = v186;
            int v114 = v187;
            int v128 = v189;
            uint64_t v129 = v190;
            int v127 = v188;
            int v115 = v191;
            int v116 = v192;
            unsigned int v117 = v193;
            v118 = v194;
            double v39 = v195;
            v126 = v198;
            uint64_t v125 = v197;
            __int128 v40 = v199;
            unsigned int v119 = v196;
            int v120 = v200;
            char v41 = (os_log_s *)v31[215];
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              sub_100CFC070(v121, &__p);
              if (v111) {
                int v42 = 42;
              }
              else {
                int v42 = -1;
              }
              unint64_t v43 = (v118 & v42) == 0;
              *(_DWORD *)uint64_t buf = 134353411;
              unint64_t v44 = (v117 & v42) == 0;
              *(void *)int v177 = v106;
              unint64_t v45 = (v116 & v42) == 0;
              *(_WORD *)&v177[8] = 2050;
              unint64_t v46 = (v115 & v42) == 0;
              *(void *)&v177[10] = v108;
              p_p = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_WORD *)&v177[18] = 1026;
              int v178 = v107;
              *(_WORD *)v179 = 2049;
              *(void *)&v179[2] = *((void *)&v38 + 1);
              *(_WORD *)&v179[10] = 1026;
              LODWORD(v180) = v46;
              WORD2(v180) = 2049;
              *(double *)((char *)&v180 + 6) = v112;
              HIWORD(v180) = 1026;
              LODWORD(v181) = v45;
              WORD2(v181) = 2049;
              *(void *)((char *)&v181 + 6) = v113;
              HIWORD(v181) = 1026;
              LODWORD(v182) = v44;
              WORD2(v182) = 2049;
              *(double *)((char *)&v182 + 6) = v114;
              HIWORD(v182) = 1026;
              LODWORD(v183) = v43;
              WORD2(v183) = 2050;
              *(void *)((char *)&v183 + 6) = v110;
              HIWORD(v183) = 1026;
              LODWORD(v184) = v109;
              WORD2(v184) = 2081;
              *(void *)((char *)&v184 + 6) = p_p;
              HIWORD(v184) = 2049;
              unsigned int v185 = v39;
              LOWORD(v186) = 1025;
              *(_DWORD *)((char *)&v186 + 2) = v119;
              HIWORD(v186) = 2049;
              int v187 = v40;
              LOWORD(v188) = 1025;
              *(_DWORD *)((char *)&v188 + 2) = v120;
              _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "CLMobility::BoutMetrics,startTime,%{public}.2f,endTime,%{public}.2f,stepCount,%{public}u,walkingSpeed,%{ private}.2f,walkingSpeedIsValid,%{public}d,doubleSupportPercentage,%{private}.1f,doubleSupportPercentage IsValid,%{public}d,stepLength,%{private}.2f,stepLengthIsValid,%{public}d,asymmetryProbabilityPercentage, %{private}.0f,asymmetryProbabilityPercentageIsValid,%{public}d,invalidGradePct,%{public}.2f,numGaitMetri cs,%{public}d,deviceSide,%{private}s,userHeight,%{private}.2f,isHeightSet,%{private}d,userWeight,%{priva te}.2f,isWeightSet,%{private}d",  buf,  0x96u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              char v83 = v31[215];
              sub_100CFC070(v121, &v122);
              if (v111) {
                unsigned int v84 = 42;
              }
              else {
                unsigned int v84 = -1;
              }
              int v85 = (v118 & v84) == 0;
              LODWORD(__p.__r_.__value_.__l.__data_) = 134353411;
              uint64_t v86 = (v117 & v84) == 0;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v106;
              int v87 = (v116 & v84) == 0;
              WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
              int v88 = (v115 & v84) == 0;
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v108;
              uint64_t v89 = &v122;
              if ((v122.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                uint64_t v89 = (std::string *)v122.__r_.__value_.__r.__words[0];
              }
              HIWORD(__p.__r_.__value_.__r.__words[2]) = 1026;
              int v145 = v107;
              int v146 = 2049;
              int v147 = *((void *)&v38 + 1);
              int v148 = 1026;
              unsigned int v149 = v88;
              int v150 = 2049;
              int v151 = v112;
              v152 = 1026;
              v153 = v87;
              v154 = 2049;
              int v155 = v113;
              int v156 = 1026;
              int v157 = v86;
              unsigned int v158 = 2049;
              int v159 = v114;
              int v160 = 1026;
              v161 = v85;
              v162 = 2050;
              v163 = v110;
              int v164 = 1026;
              int v165 = v109;
              int v166 = 2081;
              unsigned int v167 = v89;
              int v168 = 2049;
              int v169 = v39;
              v170 = 1025;
              v171 = v119;
              v172 = 2049;
              int v173 = v40;
              int v174 = 1025;
              int v175 = v120;
              LODWORD(v101) = 150;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v83,  2LL,  "CLMobility::BoutMetrics,startTime,%{public}.2f,endTime,%{public}.2f,stepCount,%{public}u,walkingSpeed,%{ private}.2f,walkingSpeedIsValid,%{public}d,doubleSupportPercentage,%{private}.1f,doubleSupportPercentage IsValid,%{public}d,stepLength,%{private}.2f,stepLengthIsValid,%{public}d,asymmetryProbabilityPercentage, %{private}.0f,asymmetryProbabilityPercentageIsValid,%{public}d,invalidGradePct,%{public}.2f,numGaitMetri cs,%{public}d,deviceSide,%{private}s,userHeight,%{private}.2f,isHeightSet,%{private}d,userWeight,%{priva te}.2f,isWeightSet,%{private}d",  &__p,  v101);
              __int128 v91 = v90;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<Healt hKitWorkout>, std::vector<ProcessedBoutResult> &)",  "%s\n",  v91);
            }

            __int128 v48 = (char *)a3[1];
            uint64_t v49 = (char *)a3[2];
            if (v48 >= v49)
            {
              uint64_t v54 = 0xEEEEEEEEEEEEEEEFLL * ((v48 - (_BYTE *)*a3) >> 4);
              uint64_t v55 = v54 + 1;
              if (v54 + 1 > 0x111111111111111LL) {
                sub_100007008();
              }
              uint64_t v56 = 0xEEEEEEEEEEEEEEEFLL * ((v49 - (_BYTE *)*a3) >> 4);
              if (2 * v56 > v55) {
                uint64_t v55 = 2 * v56;
              }
              if (v56 >= 0x88888888888888LL) {
                uint64_t v57 = 0x111111111111111LL;
              }
              else {
                uint64_t v57 = v55;
              }
              if (v57) {
                uint64_t v58 = (char *)sub_10001D66C((uint64_t)(a3 + 2), v57);
              }
              else {
                uint64_t v58 = 0LL;
              }
              unint64_t v59 = &v58[240 * v54];
              *(_DWORD *)unint64_t v59 = v35;
              *((_DWORD *)v59 + 1) = v32;
              *((_DWORD *)v59 + 2) = v33;
              *((_DWORD *)v59 + 3) = v34;
              *((_DWORD *)v59 + 4) = v102;
              *((_DWORD *)v59 + 5) = v103;
              *((void *)v59 + 3) = v106;
              *((void *)v59 + 4) = v108;
              *((_DWORD *)v59 + 10) = v107;
              *(void *)(v59 + 44) = v104;
              *((_DWORD *)v59 + 13) = v109;
              *((void *)v59 + 7) = v110;
              v59[64] = v121;
              *(_WORD *)(v59 + 65) = v130;
              v59[67] = v131;
              *((_DWORD *)v59 + 17) = v111;
              *(_OWORD *)(v59 + 72) = v36;
              *(_OWORD *)(v59 + 88) = v37;
              *(_OWORD *)(v59 + 104) = v105;
              *(_OWORD *)(v59 + 120) = v38;
              *((double *)v59 + 17) = v112;
              *((void *)v59 + 18) = v113;
              *((double *)v59 + 19) = v114;
              uint64_t v60 = v129;
              uint64_t v61 = v127;
              *((_OWORD *)v59 + 11) = v128;
              *((_OWORD *)v59 + 12) = v60;
              *((_OWORD *)v59 + 10) = v61;
              *((_DWORD *)v59 + 52) = v115;
              *((_DWORD *)v59 + 53) = v116;
              *((_DWORD *)v59 + 54) = v117;
              *((_DWORD *)v59 + 55) = v118;
              *((float *)v59 + 56) = v39;
              v59[228] = v119;
              v59[231] = v126;
              *(_WORD *)(v59 + 229) = v125;
              *((float *)v59 + 58) = v40;
              v59[236] = v120;
              uint64_t v62 = v123;
              v59[239] = v124;
              *(_WORD *)(v59 + 237) = v62;
              __int128 v64 = (char *)*a3;
              BOOL v63 = (char *)a3[1];
              unint64_t v65 = v59;
              int v11 = v31;
              if (v63 != *a3)
              {
                do
                {
                  uint64_t v66 = *((_OWORD *)v63 - 15);
                  unint64_t v67 = *((_OWORD *)v63 - 13);
                  *((_OWORD *)v65 - 14) = *((_OWORD *)v63 - 14);
                  *((_OWORD *)v65 - 13) = v67;
                  *((_OWORD *)v65 - 15) = v66;
                  __int128 v68 = *((_OWORD *)v63 - 12);
                  uint64_t v69 = *((_OWORD *)v63 - 11);
                  __int128 v70 = *((_OWORD *)v63 - 9);
                  *((_OWORD *)v65 - 10) = *((_OWORD *)v63 - 10);
                  *((_OWORD *)v65 - 9) = v70;
                  *((_OWORD *)v65 - 12) = v68;
                  *((_OWORD *)v65 - 11) = v69;
                  int v71 = *((_OWORD *)v63 - 8);
                  unint64_t v72 = *((_OWORD *)v63 - 7);
                  int v73 = *((_OWORD *)v63 - 5);
                  *((_OWORD *)v65 - 6) = *((_OWORD *)v63 - 6);
                  *((_OWORD *)v65 - 5) = v73;
                  *((_OWORD *)v65 - 8) = v71;
                  *((_OWORD *)v65 - 7) = v72;
                  int v74 = *((_OWORD *)v63 - 4);
                  __int128 v75 = *((_OWORD *)v63 - 3);
                  __int128 v76 = *((_OWORD *)v63 - 1);
                  *((_OWORD *)v65 - 2) = *((_OWORD *)v63 - 2);
                  *((_OWORD *)v65 - 1) = v76;
                  *((_OWORD *)v65 - 4) = v74;
                  *((_OWORD *)v65 - 3) = v75;
                  v65 -= 240;
                  v63 -= 240;
                }

                while (v63 != v64);
                BOOL v63 = (char *)*a3;
              }

              p_vtable = v30;
              uint64_t v53 = v59 + 240;
              *a3 = v65;
              a3[1] = v59 + 240;
              a3[2] = &v58[240 * v57];
              if (v63) {
                operator delete(v63);
              }
            }

            else
            {
              *(_DWORD *)__int128 v48 = v35;
              *((_DWORD *)v48 + 1) = v32;
              *((_DWORD *)v48 + 2) = v33;
              *((_DWORD *)v48 + 3) = v34;
              *((_DWORD *)v48 + 4) = v102;
              *((_DWORD *)v48 + 5) = v103;
              *((void *)v48 + 3) = v106;
              *((void *)v48 + 4) = v108;
              *((_DWORD *)v48 + 10) = v107;
              *(void *)(v48 + 44) = v104;
              *((_DWORD *)v48 + 13) = v109;
              *((void *)v48 + 7) = v110;
              v48[64] = v121;
              *(_WORD *)(v48 + 65) = v130;
              v48[67] = v131;
              *((_DWORD *)v48 + 17) = v111;
              *(_OWORD *)(v48 + 72) = v36;
              *(_OWORD *)(v48 + 88) = v37;
              *(_OWORD *)(v48 + 104) = v105;
              *(_OWORD *)(v48 + 120) = v38;
              *((double *)v48 + 17) = v112;
              *((void *)v48 + 18) = v113;
              *((double *)v48 + 19) = v114;
              int v50 = v129;
              uint64_t v51 = v127;
              *((_OWORD *)v48 + 11) = v128;
              *((_OWORD *)v48 + 12) = v50;
              *((_OWORD *)v48 + 10) = v51;
              *((_DWORD *)v48 + 52) = v115;
              *((_DWORD *)v48 + 53) = v116;
              *((_DWORD *)v48 + 54) = v117;
              *((_DWORD *)v48 + 55) = v118;
              *((float *)v48 + 56) = v39;
              v48[228] = v119;
              v48[231] = v126;
              *(_WORD *)(v48 + 229) = v125;
              *((float *)v48 + 58) = v40;
              v48[236] = v120;
              __int128 v52 = v123;
              v48[239] = v124;
              uint64_t v53 = v48 + 240;
              *(_WORD *)(v48 + 237) = v52;
              int v11 = v31;
              p_vtable = v30;
            }

            double v25 = 0;
            a3[1] = v53;
          }

          if (v132)
          {
            int v133 = v132;
            operator delete(v132);
          }
        }

        else if ((_DWORD)v23 == 109)
        {
          int v24 = (os_log_s *)v11[215];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "BoutExtractor: Defering bout processing. Gait Metrics unavailable, likely because device is locked.",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            __int128 v77 = v11[215];
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            LODWORD(v101) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v77,  2LL,  "BoutExtractor: Defering bout processing. Gait Metrics unavailable, likely because device is locked.",  &__p,  v101);
            __int128 v79 = (uint8_t *)v78;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthK itWorkout>, std::vector<ProcessedBoutResult> &)",  "%s\n",  v78);
            if (v79 != buf) {
              free(v79);
            }
          }

          uint64_t v13 = 109LL;
          double v25 = 1;
        }

        else
        {
          double v25 = 1;
          uint64_t v13 = v23;
        }

        if (v135)
        {
          int v136 = (char *)v135;
          operator delete(v135);
        }

        if (v25) {
          break;
        }
        int v18 = (_OWORD *)((char *)v18 + 40);
        if (v18 == v19) {
          goto LABEL_99;
        }
      }
    }
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_101860D10);
    }
    int v92 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_DEBUG,  "BoutExtractor: Deferring bout processing. Bouts unavailable.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_101860D10);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      LODWORD(v101) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346B8,  2LL,  "BoutExtractor: Deferring bout processing. Bouts unavailable.",  &__p,  v101);
      int v94 = (uint8_t *)v93;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWork out>, std::vector<ProcessedBoutResult> &)",  "%s\n",  v93);
      if (v94 != buf) {
        free(v94);
      }
    }
  }

  int v18 = v141;
  if (v141)
  {
LABEL_101:
    uint64_t v142 = v18;
    operator delete(v18);
  }

  return v13;
}

      sub_1009748B8(v7, (__int128 **)a2, 0, (__int128 **)a3);
      if (v68)
      {
        uint64_t v61 = a2[1];
        uint64_t v69 = *a2;
        __int128 v70 = (std::__shared_weak_count *)v61;
        if (v61)
        {
          uint64_t v62 = (unint64_t *)(v61 + 8);
          do
            BOOL v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }

        sub_100976580((uint64_t)&v69, (uint64_t)a3);
        __int128 v64 = v70;
        if (v70)
        {
          p_shared_owners = (unint64_t *)&v70->__shared_owners_;
          do
            uint64_t v66 = __ldaxr(p_shared_owners);
          while (__stlxr(v66 - 1, p_shared_owners));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }

      if (__p)
      {
        unint64_t v72 = (char *)__p;
        operator delete(__p);
      }

      unint64_t v14 = 1LL;
    }

    std::string __p = &v74;
    sub_10004CC28((void ***)&__p);
    int v74 = (void **)&v77;
    sub_10004CC28(&v74);
    goto LABEL_112;
  }

  if (a4)
  {
    unint64_t v8 = a2[1];
    char v80 = *a2;
    __int128 v81 = (std::__shared_weak_count *)v8;
    if (v8)
    {
      uint64_t v9 = (unint64_t *)(v8 + 8);
      do
        CFStringRef v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_100976580((uint64_t)&v80, (uint64_t)a3);
    int v11 = v81;
    if (v81)
    {
      int v12 = (unint64_t *)&v81->__shared_owners_;
      do
        uint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

  ++*(void *)(v7 + 320);
  unint64_t v14 = 1LL;
LABEL_112:
  if (HIBYTE(v84))
  {
    if ((_BYTE)v84)
    {
      pthread_mutex_unlock(v83);
      return v14;
    }

    uint64_t v7 = v82;
LABEL_116:
    (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  }

  return v14;
}

      sub_1009748B8(v7, (__int128 **)a2, 1u, (__int128 **)a3);
      if (v68)
      {
        uint64_t v61 = a2[1];
        uint64_t v69 = *a2;
        __int128 v70 = (std::__shared_weak_count *)v61;
        if (v61)
        {
          uint64_t v62 = (unint64_t *)(v61 + 8);
          do
            BOOL v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }

        sub_100976580((uint64_t)&v69, (uint64_t)a3);
        __int128 v64 = v70;
        if (v70)
        {
          p_shared_owners = (unint64_t *)&v70->__shared_owners_;
          do
            uint64_t v66 = __ldaxr(p_shared_owners);
          while (__stlxr(v66 - 1, p_shared_owners));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }

      if (__p)
      {
        unint64_t v72 = (char *)__p;
        operator delete(__p);
      }

      unint64_t v14 = 1LL;
    }

    std::string __p = &v74;
    sub_10004CC28((void ***)&__p);
    int v74 = (void **)&v77;
    sub_10004CC28(&v74);
    goto LABEL_112;
  }

  if (a4)
  {
    unint64_t v8 = a2[1];
    char v80 = *a2;
    __int128 v81 = (std::__shared_weak_count *)v8;
    if (v8)
    {
      uint64_t v9 = (unint64_t *)(v8 + 8);
      do
        CFStringRef v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_100976580((uint64_t)&v80, (uint64_t)a3);
    int v11 = v81;
    if (v81)
    {
      int v12 = (unint64_t *)&v81->__shared_owners_;
      do
        uint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

  ++*(void *)(v7 + 320);
  unint64_t v14 = 1LL;
LABEL_112:
  if (HIBYTE(v84))
  {
    if ((_BYTE)v84)
    {
      pthread_mutex_unlock(v83);
      return v14;
    }

    uint64_t v7 = v82;
LABEL_116:
    (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  }

  return v14;
}

      unint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_120;
      }
    }

    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    double v39 = (os_log_s *)qword_101934968;
    if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
    {
      __int128 v40 = *((_DWORD *)v1 + 165);
      char v41 = v1[80];
      int v42 = *((_DWORD *)v8 + 165);
      unint64_t v43 = v8[80];
      *(_DWORD *)uint64_t buf = 67241728;
      *(_DWORD *)&uint8_t buf[4] = v40;
      int v213 = 2050;
      int v214 = v200[0];
      v215 = 2050;
      v216 = v41;
      v217 = 1026;
      int v218 = v42;
      int v219 = 2050;
      int v220 = v188;
      unsigned int v221 = 2050;
      int v222 = v43;
      int v223 = 2050;
      v224 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "fused hypotheses are merged,hID,%{public}d,hunc,%{public}.1f,likelihood,%{public}.1f,hID,%{public}d,hunc,%{publi c}.1f,likelihood,%{public}.1f,squaredMD,%{public}.3f",  buf,  0x40u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v97 = *((_DWORD *)v1 + 165);
      v98 = v1[80];
      int v99 = *((_DWORD *)v8 + 165);
      int v100 = v8[80];
      *(_DWORD *)int v204 = 67241728;
      *(_DWORD *)&v204[4] = v97;
      *(_WORD *)&v204[8] = 2050;
      *(void *)&v204[10] = v200[0];
      *(_WORD *)&v204[18] = 2050;
      *(void *)&v204[20] = v98;
      *(_WORD *)&v204[28] = 1026;
      *(_DWORD *)&v204[30] = v99;
      *(_WORD *)&v204[34] = 2050;
      *(void *)&v204[36] = v188;
      *(_WORD *)&v204[44] = 2050;
      *(void *)&v204[46] = v100;
      *(_WORD *)&v204[54] = 2050;
      *(double *)&v205.__vftable = v38;
      LODWORD(v167) = 64;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "fused hypotheses are merged,hID,%{public}d,hunc,%{public}.1f,likelihood,%{public}.1f,hID,%{public}d,hunc,%{publi c}.1f,likelihood,%{public}.1f,squaredMD,%{public}.3f",  v204,  v167);
      unsigned int v102 = (uint8_t *)v101;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL cllcf::CLLCFusion::performHypothesesMerging()", "%s\n", v101);
      if (v102 != buf) {
        free(v102);
      }
    }

    unint64_t v44 = *(_BYTE **)(a1 + 2088);
    int v173 = (int64x2_t *)(v8 + 1);
    if (v44 && v44[1] && *v44)
    {
    }

    else if (*(double *)v200 >= *(double *)&v188)
    {
LABEL_122:
      unsigned int v106 = v1[6] + v1[5] - 1;
      int v107 = *(void *)(v1[2] + 8 * (v106 / 0x17));
      int v108 = v106 % 0x17;
      uint64_t v109 = v107 + 176 * v108;
      *(_OWORD *)int v204 = *(_OWORD *)v109;
      *(void *)&v204[16] = *(void *)(v109 + 16);
      int v110 = *(void *)(v109 + 24);
      *(void *)&v204[24] = v110;
      if (v110)
      {
        int v111 = (unint64_t *)(v110 + 16);
        do
          int v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }

      *(void *)&v204[32] = &off_1018920B8;
      unsigned int v113 = v107 + 176 * v108;
      int v114 = *(_OWORD *)(v113 + 40);
      int v115 = *(std::__shared_count *)(v113 + 56);
      int v116 = *(_OWORD *)(v113 + 88);
      v206 = *(_OWORD *)(v113 + 72);
      v207 = v116;
      *(_OWORD *)&v204[40] = v114;
      int v205 = v115;
      unsigned int v117 = *(std::__shared_count *)(v113 + 104);
      v118 = *(_OWORD *)(v113 + 120);
      unsigned int v119 = *(_OWORD *)(v113 + 136);
      *(_OWORD *)((char *)v210 + 12) = *(_OWORD *)(v113 + 148);
      int v209 = v118;
      v210[0] = v119;
      v208 = v117;
      int v211 = *(_WORD *)(v113 + 168);
      v179 = (std::__shared_weak_count *)operator new(0xA0uLL);
      v179->__shared_owners_ = 0LL;
      p_shared_owners = (unint64_t *)&v179->__shared_owners_;
      v179->__shared_weak_owners_ = 0LL;
      v179->__vftable = (std::__shared_weak_count_vtbl *)off_10186D518;
      v179[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1018920B8;
      uint64_t v121 = v179 + 1;
      unsigned int v122 = v209;
      v179[4].std::__shared_count = v208;
      *(_OWORD *)&v179[4].__shared_weak_owners_ = v122;
      *(_OWORD *)&v179[5].__shared_owners_ = v210[0];
      *(_OWORD *)((char *)&v179[5].__shared_weak_owners_ + 4) = *(_OWORD *)((char *)v210 + 12);
      int v123 = v205;
      *(_OWORD *)&v179[1].__shared_owners_ = *(_OWORD *)&v204[40];
      v179[2].std::__shared_count = v123;
      uint64_t v124 = v207;
      *(_OWORD *)&v179[2].__shared_weak_owners_ = v206;
      *(_OWORD *)&v179[3].__shared_owners_ = v124;
      uint64_t v125 = (int *)&v179[6].__shared_owners_;
      *(void *)uint64_t buf = (char *)v179 + 152;
      if (sub_100ABF1B8(v177, (int *)&v179[6].__shared_owners_, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5])
      {
        *(void *)uint64_t buf = (char *)v179 + 152;
        v126 = sub_100ABF1B8(v177, v125, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        *(void *)uint64_t buf = (char *)v179 + 152;
        int v127 = sub_100ABF1B8(v177, v125, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5];
        *(void *)uint64_t buf = (char *)v179 + 152;
        sub_100ABF1B8(v177, v125, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        int v128 = v126 + 5;
        if (v127)
        {
          uint64_t v129 = 0LL;
          int v130 = 2LL;
          do
          {
            int v131 = v130;
            ++v129;
            int v127 = (uint64_t *)*v127;
            ++v130;
          }

          while (v127);
          do
          {
            int v128 = (void *)*v128;
            --v131;
          }

          while (v131 > 1);
        }

        *(void *)uint64_t buf = (char *)v179 + 152;
        sub_100ABF1B8(v177, v125, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        int v132 = (void *)*v128;
        int v133 = operator new(0x18uLL);
        *int v133 = v132;
        v133[1] = v121;
        v133[2] = v179;
        do
          uint64_t v134 = __ldxr(p_shared_owners);
        while (__stxr(v134 + 1, p_shared_owners));
        *int v128 = v133;
      }

      else
      {
        *(void *)uint64_t buf = (char *)v179 + 152;
        v135 = sub_100ABF1B8(v177, v125, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
        int v136 = v135[5];
        int v137 = (uint64_t *)operator new(0x18uLL);
        *int v137 = (uint64_t)v136;
        v137[1] = (uint64_t)v121;
        v137[2] = (uint64_t)v179;
        do
          uint64_t v138 = __ldxr(p_shared_owners);
        while (__stxr(v138 + 1, p_shared_owners));
        v135[5] = v137;
      }

      p_shared_weak_owners = (unint64_t *)&v179->__shared_weak_owners_;
      do
        int v140 = __ldxr(p_shared_weak_owners);
      while (__stxr(v140 + 1, p_shared_weak_owners));
      int v141 = *(std::__shared_weak_count **)&v204[24];
      *(void *)&v204[16] = v179 + 1;
      *(void *)&v204[24] = v179;
      if (v141) {
        std::__shared_weak_count::__release_weak(v141);
      }
      LOBYTE(v211) = 0;
      sub_100E8C4F4(v173, (uint64_t)v204);
      sub_100E8D56C((uint64_t)v173);
      sub_100E900E8((uint64_t)v173, *((double *)v8 + 80) + *((double *)v1 + 80));
      sub_100E900E8((uint64_t)v175, 0.00000001);
      if (!sub_100AB6D04(a1))
      {
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        uint64_t v142 = (os_log_s *)qword_101934968;
        if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_ERROR,  "Normalize likelihood failed from hypothesis merging",  buf,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934960 != -1) {
            dispatch_once(&qword_101934960, &stru_10186D380);
          }
          v181[0] = 0;
          LODWORD(v167) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "Normalize likelihood failed from hypothesis merging",  v181,  v167);
          int v159 = (uint8_t *)v158;
          sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL cllcf::CLLCFusion::performHypothesesMerging()", "%s\n", v158);
          if (v159 != buf) {
            free(v159);
          }
        }
      }

      v143 = (void **)v1[2];
      unsigned int v144 = (void **)v1[3];
      if (v144 == v143)
      {
        unsigned int v144 = (void **)v1[2];
      }

      else
      {
        int v145 = v1[5];
        int v146 = &v143[v145 / 0x17];
        int v147 = (unint64_t)*v146;
        int v148 = (unint64_t)*v146 + 176 * (v145 % 0x17);
        unsigned int v149 = (unint64_t)v143[(v1[6] + v145) / 0x17] + 176 * ((v1[6] + v145) % 0x17);
        if (v148 != v149)
        {
          do
          {
            int v150 = *(std::__shared_weak_count **)(v148 + 24);
            if (v150)
            {
              std::__shared_weak_count::__release_weak(v150);
              int v147 = (unint64_t)*v146;
            }

            v148 += 176LL;
            if (v148 - v147 == 4048)
            {
              int v151 = (unint64_t)v146[1];
              ++v146;
              int v147 = v151;
              int v148 = v151;
            }
          }

          while (v148 != v149);
          v143 = (void **)v1[2];
          unsigned int v144 = (void **)v1[3];
        }
      }

      v1[6] = 0LL;
      v152 = (char *)v144 - (char *)v143;
      if ((unint64_t)((char *)v144 - (char *)v143) >= 0x11)
      {
        do
        {
          operator delete(*v143);
          v153 = v1[3];
          v143 = (void **)(v1[2] + 8);
          v1[2] = (uint64_t)v143;
          v152 = v153 - (void)v143;
        }

        while (v152 > 0x10);
      }

      if (v152 >> 3 == 1)
      {
        v154 = 11LL;
LABEL_162:
        v1[5] = v154;
      }

      else if (v152 >> 3 == 2)
      {
        v154 = 23LL;
        goto LABEL_162;
      }

      do
        int v155 = __ldaxr(p_shared_owners);
      while (__stlxr(v155 - 1, p_shared_owners));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }

      if (*(void *)&v204[24]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v204[24]);
      }
      goto LABEL_120;
    }

    unint64_t v45 = v8[6] + v8[5] - 1;
    unint64_t v46 = *(void *)(v8[2] + 8 * (v45 / 0x17));
    unint64_t v47 = v45 % 0x17;
    __int128 v48 = v46 + 176 * v47;
    *(_OWORD *)int v204 = *(_OWORD *)v48;
    *(void *)&v204[16] = *(void *)(v48 + 16);
    uint64_t v49 = *(void *)(v48 + 24);
    *(void *)&v204[24] = v49;
    if (v49)
    {
      int v50 = (unint64_t *)(v49 + 16);
      do
        uint64_t v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }

    *(void *)&v204[32] = &off_1018920B8;
    __int128 v52 = v46 + 176 * v47;
    uint64_t v53 = *(_OWORD *)(v52 + 40);
    uint64_t v54 = *(std::__shared_count *)(v52 + 56);
    uint64_t v55 = *(_OWORD *)(v52 + 88);
    v206 = *(_OWORD *)(v52 + 72);
    v207 = v55;
    *(_OWORD *)&v204[40] = v53;
    int v205 = v54;
    uint64_t v56 = *(std::__shared_count *)(v52 + 104);
    uint64_t v57 = *(_OWORD *)(v52 + 120);
    uint64_t v58 = *(_OWORD *)(v52 + 136);
    *(_OWORD *)((char *)v210 + 12) = *(_OWORD *)(v52 + 148);
    int v209 = v57;
    v210[0] = v58;
    v208 = v56;
    int v211 = *(_WORD *)(v52 + 168);
    unint64_t v59 = (std::__shared_weak_count *)operator new(0xA0uLL);
    v59->__shared_owners_ = 0LL;
    uint64_t v60 = (unint64_t *)&v59->__shared_owners_;
    v59->__shared_weak_owners_ = 0LL;
    v59->__vftable = (std::__shared_weak_count_vtbl *)off_10186D518;
    v59[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1018920B8;
    uint64_t v61 = v59 + 1;
    uint64_t v62 = v209;
    v59[4].std::__shared_count = v208;
    *(_OWORD *)&v59[4].__shared_weak_owners_ = v62;
    *(_OWORD *)&v59[5].__shared_owners_ = v210[0];
    *(_OWORD *)((char *)&v59[5].__shared_weak_owners_ + 4) = *(_OWORD *)((char *)v210 + 12);
    BOOL v63 = v205;
    *(_OWORD *)&v59[1].__shared_owners_ = *(_OWORD *)&v204[40];
    v59[2].std::__shared_count = v63;
    __int128 v64 = v207;
    *(_OWORD *)&v59[2].__shared_weak_owners_ = v206;
    *(_OWORD *)&v59[3].__shared_owners_ = v64;
    unint64_t v65 = (int *)&v59[6].__shared_owners_;
    *(void *)uint64_t buf = (char *)v59 + 152;
    if (sub_100ABF1B8(v177, (int *)&v59[6].__shared_owners_, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5])
    {
      *(void *)uint64_t buf = (char *)v59 + 152;
      uint64_t v66 = sub_100ABF1B8(v177, v65, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
      *(void *)uint64_t buf = (char *)v59 + 152;
      unint64_t v67 = sub_100ABF1B8(v177, v65, (uint64_t)&unk_1012CF090, (_DWORD **)buf)[5];
      *(void *)uint64_t buf = (char *)v59 + 152;
      sub_100ABF1B8(v177, v65, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
      __int128 v68 = v66 + 5;
      if (v67)
      {
        uint64_t v69 = 0LL;
        __int128 v70 = 2LL;
        do
        {
          int v71 = v70;
          ++v69;
          unint64_t v67 = (uint64_t *)*v67;
          ++v70;
        }

        while (v67);
        do
        {
          __int128 v68 = (void *)*v68;
          --v71;
        }

        while (v71 > 1);
      }

      *(void *)uint64_t buf = (char *)v59 + 152;
      sub_100ABF1B8(v177, v65, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
      unint64_t v72 = (void *)*v68;
      int v73 = operator new(0x18uLL);
      char *v73 = v72;
      v73[1] = v61;
      void v73[2] = v59;
      do
        int v74 = __ldxr(v60);
      while (__stxr(v74 + 1, v60));
      void *v68 = v73;
    }

    else
    {
      *(void *)uint64_t buf = (char *)v59 + 152;
      __int128 v75 = sub_100ABF1B8(v177, v65, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
      __int128 v76 = v75[5];
      __int128 v77 = (uint64_t *)operator new(0x18uLL);
      *__int128 v77 = (uint64_t)v76;
      v77[1] = (uint64_t)v61;
      v77[2] = (uint64_t)v59;
      do
        int v78 = __ldxr(v60);
      while (__stxr(v78 + 1, v60));
      v75[5] = v77;
    }

    __int128 v79 = (unint64_t *)&v59->__shared_weak_owners_;
    do
      char v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
    __int128 v81 = *(std::__shared_weak_count **)&v204[24];
    *(void *)&v204[16] = v59 + 1;
    *(void *)&v204[24] = v59;
    if (v81) {
      std::__shared_weak_count::__release_weak(v81);
    }
    LOBYTE(v211) = 0;
    sub_100E8C4F4(v175, (uint64_t)v204);
    sub_100E8D56C((uint64_t)v175);
    sub_100E900E8((uint64_t)v175, *((double *)v8 + 80) + *((double *)v1 + 80));
    sub_100E900E8((uint64_t)v173, 0.00000001);
    if (!sub_100AB6D04(a1))
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      __int128 v82 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_ERROR,  "Normalize likelihood failed from hypothesis merging",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934960 != -1) {
          dispatch_once(&qword_101934960, &stru_10186D380);
        }
        v181[0] = 0;
        LODWORD(v167) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  16LL,  "Normalize likelihood failed from hypothesis merging",  v181,  v167);
        int v104 = (uint8_t *)v103;
        sub_10029211C("Generic", 1LL, 0, 0LL, "BOOL cllcf::CLLCFusion::performHypothesesMerging()", "%s\n", v103);
        if (v104 != buf) {
          free(v104);
        }
      }
    }

    char v83 = (void **)v8[2];
    unsigned int v84 = (void **)v8[3];
    if (v84 == v83)
    {
      unsigned int v84 = (void **)v8[2];
    }

    else
    {
      int v85 = v8[5];
      uint64_t v86 = &v83[v85 / 0x17];
      int v87 = (unint64_t)*v86;
      int v88 = (unint64_t)*v86 + 176 * (v85 % 0x17);
      uint64_t v89 = (unint64_t)v83[(v8[6] + v85) / 0x17] + 176 * ((v8[6] + v85) % 0x17);
      if (v88 != v89)
      {
        do
        {
          __int128 v90 = *(std::__shared_weak_count **)(v88 + 24);
          if (v90)
          {
            std::__shared_weak_count::__release_weak(v90);
            int v87 = (unint64_t)*v86;
          }

          v88 += 176LL;
          if (v88 - v87 == 4048)
          {
            __int128 v91 = (unint64_t)v86[1];
            ++v86;
            int v87 = v91;
            int v88 = v91;
          }
        }

        while (v88 != v89);
        char v83 = (void **)v8[2];
        unsigned int v84 = (void **)v8[3];
      }
    }

    v8[6] = 0LL;
    int v92 = (char *)v84 - (char *)v83;
    if ((unint64_t)((char *)v84 - (char *)v83) >= 0x11)
    {
      do
      {
        operator delete(*v83);
        unsigned int v93 = v8[3];
        char v83 = (void **)(v8[2] + 8);
        v8[2] = (uint64_t)v83;
        int v92 = v93 - (void)v83;
      }

      while (v92 > 0x10);
    }

    if (v92 >> 3 == 1)
    {
      int v94 = 11LL;
    }

    else
    {
      if (v92 >> 3 != 2)
      {
        do
LABEL_94:
          int v95 = __ldaxr(v60);
        while (__stlxr(v95 - 1, v60));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }

        if (*(void *)&v204[24]) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v204[24]);
        }
        goto LABEL_99;
      }

      int v94 = 23LL;
    }

    v8[5] = v94;
    goto LABEL_94;
  }

        dispatch_once(&qword_101934680, &stru_101873818);
        goto LABEL_85;
      }

      if (qword_101934680 != -1) {
        dispatch_once(&qword_101934680, &stru_101873818);
      }
      double v33 = (os_log_s *)qword_101934688;
      if (os_log_type_enabled((os_log_t)qword_101934688, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v34 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t buf = 134349312;
        uint64_t v61 = a3;
        uint64_t v62 = 2050;
        *(void *)BOOL v63 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "Background Stairs Escalation Manager, deescalated due to no confirmed flight, timestamp : %{public}f, escalati onOnsetTime : %{public}f",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934680 != -1) {
          dispatch_once(&qword_101934680, &stru_101873818);
        }
        uint64_t v51 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t v54 = 134349312;
        *(double *)&v54[4] = a3;
        *(_WORD *)&v54[12] = 2050;
        *(void *)&v54[14] = v51;
        __int128 v52 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934688,  2LL,  "Background Stairs Escalation Manager, deescalated due to no confirmed flight, timestamp : %{publ ic}f, escalationOnsetTime : %{public}f",  v54,  22);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLBackgroundEscalationManager::handleStairsEscalation(CFAbsoluteTime, BOOL)",  "%s\n",  v52);
      }

      unint64_t v31 = a1;
      unint64_t v32 = 4LL;
    }

    sub_100B68658(v31, v32);
    return;
  }

  if (sub_1007098B4(*(void *)(a1 + 104)) <= 0.0) {
    int v11 = 7LL;
  }
  else {
    int v11 = 6LL;
  }
  sub_100B68658(a1, v11);
  int v12 = *(void *)(a1 + 208);
  if (v12)
  {
    buf[0] = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v12 + 48LL))(v12, buf);
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x35,  *(_DWORD *)(v5 + 204),  (int)a2,  a4);
  uint64_t v6 = *(_DWORD *)(v5 + 224);
  if ((v6 & 0x10000000) != 0) {
    goto LABEL_100;
  }
LABEL_30:
  if ((v6 & 0x20000000) == 0) {
    return result;
  }
LABEL_101:
  uint64_t v27 = *(void *)(v5 + 208);
  if (!v27) {
    uint64_t v27 = *(void *)(qword_1019A1D48 + 208);
  }
  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x37,  v27,  a2,  a4);
}

        int v78 = 0;
        goto LABEL_110;
      }

      uint64_t v55 = *v53;
      uint64_t v56 = v53[1];
      *(void *)uint64_t buf = 0LL;
      *(void *)&uint8_t buf[8] = 0LL;
      *(void *)&v161 = 0LL;
      sub_100D2DA44( v46,  (double *)buf,  (double *)&buf[8],  (double *)&v161,  *(double *)&v126,  *((double *)&v126 + 1),  0.0,  v55,  v56,  0.0);
      uint64_t v57 = 0LL;
      uint64_t v58 = (v54 >> 4) - 1LL;
      unint64_t v59 = 0.0;
      uint64_t v60 = -1.0;
      uint64_t v61 = 0.0;
      do
      {
        uint64_t v62 = *(void *)(v52 + 136) + v57;
        BOOL v63 = *(double *)(v62 + 16);
        __int128 v64 = *(double *)(v62 + 24);
        v161 = 0uLL;
        int v128 = 0LL;
        sub_100D2DA44( v46,  (double *)&v161,  (double *)&v161 + 1,  (double *)&v128,  *(double *)&v126,  *((double *)&v126 + 1),  0.0,  v63,  v64,  0.0);
        uint64_t v66 = 0.0 - *(double *)buf;
        if (v65 < 0.001)
        {
          unint64_t v67 = v66 * v66;
          __int128 v68 = 0.0;
          uint64_t v69 = 0.0 - *(double *)&buf[8];
LABEL_77:
          __int128 v70 = v67 + v69 * v69;
          goto LABEL_82;
        }

        __int128 v68 = ((0.0 - *(double *)&buf[8]) * (*((double *)&v161 + 1) - *(double *)&buf[8])
        if (v68 >= 0.0)
        {
          if (v68 <= 1.0)
          {
            uint64_t v69 = 0.0 - (*(double *)&buf[8] + (*((double *)&v161 + 1) - *(double *)&buf[8]) * v68);
            goto LABEL_77;
          }

          __int128 v68 = 1.0;
        }

        else
        {
          __int128 v70 = v66 * v66 + (0.0 - *(double *)&buf[8]) * (0.0 - *(double *)&buf[8]);
          __int128 v68 = 0.0;
        }

        if (++v66 < v65[18]) {
          continue;
        }
        break;
      }

      if (!v67) {
        goto LABEL_118;
      }
      ++v146;
      v153 = v153 / (double)v67;
      int v73 = (v67 + v49);
      if (*(_BYTE *)(a1 + 96))
      {
        if (qword_1019348B0 != -1) {
          dispatch_once(&qword_1019348B0, &stru_1018819B8);
        }
        int v74 = (os_log_s *)qword_1019348B8;
        if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
        {
          __int128 v75 = *(void *)(a1 + 1136);
          __int128 v76 = *((void *)v40 + 4);
          *(_DWORD *)uint64_t buf = 134349825;
          unsigned int v176 = v75;
          int v177 = 2049;
          int v178 = v76;
          v179 = 1026;
          v180 = v49;
          v181 = 1026;
          int v182 = v67;
          _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "CLMM,Time,%{public}.1lf,combinedBest,roadID,%{private}llu,incomingCount,%{public}d,outgoingCount,%{public}d",  buf,  0x22u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          int v94 = *(void *)(a1 + 1136);
          int v95 = *((void *)v40 + 4);
          v163 = 134349825;
          int v164 = v94;
          int v165 = 2049;
          int v166 = v95;
          unsigned int v167 = 1026;
          int v168 = v49;
          int v169 = 1026;
          v170 = v67;
          LODWORD(v144) = 34;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,Time,%{public}.1lf,combinedBest,roadID,%{private}llu,incomingCount,%{public}d,outgoingCount,%{public}d",  &v163,  v144);
          uint64_t v97 = (uint8_t *)v96;
          sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v96);
          if (v97 != buf) {
            free(v97);
          }
        }
      }

      __int128 v77 = *(_OWORD *)&v172[32];
      *((_OWORD *)v40 + 20) = *(_OWORD *)&v172[16];
      *((_OWORD *)v40 + 21) = v77;
      int v78 = *(_OWORD *)&v172[64];
      *((_OWORD *)v40 + 22) = *(_OWORD *)&v172[48];
      *((_OWORD *)v40 + 23) = v78;
      __int128 v79 = *(_OWORD *)&v171[16];
      *((_OWORD *)v40 + 16) = *(_OWORD *)v171;
      *((_OWORD *)v40 + 17) = v79;
      char v80 = *(_OWORD *)v172;
      *((_OWORD *)v40 + 18) = *(_OWORD *)&v171[32];
      *((_OWORD *)v40 + 19) = v80;
      std::string::operator=((std::string *)v40 + 16, (const std::string *)&v172[80]);
      memcpy(v40 + 102, v174, 0x118uLL);
      v40[53] = v67;
      v40[54] = v73;
      *((double *)v40 + 31) = v68 / (double)v67;
      *((void *)v40 + 140) = v55[5];
      __int128 v81 = (std::__shared_weak_count *)*((void *)v65 + 8);
      int v151 = (__n128 *)*((void *)v65 + 7);
      v152 = v81;
      if (v81)
      {
        __int128 v82 = (unint64_t *)&v81->__shared_owners_;
        do
          char v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }

      unsigned int v84 = sub_100BDA310((__n128 *)v40 + 14, &v151, *((_BYTE *)v65 + 48));
      int v85 = v152;
      if (v152)
      {
        uint64_t v86 = (unint64_t *)&v152->__shared_owners_;
        do
          int v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v85->__on_zero_shared)(v85, v84);
          std::__shared_weak_count::__release_weak(v85);
        }
      }

      int v88 = *(_OWORD *)(a1 + 1128);
      uint64_t v89 = *(_OWORD *)(a1 + 1144);
      __int128 v90 = *(_OWORD *)(a1 + 1176);
      *((_OWORD *)v40 + 45) = *(_OWORD *)(a1 + 1160);
      *((_OWORD *)v40 + 46) = v90;
      char *v145 = v88;
      *((_OWORD *)v40 + 44) = v89;
      __int128 v91 = *(_OWORD *)(a1 + 1192);
      int v92 = *(_OWORD *)(a1 + 1208);
      unsigned int v93 = *(_OWORD *)(a1 + 1240);
      *((_OWORD *)v40 + 49) = *(_OWORD *)(a1 + 1224);
      *((_OWORD *)v40 + 50) = v93;
      *((_OWORD *)v40 + 47) = v91;
      *((_OWORD *)v40 + 48) = v92;
      std::string::operator=((std::string *)v40 + 34, (const std::string *)(a1 + 1256));
      memcpy(v40 + 210, (const void *)(a1 + 1280), 0x118uLL);
      if (!sub_100D3F3A8(v161, (uint64_t)v145, (double **)v65 + 7, *((_BYTE *)v65 + 48), &v153, 1))
      {
        if (*(_BYTE *)(a1 + 96))
        {
          if (qword_1019348B0 != -1) {
            dispatch_once(&qword_1019348B0, &stru_1018819B8);
          }
          unsigned int v113 = (os_log_s *)qword_1019348B8;
          if (os_log_type_enabled((os_log_t)qword_1019348B8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_DEBUG,  "CLMM,interpolateOnRoad returned false, determining outgoing road position",  buf,  2u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019348B0 != -1) {
              dispatch_once(&qword_1019348B0, &stru_1018819B8);
            }
            LOWORD(v163) = 0;
            LODWORD(v144) = 2;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348B8,  2LL,  "CLMM,interpolateOnRoad returned false, determining outgoing road position",  &v163,  v144);
            int v132 = (uint8_t *)v131;
            sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v131);
            if (v132 != buf) {
              free(v132);
            }
          }
        }

        ++*(_DWORD *)(a1 + 104);
        goto LABEL_133;
      }

  uint64_t result = *(float *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 108) = result;
  if ((*(void *)(a2 + 216) & 8) != 0) {
    goto LABEL_100;
  }
  return result;
}

  uint64_t result = *(float *)(a2 + 236);
  v5 |= 0x1000000000000uLL;
  void *v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(float *)(a1 + 236) = result;
  uint64_t v7 = *v3;
  uint64_t v4 = *(_BYTE *)(a2 + 324);
  if ((*v3 & 0x1000000000000000LL) == 0)
  {
LABEL_34:
    if ((v7 & 0x10000000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_101;
  }

  PB::TextFormatter::format(this, "hgArclengthXYZOverEpoch", *(float *)(a1 + 168));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x100000000LL) == 0)
  {
LABEL_33:
    if ((v6 & 0x200000000LL) == 0) {
      goto LABEL_34;
    }
    goto LABEL_101;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 236), 0x1Du);
  uint64_t v6 = *v4;
  uint64_t v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x1000000000000000LL) == 0)
  {
LABEL_34:
    if ((v6 & 0x10000000000000LL) == 0) {
      goto LABEL_35;
    }
    goto LABEL_101;
  }

  uint64_t result = *(float *)(a2 + 108);
  v5 |= 0x1000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 108) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_101;
  }

  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold2", *(float *)(a1 + 92));
  uint64_t v6 = *v5;
  uint64_t v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_101;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 224), 0x14u);
  uint64_t v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_101;
  }

  uint64_t result = *(float *)(a2 + 108);
  v5 |= 0x1000000uLL;
  void *v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 108) = result;
  LODWORD(v8) = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_101;
  }

  PB::TextFormatter::format(this, "kAudioDvChaosThresholdMinRO", *(float *)(a1 + 48));
  uint64_t v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v6 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_101;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x6Fu);
  uint64_t v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_101;
  }

  double v23 = *(_BYTE *)(a2 + 197);
  int v24 = v4 >> 16;
  v4 |= 0x400uLL;
  *(void *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = v24;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 197) = v23;
  uint64_t v5 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x400) == 0)
  {
LABEL_21:
    if ((v2 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_101;
  }

  PB::TextFormatter::format(this, "energyMet1", *(_BYTE *)(a1 + 170));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((v5 & 0x1000000000000LL) == 0)
  {
LABEL_20:
    if ((v5 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_101;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x74u);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x2000000000000000LL) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000000000LL) == 0) {
      goto LABEL_22;
    }
    goto LABEL_101;
  }

  int v50 = *(_DWORD *)(a2 + 172);
  v3 |= 0x10000000000uLL;
  *(void *)(result + 188) = v3;
  *(_DWORD *)(result + 172) = v50;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_52:
    if ((v2 & 0x800000000000LL) == 0) {
      goto LABEL_53;
    }
    goto LABEL_101;
  }

  PB::TextFormatter::format(this, "verticalTranslationSimilarityThreshold", *(float *)(a1 + 168));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x10000000000LL) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000000000LL) == 0) {
      goto LABEL_50;
    }
LABEL_101:
    PB::TextFormatter::format(this, "yawRateSimilarity200ms", *(float *)(a1 + 176));
    if ((*(void *)(a1 + 188) & 0x2000000000000LL) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_51;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0x30u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800000000000LL) == 0)
  {
LABEL_50:
    if ((v4 & 0x2000000000000LL) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 187), 0x32u);
  }

    *(_BYTE *)(a1 + 208) = *(_BYTE *)(v52 + 40);
    unint64_t v59 = *(unsigned __int8 *)(v1 + 137);
    uint64_t v60 = *(unsigned __int8 *)(v1 + 41);
    if (v59 >= v60) {
      uint64_t v61 = v1 + 96;
    }
    else {
      uint64_t v61 = v1;
    }
    if (v8 != v2)
    {
      if (v59 >= v60) {
        uint64_t v62 = v1;
      }
      else {
        uint64_t v62 = v1 + 96;
      }
      BOOL v63 = v1 + 192;
      while (v63 + 96 != v2)
      {
        __int128 v64 = *(unsigned __int8 *)(v63 + 137);
        unint64_t v65 = *(unsigned __int8 *)(v63 + 41);
        uint64_t v66 = *(unsigned __int8 *)(v62 + 41);
        if (v64 >= v65)
        {
          if (v65 < v66) {
            uint64_t v62 = v63;
          }
        }

        else
        {
          if (v64 < v66) {
            uint64_t v62 = v63 + 96;
          }
          uint64_t v61 = v63;
        }

        v63 += 192LL;
        if (v63 == v2) {
          goto LABEL_121;
        }
      }

      unint64_t v67 = *(unsigned __int8 *)(v63 + 41);
    }

void sub_100098624( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44)
{
  unint64_t v46 = *(void **)(v44 - 136);
  if (v46 == (void *)(v44 - 160))
  {
    uint64_t v47 = 4LL;
    unint64_t v46 = (void *)(v44 - 160);
  }

  else
  {
    if (!v46) {
      goto LABEL_6;
    }
    uint64_t v47 = 5LL;
  }

  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_6:
  sub_1002A5554(&a16);
  sub_100008390((uint64_t)&a18, a19);
  sub_100019CEC((uint64_t)&a21);
  sub_100019CEC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_100098750(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = a1 + 29;
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v23 = a1[29];
  uint64_t v22 = a1[30];
  if (v5)
  {
    uint64_t v6 = a1 + 32;
    uint64_t v7 = a1[30];
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v5 + 2;
      CFStringRef v10 = sub_10001A7B8(v6, v5 + 2);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CB88);
      }
      int v11 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = operator new(0x28uLL);
        std::string __p = v12;
        __int128 v26 = xmmword_1012C8460;
        *int v12 = 0u;
        v12[1] = 0u;
        *(void *)((char *)v12 + 29) = 0LL;
        sub_10000AE6C((uint64_t)(v5 + 2), v12);
        p_p = &__p;
        if (v26 < 0) {
          p_p = __p;
        }
        uint64_t v14 = (v10[5] - v10[4]) >> 4;
        *(_DWORD *)uint64_t buf = 68289794;
        int v28 = 0;
        __int16 v29 = 2082;
        uint64_t v30 = "";
        __int16 v31 = 2082;
        unint64_t v32 = (unint64_t)p_p;
        __int16 v33 = 2050;
        uint64_t v34 = v14;
        __int16 v35 = 2050;
        unint64_t v36 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:pruneSmallClusters, cluster ID:%{public, location:escape_only}s, cluster size :%{public}lu, threshold:%{public}lu}",  buf,  0x30u);
        if (SHIBYTE(v26) < 0) {
          operator delete(__p);
        }
      }

      if (a3 <= (v10[5] - v10[4]) >> 4 || (sub_10009B818(v6, v10), uint64_t v7 = *v4, *v4 == v8))
      {
LABEL_18:
        uint64_t v7 = v8;
      }

      else
      {
        uint64_t v15 = v7 + 48;
        while (1)
        {
          BOOL v16 = *(void *)(v7 + 16) == *v9 && *(void *)(v7 + 24) == v5[3];
          uint64_t v17 = v7 + 32;
          if (v16) {
            break;
          }
          v15 += 32LL;
          v7 += 32LL;
          if (v17 == v8) {
            goto LABEL_18;
          }
        }

        while (v17 != v8)
        {
          if (*(void *)v15 != *v9 || *(void *)(v15 + 8) != v5[3])
          {
            sub_10005F550(v7, (__int128 *)(v15 - 16));
            *(_OWORD *)(v7 + 16) = *(_OWORD *)v15;
            v7 += 32LL;
          }

          uint64_t v17 = v15 + 16;
          v15 += 32LL;
        }
      }

      uint64_t v5 = (void *)*v5;
    }

    while (v5);
    uint64_t v19 = (__int128 *)a1[30];
  }

  else
  {
    uint64_t v7 = a1[30];
    uint64_t v19 = (__int128 *)v7;
  }

  sub_100098AB0((uint64_t)v4, v7, v19);
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CB88);
  }
  unint64_t v20 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = (a1[30] - a1[29]) >> 5;
    *(_DWORD *)uint64_t buf = 68289794;
    int v28 = 0;
    __int16 v29 = 2082;
    uint64_t v30 = "";
    __int16 v31 = 2050;
    unint64_t v32 = a3;
    __int16 v33 = 2050;
    uint64_t v34 = (v22 - v23) >> 5;
    __int16 v35 = 2050;
    unint64_t v36 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:pruneSmallClusters, clusterSizeThreshold:%{public}lu, numFingerprintsPrePruning:% {public}lu, numFingerprintsPostPruning:%{public}lu}",  buf,  0x30u);
  }

void sub_100098A94(_Unwind_Exception *a1)
{
}

uint64_t sub_100098AB0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  if ((__int128 *)a2 != a3)
  {
    sub_10009BD28(a3, *(__int128 **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
        uint64_t v7 = sub_10000AE14(v7 - 32);
      while (v7 != v6);
    }

    *(void *)(a1 + 8) = v6;
  }

  return a2;
}

uint64_t sub_100098B1C(uint64_t *a1)
{
  CFStringRef v2 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsClusterSizeThreshold", 0x8000100u, kCFAllocatorNull);
  int v3 = sub_1002A77CC(v10, (uint64_t)v2, &v12);
  CFRelease(v2);
  unint64_t v4 = v12;
  uint64_t v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  if (v3) {
    unint64_t v8 = v4;
  }
  else {
    unint64_t v8 = 5LL;
  }
  sub_10009773C(a1, (uint64_t)&v10);
  sub_100098750(a1, (uint64_t)&v10, v8);
  return sub_100019CEC((uint64_t)&v10);
}

void sub_100098C04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100098C2C(uint64_t *a1, uint64_t a2, int a3, void *a4)
{
  if (sub_100097CA8((uint64_t)a1))
  {
    sub_1002F0B04(buf);
    CFStringRef v8 = CFStringCreateWithCStringNoCopy(0LL, "MicroLocationsClusterSizeRatio", 0x8000100u, kCFAllocatorNull);
    int v9 = sub_1002A832C(*(uint64_t *)buf, (uint64_t)v8, v25);
    CFRelease(v8);
    double v10 = *(double *)v25;
    int v11 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

    if (!v9) {
      double v10 = 0.2;
    }
    uint64_t v14 = (void *)a1[34];
    uint64_t v15 = (void *)*v14;
    if (*v14)
    {
      do
      {
        if (v14[5] - v14[4] < v15[5] - v15[4]) {
          uint64_t v14 = v15;
        }
        uint64_t v15 = (void *)*v15;
      }

      while (v15);
    }

    uint64_t v17 = v14[4];
    uint64_t v16 = v14[5];
    sub_100098B1C(a1);
    if (sub_100097CA8((uint64_t)a1))
    {
      sub_10009773C(a1, (uint64_t)buf);
      double v18 = v10 * (double)(unint64_t)((v16 - v17) >> 4);
      unint64_t v19 = (unint64_t)v18;
      if (a3) {
        sub_100098750(a1, (uint64_t)buf, (unint64_t)v18);
      }
      if (*(_BYTE *)(a2 + 8))
      {
        unint64_t v20 = *(void **)a2;
        if (sub_100097CA8((uint64_t)v20))
        {
          sub_100097FD0((uint64_t)a1, v20, a4);
          sub_10009773C(a1, (uint64_t)v25);
          uint64_t v21 = v28;
          if (v28)
          {
            do
            {
              uint64_t v22 = *v21;
              if (!sub_10001A7B8(v25, v21 + 2)) {
                sub_10005BE78(buf, v21);
              }
              uint64_t v21 = (uint64_t *)v22;
            }

            while (v22);
          }

          sub_100019CEC((uint64_t)v25);
        }
      }

      if ((a3 & 1) == 0) {
        sub_100098750(a1, (uint64_t)buf, v19);
      }
      sub_100019CEC((uint64_t)buf);
    }

    else
    {
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CB88);
      }
      uint64_t v23 = (os_log_s *)qword_1019348D8;
      if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Model has become invalid after pruning clusters with absolute size threshold",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CB88);
        }
        LOWORD(v25[0]) = 0;
        int v24 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019348D8,  0LL,  "Model has become invalid after pruning clusters with absolute size threshold",  v25,  2);
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMicroLocationModel::mapIdentifiersFromOldModelAndPruneNoiseClusters(const std::optional<std::reference_ wrapper<CLMicroLocationModel>> &, const BOOL, NSMutableDictionary *)",  "%s\n",  v24);
      }
    }
  }

void sub_100098F80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100098FC8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v6 = (char *)a1[35];
  sub_10009773C(a1, (uint64_t)v37);
  v36[0] = 0LL;
  v36[1] = 0LL;
  uint64_t v34 = 0LL;
  __int16 v35 = (uint64_t *)v36;
  for (uint64_t i = v38; i; uint64_t i = (uint64_t *)*i)
  {
    *(_OWORD *)std::string __p = *((_OWORD *)i + 1);
    sub_10009BD90(&v35, (unint64_t *)__p, __p, &v34);
    ++v34;
  }

  a3[1] = 0LL;
  CFStringRef v8 = (uint64_t *)(a3 + 1);
  a3[2] = 0LL;
  a3[3] = 0LL;
  __p[1] = 0LL;
  char v41 = 0LL;
  uint64_t v42 = 0LL;
  *a3 = v6;
  double v39 = 0LL;
  sub_10009BEEC((uint64_t)(a3 + 1), (unint64_t)&v6[(void)v6 * (void)v6] >> 1, &v39);
  __p[0] = v6;
  LODWORD(v39) = 0;
  sub_10009C02C((uint64_t)&__p[1], (unint64_t)&v6[(void)v6 * (void)v6] >> 1, &v39);
  uint64_t v10 = a1[29];
  uint64_t v9 = a1[30];
  if (v9 != v10)
  {
    uint64_t v11 = 0LL;
    unint64_t v12 = 0LL;
    do
    {
      if (v12 >= (v9 - v10) >> 5)
      {
        unint64_t v21 = (v9 - v10) >> 5;
      }

      else
      {
        uint64_t v33 = v11;
        unint64_t v13 = v12;
        do
        {
          uint64_t v14 = *(void *)(a2 + 24);
          if (!v14) {
            sub_100008BDC();
          }
          double v15 = (*(double (**)(uint64_t, void, void))(*(void *)v14 + 48LL))( v14,  *(void *)(v10 + 32 * v12),  *(void *)(v10 + v11));
          double v39 = (unint64_t *)(v10 + 32 * v12 + 16);
          unint64_t v16 = *((void *)sub_10009C16C(&v35, v39, (uint64_t)&unk_1012CF090, (_OWORD **)&v39) + 6);
          double v39 = (unint64_t *)(v10 + v11 + 16);
          uint64_t v17 = sub_10009C16C(&v35, v39, (uint64_t)&unk_1012CF090, (_OWORD **)&v39);
          unint64_t v18 = *((void *)v17 + 6);
          if (v16 <= v18) {
            unint64_t v19 = *((void *)v17 + 6);
          }
          else {
            unint64_t v19 = v16;
          }
          if (v16 < v18) {
            unint64_t v18 = v16;
          }
          unint64_t v20 = v18 + ((v19 + v19 * v19) >> 1);
          *(double *)(*v8 + 8 * v20) = v15 + *(double *)(*v8 + 8 * v20);
          ++*((_DWORD *)__p[1] + v20);
          ++v13;
          uint64_t v10 = a1[29];
          uint64_t v9 = a1[30];
          v11 += 32LL;
        }

        while (v13 < (v9 - v10) >> 5);
        unint64_t v21 = (v9 - v10) >> 5;
        uint64_t v11 = v33;
      }

      ++v12;
      v11 += 32LL;
    }

    while (v12 < v21);
  }

  uint64_t v22 = __p[1];
  if (v6)
  {
    uint64_t v23 = 0LL;
    uint64_t v24 = *v8;
    do
    {
      uint64_t v25 = *v8;
      __int128 v26 = v23;
      do
      {
        if (v23 <= v26) {
          uint64_t v27 = v26;
        }
        else {
          uint64_t v27 = v23;
        }
        if (v23 >= v26) {
          int v28 = v26;
        }
        else {
          int v28 = v23;
        }
        __int16 v29 = &v28[(unint64_t)&v27[(void)v27 * (void)v27] >> 1];
        int v30 = v22[(void)v29];
        if (v30) {
          double v31 = *(double *)(v25 + 8LL * (void)v29) / (double)v30;
        }
        else {
          double v31 = 0.0;
        }
        *(double *)(v24 + 8LL * (void)v29) = v31;
        ++v26;
      }

      while (v6 != v26);
      ++v23;
    }

    while (v23 != v6);
    uint64_t v22 = __p[1];
  }

  if (v22)
  {
    char v41 = v22;
    operator delete(v22);
  }

  sub_100008390((uint64_t)&v35, v36[0]);
  return sub_100019CEC((uint64_t)v37);
}

void sub_10009928C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25)
{
}

double sub_1000992F4(void *a1)
{
  CFStringRef v2 = (void *)a1[34];
  if (!v2) {
    goto LABEL_6;
  }
  unint64_t v3 = 0LL;
  do
  {
    v3 += (uint64_t)(v2[5] - v2[4]) >> 4;
    CFStringRef v2 = (void *)*v2;
  }

  while (v2);
  if (v3) {
    return (double)(unint64_t)((uint64_t)(a1[30] - a1[29]) >> 5) / (double)v3;
  }
LABEL_6:
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10181CB88);
  }
  uint64_t v5 = (os_log_s *)qword_1019348D8;
  double v4 = 1.0;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 1026;
    BOOL v11 = sub_100097CA8((uint64_t)a1);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:representativeFPsRatio, called with empty model, isValid:%{public}hhd}",  (uint8_t *)v7,  0x18u);
  }

  return v4;
}

_OWORD *sub_100099430(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = v4;
    if (v12) {
      unint64_t v13 = (char *)sub_10000835C(v4, v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[32 * v12];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *((_OWORD *)v14 + 1) = *(_OWORD *)(a2 + 16);
    v16[2] = v14 + 32;
    sub_10009C1F4(a1, v16);
    __int16 v8 = (_OWORD *)a1[1];
    sub_10009C258((uint64_t)v16);
  }

  else
  {
    *unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    v7[1] = *(_OWORD *)(a2 + 16);
    __int16 v8 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }

  a1[1] = (uint64_t)v8;
  return v8 - 2;
}

void sub_100099530(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100099544(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  v49[0] = sub_1000EFD0C((uint64_t)a3);
  v49[1] = v8;
  v48[0] = sub_1000EFD18(a3);
  v48[1] = v9;
  while (sub_1000EFC24(v49, v48))
  {
    uint64_t v10 = sub_1000EFC50(v49);
    uint64_t v11 = sub_10004ACA4(a4, (void *)(v10 + 40));
    if (!v11) {
      sub_10000C918("unordered_map::at: key not found");
    }
    unint64_t v12 = sub_10009CA48(a5, v11 + 4);
    unint64_t v45 = v13;
    uint64_t v14 = v12;
    sub_1000CCB00(a2, v10, (uint64_t)v50, 0LL, 0, (uint64_t)v60);
    if (v61[0] == *(void *)v60)
    {
      sub_1012288C0();
      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationModel.mm",  674,  "calculateNormalizedProbabilitiesWithoutNullCluster");
      __break(1u);
    }

    while (v14 != v45)
    {
      double v15 = sub_10004ACA4(a6, v14 + 4);
      if (v15)
      {
        uint64_t v17 = *(char **)v60;
        unint64_t v16 = (char *)v61[0];
        if (*(void *)v60 != v61[0])
        {
          int v18 = *((_DWORD *)v15 + 8);
          do
          {
            unint64_t v19 = *(void **)(a1 + 8);
            unint64_t v20 = *(void **)a1;
            if (*(void **)a1 != v19)
            {
              while (*v20 != *(void *)v17 || v20[1] != *((void *)v17 + 1))
              {
                v20 += 2;
                if (v20 == v19)
                {
                  unint64_t v20 = *(void **)(a1 + 8);
                  break;
                }
              }
            }

            if (v20 == v19)
            {
              if (qword_1019348D0 != -1) {
                dispatch_once(&qword_1019348D0, &stru_10181CB88);
              }
              uint64_t v22 = (os_log_s *)qword_1019348D8;
              if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
              {
                uint64_t v23 = operator new(0x28uLL);
                std::string __p = v23;
                __int128 v47 = xmmword_1012C8460;
                *uint64_t v23 = 0u;
                v23[1] = 0u;
                *(void *)((char *)v23 + 29) = 0LL;
                sub_10000AE6C((uint64_t)v17, v23);
                p_p = &__p;
                if (v47 < 0) {
                  p_p = __p;
                }
                uint64_t buf = 68289282LL;
                __int16 v56 = 2082;
                uint64_t v57 = "";
                __int16 v58 = 2082;
                unint64_t v59 = p_p;
                _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Similarity List Model Learning, unexpected identifier, cluster ID:%{publi c, location:escape_only}s}",  (uint8_t *)&buf,  0x1Cu);
                if (SHIBYTE(v47) < 0) {
                  operator delete(__p);
                }
                if (qword_1019348D0 != -1) {
                  dispatch_once(&qword_1019348D0, &stru_10181CB88);
                }
              }

              uint64_t v25 = (os_log_s *)qword_1019348D8;
              if (os_signpost_enabled((os_log_t)qword_1019348D8))
              {
                __int128 v26 = operator new(0x28uLL);
                std::string __p = v26;
                __int128 v47 = xmmword_1012C8460;
                *__int128 v26 = 0u;
                v26[1] = 0u;
                *(void *)((char *)v26 + 29) = 0LL;
                sub_10000AE6C((uint64_t)v17, v26);
                uint64_t v27 = &__p;
                if (v47 < 0) {
                  uint64_t v27 = __p;
                }
                uint64_t buf = 68289282LL;
                __int16 v56 = 2082;
                uint64_t v57 = "";
                __int16 v58 = 2082;
                unint64_t v59 = v27;
                _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Similarity List Model Learning, unexpected identifier",  "{msg%{public}.0s:Similarity List Model Learning, unexpected identifier, cluster ID:%{publi c, location:escape_only}s}",  (uint8_t *)&buf,  0x1Cu);
                if (SHIBYTE(v47) < 0) {
                  operator delete(__p);
                }
              }
            }

            else
            {
              sub_100093B0C(a1 + 48, v18, ((unint64_t)v20 - *(void *)a1) >> 4, *((double *)v17 + 2));
            }

            v17 += 32;
          }

          while (v17 != v16);
        }
      }

      else
      {
        if (qword_1019348D0 != -1) {
          dispatch_once(&qword_1019348D0, &stru_10181CB88);
        }
        int v28 = (os_log_s *)qword_1019348D8;
        if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
        {
          __int16 v29 = operator new(0x28uLL);
          std::string __p = v29;
          __int128 v47 = xmmword_1012C8460;
          *__int16 v29 = 0u;
          v29[1] = 0u;
          *(void *)((char *)v29 + 29) = 0LL;
          sub_10000AE6C((uint64_t)(v14 + 4), v29);
          int v30 = &__p;
          if (v47 < 0) {
            int v30 = __p;
          }
          uint64_t buf = 68289282LL;
          __int16 v56 = 2082;
          uint64_t v57 = "";
          __int16 v58 = 2082;
          unint64_t v59 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Similarity List Model Learning, unexpectedly couldn't find LSL row for label identifi er, Label UUID:%{public, location:escape_only}s}",  (uint8_t *)&buf,  0x1Cu);
          if (SHIBYTE(v47) < 0) {
            operator delete(__p);
          }
          if (qword_1019348D0 != -1) {
            dispatch_once(&qword_1019348D0, &stru_10181CB88);
          }
        }

        double v31 = (os_log_s *)qword_1019348D8;
        if (os_signpost_enabled((os_log_t)qword_1019348D8))
        {
          unint64_t v32 = operator new(0x28uLL);
          std::string __p = v32;
          __int128 v47 = xmmword_1012C8460;
          _OWORD *v32 = 0u;
          v32[1] = 0u;
          *(void *)((char *)v32 + 29) = 0LL;
          sub_10000AE6C((uint64_t)(v14 + 4), v32);
          uint64_t v33 = &__p;
          if (v47 < 0) {
            uint64_t v33 = __p;
          }
          uint64_t buf = 68289282LL;
          __int16 v56 = 2082;
          uint64_t v57 = "";
          __int16 v58 = 2082;
          unint64_t v59 = v33;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v31,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Similarity List Model Learning, unexpectedly couldn't find LSL row for label identifier",  "{msg%{public}.0s:Similarity List Model Learning, unexpectedly couldn't find LSL row for label identifi er, Label UUID:%{public, location:escape_only}s}",  (uint8_t *)&buf,  0x1Cu);
          if (SHIBYTE(v47) < 0) {
            operator delete(__p);
          }
        }
      }

      uint64_t v14 = (void *)*v14;
    }

    if (v67 && v65)
    {
      uint64_t v66 = v65;
      operator delete(v65);
    }

    if (v63)
    {
      __int128 v64 = v63;
      operator delete(v63);
    }

    if (*(void *)v60)
    {
      v61[0] = *(void *)v60;
      operator delete(*(void **)v60);
    }

    sub_1000EFC64((uint64_t)v49);
  }

  if ((sub_100093EEC(a1 + 48) & 1) == 0)
  {
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10181CB88);
    }
    uint64_t v34 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_ERROR))
    {
      *(void *)uint64_t v60 = 68289026LL;
      LOWORD(v61[0]) = 2082;
      *(void *)((char *)v61 + 2) = "";
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Similarity List Model Learning, error normalizing probability matrix}",  v60,  0x12u);
      if (qword_1019348D0 != -1) {
        dispatch_once(&qword_1019348D0, &stru_10181CB88);
      }
    }

    __int16 v35 = (os_log_s *)qword_1019348D8;
    if (os_signpost_enabled((os_log_t)qword_1019348D8))
    {
      *(void *)uint64_t v60 = 68289026LL;
      LOWORD(v61[0]) = 2082;
      *(void *)((char *)v61 + 2) = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v35,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Similarity List Model Learning, error normalizing probability matrix",  "{msg%{public}.0s:Similarity List Model Learning, error normalizing probability matrix}",  v60,  0x12u);
    }
  }

  if (*(_OWORD *)*(void *)a1 == 0LL)
  {
    sub_100093D84((_DWORD *)(a1 + 48), 1u, (uint64_t)v60);
    sub_10009AFF8(a1 + 48, (uint64_t)v60);
    if (v62)
    {
      unint64_t v36 = *(void **)v60;
      *(void *)uint64_t v60 = 0LL;
      if (v36) {
        operator delete[](v36);
      }
    }

    double v38 = *(void **)a1;
    uint64_t v37 = *(_BYTE **)(a1 + 8);
    double v39 = (_BYTE *)(*(void *)a1 + 16LL);
    int64_t v40 = v37 - v39;
    if (v37 != v39) {
      memmove(*(void **)a1, v39, v37 - v39);
    }
    *(void *)(a1 + 8) = (char *)v38 + v40;
  }

  sub_1002A5554(v52);
  sub_100008390((uint64_t)v50, v51);
  if (v54 < 0) {
    operator delete(v53[0]);
  }
}