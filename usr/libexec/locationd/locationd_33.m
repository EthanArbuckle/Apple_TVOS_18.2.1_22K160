uint64_t sub_101104544(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;
  v2 = *((void *)this + 1);
  v3 = *((void *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0LL;
        if (v2 > v3) {
          v3 = v2;
        }
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0LL;
            goto LABEL_20;
          }
        }

        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0LL;
        while (1)
        {
          v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101104A8C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((*(_WORD *)(result + 68) & 0x800) == 0)
  {
    goto LABEL_3;
  }

  result = PB::Writer::write(this, *(float *)(v3 + 56), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_101104C38(uint64_t result)
{
  *(void *)result = &off_10189BE70;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101104C50(PB::Base *a1)
{
}

uint64_t sub_101104C64(uint64_t result, uint64_t a2)
{
  *(void *)result = &off_10189BE70;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_101104CB4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "compassJustAlignedToStableField", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101104D1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101104FA8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_101105000(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BEA8;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_101105018(PB::Base *a1)
{
}

float sub_10110502C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189BEA8;
  *(_DWORD *)(a1 + 80) = 0;
  int v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 80) = 1;
    *(void *)(a1 + 8) = v4;
    int v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    int v2 = *(_DWORD *)(a2 + 80);
  }

uint64_t sub_101105240(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "apAwake", *(_BYTE *)(a1 + 76));
    int v5 = *(_DWORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

uint64_t sub_1011054B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101105AF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 80);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }

uint64_t sub_101105D0C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BEE0;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_101105D24(PB::Base *a1)
{
}

float sub_101105D38(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189BEE0;
  *(_DWORD *)(a1 + 80) = 0;
  int v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 80) = 1;
    *(void *)(a1 + 8) = v4;
    int v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    int v2 = *(_DWORD *)(a2 + 80);
  }

uint64_t sub_101105F30(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 16));
    int v5 = *(_DWORD *)(a1 + 80);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }

uint64_t sub_101106180(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10110677C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 80);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }

double sub_10110697C(uint64_t a1)
{
  *(void *)a1 = &off_10189BF18;
  *(_DWORD *)(a1 + 124) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1011069A0(PB::Base *this)
{
  *(void *)this = &off_10189BF18;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1011069F0(PB::Base *a1)
{
}

uint64_t sub_101106A04(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189BF18;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  int v5 = *(_DWORD *)(a2 + 124);
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    int v6 = 1;
    *(_DWORD *)(a1 + 124) = 1;
    *(void *)(a1 + 56) = v7;
    int v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v6 = 0;
  if ((v5 & 0x80) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 88);
    v6 |= 0x80u;
    *(_DWORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 88) = v8;
    int v5 = *(_DWORD *)(a2 + 124);
  }

uint64_t sub_101106C8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 124) & 2) != 0) {
    PB::TextFormatter::format(this, "attitudeDelta", *(float *)(a1 + 64));
  }
  int v5 = *(float **)(a1 + 8);
  int v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "calibratedField", v7);
  }

  int v8 = *(_DWORD *)(a1 + 124);
  if ((v8 & 0x8000) != 0)
  {
    PB::TextFormatter::format(this, "doCorrection", *(_BYTE *)(a1 + 120));
    int v8 = *(_DWORD *)(a1 + 124);
    if ((v8 & 4) == 0)
    {
LABEL_7:
      if ((v8 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_28;
    }
  }

  else if ((v8 & 4) == 0)
  {
    goto LABEL_7;
  }

  PB::TextFormatter::format(this, "horizontal", *(float *)(a1 + 68));
  int v8 = *(_DWORD *)(a1 + 124);
  if ((v8 & 8) == 0)
  {
LABEL_8:
    if ((v8 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }

BOOL sub_101106F40(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    int v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    int v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_1011079C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 124);
  if ((v4 & 1) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    int v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }

  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 88), 2u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_29:
    double result = PB::Writer::write(this, *(float *)(v3 + 68), 4u);
    if ((*(_DWORD *)(v3 + 124) & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

void *sub_101107C0C(void *result)
{
  *double result = off_10189BF50;
  result[1] = 0LL;
  return result;
}

void sub_101107C1C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189BF50;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101107C5C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189BF50;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_101107CA0(void *a1, uint64_t a2)
{
  *a1 = off_10189BF50;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0xA8uLL);
    uint64_t v5 = sub_10110BCF4((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_101107D08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "correction");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101107D58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101107F44(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_101107F60(uint64_t result)
{
  *(void *)uint64_t result = &off_10189BF88;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101107F78(PB::Base *a1)
{
}

uint64_t sub_101107F8C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189BF88;
  *(_DWORD *)(result + 28) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(void *)(result + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 28) = v3;
    *(void *)(result + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_101108018(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "finalDecision", *(_BYTE *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "timeStart", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "instantDecision", *(_BYTE *)(a1 + 25));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timeStop", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011080C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }

uint64_t sub_10110833C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 24), 4u);
  }

void *sub_1011083D0(void *result)
{
  *uint64_t result = off_10189BFC0;
  result[1] = 0LL;
  return result;
}

void sub_1011083E0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189BFC0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101108420(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189BFC0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_101108464(void *a1, uint64_t a2)
{
  *a1 = off_10189BFC0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x20uLL);
    uint64_t v5 = sub_1010FAD20((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_1011084CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10110851C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011086E0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_1011086FC(void *result)
{
  *uint64_t result = off_10189BFF8;
  result[1] = 0LL;
  return result;
}

void sub_10110870C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189BFF8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10110874C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189BFF8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_101108790(void *a1, uint64_t a2)
{
  *a1 = off_10189BFF8;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x98uLL);
    uint64_t v5 = sub_1010F9C48((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_1011087F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101108848(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101108A30(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_101108A4C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C030;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_101108A64(PB::Base *a1)
{
}

float sub_101108A78(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189C030;
  *(_DWORD *)(a1 + 92) = 0;
  int v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 92) = 1;
    *(void *)(a1 + 8) = v4;
    int v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 88);
    v3 |= 0x80000u;
    *(_DWORD *)(a1 + 92) = v3;
    *(float *)(a1 + 88) = result;
    int v2 = *(_DWORD *)(a2 + 92);
  }

uint64_t sub_101108CC4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbabilityEstimate", *(float *)(a1 + 16));
    int v5 = *(_DWORD *)(a1 + 92);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "cycleTime", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }

uint64_t sub_101108F74(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101109BA4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 92);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }

  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 2u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }

uint64_t sub_101109DF8(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C068;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101109E10(PB::Base *a1)
{
}

float sub_101109E24(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189C068;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
    char v2 = 2;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return *(float *)&v3;
    }
    goto LABEL_5;
  }

  uint64_t v3 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 20) = 1;
  *(void *)(a1 + 8) = v3;
  char v2 = 3;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }

  return *(float *)&v3;
}

uint64_t sub_101109E74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "yaw", *(float *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101109EDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10110A0BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  }
  return result;
}

void *sub_10110A114(void *result)
{
  *uint64_t result = off_10189C0A0;
  result[1] = 0LL;
  return result;
}

void sub_10110A124(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189C0A0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10110A164(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189C0A0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10110A1A8(void *a1, uint64_t a2)
{
  *a1 = off_10189C0A0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0xA8uLL);
    uint64_t v5 = sub_10110BCF4((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10110A210(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "correction");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10110A260(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10110A44C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void sub_10110A46C(PB::Base *a1)
{
}

float sub_10110A480(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189C0D8;
  *(_DWORD *)(a1 + 124) = 0;
  int v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 40);
    int v3 = 16;
    *(_DWORD *)(a1 + 124) = 16;
    *(void *)(a1 + 40) = v4;
    int v2 = *(_DWORD *)(a2 + 124);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v4 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 124) = v3;
    *(void *)(a1 + 16) = v4;
    int v2 = *(_DWORD *)(a2 + 124);
  }

uint64_t sub_10110A738(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(float *)(a1 + 48));
    int v5 = *(_DWORD *)(a1 + 124);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }

  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "clientID", *(_DWORD *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }

uint64_t sub_10110AA68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10110B4BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 124);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    int v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }

uint64_t sub_10110B780(uint64_t result)
{
  *(void *)uint64_t result = off_10189C110;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10110B794(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189C110;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10110B7D4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189C110;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_10110B818(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189C110;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    int v5 = operator new(0x80uLL);
    sub_10110A480((uint64_t)v5, v4);
    *(void *)(a1 + 8) = v6;
  }

  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
    char v7 = 2;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return a1;
    }
    goto LABEL_7;
  }

  char v8 = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = 1;
  *(_BYTE *)(a1 + 16) = v8;
  char v7 = 3;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_7:
    char v9 = *(_BYTE *)(a2 + 17);
    *(_BYTE *)(a1 + 20) = v7;
    *(_BYTE *)(a1 + 17) = v9;
  }

  return a1;
}

uint64_t sub_10110B8B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))( v5,  this,  "deviceMotion");
  }
  char v6 = *(_BYTE *)(a1 + 20);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "inQuiescentMode", *(_BYTE *)(a1 + 16));
    char v6 = *(_BYTE *)(a1 + 20);
  }

  if ((v6 & 2) != 0) {
    PB::TextFormatter::format(this, "shouldGyroBeOn", *(_BYTE *)(a1 + 17));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10110B93C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10110BBA4(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (BOOL *)result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  BOOL v5 = v3[20];
  if (v5)
  {
    uint64_t result = PB::Writer::write(this, v3[16], 2u);
    BOOL v5 = v3[20];
  }

  if ((v5 & 2) != 0) {
    return PB::Writer::write(this, v3[17], 3u);
  }
  return result;
}

_DWORD *sub_10110BC10(_DWORD *result)
{
  if (!*((void *)result + 1))
  {
    v1 = result;
    uint64_t result = operator new(0x80uLL);
    *(void *)uint64_t result = &off_10189C0D8;
    result[31] = 0;
    *((void *)v1 + 1) = result;
  }

  return result;
}

void sub_10110BC50(PB::Base *this)
{
  *(void *)this = &off_10189C148;
  unint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }

  unint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }

  int v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }

  BOOL v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }

  char v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }

  char v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }

  PB::Base::~Base(this);
}

void sub_10110BCE0(PB::Base *a1)
{
}

uint64_t sub_10110BCF4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  BOOL v5 = (char *)(a1 + 56);
  *(void *)a1 = &off_10189C148;
  *(_OWORD *)(a1 + 104) = 0u;
  char v6 = (char *)(a1 + 104);
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if ((*(_BYTE *)(a2 + 160) & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 152);
    *(_BYTE *)(a1 + 160) = 1;
    *(void *)(a1 + 152) = v7;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    sub_10004C5F8( v6,  *(char **)(a2 + 104),  *(void *)(a2 + 112),  (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_10004C5F8( (char *)(a1 + 128),  *(char **)(a2 + 128),  *(void *)(a2 + 136),  (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  }

  return a1;
}

uint64_t sub_10110BE08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  BOOL v5 = *(float **)(a1 + 8);
  char v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "dx", v7);
  }

  uint64_t v8 = *(float **)(a1 + 32);
  char v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "estimate", v10);
  }

  unint64_t v11 = *(float **)(a1 + 56);
  unint64_t v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "measurement", v13);
  }

  BOOL v14 = *(float **)(a1 + 80);
  char v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(this, "noisevariance", v16);
  }

  unint64_t v17 = *(float **)(a1 + 104);
  char v18 = *(float **)(a1 + 112);
  while (v17 != v18)
  {
    float v19 = *v17++;
    PB::TextFormatter::format(this, "residual", v19);
  }

  unint64_t v20 = *(float **)(a1 + 128);
  uint64_t v21 = *(float **)(a1 + 136);
  while (v20 != v21)
  {
    float v22 = *v20++;
    PB::TextFormatter::format(this, "statevariance", v22);
  }

  if ((*(_BYTE *)(a1 + 160) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10110BF6C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v181 = a1 + 144;
    v182 = (void **)(a1 + 80);
    v183 = (void **)(a1 + 128);
    float v10 = (void **)(a1 + 8);
    uint64_t v179 = a1 + 24;
    uint64_t v180 = a1 + 96;
    unint64_t v11 = (void **)(a1 + 104);
    unint64_t v12 = (void **)(a1 + 56);
    uint64_t v177 = a1 + 72;
    uint64_t v178 = a1 + 120;
    float v13 = (void **)(a1 + 32);
    uint64_t v176 = a1 + 48;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_10110CBD8(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if ((*(_BYTE *)(result + 160) & 1) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 152), 1u);
  }
  unint64_t v4 = (float *)v3[4];
  unint64_t v5 = (float *)v3[5];
  while (v4 != v5)
  {
    float v6 = *v4++;
    uint64_t result = PB::Writer::write(this, v6, 2u);
  }

  float v7 = (float *)v3[7];
  uint64_t v8 = (float *)v3[8];
  while (v7 != v8)
  {
    float v9 = *v7++;
    uint64_t result = PB::Writer::write(this, v9, 3u);
  }

  float v10 = (float *)v3[13];
  unint64_t v11 = (float *)v3[14];
  while (v10 != v11)
  {
    float v12 = *v10++;
    uint64_t result = PB::Writer::write(this, v12, 4u);
  }

  float v13 = (float *)v3[1];
  uint64_t v14 = (float *)v3[2];
  while (v13 != v14)
  {
    float v15 = *v13++;
    uint64_t result = PB::Writer::write(this, v15, 5u);
  }

  unsigned int v16 = (float *)v3[10];
  unint64_t v17 = (float *)v3[11];
  while (v16 != v17)
  {
    float v18 = *v16++;
    uint64_t result = PB::Writer::write(this, v18, 6u);
  }

  unint64_t v20 = (float *)v3[16];
  char v19 = (float *)v3[17];
  while (v20 != v19)
  {
    float v21 = *v20++;
    uint64_t result = PB::Writer::write(this, v21, 7u);
  }

  return result;
}

double sub_10110CCD8(uint64_t a1)
{
  *(void *)a1 = &off_10189C180;
  *(_DWORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_10110CCFC(PB::Base *this)
{
  *(void *)this = &off_10189C180;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_10110CD4C(PB::Base *a1)
{
}

uint64_t sub_10110CD60(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189C180;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    *(void *)(a1 + 56) = v5;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  return a1;
}

uint64_t sub_10110CE00(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "biasvariance", v7);
  }

  uint64_t v8 = *(float **)(a1 + 32);
  float v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "statevariance", v10);
  }

  if ((*(_BYTE *)(a1 + 64) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10110CEB4(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    float v12 = (void **)(a1 + 32);
    uint64_t v13 = a1 + 48;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        unint64_t v17 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v23 = v4 + 1;
          char v24 = *(_BYTE *)(v14 + v4);
          *((void *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_21;
          }
          v21 += 7;
          unint64_t v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            unint64_t v17 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_10110D42C(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  }
  unint64_t v4 = (float *)v3[4];
  unint64_t v5 = (float *)v3[5];
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  uint64_t v8 = (float *)v3[1];
  float v7 = (float *)v3[2];
  while (v8 != v7)
  {
    float v9 = *v8++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  return result;
}

uint64_t sub_10110D4AC(uint64_t result)
{
  *(void *)double result = &off_10189C1B8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_10110D4C4(PB::Base *a1)
{
}

float sub_10110D4D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189C1B8;
  *(_DWORD *)(a1 + 28) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(a1 + 28) = 2;
    *(void *)(a1 + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
LABEL_5:
    uint64_t v4 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 28) = v3;
    *(void *)(a1 + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_10110D548(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "theta", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 24));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10110D5D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10110D7F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(float *)(v3 + 24), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 28) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 24), 3u);
  }
  return result;
}

uint64_t sub_10110D870(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C1F0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10110D888(PB::Base *a1)
{
}

uint64_t sub_10110D89C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189C1F0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_10110D8EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "displacingState", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10110D954(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10110DBE0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_10110DC38(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C228;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_10110DC50(PB::Base *a1)
{
}

uint64_t sub_10110DC64(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189C228;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    char v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }

  return result;
}

uint64_t sub_10110DC90(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "displayOn", *(_BYTE *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10110DCDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10110DE68(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  }
  return result;
}

double sub_10110DE88(uint64_t a1)
{
  *(void *)a1 = &off_10189C260;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void sub_10110DEC4(PB::Base *this)
{
  *(void *)this = &off_10189C260;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  int v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }

  char v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }

  float v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }

  float v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }

  PB::Base::~Base(this);
}

void sub_10110DF64(PB::Base *a1)
{
}

uint64_t sub_10110DF78(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189C260;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  char v5 = (char *)(a1 + 56);
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if ((*(_WORD *)(a2 + 168) & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 128);
    *(_WORD *)(a1 + 168) = 2;
    *(void *)(a1 + 128) = v6;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_10004C5F8( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  }

  __int16 v7 = *(_WORD *)(a2 + 168);
  if ((v7 & 0x20) == 0)
  {
    if ((v7 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_26:
    uint64_t v23 = *(void *)(a2 + 120);
    *(_WORD *)(a1 + 168) |= 1u;
    *(void *)(a1 + 120) = v23;
    if ((*(_WORD *)(a2 + 168) & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  int v22 = *(_DWORD *)(a2 + 148);
  *(_WORD *)(a1 + 168) |= 0x20u;
  *(_DWORD *)(a1 + 148) = v22;
  __int16 v7 = *(_WORD *)(a2 + 168);
  if ((v7 & 1) != 0) {
    goto LABEL_26;
  }
LABEL_7:
  if ((v7 & 0x100) != 0)
  {
LABEL_8:
    int v8 = *(_DWORD *)(a2 + 160);
    *(_WORD *)(a1 + 168) |= 0x100u;
    *(_DWORD *)(a1 + 160) = v8;
  }

uint64_t sub_10110E1EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 168);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "AzABufferMean", *(float *)(a1 + 136));
    __int16 v5 = *(_WORD *)(a1 + 168);
  }

  if ((v5 & 8) != 0) {
    PB::TextFormatter::format(this, "AzBBufferMean", *(float *)(a1 + 140));
  }
  uint64_t v6 = *(float **)(a1 + 8);
  __int16 v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "cachedAttitude", v8);
  }

  uint64_t v9 = *(void *)(a1 + 104);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32LL))(v9, this, "candidateA");
  }
  uint64_t v10 = *(void *)(a1 + 112);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32LL))( v10,  this,  "candidateB");
  }
  double v11 = *(float **)(a1 + 32);
  uint64_t v12 = *(float **)(a1 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "currAttitude", v13);
  }

  __int16 v14 = *(_WORD *)(a1 + 168);
  if ((v14 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "disambiguationFlag", *(_DWORD *)(a1 + 144));
    __int16 v14 = *(_WORD *)(a1 + 168);
    if ((v14 & 1) == 0)
    {
LABEL_15:
      if ((v14 & 0x20) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }

  else if ((v14 & 1) == 0)
  {
    goto LABEL_15;
  }

  PB::TextFormatter::format(this, "lastDoTUpdateTime", *(double *)(a1 + 120));
  if ((*(_WORD *)(a1 + 168) & 0x20) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "lastEstimatedDoTAngleRad", *(float *)(a1 + 148));
LABEL_17:
  char v15 = *(float **)(a1 + 56);
  double v16 = *(float **)(a1 + 64);
  while (v15 != v16)
  {
    float v17 = *v15++;
    PB::TextFormatter::format(this, "lpfInertialRotationRate", v17);
  }

  uint64_t v18 = *(float **)(a1 + 80);
  __int16 v19 = *(float **)(a1 + 88);
  while (v18 != v19)
  {
    float v20 = *v18++;
    PB::TextFormatter::format(this, "lpfInertialUserAccel", v20);
  }

  __int16 v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "newDisambiguation", *(_BYTE *)(a1 + 164));
    __int16 v21 = *(_WORD *)(a1 + 168);
    if ((v21 & 0x40) == 0)
    {
LABEL_23:
      if ((v21 & 0x80) == 0) {
        goto LABEL_24;
      }
      goto LABEL_33;
    }
  }

  else if ((v21 & 0x40) == 0)
  {
    goto LABEL_23;
  }

  PB::TextFormatter::format(this, "numAbortedPeaks", *(_DWORD *)(a1 + 152));
  __int16 v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x80) == 0)
  {
LABEL_24:
    if ((v21 & 0x100) == 0) {
      goto LABEL_25;
    }
LABEL_34:
    PB::TextFormatter::format(this, "stateFSM", *(_DWORD *)(a1 + 160));
    if ((*(_WORD *)(a1 + 168) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_26;
  }

BOOL sub_10110E454(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v10 = (void **)(a1 + 32);
    double v11 = (void **)(a1 + 8);
    uint64_t v192 = a1 + 24;
    uint64_t v193 = a1 + 48;
    uint64_t v12 = (void **)(a1 + 56);
    uint64_t v191 = a1 + 72;
    float v13 = (void **)(a1 + 80);
    uint64_t v14 = a1 + 96;
    while (1)
    {
      uint64_t v15 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0LL;
      while (1)
      {
        unint64_t v19 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v4 = v19;
        BOOL v21 = v17++ > 8;
        if (v21) {
          goto LABEL_20;
        }
      }

LABEL_261:
          *(_DWORD *)(a1 + 156) = v114;
          goto LABEL_296;
        case 0xFu:
          if ((_DWORD)v27 != 2)
          {
            uint64_t v139 = *(char **)(a1 + 16);
            unint64_t v138 = *(void *)(a1 + 24);
            if ((unint64_t)v139 >= v138)
            {
              v162 = (char *)*v11;
              uint64_t v163 = (v139 - (_BYTE *)*v11) >> 2;
              unint64_t v164 = v163 + 1;
              if ((unint64_t)(v163 + 1) >> 62) {
LABEL_307:
              }
                sub_100007008();
              uint64_t v165 = v138 - (void)v162;
              if (v165 >> 1 > v164) {
                unint64_t v164 = v165 >> 1;
              }
              else {
                unint64_t v166 = v164;
              }
              if (v166)
              {
                int v167 = (char *)sub_10000956C(v192, v166);
                v162 = *(char **)(a1 + 8);
                uint64_t v139 = *(char **)(a1 + 16);
              }

              else
              {
                int v167 = 0LL;
              }

              v182 = &v167[4 * v163];
              *(_DWORD *)v182 = 0;
              uint64_t v133 = v182 + 4;
              while (v139 != v162)
              {
                int v183 = *((_DWORD *)v139 - 1);
                v139 -= 4;
                *((_DWORD *)v182 - 1) = v183;
                v182 -= 4;
              }

              *(void *)(a1 + 8) = v182;
              *(void *)(a1 + 16) = v133;
              *(void *)(a1 + 24) = &v167[4 * v166];
              if (v162) {
                operator delete(v162);
              }
            }

            else
            {
              *(_DWORD *)uint64_t v139 = 0;
              uint64_t v133 = v139 + 4;
            }

            *(void *)(a1 + 16) = v133;
            goto LABEL_290;
          }

          if ((PB::Reader::placeMark(this, v194, v27, a4) & 1) != 0) {
            return 0LL;
          }
          unint64_t v58 = *((void *)this + 1);
          unint64_t v59 = *((void *)this + 2);
          while (v58 < v59 && !*((_BYTE *)this + 24))
          {
            unint64_t v61 = *(char **)(a1 + 16);
            unint64_t v60 = *(void *)(a1 + 24);
            if ((unint64_t)v61 >= v60)
            {
              uint64_t v63 = (char *)*v11;
              uint64_t v64 = (v61 - (_BYTE *)*v11) >> 2;
              unint64_t v65 = v64 + 1;
              uint64_t v66 = v60 - (void)v63;
              if (v66 >> 1 > v65) {
                unint64_t v65 = v66 >> 1;
              }
              else {
                unint64_t v67 = v65;
              }
              if (v67)
              {
                char v68 = (char *)sub_10000956C(v192, v67);
                uint64_t v63 = *(char **)(a1 + 8);
                unint64_t v61 = *(char **)(a1 + 16);
              }

              else
              {
                char v68 = 0LL;
              }

              int v69 = &v68[4 * v64];
              *(_DWORD *)int v69 = 0;
              unsigned int v62 = v69 + 4;
              while (v61 != v63)
              {
                int v70 = *((_DWORD *)v61 - 1);
                v61 -= 4;
                *((_DWORD *)v69 - 1) = v70;
                v69 -= 4;
              }

              *(void *)(a1 + 8) = v69;
              *(void *)(a1 + 16) = v62;
              *(void *)(a1 + 24) = &v68[4 * v67];
              if (v63) {
                operator delete(v63);
              }
            }

            else
            {
              *(_DWORD *)unint64_t v61 = 0;
              unsigned int v62 = v61 + 4;
            }

            *(void *)(a1 + 16) = v62;
            unint64_t v71 = *((void *)this + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)this + 2)) {
              goto LABEL_174;
            }
            *(v62 - 1) = *(_DWORD *)(*(void *)this + v71);
            unint64_t v59 = *((void *)this + 2);
            unint64_t v58 = *((void *)this + 1) + 4LL;
            *((void *)this + 1) = v58;
          }

          goto LABEL_175;
        case 0x10u:
          if ((_DWORD)v27 == 2)
          {
            if ((PB::Reader::placeMark(this, v194, v27, a4) & 1) != 0) {
              return 0LL;
            }
            unint64_t v117 = *((void *)this + 1);
            unint64_t v118 = *((void *)this + 2);
            while (v117 < v118 && !*((_BYTE *)this + 24))
            {
              unint64_t v120 = *(char **)(a1 + 40);
              unint64_t v119 = *(void *)(a1 + 48);
              if ((unint64_t)v120 >= v119)
              {
                unint64_t v122 = (char *)*v10;
                uint64_t v123 = (v120 - (_BYTE *)*v10) >> 2;
                unint64_t v124 = v123 + 1;
                uint64_t v125 = v119 - (void)v122;
                if (v125 >> 1 > v124) {
                  unint64_t v124 = v125 >> 1;
                }
                else {
                  unint64_t v126 = v124;
                }
                if (v126)
                {
                  uint64_t v127 = (char *)sub_10000956C(v193, v126);
                  unint64_t v122 = *(char **)(a1 + 32);
                  unint64_t v120 = *(char **)(a1 + 40);
                }

                else
                {
                  uint64_t v127 = 0LL;
                }

                unint64_t v128 = &v127[4 * v123];
                *(_DWORD *)unint64_t v128 = 0;
                int v121 = v128 + 4;
                while (v120 != v122)
                {
                  int v129 = *((_DWORD *)v120 - 1);
                  v120 -= 4;
                  *((_DWORD *)v128 - 1) = v129;
                  v128 -= 4;
                }

                *(void *)(a1 + 32) = v128;
                *(void *)(a1 + 40) = v121;
                *(void *)(a1 + 48) = &v127[4 * v126];
                if (v122) {
                  operator delete(v122);
                }
              }

              else
              {
                *(_DWORD *)unint64_t v120 = 0;
                int v121 = v120 + 4;
              }

              *(void *)(a1 + 40) = v121;
              unint64_t v130 = *((void *)this + 1);
              if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2))
              {
LABEL_174:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v121 - 1) = *(_DWORD *)(*(void *)this + v130);
              unint64_t v118 = *((void *)this + 2);
              unint64_t v117 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v117;
            }

uint64_t sub_10110F2B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_WORD *)(result + 168) & 2) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 128), 1u);
  }
  unint64_t v4 = *(float **)(v3 + 80);
  unint64_t v5 = *(float **)(v3 + 88);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  __int16 v7 = *(float **)(v3 + 56);
  float v8 = *(float **)(v3 + 64);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  __int16 v10 = *(_WORD *)(v3 + 168);
  if ((v10 & 0x20) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 148), 4u);
    __int16 v10 = *(_WORD *)(v3 + 168);
    if ((v10 & 1) == 0)
    {
LABEL_11:
      if ((v10 & 0x100) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }

  else if ((v10 & 1) == 0)
  {
    goto LABEL_11;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 120), 5u);
  if ((*(_WORD *)(v3 + 168) & 0x100) != 0) {
LABEL_12:
  }
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 160), 6u);
LABEL_13:
  double v11 = *(const PB::Base **)(v3 + 104);
  if (v11) {
    double result = PB::Writer::writeSubmessage(this, v11, 7u);
  }
  uint64_t v12 = *(const PB::Base **)(v3 + 112);
  if (v12) {
    double result = PB::Writer::writeSubmessage(this, v12, 8u);
  }
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x10) != 0)
  {
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 144), 9u);
    __int16 v13 = *(_WORD *)(v3 + 168);
    if ((v13 & 0x200) == 0)
    {
LABEL_19:
      if ((v13 & 4) == 0) {
        goto LABEL_20;
      }
      goto LABEL_36;
    }
  }

  else if ((*(_WORD *)(v3 + 168) & 0x200) == 0)
  {
    goto LABEL_19;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 164), 0xAu);
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 4) == 0)
  {
LABEL_20:
    if ((v13 & 8) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }

double sub_10110F498(uint64_t a1)
{
  *(void *)a1 = &off_10189C298;
  *(_DWORD *)(a1 + 204) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return result;
}

void sub_10110F4DC(PB::Base *this)
{
  *(void *)this = &off_10189C298;
  uint64_t v2 = *((void *)this + 22);
  *((void *)this + 22) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }

  unint64_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }

  unint64_t v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }

  float v6 = (void *)*((void *)this + 10);
  if (v6)
  {
    *((void *)this + 11) = v6;
    operator delete(v6);
  }

  __int16 v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 8) = v7;
    operator delete(v7);
  }

  float v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 5) = v8;
    operator delete(v8);
  }

  float v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    *((void *)this + 2) = v9;
    operator delete(v9);
  }

  PB::Base::~Base(this);
}

void sub_10110F594(PB::Base *a1)
{
}

uint64_t sub_10110F5A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189C298;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  float v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  __int16 v7 = (char *)(a1 + 152);
  *(_DWORD *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  if ((*(_BYTE *)(a2 + 204) & 1) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 184);
    *(_BYTE *)(a1 + 204) = 1;
    *(void *)(a1 + 184) = v8;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( v7,  *(char **)(a2 + 152),  *(void *)(a2 + 160),  (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
    sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  char v9 = *(_BYTE *)(a2 + 204);
  if ((v9 & 2) != 0)
  {
    int v17 = *(_DWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 204) |= 2u;
    *(_DWORD *)(a1 + 192) = v17;
    char v9 = *(_BYTE *)(a2 + 204);
    if ((v9 & 8) == 0)
    {
LABEL_7:
      if ((v9 & 0x10) == 0) {
        goto LABEL_8;
      }
LABEL_22:
      char v19 = *(_BYTE *)(a2 + 201);
      *(_BYTE *)(a1 + 204) |= 0x10u;
      *(_BYTE *)(a1 + 201) = v19;
      if ((*(_BYTE *)(a2 + 204) & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(a2 + 204) & 8) == 0)
  {
    goto LABEL_7;
  }

  char v18 = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 204) |= 8u;
  *(_BYTE *)(a1 + 200) = v18;
  char v9 = *(_BYTE *)(a2 + 204);
  if ((v9 & 0x10) != 0) {
    goto LABEL_22;
  }
LABEL_8:
  if ((v9 & 0x20) != 0)
  {
LABEL_9:
    char v10 = *(_BYTE *)(a2 + 202);
    *(_BYTE *)(a1 + 204) |= 0x20u;
    *(_BYTE *)(a1 + 202) = v10;
  }

uint64_t sub_10110F7B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 176);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "TNBFrame");
  }
  if ((*(_BYTE *)(a1 + 204) & 2) != 0) {
    PB::TextFormatter::format(this, "dotQuality", *(float *)(a1 + 192));
  }
  float v6 = *(float **)(a1 + 8);
  __int16 v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "dotVector", v8);
  }

  if ((*(_BYTE *)(a1 + 204) & 8) != 0) {
    PB::TextFormatter::format(this, "fusingGaze", *(_BYTE *)(a1 + 200));
  }
  char v9 = *(float **)(a1 + 32);
  char v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(this, "gazeVector", v11);
  }

  char v12 = *(_BYTE *)(a1 + 204);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "hasStep", *(_BYTE *)(a1 + 201));
    char v12 = *(_BYTE *)(a1 + 204);
  }

  if ((v12 & 0x20) != 0) {
    PB::TextFormatter::format(this, "hasValidTNBFrame", *(_BYTE *)(a1 + 202));
  }
  uint64_t v13 = *(float **)(a1 + 56);
  uint64_t v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(this, "lpfInertialRotationRate", v15);
  }

  float v16 = *(float **)(a1 + 80);
  int v17 = *(float **)(a1 + 88);
  while (v16 != v17)
  {
    float v18 = *v16++;
    PB::TextFormatter::format(this, "lpfInertialUserAccel", v18);
  }

  char v19 = *(float **)(a1 + 104);
  char v20 = *(float **)(a1 + 112);
  while (v19 != v20)
  {
    float v21 = *v19++;
    PB::TextFormatter::format(this, "rawDoTVector", v21);
  }

  char v22 = *(float **)(a1 + 128);
  unsigned int v23 = *(float **)(a1 + 136);
  while (v22 != v23)
  {
    float v24 = *v22++;
    PB::TextFormatter::format(this, "rawInertialRotationRate", v24);
  }

  char v25 = *(float **)(a1 + 152);
  int v26 = *(float **)(a1 + 160);
  while (v25 != v26)
  {
    float v27 = *v25++;
    PB::TextFormatter::format(this, "rawInertialUserAccel", v27);
  }

  char v28 = *(_BYTE *)(a1 + 204);
  if ((v28 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 196));
    char v28 = *(_BYTE *)(a1 + 204);
  }

  if ((v28 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 184));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10110F9F4(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v224 = a1 + 72;
    v226 = (void **)(a1 + 128);
    v227 = (void **)(a1 + 56);
    v225 = (void **)(a1 + 104);
    uint64_t v222 = a1 + 120;
    uint64_t v223 = a1 + 144;
    char v10 = (void **)(a1 + 32);
    float v11 = (void **)(a1 + 8);
    uint64_t v220 = a1 + 24;
    uint64_t v221 = a1 + 48;
    char v12 = (void **)(a1 + 80);
    uint64_t v13 = (void **)(a1 + 152);
    uint64_t v218 = a1 + 168;
    uint64_t v219 = a1 + 96;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

LABEL_346:
          unint64_t v4 = *((void *)this + 1);
          unint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || *((_BYTE *)this + 24)) {
            return v6 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_346;
      }
    }

    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v17 = 0LL;
    if (v4 > v5) {
      unint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      unint64_t v23 = v4 + 1;
      char v24 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v4 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

uint64_t sub_1011109E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 204) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 184), 1u);
  }
  unint64_t v4 = *(float **)(v3 + 152);
  unint64_t v5 = *(float **)(v3 + 160);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  __int16 v7 = *(float **)(v3 + 80);
  float v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  char v10 = *(float **)(v3 + 8);
  float v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12, 4u);
  }

  uint64_t v13 = *(float **)(v3 + 32);
  uint64_t v14 = *(float **)(v3 + 40);
  while (v13 != v14)
  {
    float v15 = *v13++;
    double result = PB::Writer::write(this, v15, 5u);
  }

  char v16 = *(_BYTE *)(v3 + 204);
  if ((v16 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 192), 6u);
    char v16 = *(_BYTE *)(v3 + 204);
    if ((v16 & 8) == 0)
    {
LABEL_17:
      if ((v16 & 0x10) == 0) {
        goto LABEL_18;
      }
      goto LABEL_36;
    }
  }

  else if ((*(_BYTE *)(v3 + 204) & 8) == 0)
  {
    goto LABEL_17;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 200), 7u);
  char v16 = *(_BYTE *)(v3 + 204);
  if ((v16 & 0x10) == 0)
  {
LABEL_18:
    if ((v16 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

uint64_t sub_101110B9C(uint64_t result)
{
  *(void *)double result = &off_10189C2D0;
  *(_DWORD *)(result + 120) = 0;
  return result;
}

void sub_101110BB4(PB::Base *a1)
{
}

float sub_101110BC8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189C2D0;
  *(_DWORD *)(a1 + 120) = 0;
  int v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 120) = 1;
    *(void *)(a1 + 8) = v4;
    int v2 = *(_DWORD *)(a2 + 120);
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 108);
    v3 |= 0x1000000u;
    *(_DWORD *)(a1 + 120) = v3;
    *(_DWORD *)(a1 + 108) = v4;
    int v2 = *(_DWORD *)(a2 + 120);
  }

uint64_t sub_101110ED8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "biasFraction", *(float *)(a1 + 16));
    int v5 = *(_DWORD *)(a1 + 120);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "cookie", *(_DWORD *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }

uint64_t sub_101111268(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101111CB4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 120);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 120);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }

  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 2u);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }

uint64_t sub_101111FCC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C308;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101111FE4(PB::Base *a1)
{
}

uint64_t sub_101111FF8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189C308;
  *(_DWORD *)(result + 24) = 0;
  char v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 24) = 1;
    *(void *)(result + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 20) = v5;
    char v2 = *(_BYTE *)(a2 + 24);
  }

uint64_t sub_101112068(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "proximityState", *(_DWORD *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 24) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "proximityRawValue", *(_DWORD *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 1) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011120F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101112478(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        return result;
      }
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 24) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  }
  return result;
}

void *sub_1011124F0(void *result)
{
  *uint64_t result = &off_10189C340;
  *(void *)((char *)result + 164) = 0LL;
  return result;
}

void sub_101112508(PB::Base *a1)
{
}

uint64_t sub_10111251C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189C340;
  *(void *)(result + 164) = 0LL;
  uint64_t v2 = *(void *)(a2 + 164);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 40);
    uint64_t v3 = 16LL;
    *(void *)(result + 164) = 16LL;
    *(void *)(result + 40) = v4;
    uint64_t v2 = *(void *)(a2 + 164);
    if ((v2 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 104);
    v3 |= 0x80000uLL;
    *(void *)(result + 164) = v3;
    *(_DWORD *)(result + 104) = v5;
    uint64_t v2 = *(void *)(a2 + 164);
  }

uint64_t sub_1011128F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "ambientRatePerSPAD", *(float *)(a1 + 48));
    uint64_t v5 = *(void *)(a1 + 164);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }

  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "ambientRateTotal", *(float *)(a1 + 52));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }

uint64_t sub_101112D60(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

LABEL_444:
          *(_DWORD *)(a1 + 124) = v130;
          goto LABEL_489;
        case 0x15u:
          *(void *)(a1 + 164) |= 0x80000000uLL;
          unint64_t v133 = *((void *)this + 1);
          unint64_t v134 = *((void *)this + 2);
          uint64_t v135 = *(void *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5LL && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0LL;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)this + 1) = v133 + 1;
              char v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_448;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }

            while (!v14);
LABEL_319:
            LODWORD(v138) = 0;
            goto LABEL_448;
          }

          char v276 = 0;
          unsigned int v277 = 0;
          uint64_t v138 = 0LL;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)this + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v278 = v133 + 1;
              char v279 = *(_BYTE *)(v135 + v133);
              *((void *)this + 1) = v278;
              v138 |= (unint64_t)(v279 & 0x7F) << v276;
              if (v279 < 0)
              {
                v276 += 7;
                unint64_t v133 = v278;
                BOOL v14 = v277++ > 8;
                if (v14) {
                  goto LABEL_319;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v138) = 0;
              }
            }

            break;
          }

LABEL_448:
          *(_DWORD *)(a1 + 152) = v138;
          goto LABEL_489;
        case 0x16u:
          *(void *)(a1 + 164) |= 0x8000uLL;
          unint64_t v141 = *((void *)this + 1);
          unint64_t v142 = *((void *)this + 2);
          uint64_t v143 = *(void *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5LL && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0LL;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)this + 1) = v141 + 1;
              char v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_452;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }

            while (!v14);
LABEL_326:
            LODWORD(v146) = 0;
            goto LABEL_452;
          }

          char v280 = 0;
          unsigned int v281 = 0;
          uint64_t v146 = 0LL;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)this + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v282 = v141 + 1;
              char v283 = *(_BYTE *)(v143 + v141);
              *((void *)this + 1) = v282;
              v146 |= (unint64_t)(v283 & 0x7F) << v280;
              if (v283 < 0)
              {
                v280 += 7;
                unint64_t v141 = v282;
                BOOL v14 = v281++ > 8;
                if (v14) {
                  goto LABEL_326;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v146) = 0;
              }
            }

            break;
          }

LABEL_452:
          *(_DWORD *)(a1 + 88) = v146;
          goto LABEL_489;
        case 0x17u:
          *(void *)(a1 + 164) |= 0x100000uLL;
          unint64_t v149 = *((void *)this + 1);
          unint64_t v150 = *((void *)this + 2);
          uint64_t v151 = *(void *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5LL && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0LL;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)this + 1) = v149 + 1;
              char v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_456;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }

            while (!v14);
LABEL_333:
            LODWORD(v154) = 0;
            goto LABEL_456;
          }

          char v284 = 0;
          unsigned int v285 = 0;
          uint64_t v154 = 0LL;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)this + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v286 = v149 + 1;
              char v287 = *(_BYTE *)(v151 + v149);
              *((void *)this + 1) = v286;
              v154 |= (unint64_t)(v287 & 0x7F) << v284;
              if (v287 < 0)
              {
                v284 += 7;
                unint64_t v149 = v286;
                BOOL v14 = v285++ > 8;
                if (v14) {
                  goto LABEL_333;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v154) = 0;
              }
            }

            break;
          }

        *(_DWORD *)(a1 + 72) = v34;
        goto LABEL_522;
      case 3u:
        *(void *)(a1 + 192) |= 0x10000uLL;
        unint64_t v37 = *((void *)this + 1);
        unint64_t v38 = *((void *)this + 2);
        uint64_t v39 = *(void *)this;
        if (v37 <= 0xFFFFFFFFFFFFFFF5LL && v37 + 10 <= v38)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v42 = 0LL;
          do
          {
            unint64_t v43 = v37 + 1;
            *((void *)this + 1) = v37 + 1;
            char v44 = *(_BYTE *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0) {
              goto LABEL_455;
            }
            v40 += 7;
            unint64_t v37 = v43;
            BOOL v14 = v41++ > 8;
          }

          while (!v14);
LABEL_264:
          LODWORD(v42) = 0;
          goto LABEL_455;
        }

        char v247 = 0;
        char v248 = 0;
        uint64_t v42 = 0LL;
        if (v38 <= v37) {
          unint64_t v38 = *((void *)this + 1);
        }
        while (2)
        {
          if (v38 == v37)
          {
            LODWORD(v42) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unsigned int v249 = v37 + 1;
            unint64_t v250 = *(_BYTE *)(v39 + v37);
            *((void *)this + 1) = v249;
            v42 |= (unint64_t)(v250 & 0x7F) << v247;
            if (v250 < 0)
            {
              v247 += 7;
              unint64_t v37 = v249;
              BOOL v14 = v248++ > 8;
              if (v14) {
                goto LABEL_264;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v42) = 0;
            }
          }

          break;
        }

LABEL_456:
          *(_DWORD *)(a1 + 108) = v154;
          goto LABEL_489;
        case 0x18u:
          *(void *)(a1 + 164) |= 0x100uLL;
          unint64_t v157 = *((void *)this + 1);
          if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v157);
          goto LABEL_391;
        case 0x19u:
          *(void *)(a1 + 164) |= 0x200000uLL;
          unint64_t v158 = *((void *)this + 1);
          if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v158);
          goto LABEL_391;
        case 0x1Au:
          *(void *)(a1 + 164) |= 0x200uLL;
          unint64_t v159 = *((void *)this + 1);
          if (v159 <= 0xFFFFFFFFFFFFFFFBLL && v159 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v159);
LABEL_391:
            uint64_t v21 = *((void *)this + 1) + 4LL;
LABEL_392:
            *((void *)this + 1) = v21;
          }

          else
          {
LABEL_165:
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_489;
        case 0x1Bu:
          *(void *)(a1 + 164) |= 0x20000uLL;
          unint64_t v160 = *((void *)this + 1);
          unint64_t v161 = *((void *)this + 2);
          uint64_t v162 = *(void *)this;
          if (v160 <= 0xFFFFFFFFFFFFFFF5LL && v160 + 10 <= v161)
          {
            char v163 = 0;
            unsigned int v164 = 0;
            uint64_t v165 = 0LL;
            do
            {
              unint64_t v166 = v160 + 1;
              *((void *)this + 1) = v160 + 1;
              char v167 = *(_BYTE *)(v162 + v160);
              v165 |= (unint64_t)(v167 & 0x7F) << v163;
              if ((v167 & 0x80) == 0) {
                goto LABEL_460;
              }
              v163 += 7;
              unint64_t v160 = v166;
              BOOL v14 = v164++ > 8;
            }

            while (!v14);
LABEL_340:
            LODWORD(v165) = 0;
            goto LABEL_460;
          }

          char v288 = 0;
          unsigned int v289 = 0;
          uint64_t v165 = 0LL;
          if (v161 <= v160) {
            unint64_t v161 = *((void *)this + 1);
          }
          while (2)
          {
            if (v161 == v160)
            {
              LODWORD(v165) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v290 = v160 + 1;
              char v291 = *(_BYTE *)(v162 + v160);
              *((void *)this + 1) = v290;
              v165 |= (unint64_t)(v291 & 0x7F) << v288;
              if (v291 < 0)
              {
                v288 += 7;
                unint64_t v160 = v290;
                BOOL v14 = v289++ > 8;
                if (v14) {
                  goto LABEL_340;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v165) = 0;
              }
            }

            break;
          }

LABEL_460:
          *(_DWORD *)(a1 + 96) = v165;
          goto LABEL_489;
        case 0x1Cu:
          *(void *)(a1 + 164) |= 0x40000uLL;
          unint64_t v168 = *((void *)this + 1);
          unint64_t v169 = *((void *)this + 2);
          uint64_t v170 = *(void *)this;
          if (v168 <= 0xFFFFFFFFFFFFFFF5LL && v168 + 10 <= v169)
          {
            char v171 = 0;
            unsigned int v172 = 0;
            uint64_t v173 = 0LL;
            do
            {
              unint64_t v174 = v168 + 1;
              *((void *)this + 1) = v168 + 1;
              char v175 = *(_BYTE *)(v170 + v168);
              v173 |= (unint64_t)(v175 & 0x7F) << v171;
              if ((v175 & 0x80) == 0) {
                goto LABEL_464;
              }
              v171 += 7;
              unint64_t v168 = v174;
              BOOL v14 = v172++ > 8;
            }

            while (!v14);
LABEL_347:
            LODWORD(v173) = 0;
            goto LABEL_464;
          }

          char v292 = 0;
          unsigned int v293 = 0;
          uint64_t v173 = 0LL;
          if (v169 <= v168) {
            unint64_t v169 = *((void *)this + 1);
          }
          while (2)
          {
            if (v169 == v168)
            {
              LODWORD(v173) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v294 = v168 + 1;
              char v295 = *(_BYTE *)(v170 + v168);
              *((void *)this + 1) = v294;
              v173 |= (unint64_t)(v295 & 0x7F) << v292;
              if (v295 < 0)
              {
                v292 += 7;
                unint64_t v168 = v294;
                BOOL v14 = v293++ > 8;
                if (v14) {
                  goto LABEL_347;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v173) = 0;
              }
            }

            break;
          }

LABEL_464:
          *(_DWORD *)(a1 + 100) = v173;
          goto LABEL_489;
        case 0x1Du:
          *(void *)(a1 + 164) |= 0x10000uLL;
          unint64_t v176 = *((void *)this + 1);
          unint64_t v177 = *((void *)this + 2);
          uint64_t v178 = *(void *)this;
          if (v176 <= 0xFFFFFFFFFFFFFFF5LL && v176 + 10 <= v177)
          {
            char v179 = 0;
            unsigned int v180 = 0;
            uint64_t v181 = 0LL;
            do
            {
              unint64_t v182 = v176 + 1;
              *((void *)this + 1) = v176 + 1;
              char v183 = *(_BYTE *)(v178 + v176);
              v181 |= (unint64_t)(v183 & 0x7F) << v179;
              if ((v183 & 0x80) == 0) {
                goto LABEL_468;
              }
              v179 += 7;
              unint64_t v176 = v182;
              BOOL v14 = v180++ > 8;
            }

            while (!v14);
LABEL_354:
            LODWORD(v181) = 0;
            goto LABEL_468;
          }

          char v296 = 0;
          unsigned int v297 = 0;
          uint64_t v181 = 0LL;
          if (v177 <= v176) {
            unint64_t v177 = *((void *)this + 1);
          }
          while (2)
          {
            if (v177 == v176)
            {
              LODWORD(v181) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v298 = v176 + 1;
              char v299 = *(_BYTE *)(v178 + v176);
              *((void *)this + 1) = v298;
              v181 |= (unint64_t)(v299 & 0x7F) << v296;
              if (v299 < 0)
              {
                v296 += 7;
                unint64_t v176 = v298;
                BOOL v14 = v297++ > 8;
                if (v14) {
                  goto LABEL_354;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v181) = 0;
              }
            }

            break;
          }

        *(_DWORD *)(a1 + 148) = v66;
        goto LABEL_522;
      case 7u:
        *(void *)(a1 + 192) |= 0x2000uLL;
        unint64_t v69 = *((void *)this + 1);
        unint64_t v70 = *((void *)this + 2);
        uint64_t v71 = *(void *)this;
        if (v69 <= 0xFFFFFFFFFFFFFFF5LL && v69 + 10 <= v70)
        {
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v74 = 0LL;
          do
          {
            unint64_t v75 = v69 + 1;
            *((void *)this + 1) = v69 + 1;
            char v76 = *(_BYTE *)(v71 + v69);
            v74 |= (unint64_t)(v76 & 0x7F) << v72;
            if ((v76 & 0x80) == 0) {
              goto LABEL_467;
            }
            v72 += 7;
            unint64_t v69 = v75;
            BOOL v14 = v73++ > 8;
          }

          while (!v14);
LABEL_292:
          LODWORD(v74) = 0;
          goto LABEL_467;
        }

        char v263 = 0;
        char v264 = 0;
        uint64_t v74 = 0LL;
        if (v70 <= v69) {
          unint64_t v70 = *((void *)this + 1);
        }
        while (2)
        {
          if (v70 == v69)
          {
            LODWORD(v74) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unsigned int v265 = v69 + 1;
            unint64_t v266 = *(_BYTE *)(v71 + v69);
            *((void *)this + 1) = v265;
            v74 |= (unint64_t)(v266 & 0x7F) << v263;
            if (v266 < 0)
            {
              v263 += 7;
              unint64_t v69 = v265;
              BOOL v14 = v264++ > 8;
              if (v14) {
                goto LABEL_292;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v74) = 0;
            }
          }

          break;
        }

LABEL_472:
          *(void *)(a1 + 32) = v189;
          goto LABEL_489;
        case 0x1Fu:
          *(void *)(a1 + 164) |= 4uLL;
          unint64_t v192 = *((void *)this + 1);
          unint64_t v193 = *((void *)this + 2);
          uint64_t v194 = *(void *)this;
          if (v192 <= 0xFFFFFFFFFFFFFFF5LL && v192 + 10 <= v193)
          {
            char v195 = 0;
            unsigned int v196 = 0;
            uint64_t v197 = 0LL;
            do
            {
              unint64_t v198 = v192 + 1;
              *((void *)this + 1) = v192 + 1;
              char v199 = *(_BYTE *)(v194 + v192);
              v197 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0) {
                goto LABEL_476;
              }
              v195 += 7;
              unint64_t v192 = v198;
              BOOL v14 = v196++ > 8;
            }

            while (!v14);
LABEL_368:
            uint64_t v197 = 0LL;
            goto LABEL_476;
          }

          char v304 = 0;
          unsigned int v305 = 0;
          uint64_t v197 = 0LL;
          if (v193 <= v192) {
            unint64_t v193 = *((void *)this + 1);
          }
          while (2)
          {
            if (v193 == v192)
            {
              uint64_t v197 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v306 = v192 + 1;
              char v307 = *(_BYTE *)(v194 + v192);
              *((void *)this + 1) = v306;
              v197 |= (unint64_t)(v307 & 0x7F) << v304;
              if (v307 < 0)
              {
                v304 += 7;
                unint64_t v192 = v306;
                BOOL v14 = v305++ > 8;
                if (v14) {
                  goto LABEL_368;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v197 = 0LL;
              }
            }

            break;
          }

          int v4 = *((void *)this + 1);
          uint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this, v17 >> 3, v17 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_472;
      }
    }

    unint64_t v20 = 0;
    uint64_t v21 = 0;
    unint64_t v17 = 0LL;
    if (v4 > v5) {
      uint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      int v22 = v4 + 1;
      unint64_t v23 = *(_BYTE *)(v14 + v4);
      *((void *)this + 1) = v22;
      v17 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      int v4 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

LABEL_476:
          *(void *)(a1 + 24) = v197;
          goto LABEL_489;
        case 0x20u:
          *(void *)(a1 + 164) |= 1uLL;
          unint64_t v200 = *((void *)this + 1);
          unint64_t v201 = *((void *)this + 2);
          uint64_t v202 = *(void *)this;
          if (v200 <= 0xFFFFFFFFFFFFFFF5LL && v200 + 10 <= v201)
          {
            char v203 = 0;
            unsigned int v204 = 0;
            uint64_t v205 = 0LL;
            do
            {
              unint64_t v206 = v200 + 1;
              *((void *)this + 1) = v200 + 1;
              char v207 = *(_BYTE *)(v202 + v200);
              v205 |= (unint64_t)(v207 & 0x7F) << v203;
              if ((v207 & 0x80) == 0) {
                goto LABEL_480;
              }
              v203 += 7;
              unint64_t v200 = v206;
              BOOL v14 = v204++ > 8;
            }

            while (!v14);
LABEL_375:
            uint64_t v205 = 0LL;
            goto LABEL_480;
          }

          char v308 = 0;
          unsigned int v309 = 0;
          uint64_t v205 = 0LL;
          if (v201 <= v200) {
            unint64_t v201 = *((void *)this + 1);
          }
          while (2)
          {
            if (v201 == v200)
            {
              uint64_t v205 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v310 = v200 + 1;
              char v311 = *(_BYTE *)(v202 + v200);
              *((void *)this + 1) = v310;
              v205 |= (unint64_t)(v311 & 0x7F) << v308;
              if (v311 < 0)
              {
                v308 += 7;
                unint64_t v200 = v310;
                BOOL v14 = v309++ > 8;
                if (v14) {
                  goto LABEL_375;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v205 = 0LL;
              }
            }

            break;
          }

        *(void *)(a1 + 24) = v101;
        goto LABEL_522;
      case 0xDu:
        *(void *)(a1 + 192) |= 2uLL;
        char v104 = *((void *)this + 1);
        unsigned int v105 = *((void *)this + 2);
        uint64_t v106 = *(void *)this;
        if (v104 <= 0xFFFFFFFFFFFFFFF5LL && v104 + 10 <= v105)
        {
          unint64_t v107 = 0;
          char v108 = 0;
          unint64_t v109 = 0LL;
          do
          {
            unint64_t v110 = v104 + 1;
            *((void *)this + 1) = v104 + 1;
            uint64_t v111 = *(_BYTE *)(v106 + v104);
            v109 |= (unint64_t)(v111 & 0x7F) << v107;
            if ((v111 & 0x80) == 0) {
              goto LABEL_479;
            }
            v107 += 7;
            char v104 = v110;
            BOOL v14 = v108++ > 8;
          }

          while (!v14);
LABEL_320:
          unint64_t v109 = 0LL;
          goto LABEL_479;
        }

        char v279 = 0;
        char v280 = 0;
        unint64_t v109 = 0LL;
        if (v105 <= v104) {
          unsigned int v105 = *((void *)this + 1);
        }
        while (2)
        {
          if (v105 == v104)
          {
            unint64_t v109 = 0LL;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unsigned int v281 = v104 + 1;
            unint64_t v282 = *(_BYTE *)(v106 + v104);
            *((void *)this + 1) = v281;
            v109 |= (unint64_t)(v282 & 0x7F) << v279;
            if (v282 < 0)
            {
              v279 += 7;
              char v104 = v281;
              BOOL v14 = v280++ > 8;
              if (v14) {
                goto LABEL_320;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              unint64_t v109 = 0LL;
            }
          }

          break;
        }

LABEL_484:
          *(void *)(a1 + 16) = v213;
          goto LABEL_489;
        case 0x22u:
          *(void *)(a1 + 164) |= 0x800uLL;
          unint64_t v216 = *((void *)this + 1);
          unint64_t v217 = *((void *)this + 2);
          uint64_t v218 = *(void *)this;
          if (v216 <= 0xFFFFFFFFFFFFFFF5LL && v216 + 10 <= v217)
          {
            char v219 = 0;
            unsigned int v220 = 0;
            uint64_t v221 = 0LL;
            do
            {
              unint64_t v222 = v216 + 1;
              *((void *)this + 1) = v216 + 1;
              char v223 = *(_BYTE *)(v218 + v216);
              v221 |= (unint64_t)(v223 & 0x7F) << v219;
              if ((v223 & 0x80) == 0) {
                goto LABEL_488;
              }
              v219 += 7;
              unint64_t v216 = v222;
              BOOL v14 = v220++ > 8;
            }

            while (!v14);
LABEL_389:
            LODWORD(v221) = 0;
            goto LABEL_488;
          }

          char v316 = 0;
          unsigned int v317 = 0;
          uint64_t v221 = 0LL;
          if (v217 <= v216) {
            unint64_t v217 = *((void *)this + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_489;
      }

      while (1)
      {
        if (v217 == v216)
        {
          LODWORD(v221) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_488;
        }

        unint64_t v318 = v216 + 1;
        char v319 = *(_BYTE *)(v218 + v216);
        *((void *)this + 1) = v318;
        v221 |= (unint64_t)(v319 & 0x7F) << v316;
        if ((v319 & 0x80) == 0) {
          break;
        }
        v316 += 7;
        unint64_t v216 = v318;
        BOOL v14 = v317++ > 8;
        if (v14) {
          goto LABEL_389;
        }
      }

      if (*((_BYTE *)this + 24)) {
        LODWORD(v221) = 0;
      }
LABEL_488:
      *(_DWORD *)(a1 + 72) = v221;
LABEL_489:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

uint64_t sub_1011146D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 164);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    uint64_t v4 = *(void *)(v3 + 164);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_38;
    }
  }

  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 2u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_39;
  }

uint64_t sub_101114AAC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C378;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_101114AC4(PB::Base *a1)
{
}

uint64_t sub_101114AD8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189C378;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_101114B28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "proximityState", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101114B90(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101114E1C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_101114E74(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C3B0;
  *(_DWORD *)(result + 28) = -1;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_101114E94(PB::Base *a1)
{
}

uint64_t sub_101114EA8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189C3B0;
  *(_DWORD *)(result + 28) = -1;
  *(_DWORD *)(result + 48) = 0;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(result + 48) = 1;
    *(void *)(result + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 40);
    v3 |= 0x80u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 40) = v5;
    __int16 v2 = *(_WORD *)(a2 + 48);
  }

uint64_t sub_101114FC8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "currentMeanAngleY", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "deltaMeanAngleY", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_101115118(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011156B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 2u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_1011157D0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C3E8;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1011157E8(PB::Base *a1)
{
}

uint64_t sub_1011157FC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189C3E8;
  *(_DWORD *)(result + 60) = 0;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    __int16 v3 = 2;
    *(_WORD *)(result + 60) = 2;
    *(void *)(result + 16) = v4;
    __int16 v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 60) = v3;
    *(void *)(result + 8) = v5;
    __int16 v2 = *(_WORD *)(a2 + 60);
  }

uint64_t sub_10111594C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "averageFilteredPressure", *(float *)(a1 + 24));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "deltaStepCount", *(_DWORD *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_101115ADC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10111630C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_101116464(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C420;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_10111647C(PB::Base *a1)
{
}

uint64_t sub_101116490(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189C420;
  *(_DWORD *)(result + 92) = 0;
  int v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    int v3 = 8;
    *(_DWORD *)(result + 92) = 8;
    *(void *)(result + 32) = v4;
    int v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(result + 92) = v3;
    *(void *)(result + 16) = v5;
    int v2 = *(_DWORD *)(a2 + 92);
  }

uint64_t sub_101116688(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "altitudeDelta", *(float *)(a1 + 48));
    int v5 = *(_DWORD *)(a1 + 92);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }

  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "altitudeDeltaStreaming", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }

uint64_t sub_1011168D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011170FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 92);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    int v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }

uint64_t sub_1011172FC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C458;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101117310(PB::Base *this)
{
  *(void *)this = &off_10189C458;
  int v4 = (void **)*((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  PB::Base::~Base(this);
}

void sub_101117350(PB::Base *a1)
{
}

uint64_t sub_101117364(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189C458;
  *(void *)(a1 + 8) = 0LL;
  int v4 = (void ***)(a1 + 8);
  *(_DWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = 1;
    *(void *)(a1 + 16) = v5;
  }

  uint64_t v6 = *(__int128 **)(a2 + 8);
  if (v6)
  {
    int v7 = (void **)operator new(0x18uLL);
    uint64_t v8 = v7;
    if (*((char *)v6 + 23) < 0)
    {
      sub_1010DD48C(v7, *(void **)v6, *((void *)v6 + 1));
      unsigned int v10 = *v4;
      *int v4 = v8;
      if (v10) {
        sub_10058A4FC((int)v4, v10);
      }
    }

    else
    {
      __int128 v9 = *v6;
      v7[2] = (void *)*((void *)v6 + 2);
      *(_OWORD *)int v7 = v9;
      *int v4 = v7;
    }
  }

  char v11 = *(_BYTE *)(a2 + 32);
  if ((v11 & 2) != 0)
  {
    int v12 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) |= 2u;
    *(_DWORD *)(a1 + 24) = v12;
    char v11 = *(_BYTE *)(a2 + 32);
  }

  if ((v11 & 4) != 0)
  {
    char v13 = *(_BYTE *)(a2 + 28);
    *(_BYTE *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 28) = v13;
  }

  return a1;
}

uint64_t sub_10111745C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 32) & 4) != 0) {
    PB::TextFormatter::format(this, "active", *(_BYTE *)(a1 + 28));
  }
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format(this, "clientId");
  }
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "threshold", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011174F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void ***)(a1 + 8);
    while (2)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        unint64_t v12 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v18 = v2 + 1;
          char v19 = *(_BYTE *)(v9 + v2);
          *((void *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0) {
            goto LABEL_21;
          }
          v16 += 7;
          unint64_t v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            unint64_t v12 = 0LL;
            goto LABEL_21;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0LL;
        while (1)
        {
          unint64_t v13 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v14 = *(_BYTE *)(v9 + v2);
          v12 |= (unint64_t)(v14 & 0x7F) << v10;
          if ((v14 & 0x80) == 0) {
            break;
          }
          v10 += 7;
          unint64_t v2 = v13;
          if (v11++ > 8) {
            goto LABEL_20;
          }
        }

uint64_t sub_10111778C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 32) & 1) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4) {
    uint64_t result = PB::Writer::write(this, v4, 2LL);
  }
  char v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 3u);
    char v5 = *(_BYTE *)(v3 + 32);
  }

  if ((v5 & 4) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 28), 4u);
  }
  return result;
}

uint64_t sub_101117810(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C490;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_101117828(PB::Base *a1)
{
}

uint64_t sub_10111783C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189C490;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }

  return result;
}

uint64_t sub_101117868(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011178B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101117AE8(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_101117B08(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C4C8;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_101117B20(PB::Base *a1)
{
}

uint64_t sub_101117B34(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189C4C8;
  *(_DWORD *)(result + 96) = 0;
  int v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 40);
    int v3 = 16;
    *(_DWORD *)(result + 96) = 16;
    *(void *)(result + 40) = v4;
    int v2 = *(_DWORD *)(a2 + 96);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(result + 96) = v3;
    *(void *)(result + 16) = v5;
    int v2 = *(_DWORD *)(a2 + 96);
  }

uint64_t sub_101117D48(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "doingBiasEstimation", *(_BYTE *)(a1 + 92));
    int v5 = *(_DWORD *)(a1 + 96);
    if ((v5 & 0x20000) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }

  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "doingYawCorrection", *(_BYTE *)(a1 + 93));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

uint64_t sub_101117FB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011186AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 96);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    int v4 = *(_DWORD *)(v3 + 96);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }

void sub_1011188CC(PB::Base *a1)
{
}

uint64_t sub_1011188E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "name", *(_DWORD *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 16);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "value", *(float *)(a1 + 12));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101118948(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101118BD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 16);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 12), 2u);
  }
  return result;
}

uint64_t sub_101118C2C(uint64_t result)
{
  *(void *)uint64_t result = off_10189C538;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_101118C44(void **a1)
{
  *a1 = off_10189C538;
  unint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_101118C8C(void **a1)
{
  *a1 = off_10189C538;
  uint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

uint64_t sub_101118CD8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189C538;
  *(void *)(a1 + 8) = 0LL;
  char v4 = (char **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 48) = 0;
  char v5 = *(uint64_t **)(a2 + 8);
  uint64_t v6 = *(uint64_t **)(a2 + 16);
  while (v5 != v6)
    sub_101118D84(v4, *v5++);
  char v7 = *(_BYTE *)(a2 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 48) |= 2u;
    *(void *)(a1 + 40) = v8;
    char v7 = *(_BYTE *)(a2 + 48);
  }

  if ((v7 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 32);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(void *)(a1 + 32) = v9;
  }

  return a1;
}

uint64_t sub_101118D84(char **a1, uint64_t a2)
{
  char v4 = operator new(0x18uLL);
  char v5 = v4;
  *(void *)char v4 = &off_10189C500;
  v4[2] = 0;
  v4[4] = 0;
  char v6 = *(_BYTE *)(a2 + 16);
  if ((v6 & 1) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 8);
    *((_BYTE *)v4 + 16) = 1;
    v4[2] = v8;
    char v7 = 3;
    if ((v6 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v7 = 2;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
LABEL_5:
    int v9 = *(_DWORD *)(a2 + 12);
    *((_BYTE *)v4 + 16) = v7;
    v4[3] = v9;
  }

void sub_101118EEC(_Unwind_Exception *a1)
{
}

uint64_t sub_101118F0C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(uint64_t **)(a1 + 8);
  char v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))( v7,  this,  "blendShapeCoefficients");
  }

  char v8 = *(_BYTE *)(a1 + 48);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 32));
    char v8 = *(_BYTE *)(a1 + 48);
  }

  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101118FB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (char **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        unint64_t v12 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v18 = v2 + 1;
          char v19 = *(_BYTE *)(v9 + v2);
          *((void *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0) {
            goto LABEL_21;
          }
          v16 += 7;
          unint64_t v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            unint64_t v12 = 0LL;
            goto LABEL_21;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1011191F8(char **a1)
{
  unint64_t v2 = operator new(0x18uLL);
  *(void *)unint64_t v2 = &off_10189C500;
  v2[2] = 0;
  v2[4] = 0;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  char v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    unint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    char v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    uint64_t v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      char v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    unint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)char v5 = v2;
    char v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_101119324(_Unwind_Exception *a1)
{
}

uint64_t sub_101119340(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base ***)(result + 8);
  char v5 = *(const PB::Base ***)(result + 16);
  while (v4 != v5)
  {
    char v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 1u);
  }

  char v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
    char v7 = *(_BYTE *)(v3 + 48);
  }

  if ((v7 & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  }
  return result;
}

uint64_t sub_1011193C4(uint64_t result)
{
  *(void *)uint64_t result = &off_10189C570;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1011193DC(PB::Base *a1)
{
}

uint64_t sub_1011193F0(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189C570;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_101119440(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "isCovered", *(_BYTE *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011194A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10111968C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

double sub_1011196E4(uint64_t a1)
{
  *(void *)a1 = &off_10189C5A8;
  *(_DWORD *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_101119708(PB::Base *this)
{
  *(void *)this = &off_10189C5A8;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101119758(PB::Base *a1)
{
}

uint64_t sub_10111976C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189C5A8;
  *(_OWORD *)(a1 + 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_WORD *)(a2 + 96) & 2) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 64);
    *(_WORD *)(a1 + 96) = 2;
    *(void *)(a1 + 64) = v5;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }

  __int16 v6 = *(_WORD *)(a2 + 96);
  if ((v6 & 8) != 0)
  {
    int v9 = *(_DWORD *)(a2 + 76);
    *(_WORD *)(a1 + 96) |= 8u;
    *(_DWORD *)(a1 + 76) = v9;
    __int16 v6 = *(_WORD *)(a2 + 96);
    if ((v6 & 0x10) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0) {
        goto LABEL_8;
      }
      goto LABEL_17;
    }
  }

  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_7;
  }

  int v10 = *(_DWORD *)(a2 + 80);
  *(_WORD *)(a1 + 96) |= 0x10u;
  *(_DWORD *)(a1 + 80) = v10;
  __int16 v6 = *(_WORD *)(a2 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

uint64_t sub_10111990C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(float **)(a1 + 32);
  __int16 v6 = *(float **)(a1 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "accel", v7);
  }

  uint64_t v8 = *(float **)(a1 + 8);
  int v9 = *(float **)(a1 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "accelFiltered", v10);
  }

  __int16 v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 1) != 0)
  {
    PB::TextFormatter::format(this, "faceDownLookbackTimestamp", *(double *)(a1 + 56));
    __int16 v11 = *(_WORD *)(a1 + 96);
    if ((v11 & 4) == 0)
    {
LABEL_7:
      if ((v11 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
  }

  else if ((v11 & 4) == 0)
  {
    goto LABEL_7;
  }

  PB::TextFormatter::format(this, "faceDownState", *(_DWORD *)(a1 + 72));
  __int16 v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 8) == 0)
  {
LABEL_8:
    if ((v11 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }

BOOL sub_101119AC4(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    char v12 = (void **)(a1 + 32);
    uint64_t v13 = a1 + 48;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_10111A2D8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_WORD *)(result + 96) & 2) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 64), 1u);
  }
  unint64_t v4 = *(float **)(v3 + 32);
  unint64_t v5 = *(float **)(v3 + 40);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  float v7 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 8) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 76), 4u);
    __int16 v10 = *(_WORD *)(v3 + 96);
    if ((v10 & 0x10) == 0)
    {
LABEL_11:
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }

  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_11;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 80), 5u);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x80) == 0)
  {
LABEL_12:
    if ((v10 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }

uint64_t sub_10111A440(uint64_t result)
{
  *(void *)double result = &off_10189C5E0;
  *(_DWORD *)(result + 136) = 0;
  return result;
}

void sub_10111A458(PB::Base *a1)
{
}

float sub_10111A46C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189C5E0;
  *(_DWORD *)(a1 + 136) = 0;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    int v3 = 2;
    *(_DWORD *)(a1 + 136) = 2;
    *(void *)(a1 + 16) = v4;
    int v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 116);
    v3 |= 0x2000000u;
    *(_DWORD *)(a1 + 136) = v3;
    *(_DWORD *)(a1 + 116) = v5;
    int v2 = *(_DWORD *)(a2 + 136);
  }

uint64_t sub_10111A7EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "aperture", *(float *)(a1 + 24));
    int v5 = *(_DWORD *)(a1 + 136);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }

uint64_t sub_10111ABFC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10111B748(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 136);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    int v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }

  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 116), 2u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }

uint64_t sub_10111BAD0(uint64_t result)
{
  *(void *)uint64_t result = off_10189C618;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10111BAE8(PB::Base *this)
{
  *(void *)this = off_10189C618;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10111BB2C(PB::Base *this)
{
  *(void *)this = off_10189C618;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_10111BB74(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189C618;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = 2;
    *(void *)(a1 + 16) = v4;
    char v3 = 3;
    if ((*(_BYTE *)(a2 + 32) & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 1;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    *(_BYTE *)(a1 + 32) = v3;
    *(void *)(a1 + 8) = v5;
  }

uint64_t sub_10111BC08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 32);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10111BC90(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10111BEF4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
  }

  if ((v4 & 1) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  }
  char v5 = *(const PB::Base **)(v3 + 24);
  if (v5) {
    return PB::Writer::writeSubmessage(this, v5, 3u);
  }
  return result;
}

uint64_t sub_10111BF60(uint64_t a1)
{
  *(void *)a1 = 0LL;
  unint64_t v2 = dispatch_queue_create("CMMsl.Writer", 0LL);
  *(void *)(a1 + 8) = v2;
  uint64_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, v2);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 300LL;
  *(_DWORD *)(a1 + 40) = -1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000LL;
  handler[2] = sub_10111C048;
  handler[3] = &unk_10189D198;
  handler[4] = a1;
  dispatch_source_set_event_handler(v3, handler);
  dispatch_source_set_timer( *(dispatch_source_t *)(a1 + 16),  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 16));
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 160) = 0LL;
  deflateInit_((z_streamp)(a1 + 80), -1, "1.2.12", 112);
  return a1;
}

void sub_10111C048(uint64_t a1)
{
}

void sub_10111C050(void *a1)
{
  uint64_t v1 = (void **)(a1 + 7);
  if (a1[7])
  {
    uint64_t v3 = (z_stream *)(a1 + 10);
    while (1)
    {
      int v4 = deflate(v3, 4);
      if (v4) {
        break;
      }
      sub_10111C988((char *)a1);
    }

    if (v4 == 1)
    {
      uint64_t v5 = a1[15];
      uint64_t v6 = v5 + 28;
      size_t v7 = (v5 + 35) & 0xFFFFFFFFFFFFFFF8LL;
      *(_DWORD *)(a1[7] + 12LL) = v5 + 12;
      if (v5 + 28 < v7)
      {
        do
          *((_BYTE *)*v1 + v6++) = 0;
        while (v7 != v6);
      }

      uint64_t v8 = (const void *)a1[7];
      if (*a1)
      {
        (*(void (**)(void, const void *, size_t))(*(void *)*a1 + 24LL))(*a1, v8, v7);
        free(*v1);
      }

      else
      {
        char v9 = (dispatch_queue_s *)a1[1];
        destructor[0] = _NSConcreteStackBlock;
        destructor[1] = 0x40000000LL;
        destructor[2] = sub_10111C9F4;
        destructor[3] = &unk_10189D2A0;
        destructor[4] = v8;
        unsigned int v10 = dispatch_data_create(v8, v7, v9, destructor);
        dispatch_io_write((dispatch_io_t)a1[3], a1[6], v10, (dispatch_queue_t)a1[1], &stru_10189D2E0);
        dispatch_release(v10);
      }

      a1[6] += v7;
      v1[1] = 0LL;
      v1[2] = 0LL;
      void *v1 = 0LL;
      deflateReset(v3);
      dispatch_source_set_timer( (dispatch_source_t)a1[2],  0xFFFFFFFFFFFFFFFFLL,  0xFFFFFFFFFFFFFFFFLL,  (unint64_t)(1000000000LL * a1[4]) >> 1);
    }

    else
    {
      fprintf(__stderrp, "zstream status? Msl %d\n", v4);
    }
  }

void sub_10111C1EC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(dispatch_queue_s **)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000LL;
  v3[2] = sub_10111C244;
  v3[3] = &unk_10189D1B8;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

uint64_t sub_10111C244(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_DWORD *)(v1 + 40) != -1) {
    sub_10128261C();
  }
  *(void *)(v1 + 32) = *(void *)(result + 40);
  return result;
}

uint64_t sub_10111C270(uint64_t a1)
{
  unint64_t v2 = *(dispatch_object_s **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(dispatch_object_s **)(a1 + 16);
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = *(dispatch_object_s **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
  }

  else
  {
    int v5 = *(_DWORD *)(a1 + 40);
    if ((v5 & 0x80000000) == 0) {
      close(v5);
    }
  }

  free(*(void **)(a1 + 56));
  deflateEnd((z_streamp)(a1 + 80));
  return a1;
}

uint64_t sub_10111C2DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = 0LL;
  char v9 = &v8;
  uint64_t v10 = 0x2000000000LL;
  char v11 = 0;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  v6[2] = sub_10111C374;
  v6[3] = &unk_10189D200;
  v6[5] = a1;
  v6[6] = a2;
  int v7 = a3;
  v6[4] = &v8;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v4;
}

dispatch_io_t sub_10111C374(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = open_dprotected_np(*(const char **)(a1 + 48), 16777730, *(_DWORD *)(a1 + 56), 0, 438LL);
  *(_DWORD *)(v2 + 40) = v3;
  if (v3 < 0)
  {
    int v7 = __stderrp;
    uint64_t v8 = "Cannot open Msl file\n";
    size_t v9 = 21LL;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }

  off_t v4 = lseek(v3, 0LL, 2);
  if (v4 < 0)
  {
    int v7 = __stderrp;
    uint64_t v8 = "Cannot seek to end of Msl file\n";
    size_t v9 = 31LL;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }

  off_t v5 = v4;
  if (lseek(*(_DWORD *)(v2 + 40), 0LL, 0) < 0)
  {
    int v7 = __stderrp;
    uint64_t v8 = "Cannot seek to start of Msl file\n";
    size_t v9 = 33LL;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }

  if (v5)
  {
    uint64_t __buf = 0LL;
    if (pread(*(_DWORD *)(v2 + 40), &__buf, 8uLL, 0LL) != 8)
    {
      char v13 = __stderrp;
      BOOL v14 = "Short signature in Msl file\n";
      size_t v15 = 28LL;
      return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
    }

    if (__buf != 0xE020C5BE006C536DLL)
    {
      char v13 = __stderrp;
      BOOL v14 = "Bad signature in Msl file\n";
      size_t v15 = 26LL;
      return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
    }

    unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  }

  else
  {
    unint64_t v6 = 8LL;
    pwrite(*(_DWORD *)(v2 + 40), &unk_1013E14F0, 8uLL, 0LL);
  }

  *(void *)(v2 + 48) = v6;
  dispatch_fd_t v11 = *(_DWORD *)(v2 + 40);
  unint64_t v12 = *(dispatch_queue_s **)(v2 + 8);
  cleanup_handler[0] = _NSConcreteStackBlock;
  cleanup_handler[1] = 0x40000000LL;
  cleanup_handler[2] = sub_10111C57C;
  cleanup_handler[3] = &unk_10189D1D8;
  dispatch_fd_t v17 = v11;
  dispatch_io_t result = dispatch_io_create(1uLL, v11, v12, cleanup_handler);
  *(void *)(v2 + 24) = result;
  if (result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    return result;
  }

  char v13 = __stderrp;
  BOOL v14 = "Cannot create dispatch_io for Msl file\n";
  size_t v15 = 39LL;
  return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
}

uint64_t sub_10111C57C(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t sub_10111C584(void *a1, uint64_t a2, char a3)
{
  *a1 = a2;
  if ((a3 & 1) == 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 24LL))(a2, &unk_1013E14F0, 8LL);
    a1[6] = 8LL;
  }

  return 1LL;
}

void sub_10111C5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000LL;
  v3[2] = sub_10111C62C;
  v3[3] = &unk_10189D220;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_10111C62C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  PB::Writer::Writer((PB::Writer *)&v5);
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 40) + 24LL))(*(void *)(a1 + 40), &v5);
  uint64_t v3 = *(void *)(v2 + 56);
  if (!v3)
  {
    sub_10111C6F0(v2);
    uint64_t v3 = *(void *)(v2 + 56);
  }

  ++*(_DWORD *)(v3 + 16);
  int v4 = v5 - v6;
  sub_10111C7B8((char *)v2, (uint64_t)&v4, 4);
  sub_10111C7B8((char *)v2, v6, v5 - v6);
  if (!*(void *)(v2 + 72)) {
    sub_10111C050((void *)v2);
  }
  PB::Writer::~Writer((PB::Writer *)&v5);
}

void sub_10111C6D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10111C6F0(uint64_t a1)
{
  *(void *)(a1 + 56) = malloc(0x8000uLL);
  *(_OWORD *)(a1 + 64) = xmmword_1013E14E0;
  gettimeofday(&v7, 0LL);
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)uint64_t v2 = 0x5979AAB3D5E07959LL;
  *(void *)(v2 + 8) = 1936614771LL;
  int tv_sec = v7.tv_sec;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = tv_sec;
  *(_DWORD *)(v2 + 24) = 1000 * v7.tv_usec;
  *(void *)(a1 + 104) = v2 + 28;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a1 + 64) - 28;
  unint64_t v4 = 1000000000LL * *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_source_s **)(a1 + 16);
  dispatch_time_t v6 = dispatch_time(0LL, v4);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, v4 >> 1);
}

char *sub_10111C7B8(char *result, uint64_t a2, int a3)
{
  *((void *)result + 10) = a2;
  uint64_t v3 = (z_stream *)(result + 80);
  *((_DWORD *)result + 22) = a3;
  if (a3)
  {
    unint64_t v4 = result;
    do
    {
      dispatch_io_t result = (char *)deflate(v3, 0);
      if (!(_DWORD)result && !*((_DWORD *)v4 + 28)) {
        dispatch_io_t result = sub_10111C988(v4);
      }
    }

    while (*((_DWORD *)v4 + 22));
  }

  return result;
}

void sub_10111C80C(uint64_t a1)
{
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10111C864;
  block[3] = &unk_10189D240;
  block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_10111C864(uint64_t a1)
{
}

void sub_10111C86C(uint64_t a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0LL);
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  v4[2] = sub_10111C8D8;
  v4[3] = &unk_10189D280;
  v4[4] = a1;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void sub_10111C8D8(uint64_t a1)
{
  dispatch_semaphore_t v2 = *(void **)(a1 + 32);
  sub_10111C050(v2);
  uint64_t v3 = (dispatch_io_s *)v2[3];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  v5[2] = sub_10111C95C;
  v5[3] = &unk_10189D260;
  uint64_t v4 = *(void *)(a1 + 40);
  v5[4] = v2;
  v5[5] = v4;
  dispatch_io_barrier(v3, v5);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

uint64_t sub_10111C95C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

char *sub_10111C988(char *result)
{
  uint64_t v1 = result;
  uint64_t v3 = *((void *)result + 8);
  uint64_t v2 = *((void *)result + 9);
  if (v2)
  {
    *((_DWORD *)result + 28) += v2;
    *((void *)result + 8) = v3 + v2;
    *((void *)result + 9) = 0LL;
  }

  else
  {
    *((void *)result + 8) = 2 * v3;
    dispatch_io_t result = (char *)realloc(*((void **)result + 7), 2 * v3);
    *((void *)v1 + 7) = result;
    uint64_t v4 = *((void *)v1 + 15);
    *((void *)v1 + 13) = &result[v4 + 28];
    *((_DWORD *)v1 + 28) = *((_DWORD *)v1 + 16) - v4;
  }

  return result;
}

void sub_10111C9F4(uint64_t a1)
{
}

void sub_10111C9FC(id a1, BOOL a2, dispatch_data_s *a3, int a4)
{
  if (a4 || !a2)
  {
    uint64_t v4 = __stderrp;
    uint64_t v5 = strerror(a4);
    fprintf(v4, "Msl dispatch io write error %s\n", v5);
  }

uint64_t sub_10111CA50(uint64_t a1)
{
  return *(void *)(a1 + 120) + *(void *)(a1 + 48);
}

uint64_t sub_10111CA60(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = (uint64_t *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }

  if (*(char *)(a2 + 63) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v6;
  }

  timeval v7 = (_BYTE *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_1010DD48C(v7, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }

  else
  {
    __int128 v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)timeval v7 = v8;
  }

  __int128 v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0xBFF0000000000000LL;
  char v10 = sub_10117006C(v4);
  *(_BYTE *)(a1 + 136) = v10;
  if ((v10 & 1) == 0)
  {
    if (qword_1019A0590 != -1) {
      dispatch_once(&qword_1019A0590, &stru_10189D320);
    }
    dispatch_fd_t v11 = (os_log_s *)qword_1019A0588;
    if (os_log_type_enabled((os_log_t)qword_1019A0588, OS_LOG_TYPE_ERROR)) {
      sub_101282644(a1, v4, v11);
    }
  }

  return a1;
}

void sub_10111CBA8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10111CC0C(uint64_t a1)
{
  return a1;
}

void sub_10111CC80(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 128);
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1)
  {
    sub_10111C86C(v1);
    sub_10111D88C(v2, 0LL);
  }

uint64_t sub_10111CCC0(uint64_t a1, double a2)
{
  uint64_t v4 = operator new(0xC0uLL);
  sub_10111C1E8();
  sub_10111D88C((uint64_t *)(a1 + 128), (uint64_t)v4);
  uint64_t v5 = *(void *)(a1 + 96);
  if (v5 >= 1) {
    sub_10111C1EC(*(void *)(a1 + 128), v5);
  }
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  time_t v20 = std::chrono::system_clock::to_time_t(&__t);
  unint64_t rep = __t.__d_.__rep_;
  double v7 = (double)__t.__d_.__rep_ / 1000000.0 + -978307200.0;
  sub_100271FC8((uint64_t)&v17);
  uint64_t v8 = v17;
  *(_DWORD *)((char *)&v17 + *(void *)(v17 - 24) + 8) |= 4u;
  *(std::locale::__imp **)((char *)&v18.__loc_.__locale_ + *(void *)(v8 - 24)) = (std::locale::__imp *)6;
  __int128 v9 = (void *)std::ostream::operator<<(v7);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)localtime(&v20);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_%Y-%m-%d_%H:%M:%S";
  char v10 = sub_10111CF38(v9, (uint64_t *)&__p);
  dispatch_fd_t v11 = sub_10000CF44(v10, (uint64_t)".", 1LL);
  std::ostream::operator<<(v11, rep % 0xF4240);
  std::stringbuf::str(&v15, &v18);
  sub_10111D0CC(a1, (const void **)(a1 + 16), (const void **)(a1 + 40), (uint64_t)&v15, a1 + 64, &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v13 = sub_10111C2DC(*(void *)(a1 + 128), (uint64_t)p_p, *(_DWORD *)(a1 + 88));
  *(_BYTE *)(a1 + 136) = v13;
  if (v13)
  {
    *(double *)(a1 + 144) = a2;
    sub_10111D2FC(a1);
  }

  std::streambuf::~streambuf(&v18);
  return std::ios::~ios(&v19);
}

void sub_10111CEE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1002720B4((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void *sub_10111CF38(void *a1, uint64_t *a2)
{
  if (v13[0])
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    uint64_t v4 = std::locale::use_facet(&v14, &std::time_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale(&v14);
    uint64_t v5 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL));
    rdbuf = v5->__rdbuf_;
    std::ios_base::fmtflags fmtflags = v5[1].__fmtflags_;
    if (fmtflags == -1)
    {
      std::ios_base::getloc(v5);
      uint64_t v8 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32LL);
      std::locale::~locale(&v14);
      v5[1].__fmtflags_ = fmtflags;
    }

    uint64_t v10 = *a2;
    __int128 v9 = (const char *)a2[1];
    size_t v11 = strlen(v9);
    if (!std::time_put<char,std::ostreambuf_iterator<char>>::put( v4,  rdbuf,  v5,  (char)fmtflags,  v10,  v9,  &v9[v11])) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 1);
    }
  }

  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_10111D068( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

void sub_10111D0B8(_Unwind_Exception *a1)
{
}

void sub_10111D0CC( uint64_t a1@<X0>, const void **a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::string *a6@<X8>)
{
  int v11 = *(char *)(a4 + 23);
  if (v11 >= 0) {
    unint64_t v12 = (const std::string::value_type *)a4;
  }
  else {
    unint64_t v12 = *(const std::string::value_type **)a4;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a4 + 8);
  }
  std::locale v14 = std::string::append(&v27, v12, v13);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  std::string::push_back(&v28, 46);
  std::string v29 = v28;
  memset(&v28, 0, sizeof(v28));
  int v16 = *(char *)(a5 + 23);
  if (v16 >= 0) {
    uint64_t v17 = (const std::string::value_type *)a5;
  }
  else {
    uint64_t v17 = *(const std::string::value_type **)a5;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a5 + 8);
  }
  uint64_t v19 = std::string::append(&v29, v17, v18);
  std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
  v30[0] = v19->__r_.__value_.__l.__size_;
  *(void *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v19->__r_.__value_.__s.__size_;
  v19->__r_.__value_.__l.__size_ = 0LL;
  v19->__r_.__value_.__l.__cap_ = 0LL;
  v19->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v22 = v30[0];
  *(void *)(a1 + 104) = v20;
  *(void *)(a1 + 112) = v22;
  *(void *)(a1 + 119) = *(void *)((char *)v30 + 7);
  *(_BYTE *)(a1 + 127) = size;
  sub_10051050C(a2, 47, (uint64_t)&v29);
  int v23 = *(char *)(a1 + 127);
  if (v23 >= 0) {
    unsigned int v24 = (const std::string::value_type *)(a1 + 104);
  }
  else {
    unsigned int v24 = *(const std::string::value_type **)(a1 + 104);
  }
  if (v23 >= 0) {
    std::string::size_type v25 = *(unsigned __int8 *)(a1 + 127);
  }
  else {
    std::string::size_type v25 = *(void *)(a1 + 112);
  }
  unint64_t v26 = std::string::append(&v29, v24, v25);
  *a6 = *v26;
  v26->__r_.__value_.__l.__size_ = 0LL;
  v26->__r_.__value_.__l.__cap_ = 0LL;
  v26->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_10111D294( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10111D2FC(uint64_t a1)
{
  unint64_t v2 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v24) >> 3));
  unint64_t v21 = &v22;
  *(void *)buf = &v21;
  if (v25 == v24) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = v2;
  }
  sub_10112231C(v24, v25, (uint64_t **)buf, v3, 1);
  if (qword_1019A0590 != -1) {
    dispatch_once(&qword_1019A0590, &stru_10189D320);
  }
  uint64_t v4 = (os_log_s *)qword_1019A0588;
  if (os_log_type_enabled((os_log_t)qword_1019A0588, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Msl files on disk:", buf, 2u);
  }

  unint64_t v5 = v24;
  unint64_t v6 = v25;
  if (v24 == v25)
  {
    uint64_t v10 = v24;
  }

  else
  {
    do
    {
      if (*(char *)(v5 + 23) < 0)
      {
        sub_1010DD48C(buf, *(void **)v5, *(void *)(v5 + 8));
      }

      else
      {
        __int128 v7 = *(_OWORD *)v5;
        uint64_t v29 = *(void *)(v5 + 16);
        *(_OWORD *)buf = v7;
      }

      if (qword_1019A0590 != -1) {
        dispatch_once(&qword_1019A0590, &stru_10189D320);
      }
      uint64_t v8 = (os_log_s *)qword_1019A0588;
      if (os_log_type_enabled((os_log_t)qword_1019A0588, OS_LOG_TYPE_INFO))
      {
        if (v29 >= 0) {
          __int128 v9 = buf;
        }
        else {
          __int128 v9 = *(uint8_t **)buf;
        }
        *(_DWORD *)unint64_t v26 = 136380675;
        std::string v27 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "  %{private}s", v26, 0xCu);
      }

      if (SHIBYTE(v29) < 0) {
        operator delete(*(void **)buf);
      }
      v5 += 24LL;
    }

    while (v5 != v6);
    unint64_t v5 = v24;
    uint64_t v10 = v25;
  }

  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
  unint64_t v12 = *(unsigned int *)(a1 + 12);
  BOOL v13 = v11 > v12;
  uint64_t v14 = v11 - v12;
  if (v13 && v14 >= 1)
  {
    unint64_t v15 = v5 + 24 * v14;
    do
    {
      if (qword_1019A0590 != -1) {
        dispatch_once(&qword_1019A0590, &stru_10189D320);
      }
      int v16 = (os_log_s *)qword_1019A0588;
      if (os_log_type_enabled((os_log_t)qword_1019A0588, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = (void *)v5;
        *(_DWORD *)buf = 136380675;
        *(void *)&buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "MSLWriter - deleting: %{private}s", buf, 0xCu);
      }

      sub_1011705B4((uint64_t *)v5);
      v5 += 24LL;
    }

    while (v5 < v15);
  }

  std::string::size_type v18 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  std::locale::~locale(&v22);
  v22.__locale_ = (std::locale::__imp *)&v24;
  sub_1000129D4((void ***)&v22);
}

void sub_10111D660( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a12.__locale_ = (std::locale::__imp *)&a20;
  sub_1000129D4((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_10111D6A8(uint64_t a1, uint64_t a2)
{
  double v4 = sub_101171D4C();
  sub_10111D6D4(a1, a2, v4);
}

void sub_10111D6D4(uint64_t a1, uint64_t a2, double a3)
{
  if (!*(_BYTE *)(a1 + 136))
  {
    if (qword_1019A0590 != -1) {
      dispatch_once(&qword_1019A0590, &stru_10189D320);
    }
    __int128 v9 = (os_log_s *)qword_1019A0588;
    if (os_log_type_enabled((os_log_t)qword_1019A0588, OS_LOG_TYPE_FAULT)) {
      sub_1012826C8(v9);
    }
    uint64_t v10 = (os_log_s *)qword_1019A0588;
    if (os_log_type_enabled((os_log_t)qword_1019A0588, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      unint64_t v12 = "assert";
      __int16 v13 = 2080;
      uint64_t v14 = "fValid";
      __int16 v15 = 2080;
      int v16 = "On call to writeItem client should check if the logger was opened";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Event: %s\n Condition: %s\n Message: %s",  buf,  0x20u);
    }

    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Framework/MotionSensorLogging/MSLWriterManager.cpp",  68,  "writeItem");
  }

  uint64_t v6 = *(void *)(a1 + 128);
  if (!v6
    || *(double *)(a1 + 144) < 0.0
    || sub_10111CA50(v6) > *(void *)a1
    || (double v8 = *(double *)(a1 + 144), v8 > a3)
    || (LODWORD(v7) = *(_DWORD *)(a1 + 8), a3 - v8 > (double)v7))
  {
    sub_10111CCC0(a1, a3);
  }

  sub_10111C5D4(*(void *)(a1 + 128), a2);
}

void sub_10111D87C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1) {
    sub_10111C86C(v1);
  }
}

void sub_10111D88C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    double v4 = (void *)sub_10111C2D8(v3);
    operator delete(v4);
  }

void sub_10111D8B8(id a1)
{
  qword_1019A0588 = (uint64_t)os_log_create("com.apple.MotionSensorLogging", "MSL");
}

std::locale *sub_10111D8E4(std::locale *a1, char *a2, int a3)
{
  uint64_t v6 = sub_10111D974(a1);
  LODWORD(v6[3].__locale_) = a3;
  *(_OWORD *)((char *)&v6[3].__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[5].__locale_ + 4) = 0u;
  HIDWORD(v6[7].__locale_) = 0;
  size_t v7 = strlen(a2);
  return a1;
}

void sub_10111D958(_Unwind_Exception *a1)
{
}

std::locale *sub_10111D974(std::locale *a1)
{
  unint64_t v2 = std::locale::locale(a1);
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v2, &std::ctype<char>::id);
  a1[2].__locale_ = (std::locale::__imp *)std::locale::use_facet(a1, &std::collate<char>::id);
  return a1;
}

void sub_10111D9BC(_Unwind_Exception *a1)
{
}

char *sub_10111D9D0(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = operator new(8uLL);
  *uint64_t v6 = &off_101877A78;
  size_t v7 = operator new(0x10uLL);
  *size_t v7 = &off_101877B48;
  v7[1] = v6;
  sub_10111DB20((void *)(a1 + 40), (uint64_t)v7);
  *(void *)(a1 + 56) = *(void *)(a1 + 40);
  unsigned int v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return sub_10111DDE4(a1, a2, a3);
      case 0x80u:
        return (char *)sub_10111DE84(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return sub_10111DFB4(a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }

  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32) {
LABEL_14:
      }
        sub_100BFAAC8();
      return sub_10111DDE4(a1, a2, a3);
    }

    return sub_10111DCB8(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }

  else
  {
    return sub_10111DB90(a1, (unsigned __int8 *)a2, a3);
  }

void sub_10111DB04(_Unwind_Exception *a1)
{
}

void sub_10111DB20(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  __int128 v4 = v7;
  *(void *)&__int128 v7 = *a1;
  *((void *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

char *sub_10111DB90(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  __int128 v7 = a2;
  do
  {
    unsigned int v8 = v7;
    __int128 v7 = sub_10111E32C(a1, (char *)v7, a3);
  }

  while (v7 != v8);
  if (v8 == a2)
  {
    __int128 v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(v10 + 8);
    *__int128 v9 = &off_101877B48;
    v9[1] = v11;
    *(void *)(v10 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  }

  if (v8 != (unsigned __int8 *)a3)
  {
    while (*v8 == 124)
    {
      uint64_t v12 = *(void *)(a1 + 56);
      __int16 v13 = v8 + 1;
      uint64_t v14 = v8 + 1;
      do
      {
        unsigned int v8 = v14;
        uint64_t v14 = sub_10111E32C(a1, (char *)v14, a3);
      }

      while (v14 != v8);
      if (v8 == v13)
      {
        __int16 v15 = operator new(0x10uLL);
        uint64_t v16 = *(void *)(a1 + 56);
        uint64_t v17 = *(void *)(v16 + 8);
        *__int16 v15 = &off_101877B48;
        v15[1] = v17;
        *(void *)(v16 + 8) = v15;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
      }

      sub_10111E27C(a1, v6, v12);
    }

    return (char *)v8;
  }

  return a3;
}

char *sub_10111DCB8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  __int128 v4 = (char *)a3;
  if (*a2 == 94)
  {
    uint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    *uint64_t v6 = &off_101877BF0;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    ++v3;
  }

  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      uint64_t v10 = v3;
      uint64_t v3 = sub_101121A94(a1, (char *)v3, v4);
    }

    while (v3 != v10);
    if (v10 != (unsigned __int8 *)v4)
    {
      uint64_t v11 = operator new(0x18uLL);
      BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = *(void *)(v13 + 8);
      *uint64_t v11 = &off_101877C38;
      v11[1] = v14;
      *((_BYTE *)v11 + 16) = v12;
      *(void *)(v13 + 8) = v11;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    }
  }

  return v4;
}

char *sub_10111DDE4(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = sub_101121FB4(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    sub_100BFF37C();
  uint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = sub_101121FB4(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    sub_10111E27C(a1, v6, v9);
  }

  return v3;
}

unsigned __int8 *sub_10111DE84(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    *uint64_t v9 = &off_101877B48;
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  }

  else
  {
    sub_10111DCB8(a1, __s, v8);
  }

  if (v8 != a3) {
    ++v8;
  }
  while (v8 != a3)
  {
    uint64_t v11 = (unsigned __int8 *)memchr(v8, 10, a3 - v8);
    if (v11) {
      BOOL v12 = v11;
    }
    else {
      BOOL v12 = a3;
    }
    uint64_t v13 = *(void *)(a1 + 56);
    if (v12 == v8)
    {
      uint64_t v14 = operator new(0x10uLL);
      uint64_t v15 = *(void *)(v13 + 8);
      *uint64_t v14 = &off_101877B48;
      v14[1] = v15;
      *(void *)(v13 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    }

    else
    {
      sub_10111DCB8(a1, v8, v12);
    }

    sub_10111E27C(a1, v6, v13);
    if (v12 == a3) {
      uint64_t v8 = v12;
    }
    else {
      uint64_t v8 = v12 + 1;
    }
  }

  return a3;
}

char *sub_10111DFB4(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    *uint64_t v9 = &off_101877B48;
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  }

  else
  {
    sub_10111DDE4(a1, __s, v8);
  }

  if (v8 != a3) {
    ++v8;
  }
  while (v8 != a3)
  {
    uint64_t v11 = (char *)memchr(v8, 10, a3 - v8);
    if (v11) {
      BOOL v12 = v11;
    }
    else {
      BOOL v12 = a3;
    }
    uint64_t v13 = *(void *)(a1 + 56);
    if (v12 == v8)
    {
      uint64_t v14 = operator new(0x10uLL);
      uint64_t v15 = *(void *)(v13 + 8);
      *uint64_t v14 = &off_101877B48;
      v14[1] = v15;
      *(void *)(v13 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    }

    else
    {
      sub_10111DDE4(a1, v8, v12);
    }

    sub_10111E27C(a1, v6, v13);
    if (v12 == a3) {
      uint64_t v8 = v12;
    }
    else {
      uint64_t v8 = v12 + 1;
    }
  }

  return a3;
}

void *sub_10111E0EC(void *a1, uint64_t a2)
{
  *a1 = a2;
  __int128 v4 = operator new(0x20uLL);
  *__int128 v4 = &off_101877AD0;
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_10111E134(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10111E158(std::__shared_weak_count *a1)
{
}

void *sub_10111E16C(void *a1)
{
  *a1 = &off_101877BC0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_10111E1B0(void *__p)
{
  void *__p = &off_101877BC0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

void *sub_10111E1F4(void *a1)
{
  *a1 = &off_101877BC0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_10111E238(void *__p)
{
  void *__p = &off_101877BC0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

void *sub_10111E27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x18uLL);
  uint64_t v7 = *(void *)(a3 + 8);
  v6[1] = *(void *)(a2 + 8);
  v6[2] = v7;
  *uint64_t v6 = &off_1018780B8;
  *(void *)(a2 + 8) = v6;
  *(void *)(a3 + 8) = 0LL;
  uint64_t v8 = operator new(0x10uLL);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
  *uint64_t v8 = &off_101877B48;
  v8[1] = v9;
  *(void *)(a3 + 8) = v8;
  *(void *)(*(void *)(a1 + 56) + 8LL) = 0LL;
  dispatch_io_t result = operator new(0x10uLL);
  uint64_t v11 = *(void *)(a3 + 8);
  *dispatch_io_t result = &off_101878100;
  result[1] = v11;
  *(void *)(*(void *)(a1 + 56) + 8LL) = result;
  *(void *)(a1 + 56) = *(void *)(a3 + 8);
  return result;
}

unsigned __int8 *sub_10111E32C(uint64_t a1, char *a2, char *a3)
{
  dispatch_io_t result = (unsigned __int8 *)sub_10111E3C0(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = sub_10111E648(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    dispatch_io_t result = (unsigned __int8 *)a2;
  }

  return result;
}

char *sub_10111E3C0(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      BOOL v8 = v6 == 40;
      uint64_t v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        uint64_t v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            sub_10111D974(v23);
            __int128 v24 = 0u;
            uint64_t v26 = 0LL;
            __int128 v25 = 0u;
            LODWORD(v24) = *(_DWORD *)(a1 + 24);
            BOOL v12 = (char *)sub_10111D9D0(v23, v3 + 3, a3);
            int v22 = DWORD1(v24);
            sub_10111EBB4(a1, (uint64_t)v23, 1, *(_DWORD *)(a1 + 28));
            *(_DWORD *)(a1 + 28) += v22;
            if (v12 == a3 || *v12 != 41) {
              sub_100BFB3E0();
            }
            goto LABEL_31;
          }

          if (v11 == 61)
          {
            sub_10111D974(v23);
            __int128 v24 = 0u;
            uint64_t v26 = 0LL;
            __int128 v25 = 0u;
            LODWORD(v24) = *(_DWORD *)(a1 + 24);
            BOOL v12 = (char *)sub_10111D9D0(v23, v3 + 3, a3);
            int v13 = DWORD1(v24);
            sub_10111EBB4(a1, (uint64_t)v23, 0, *(_DWORD *)(a1 + 28));
            *(_DWORD *)(a1 + 28) += v13;
            if (v12 == a3 || *v12 != 41) {
              sub_100BFB3E0();
            }
LABEL_31:
            uint64_t v3 = v12 + 1;
            sub_10000AE14((uint64_t)&v25);
            std::locale::~locale(v23);
            return v3;
          }
        }
      }

      return v3;
    }

    uint64_t v14 = operator new(0x18uLL);
    BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(v16 + 8);
LABEL_21:
    *uint64_t v14 = v18 + 2;
    v14[1] = v17;
    *((_BYTE *)v14 + 16) = v15;
    *(void *)(v16 + 8) = v14;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
    return ++v3;
  }

  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    uint64_t v14 = operator new(0x18uLL);
    BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(v16 + 8);
    goto LABEL_21;
  }

  if (a2 + 1 != a3)
  {
    int v20 = a2[1];
    if (v20 == 66)
    {
      char v21 = 1;
    }

    else
    {
      if (v20 != 98) {
        return v3;
      }
      char v21 = 0;
    }

    sub_10111EB40(a1, v21);
    v3 += 2;
  }

  return v3;
}

void sub_10111E61C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

unsigned __int8 *sub_10111E648(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92) {
        return sub_10111F570(a1, a2, a3);
      }
      if (v6 != 123) {
        return sub_100BFC20C(a1, a2, a3);
      }
    }

    else
    {
      if (v6 == 91) {
        return (unsigned __int8 *)sub_10111F610(a1, (char *)a2, (char *)a3);
      }
      if (v6 != 63) {
        return sub_100BFC20C(a1, a2, a3);
      }
    }

unsigned __int8 *sub_10111E840( uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = a6;
  int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      int v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        int v13 = a2 + 2;
        uint64_t v14 = 0LL;
        uint64_t v18 = 1LL;
        goto LABEL_33;
      }

      uint64_t v14 = 0LL;
      uint64_t v18 = 1LL;
      goto LABEL_45;
    }

    if (v12 != 123) {
      return a2;
    }
    BOOL v15 = a2 + 1;
    uint64_t v16 = sub_100BFEFA0(a1, a2 + 1, a3, &v28);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            int v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              int v13 = v16 + 2;
              uint64_t v14 = v28;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              uint64_t v18 = v28;
LABEL_33:
              uint64_t v21 = a4;
              char v22 = 0;
LABEL_46:
              sub_1011217B0(a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }

            uint64_t v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v18 = v28;
LABEL_45:
            uint64_t v21 = a4;
            char v22 = 1;
            goto LABEL_46;
          }

          goto LABEL_58;
        }

        int v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          int v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            int v13 = v16 + 3;
            uint64_t v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }

          uint64_t v14 = v28;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          uint64_t v18 = -1LL;
          goto LABEL_45;
        }

        int v27 = -1;
        __int128 v25 = sub_100BFEFA0(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          uint64_t v18 = v27;
          uint64_t v14 = v28;
          if (v27 >= v28)
          {
            int v13 = v25 + 1;
            char v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              char v22 = v26 != 63;
              if (v26 == 63) {
                int v13 = v25 + 2;
              }
            }

            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = a4;
            goto LABEL_46;
          }

          goto LABEL_58;
        }
      }

      sub_100BFF088();
    }

__n128 sub_10111EB40(uint64_t a1, char a2)
{
  __int128 v4 = (char *)operator new(0x30uLL);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  *(void *)__int128 v4 = off_101877C80;
  *((void *)v4 + 1) = v5;
  std::locale::locale((std::locale *)v4 + 2, (const std::locale *)a1);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 24) = result;
  v4[40] = a2;
  *(void *)(*(void *)(a1 + 56) + 8LL) = v4;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  return result;
}

uint64_t sub_10111EBB4(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8 = operator new(0x58uLL);
  uint64_t result = sub_100BFB5F0((uint64_t)v8, a2, a3, *(void *)(*(void *)(a1 + 56) + 8LL), a4);
  *(void *)(*(void *)(a1 + 56) + 8LL) = v8;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  return result;
}

void sub_10111EC24(_Unwind_Exception *a1)
{
}

void *sub_10111EC38(void *a1)
{
  *a1 = &off_101877BC0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_10111EC7C(void *__p)
{
  void *__p = &off_101877BC0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

void *sub_10111ECC0(void *a1)
{
  *a1 = &off_101877BC0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_10111ED04(void *__p)
{
  void *__p = &off_101877BC0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

std::locale *sub_10111ED48(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877C80;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_10111EDA0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877C80;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

std::locale *sub_10111EDF8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877CC8;
  uint64_t v2 = a1 + 2;
  sub_10000AE14((uint64_t)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_10111EE60(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877CC8;
  uint64_t v2 = a1 + 2;
  sub_10000AE14((uint64_t)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

char *sub_10111EEC8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(a1 + 24) = a4;
  uint64_t v8 = (_OWORD *)(a1 + 24);
  *(void *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  uint64_t result = sub_100BFB804((char **)a1, a2, (__int128 *)(a1 + 24));
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a3;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *v8;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a1 + 40);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = a3;
  }
  *(_BYTE *)(a1 + 96) = 1;
  return result;
}

uint64_t sub_10111EF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  unsigned int v42 = 0LL;
  uint64_t v43 = 0LL;
  unint64_t v44 = 0LL;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(void *)&__int128 v40 = a3;
    *((void *)&v40 + 1) = a3;
    char v41 = 0;
    *(_DWORD *)uint64_t v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)std::string __p = 0u;
    memset(v39, 0, 21);
    uint64_t v43 = (_OWORD *)sub_10111F338((uint64_t *)&v42, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }

    uint64_t v34 = a4;
    int v11 = v43;
    *((_DWORD *)v43 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 1sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = a2;
    *((void *)v11 - 9) = a3;
    sub_100BFB978((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v40);
    sub_100BFB9B4((uint64_t)v43 - 40, *(unsigned int *)(a1 + 32));
    int v12 = v43;
    *((void *)v43 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    unsigned int v13 = 1;
    while (2)
    {
      BOOL v15 = v12 - 1;
      uint64_t v14 = *((void *)v12 - 2);
      uint64_t v16 = v12 - 6;
      if (v14) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v14 + 16LL))(v14, v12 - 6);
      }
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          uint64_t v17 = *((void *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3) {
            goto LABEL_16;
          }
          uint64_t v25 = *v34;
          *(void *)uint64_t v25 = a2;
          *(void *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          uint64_t v26 = *((void *)v12 - 8);
          uint64_t v27 = *((void *)v12 - 7) - v26;
          if (v27)
          {
            unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            uint64_t v29 = (_BYTE *)(v26 + 16);
            unsigned int v30 = 1;
            do
            {
              uint64_t v31 = v25 + 24LL * v30;
              *(_OWORD *)uint64_t v31 = *((_OWORD *)v29 - 1);
              char v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }

            while (v28 > v30++);
          }

          uint64_t v6 = 1LL;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          uint64_t v18 = v43 - 6;
          sub_100BFBC54((uint64_t)&v44, (void *)v43 - 12);
          uint64_t v43 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          __int128 v19 = *(v12 - 5);
          *(_OWORD *)uint64_t v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          sub_10111F484( &v37[32],  *((__int128 **)v12 - 8),  *((__int128 **)v12 - 7),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v12 - 7) - *((void *)v12 - 8)) >> 3));
          __p[0] = 0LL;
          __p[1] = 0LL;
          v39[0] = 0LL;
          sub_10111F500( (char *)__p,  *((__int128 **)v12 - 5),  *((__int128 **)v12 - 4),  (uint64_t)(*((void *)v12 - 4) - *((void *)v12 - 5)) >> 4);
          uint64_t v20 = *v15;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v15 + 24LL))(*v15, 1LL, v12 - 6);
          (*(void (**)(void, void, _BYTE *))(*(void *)v39[1] + 24LL))(v39[1], 0LL, v37);
          uint64_t v21 = v43;
          if ((unint64_t)v43 >= v44)
          {
            uint64_t v43 = (_OWORD *)sub_10111F338((uint64_t *)&v42, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }

          else
          {
            __int128 v22 = *(_OWORD *)&v37[16];
            _OWORD *v43 = *(_OWORD *)v37;
            v21[1] = v22;
            *((void *)v21 + 4) = 0LL;
            *((void *)v21 + 5) = 0LL;
            *((void *)v21 + 6) = 0LL;
            *((void *)v21 + 7) = 0LL;
            v21[2] = *(_OWORD *)&v37[32];
            *((void *)v21 + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v21 + 8) = 0LL;
            *((void *)v21 + 9) = 0LL;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((void *)v21 + 9) = v39[0];
            __p[0] = 0LL;
            __p[1] = 0LL;
            v39[0] = 0LL;
            uint64_t v23 = v39[1];
            *(void *)((char *)v21 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v21 + 1sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v23;
            uint64_t v43 = v21 + 6;
          }

          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }

void sub_10111F2E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  a13 = v18 - 112;
  sub_100BFBF8C((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10111F338(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555LL) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1003F6AEC(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  int v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  __int128 v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)int v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0LL;
  *((void *)v11 + 6) = 0LL;
  *((void *)v11 + 4) = 0LL;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  *(void *)(a2 + 48) = 0LL;
  *((void *)v11 + 7) = 0LL;
  *((void *)v11 + 8) = 0LL;
  *((void *)v11 + 9) = 0LL;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0LL;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 1sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v13;
  v16[2] = v11 + 96;
  sub_100BFBA7C(a1, v16);
  uint64_t v14 = a1[1];
  sub_100BFBC98(v16);
  return v14;
}

void sub_10111F470(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

char *sub_10111F484(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100006E1C(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      __int128 v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24LL;
      a2 = (__int128 *)((char *)a2 + 24);
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_10111F4E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10111F500(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10005782C(result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      __int128 v8 = *a2++;
      *v7++ = v8;
    }

    *((void *)v6 + 1) = v7;
  }

  return result;
}

void sub_10111F554(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_10111F570(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  unint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    sub_100BFC27C();
  }
  uint64_t result = sub_10111F868(a1, a2 + 1, a3);
  if (result == v5)
  {
    uint64_t result = (unsigned __int8 *)sub_100BFC37C(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      uint64_t result = sub_10111F924(a1, a2 + 1, (char *)a3, 0LL);
      if (result == v5) {
        return a2;
      }
    }
  }

  return result;
}

char *sub_10111F610(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    unint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    uint64_t v6 = (uint64_t *)sub_101120170(a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    uint64_t v7 = v6;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      sub_100BFCB4C((uint64_t)v6, 93LL);
      ++v5;
    }

    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      __int128 v8 = v5;
      unint64_t v5 = sub_10112071C(a1, v5, a3, v7);
    }

    while (v5 != v8);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      sub_100BFCB4C((uint64_t)v7, 45LL);
      ++v8;
    }

    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      sub_100BFD7CC();
    return v8 + 1;
  }

  return a2;
}

void *sub_10111F720(void *result)
{
  if ((result[3] & 2) == 0)
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x18uLL);
    int v2 = *((_DWORD *)v1 + 7) + 1;
    *((_DWORD *)v1 + 7) = v2;
    uint64_t v3 = v1[7];
    uint64_t v4 = *(void *)(v3 + 8);
    *uint64_t result = &off_101877F50;
    result[1] = v4;
    *((_DWORD *)result + 4) = v2;
    *(void *)(v3 + 8) = result;
    v1[7] = *(void *)(v1[7] + 8LL);
  }

  return result;
}

void *sub_10111F784(void *result, int a2)
{
  if ((result[3] & 2) == 0)
  {
    uint64_t v3 = result;
    uint64_t result = operator new(0x18uLL);
    uint64_t v4 = v3[7];
    uint64_t v5 = *(void *)(v4 + 8);
    *uint64_t result = &off_101877F98;
    result[1] = v5;
    *((_DWORD *)result + 4) = a2;
    *(void *)(v4 + 8) = result;
    v3[7] = *(void *)(v3[7] + 8LL);
  }

  return result;
}

void *sub_10111F7E0(void *a1)
{
  *a1 = &off_101877BC0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_10111F824(void *__p)
{
  void *__p = &off_101877BC0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

unsigned __int8 *sub_10111F868(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = *a2;
  uint64_t v5 = (v4 - 48);
  if (v4 == 48)
  {
    sub_10111FBF0(a1, v5);
    return a2 + 1;
  }

  uint64_t v6 = a3;
  uint64_t v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      int v8 = *v7;
      ++v7;
      LODWORD(v5) = v8 + 10 * v5 - 48;
      if (v7 == a3) {
        goto LABEL_12;
      }
    }

    uint64_t v6 = v7;
LABEL_12:
    if (!(_DWORD)v5) {
      goto LABEL_16;
    }
  }

  if (v5 > *(_DWORD *)(a1 + 28)) {
LABEL_16:
  }
    sub_100BFC724();
  sub_10111FCD4(a1, v5);
  return v6;
}

unsigned __int8 *sub_10111F924(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this)
{
  int v4 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    int v5 = (char)*a2;
    if (v5 > 109)
    {
      char v6 = 0;
      switch(*a2)
      {
        case 'n':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(v8) = 10;
            goto LABEL_50;
          }

          uint64_t v8 = 10LL;
          goto LABEL_59;
        case 'r':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(v8) = 13;
            goto LABEL_50;
          }

          uint64_t v8 = 13LL;
          goto LABEL_59;
        case 't':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(v8) = 9;
            goto LABEL_50;
          }

          uint64_t v8 = 9LL;
          goto LABEL_59;
        case 'u':
          int v9 = a2[1];
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
            goto LABEL_64;
          }
          int v4 = a2 + 2;
          int v10 = *v4;
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_24;
          }
          v10 |= 0x20u;
          char v11 = -87;
LABEL_24:
          char v6 = 16 * (v11 + v10);
LABEL_25:
          int v12 = v4[1];
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_30;
          }
          v12 |= 0x20u;
          char v13 = -87;
LABEL_30:
          int v14 = v4[2];
          char v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
            goto LABEL_35;
          }
          v14 |= 0x20u;
          char v15 = -87;
LABEL_35:
          if (this) {
            std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v6));
          }
          else {
            sub_10111FBF0(a1, (char)(v15 + v14 + 16 * (v13 + v12 + v6)));
          }
          v4 += 3;
          return v4;
        case 'v':
          if (this)
          {
            uint64_t v7 = this;
            LOBYTE(v8) = 11;
            goto LABEL_50;
          }

          uint64_t v8 = 11LL;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }

      goto LABEL_59;
    }

    if (v5 == 48)
    {
      if (this)
      {
        uint64_t v7 = this;
        LOBYTE(v8) = 0;
        goto LABEL_50;
      }

      uint64_t v8 = 0LL;
LABEL_59:
      sub_10111FBF0(a1, v8);
      return ++v4;
    }

    if (v5 != 99)
    {
      if (v5 == 102)
      {
        if (this)
        {
          uint64_t v7 = this;
          LOBYTE(v8) = 12;
LABEL_50:
          std::string::operator=(v7, v8);
          return ++v4;
        }

        uint64_t v8 = 12LL;
        goto LABEL_59;
      }

uint64_t sub_10111FBF0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t v8 = (char *)operator new(0x30uLL);
    uint64_t result = sub_100BFC770((uint64_t)v8, a1, a2, *(void *)(*(void *)(a1 + 56) + 8LL));
LABEL_6:
    *(void *)(*(void *)(a1 + 56) + 8LL) = v8;
    goto LABEL_7;
  }

  if ((v4 & 8) != 0)
  {
    uint64_t v8 = (char *)operator new(0x30uLL);
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
    *(void *)uint64_t v8 = off_101877DA0;
    *((void *)v8 + 1) = v9;
    uint64_t result = (uint64_t)std::locale::locale((std::locale *)v8 + 2, (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    v8[40] = a2;
    goto LABEL_6;
  }

  uint64_t result = (uint64_t)operator new(0x18uLL);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(v6 + 8);
  *(void *)uint64_t result = &off_101877DE8;
  *(void *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(void *)(v6 + 8) = result;
LABEL_7:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  return result;
}

void sub_10111FCC0(_Unwind_Exception *a1)
{
}

void *sub_10111FCD4(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t v8 = (std::locale *)operator new(0x30uLL);
    uint64_t v9 = v8;
    int v10 = *(std::locale::__imp **)(*(void *)(a1 + 56) + 8LL);
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 2);
    v8[1].__locale_ = v10;
    uint64_t result = std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(void *)(*(void *)(a1 + 56) + 8LL) = v9;
    goto LABEL_7;
  }

  if ((v4 & 8) != 0)
  {
    uint64_t v8 = (std::locale *)operator new(0x30uLL);
    uint64_t v9 = v8;
    int v10 = *(std::locale::__imp **)(*(void *)(a1 + 56) + 8LL);
    goto LABEL_6;
  }

  uint64_t result = operator new(0x18uLL);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(v6 + 8);
  *uint64_t result = &off_101877EC0;
  result[1] = v7;
  *((_DWORD *)result + 4) = a2;
  *(void *)(v6 + 8) = result;
LABEL_7:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  return result;
}

std::locale *sub_10111FDA0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877D58;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_10111FDF8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877D58;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

std::locale *sub_10111FE50(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877DA0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_10111FEA8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877DA0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

void *sub_10111FF00(void *a1)
{
  *a1 = &off_101877BC0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_10111FF44(void *__p)
{
  void *__p = &off_101877BC0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

std::locale *sub_10111FF88(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877E30;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_10111FFE0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877E30;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

std::locale *sub_101120038(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877E78;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  return a1;
}

void sub_101120090(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877E78;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8LL))(locale);
  }
  operator delete(a1);
}

void *sub_1011200E8(void *a1)
{
  *a1 = &off_101877BC0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_10112012C(void *__p)
{
  void *__p = &off_101877BC0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

void *sub_101120170(uint64_t a1, char a2)
{
  int v4 = operator new(0xB0uLL);
  sub_100BFCD78( (uint64_t)v4,  a1,  *(void *)(*(void *)(a1 + 56) + 8LL),  a2,  *(_DWORD *)(a1 + 24) & 1,  (*(_DWORD *)(a1 + 24) & 8) != 0);
  *(void *)(*(void *)(a1 + 56) + 8LL) = v4;
  *(void *)(a1 + 56) = v4;
  return v4;
}

void sub_1011201D4(_Unwind_Exception *a1)
{
}

std::locale *sub_1011201E8(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877F08;
  uint64_t v7 = a1 + 17;
  sub_1000129D4((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }

  uint64_t v7 = a1 + 11;
  sub_100159450((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }

  int v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }

  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8LL))(v5);
  }
  return a1;
}

void sub_10112029C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)off_101877F08;
  uint64_t v6 = a1 + 17;
  sub_1000129D4((void ***)&v6);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }

  uint64_t v6 = a1 + 11;
  sub_100159450((void ***)&v6);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }

  int v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }

  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_101877BC0;
  int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8LL))(v5);
  }
  operator delete(a1);
}

void sub_101120354(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    int v5 = __p;
  }
  else {
    int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32LL))( *(void *)(a1 + 16),  v5,  (char *)v5 + v4);
}

void sub_1011203D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011203F0(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }

  else
  {
    if (!__s.__r_.__value_.__s.__size_) {
      return;
    }
    p_s = &__s;
  }

  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  std::string::size_type cap = v13.__r_.__value_.__l.__cap_;
  a4->__r_.__value_.__l.__cap_ = v13.__r_.__value_.__l.__cap_;
  std::string::size_type size = HIBYTE(cap);
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a4->__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_9;
  }
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type v9 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
    int v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }

  else
  {
    std::string::size_type v9 = __s.__r_.__value_.__s.__size_;
    if (__s.__r_.__value_.__s.__size_ >= 3u) {
      return;
    }
    int v10 = &__s;
  }

  (*(void (**)(std::string *__return_ptr, void, std::string *, char *))(**(void **)(a1 + 16) + 32LL))( &v13,  *(void *)(a1 + 16),  v10,  (char *)v10 + v9);
  *a4 = v13;
  if (((char)a4->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    int v11 = a4->__r_.__value_.__s.__size_;
    if (v11 != 12 && v11 != 1)
    {
      a4->__r_.__value_.__s.__data_[0] = 0;
      a4->__r_.__value_.__s.__size_ = 0;
      goto LABEL_9;
    }

    goto LABEL_25;
  }

  std::string::size_type v12 = a4->__r_.__value_.__l.__size_;
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=(a4, &__s);
    goto LABEL_9;
  }

  *a4->__r_.__value_.__l.__data_ = 0;
  a4->__r_.__value_.__l.__size_ = 0LL;
LABEL_9:
}

void sub_101120550( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101120584(void *result, char *a2, char *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000C818();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000LL;
    *unint64_t v4 = result;
    unint64_t v4 = result;
  }

  else
  {
    *((_BYTE *)result + 23) = a4;
  }

  while (a2 != a3)
  {
    char v10 = *a2++;
    *(_BYTE *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 1);
  }

  *(_BYTE *)unint64_t v4 = 0;
  return result;
}

void sub_101120628(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unsigned __int8 v7 = __p;
  }
  else {
    unsigned __int8 v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32LL))( *(void *)(a1 + 16),  v7,  (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = (_BYTE *)a4;
      }
      else {
        char v10 = *(_BYTE **)a4;
      }
      v10[11] = v10[3];
    }

    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
    }

    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }

void sub_101120700( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10112071C(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }

  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = sub_101120CA4(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }

    if (v9 == 61)
    {
      uint64_t v10 = sub_101120AC8(a1, a2 + 2, a3, a4);
LABEL_34:
      uint64_t v6 = v10;
      char v20 = 0;
      goto LABEL_38;
    }

    goto LABEL_9;
  }

  uint64_t v18 = sub_101120D5C(a1, a2 + 2, a3, (uint64_t)&v26);
  unint64_t v4 = (_BYTE *)v18;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = v26.__r_.__value_.__s.__size_;
  if ((v26.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  int v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        std::string v13 = v4 + 1;
        if (v11)
        {
          int v14 = sub_101120F70(a1, v13, a3, &v26);
        }

        else
        {
          int v14 = (char *)sub_101120E48(a1, (unsigned __int8 *)v13, a3, &v26, v6);
          int v11 = 0;
        }

        goto LABEL_16;
      }
    }

    else
    {
      LOBYTE(v12) = *v4;
    }

    std::string::operator=(&v26, v12);
    int v14 = v4 + 1;
  }

void sub_101120A68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101120AC8(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (uint64_t i = 0LL; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_33;
    }
  }

  if (&a2[i] == a3) {
LABEL_33:
  }
    sub_100BFD7CC();
  sub_101121148(a1, a2, &a2[i], &v17);
  if (((char)v17.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    std::string::size_type size = v17.__r_.__value_.__s.__size_;
    if (v17.__r_.__value_.__s.__size_)
    {
      int v9 = &v17;
      goto LABEL_14;
    }

void sub_101120C6C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101120CA4(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (uint64_t i = 0LL; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_11;
    }
  }

  if (&a2[i] == a3) {
LABEL_11:
  }
    sub_100BFD7CC();
  int v7 = sub_10112154C(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7) {
    sub_100BFEA54();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t sub_101120D5C(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0LL; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }

  if (&a2[i] == a3) {
LABEL_15:
  }
    sub_100BFD7CC();
  sub_101121148(a1, a2, &a2[i], &v10);
  *(_OWORD *)a4 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  std::string::size_type cap = v10.__r_.__value_.__l.__cap_;
  *(void *)(a4 + 16) = v10.__r_.__value_.__l.__cap_;
  std::string::size_type v8 = HIBYTE(cap);
  if ((v8 & 0x80u) != 0LL) {
    std::string::size_type v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    sub_100BFE834();
  }
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *sub_101120E48(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this, uint64_t a5)
{
  int v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          return sub_10111F924(a1, a2, a3, this);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_100BFCB4C(a5, 95LL);
        return a2 + 1;
      }

      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }

    else
    {
      if (v6 == 98)
      {
        std::string v10 = this;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return a2 + 1;
      }

      if (v6 != 100) {
        return sub_10111F924(a1, a2, a3, this);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }

    *(_DWORD *)(a5 + 16sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v8;
    return a2 + 1;
  }

  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return a2 + 1;
      }

      return sub_10111F924(a1, a2, a3, this);
    }

    std::string::value_type v9 = 0;
    std::string v10 = this;
    goto LABEL_19;
  }

  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }

  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    sub_100BFEB58(a5, 95LL);
    return a2 + 1;
  }

  return sub_10111F924(a1, a2, a3, this);
}

char *sub_101120F70(uint64_t a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    sub_100BFC27C();
  uint64_t v5 = *a2;
  if ((int)v5 > 97)
  {
    switch((int)v5)
    {
      case 'n':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }

        uint64_t v5 = 10LL;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }

        uint64_t v5 = 13LL;
        goto LABEL_49;
      case 't':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }

        uint64_t v5 = 9LL;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          int v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }

        uint64_t v5 = 11LL;
        goto LABEL_49;
      default:
        if ((_DWORD)v5 == 98)
        {
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }

          uint64_t v5 = 8LL;
        }

        else
        {
          if ((_DWORD)v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }

          uint64_t v5 = 12LL;
        }

        break;
    }

    goto LABEL_49;
  }

  if ((int)v5 > 91)
  {
    if ((_DWORD)v5 != 92)
    {
      if ((_DWORD)v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        int v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }

      uint64_t v5 = 7LL;
LABEL_49:
      sub_10111FBF0(a1, v5);
      return a2 + 1;
    }

void sub_101121148(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0LL;
  a4->__r_.__value_.__l.__size_ = 0LL;
  a4->__r_.__value_.__l.__cap_ = 0LL;
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }

  else
  {
    if (!__s.__r_.__value_.__s.__size_) {
      return;
    }
    p_s = &__s;
  }

  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  std::string::size_type cap = v13.__r_.__value_.__l.__cap_;
  a4->__r_.__value_.__l.__cap_ = v13.__r_.__value_.__l.__cap_;
  std::string::size_type size = HIBYTE(cap);
  if ((size & 0x80u) != 0LL) {
    std::string::size_type size = a4->__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_9;
  }
  if ((char)__s.__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type v9 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
    int v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }

  else
  {
    std::string::size_type v9 = __s.__r_.__value_.__s.__size_;
    if (__s.__r_.__value_.__s.__size_ >= 3u) {
      return;
    }
    int v10 = &__s;
  }

  (*(void (**)(std::string *__return_ptr, void, std::string *, char *))(**(void **)(a1 + 16) + 32LL))( &v13,  *(void *)(a1 + 16),  v10,  (char *)v10 + v9);
  *a4 = v13;
  if (((char)a4->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    int v11 = a4->__r_.__value_.__s.__size_;
    if (v11 != 12 && v11 != 1)
    {
      a4->__r_.__value_.__s.__data_[0] = 0;
      a4->__r_.__value_.__s.__size_ = 0;
      goto LABEL_9;
    }

    goto LABEL_25;
  }

  std::string::size_type v12 = a4->__r_.__value_.__l.__size_;
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=(a4, &__s);
    goto LABEL_9;
  }

  *a4->__r_.__value_.__l.__data_ = 0;
  a4->__r_.__value_.__l.__size_ = 0LL;
LABEL_9:
}

void sub_1011212A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011212DC(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    std::string::value_type v7 = __p;
  }
  else {
    std::string::value_type v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32LL))( *(void *)(a1 + 16),  v7,  (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        int v10 = (_BYTE *)a4;
      }
      else {
        int v10 = *(_BYTE **)a4;
      }
      v10[11] = v10[3];
    }

    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(void *)(a4 + 8) = 0LL;
    }

    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }

void sub_1011213B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1011213D0(void *result, __int128 *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_1010DD48C((_BYTE *)result[1], *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }

  v2[1] = v3 + 24;
  return result;
}

void sub_101121424(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10112142C(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_10000701C(v7, v9);
  }
  else {
    int v10 = 0LL;
  }
  int v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unsigned __int8 v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(v11, *(void **)a2, *((void *)a2 + 1));
    int v11 = v16;
  }

  else
  {
    __int128 v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)int v11 = v12;
  }

  unsigned __int8 v16 = v11 + 24;
  sub_100013F10(a1, v15);
  uint64_t v13 = a1[1];
  sub_100014098((uint64_t)v15);
  return v13;
}

void sub_101121538(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10112154C(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  v7,  (char *)v7 + v6);
  if ((v12 & 0x80u) == 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  return classname;
}

void sub_1011215E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101121604(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32LL))( *(void *)(a1 + 16),  v5,  (char *)v5 + v4);
}

void sub_101121684( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1011216A0(void *a1)
{
  *a1 = &off_101877BC0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_1011216E4(void *__p)
{
  void *__p = &off_101877BC0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

void *sub_101121728(void *a1)
{
  *a1 = &off_101877BC0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_10112176C(void *__p)
{
  void *__p = &off_101877BC0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

void *sub_1011217B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  int v14 = operator new(0x10uLL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(v15 + 8);
  *int v14 = &off_101877B48;
  v14[1] = v16;
  *(void *)(v15 + 8) = 0LL;
  uint64_t v17 = operator new(0x38uLL);
  LODWORD(v16) = *(_DWORD *)(a1 + 32);
  uint64_t v18 = *(void *)(a4 + 8);
  *uint64_t v17 = &off_101877FE0;
  v17[1] = v18;
  v17[2] = v14;
  v17[3] = a2;
  v17[4] = a3;
  *((_DWORD *)v17 + 1sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v16;
  *((_DWORD *)v17 + 11) = a5;
  *((_DWORD *)v17 + 12) = a6;
  *((_BYTE *)v17 + 52) = a7;
  *(void *)(a4 + 8) = 0LL;
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &off_101878070;
  result[1] = v17;
  *(void *)(*(void *)(a1 + 56) + 8LL) = result;
  *(void *)(a1 + 56) = v17[2];
  *(void *)(a4 + 8) = v17;
  *(_DWORD *)(a1 + 32) = v16 + 1;
  return result;
}

void sub_10112189C(_Unwind_Exception *a1)
{
}

void *sub_1011218E4(void *a1)
{
  *a1 = &off_101878040;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *a1 = &off_101877BC0;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return a1;
}

void sub_10112194C(void *__p)
{
  void *__p = &off_101878040;
  uint64_t v2 = __p[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  void *__p = &off_101877BC0;
  uint64_t v3 = __p[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  operator delete(__p);
}

void *sub_1011219BC(void *a1)
{
  *a1 = &off_101878040;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *a1 = &off_101877BC0;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return a1;
}

void sub_101121A24(void *__p)
{
  void *__p = &off_101878040;
  uint64_t v2 = __p[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  void *__p = &off_101877BC0;
  uint64_t v3 = __p[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  operator delete(__p);
}

unsigned __int8 *sub_101121A94(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  unint64_t v8 = (unsigned __int8 *)sub_101121B1C(a1, a2, a3);
  else {
    return sub_101121C28(a1, v8, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
}

char *sub_101121B1C(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = sub_101121DC8(a1, a2, a3);
  int v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }

    else
    {
      int v8 = a2[1];
      if (v8 == 40)
      {
        uint64_t v9 = (uint64_t)(a2 + 2);
        sub_10111F720((void *)a1);
        int v10 = *(_DWORD *)(a1 + 28);
        do
        {
          int v11 = (char *)v9;
          uint64_t v9 = sub_101121A94(a1, v9, a3);
        }

        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
          sub_100BFB3E0();
        }
        int v7 = v11 + 2;
        sub_10111F784((void *)a1, v10);
      }

      else
      {
        int v13 = sub_101121F58(a1, v8);
        uint64_t v14 = 2LL;
        if (!v13) {
          uint64_t v14 = 0LL;
        }
        return &a2[v14];
      }
    }
  }

  return v7;
}

unsigned __int8 *sub_101121C28( uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    int v11 = *a2;
    if (v11 == 42)
    {
      sub_1011217B0(a1, 0LL, -1LL, a4, a5, a6, 1);
      return ++v6;
    }

    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      int v13 = a2 + 2;
      int v25 = 0;
      uint64_t v14 = sub_100BFEFA0(a1, a2 + 2, a3, &v25);
      if (v14 == v13) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        uint64_t v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          uint64_t v17 = sub_100BFEFA0(a1, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            uint64_t v19 = v24;
            uint64_t v18 = v25;
            if (v24 == -1)
            {
              uint64_t v19 = -1LL;
            }

            else if (v24 < v25)
            {
LABEL_16:
              sub_100BFF03C();
            }

            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            int v20 = a5;
            int v21 = a6;
            uint64_t v22 = a1;
LABEL_23:
            sub_1011217B0(v22, v18, v19, a4, v20, v21, 1);
            return v6;
          }
        }

        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          uint64_t v18 = v25;
          int v20 = a5;
          int v21 = a6;
          uint64_t v22 = a1;
          uint64_t v19 = v25;
          goto LABEL_23;
        }
      }

      sub_100BFF088();
    }
  }

  return v6;
}

char *sub_101121DC8(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = sub_100BFF808(a1, a2, a3);
    if (result != a2) {
      return result;
    }
    return sub_10111F610(a1, a2, a3);
  }

  int v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1LL << (v6 - 46)) & 0x600000000001LL) == 0))
  {
    sub_10111FBF0(a1, (char)v6);
    return a2 + 1;
  }

  uint64_t result = sub_100BFF808(a1, a2, a3);
  if (result != a2) {
    return result;
  }
  if (*a2 != 46) {
    return sub_10111F610(a1, a2, a3);
  }
  uint64_t v9 = operator new(0x10uLL);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(v10 + 8);
  *uint64_t v9 = &off_101878148;
  v9[1] = v11;
  *(void *)(v10 + 8) = v9;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
  return a2 + 1;
}

void *sub_101121ED0(void *a1)
{
  *a1 = &off_101877BC0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_101121F14(void *__p)
{
  void *__p = &off_101877BC0;
  uint64_t v2 = __p[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(__p);
}

uint64_t sub_101121F58(uint64_t a1, unsigned __int8 a2)
{
  return 1LL;
}

unsigned __int8 *sub_101121FB4(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_101122010(a1, a2, a3);
  do
  {
    int v7 = v6;
    int v6 = sub_101122010(a1, (char *)v6, a3);
  }

  while (v6 != v7);
  return v7;
}

unsigned __int8 *sub_101122010(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = sub_1011221A0(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != a2 || v8 == a3) {
    goto LABEL_12;
  }
  int v10 = *a2;
  switch(v10)
  {
    case '$':
      uint64_t v11 = operator new(0x18uLL);
      BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v13 = *(void *)(a1 + 56);
      goto LABEL_8;
    case '(':
      sub_10111F720((void *)a1);
      int v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      uint64_t v17 = (char *)sub_10111DDE4(a1, a2 + 1, a3);
      if (v17 == a3 || (uint64_t v18 = v17, *v17 != 41)) {
        sub_100BFB3E0();
      }
      sub_10111F784((void *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      uint64_t v9 = (unsigned __int8 *)(v18 + 1);
LABEL_12:
      return (unsigned __int8 *)a2;
    case '^':
      uint64_t v11 = operator new(0x18uLL);
      BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v13 = *(void *)(a1 + 56);
LABEL_8:
      uint64_t v15 = *(void *)(v13 + 8);
      *uint64_t v11 = v14 + 2;
      v11[1] = v15;
      *((_BYTE *)v11 + 16) = v12;
      *(void *)(v13 + 8) = v11;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v9 = (unsigned __int8 *)(a2 + 1);
      return sub_10111E840(a1, v9, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }

  return (unsigned __int8 *)a2;
}

char *sub_1011221A0(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = sub_100BFFB64(a1, a2, a3);
  if (result == a2)
  {
    uint64_t result = sub_101122258(a1, a2, a3);
    if (result == a2)
    {
      if (a2 == a3 || *a2 != 46)
      {
        return sub_10111F610(a1, a2, a3);
      }

      else
      {
        int v7 = operator new(0x10uLL);
        uint64_t v8 = *(void *)(a1 + 56);
        uint64_t v9 = *(void *)(v8 + 8);
        *int v7 = &off_101878148;
        v7[1] = v9;
        *(void *)(v8 + 8) = v7;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8LL);
        return a2 + 1;
      }
    }
  }

  return result;
}

char *sub_101122258(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  unint64_t v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  int v5 = *v4;
  signed __int8 v6 = *v4;
  BOOL v7 = (v5 - 36) > 0x3A || ((1LL << (*v4 - 36)) & 0x5800000080004F1LL) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    sub_10111FBF0(a1, v6);
    v3 += 2;
    return v3;
  }

  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    int v9 = sub_101121F58(a1, v6);
    uint64_t v10 = 2LL;
    if (!v9) {
      uint64_t v10 = 0LL;
    }
    v3 += v10;
    return v3;
  }

  return sub_101120F70(a1, v4, a3, 0LL);
}

void sub_10112231C(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v9 = a2 - 24;
  uint64_t v119 = (void **)(a2 - 48);
  unint64_t v122 = a2;
  char v116 = (void **)(a2 - 72);
  unint64_t v10 = a1;
  while (2)
  {
    a1 = v10;
    uint64_t v11 = v122 - v10;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - v10) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        sub_101123E50(*a3, (void **)v9, v129);
        sub_101123E50(*a3, (void **)a1, __p);
        BOOL v51 = sub_100022920((uint64_t)&v125, (const void **)v129, (const void **)__p);
        if (v128 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v130) < 0) {
          operator delete(v129[0]);
        }
        if (v51)
        {
          __int128 v52 = *(_OWORD *)a1;
          uint64_t v130 = *(void **)(a1 + 16);
          *(_OWORD *)unsigned int v129 = v52;
          __int128 v53 = *(_OWORD *)v9;
          *(void *)(a1 + 16) = *(void *)(v9 + 16);
          *(_OWORD *)a1 = v53;
          __int128 v54 = *(_OWORD *)v129;
          *(void *)(v9 + 16) = v130;
          *(_OWORD *)unint64_t v9 = v54;
        }

        return;
      case 3uLL:
        sub_101123830((void **)a1, (void **)(a1 + 24), (void **)v9, a3);
        return;
      case 4uLL:
        sub_101125078(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)v9, a3);
        return;
      case 5uLL:
        sub_1011235B8(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), (void **)v9, a3);
        return;
      default:
        if (v11 <= 575)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 == v122) {
              return;
            }
            unint64_t v55 = (void **)(a1 + 24);
            if (a1 + 24 == v122) {
              return;
            }
            uint64_t v56 = 0LL;
            char v57 = (void **)a1;
            while (1)
            {
              unsigned int v58 = v55;
              sub_101123E50(*a3, v55, v129);
              sub_101123E50(*a3, v57, __p);
              BOOL v59 = sub_100022920((uint64_t)&v125, (const void **)v129, (const void **)__p);
              if (v128 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v130) < 0)
              {
                operator delete(v129[0]);
                if (v59)
                {
LABEL_133:
                  __int128 v60 = *(_OWORD *)v58;
                  unint64_t v126 = v58[2];
                  __int128 v125 = v60;
                  v58[1] = 0LL;
                  v58[2] = 0LL;
                  char *v58 = 0LL;
                  uint64_t v61 = v56;
                  do
                  {
                    uint64_t v62 = a1 + v61;
                    unint64_t v63 = (void **)(a1 + v61 + 24);
                    *(_OWORD *)unint64_t v63 = *(_OWORD *)v62;
                    *(void *)(a1 + v61 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(void *)(v62 + 16);
                    *(_BYTE *)(v62 + 23) = 0;
                    *(_BYTE *)uint64_t v62 = 0;
                    if (!v61)
                    {
                      uint64_t v65 = a1;
                      goto LABEL_145;
                    }

                    sub_101123E50(*a3, (void **)&v125, v129);
                    sub_101123E50(*a3, (void **)(a1 + v61 - 24), __p);
                    BOOL v64 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
                    if (v128 < 0) {
                      operator delete(__p[0]);
                    }
                    if (SHIBYTE(v130) < 0) {
                      operator delete(v129[0]);
                    }
                    v61 -= 24LL;
                  }

                  while (v64);
                  uint64_t v65 = a1 + v61 + 24;
LABEL_145:
                  __int128 v66 = v125;
                  *(void *)(v65 + 16) = v126;
                  *(_OWORD *)uint64_t v65 = v66;
                }
              }

              else if (v59)
              {
                goto LABEL_133;
              }

              unint64_t v55 = v58 + 3;
              v56 += 24LL;
              char v57 = v58;
            }
          }

          if (a1 == v122) {
            return;
          }
          unsigned int v105 = (void **)(a1 + 24);
          if (a1 + 24 == v122) {
            return;
          }
          for (uint64_t i = a1 - 24; ; i += 24LL)
          {
            unint64_t v107 = v105;
            sub_101123E50(*a3, v105, v129);
            sub_101123E50(*a3, (void **)a1, __p);
            BOOL v108 = sub_100022920((uint64_t)&v125, (const void **)v129, (const void **)__p);
            if (v128 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v130) < 0)
            {
              operator delete(v129[0]);
              if (v108)
              {
LABEL_230:
                __int128 v109 = *(_OWORD *)v107;
                unint64_t v126 = v107[2];
                __int128 v125 = v109;
                v107[1] = 0LL;
                v107[2] = 0LL;
                *unint64_t v107 = 0LL;
                uint64_t v110 = i;
                do
                {
                  uint64_t v111 = (void **)(v110 + 48);
                  *(_OWORD *)uint64_t v111 = *(_OWORD *)(v110 + 24);
                  *(void *)(v110 + 64) = *(void *)(v110 + 40);
                  *(_BYTE *)(v110 + 47) = 0;
                  *(_BYTE *)(v110 + 24) = 0;
                  sub_101123E50(*a3, (void **)&v125, v129);
                  sub_101123E50(*a3, (void **)v110, __p);
                  BOOL v112 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0) {
                    operator delete(__p[0]);
                  }
                  if (SHIBYTE(v130) < 0) {
                    operator delete(v129[0]);
                  }
                  v110 -= 24LL;
                }

                while (v112);
                int v113 = *(char *)(v110 + 71);
                uint64_t v114 = v110 + 48;
                if (v113 < 0) {
                  operator delete(*(void **)v114);
                }
                __int128 v115 = v125;
                *(void *)(v114 + 16) = v126;
                *(_OWORD *)uint64_t v114 = v115;
              }
            }

            else if (v108)
            {
              goto LABEL_230;
            }

            unsigned int v105 = v107 + 3;
            a1 = (uint64_t)v107;
          }
        }

        if (!a4)
        {
          unint64_t v67 = (_OWORD *)v122;
          if (a1 == v122) {
            return;
          }
          int64_t v68 = (v12 - 2) >> 1;
          int64_t v120 = v68;
          do
          {
            int64_t v69 = v68;
            if (v120 >= v68)
            {
              uint64_t v70 = (2 * v68) | 1;
              uint64_t v71 = a1 + 24 * v70;
              uint64_t v72 = 2 * v68 + 2;
              int64_t v73 = v68;
              if (v72 < (uint64_t)v12)
              {
                sub_101123E50(*a3, (void **)(a1 + 24 * v70), v129);
                sub_101123E50(*a3, (void **)(v71 + 24), __p);
                BOOL v74 = sub_100022920((uint64_t)&v125, (const void **)v129, (const void **)__p);
                if (v128 < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v130) < 0) {
                  operator delete(v129[0]);
                }
                if (v74)
                {
                  v71 += 24LL;
                  uint64_t v70 = v72;
                }
              }

              sub_101123E50(*a3, (void **)v71, v129);
              int64_t v117 = v73;
              uint64_t v75 = a1 + 24 * v73;
              sub_101123E50(*a3, (void **)v75, __p);
              BOOL v76 = sub_100022920((uint64_t)&v125, (const void **)v129, (const void **)__p);
              unint64_t v67 = (_OWORD *)v122;
              if (v128 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v130) < 0) {
                operator delete(v129[0]);
              }
              int64_t v69 = v73;
              if (!v76)
              {
                __int128 v77 = *(_OWORD *)v75;
                unint64_t v126 = *(void **)(v75 + 16);
                __int128 v125 = v77;
                *(void *)(v75 + 8) = 0LL;
                *(void *)(v75 + 16) = 0LL;
                *(void *)uint64_t v75 = 0LL;
                do
                {
                  uint64_t v78 = v71;
                  __int128 v79 = *(_OWORD *)v71;
                  *(void *)(v75 + 16) = *(void *)(v71 + 16);
                  *(_OWORD *)uint64_t v75 = v79;
                  *(_BYTE *)(v71 + 23) = 0;
                  *(_BYTE *)uint64_t v71 = 0;
                  if (v120 < v70) {
                    goto LABEL_183;
                  }
                  uint64_t v80 = (2 * v70) | 1;
                  uint64_t v71 = a1 + 24 * v80;
                  uint64_t v70 = 2 * v70 + 2;
                  if (v70 >= (uint64_t)v12)
                  {
                    uint64_t v70 = v80;
                  }

                  else
                  {
                    sub_101123E50(*a3, (void **)(a1 + 24 * v80), v129);
                    sub_101123E50(*a3, (void **)(v71 + 24), __p);
                    BOOL v81 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
                    if (v128 < 0) {
                      operator delete(__p[0]);
                    }
                    if (SHIBYTE(v130) < 0) {
                      operator delete(v129[0]);
                    }
                    if (v81) {
                      v71 += 24LL;
                    }
                    else {
                      uint64_t v70 = v80;
                    }
                  }

                  sub_101123E50(*a3, (void **)v71, v129);
                  sub_101123E50(*a3, (void **)&v125, __p);
                  BOOL v82 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0) {
                    operator delete(__p[0]);
                  }
                  if (SHIBYTE(v130) < 0) {
                    operator delete(v129[0]);
                  }
                  uint64_t v75 = v78;
                }

                while (!v82);
LABEL_183:
                __int128 v83 = v125;
                *(void *)(v78 + 16) = v126;
                *(_OWORD *)uint64_t v78 = v83;
                unint64_t v67 = (_OWORD *)v122;
                int64_t v69 = v117;
              }
            }

            int64_t v68 = v69 - 1;
          }

          while (v69);
          int64_t v84 = v11 / 0x18uLL;
          while (1)
          {
            uint64_t v85 = 0LL;
            unint64_t v118 = v67;
            unsigned int v121 = *(void **)a1;
            *(void *)unint64_t v131 = *(void *)(a1 + 8);
            *(void *)&v131[7] = *(void *)(a1 + 15);
            char v123 = *(_BYTE *)(a1 + 23);
            *(void *)(a1 + 8) = 0LL;
            *(void *)(a1 + 16) = 0LL;
            *(void *)a1 = 0LL;
            uint64_t v86 = a1;
            do
            {
              uint64_t v87 = v86 + 24 * v85 + 24;
              uint64_t v88 = 2 * v85;
              uint64_t v85 = (2 * v85) | 1;
              uint64_t v89 = v88 + 2;
              if (v88 + 2 < v84)
              {
                sub_101123E50(*a3, (void **)v87, v129);
                sub_101123E50(*a3, (void **)(v87 + 24), __p);
                BOOL v90 = sub_100022920((uint64_t)&v125, (const void **)v129, (const void **)__p);
                if (v128 < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v130) < 0) {
                  operator delete(v129[0]);
                }
                if (v90)
                {
                  v87 += 24LL;
                  uint64_t v85 = v89;
                }
              }

              __int128 v91 = *(_OWORD *)v87;
              *(void *)(v86 + 16) = *(void *)(v87 + 16);
              *(_OWORD *)uint64_t v86 = v91;
              *(_BYTE *)(v87 + 23) = 0;
              *(_BYTE *)uint64_t v87 = 0;
              uint64_t v86 = v87;
            }

            while (v85 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
            unint64_t v67 = (_OWORD *)((char *)v118 - 24);
            if ((_OWORD *)v87 == (_OWORD *)((char *)v118 - 24))
            {
              *(void *)uint64_t v87 = v121;
              uint64_t v98 = *(void *)&v131[7];
              *(void *)(v87 + 8) = *(void *)v131;
              *(void *)(v87 + 15) = v98;
              *(_BYTE *)(v87 + 23) = v123;
            }

            else
            {
              __int128 v92 = *v67;
              *(void *)(v87 + 16) = *((void *)v118 - 1);
              *(_OWORD *)uint64_t v87 = v92;
              *((void *)v118 - 3) = v121;
              uint64_t v93 = *(void *)v131;
              *(void *)((char *)v118 - 9) = *(void *)&v131[7];
              *((void *)v118 - 2) = v93;
              *((_BYTE *)v118 - 1) = v123;
              uint64_t v94 = v87 - a1 + 24;
              if (v94 >= 25)
              {
                unint64_t v95 = (v94 / 0x18uLL - 2) >> 1;
                unint64_t v96 = a1 + 24 * v95;
                sub_101123E50(*a3, (void **)v96, v129);
                sub_101123E50(*a3, (void **)v87, __p);
                BOOL v97 = sub_100022920((uint64_t)&v125, (const void **)v129, (const void **)__p);
                if (v128 < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v130) < 0)
                {
                  operator delete(v129[0]);
                  if (v97)
                  {
LABEL_206:
                    __int128 v99 = *(_OWORD *)v87;
                    unint64_t v126 = *(void **)(v87 + 16);
                    __int128 v125 = v99;
                    *(void *)(v87 + 8) = 0LL;
                    *(void *)(v87 + 16) = 0LL;
                    *(void *)uint64_t v87 = 0LL;
                    while (1)
                    {
                      uint64_t v100 = v96;
                      __int128 v101 = *(_OWORD *)v96;
                      *(void *)(v87 + 16) = *(void *)(v96 + 16);
                      *(_OWORD *)uint64_t v87 = v101;
                      *(_BYTE *)(v96 + 23) = 0;
                      *(_BYTE *)unint64_t v96 = 0;
                      if (!v95) {
                        break;
                      }
                      unint64_t v95 = (v95 - 1) >> 1;
                      unint64_t v96 = a1 + 24 * v95;
                      sub_101123E50(*a3, (void **)v96, v129);
                      sub_101123E50(*a3, (void **)&v125, __p);
                      BOOL v102 = sub_100022920((uint64_t)&v124, (const void **)v129, (const void **)__p);
                      if (v128 < 0) {
                        operator delete(__p[0]);
                      }
                      if (SHIBYTE(v130) < 0) {
                        operator delete(v129[0]);
                      }
                      uint64_t v87 = v100;
                      if (!v102)
                      {
                        break;
                      }
                    }

                    __int128 v103 = v125;
                    *(void *)(v100 + 16) = v126;
                    *(_OWORD *)uint64_t v100 = v103;
                    unint64_t v67 = (_OWORD *)((char *)v118 - 24);
                  }
                }

                else if (v97)
                {
                  goto LABEL_206;
                }
              }
            }

            if (v84-- <= 2) {
              return;
            }
          }
        }

        unint64_t v13 = v12 >> 1;
        unint64_t v14 = a1 + 24 * (v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          sub_101123830((void **)(a1 + 24 * (v12 >> 1)), (void **)a1, (void **)v9, a3);
        }

        else
        {
          sub_101123830((void **)a1, (void **)(a1 + 24 * (v12 >> 1)), (void **)v9, a3);
          sub_101123830((void **)(a1 + 24), (void **)(a1 + 24 * v13 - 24), v119, a3);
          sub_101123830((void **)(a1 + 48), (void **)(a1 + 24 * v13 + 24), v116, a3);
          sub_101123830((void **)(a1 + 24 * v13 - 24), (void **)v14, (void **)(a1 + 24 * v13 + 24), a3);
          __int128 v15 = *(_OWORD *)a1;
          uint64_t v130 = *(void **)(a1 + 16);
          *(_OWORD *)unsigned int v129 = v15;
          __int128 v16 = *(_OWORD *)v14;
          *(void *)(a1 + 16) = *(void *)(v14 + 16);
          *(_OWORD *)a1 = v16;
          __int128 v17 = *(_OWORD *)v129;
          *(void *)(v14 + 16) = v130;
          *(_OWORD *)unint64_t v14 = v17;
        }

        --a4;
        if ((a5 & 1) == 0)
        {
          sub_101123E50(*a3, (void **)(a1 - 24), v129);
          sub_101123E50(*a3, (void **)a1, __p);
          BOOL v18 = sub_100022920((uint64_t)&v125, (const void **)v129, (const void **)__p);
          if (v128 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v130) < 0) {
            operator delete(v129[0]);
          }
          if (!v18)
          {
            __int128 v36 = *(_OWORD *)a1;
            unint64_t v126 = *(void **)(a1 + 16);
            __int128 v125 = v36;
            *(void *)(a1 + 8) = 0LL;
            *(void *)(a1 + 16) = 0LL;
            *(void *)a1 = 0LL;
            sub_101123E50(*a3, (void **)&v125, v129);
            sub_101123E50(*a3, (void **)v9, __p);
            BOOL v37 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
            if (v128 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v130) < 0) {
              operator delete(v129[0]);
            }
            if (v37)
            {
              unint64_t v10 = a1;
              do
              {
                sub_101123E50(*a3, (void **)&v125, v129);
                v10 += 24LL;
                sub_101123E50(*a3, (void **)v10, __p);
                BOOL v38 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v130) < 0) {
                  operator delete(v129[0]);
                }
              }

              while (!v38);
            }

            else
            {
              unint64_t v39 = a1 + 24;
              do
              {
                unint64_t v10 = v39;
                if (v39 >= v122) {
                  break;
                }
                sub_101123E50(*a3, (void **)&v125, v129);
                sub_101123E50(*a3, (void **)v10, __p);
                BOOL v40 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v130) < 0) {
                  operator delete(v129[0]);
                }
                unint64_t v39 = v10 + 24;
              }

              while (!v40);
            }

            unint64_t v41 = v122;
            if (v10 < v122)
            {
              unint64_t v41 = v122;
              do
              {
                while (1)
                {
                  sub_101123E50(*a3, (void **)&v125, v129);
                  v41 -= 24LL;
                  sub_101123E50(*a3, (void **)v41, __p);
                  BOOL v42 = sub_100022920((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0) {
                    operator delete(__p[0]);
                  }
                  if (SHIBYTE(v130) < 0) {
                    break;
                  }
                  if (!v42) {
                    goto LABEL_103;
                  }
                }

                operator delete(v129[0]);
              }

              while (v42);
            }

void sub_1011234B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1011235B8(uint64_t a1, void **a2, void **a3, void **a4, void **a5, uint64_t **a6)
{
  BOOL v12 = sub_100022920((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v12) {
      return result;
    }
  }

  else if (!v12)
  {
    return result;
  }

  unint64_t v14 = a4[2];
  __int128 v15 = *(_OWORD *)a4;
  __int128 v16 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  a4[2] = v16;
  *(_OWORD *)a5 = v15;
  a5[2] = v14;
  sub_101123E50(*a6, a4, v30);
  sub_101123E50(*a6, a3, __p);
  BOOL v17 = sub_100022920((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v17) {
      return result;
    }
  }

  else if (!v17)
  {
    return result;
  }

  BOOL v18 = a3[2];
  __int128 v19 = *(_OWORD *)a3;
  __int128 v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  a3[2] = v20;
  *(_OWORD *)a4 = v19;
  a4[2] = v18;
  sub_101123E50(*a6, a3, v30);
  sub_101123E50(*a6, a2, __p);
  BOOL v21 = sub_100022920((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v21) {
      return result;
    }
  }

  else if (!v21)
  {
    return result;
  }

  unint64_t v22 = a2[2];
  __int128 v23 = *(_OWORD *)a2;
  BOOL v24 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v24;
  *(_OWORD *)a3 = v23;
  a3[2] = v22;
  sub_101123E50(*a6, a2, v30);
  sub_101123E50(*a6, (void **)a1, __p);
  BOOL v25 = sub_100022920((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v25)
  {
    std::string v26 = *(void **)(a1 + 16);
    __n128 result = *(__n128 *)a1;
    __int128 v27 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v27;
    *(__n128 *)a2 = result;
    a2[2] = v26;
  }

  return result;
}

void sub_101123808( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_101123830(void **a1, void **a2, void **a3, uint64_t **a4)
{
  BOOL v8 = sub_100022920((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0)
  {
    operator delete((void *)v27[0]);
    if (v8) {
      goto LABEL_5;
    }
  }

  else if (v8)
  {
LABEL_5:
    sub_101123E50(*a4, a3, v27);
    sub_101123E50(*a4, a2, __p);
    BOOL v9 = sub_100022920((uint64_t)v29, v27, (const void **)__p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0)
    {
      operator delete((void *)v27[0]);
      if (v9) {
        goto LABEL_9;
      }
    }

    else if (v9)
    {
LABEL_9:
      unint64_t v10 = a1[2];
      __n128 result = *(__n128 *)a1;
      BOOL v12 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v12;
LABEL_23:
      *(__n128 *)a3 = result;
      a3[2] = v10;
      return result;
    }

    unint64_t v14 = a1[2];
    __n128 v15 = *(__n128 *)a1;
    __int128 v16 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v16;
    *(__n128 *)a2 = v15;
    a2[2] = v14;
    sub_101123E50(*a4, a3, v27);
    sub_101123E50(*a4, a2, __p);
    BOOL v17 = sub_100022920((uint64_t)v29, v27, (const void **)__p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete((void *)v27[0]);
    }
    if (v17)
    {
      unint64_t v10 = a2[2];
      __n128 result = *(__n128 *)a2;
      BOOL v18 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v18;
      goto LABEL_23;
    }

    return result;
  }

  sub_101123E50(*a4, a3, v27);
  sub_101123E50(*a4, a2, __p);
  BOOL v13 = sub_100022920((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0)
  {
    operator delete((void *)v27[0]);
    if (!v13) {
      return result;
    }
  }

  else if (!v13)
  {
    return result;
  }

  __int128 v19 = a2[2];
  __int128 v20 = *(_OWORD *)a2;
  BOOL v21 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v21;
  *(_OWORD *)a3 = v20;
  a3[2] = v19;
  sub_101123E50(*a4, a2, v27);
  sub_101123E50(*a4, a1, __p);
  BOOL v22 = sub_100022920((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  if (v22)
  {
    __int128 v23 = a1[2];
    __n128 result = *(__n128 *)a1;
    BOOL v24 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v24;
    *(__n128 *)a2 = result;
    a2[2] = v23;
  }

  return result;
}

void sub_101123AD4(_Unwind_Exception *exception_object)
{
}

BOOL sub_101123B00(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      sub_101123E50(*a3, (void **)(a2 - 24), v27);
      sub_101123E50(*a3, (void **)a1, __p);
      BOOL v9 = sub_100022920((uint64_t)&v23, (const void **)v27, (const void **)__p);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 16);
        __int128 v11 = *(_OWORD *)a1;
        uint64_t v12 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v12;
        *(_OWORD *)uint64_t v8 = v11;
        *(void *)(v8 + 16) = v10;
      }

      return 1LL;
    case 3uLL:
      sub_101123830((void **)a1, (void **)(a1 + 24), (void **)(a2 - 24), a3);
      return 1LL;
    case 4uLL:
      sub_101125078(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a2 - 24), a3);
      return 1LL;
    case 5uLL:
      sub_1011235B8(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), (void **)(a2 - 24), a3);
      return 1LL;
    default:
      BOOL v13 = (void **)(a1 + 48);
      sub_101123830((void **)a1, (void **)(a1 + 24), (void **)(a1 + 48), a3);
      uint64_t v14 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v15 = 0LL;
      int v16 = 0;
      break;
  }

  while (1)
  {
    sub_101123E50(*a3, (void **)v14, v27);
    sub_101123E50(*a3, v13, __p);
    BOOL v17 = sub_100022920((uint64_t)&v23, (const void **)v27, (const void **)__p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      break;
    }
    if (v17) {
      goto LABEL_17;
    }
LABEL_30:
    BOOL v13 = (void **)v14;
    v15 += 24LL;
    v14 += 24LL;
    if (v14 == a2) {
      return 1LL;
    }
  }

  operator delete(v27[0]);
  if (!v17) {
    goto LABEL_30;
  }
LABEL_17:
  __int128 v23 = *(_OWORD *)v14;
  uint64_t v24 = *(void *)(v14 + 16);
  *(void *)(v14 + 8) = 0LL;
  *(void *)(v14 + 16) = 0LL;
  *(void *)uint64_t v14 = 0LL;
  uint64_t v18 = v15;
  do
  {
    uint64_t v19 = a1 + v18;
    __int128 v20 = (void **)(a1 + v18 + 72);
    *(_OWORD *)__int128 v20 = *(_OWORD *)(v19 + 48);
    *(void *)(a1 + v18 + 88) = *(void *)(v19 + 64);
    *(_BYTE *)(v19 + 71) = 0;
    *(_BYTE *)(v19 + 48) = 0;
    if (v18 == -48)
    {
      uint64_t v22 = a1;
      goto LABEL_29;
    }

    sub_101123E50(*a3, (void **)&v23, v27);
    sub_101123E50(*a3, (void **)(a1 + v18 + 24), __p);
    BOOL v21 = sub_100022920((uint64_t)&v29, (const void **)v27, (const void **)__p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    v18 -= 24LL;
  }

  while (v21);
  uint64_t v22 = a1 + v18 + 72;
LABEL_29:
  *(_OWORD *)uint64_t v22 = v23;
  *(void *)(v22 + 16) = v24;
  if (++v16 != 8) {
    goto LABEL_30;
  }
  return v14 + 24 == a2;
}

void sub_101123E04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101123E50(uint64_t *a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  char v12 = 0;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  char v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0LL;
  *(_OWORD *)std::string __p = 0u;
  memset(v9, 0, sizeof(v9));
  uint64_t v5 = *a1;
  unint64_t v6 = (void *)*((unsigned __int8 *)a2 + 23);
  else {
    BOOL v7 = *a2;
  }
  sub_100BFFCB0((uint64_t)v7, (uint64_t)v6 + (void)v7, (uint64_t)__p, v5, 0);
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)48)
  {
    if (*((_BYTE *)__p[0] + 40))
    {
      sub_101120584( a3,  *((char **)__p[0] + 3),  *((char **)__p[0] + 4),  *((void *)__p[0] + 4) - *((void *)__p[0] + 3));
    }

    else
    {
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
    }
  }

  else if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(a3, *a2, (unint64_t)a2[1]);
  }

  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    a3[2] = a2[2];
  }

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

void sub_101123F38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101123F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  sub_10111EEC8(a4, *(_DWORD *)(a1 + 28) + 1, a2, a3, (unsigned __int16)(v9 & 0x800) >> 11);
  if (sub_1011242B8(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
  {
    if (*(void *)(a4 + 8) == *(void *)a4) {
      uint64_t v10 = (uint64_t *)(a4 + 24);
    }
    else {
      uint64_t v10 = *(uint64_t **)a4;
    }
LABEL_8:
    uint64_t v11 = *v10;
    *(void *)(a4 + 56) = *v10;
    *(_BYTE *)(a4 + 64) = *(void *)(a4 + 48) != v11;
    uint64_t v12 = v10[1];
    *(void *)(a4 + 72) = v12;
    *(_BYTE *)(a4 + 88) = v12 != *(void *)(a4 + 80);
    return 1LL;
  }

  if (a2 != a3 && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    uint64_t v15 = a2 + 1;
    if (v15 != a3)
    {
      while (1)
      {
        sub_100BFB804( (char **)a4,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3),  (__int128 *)(a4 + 24));
        int v16 = sub_1011242B8(a1, v15, a3, (uint64_t *)a4, v14, 0);
        uint64_t v18 = *(void *)a4;
        uint64_t v17 = *(void *)(a4 + 8);
        if (v16) {
          break;
        }
        sub_100BFB804((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3), (__int128 *)(a4 + 24));
        if (++v15 == a3) {
          goto LABEL_14;
        }
      }

      if (v17 == v18) {
        uint64_t v10 = (uint64_t *)(a4 + 24);
      }
      else {
        uint64_t v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }

void sub_10112412C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  sub_100C007F8(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  uint64_t v11 = *(void *)a1;
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    uint64_t v12 = 0LL;
    unint64_t v13 = 0LL;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      uint64_t v17 = (void *)(v15 + v12);
      if (v16 <= v13) {
        uint64_t v18 = a4 + 3;
      }
      else {
        uint64_t v18 = v17;
      }
      *(void *)(v11 + v12) = a2 + *v18 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        uint64_t v19 = a4 + 3;
      }
      else {
        uint64_t v19 = (uint64_t *)(*a4 + v12);
      }
      *(void *)(*(void *)a1 + v12 + 8) = a2 + v19[1] - v10;
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        __int128 v20 = a4 + 3;
      }
      else {
        __int128 v20 = (uint64_t *)(*a4 + v12);
      }
      char v21 = *((_BYTE *)v20 + 16);
      uint64_t v11 = *(void *)a1;
      uint64_t v22 = *(void *)(a1 + 8);
      *(_BYTE *)(*(void *)a1 + v12 + 16) = v21;
      ++v13;
      v12 += 24LL;
    }

    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v11) >> 3));
  }

  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  uint64_t v23 = a2 + a4[6] - v10;
  *(void *)(a1 + 48) = v23;
  *(void *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v10;
  *(void *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = v23;
  }
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t sub_1011242B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return sub_10111EF38(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return sub_101124810(a1, a2, a3, a4, a5, a6);
  }
  return sub_1011242D8(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1011242D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v59 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)unint64_t v55 = 0;
    memset(&v55[8], 0, 32);
    __int128 v56 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    memset(v58, 0, 21);
    sub_100BFFDA4(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (*(void *)&v55[32])
    {
      *(void *)&__int128 v56 = *(void *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }

    uint64_t v12 = *((void *)&v59 + 1);
    unint64_t v13 = *((void *)&v61 + 1) + v61 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v59 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    sub_100BFB9B4(*(void *)(v12 + 8 * v14) + 32 * v16 + 56, *(unsigned int *)(a1 + 32));
    char v53 = 0;
    unsigned int v18 = 0;
    uint64_t v51 = 0LL;
    uint64_t v52 = a2;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v61 + 1);
    uint64_t v21 = *((void *)&v59 + 1);
    unint64_t v22 = *((void *)&v61 + 1) + v61 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v59 + 1) + 8 * v23) + 32 * v24 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      unint64_t v27 = v20 + v61 - 1;
      uint64_t v28 = *(void *)(*((void *)&v59 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16LL))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v51;
          if (v38 != v19)
          {
            uint64_t v51 = v38;
            sub_100BFFEA4(&v59);
            char v53 = 1;
            goto LABEL_38;
          }

          unint64_t v39 = (void **)*((void *)&v59 + 1);
          uint64_t v40 = v60;
          if ((void)v60 == *((void *)&v59 + 1))
          {
            uint64_t v40 = *((void *)&v59 + 1);
          }

          else
          {
            unint64_t v41 = (void *)(*((void *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            BOOL v42 = (void *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v59 + 1) + 8 * ((*((void *)&v61 + 1) + (void)v61) / 0x2AuLL))
                + 96 * ((*((void *)&v61 + 1) + (void)v61) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                sub_100BFBC54((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  __int128 v44 = (void *)v41[1];
                  ++v41;
                  BOOL v42 = v44;
                }
              }

              while (v42 != (void *)v43);
              unint64_t v39 = (void **)*((void *)&v59 + 1);
              uint64_t v40 = v60;
            }
          }

          *((void *)&v61 + 1) = 0LL;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              unint64_t v39 = (void **)(*((void *)&v59 + 1) + 8LL);
              *((void *)&v59 + 1) = v39;
              unint64_t v47 = v60 - (void)v39;
            }

            while ((void)v60 - (void)v39 > 0x10uLL);
          }

          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21LL;
          }

          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42LL;
          }

          *(void *)&__int128 v61 = v48;
LABEL_53:
          char v53 = 1;
          uint64_t v51 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v61 + 1);
          if (*((void *)&v61 + 1)) {
            continue;
          }
          if ((v53 & 1) != 0)
          {
            uint64_t v49 = *a4;
            *(void *)uint64_t v49 = v52;
            *(void *)(v49 + 8) = v52 + v51;
            uint64_t v6 = 1LL;
            *(_BYTE *)(v49 + 16) = 1;
          }

          else
          {
            uint64_t v6 = 0LL;
          }

          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          sub_100BFFF24((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          sub_100BFFEA4(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          __int128 v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)unint64_t v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          __int128 v56 = 0uLL;
          *(void *)&v55[32] = 0LL;
          sub_10111F484( &v55[32],  *(__int128 **)(v28 + 96 * v29 + 32),  *(__int128 **)(v28 + 96 * v29 + 40),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0LL;
          __p[1] = 0LL;
          v58[0] = 0LL;
          sub_10111F500( (char *)__p,  *(__int128 **)(v28 + 96 * v29 + 56),  *(__int128 **)(v28 + 96 * v29 + 64),  (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v58[1] + 5) = *(void *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24LL))( *v32,  1LL,  v28 + 96 * v29);
          (*(void (**)(void, void, _BYTE *))(*(void *)v58[1] + 24LL))(v58[1], 0LL, v55);
          sub_100BFFDA4(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }

          if (*(void *)&v55[32])
          {
            *(void *)&__int128 v56 = *(void *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }

          goto LABEL_38;
        default:
          sub_100BFBA30();
      }

      break;
    }
  }

  sub_100C006B4(&v59);
  return v6;
}

void sub_1011247C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22)
{
}

uint64_t sub_101124810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  __int128 v54 = 0LL;
  unint64_t v55 = 0LL;
  v56[0] = 0LL;
  *(_DWORD *)uint64_t v51 = 0;
  memset(&v51[8], 0, 32);
  __int128 v52 = 0u;
  memset(v53, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_43;
  }
  *(void *)&__int128 v49 = a3;
  *((void *)&v49 + 1) = a3;
  char v50 = 0;
  *(_DWORD *)uint64_t v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)std::string __p = 0uLL;
  memset(v48, 0, 21);
  unint64_t v55 = (_OWORD *)sub_10111F338((uint64_t *)&v54, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (*(void *)&v46[32])
  {
    *(void *)&v46[40] = *(void *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }

  unint64_t v41 = a4;
  uint64_t v11 = v55;
  *((_DWORD *)v55 - 24) = 0;
  *((void *)v11 - 11) = a2;
  *((void *)v11 - 1sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = a2;
  *((void *)v11 - 9) = a3;
  sub_100BFB978((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v49);
  sub_100BFB9B4((uint64_t)v55 - 40, *(unsigned int *)(a1 + 32));
  uint64_t v42 = 0LL;
  char v43 = 0;
  unsigned int v12 = 0;
  uint64_t v13 = a3 - a2;
  unint64_t v14 = v55;
  *((void *)v55 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    BOOL v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15) {
      sub_100BFB9E4();
    }
    uint64_t v17 = v14 - 1;
    uint64_t v16 = *((void *)v14 - 2);
    unsigned int v18 = v14 - 6;
    if (v16) {
      (*(void (**)(uint64_t, _OWORD *))(*(void *)v16 + 16LL))(v16, v14 - 6);
    }
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        uint64_t v19 = *((void *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3) {
          goto LABEL_19;
        }
        uint64_t v26 = v19 - *((void *)v14 - 11);
        uint64_t v27 = v42;
        if ((v43 & (v42 >= v26)) == 0)
        {
          __int128 v28 = *(v14 - 5);
          *(_OWORD *)uint64_t v51 = *(_OWORD *)v18;
          *(_OWORD *)&v51[16] = v28;
          if (v51 != v18)
          {
            sub_101124D78( &v51[32],  *((__int128 **)v14 - 8),  *((__int128 **)v14 - 7),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v14 - 7) - *((void *)v14 - 8)) >> 3));
            sub_101124F2C( v53,  *((uint64_t **)v14 - 5),  *((uint64_t **)v14 - 4),  (uint64_t)(*((void *)v14 - 4) - *((void *)v14 - 5)) >> 4);
          }

          unint64_t v29 = (void *)*v17;
          *(void **)((char *)&v53[3] + 5) = *(void **)((char *)v14 - 11);
          v53[3] = v29;
          uint64_t v27 = v26;
        }

        uint64_t v30 = v55;
        if (v27 == v13)
        {
          uint64_t v31 = (uint64_t)v54;
          while (v30 != (void *)v31)
          {
            v30 -= 12;
            sub_100BFBC54((uint64_t)v56, v30);
          }

          unint64_t v55 = (_OWORD *)v31;
          char v43 = 1;
          uint64_t v42 = a3 - a2;
        }

        else
        {
          uint64_t v42 = v27;
          char v32 = v55 - 6;
          sub_100BFBC54((uint64_t)v56, (void *)v55 - 12);
          unint64_t v55 = v32;
          char v43 = 1;
        }

        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        uint64_t v20 = v55 - 6;
        sub_100BFBC54((uint64_t)v56, (void *)v55 - 12);
        unint64_t v55 = v20;
        break;
      case 0xFFFFFC20:
        __int128 v21 = *(v14 - 5);
        *(_OWORD *)uint64_t v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        sub_10111F484( &v46[32],  *((__int128 **)v14 - 8),  *((__int128 **)v14 - 7),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v14 - 7) - *((void *)v14 - 8)) >> 3));
        __p[0] = 0LL;
        __p[1] = 0LL;
        v48[0] = 0LL;
        sub_10111F500( (char *)__p,  *((__int128 **)v14 - 5),  *((__int128 **)v14 - 4),  (uint64_t)(*((void *)v14 - 4) - *((void *)v14 - 5)) >> 4);
        uint64_t v22 = (void *)*v17;
        *(void *)((char *)&v48[1] + 5) = *(void *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v17 + 24LL))(*v17, 1LL, v14 - 6);
        (*(void (**)(void, void, _BYTE *))(*(void *)v48[1] + 24LL))(v48[1], 0LL, v46);
        unint64_t v23 = v55;
        if ((unint64_t)v55 >= v56[0])
        {
          unint64_t v55 = (_OWORD *)sub_10111F338((uint64_t *)&v54, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }

        else
        {
          __int128 v24 = *(_OWORD *)&v46[16];
          *unint64_t v55 = *(_OWORD *)v46;
          v23[1] = v24;
          *((void *)v23 + 4) = 0LL;
          *((void *)v23 + 5) = 0LL;
          *((void *)v23 + 6) = 0LL;
          *((void *)v23 + 7) = 0LL;
          v23[2] = *(_OWORD *)&v46[32];
          *((void *)v23 + 6) = *(void *)&v46[48];
          memset(&v46[32], 0, 24);
          *((void *)v23 + 8) = 0LL;
          *((void *)v23 + 9) = 0LL;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((void *)v23 + 9) = v48[0];
          __p[0] = 0LL;
          __p[1] = 0LL;
          v48[0] = 0LL;
          uint64_t v25 = v48[1];
          *(void *)((char *)v23 + 85) = *(void *)((char *)&v48[1] + 5);
          *((void *)v23 + 1sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v25;
          unint64_t v55 = v23 + 6;
        }

        if (*(void *)&v46[32])
        {
          *(void *)&v46[40] = *(void *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }

        break;
      default:
        sub_100BFBA30();
    }

    unint64_t v14 = v55;
  }

  while (v54 != v55);
  if ((v43 & 1) != 0)
  {
    uint64_t v33 = *v41;
    *(void *)uint64_t v33 = a2;
    *(void *)(v33 + 8) = a2 + v42;
    *(_BYTE *)(v33 + 16) = 1;
    if ((void)v52 != *(void *)&v51[32])
    {
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(void *)&v51[32]) >> 3);
      BOOL v35 = (_BYTE *)(*(void *)&v51[32] + 16LL);
      unsigned int v36 = 1;
      do
      {
        uint64_t v37 = v33 + 24LL * v36;
        *(_OWORD *)uint64_t v37 = *((_OWORD *)v35 - 1);
        char v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        BOOL v15 = v34 > v36++;
      }

      while (v15);
    }

    uint64_t v39 = 1LL;
  }

  else
  {
LABEL_43:
    uint64_t v39 = 0LL;
  }

  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }

  if (*(void *)&v51[32])
  {
    *(void *)&__int128 v52 = *(void *)&v51[32];
    operator delete(*(void **)&v51[32]);
  }

  *(void *)uint64_t v51 = &v54;
  sub_100BFBF8C((void ***)v51);
  return v39;
}

void sub_101124D18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  a35 = v35 - 120;
  sub_100BFBF8C((void ***)&a35);
  _Unwind_Resume(a1);
}

char *sub_101124D78(void *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    unint64_t v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }

        while (v6 != a3);
      }

      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }

    else
    {
      __int128 v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          uint64_t v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }

        while (v6 != v21);
      }

      uint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          __int128 v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          __int128 v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }

        while (v21 != a3);
      }

      int64_t v18 = v22 - v13;
    }
  }

  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0LL;
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_100007008();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555LL) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_100006E1C(a1, v12);
    BOOL v15 = (char *)a1[1];
    unint64_t v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        __int128 v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (__int128 *)((char *)v6 + 24);
      }

      while (v6 != a3);
    }

    int64_t v18 = v16 - v13;
  }

  *unint64_t v14 = &v13[v18];
  return result;
}

char *sub_101124F2C(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }

        while (v6 != a3);
      }

      __int128 v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }

    else
    {
      unint64_t v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)uint64_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }

        while (v6 != (uint64_t *)v20);
      }

      unint64_t v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        __int128 v24 = v12;
        do
        {
          __int128 v25 = *v20++;
          *(_OWORD *)__int128 v24 = v25;
          v24 += 16;
          v23 += 16;
        }

        while (v20 != (__int128 *)a3);
      }

      __int128 v17 = (char *)(v23 - v12);
    }
  }

  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0LL;
      *a1 = 0LL;
      a1[1] = 0LL;
      a1[2] = 0LL;
    }

    if (a4 >> 60) {
      sub_100007008();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10005782C(a1, v11);
    unint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    BOOL v15 = v14;
    if (v6 != a3)
    {
      BOOL v15 = v12;
      do
      {
        __int128 v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)BOOL v15 = v16;
        v15 += 16;
      }

      while (v6 != a3);
    }

    __int128 v17 = (char *)(v15 - v12);
  }

  *uint64_t v13 = &v17[(void)v12];
  return result;
}

__n128 sub_101125078(uint64_t a1, void **a2, void **a3, void **a4, uint64_t **a5)
{
  BOOL v10 = sub_100022920((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (!v10) {
      return result;
    }
  }

  else if (!v10)
  {
    return result;
  }

  unint64_t v12 = a3[2];
  __int128 v13 = *(_OWORD *)a3;
  unint64_t v14 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  a3[2] = v14;
  *(_OWORD *)a4 = v13;
  a4[2] = v12;
  sub_101123E50(*a5, a3, v24);
  sub_101123E50(*a5, a2, __p);
  BOOL v15 = sub_100022920((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (!v15) {
      return result;
    }
  }

  else if (!v15)
  {
    return result;
  }

  __int128 v16 = a2[2];
  __int128 v17 = *(_OWORD *)a2;
  int64_t v18 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v18;
  *(_OWORD *)a3 = v17;
  a3[2] = v16;
  sub_101123E50(*a5, a2, v24);
  sub_101123E50(*a5, (void **)a1, __p);
  BOOL v19 = sub_100022920((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v19)
  {
    unint64_t v20 = *(void **)(a1 + 16);
    __n128 result = *(__n128 *)a1;
    uint64_t v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v21;
    *(__n128 *)a2 = result;
    a2[2] = v20;
  }

  return result;
}

void sub_10112523C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101125260(void *a1)
{
  *a1 = &off_10189D350;
  bzero(a1 + 1, 0x260uLL);
  bzero(a1 + 78, 0xBB4uLL);
  return a1;
}

void sub_1011252A4(PB::Base *this)
{
  *(void *)this = &off_10189D350;
  uint64_t v2 = *((void *)this + 451);
  *((void *)this + 451) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 450);
  *((void *)this + 45sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *((void *)this + 449);
  *((void *)this + 449) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *((void *)this + 448);
  *((void *)this + 448) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *((void *)this + 447);
  *((void *)this + 447) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *((void *)this + 446);
  *((void *)this + 446) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *((void *)this + 445);
  *((void *)this + 445) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *((void *)this + 444);
  *((void *)this + 444) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = *((void *)this + 443);
  *((void *)this + 443) = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = *((void *)this + 442);
  *((void *)this + 442) = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = *((void *)this + 441);
  *((void *)this + 441) = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = *((void *)this + 440);
  *((void *)this + 44sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  uint64_t v14 = *((void *)this + 439);
  *((void *)this + 439) = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  uint64_t v15 = *((void *)this + 438);
  *((void *)this + 438) = 0LL;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
  }
  uint64_t v16 = *((void *)this + 437);
  *((void *)this + 437) = 0LL;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  uint64_t v17 = *((void *)this + 436);
  *((void *)this + 436) = 0LL;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
  }
  uint64_t v18 = *((void *)this + 435);
  *((void *)this + 435) = 0LL;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  uint64_t v19 = *((void *)this + 434);
  *((void *)this + 434) = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  uint64_t v20 = *((void *)this + 433);
  *((void *)this + 433) = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  uint64_t v21 = *((void *)this + 432);
  *((void *)this + 432) = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  uint64_t v22 = *((void *)this + 431);
  *((void *)this + 431) = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  uint64_t v23 = *((void *)this + 430);
  *((void *)this + 43sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8LL))(v23);
  }
  uint64_t v24 = *((void *)this + 429);
  *((void *)this + 429) = 0LL;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
  }
  uint64_t v25 = *((void *)this + 428);
  *((void *)this + 428) = 0LL;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
  }
  uint64_t v26 = *((void *)this + 427);
  *((void *)this + 427) = 0LL;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
  }
  uint64_t v27 = *((void *)this + 426);
  *((void *)this + 426) = 0LL;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
  }
  uint64_t v28 = *((void *)this + 425);
  *((void *)this + 425) = 0LL;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
  }
  uint64_t v29 = *((void *)this + 424);
  *((void *)this + 424) = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }
  uint64_t v30 = *((void *)this + 423);
  *((void *)this + 423) = 0LL;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
  }
  uint64_t v31 = *((void *)this + 422);
  *((void *)this + 422) = 0LL;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
  }
  uint64_t v32 = *((void *)this + 421);
  *((void *)this + 421) = 0LL;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
  }
  uint64_t v33 = *((void *)this + 420);
  *((void *)this + 42sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
  }
  uint64_t v34 = *((void *)this + 419);
  *((void *)this + 419) = 0LL;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8LL))(v34);
  }
  uint64_t v35 = *((void *)this + 418);
  *((void *)this + 418) = 0LL;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
  }
  uint64_t v36 = *((void *)this + 417);
  *((void *)this + 417) = 0LL;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8LL))(v36);
  }
  uint64_t v37 = *((void *)this + 416);
  *((void *)this + 416) = 0LL;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8LL))(v37);
  }
  uint64_t v38 = *((void *)this + 415);
  *((void *)this + 415) = 0LL;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8LL))(v38);
  }
  uint64_t v39 = *((void *)this + 414);
  *((void *)this + 414) = 0LL;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8LL))(v39);
  }
  uint64_t v40 = *((void *)this + 413);
  *((void *)this + 413) = 0LL;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8LL))(v40);
  }
  uint64_t v41 = *((void *)this + 412);
  *((void *)this + 412) = 0LL;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
  }
  uint64_t v42 = *((void *)this + 411);
  *((void *)this + 411) = 0LL;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8LL))(v42);
  }
  uint64_t v43 = *((void *)this + 410);
  *((void *)this + 41sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8LL))(v43);
  }
  uint64_t v44 = *((void *)this + 409);
  *((void *)this + 409) = 0LL;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8LL))(v44);
  }
  uint64_t v45 = *((void *)this + 408);
  *((void *)this + 408) = 0LL;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8LL))(v45);
  }
  uint64_t v46 = *((void *)this + 407);
  *((void *)this + 407) = 0LL;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8LL))(v46);
  }
  uint64_t v47 = *((void *)this + 406);
  *((void *)this + 406) = 0LL;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8LL))(v47);
  }
  uint64_t v48 = *((void *)this + 405);
  *((void *)this + 405) = 0LL;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8LL))(v48);
  }
  uint64_t v49 = *((void *)this + 404);
  *((void *)this + 404) = 0LL;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8LL))(v49);
  }
  uint64_t v50 = *((void *)this + 403);
  *((void *)this + 403) = 0LL;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8LL))(v50);
  }
  uint64_t v51 = *((void *)this + 402);
  *((void *)this + 402) = 0LL;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
  }
  uint64_t v52 = *((void *)this + 401);
  *((void *)this + 401) = 0LL;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
  }
  uint64_t v53 = *((void *)this + 400);
  *((void *)this + 40sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8LL))(v53);
  }
  uint64_t v54 = *((void *)this + 399);
  *((void *)this + 399) = 0LL;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8LL))(v54);
  }
  uint64_t v55 = *((void *)this + 398);
  *((void *)this + 398) = 0LL;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8LL))(v55);
  }
  uint64_t v56 = *((void *)this + 397);
  *((void *)this + 397) = 0LL;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
  }
  uint64_t v57 = *((void *)this + 396);
  *((void *)this + 396) = 0LL;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8LL))(v57);
  }
  uint64_t v58 = *((void *)this + 395);
  *((void *)this + 395) = 0LL;
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8LL))(v58);
  }
  uint64_t v59 = *((void *)this + 394);
  *((void *)this + 394) = 0LL;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
  }
  uint64_t v60 = *((void *)this + 393);
  *((void *)this + 393) = 0LL;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8LL))(v60);
  }
  uint64_t v61 = *((void *)this + 392);
  *((void *)this + 392) = 0LL;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8LL))(v61);
  }
  uint64_t v62 = *((void *)this + 391);
  *((void *)this + 391) = 0LL;
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8LL))(v62);
  }
  uint64_t v63 = *((void *)this + 390);
  *((void *)this + 39sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8LL))(v63);
  }
  uint64_t v64 = *((void *)this + 389);
  *((void *)this + 389) = 0LL;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8LL))(v64);
  }
  uint64_t v65 = *((void *)this + 388);
  *((void *)this + 388) = 0LL;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8LL))(v65);
  }
  uint64_t v66 = *((void *)this + 387);
  *((void *)this + 387) = 0LL;
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8LL))(v66);
  }
  uint64_t v67 = *((void *)this + 386);
  *((void *)this + 386) = 0LL;
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8LL))(v67);
  }
  uint64_t v68 = *((void *)this + 385);
  *((void *)this + 385) = 0LL;
  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v68 + 8LL))(v68);
  }
  uint64_t v69 = *((void *)this + 384);
  *((void *)this + 384) = 0LL;
  if (v69) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8LL))(v69);
  }
  uint64_t v70 = *((void *)this + 383);
  *((void *)this + 383) = 0LL;
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8LL))(v70);
  }
  uint64_t v71 = *((void *)this + 382);
  *((void *)this + 382) = 0LL;
  if (v71) {
    (*(void (**)(uint64_t))(*(void *)v71 + 8LL))(v71);
  }
  uint64_t v72 = *((void *)this + 381);
  *((void *)this + 381) = 0LL;
  if (v72) {
    (*(void (**)(uint64_t))(*(void *)v72 + 8LL))(v72);
  }
  uint64_t v73 = *((void *)this + 380);
  *((void *)this + 38sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8LL))(v73);
  }
  uint64_t v74 = *((void *)this + 379);
  *((void *)this + 379) = 0LL;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8LL))(v74);
  }
  uint64_t v75 = *((void *)this + 378);
  *((void *)this + 378) = 0LL;
  if (v75) {
    (*(void (**)(uint64_t))(*(void *)v75 + 8LL))(v75);
  }
  uint64_t v76 = *((void *)this + 377);
  *((void *)this + 377) = 0LL;
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 8LL))(v76);
  }
  uint64_t v77 = *((void *)this + 376);
  *((void *)this + 376) = 0LL;
  if (v77) {
    (*(void (**)(uint64_t))(*(void *)v77 + 8LL))(v77);
  }
  uint64_t v78 = *((void *)this + 375);
  *((void *)this + 375) = 0LL;
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 8LL))(v78);
  }
  uint64_t v79 = *((void *)this + 374);
  *((void *)this + 374) = 0LL;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 8LL))(v79);
  }
  uint64_t v80 = *((void *)this + 373);
  *((void *)this + 373) = 0LL;
  if (v80) {
    (*(void (**)(uint64_t))(*(void *)v80 + 8LL))(v80);
  }
  uint64_t v81 = *((void *)this + 372);
  *((void *)this + 372) = 0LL;
  if (v81) {
    (*(void (**)(uint64_t))(*(void *)v81 + 8LL))(v81);
  }
  uint64_t v82 = *((void *)this + 371);
  *((void *)this + 371) = 0LL;
  if (v82) {
    (*(void (**)(uint64_t))(*(void *)v82 + 8LL))(v82);
  }
  uint64_t v83 = *((void *)this + 370);
  *((void *)this + 37sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v83) {
    (*(void (**)(uint64_t))(*(void *)v83 + 8LL))(v83);
  }
  uint64_t v84 = *((void *)this + 369);
  *((void *)this + 369) = 0LL;
  if (v84) {
    (*(void (**)(uint64_t))(*(void *)v84 + 8LL))(v84);
  }
  uint64_t v85 = *((void *)this + 368);
  *((void *)this + 368) = 0LL;
  if (v85) {
    (*(void (**)(uint64_t))(*(void *)v85 + 8LL))(v85);
  }
  uint64_t v86 = *((void *)this + 367);
  *((void *)this + 367) = 0LL;
  if (v86) {
    (*(void (**)(uint64_t))(*(void *)v86 + 8LL))(v86);
  }
  uint64_t v87 = *((void *)this + 366);
  *((void *)this + 366) = 0LL;
  if (v87) {
    (*(void (**)(uint64_t))(*(void *)v87 + 8LL))(v87);
  }
  uint64_t v88 = *((void *)this + 365);
  *((void *)this + 365) = 0LL;
  if (v88) {
    (*(void (**)(uint64_t))(*(void *)v88 + 8LL))(v88);
  }
  uint64_t v89 = *((void *)this + 364);
  *((void *)this + 364) = 0LL;
  if (v89) {
    (*(void (**)(uint64_t))(*(void *)v89 + 8LL))(v89);
  }
  uint64_t v90 = *((void *)this + 363);
  *((void *)this + 363) = 0LL;
  if (v90) {
    (*(void (**)(uint64_t))(*(void *)v90 + 8LL))(v90);
  }
  uint64_t v91 = *((void *)this + 362);
  *((void *)this + 362) = 0LL;
  if (v91) {
    (*(void (**)(uint64_t))(*(void *)v91 + 8LL))(v91);
  }
  uint64_t v92 = *((void *)this + 361);
  *((void *)this + 361) = 0LL;
  if (v92) {
    (*(void (**)(uint64_t))(*(void *)v92 + 8LL))(v92);
  }
  uint64_t v93 = *((void *)this + 360);
  *((void *)this + 36sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v93) {
    (*(void (**)(uint64_t))(*(void *)v93 + 8LL))(v93);
  }
  uint64_t v94 = *((void *)this + 359);
  *((void *)this + 359) = 0LL;
  if (v94) {
    (*(void (**)(uint64_t))(*(void *)v94 + 8LL))(v94);
  }
  uint64_t v95 = *((void *)this + 358);
  *((void *)this + 358) = 0LL;
  if (v95) {
    (*(void (**)(uint64_t))(*(void *)v95 + 8LL))(v95);
  }
  uint64_t v96 = *((void *)this + 357);
  *((void *)this + 357) = 0LL;
  if (v96) {
    (*(void (**)(uint64_t))(*(void *)v96 + 8LL))(v96);
  }
  uint64_t v97 = *((void *)this + 356);
  *((void *)this + 356) = 0LL;
  if (v97) {
    (*(void (**)(uint64_t))(*(void *)v97 + 8LL))(v97);
  }
  uint64_t v98 = *((void *)this + 355);
  *((void *)this + 355) = 0LL;
  if (v98) {
    (*(void (**)(uint64_t))(*(void *)v98 + 8LL))(v98);
  }
  uint64_t v99 = *((void *)this + 354);
  *((void *)this + 354) = 0LL;
  if (v99) {
    (*(void (**)(uint64_t))(*(void *)v99 + 8LL))(v99);
  }
  uint64_t v100 = *((void *)this + 353);
  *((void *)this + 353) = 0LL;
  if (v100) {
    (*(void (**)(uint64_t))(*(void *)v100 + 8LL))(v100);
  }
  uint64_t v101 = *((void *)this + 352);
  *((void *)this + 352) = 0LL;
  if (v101) {
    (*(void (**)(uint64_t))(*(void *)v101 + 8LL))(v101);
  }
  uint64_t v102 = *((void *)this + 351);
  *((void *)this + 351) = 0LL;
  if (v102) {
    (*(void (**)(uint64_t))(*(void *)v102 + 8LL))(v102);
  }
  uint64_t v103 = *((void *)this + 350);
  *((void *)this + 35sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v103) {
    (*(void (**)(uint64_t))(*(void *)v103 + 8LL))(v103);
  }
  uint64_t v104 = *((void *)this + 349);
  *((void *)this + 349) = 0LL;
  if (v104) {
    (*(void (**)(uint64_t))(*(void *)v104 + 8LL))(v104);
  }
  uint64_t v105 = *((void *)this + 348);
  *((void *)this + 348) = 0LL;
  if (v105) {
    (*(void (**)(uint64_t))(*(void *)v105 + 8LL))(v105);
  }
  uint64_t v106 = *((void *)this + 347);
  *((void *)this + 347) = 0LL;
  if (v106) {
    (*(void (**)(uint64_t))(*(void *)v106 + 8LL))(v106);
  }
  uint64_t v107 = *((void *)this + 346);
  *((void *)this + 346) = 0LL;
  if (v107) {
    (*(void (**)(uint64_t))(*(void *)v107 + 8LL))(v107);
  }
  uint64_t v108 = *((void *)this + 345);
  *((void *)this + 345) = 0LL;
  if (v108) {
    (*(void (**)(uint64_t))(*(void *)v108 + 8LL))(v108);
  }
  uint64_t v109 = *((void *)this + 344);
  *((void *)this + 344) = 0LL;
  if (v109) {
    (*(void (**)(uint64_t))(*(void *)v109 + 8LL))(v109);
  }
  uint64_t v110 = *((void *)this + 343);
  *((void *)this + 343) = 0LL;
  if (v110) {
    (*(void (**)(uint64_t))(*(void *)v110 + 8LL))(v110);
  }
  uint64_t v111 = *((void *)this + 342);
  *((void *)this + 342) = 0LL;
  if (v111) {
    (*(void (**)(uint64_t))(*(void *)v111 + 8LL))(v111);
  }
  uint64_t v112 = *((void *)this + 341);
  *((void *)this + 341) = 0LL;
  if (v112) {
    (*(void (**)(uint64_t))(*(void *)v112 + 8LL))(v112);
  }
  uint64_t v113 = *((void *)this + 340);
  *((void *)this + 34sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v113) {
    (*(void (**)(uint64_t))(*(void *)v113 + 8LL))(v113);
  }
  uint64_t v114 = *((void *)this + 339);
  *((void *)this + 339) = 0LL;
  if (v114) {
    (*(void (**)(uint64_t))(*(void *)v114 + 8LL))(v114);
  }
  uint64_t v115 = *((void *)this + 338);
  *((void *)this + 338) = 0LL;
  if (v115) {
    (*(void (**)(uint64_t))(*(void *)v115 + 8LL))(v115);
  }
  uint64_t v116 = *((void *)this + 337);
  *((void *)this + 337) = 0LL;
  if (v116) {
    (*(void (**)(uint64_t))(*(void *)v116 + 8LL))(v116);
  }
  uint64_t v117 = *((void *)this + 336);
  *((void *)this + 336) = 0LL;
  if (v117) {
    (*(void (**)(uint64_t))(*(void *)v117 + 8LL))(v117);
  }
  uint64_t v118 = *((void *)this + 335);
  *((void *)this + 335) = 0LL;
  if (v118) {
    (*(void (**)(uint64_t))(*(void *)v118 + 8LL))(v118);
  }
  uint64_t v119 = *((void *)this + 334);
  *((void *)this + 334) = 0LL;
  if (v119) {
    (*(void (**)(uint64_t))(*(void *)v119 + 8LL))(v119);
  }
  uint64_t v120 = *((void *)this + 333);
  *((void *)this + 333) = 0LL;
  if (v120) {
    (*(void (**)(uint64_t))(*(void *)v120 + 8LL))(v120);
  }
  uint64_t v121 = *((void *)this + 332);
  *((void *)this + 332) = 0LL;
  if (v121) {
    (*(void (**)(uint64_t))(*(void *)v121 + 8LL))(v121);
  }
  uint64_t v122 = *((void *)this + 331);
  *((void *)this + 331) = 0LL;
  if (v122) {
    (*(void (**)(uint64_t))(*(void *)v122 + 8LL))(v122);
  }
  uint64_t v123 = *((void *)this + 330);
  *((void *)this + 33sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v123) {
    (*(void (**)(uint64_t))(*(void *)v123 + 8LL))(v123);
  }
  uint64_t v124 = *((void *)this + 329);
  *((void *)this + 329) = 0LL;
  if (v124) {
    (*(void (**)(uint64_t))(*(void *)v124 + 8LL))(v124);
  }
  uint64_t v125 = *((void *)this + 328);
  *((void *)this + 328) = 0LL;
  if (v125) {
    (*(void (**)(uint64_t))(*(void *)v125 + 8LL))(v125);
  }
  uint64_t v126 = *((void *)this + 327);
  *((void *)this + 327) = 0LL;
  if (v126) {
    (*(void (**)(uint64_t))(*(void *)v126 + 8LL))(v126);
  }
  uint64_t v127 = *((void *)this + 326);
  *((void *)this + 326) = 0LL;
  if (v127) {
    (*(void (**)(uint64_t))(*(void *)v127 + 8LL))(v127);
  }
  uint64_t v128 = *((void *)this + 325);
  *((void *)this + 325) = 0LL;
  if (v128) {
    (*(void (**)(uint64_t))(*(void *)v128 + 8LL))(v128);
  }
  uint64_t v129 = *((void *)this + 324);
  *((void *)this + 324) = 0LL;
  if (v129) {
    (*(void (**)(uint64_t))(*(void *)v129 + 8LL))(v129);
  }
  uint64_t v130 = *((void *)this + 323);
  *((void *)this + 323) = 0LL;
  if (v130) {
    (*(void (**)(uint64_t))(*(void *)v130 + 8LL))(v130);
  }
  uint64_t v131 = *((void *)this + 322);
  *((void *)this + 322) = 0LL;
  if (v131) {
    (*(void (**)(uint64_t))(*(void *)v131 + 8LL))(v131);
  }
  uint64_t v132 = *((void *)this + 321);
  *((void *)this + 321) = 0LL;
  if (v132) {
    (*(void (**)(uint64_t))(*(void *)v132 + 8LL))(v132);
  }
  uint64_t v133 = *((void *)this + 320);
  *((void *)this + 32sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v133) {
    (*(void (**)(uint64_t))(*(void *)v133 + 8LL))(v133);
  }
  uint64_t v134 = *((void *)this + 319);
  *((void *)this + 319) = 0LL;
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8LL))(v134);
  }
  uint64_t v135 = *((void *)this + 318);
  *((void *)this + 318) = 0LL;
  if (v135) {
    (*(void (**)(uint64_t))(*(void *)v135 + 8LL))(v135);
  }
  uint64_t v136 = *((void *)this + 317);
  *((void *)this + 317) = 0LL;
  if (v136) {
    (*(void (**)(uint64_t))(*(void *)v136 + 8LL))(v136);
  }
  uint64_t v137 = *((void *)this + 316);
  *((void *)this + 316) = 0LL;
  if (v137) {
    (*(void (**)(uint64_t))(*(void *)v137 + 8LL))(v137);
  }
  uint64_t v138 = *((void *)this + 315);
  *((void *)this + 315) = 0LL;
  if (v138) {
    (*(void (**)(uint64_t))(*(void *)v138 + 8LL))(v138);
  }
  uint64_t v139 = *((void *)this + 314);
  *((void *)this + 314) = 0LL;
  if (v139) {
    (*(void (**)(uint64_t))(*(void *)v139 + 8LL))(v139);
  }
  uint64_t v140 = *((void *)this + 313);
  *((void *)this + 313) = 0LL;
  if (v140) {
    (*(void (**)(uint64_t))(*(void *)v140 + 8LL))(v140);
  }
  uint64_t v141 = *((void *)this + 312);
  *((void *)this + 312) = 0LL;
  if (v141) {
    (*(void (**)(uint64_t))(*(void *)v141 + 8LL))(v141);
  }
  uint64_t v142 = *((void *)this + 311);
  *((void *)this + 311) = 0LL;
  if (v142) {
    (*(void (**)(uint64_t))(*(void *)v142 + 8LL))(v142);
  }
  uint64_t v143 = *((void *)this + 310);
  *((void *)this + 31sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v143) {
    (*(void (**)(uint64_t))(*(void *)v143 + 8LL))(v143);
  }
  uint64_t v144 = *((void *)this + 309);
  *((void *)this + 309) = 0LL;
  if (v144) {
    (*(void (**)(uint64_t))(*(void *)v144 + 8LL))(v144);
  }
  uint64_t v145 = *((void *)this + 308);
  *((void *)this + 308) = 0LL;
  if (v145) {
    (*(void (**)(uint64_t))(*(void *)v145 + 8LL))(v145);
  }
  uint64_t v146 = *((void *)this + 307);
  *((void *)this + 307) = 0LL;
  if (v146) {
    (*(void (**)(uint64_t))(*(void *)v146 + 8LL))(v146);
  }
  uint64_t v147 = *((void *)this + 306);
  *((void *)this + 306) = 0LL;
  if (v147) {
    (*(void (**)(uint64_t))(*(void *)v147 + 8LL))(v147);
  }
  uint64_t v148 = *((void *)this + 305);
  *((void *)this + 305) = 0LL;
  if (v148) {
    (*(void (**)(uint64_t))(*(void *)v148 + 8LL))(v148);
  }
  uint64_t v149 = *((void *)this + 304);
  *((void *)this + 304) = 0LL;
  if (v149) {
    (*(void (**)(uint64_t))(*(void *)v149 + 8LL))(v149);
  }
  uint64_t v150 = *((void *)this + 303);
  *((void *)this + 303) = 0LL;
  if (v150) {
    (*(void (**)(uint64_t))(*(void *)v150 + 8LL))(v150);
  }
  uint64_t v151 = *((void *)this + 302);
  *((void *)this + 302) = 0LL;
  if (v151) {
    (*(void (**)(uint64_t))(*(void *)v151 + 8LL))(v151);
  }
  uint64_t v152 = *((void *)this + 301);
  *((void *)this + 301) = 0LL;
  if (v152) {
    (*(void (**)(uint64_t))(*(void *)v152 + 8LL))(v152);
  }
  uint64_t v153 = *((void *)this + 300);
  *((void *)this + 30sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v153) {
    (*(void (**)(uint64_t))(*(void *)v153 + 8LL))(v153);
  }
  uint64_t v154 = *((void *)this + 299);
  *((void *)this + 299) = 0LL;
  if (v154) {
    (*(void (**)(uint64_t))(*(void *)v154 + 8LL))(v154);
  }
  uint64_t v155 = *((void *)this + 298);
  *((void *)this + 298) = 0LL;
  if (v155) {
    (*(void (**)(uint64_t))(*(void *)v155 + 8LL))(v155);
  }
  uint64_t v156 = *((void *)this + 297);
  *((void *)this + 297) = 0LL;
  if (v156) {
    (*(void (**)(uint64_t))(*(void *)v156 + 8LL))(v156);
  }
  uint64_t v157 = *((void *)this + 296);
  *((void *)this + 296) = 0LL;
  if (v157) {
    (*(void (**)(uint64_t))(*(void *)v157 + 8LL))(v157);
  }
  uint64_t v158 = *((void *)this + 295);
  *((void *)this + 295) = 0LL;
  if (v158) {
    (*(void (**)(uint64_t))(*(void *)v158 + 8LL))(v158);
  }
  uint64_t v159 = *((void *)this + 294);
  *((void *)this + 294) = 0LL;
  if (v159) {
    (*(void (**)(uint64_t))(*(void *)v159 + 8LL))(v159);
  }
  uint64_t v160 = *((void *)this + 293);
  *((void *)this + 293) = 0LL;
  if (v160) {
    (*(void (**)(uint64_t))(*(void *)v160 + 8LL))(v160);
  }
  uint64_t v161 = *((void *)this + 292);
  *((void *)this + 292) = 0LL;
  if (v161) {
    (*(void (**)(uint64_t))(*(void *)v161 + 8LL))(v161);
  }
  uint64_t v162 = *((void *)this + 291);
  *((void *)this + 291) = 0LL;
  if (v162) {
    (*(void (**)(uint64_t))(*(void *)v162 + 8LL))(v162);
  }
  uint64_t v163 = *((void *)this + 290);
  *((void *)this + 29sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v163) {
    (*(void (**)(uint64_t))(*(void *)v163 + 8LL))(v163);
  }
  uint64_t v164 = *((void *)this + 289);
  *((void *)this + 289) = 0LL;
  if (v164) {
    (*(void (**)(uint64_t))(*(void *)v164 + 8LL))(v164);
  }
  uint64_t v165 = *((void *)this + 288);
  *((void *)this + 288) = 0LL;
  if (v165) {
    (*(void (**)(uint64_t))(*(void *)v165 + 8LL))(v165);
  }
  uint64_t v166 = *((void *)this + 287);
  *((void *)this + 287) = 0LL;
  if (v166) {
    (*(void (**)(uint64_t))(*(void *)v166 + 8LL))(v166);
  }
  uint64_t v167 = *((void *)this + 286);
  *((void *)this + 286) = 0LL;
  if (v167) {
    (*(void (**)(uint64_t))(*(void *)v167 + 8LL))(v167);
  }
  uint64_t v168 = *((void *)this + 285);
  *((void *)this + 285) = 0LL;
  if (v168) {
    (*(void (**)(uint64_t))(*(void *)v168 + 8LL))(v168);
  }
  uint64_t v169 = *((void *)this + 284);
  *((void *)this + 284) = 0LL;
  if (v169) {
    (*(void (**)(uint64_t))(*(void *)v169 + 8LL))(v169);
  }
  uint64_t v170 = *((void *)this + 283);
  *((void *)this + 283) = 0LL;
  if (v170) {
    (*(void (**)(uint64_t))(*(void *)v170 + 8LL))(v170);
  }
  uint64_t v171 = *((void *)this + 282);
  *((void *)this + 282) = 0LL;
  if (v171) {
    (*(void (**)(uint64_t))(*(void *)v171 + 8LL))(v171);
  }
  uint64_t v172 = *((void *)this + 281);
  *((void *)this + 281) = 0LL;
  if (v172) {
    (*(void (**)(uint64_t))(*(void *)v172 + 8LL))(v172);
  }
  uint64_t v173 = *((void *)this + 280);
  *((void *)this + 28sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v173) {
    (*(void (**)(uint64_t))(*(void *)v173 + 8LL))(v173);
  }
  uint64_t v174 = *((void *)this + 279);
  *((void *)this + 279) = 0LL;
  if (v174) {
    (*(void (**)(uint64_t))(*(void *)v174 + 8LL))(v174);
  }
  uint64_t v175 = *((void *)this + 278);
  *((void *)this + 278) = 0LL;
  if (v175) {
    (*(void (**)(uint64_t))(*(void *)v175 + 8LL))(v175);
  }
  uint64_t v176 = *((void *)this + 277);
  *((void *)this + 277) = 0LL;
  if (v176) {
    (*(void (**)(uint64_t))(*(void *)v176 + 8LL))(v176);
  }
  uint64_t v177 = *((void *)this + 276);
  *((void *)this + 276) = 0LL;
  if (v177) {
    (*(void (**)(uint64_t))(*(void *)v177 + 8LL))(v177);
  }
  uint64_t v178 = *((void *)this + 275);
  *((void *)this + 275) = 0LL;
  if (v178) {
    (*(void (**)(uint64_t))(*(void *)v178 + 8LL))(v178);
  }
  uint64_t v179 = *((void *)this + 274);
  *((void *)this + 274) = 0LL;
  if (v179) {
    (*(void (**)(uint64_t))(*(void *)v179 + 8LL))(v179);
  }
  uint64_t v180 = *((void *)this + 273);
  *((void *)this + 273) = 0LL;
  if (v180) {
    (*(void (**)(uint64_t))(*(void *)v180 + 8LL))(v180);
  }
  uint64_t v181 = *((void *)this + 272);
  *((void *)this + 272) = 0LL;
  if (v181) {
    (*(void (**)(uint64_t))(*(void *)v181 + 8LL))(v181);
  }
  uint64_t v182 = *((void *)this + 271);
  *((void *)this + 271) = 0LL;
  if (v182) {
    (*(void (**)(uint64_t))(*(void *)v182 + 8LL))(v182);
  }
  uint64_t v183 = *((void *)this + 270);
  *((void *)this + 27sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v183) {
    (*(void (**)(uint64_t))(*(void *)v183 + 8LL))(v183);
  }
  uint64_t v184 = *((void *)this + 269);
  *((void *)this + 269) = 0LL;
  if (v184) {
    (*(void (**)(uint64_t))(*(void *)v184 + 8LL))(v184);
  }
  uint64_t v185 = *((void *)this + 268);
  *((void *)this + 268) = 0LL;
  if (v185) {
    (*(void (**)(uint64_t))(*(void *)v185 + 8LL))(v185);
  }
  uint64_t v186 = *((void *)this + 267);
  *((void *)this + 267) = 0LL;
  if (v186) {
    (*(void (**)(uint64_t))(*(void *)v186 + 8LL))(v186);
  }
  uint64_t v187 = *((void *)this + 266);
  *((void *)this + 266) = 0LL;
  if (v187) {
    (*(void (**)(uint64_t))(*(void *)v187 + 8LL))(v187);
  }
  uint64_t v188 = *((void *)this + 265);
  *((void *)this + 265) = 0LL;
  if (v188) {
    (*(void (**)(uint64_t))(*(void *)v188 + 8LL))(v188);
  }
  uint64_t v189 = *((void *)this + 264);
  *((void *)this + 264) = 0LL;
  if (v189) {
    (*(void (**)(uint64_t))(*(void *)v189 + 8LL))(v189);
  }
  uint64_t v190 = *((void *)this + 263);
  *((void *)this + 263) = 0LL;
  if (v190) {
    (*(void (**)(uint64_t))(*(void *)v190 + 8LL))(v190);
  }
  uint64_t v191 = *((void *)this + 262);
  *((void *)this + 262) = 0LL;
  if (v191) {
    (*(void (**)(uint64_t))(*(void *)v191 + 8LL))(v191);
  }
  uint64_t v192 = *((void *)this + 261);
  *((void *)this + 261) = 0LL;
  if (v192) {
    (*(void (**)(uint64_t))(*(void *)v192 + 8LL))(v192);
  }
  uint64_t v193 = *((void *)this + 260);
  *((void *)this + 26sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v193) {
    (*(void (**)(uint64_t))(*(void *)v193 + 8LL))(v193);
  }
  uint64_t v194 = *((void *)this + 259);
  *((void *)this + 259) = 0LL;
  if (v194) {
    (*(void (**)(uint64_t))(*(void *)v194 + 8LL))(v194);
  }
  uint64_t v195 = *((void *)this + 258);
  *((void *)this + 258) = 0LL;
  if (v195) {
    (*(void (**)(uint64_t))(*(void *)v195 + 8LL))(v195);
  }
  uint64_t v196 = *((void *)this + 257);
  *((void *)this + 257) = 0LL;
  if (v196) {
    (*(void (**)(uint64_t))(*(void *)v196 + 8LL))(v196);
  }
  uint64_t v197 = *((void *)this + 256);
  *((void *)this + 256) = 0LL;
  if (v197) {
    (*(void (**)(uint64_t))(*(void *)v197 + 8LL))(v197);
  }
  uint64_t v198 = *((void *)this + 255);
  *((void *)this + 255) = 0LL;
  if (v198) {
    (*(void (**)(uint64_t))(*(void *)v198 + 8LL))(v198);
  }
  uint64_t v199 = *((void *)this + 254);
  *((void *)this + 254) = 0LL;
  if (v199) {
    (*(void (**)(uint64_t))(*(void *)v199 + 8LL))(v199);
  }
  uint64_t v200 = *((void *)this + 253);
  *((void *)this + 253) = 0LL;
  if (v200) {
    (*(void (**)(uint64_t))(*(void *)v200 + 8LL))(v200);
  }
  uint64_t v201 = *((void *)this + 252);
  *((void *)this + 252) = 0LL;
  if (v201) {
    (*(void (**)(uint64_t))(*(void *)v201 + 8LL))(v201);
  }
  uint64_t v202 = *((void *)this + 251);
  *((void *)this + 251) = 0LL;
  if (v202) {
    (*(void (**)(uint64_t))(*(void *)v202 + 8LL))(v202);
  }
  uint64_t v203 = *((void *)this + 250);
  *((void *)this + 25sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v203) {
    (*(void (**)(uint64_t))(*(void *)v203 + 8LL))(v203);
  }
  uint64_t v204 = *((void *)this + 249);
  *((void *)this + 249) = 0LL;
  if (v204) {
    (*(void (**)(uint64_t))(*(void *)v204 + 8LL))(v204);
  }
  uint64_t v205 = *((void *)this + 248);
  *((void *)this + 248) = 0LL;
  if (v205) {
    (*(void (**)(uint64_t))(*(void *)v205 + 8LL))(v205);
  }
  uint64_t v206 = *((void *)this + 247);
  *((void *)this + 247) = 0LL;
  if (v206) {
    (*(void (**)(uint64_t))(*(void *)v206 + 8LL))(v206);
  }
  uint64_t v207 = *((void *)this + 246);
  *((void *)this + 246) = 0LL;
  if (v207) {
    (*(void (**)(uint64_t))(*(void *)v207 + 8LL))(v207);
  }
  uint64_t v208 = *((void *)this + 245);
  *((void *)this + 245) = 0LL;
  if (v208) {
    (*(void (**)(uint64_t))(*(void *)v208 + 8LL))(v208);
  }
  uint64_t v209 = *((void *)this + 244);
  *((void *)this + 244) = 0LL;
  if (v209) {
    (*(void (**)(uint64_t))(*(void *)v209 + 8LL))(v209);
  }
  uint64_t v210 = *((void *)this + 243);
  *((void *)this + 243) = 0LL;
  if (v210) {
    (*(void (**)(uint64_t))(*(void *)v210 + 8LL))(v210);
  }
  uint64_t v211 = *((void *)this + 242);
  *((void *)this + 242) = 0LL;
  if (v211) {
    (*(void (**)(uint64_t))(*(void *)v211 + 8LL))(v211);
  }
  uint64_t v212 = *((void *)this + 241);
  *((void *)this + 241) = 0LL;
  if (v212) {
    (*(void (**)(uint64_t))(*(void *)v212 + 8LL))(v212);
  }
  uint64_t v213 = *((void *)this + 240);
  *((void *)this + 24sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v213) {
    (*(void (**)(uint64_t))(*(void *)v213 + 8LL))(v213);
  }
  uint64_t v214 = *((void *)this + 239);
  *((void *)this + 239) = 0LL;
  if (v214) {
    (*(void (**)(uint64_t))(*(void *)v214 + 8LL))(v214);
  }
  uint64_t v215 = *((void *)this + 238);
  *((void *)this + 238) = 0LL;
  if (v215) {
    (*(void (**)(uint64_t))(*(void *)v215 + 8LL))(v215);
  }
  uint64_t v216 = *((void *)this + 237);
  *((void *)this + 237) = 0LL;
  if (v216) {
    (*(void (**)(uint64_t))(*(void *)v216 + 8LL))(v216);
  }
  uint64_t v217 = *((void *)this + 236);
  *((void *)this + 236) = 0LL;
  if (v217) {
    (*(void (**)(uint64_t))(*(void *)v217 + 8LL))(v217);
  }
  uint64_t v218 = *((void *)this + 235);
  *((void *)this + 235) = 0LL;
  if (v218) {
    (*(void (**)(uint64_t))(*(void *)v218 + 8LL))(v218);
  }
  uint64_t v219 = *((void *)this + 234);
  *((void *)this + 234) = 0LL;
  if (v219) {
    (*(void (**)(uint64_t))(*(void *)v219 + 8LL))(v219);
  }
  uint64_t v220 = *((void *)this + 233);
  *((void *)this + 233) = 0LL;
  if (v220) {
    (*(void (**)(uint64_t))(*(void *)v220 + 8LL))(v220);
  }
  uint64_t v221 = *((void *)this + 232);
  *((void *)this + 232) = 0LL;
  if (v221) {
    (*(void (**)(uint64_t))(*(void *)v221 + 8LL))(v221);
  }
  uint64_t v222 = *((void *)this + 231);
  *((void *)this + 231) = 0LL;
  if (v222) {
    (*(void (**)(uint64_t))(*(void *)v222 + 8LL))(v222);
  }
  uint64_t v223 = *((void *)this + 230);
  *((void *)this + 23sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v223) {
    (*(void (**)(uint64_t))(*(void *)v223 + 8LL))(v223);
  }
  uint64_t v224 = *((void *)this + 229);
  *((void *)this + 229) = 0LL;
  if (v224) {
    (*(void (**)(uint64_t))(*(void *)v224 + 8LL))(v224);
  }
  uint64_t v225 = *((void *)this + 228);
  *((void *)this + 228) = 0LL;
  if (v225) {
    (*(void (**)(uint64_t))(*(void *)v225 + 8LL))(v225);
  }
  uint64_t v226 = *((void *)this + 227);
  *((void *)this + 227) = 0LL;
  if (v226) {
    (*(void (**)(uint64_t))(*(void *)v226 + 8LL))(v226);
  }
  uint64_t v227 = *((void *)this + 226);
  *((void *)this + 226) = 0LL;
  if (v227) {
    (*(void (**)(uint64_t))(*(void *)v227 + 8LL))(v227);
  }
  uint64_t v228 = *((void *)this + 225);
  *((void *)this + 225) = 0LL;
  if (v228) {
    (*(void (**)(uint64_t))(*(void *)v228 + 8LL))(v228);
  }
  uint64_t v229 = *((void *)this + 224);
  *((void *)this + 224) = 0LL;
  if (v229) {
    (*(void (**)(uint64_t))(*(void *)v229 + 8LL))(v229);
  }
  uint64_t v230 = *((void *)this + 223);
  *((void *)this + 223) = 0LL;
  if (v230) {
    (*(void (**)(uint64_t))(*(void *)v230 + 8LL))(v230);
  }
  uint64_t v231 = *((void *)this + 222);
  *((void *)this + 222) = 0LL;
  if (v231) {
    (*(void (**)(uint64_t))(*(void *)v231 + 8LL))(v231);
  }
  uint64_t v232 = *((void *)this + 221);
  *((void *)this + 221) = 0LL;
  if (v232) {
    (*(void (**)(uint64_t))(*(void *)v232 + 8LL))(v232);
  }
  uint64_t v233 = *((void *)this + 220);
  *((void *)this + 22sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v233) {
    (*(void (**)(uint64_t))(*(void *)v233 + 8LL))(v233);
  }
  uint64_t v234 = *((void *)this + 219);
  *((void *)this + 219) = 0LL;
  if (v234) {
    (*(void (**)(uint64_t))(*(void *)v234 + 8LL))(v234);
  }
  uint64_t v235 = *((void *)this + 218);
  *((void *)this + 218) = 0LL;
  if (v235) {
    (*(void (**)(uint64_t))(*(void *)v235 + 8LL))(v235);
  }
  uint64_t v236 = *((void *)this + 217);
  *((void *)this + 217) = 0LL;
  if (v236) {
    (*(void (**)(uint64_t))(*(void *)v236 + 8LL))(v236);
  }
  uint64_t v237 = *((void *)this + 216);
  *((void *)this + 216) = 0LL;
  if (v237) {
    (*(void (**)(uint64_t))(*(void *)v237 + 8LL))(v237);
  }
  uint64_t v238 = *((void *)this + 215);
  *((void *)this + 215) = 0LL;
  if (v238) {
    (*(void (**)(uint64_t))(*(void *)v238 + 8LL))(v238);
  }
  uint64_t v239 = *((void *)this + 214);
  *((void *)this + 214) = 0LL;
  if (v239) {
    (*(void (**)(uint64_t))(*(void *)v239 + 8LL))(v239);
  }
  uint64_t v240 = *((void *)this + 213);
  *((void *)this + 213) = 0LL;
  if (v240) {
    (*(void (**)(uint64_t))(*(void *)v240 + 8LL))(v240);
  }
  uint64_t v241 = *((void *)this + 212);
  *((void *)this + 212) = 0LL;
  if (v241) {
    (*(void (**)(uint64_t))(*(void *)v241 + 8LL))(v241);
  }
  uint64_t v242 = *((void *)this + 211);
  *((void *)this + 211) = 0LL;
  if (v242) {
    (*(void (**)(uint64_t))(*(void *)v242 + 8LL))(v242);
  }
  uint64_t v243 = *((void *)this + 210);
  *((void *)this + 21sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v243) {
    (*(void (**)(uint64_t))(*(void *)v243 + 8LL))(v243);
  }
  uint64_t v244 = *((void *)this + 209);
  *((void *)this + 209) = 0LL;
  if (v244) {
    (*(void (**)(uint64_t))(*(void *)v244 + 8LL))(v244);
  }
  uint64_t v245 = *((void *)this + 208);
  *((void *)this + 208) = 0LL;
  if (v245) {
    (*(void (**)(uint64_t))(*(void *)v245 + 8LL))(v245);
  }
  uint64_t v246 = *((void *)this + 207);
  *((void *)this + 207) = 0LL;
  if (v246) {
    (*(void (**)(uint64_t))(*(void *)v246 + 8LL))(v246);
  }
  uint64_t v247 = *((void *)this + 206);
  *((void *)this + 206) = 0LL;
  if (v247) {
    (*(void (**)(uint64_t))(*(void *)v247 + 8LL))(v247);
  }
  uint64_t v248 = *((void *)this + 205);
  *((void *)this + 205) = 0LL;
  if (v248) {
    (*(void (**)(uint64_t))(*(void *)v248 + 8LL))(v248);
  }
  uint64_t v249 = *((void *)this + 204);
  *((void *)this + 204) = 0LL;
  if (v249) {
    (*(void (**)(uint64_t))(*(void *)v249 + 8LL))(v249);
  }
  uint64_t v250 = *((void *)this + 203);
  *((void *)this + 203) = 0LL;
  if (v250) {
    (*(void (**)(uint64_t))(*(void *)v250 + 8LL))(v250);
  }
  uint64_t v251 = *((void *)this + 202);
  *((void *)this + 202) = 0LL;
  if (v251) {
    (*(void (**)(uint64_t))(*(void *)v251 + 8LL))(v251);
  }
  uint64_t v252 = *((void *)this + 201);
  *((void *)this + 201) = 0LL;
  if (v252) {
    (*(void (**)(uint64_t))(*(void *)v252 + 8LL))(v252);
  }
  uint64_t v253 = *((void *)this + 200);
  *((void *)this + 20sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v253) {
    (*(void (**)(uint64_t))(*(void *)v253 + 8LL))(v253);
  }
  uint64_t v254 = *((void *)this + 199);
  *((void *)this + 199) = 0LL;
  if (v254) {
    (*(void (**)(uint64_t))(*(void *)v254 + 8LL))(v254);
  }
  uint64_t v255 = *((void *)this + 198);
  *((void *)this + 198) = 0LL;
  if (v255) {
    (*(void (**)(uint64_t))(*(void *)v255 + 8LL))(v255);
  }
  uint64_t v256 = *((void *)this + 197);
  *((void *)this + 197) = 0LL;
  if (v256) {
    (*(void (**)(uint64_t))(*(void *)v256 + 8LL))(v256);
  }
  uint64_t v257 = *((void *)this + 196);
  *((void *)this + 196) = 0LL;
  if (v257) {
    (*(void (**)(uint64_t))(*(void *)v257 + 8LL))(v257);
  }
  uint64_t v258 = *((void *)this + 195);
  *((void *)this + 195) = 0LL;
  if (v258) {
    (*(void (**)(uint64_t))(*(void *)v258 + 8LL))(v258);
  }
  uint64_t v259 = *((void *)this + 194);
  *((void *)this + 194) = 0LL;
  if (v259) {
    (*(void (**)(uint64_t))(*(void *)v259 + 8LL))(v259);
  }
  uint64_t v260 = *((void *)this + 193);
  *((void *)this + 193) = 0LL;
  if (v260) {
    (*(void (**)(uint64_t))(*(void *)v260 + 8LL))(v260);
  }
  uint64_t v261 = *((void *)this + 192);
  *((void *)this + 192) = 0LL;
  if (v261) {
    (*(void (**)(uint64_t))(*(void *)v261 + 8LL))(v261);
  }
  uint64_t v262 = *((void *)this + 191);
  *((void *)this + 191) = 0LL;
  if (v262) {
    (*(void (**)(uint64_t))(*(void *)v262 + 8LL))(v262);
  }
  uint64_t v263 = *((void *)this + 190);
  *((void *)this + 19sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v263) {
    (*(void (**)(uint64_t))(*(void *)v263 + 8LL))(v263);
  }
  uint64_t v264 = *((void *)this + 189);
  *((void *)this + 189) = 0LL;
  if (v264) {
    (*(void (**)(uint64_t))(*(void *)v264 + 8LL))(v264);
  }
  uint64_t v265 = *((void *)this + 188);
  *((void *)this + 188) = 0LL;
  if (v265) {
    (*(void (**)(uint64_t))(*(void *)v265 + 8LL))(v265);
  }
  uint64_t v266 = *((void *)this + 187);
  *((void *)this + 187) = 0LL;
  if (v266) {
    (*(void (**)(uint64_t))(*(void *)v266 + 8LL))(v266);
  }
  uint64_t v267 = *((void *)this + 186);
  *((void *)this + 186) = 0LL;
  if (v267) {
    (*(void (**)(uint64_t))(*(void *)v267 + 8LL))(v267);
  }
  uint64_t v268 = *((void *)this + 185);
  *((void *)this + 185) = 0LL;
  if (v268) {
    (*(void (**)(uint64_t))(*(void *)v268 + 8LL))(v268);
  }
  uint64_t v269 = *((void *)this + 184);
  *((void *)this + 184) = 0LL;
  if (v269) {
    (*(void (**)(uint64_t))(*(void *)v269 + 8LL))(v269);
  }
  uint64_t v270 = *((void *)this + 183);
  *((void *)this + 183) = 0LL;
  if (v270) {
    (*(void (**)(uint64_t))(*(void *)v270 + 8LL))(v270);
  }
  uint64_t v271 = *((void *)this + 182);
  *((void *)this + 182) = 0LL;
  if (v271) {
    (*(void (**)(uint64_t))(*(void *)v271 + 8LL))(v271);
  }
  uint64_t v272 = *((void *)this + 181);
  *((void *)this + 181) = 0LL;
  if (v272) {
    (*(void (**)(uint64_t))(*(void *)v272 + 8LL))(v272);
  }
  uint64_t v273 = *((void *)this + 180);
  *((void *)this + 18sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v273) {
    (*(void (**)(uint64_t))(*(void *)v273 + 8LL))(v273);
  }
  uint64_t v274 = *((void *)this + 179);
  *((void *)this + 179) = 0LL;
  if (v274) {
    (*(void (**)(uint64_t))(*(void *)v274 + 8LL))(v274);
  }
  uint64_t v275 = *((void *)this + 178);
  *((void *)this + 178) = 0LL;
  if (v275) {
    (*(void (**)(uint64_t))(*(void *)v275 + 8LL))(v275);
  }
  uint64_t v276 = *((void *)this + 177);
  *((void *)this + 177) = 0LL;
  if (v276) {
    (*(void (**)(uint64_t))(*(void *)v276 + 8LL))(v276);
  }
  uint64_t v277 = *((void *)this + 176);
  *((void *)this + 176) = 0LL;
  if (v277) {
    (*(void (**)(uint64_t))(*(void *)v277 + 8LL))(v277);
  }
  uint64_t v278 = *((void *)this + 175);
  *((void *)this + 175) = 0LL;
  if (v278) {
    (*(void (**)(uint64_t))(*(void *)v278 + 8LL))(v278);
  }
  uint64_t v279 = *((void *)this + 174);
  *((void *)this + 174) = 0LL;
  if (v279) {
    (*(void (**)(uint64_t))(*(void *)v279 + 8LL))(v279);
  }
  uint64_t v280 = *((void *)this + 173);
  *((void *)this + 173) = 0LL;
  if (v280) {
    (*(void (**)(uint64_t))(*(void *)v280 + 8LL))(v280);
  }
  uint64_t v281 = *((void *)this + 172);
  *((void *)this + 172) = 0LL;
  if (v281) {
    (*(void (**)(uint64_t))(*(void *)v281 + 8LL))(v281);
  }
  uint64_t v282 = *((void *)this + 171);
  *((void *)this + 171) = 0LL;
  if (v282) {
    (*(void (**)(uint64_t))(*(void *)v282 + 8LL))(v282);
  }
  uint64_t v283 = *((void *)this + 170);
  *((void *)this + 17sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v283) {
    (*(void (**)(uint64_t))(*(void *)v283 + 8LL))(v283);
  }
  uint64_t v284 = *((void *)this + 169);
  *((void *)this + 169) = 0LL;
  if (v284) {
    (*(void (**)(uint64_t))(*(void *)v284 + 8LL))(v284);
  }
  uint64_t v285 = *((void *)this + 168);
  *((void *)this + 168) = 0LL;
  if (v285) {
    (*(void (**)(uint64_t))(*(void *)v285 + 8LL))(v285);
  }
  uint64_t v286 = *((void *)this + 167);
  *((void *)this + 167) = 0LL;
  if (v286) {
    (*(void (**)(uint64_t))(*(void *)v286 + 8LL))(v286);
  }
  uint64_t v287 = *((void *)this + 166);
  *((void *)this + 166) = 0LL;
  if (v287) {
    (*(void (**)(uint64_t))(*(void *)v287 + 8LL))(v287);
  }
  uint64_t v288 = *((void *)this + 165);
  *((void *)this + 165) = 0LL;
  if (v288) {
    (*(void (**)(uint64_t))(*(void *)v288 + 8LL))(v288);
  }
  uint64_t v289 = *((void *)this + 164);
  *((void *)this + 164) = 0LL;
  if (v289) {
    (*(void (**)(uint64_t))(*(void *)v289 + 8LL))(v289);
  }
  uint64_t v290 = *((void *)this + 163);
  *((void *)this + 163) = 0LL;
  if (v290) {
    (*(void (**)(uint64_t))(*(void *)v290 + 8LL))(v290);
  }
  uint64_t v291 = *((void *)this + 162);
  *((void *)this + 162) = 0LL;
  if (v291) {
    (*(void (**)(uint64_t))(*(void *)v291 + 8LL))(v291);
  }
  uint64_t v292 = *((void *)this + 161);
  *((void *)this + 161) = 0LL;
  if (v292) {
    (*(void (**)(uint64_t))(*(void *)v292 + 8LL))(v292);
  }
  uint64_t v293 = *((void *)this + 160);
  *((void *)this + 16sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v293) {
    (*(void (**)(uint64_t))(*(void *)v293 + 8LL))(v293);
  }
  uint64_t v294 = *((void *)this + 159);
  *((void *)this + 159) = 0LL;
  if (v294) {
    (*(void (**)(uint64_t))(*(void *)v294 + 8LL))(v294);
  }
  uint64_t v295 = *((void *)this + 158);
  *((void *)this + 158) = 0LL;
  if (v295) {
    (*(void (**)(uint64_t))(*(void *)v295 + 8LL))(v295);
  }
  uint64_t v296 = *((void *)this + 157);
  *((void *)this + 157) = 0LL;
  if (v296) {
    (*(void (**)(uint64_t))(*(void *)v296 + 8LL))(v296);
  }
  uint64_t v297 = *((void *)this + 156);
  *((void *)this + 156) = 0LL;
  if (v297) {
    (*(void (**)(uint64_t))(*(void *)v297 + 8LL))(v297);
  }
  uint64_t v298 = *((void *)this + 155);
  *((void *)this + 155) = 0LL;
  if (v298) {
    (*(void (**)(uint64_t))(*(void *)v298 + 8LL))(v298);
  }
  uint64_t v299 = *((void *)this + 154);
  *((void *)this + 154) = 0LL;
  if (v299) {
    (*(void (**)(uint64_t))(*(void *)v299 + 8LL))(v299);
  }
  uint64_t v300 = *((void *)this + 153);
  *((void *)this + 153) = 0LL;
  if (v300) {
    (*(void (**)(uint64_t))(*(void *)v300 + 8LL))(v300);
  }
  uint64_t v301 = *((void *)this + 152);
  *((void *)this + 152) = 0LL;
  if (v301) {
    (*(void (**)(uint64_t))(*(void *)v301 + 8LL))(v301);
  }
  uint64_t v302 = *((void *)this + 151);
  *((void *)this + 151) = 0LL;
  if (v302) {
    (*(void (**)(uint64_t))(*(void *)v302 + 8LL))(v302);
  }
  uint64_t v303 = *((void *)this + 150);
  *((void *)this + 15sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v303) {
    (*(void (**)(uint64_t))(*(void *)v303 + 8LL))(v303);
  }
  uint64_t v304 = *((void *)this + 149);
  *((void *)this + 149) = 0LL;
  if (v304) {
    (*(void (**)(uint64_t))(*(void *)v304 + 8LL))(v304);
  }
  uint64_t v305 = *((void *)this + 148);
  *((void *)this + 148) = 0LL;
  if (v305) {
    (*(void (**)(uint64_t))(*(void *)v305 + 8LL))(v305);
  }
  uint64_t v306 = *((void *)this + 147);
  *((void *)this + 147) = 0LL;
  if (v306) {
    (*(void (**)(uint64_t))(*(void *)v306 + 8LL))(v306);
  }
  uint64_t v307 = *((void *)this + 146);
  *((void *)this + 146) = 0LL;
  if (v307) {
    (*(void (**)(uint64_t))(*(void *)v307 + 8LL))(v307);
  }
  uint64_t v308 = *((void *)this + 145);
  *((void *)this + 145) = 0LL;
  if (v308) {
    (*(void (**)(uint64_t))(*(void *)v308 + 8LL))(v308);
  }
  uint64_t v309 = *((void *)this + 144);
  *((void *)this + 144) = 0LL;
  if (v309) {
    (*(void (**)(uint64_t))(*(void *)v309 + 8LL))(v309);
  }
  uint64_t v310 = *((void *)this + 143);
  *((void *)this + 143) = 0LL;
  if (v310) {
    (*(void (**)(uint64_t))(*(void *)v310 + 8LL))(v310);
  }
  uint64_t v311 = *((void *)this + 142);
  *((void *)this + 142) = 0LL;
  if (v311) {
    (*(void (**)(uint64_t))(*(void *)v311 + 8LL))(v311);
  }
  uint64_t v312 = *((void *)this + 141);
  *((void *)this + 141) = 0LL;
  if (v312) {
    (*(void (**)(uint64_t))(*(void *)v312 + 8LL))(v312);
  }
  uint64_t v313 = *((void *)this + 140);
  *((void *)this + 14sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v313) {
    (*(void (**)(uint64_t))(*(void *)v313 + 8LL))(v313);
  }
  uint64_t v314 = *((void *)this + 139);
  *((void *)this + 139) = 0LL;
  if (v314) {
    (*(void (**)(uint64_t))(*(void *)v314 + 8LL))(v314);
  }
  uint64_t v315 = *((void *)this + 138);
  *((void *)this + 138) = 0LL;
  if (v315) {
    (*(void (**)(uint64_t))(*(void *)v315 + 8LL))(v315);
  }
  uint64_t v316 = *((void *)this + 137);
  *((void *)this + 137) = 0LL;
  if (v316) {
    (*(void (**)(uint64_t))(*(void *)v316 + 8LL))(v316);
  }
  uint64_t v317 = *((void *)this + 136);
  *((void *)this + 136) = 0LL;
  if (v317) {
    (*(void (**)(uint64_t))(*(void *)v317 + 8LL))(v317);
  }
  uint64_t v318 = *((void *)this + 135);
  *((void *)this + 135) = 0LL;
  if (v318) {
    (*(void (**)(uint64_t))(*(void *)v318 + 8LL))(v318);
  }
  uint64_t v319 = *((void *)this + 134);
  *((void *)this + 134) = 0LL;
  if (v319) {
    (*(void (**)(uint64_t))(*(void *)v319 + 8LL))(v319);
  }
  uint64_t v320 = *((void *)this + 133);
  *((void *)this + 133) = 0LL;
  if (v320) {
    (*(void (**)(uint64_t))(*(void *)v320 + 8LL))(v320);
  }
  uint64_t v321 = *((void *)this + 132);
  *((void *)this + 132) = 0LL;
  if (v321) {
    (*(void (**)(uint64_t))(*(void *)v321 + 8LL))(v321);
  }
  uint64_t v322 = *((void *)this + 131);
  *((void *)this + 131) = 0LL;
  if (v322) {
    (*(void (**)(uint64_t))(*(void *)v322 + 8LL))(v322);
  }
  uint64_t v323 = *((void *)this + 130);
  *((void *)this + 13sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v323) {
    (*(void (**)(uint64_t))(*(void *)v323 + 8LL))(v323);
  }
  uint64_t v324 = *((void *)this + 129);
  *((void *)this + 129) = 0LL;
  if (v324) {
    (*(void (**)(uint64_t))(*(void *)v324 + 8LL))(v324);
  }
  uint64_t v325 = *((void *)this + 128);
  *((void *)this + 128) = 0LL;
  if (v325) {
    (*(void (**)(uint64_t))(*(void *)v325 + 8LL))(v325);
  }
  uint64_t v326 = *((void *)this + 127);
  *((void *)this + 127) = 0LL;
  if (v326) {
    (*(void (**)(uint64_t))(*(void *)v326 + 8LL))(v326);
  }
  uint64_t v327 = *((void *)this + 126);
  *((void *)this + 126) = 0LL;
  if (v327) {
    (*(void (**)(uint64_t))(*(void *)v327 + 8LL))(v327);
  }
  uint64_t v328 = *((void *)this + 125);
  *((void *)this + 125) = 0LL;
  if (v328) {
    (*(void (**)(uint64_t))(*(void *)v328 + 8LL))(v328);
  }
  uint64_t v329 = *((void *)this + 124);
  *((void *)this + 124) = 0LL;
  if (v329) {
    (*(void (**)(uint64_t))(*(void *)v329 + 8LL))(v329);
  }
  uint64_t v330 = *((void *)this + 123);
  *((void *)this + 123) = 0LL;
  if (v330) {
    (*(void (**)(uint64_t))(*(void *)v330 + 8LL))(v330);
  }
  uint64_t v331 = *((void *)this + 122);
  *((void *)this + 122) = 0LL;
  if (v331) {
    (*(void (**)(uint64_t))(*(void *)v331 + 8LL))(v331);
  }
  uint64_t v332 = *((void *)this + 121);
  *((void *)this + 121) = 0LL;
  if (v332) {
    (*(void (**)(uint64_t))(*(void *)v332 + 8LL))(v332);
  }
  uint64_t v333 = *((void *)this + 120);
  *((void *)this + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v333) {
    (*(void (**)(uint64_t))(*(void *)v333 + 8LL))(v333);
  }
  uint64_t v334 = *((void *)this + 119);
  *((void *)this + 119) = 0LL;
  if (v334) {
    (*(void (**)(uint64_t))(*(void *)v334 + 8LL))(v334);
  }
  uint64_t v335 = *((void *)this + 118);
  *((void *)this + 118) = 0LL;
  if (v335) {
    (*(void (**)(uint64_t))(*(void *)v335 + 8LL))(v335);
  }
  uint64_t v336 = *((void *)this + 117);
  *((void *)this + 117) = 0LL;
  if (v336) {
    (*(void (**)(uint64_t))(*(void *)v336 + 8LL))(v336);
  }
  uint64_t v337 = *((void *)this + 116);
  *((void *)this + 116) = 0LL;
  if (v337) {
    (*(void (**)(uint64_t))(*(void *)v337 + 8LL))(v337);
  }
  uint64_t v338 = *((void *)this + 115);
  *((void *)this + 115) = 0LL;
  if (v338) {
    (*(void (**)(uint64_t))(*(void *)v338 + 8LL))(v338);
  }
  uint64_t v339 = *((void *)this + 114);
  *((void *)this + 114) = 0LL;
  if (v339) {
    (*(void (**)(uint64_t))(*(void *)v339 + 8LL))(v339);
  }
  uint64_t v340 = *((void *)this + 113);
  *((void *)this + 113) = 0LL;
  if (v340) {
    (*(void (**)(uint64_t))(*(void *)v340 + 8LL))(v340);
  }
  uint64_t v341 = *((void *)this + 112);
  *((void *)this + 112) = 0LL;
  if (v341) {
    (*(void (**)(uint64_t))(*(void *)v341 + 8LL))(v341);
  }
  uint64_t v342 = *((void *)this + 111);
  *((void *)this + 111) = 0LL;
  if (v342) {
    (*(void (**)(uint64_t))(*(void *)v342 + 8LL))(v342);
  }
  uint64_t v343 = *((void *)this + 110);
  *((void *)this + 11sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v343) {
    (*(void (**)(uint64_t))(*(void *)v343 + 8LL))(v343);
  }
  uint64_t v344 = *((void *)this + 109);
  *((void *)this + 109) = 0LL;
  if (v344) {
    (*(void (**)(uint64_t))(*(void *)v344 + 8LL))(v344);
  }
  uint64_t v345 = *((void *)this + 108);
  *((void *)this + 108) = 0LL;
  if (v345) {
    (*(void (**)(uint64_t))(*(void *)v345 + 8LL))(v345);
  }
  uint64_t v346 = *((void *)this + 107);
  *((void *)this + 107) = 0LL;
  if (v346) {
    (*(void (**)(uint64_t))(*(void *)v346 + 8LL))(v346);
  }
  uint64_t v347 = *((void *)this + 106);
  *((void *)this + 106) = 0LL;
  if (v347) {
    (*(void (**)(uint64_t))(*(void *)v347 + 8LL))(v347);
  }
  uint64_t v348 = *((void *)this + 105);
  *((void *)this + 105) = 0LL;
  if (v348) {
    (*(void (**)(uint64_t))(*(void *)v348 + 8LL))(v348);
  }
  uint64_t v349 = *((void *)this + 104);
  *((void *)this + 104) = 0LL;
  if (v349) {
    (*(void (**)(uint64_t))(*(void *)v349 + 8LL))(v349);
  }
  uint64_t v350 = *((void *)this + 103);
  *((void *)this + 103) = 0LL;
  if (v350) {
    (*(void (**)(uint64_t))(*(void *)v350 + 8LL))(v350);
  }
  uint64_t v351 = *((void *)this + 102);
  *((void *)this + 102) = 0LL;
  if (v351) {
    (*(void (**)(uint64_t))(*(void *)v351 + 8LL))(v351);
  }
  uint64_t v352 = *((void *)this + 101);
  *((void *)this + 101) = 0LL;
  if (v352) {
    (*(void (**)(uint64_t))(*(void *)v352 + 8LL))(v352);
  }
  uint64_t v353 = *((void *)this + 100);
  *((void *)this + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v353) {
    (*(void (**)(uint64_t))(*(void *)v353 + 8LL))(v353);
  }
  uint64_t v354 = *((void *)this + 99);
  *((void *)this + 99) = 0LL;
  if (v354) {
    (*(void (**)(uint64_t))(*(void *)v354 + 8LL))(v354);
  }
  uint64_t v355 = *((void *)this + 98);
  *((void *)this + 98) = 0LL;
  if (v355) {
    (*(void (**)(uint64_t))(*(void *)v355 + 8LL))(v355);
  }
  uint64_t v356 = *((void *)this + 97);
  *((void *)this + 97) = 0LL;
  if (v356) {
    (*(void (**)(uint64_t))(*(void *)v356 + 8LL))(v356);
  }
  uint64_t v357 = *((void *)this + 96);
  *((void *)this + 96) = 0LL;
  if (v357) {
    (*(void (**)(uint64_t))(*(void *)v357 + 8LL))(v357);
  }
  uint64_t v358 = *((void *)this + 95);
  *((void *)this + 95) = 0LL;
  if (v358) {
    (*(void (**)(uint64_t))(*(void *)v358 + 8LL))(v358);
  }
  uint64_t v359 = *((void *)this + 94);
  *((void *)this + 94) = 0LL;
  if (v359) {
    (*(void (**)(uint64_t))(*(void *)v359 + 8LL))(v359);
  }
  uint64_t v360 = *((void *)this + 93);
  *((void *)this + 93) = 0LL;
  if (v360) {
    (*(void (**)(uint64_t))(*(void *)v360 + 8LL))(v360);
  }
  uint64_t v361 = *((void *)this + 92);
  *((void *)this + 92) = 0LL;
  if (v361) {
    (*(void (**)(uint64_t))(*(void *)v361 + 8LL))(v361);
  }
  uint64_t v362 = *((void *)this + 91);
  *((void *)this + 91) = 0LL;
  if (v362) {
    (*(void (**)(uint64_t))(*(void *)v362 + 8LL))(v362);
  }
  uint64_t v363 = *((void *)this + 90);
  *((void *)this + 9sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v363) {
    (*(void (**)(uint64_t))(*(void *)v363 + 8LL))(v363);
  }
  uint64_t v364 = *((void *)this + 89);
  *((void *)this + 89) = 0LL;
  if (v364) {
    (*(void (**)(uint64_t))(*(void *)v364 + 8LL))(v364);
  }
  uint64_t v365 = *((void *)this + 88);
  *((void *)this + 88) = 0LL;
  if (v365) {
    (*(void (**)(uint64_t))(*(void *)v365 + 8LL))(v365);
  }
  uint64_t v366 = *((void *)this + 87);
  *((void *)this + 87) = 0LL;
  if (v366) {
    (*(void (**)(uint64_t))(*(void *)v366 + 8LL))(v366);
  }
  uint64_t v367 = *((void *)this + 86);
  *((void *)this + 86) = 0LL;
  if (v367) {
    (*(void (**)(uint64_t))(*(void *)v367 + 8LL))(v367);
  }
  uint64_t v368 = *((void *)this + 85);
  *((void *)this + 85) = 0LL;
  if (v368) {
    (*(void (**)(uint64_t))(*(void *)v368 + 8LL))(v368);
  }
  uint64_t v369 = *((void *)this + 84);
  *((void *)this + 84) = 0LL;
  if (v369) {
    (*(void (**)(uint64_t))(*(void *)v369 + 8LL))(v369);
  }
  uint64_t v370 = *((void *)this + 83);
  *((void *)this + 83) = 0LL;
  if (v370) {
    (*(void (**)(uint64_t))(*(void *)v370 + 8LL))(v370);
  }
  uint64_t v371 = *((void *)this + 82);
  *((void *)this + 82) = 0LL;
  if (v371) {
    (*(void (**)(uint64_t))(*(void *)v371 + 8LL))(v371);
  }
  uint64_t v372 = *((void *)this + 81);
  *((void *)this + 81) = 0LL;
  if (v372) {
    (*(void (**)(uint64_t))(*(void *)v372 + 8LL))(v372);
  }
  uint64_t v373 = *((void *)this + 80);
  *((void *)this + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v373) {
    (*(void (**)(uint64_t))(*(void *)v373 + 8LL))(v373);
  }
  uint64_t v374 = *((void *)this + 79);
  *((void *)this + 79) = 0LL;
  if (v374) {
    (*(void (**)(uint64_t))(*(void *)v374 + 8LL))(v374);
  }
  uint64_t v375 = *((void *)this + 78);
  *((void *)this + 78) = 0LL;
  if (v375) {
    (*(void (**)(uint64_t))(*(void *)v375 + 8LL))(v375);
  }
  uint64_t v376 = *((void *)this + 76);
  *((void *)this + 76) = 0LL;
  if (v376) {
    (*(void (**)(uint64_t))(*(void *)v376 + 8LL))(v376);
  }
  uint64_t v377 = *((void *)this + 75);
  *((void *)this + 75) = 0LL;
  if (v377) {
    (*(void (**)(uint64_t))(*(void *)v377 + 8LL))(v377);
  }
  uint64_t v378 = *((void *)this + 74);
  *((void *)this + 74) = 0LL;
  if (v378) {
    (*(void (**)(uint64_t))(*(void *)v378 + 8LL))(v378);
  }
  uint64_t v379 = *((void *)this + 73);
  *((void *)this + 73) = 0LL;
  if (v379) {
    (*(void (**)(uint64_t))(*(void *)v379 + 8LL))(v379);
  }
  uint64_t v380 = *((void *)this + 72);
  *((void *)this + 72) = 0LL;
  if (v380) {
    (*(void (**)(uint64_t))(*(void *)v380 + 8LL))(v380);
  }
  uint64_t v381 = *((void *)this + 71);
  *((void *)this + 71) = 0LL;
  if (v381) {
    (*(void (**)(uint64_t))(*(void *)v381 + 8LL))(v381);
  }
  uint64_t v382 = *((void *)this + 70);
  *((void *)this + 7sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v382) {
    (*(void (**)(uint64_t))(*(void *)v382 + 8LL))(v382);
  }
  uint64_t v383 = *((void *)this + 69);
  *((void *)this + 69) = 0LL;
  if (v383) {
    (*(void (**)(uint64_t))(*(void *)v383 + 8LL))(v383);
  }
  uint64_t v384 = *((void *)this + 68);
  *((void *)this + 68) = 0LL;
  if (v384) {
    (*(void (**)(uint64_t))(*(void *)v384 + 8LL))(v384);
  }
  uint64_t v385 = *((void *)this + 67);
  *((void *)this + 67) = 0LL;
  if (v385) {
    (*(void (**)(uint64_t))(*(void *)v385 + 8LL))(v385);
  }
  uint64_t v386 = *((void *)this + 66);
  *((void *)this + 66) = 0LL;
  if (v386) {
    (*(void (**)(uint64_t))(*(void *)v386 + 8LL))(v386);
  }
  uint64_t v387 = *((void *)this + 65);
  *((void *)this + 65) = 0LL;
  if (v387) {
    (*(void (**)(uint64_t))(*(void *)v387 + 8LL))(v387);
  }
  uint64_t v388 = *((void *)this + 64);
  *((void *)this + 64) = 0LL;
  if (v388) {
    (*(void (**)(uint64_t))(*(void *)v388 + 8LL))(v388);
  }
  uint64_t v389 = *((void *)this + 63);
  *((void *)this + 63) = 0LL;
  if (v389) {
    (*(void (**)(uint64_t))(*(void *)v389 + 8LL))(v389);
  }
  uint64_t v390 = *((void *)this + 62);
  *((void *)this + 62) = 0LL;
  if (v390) {
    (*(void (**)(uint64_t))(*(void *)v390 + 8LL))(v390);
  }
  uint64_t v391 = *((void *)this + 61);
  *((void *)this + 61) = 0LL;
  if (v391) {
    (*(void (**)(uint64_t))(*(void *)v391 + 8LL))(v391);
  }
  uint64_t v392 = *((void *)this + 60);
  *((void *)this + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v392) {
    (*(void (**)(uint64_t))(*(void *)v392 + 8LL))(v392);
  }
  uint64_t v393 = *((void *)this + 59);
  *((void *)this + 59) = 0LL;
  if (v393) {
    (*(void (**)(uint64_t))(*(void *)v393 + 8LL))(v393);
  }
  uint64_t v394 = *((void *)this + 58);
  *((void *)this + 58) = 0LL;
  if (v394) {
    (*(void (**)(uint64_t))(*(void *)v394 + 8LL))(v394);
  }
  uint64_t v395 = *((void *)this + 57);
  *((void *)this + 57) = 0LL;
  if (v395) {
    (*(void (**)(uint64_t))(*(void *)v395 + 8LL))(v395);
  }
  uint64_t v396 = *((void *)this + 56);
  *((void *)this + 56) = 0LL;
  if (v396) {
    (*(void (**)(uint64_t))(*(void *)v396 + 8LL))(v396);
  }
  uint64_t v397 = *((void *)this + 55);
  *((void *)this + 55) = 0LL;
  if (v397) {
    (*(void (**)(uint64_t))(*(void *)v397 + 8LL))(v397);
  }
  uint64_t v398 = *((void *)this + 54);
  *((void *)this + 54) = 0LL;
  if (v398) {
    (*(void (**)(uint64_t))(*(void *)v398 + 8LL))(v398);
  }
  uint64_t v399 = *((void *)this + 53);
  *((void *)this + 53) = 0LL;
  if (v399) {
    (*(void (**)(uint64_t))(*(void *)v399 + 8LL))(v399);
  }
  uint64_t v400 = *((void *)this + 52);
  *((void *)this + 52) = 0LL;
  if (v400) {
    (*(void (**)(uint64_t))(*(void *)v400 + 8LL))(v400);
  }
  uint64_t v401 = *((void *)this + 51);
  *((void *)this + 51) = 0LL;
  if (v401) {
    (*(void (**)(uint64_t))(*(void *)v401 + 8LL))(v401);
  }
  uint64_t v402 = *((void *)this + 50);
  *((void *)this + 5sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v402) {
    (*(void (**)(uint64_t))(*(void *)v402 + 8LL))(v402);
  }
  uint64_t v403 = *((void *)this + 49);
  *((void *)this + 49) = 0LL;
  if (v403) {
    (*(void (**)(uint64_t))(*(void *)v403 + 8LL))(v403);
  }
  uint64_t v404 = *((void *)this + 48);
  *((void *)this + 48) = 0LL;
  if (v404) {
    (*(void (**)(uint64_t))(*(void *)v404 + 8LL))(v404);
  }
  uint64_t v405 = *((void *)this + 47);
  *((void *)this + 47) = 0LL;
  if (v405) {
    (*(void (**)(uint64_t))(*(void *)v405 + 8LL))(v405);
  }
  uint64_t v406 = *((void *)this + 46);
  *((void *)this + 46) = 0LL;
  if (v406) {
    (*(void (**)(uint64_t))(*(void *)v406 + 8LL))(v406);
  }
  uint64_t v407 = *((void *)this + 45);
  *((void *)this + 45) = 0LL;
  if (v407) {
    (*(void (**)(uint64_t))(*(void *)v407 + 8LL))(v407);
  }
  uint64_t v408 = *((void *)this + 44);
  *((void *)this + 44) = 0LL;
  if (v408) {
    (*(void (**)(uint64_t))(*(void *)v408 + 8LL))(v408);
  }
  uint64_t v409 = *((void *)this + 43);
  *((void *)this + 43) = 0LL;
  if (v409) {
    (*(void (**)(uint64_t))(*(void *)v409 + 8LL))(v409);
  }
  uint64_t v410 = *((void *)this + 42);
  *((void *)this + 42) = 0LL;
  if (v410) {
    (*(void (**)(uint64_t))(*(void *)v410 + 8LL))(v410);
  }
  uint64_t v411 = *((void *)this + 41);
  *((void *)this + 41) = 0LL;
  if (v411) {
    (*(void (**)(uint64_t))(*(void *)v411 + 8LL))(v411);
  }
  uint64_t v412 = *((void *)this + 40);
  *((void *)this + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v412) {
    (*(void (**)(uint64_t))(*(void *)v412 + 8LL))(v412);
  }
  uint64_t v413 = *((void *)this + 39);
  *((void *)this + 39) = 0LL;
  if (v413) {
    (*(void (**)(uint64_t))(*(void *)v413 + 8LL))(v413);
  }
  uint64_t v414 = *((void *)this + 38);
  *((void *)this + 38) = 0LL;
  if (v414) {
    (*(void (**)(uint64_t))(*(void *)v414 + 8LL))(v414);
  }
  uint64_t v415 = *((void *)this + 37);
  *((void *)this + 37) = 0LL;
  if (v415) {
    (*(void (**)(uint64_t))(*(void *)v415 + 8LL))(v415);
  }
  uint64_t v416 = *((void *)this + 36);
  *((void *)this + 36) = 0LL;
  if (v416) {
    (*(void (**)(uint64_t))(*(void *)v416 + 8LL))(v416);
  }
  uint64_t v417 = *((void *)this + 35);
  *((void *)this + 35) = 0LL;
  if (v417) {
    (*(void (**)(uint64_t))(*(void *)v417 + 8LL))(v417);
  }
  uint64_t v418 = *((void *)this + 34);
  *((void *)this + 34) = 0LL;
  if (v418) {
    (*(void (**)(uint64_t))(*(void *)v418 + 8LL))(v418);
  }
  uint64_t v419 = *((void *)this + 33);
  *((void *)this + 33) = 0LL;
  if (v419) {
    (*(void (**)(uint64_t))(*(void *)v419 + 8LL))(v419);
  }
  uint64_t v420 = *((void *)this + 32);
  *((void *)this + 32) = 0LL;
  if (v420) {
    (*(void (**)(uint64_t))(*(void *)v420 + 8LL))(v420);
  }
  uint64_t v421 = *((void *)this + 31);
  *((void *)this + 31) = 0LL;
  if (v421) {
    (*(void (**)(uint64_t))(*(void *)v421 + 8LL))(v421);
  }
  uint64_t v422 = *((void *)this + 30);
  *((void *)this + 3sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v422) {
    (*(void (**)(uint64_t))(*(void *)v422 + 8LL))(v422);
  }
  uint64_t v423 = *((void *)this + 29);
  *((void *)this + 29) = 0LL;
  if (v423) {
    (*(void (**)(uint64_t))(*(void *)v423 + 8LL))(v423);
  }
  uint64_t v424 = *((void *)this + 28);
  *((void *)this + 28) = 0LL;
  if (v424) {
    (*(void (**)(uint64_t))(*(void *)v424 + 8LL))(v424);
  }
  uint64_t v425 = *((void *)this + 27);
  *((void *)this + 27) = 0LL;
  if (v425) {
    (*(void (**)(uint64_t))(*(void *)v425 + 8LL))(v425);
  }
  uint64_t v426 = *((void *)this + 26);
  *((void *)this + 26) = 0LL;
  if (v426) {
    (*(void (**)(uint64_t))(*(void *)v426 + 8LL))(v426);
  }
  uint64_t v427 = *((void *)this + 25);
  *((void *)this + 25) = 0LL;
  if (v427) {
    (*(void (**)(uint64_t))(*(void *)v427 + 8LL))(v427);
  }
  uint64_t v428 = *((void *)this + 24);
  *((void *)this + 24) = 0LL;
  if (v428) {
    (*(void (**)(uint64_t))(*(void *)v428 + 8LL))(v428);
  }
  uint64_t v429 = *((void *)this + 23);
  *((void *)this + 23) = 0LL;
  if (v429) {
    (*(void (**)(uint64_t))(*(void *)v429 + 8LL))(v429);
  }
  uint64_t v430 = *((void *)this + 22);
  *((void *)this + 22) = 0LL;
  if (v430) {
    (*(void (**)(uint64_t))(*(void *)v430 + 8LL))(v430);
  }
  uint64_t v431 = *((void *)this + 21);
  *((void *)this + 21) = 0LL;
  if (v431) {
    (*(void (**)(uint64_t))(*(void *)v431 + 8LL))(v431);
  }
  uint64_t v432 = *((void *)this + 20);
  *((void *)this + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v432) {
    (*(void (**)(uint64_t))(*(void *)v432 + 8LL))(v432);
  }
  uint64_t v433 = *((void *)this + 19);
  *((void *)this + 19) = 0LL;
  if (v433) {
    (*(void (**)(uint64_t))(*(void *)v433 + 8LL))(v433);
  }
  uint64_t v434 = *((void *)this + 18);
  *((void *)this + 18) = 0LL;
  if (v434) {
    (*(void (**)(uint64_t))(*(void *)v434 + 8LL))(v434);
  }
  uint64_t v435 = *((void *)this + 17);
  *((void *)this + 17) = 0LL;
  if (v435) {
    (*(void (**)(uint64_t))(*(void *)v435 + 8LL))(v435);
  }
  uint64_t v436 = *((void *)this + 16);
  *((void *)this + 16) = 0LL;
  if (v436) {
    (*(void (**)(uint64_t))(*(void *)v436 + 8LL))(v436);
  }
  uint64_t v437 = *((void *)this + 15);
  *((void *)this + 15) = 0LL;
  if (v437) {
    (*(void (**)(uint64_t))(*(void *)v437 + 8LL))(v437);
  }
  uint64_t v438 = *((void *)this + 14);
  *((void *)this + 14) = 0LL;
  if (v438) {
    (*(void (**)(uint64_t))(*(void *)v438 + 8LL))(v438);
  }
  uint64_t v439 = *((void *)this + 13);
  *((void *)this + 13) = 0LL;
  if (v439) {
    (*(void (**)(uint64_t))(*(void *)v439 + 8LL))(v439);
  }
  uint64_t v440 = *((void *)this + 12);
  *((void *)this + 12) = 0LL;
  if (v440) {
    (*(void (**)(uint64_t))(*(void *)v440 + 8LL))(v440);
  }
  uint64_t v441 = *((void *)this + 11);
  *((void *)this + 11) = 0LL;
  if (v441) {
    (*(void (**)(uint64_t))(*(void *)v441 + 8LL))(v441);
  }
  uint64_t v442 = *((void *)this + 10);
  *((void *)this + 1sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v442) {
    (*(void (**)(uint64_t))(*(void *)v442 + 8LL))(v442);
  }
  uint64_t v443 = *((void *)this + 9);
  *((void *)this + 9) = 0LL;
  if (v443) {
    (*(void (**)(uint64_t))(*(void *)v443 + 8LL))(v443);
  }
  uint64_t v444 = *((void *)this + 8);
  *((void *)this + 8) = 0LL;
  if (v444) {
    (*(void (**)(uint64_t))(*(void *)v444 + 8LL))(v444);
  }
  uint64_t v445 = *((void *)this + 7);
  *((void *)this + 7) = 0LL;
  if (v445) {
    (*(void (**)(uint64_t))(*(void *)v445 + 8LL))(v445);
  }
  uint64_t v446 = *((void *)this + 6);
  *((void *)this + 6) = 0LL;
  if (v446) {
    (*(void (**)(uint64_t))(*(void *)v446 + 8LL))(v446);
  }
  uint64_t v447 = *((void *)this + 5);
  *((void *)this + 5) = 0LL;
  if (v447) {
    (*(void (**)(uint64_t))(*(void *)v447 + 8LL))(v447);
  }
  uint64_t v448 = *((void *)this + 4);
  *((void *)this + 4) = 0LL;
  if (v448) {
    (*(void (**)(uint64_t))(*(void *)v448 + 8LL))(v448);
  }
  uint64_t v449 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v449) {
    (*(void (**)(uint64_t))(*(void *)v449 + 8LL))(v449);
  }
  uint64_t v450 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v450) {
    (*(void (**)(uint64_t))(*(void *)v450 + 8LL))(v450);
  }
  uint64_t v451 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v451) {
    (*(void (**)(uint64_t))(*(void *)v451 + 8LL))(v451);
  }
  PB::Base::~Base(this);
}

void sub_101127D04(PB::Base *a1)
{
}

uint64_t sub_101127D18(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D350;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (uint64_t *)(a1 + 624);
  bzero((void *)(a1 + 8), 0x260uLL);
  bzero(v5, 0xBB4uLL);
  if ((*(_BYTE *)(a2 + 3616) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 616);
    *(_BYTE *)(a1 + 3616) = 1;
    *(void *)(a1 + 616) = v6;
  }

  uint64_t v7 = *(void *)(a2 + 1168);
  if (v7)
  {
    uint64_t v8 = operator new(0x18uLL);
    uint64_t v9 = sub_101091D5C((uint64_t)v8, v7);
    uint64_t v10 = *(void *)(a1 + 1168);
    *(void *)(a1 + 1168) = v9;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
  }

  uint64_t v11 = *(void *)(a2 + 1160);
  if (v11)
  {
    uint64_t v12 = operator new(0x78uLL);
    uint64_t v13 = sub_101091070((uint64_t)v12, v11);
    uint64_t v14 = *(void *)(a1 + 1160);
    *(void *)(a1 + 116sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v13;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
  }

  uint64_t v15 = *(void *)(a2 + 1136);
  if (v15)
  {
    uint64_t v16 = operator new(0x18uLL);
    uint64_t v17 = sub_10108FBD8((uint64_t)v16, v15);
    uint64_t v18 = *(void *)(a1 + 1136);
    *(void *)(a1 + 1136) = v17;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
  }

  uint64_t v19 = *(void *)(a2 + 1128);
  if (v19)
  {
    uint64_t v20 = operator new(0x28uLL);
    float v21 = sub_10108F690((uint64_t)v20, v19);
    uint64_t v22 = *(void *)(a1 + 1128);
    *(void *)(a1 + 1128) = v23;
    if (v22) {
      (*(void (**)(uint64_t, float))(*(void *)v22 + 8LL))(v22, v21);
    }
  }

  uint64_t v24 = *(void *)(a2 + 680);
  if (v24)
  {
    uint64_t v25 = operator new(0x10uLL);
    uint64_t v26 = sub_101107D04(v25, v24);
    uint64_t v27 = *(void *)(a1 + 680);
    *(void *)(a1 + 68sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v26;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8LL))(v27);
    }
  }

  uint64_t v28 = *(void *)(a2 + 672);
  if (v28)
  {
    uint64_t v29 = operator new(0x80uLL);
    uint64_t v30 = sub_101106C88((uint64_t)v29, v28);
    uint64_t v31 = *(void *)(a1 + 672);
    *(void *)(a1 + 672) = v30;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
    }
  }

  uint64_t v32 = *(void *)(a2 + 728);
  if (v32)
  {
    uint64_t v33 = operator new(0x10uLL);
    uint64_t v34 = sub_10110A20C(v33, v32);
    uint64_t v35 = *(void *)(a1 + 728);
    *(void *)(a1 + 728) = v34;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
    }
  }

  uint64_t v36 = *(void *)(a2 + 720);
  if (v36)
  {
    uint64_t v37 = operator new(0x18uLL);
    float v38 = sub_101109E24((uint64_t)v37, v36);
    uint64_t v39 = *(void *)(a1 + 720);
    *(void *)(a1 + 72sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v40;
    if (v39) {
      (*(void (**)(uint64_t, float))(*(void *)v39 + 8LL))(v39, v38);
    }
  }

  uint64_t v41 = *(void **)(a2 + 1440);
  if (v41)
  {
    uint64_t v42 = (void ***)operator new(0x20uLL);
    uint64_t v43 = sub_1010A1FFC(v42, v41);
    uint64_t v44 = *(void *)(a1 + 1440);
    *(void *)(a1 + 144sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v43;
    if (v44) {
      (*(void (**)(uint64_t))(*(void *)v44 + 8LL))(v44);
    }
  }

  uint64_t v45 = *(void *)(a2 + 760);
  if (v45)
  {
    uint64_t v46 = operator new(0x48uLL);
    uint64_t v47 = sub_10110CDFC((uint64_t)v46, v45);
    uint64_t v48 = *(void *)(a1 + 760);
    *(void *)(a1 + 76sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v47;
    if (v48) {
      (*(void (**)(uint64_t))(*(void *)v48 + 8LL))(v48);
    }
  }

  uint64_t v49 = *(void *)(a2 + 88);
  if (v49)
  {
    uint64_t v50 = operator new(0x28uLL);
    uint64_t v51 = sub_1010E1D68(v50, v49);
    uint64_t v52 = *(void *)(a1 + 88);
    *(void *)(a1 + 88) = v51;
    if (v52) {
      (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
    }
  }

  uint64_t v53 = *(void *)(a2 + 144);
  if (v53)
  {
    uint64_t v54 = operator new(0x28uLL);
    uint64_t v55 = sub_1010E4C10((uint64_t)v54, v53);
    uint64_t v56 = *(void *)(a1 + 144);
    *(void *)(a1 + 144) = v55;
    if (v56) {
      (*(void (**)(uint64_t))(*(void *)v56 + 8LL))(v56);
    }
  }

  uint64_t v57 = *(void *)(a2 + 216);
  if (v57)
  {
    uint64_t v58 = operator new(0x40uLL);
    uint64_t v59 = sub_1010E964C((uint64_t)v58, v57);
    uint64_t v60 = *(void *)(a1 + 216);
    *(void *)(a1 + 216) = v59;
    if (v60) {
      (*(void (**)(uint64_t))(*(void *)v60 + 8LL))(v60);
    }
  }

  uint64_t v61 = *(void *)(a2 + 3448);
  if (v61)
  {
    uint64_t v62 = operator new(0x10uLL);
    uint64_t v63 = sub_10116B244(v62, v61);
    uint64_t v64 = *(void *)(a1 + 3448);
    *(void *)(a1 + 3448) = v63;
    if (v64) {
      (*(void (**)(uint64_t))(*(void *)v64 + 8LL))(v64);
    }
  }

  uint64_t v65 = *(void *)(a2 + 3472);
  if (v65)
  {
    uint64_t v66 = operator new(0x10uLL);
    uint64_t v67 = sub_10116BBA4(v66, v65);
    uint64_t v68 = *(void *)(a1 + 3472);
    *(void *)(a1 + 3472) = v67;
    if (v68) {
      (*(void (**)(uint64_t))(*(void *)v68 + 8LL))(v68);
    }
  }

  uint64_t v69 = *(void *)(a2 + 3488);
  if (v69)
  {
    uint64_t v70 = operator new(0x10uLL);
    uint64_t v71 = sub_10116C28C(v70, v69);
    uint64_t v72 = *(void *)(a1 + 3488);
    *(void *)(a1 + 3488) = v71;
    if (v72) {
      (*(void (**)(uint64_t))(*(void *)v72 + 8LL))(v72);
    }
  }

  uint64_t v73 = *(void *)(a2 + 3520);
  if (v73)
  {
    uint64_t v74 = operator new(0x10uLL);
    uint64_t v75 = sub_10116D158(v74, v73);
    uint64_t v76 = *(void *)(a1 + 3520);
    *(void *)(a1 + 352sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v75;
    if (v76) {
      (*(void (**)(uint64_t))(*(void *)v76 + 8LL))(v76);
    }
  }

  uint64_t v77 = *(void *)(a2 + 3552);
  if (v77)
  {
    uint64_t v78 = operator new(0x10uLL);
    uint64_t v79 = sub_10116DE80(v78, v77);
    uint64_t v80 = *(void *)(a1 + 3552);
    *(void *)(a1 + 3552) = v79;
    if (v80) {
      (*(void (**)(uint64_t))(*(void *)v80 + 8LL))(v80);
    }
  }

  uint64_t v81 = *(void *)(a2 + 3536);
  if (v81)
  {
    uint64_t v82 = operator new(0x10uLL);
    uint64_t v83 = sub_10116D798(v82, v81);
    uint64_t v84 = *(void *)(a1 + 3536);
    *(void *)(a1 + 3536) = v83;
    if (v84) {
      (*(void (**)(uint64_t))(*(void *)v84 + 8LL))(v84);
    }
  }

  uint64_t v85 = *(void *)(a2 + 3584);
  if (v85)
  {
    uint64_t v86 = operator new(0x10uLL);
    uint64_t v87 = sub_10116EC30(v86, v85);
    uint64_t v88 = *(void *)(a1 + 3584);
    *(void *)(a1 + 3584) = v87;
    if (v88) {
      (*(void (**)(uint64_t))(*(void *)v88 + 8LL))(v88);
    }
  }

  uint64_t v89 = *(void *)(a2 + 3320);
  if (v89)
  {
    uint64_t v90 = operator new(0x60uLL);
    double v91 = sub_10115A434((uint64_t)v90, v89);
    uint64_t v92 = *(void *)(a1 + 3320);
    *(void *)(a1 + 332sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v93;
    if (v92) {
      (*(void (**)(uint64_t, double))(*(void *)v92 + 8LL))(v92, v91);
    }
  }

  uint64_t v94 = *(void *)(a2 + 544);
  if (v94)
  {
    uint64_t v95 = operator new(0x20uLL);
    uint64_t v96 = sub_1010FCD64(v95, v94);
    uint64_t v97 = *(void *)(a1 + 544);
    *(void *)(a1 + 544) = v96;
    if (v97) {
      (*(void (**)(uint64_t))(*(void *)v97 + 8LL))(v97);
    }
  }

  uint64_t v98 = *(void *)(a2 + 552);
  if (v98)
  {
    uint64_t v99 = operator new(0x30uLL);
    uint64_t v100 = sub_1010FD1D0((uint64_t)v99, v98);
    uint64_t v101 = *(void *)(a1 + 552);
    *(void *)(a1 + 552) = v100;
    if (v101) {
      (*(void (**)(uint64_t))(*(void *)v101 + 8LL))(v101);
    }
  }

  uint64_t v102 = *(void *)(a2 + 560);
  if (v102)
  {
    uint64_t v103 = operator new(0x20uLL);
    uint64_t v104 = sub_1010FD8E8(v103, v102);
    uint64_t v105 = *(void *)(a1 + 560);
    *(void *)(a1 + 56sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v104;
    if (v105) {
      (*(void (**)(uint64_t))(*(void *)v105 + 8LL))(v105);
    }
  }

  uint64_t v106 = *(void *)(a2 + 536);
  if (v106)
  {
    uint64_t v107 = operator new(0x20uLL);
    uint64_t v108 = sub_1010FC77C(v107, v106);
    uint64_t v109 = *(void *)(a1 + 536);
    *(void *)(a1 + 536) = v108;
    if (v109) {
      (*(void (**)(uint64_t))(*(void *)v109 + 8LL))(v109);
    }
  }

  uint64_t v110 = *(void *)(a2 + 568);
  if (v110)
  {
    uint64_t v111 = operator new(0x20uLL);
    double v112 = sub_1010FDD10((uint64_t)v111, v110);
    uint64_t v113 = *(void *)(a1 + 568);
    *(void *)(a1 + 568) = v114;
    if (v113) {
      (*(void (**)(uint64_t, double))(*(void *)v113 + 8LL))(v113, v112);
    }
  }

  uint64_t v115 = *(void *)(a2 + 3512);
  if (v115)
  {
    uint64_t v116 = operator new(0x20uLL);
    double v117 = sub_10116CC88((uint64_t)v116, v115);
    uint64_t v118 = *(void *)(a1 + 3512);
    *(void *)(a1 + 3512) = v119;
    if (v118) {
      (*(void (**)(uint64_t, double))(*(void *)v118 + 8LL))(v118, v117);
    }
  }

  uint64_t v120 = *(void *)(a2 + 2304);
  if (v120)
  {
    uint64_t v121 = operator new(0x80uLL);
    uint64_t v122 = sub_1011929F0(v121, v120);
    uint64_t v123 = *(void *)(a1 + 2304);
    *(void *)(a1 + 2304) = v122;
    if (v123) {
      (*(void (**)(uint64_t))(*(void *)v123 + 8LL))(v123);
    }
  }

  uint64_t v124 = *(void *)(a2 + 2720);
  if (v124)
  {
    uint64_t v125 = operator new(0x20uLL);
    float v126 = sub_1011AAA74((uint64_t)v125, v124);
    uint64_t v127 = *(void *)(a1 + 2720);
    *(void *)(a1 + 272sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v128;
    if (v127) {
      (*(void (**)(uint64_t, float))(*(void *)v127 + 8LL))(v127, v126);
    }
  }

  uint64_t v129 = *(void *)(a2 + 3568);
  if (v129)
  {
    uint64_t v130 = operator new(0x10uLL);
    uint64_t v131 = sub_10116E570(v130, v129);
    uint64_t v132 = *(void *)(a1 + 3568);
    *(void *)(a1 + 3568) = v131;
    if (v132) {
      (*(void (**)(uint64_t))(*(void *)v132 + 8LL))(v132);
    }
  }

  uint64_t v133 = *(void *)(a2 + 3400);
  if (v133)
  {
    uint64_t v134 = operator new(0x30uLL);
    uint64_t v135 = sub_101167DC4((uint64_t)v134, v133);
    uint64_t v136 = *(void *)(a1 + 3400);
    *(void *)(a1 + 340sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v135;
    if (v136) {
      (*(void (**)(uint64_t))(*(void *)v136 + 8LL))(v136);
    }
  }

  uint64_t v137 = *(void *)(a2 + 608);
  if (v137)
  {
    uint64_t v138 = operator new(0x28uLL);
    uint64_t v139 = sub_101101CE0((uint64_t)v138, v137);
    uint64_t v140 = *(void *)(a1 + 608);
    *(void *)(a1 + 608) = v139;
    if (v140) {
      (*(void (**)(uint64_t))(*(void *)v140 + 8LL))(v140);
    }
  }

  uint64_t v141 = *(void *)(a2 + 3416);
  if (v141)
  {
    uint64_t v142 = operator new(0x20uLL);
    uint64_t v143 = sub_10116929C(v142, v141);
    uint64_t v144 = *(void *)(a1 + 3416);
    *(void *)(a1 + 3416) = v143;
    if (v144) {
      (*(void (**)(uint64_t))(*(void *)v144 + 8LL))(v144);
    }
  }

  uint64_t v145 = *(void *)(a2 + 1408);
  if (v145)
  {
    uint64_t v146 = operator new(0x88uLL);
    uint64_t v147 = sub_10109F8F0((uint64_t)v146, v145);
    uint64_t v148 = *(void *)(a1 + 1408);
    *(void *)(a1 + 1408) = v147;
    if (v148) {
      (*(void (**)(uint64_t))(*(void *)v148 + 8LL))(v148);
    }
  }

  uint64_t v149 = *(void *)(a2 + 1392);
  if (v149)
  {
    uint64_t v150 = operator new(0x28uLL);
    uint64_t v151 = sub_10109E81C((uint64_t)v150, v149);
    uint64_t v152 = *(void *)(a1 + 1392);
    *(void *)(a1 + 1392) = v151;
    if (v152) {
      (*(void (**)(uint64_t))(*(void *)v152 + 8LL))(v152);
    }
  }

  uint64_t v153 = *(void *)(a2 + 1352);
  if (v153)
  {
    uint64_t v154 = operator new(0x40uLL);
    uint64_t v155 = sub_10109B6C8((uint64_t)v154, v153);
    uint64_t v156 = *(void *)(a1 + 1352);
    *(void *)(a1 + 1352) = v155;
    if (v156) {
      (*(void (**)(uint64_t))(*(void *)v156 + 8LL))(v156);
    }
  }

  uint64_t v157 = *(void *)(a2 + 224);
  if (v157)
  {
    uint64_t v158 = operator new(0x70uLL);
    uint64_t v159 = sub_1010EA30C((uint64_t)v158, v157);
    uint64_t v160 = *(void *)(a1 + 224);
    *(void *)(a1 + 224) = v159;
    if (v160) {
      (*(void (**)(uint64_t))(*(void *)v160 + 8LL))(v160);
    }
  }

  uint64_t v161 = *(void *)(a2 + 232);
  if (v161)
  {
    uint64_t v162 = operator new(0x30uLL);
    uint64_t v163 = sub_1010EB1EC((uint64_t)v162, v161);
    uint64_t v164 = *(void *)(a1 + 232);
    *(void *)(a1 + 232) = v163;
    if (v164) {
      (*(void (**)(uint64_t))(*(void *)v164 + 8LL))(v164);
    }
  }

  uint64_t v165 = *(void *)(a2 + 272);
  if (v165)
  {
    uint64_t v166 = operator new(0x38uLL);
    uint64_t v167 = sub_1010EDAE8((uint64_t)v166, v165);
    uint64_t v168 = *(void *)(a1 + 272);
    *(void *)(a1 + 272) = v167;
    if (v168) {
      (*(void (**)(uint64_t))(*(void *)v168 + 8LL))(v168);
    }
  }

  uint64_t v169 = *(void *)(a2 + 912);
  if (v169)
  {
    uint64_t v170 = operator new(0x90uLL);
    float v171 = sub_10111A7E8((uint64_t)v170, v169);
    uint64_t v172 = *(void *)(a1 + 912);
    *(void *)(a1 + 912) = v173;
    if (v172) {
      (*(void (**)(uint64_t, float))(*(void *)v172 + 8LL))(v172, v171);
    }
  }

  uint64_t v174 = *(void *)(a2 + 3576);
  if (v174)
  {
    uint64_t v175 = operator new(0x10uLL);
    uint64_t v176 = sub_10116E8DC(v175, v174);
    uint64_t v177 = *(void *)(a1 + 3576);
    *(void *)(a1 + 3576) = v176;
    if (v177) {
      (*(void (**)(uint64_t))(*(void *)v177 + 8LL))(v177);
    }
  }

  uint64_t v178 = *(void *)(a2 + 3544);
  if (v178)
  {
    uint64_t v179 = operator new(0x10uLL);
    uint64_t v180 = sub_10116DB0C(v179, v178);
    uint64_t v181 = *(void *)(a1 + 3544);
    *(void *)(a1 + 3544) = v180;
    if (v181) {
      (*(void (**)(uint64_t))(*(void *)v181 + 8LL))(v181);
    }
  }

  uint64_t v182 = *(void *)(a2 + 1344);
  if (v182)
  {
    uint64_t v183 = operator new(0x28uLL);
    uint64_t v184 = sub_10109AFE4((uint64_t)v183, v182);
    uint64_t v185 = *(void *)(a1 + 1344);
    *(void *)(a1 + 1344) = v184;
    if (v185) {
      (*(void (**)(uint64_t))(*(void *)v185 + 8LL))(v185);
    }
  }

  uint64_t v186 = *(void *)(a2 + 128);
  if (v186)
  {
    uint64_t v187 = operator new(0x20uLL);
    uint64_t v188 = sub_1010E3EF0((uint64_t)v187, v186);
    uint64_t v189 = *(void *)(a1 + 128);
    *(void *)(a1 + 128) = v188;
    if (v189) {
      (*(void (**)(uint64_t))(*(void *)v189 + 8LL))(v189);
    }
  }

  uint64_t v190 = *(void *)(a2 + 3280);
  if (v190)
  {
    uint64_t v191 = operator new(0x50uLL);
    uint64_t v192 = sub_101160014(v191, v190);
    uint64_t v193 = *(void *)(a1 + 3280);
    *(void *)(a1 + 328sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v192;
    if (v193) {
      (*(void (**)(uint64_t))(*(void *)v193 + 8LL))(v193);
    }
  }

  uint64_t v194 = *(void *)(a2 + 352);
  if (v194)
  {
    uint64_t v195 = operator new(0x10uLL);
    uint64_t v196 = sub_1010DEFEC((uint64_t)v195, v194);
    uint64_t v197 = *(void *)(a1 + 352);
    *(void *)(a1 + 352) = v196;
    if (v197) {
      (*(void (**)(uint64_t))(*(void *)v197 + 8LL))(v197);
    }
  }

  uint64_t v198 = *(void *)(a2 + 3256);
  if (v198)
  {
    uint64_t v199 = operator new(0x158uLL);
    uint64_t v200 = sub_101157170(v199, v198);
    uint64_t v201 = *(void *)(a1 + 3256);
    *(void *)(a1 + 3256) = v200;
    if (v201) {
      (*(void (**)(uint64_t))(*(void *)v201 + 8LL))(v201);
    }
  }

  uint64_t v202 = *(void *)(a2 + 1880);
  if (v202)
  {
    uint64_t v203 = operator new(0xC8uLL);
    uint64_t v204 = sub_1010DB01C((uint64_t)v203, v202);
    uint64_t v205 = *(void *)(a1 + 1880);
    *(void *)(a1 + 188sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v204;
    if (v205) {
      (*(void (**)(uint64_t))(*(void *)v205 + 8LL))(v205);
    }
  }

  uint64_t v206 = *(void *)(a2 + 1000);
  if (v206)
  {
    uint64_t v207 = operator new(0x88uLL);
    uint64_t v208 = sub_101082318((uint64_t)v207, v206);
    uint64_t v209 = *(void *)(a1 + 1000);
    *(void *)(a1 + 100sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v208;
    if (v209) {
      (*(void (**)(uint64_t))(*(void *)v209 + 8LL))(v209);
    }
  }

  uint64_t v210 = *(void *)(a2 + 80);
  if (v210)
  {
    uint64_t v211 = operator new(0x28uLL);
    double v212 = sub_1010E18FC((uint64_t)v211, v210);
    uint64_t v213 = *(void *)(a1 + 80);
    *(void *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v214;
    if (v213) {
      (*(void (**)(uint64_t, double))(*(void *)v213 + 8LL))(v213, v212);
    }
  }

  uint64_t v215 = *(void *)(a2 + 2072);
  if (v215)
  {
    uint64_t v216 = operator new(0x10uLL);
    float v217 = sub_1011844BC((uint64_t)v216, v215);
    uint64_t v218 = *(void *)(a1 + 2072);
    *(void *)(a1 + 2072) = v219;
    if (v218) {
      (*(void (**)(uint64_t, float))(*(void *)v218 + 8LL))(v218, v217);
    }
  }

  uint64_t v220 = *(void *)(a2 + 3032);
  if (v220)
  {
    uint64_t v221 = operator new(0xA0uLL);
    uint64_t v222 = sub_10114C270(v221, v220);
    uint64_t v223 = *(void *)(a1 + 3032);
    *(void *)(a1 + 3032) = v222;
    if (v223) {
      (*(void (**)(uint64_t))(*(void *)v223 + 8LL))(v223);
    }
  }

  uint64_t v224 = *(void *)(a2 + 1960);
  if (v224)
  {
    uint64_t v225 = operator new(0xC0uLL);
    float v226 = sub_101177734((uint64_t)v225, v224);
    uint64_t v227 = *(void *)(a1 + 1960);
    *(void *)(a1 + 196sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v228;
    if (v227) {
      (*(void (**)(uint64_t, float))(*(void *)v227 + 8LL))(v227, v226);
    }
  }

  uint64_t v229 = *(void *)(a2 + 712);
  if (v229)
  {
    uint64_t v230 = operator new(0x60uLL);
    float v231 = sub_101108CC0((uint64_t)v230, v229);
    uint64_t v232 = *(void *)(a1 + 712);
    *(void *)(a1 + 712) = v233;
    if (v232) {
      (*(void (**)(uint64_t, float))(*(void *)v232 + 8LL))(v232, v231);
    }
  }

  uint64_t v234 = *(void *)(a2 + 3264);
  if (v234)
  {
    uint64_t v235 = operator new(0x78uLL);
    uint64_t v236 = sub_1011591D4(v235, v234);
    uint64_t v237 = *(void *)(a1 + 3264);
    *(void *)(a1 + 3264) = v236;
    if (v237) {
      (*(void (**)(uint64_t))(*(void *)v237 + 8LL))(v237);
    }
  }

  uint64_t v238 = *(void *)(a2 + 2848);
  if (v238)
  {
    uint64_t v239 = operator new(0x10uLL);
    uint64_t v240 = sub_101140A28((uint64_t)v239, v238);
    uint64_t v241 = *(void *)(a1 + 2848);
    *(void *)(a1 + 2848) = v240;
    if (v241) {
      (*(void (**)(uint64_t))(*(void *)v241 + 8LL))(v241);
    }
  }

  uint64_t v242 = *(void *)(a2 + 3272);
  if (v242)
  {
    uint64_t v243 = operator new(0x48uLL);
    uint64_t v244 = sub_101159BC0(v243, v242);
    uint64_t v245 = *(void *)(a1 + 3272);
    *(void *)(a1 + 3272) = v244;
    if (v245) {
      (*(void (**)(uint64_t))(*(void *)v245 + 8LL))(v245);
    }
  }

  uint64_t v246 = *(void *)(a2 + 3312);
  if (v246)
  {
    uint64_t v247 = operator new(0x68uLL);
    uint64_t v248 = sub_101162174(v247, v246);
    uint64_t v249 = *(void *)(a1 + 3312);
    *(void *)(a1 + 3312) = v248;
    if (v249) {
      (*(void (**)(uint64_t))(*(void *)v249 + 8LL))(v249);
    }
  }

  uint64_t v250 = *(void *)(a2 + 1512);
  if (v250)
  {
    uint64_t v251 = operator new(0x80uLL);
    uint64_t v252 = sub_1010A76E8((uint64_t)v251, v250);
    uint64_t v253 = *(void *)(a1 + 1512);
    *(void *)(a1 + 1512) = v252;
    if (v253) {
      (*(void (**)(uint64_t))(*(void *)v253 + 8LL))(v253);
    }
  }

  uint64_t v254 = *(void *)(a2 + 1520);
  if (v254)
  {
    uint64_t v255 = operator new(0x98uLL);
    uint64_t v256 = sub_1010A89F0((uint64_t)v255, v254);
    uint64_t v257 = *(void *)(a1 + 1520);
    *(void *)(a1 + 152sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v256;
    if (v257) {
      (*(void (**)(uint64_t))(*(void *)v257 + 8LL))(v257);
    }
  }

  uint64_t v258 = *(void *)(a2 + 1328);
  if (v258)
  {
    uint64_t v259 = operator new(0x10uLL);
    uint64_t v260 = sub_1010999C8(v259, v258);
    uint64_t v261 = *(void *)(a1 + 1328);
    *(void *)(a1 + 1328) = v260;
    if (v261) {
      (*(void (**)(uint64_t))(*(void *)v261 + 8LL))(v261);
    }
  }

  uint64_t v262 = *(void *)(a2 + 1704);
  if (v262)
  {
    uint64_t v263 = operator new(0x28uLL);
    uint64_t v264 = sub_1010D1370((uint64_t)v263, v262);
    uint64_t v265 = *(void *)(a1 + 1704);
    *(void *)(a1 + 1704) = v264;
    if (v265) {
      (*(void (**)(uint64_t))(*(void *)v265 + 8LL))(v265);
    }
  }

  uint64_t v266 = *(void *)(a2 + 3176);
  if (v266)
  {
    uint64_t v267 = operator new(0x18uLL);
    uint64_t v268 = sub_101140D1C((uint64_t)v267, v266);
    uint64_t v269 = *(void *)(a1 + 3176);
    *(void *)(a1 + 3176) = v268;
    if (v269) {
      (*(void (**)(uint64_t))(*(void *)v269 + 8LL))(v269);
    }
  }

  uint64_t v270 = *(void *)(a2 + 1752);
  if (v270)
  {
    uint64_t v271 = operator new(0x28uLL);
    uint64_t v272 = sub_1010D79E8((uint64_t)v271, v270);
    uint64_t v273 = *(void *)(a1 + 1752);
    *(void *)(a1 + 1752) = v272;
    if (v273) {
      (*(void (**)(uint64_t))(*(void *)v273 + 8LL))(v273);
    }
  }

  uint64_t v274 = *(void *)(a2 + 3184);
  if (v274)
  {
    uint64_t v275 = operator new(0x20uLL);
    uint64_t v276 = sub_101156AEC(v275, v274);
    uint64_t v277 = *(void *)(a1 + 3184);
    *(void *)(a1 + 3184) = v276;
    if (v277) {
      (*(void (**)(uint64_t))(*(void *)v277 + 8LL))(v277);
    }
  }

  uint64_t v278 = *(void *)(a2 + 376);
  if (v278)
  {
    uint64_t v279 = operator new(0xA0uLL);
    uint64_t v280 = sub_1010F1EE8((uint64_t)v279, v278);
    uint64_t v281 = *(void *)(a1 + 376);
    *(void *)(a1 + 376) = v280;
    if (v281) {
      (*(void (**)(uint64_t))(*(void *)v281 + 8LL))(v281);
    }
  }

  uint64_t v282 = *(void *)(a2 + 3128);
  if (v282)
  {
    uint64_t v283 = operator new(0x70uLL);
    uint64_t v284 = sub_1011536F8(v283, v282);
    uint64_t v285 = *(void *)(a1 + 3128);
    *(void *)(a1 + 3128) = v284;
    if (v285) {
      (*(void (**)(uint64_t))(*(void *)v285 + 8LL))(v285);
    }
  }

  uint64_t v286 = *(void *)(a2 + 368);
  if (v286)
  {
    uint64_t v287 = operator new(0x78uLL);
    uint64_t v288 = sub_1010F1EEC((uint64_t)v287, v286);
    uint64_t v289 = *(void *)(a1 + 368);
    *(void *)(a1 + 368) = v288;
    if (v289) {
      (*(void (**)(uint64_t))(*(void *)v289 + 8LL))(v289);
    }
  }

  uint64_t v290 = *(void *)(a2 + 3136);
  if (v290)
  {
    uint64_t v291 = operator new(0x68uLL);
    uint64_t v292 = sub_1011543D0(v291, v290);
    uint64_t v293 = *(void *)(a1 + 3136);
    *(void *)(a1 + 3136) = v292;
    if (v293) {
      (*(void (**)(uint64_t))(*(void *)v293 + 8LL))(v293);
    }
  }

  uint64_t v294 = *(void *)(a2 + 3456);
  if (v294)
  {
    uint64_t v295 = operator new(0x10uLL);
    uint64_t v296 = sub_10116B564(v295, v294);
    uint64_t v297 = *(void *)(a1 + 3456);
    *(void *)(a1 + 3456) = v296;
    if (v297) {
      (*(void (**)(uint64_t))(*(void *)v297 + 8LL))(v297);
    }
  }

  uint64_t v298 = *(void *)(a2 + 296);
  if (v298)
  {
    uint64_t v299 = operator new(0x10uLL);
    float v300 = sub_1010DDCCC((uint64_t)v299, v298);
    uint64_t v301 = *(void *)(a1 + 296);
    *(void *)(a1 + 296) = v302;
    if (v301) {
      (*(void (**)(uint64_t, float))(*(void *)v301 + 8LL))(v301, v300);
    }
  }

  uint64_t v303 = *(void *)(a2 + 3440);
  if (v303)
  {
    uint64_t v304 = operator new(0x10uLL);
    uint64_t v305 = sub_10116AF24(v304, v303);
    uint64_t v306 = *(void *)(a1 + 3440);
    *(void *)(a1 + 344sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v305;
    if (v306) {
      (*(void (**)(uint64_t))(*(void *)v306 + 8LL))(v306);
    }
  }

  uint64_t v307 = *(void *)(a2 + 3288);
  if (v307)
  {
    uint64_t v308 = operator new(0x68uLL);
    uint64_t v309 = sub_101160B94(v308, v307);
    uint64_t v310 = *(void *)(a1 + 3288);
    *(void *)(a1 + 3288) = v309;
    if (v310) {
      (*(void (**)(uint64_t))(*(void *)v310 + 8LL))(v310);
    }
  }

  uint64_t v311 = *(void *)(a2 + 1240);
  if (v311)
  {
    uint64_t v312 = operator new(0x20uLL);
    float v313 = sub_101095448((uint64_t)v312, v311);
    uint64_t v314 = *(void *)(a1 + 1240);
    *(void *)(a1 + 124sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v315;
    if (v314) {
      (*(void (**)(uint64_t, float))(*(void *)v314 + 8LL))(v314, v313);
    }
  }

  uint64_t v316 = *(void *)(a2 + 2936);
  if (v316)
  {
    uint64_t v317 = operator new(0x18uLL);
    uint64_t v318 = sub_101145B10((uint64_t)v317, v316);
    uint64_t v319 = *(void *)(a1 + 2936);
    *(void *)(a1 + 2936) = v318;
    if (v319) {
      (*(void (**)(uint64_t))(*(void *)v319 + 8LL))(v319);
    }
  }

  uint64_t v320 = *(void *)(a2 + 1048);
  if (v320)
  {
    uint64_t v321 = operator new(0x48uLL);
    uint64_t v322 = sub_1010892CC((uint64_t)v321, v320);
    uint64_t v323 = *(void *)(a1 + 1048);
    *(void *)(a1 + 1048) = v322;
    if (v323) {
      (*(void (**)(uint64_t))(*(void *)v323 + 8LL))(v323);
    }
  }

  uint64_t v324 = *(void *)(a2 + 872);
  if (v324)
  {
    uint64_t v325 = operator new(0x10uLL);
    uint64_t v326 = sub_10111783C((uint64_t)v325, v324);
    uint64_t v327 = *(void *)(a1 + 872);
    *(void *)(a1 + 872) = v326;
    if (v327) {
      (*(void (**)(uint64_t))(*(void *)v327 + 8LL))(v327);
    }
  }

  uint64_t v328 = *(void *)(a2 + 32);
  if (v328)
  {
    uint64_t v329 = operator new(0x10uLL);
    uint64_t v330 = sub_1010DF938(v329, v328);
    uint64_t v331 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v330;
    if (v331) {
      (*(void (**)(uint64_t))(*(void *)v331 + 8LL))(v331);
    }
  }

  uint64_t v332 = *(void *)(a2 + 2024);
  if (v332)
  {
    uint64_t v333 = operator new(0xE0uLL);
    uint64_t v334 = sub_10117EDD4((uint64_t)v333, v332);
    uint64_t v335 = *(void *)(a1 + 2024);
    *(void *)(a1 + 2024) = v334;
    if (v335) {
      (*(void (**)(uint64_t))(*(void *)v335 + 8LL))(v335);
    }
  }

  uint64_t v336 = *(void *)(a2 + 1984);
  if (v336)
  {
    uint64_t v337 = operator new(0x78uLL);
    uint64_t v338 = sub_10117A5E8((uint64_t)v337, v336);
    uint64_t v339 = *(void *)(a1 + 1984);
    *(void *)(a1 + 1984) = v338;
    if (v339) {
      (*(void (**)(uint64_t))(*(void *)v339 + 8LL))(v339);
    }
  }

  uint64_t v340 = *(void *)(a2 + 496);
  if (v340)
  {
    uint64_t v341 = operator new(0x98uLL);
    uint64_t v342 = sub_1010F9D7C(v341, v340);
    uint64_t v343 = *(void *)(a1 + 496);
    *(void *)(a1 + 496) = v342;
    if (v343) {
      (*(void (**)(uint64_t))(*(void *)v343 + 8LL))(v343);
    }
  }

  uint64_t v344 = *(void *)(a2 + 1504);
  if (v344)
  {
    uint64_t v345 = operator new(0xD8uLL);
    uint64_t v346 = sub_1010A5000((uint64_t)v345, v344);
    uint64_t v347 = *(void *)(a1 + 1504);
    *(void *)(a1 + 1504) = v346;
    if (v347) {
      (*(void (**)(uint64_t))(*(void *)v347 + 8LL))(v347);
    }
  }

  uint64_t v348 = *(void *)(a2 + 2664);
  if (v348)
  {
    uint64_t v349 = operator new(0x20uLL);
    uint64_t v350 = sub_1011A43BC(v349, v348);
    uint64_t v351 = *(void *)(a1 + 2664);
    *(void *)(a1 + 2664) = v350;
    if (v351) {
      (*(void (**)(uint64_t))(*(void *)v351 + 8LL))(v351);
    }
  }

  uint64_t v352 = *(void *)(a2 + 1464);
  if (v352)
  {
    uint64_t v353 = operator new(0x10uLL);
    uint64_t v354 = sub_1010A2914(v353, v352);
    uint64_t v355 = *(void *)(a1 + 1464);
    *(void *)(a1 + 1464) = v354;
    if (v355) {
      (*(void (**)(uint64_t))(*(void *)v355 + 8LL))(v355);
    }
  }

  uint64_t v356 = *(void *)(a2 + 704);
  if (v356)
  {
    uint64_t v357 = operator new(0x10uLL);
    uint64_t v358 = sub_1011087F4(v357, v356);
    uint64_t v359 = *(void *)(a1 + 704);
    *(void *)(a1 + 704) = v358;
    if (v359) {
      (*(void (**)(uint64_t))(*(void *)v359 + 8LL))(v359);
    }
  }

  uint64_t v360 = *(void *)(a2 + 1208);
  if (v360)
  {
    uint64_t v361 = operator new(0x20uLL);
    float v362 = sub_101093FD0((uint64_t)v361, v360);
    uint64_t v363 = *(void *)(a1 + 1208);
    *(void *)(a1 + 1208) = v364;
    if (v363) {
      (*(void (**)(uint64_t, float))(*(void *)v363 + 8LL))(v363, v362);
    }
  }

  uint64_t v365 = *(void *)(a2 + 1216);
  if (v365)
  {
    uint64_t v366 = operator new(0x20uLL);
    uint64_t v367 = sub_101094480(v366, v365);
    uint64_t v368 = *(void *)(a1 + 1216);
    *(void *)(a1 + 1216) = v367;
    if (v368) {
      (*(void (**)(uint64_t))(*(void *)v368 + 8LL))(v368);
    }
  }

  uint64_t v369 = *(void *)(a2 + 1200);
  if (v369)
  {
    uint64_t v370 = operator new(0x20uLL);
    uint64_t v371 = sub_101093B80(v370, v369);
    uint64_t v372 = *(void *)(a1 + 1200);
    *(void *)(a1 + 120sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v371;
    if (v372) {
      (*(void (**)(uint64_t))(*(void *)v372 + 8LL))(v372);
    }
  }

  uint64_t v373 = *(void *)(a2 + 1192);
  if (v373)
  {
    uint64_t v374 = operator new(0x20uLL);
    uint64_t v375 = sub_101093598(v374, v373);
    uint64_t v376 = *(void *)(a1 + 1192);
    *(void *)(a1 + 1192) = v375;
    if (v376) {
      (*(void (**)(uint64_t))(*(void *)v376 + 8LL))(v376);
    }
  }

  uint64_t v377 = *(void *)(a2 + 472);
  if (v377)
  {
    uint64_t v378 = operator new(0x38uLL);
    double v379 = sub_1010F844C((uint64_t)v378, v377);
    uint64_t v380 = *(void *)(a1 + 472);
    *(void *)(a1 + 472) = v381;
    if (v380) {
      (*(void (**)(uint64_t, double))(*(void *)v380 + 8LL))(v380, v379);
    }
  }

  uint64_t v382 = *(void *)(a2 + 1056);
  if (v382)
  {
    uint64_t v383 = operator new(0x10uLL);
    uint64_t v384 = sub_101089A74(v383, v382);
    uint64_t v385 = *(void *)(a1 + 1056);
    *(void *)(a1 + 1056) = v384;
    if (v385) {
      (*(void (**)(uint64_t))(*(void *)v385 + 8LL))(v385);
    }
  }

  uint64_t v386 = *(void *)(a2 + 1976);
  if (v386)
  {
    uint64_t v387 = operator new(0x10uLL);
    uint64_t v388 = sub_10117A088(v387, v386);
    uint64_t v389 = *(void *)(a1 + 1976);
    *(void *)(a1 + 1976) = v388;
    if (v389) {
      (*(void (**)(uint64_t))(*(void *)v389 + 8LL))(v389);
    }
  }

  uint64_t v390 = *(void *)(a2 + 1888);
  if (v390)
  {
    uint64_t v391 = operator new(0x10uLL);
    uint64_t v392 = sub_101173C40(v391, v390);
    uint64_t v393 = *(void *)(a1 + 1888);
    *(void *)(a1 + 1888) = v392;
    if (v393) {
      (*(void (**)(uint64_t))(*(void *)v393 + 8LL))(v393);
    }
  }

  uint64_t v394 = *(void *)(a2 + 2432);
  if (v394)
  {
    uint64_t v395 = operator new(0x48uLL);
    uint64_t v396 = sub_10119A4C0(v395, v394);
    uint64_t v397 = *(void *)(a1 + 2432);
    *(void *)(a1 + 2432) = v396;
    if (v397) {
      (*(void (**)(uint64_t))(*(void *)v397 + 8LL))(v397);
    }
  }

  uint64_t v398 = *(void *)(a2 + 2440);
  if (v398)
  {
    uint64_t v399 = operator new(0x30uLL);
    uint64_t v400 = sub_10119ACB0(v399, v398);
    uint64_t v401 = *(void *)(a1 + 2440);
    *(void *)(a1 + 244sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v400;
    if (v401) {
      (*(void (**)(uint64_t))(*(void *)v401 + 8LL))(v401);
    }
  }

  uint64_t v402 = *(void *)(a2 + 504);
  if (v402)
  {
    uint64_t v403 = operator new(0x20uLL);
    uint64_t v404 = sub_1010FADCC(v403, v402);
    uint64_t v405 = *(void *)(a1 + 504);
    *(void *)(a1 + 504) = v404;
    if (v405) {
      (*(void (**)(uint64_t))(*(void *)v405 + 8LL))(v405);
    }
  }

  uint64_t v406 = *(void *)(a2 + 1472);
  if (v406)
  {
    uint64_t v407 = operator new(0x10uLL);
    uint64_t v408 = sub_1010A2C34(v407, v406);
    uint64_t v409 = *(void *)(a1 + 1472);
    *(void *)(a1 + 1472) = v408;
    if (v409) {
      (*(void (**)(uint64_t))(*(void *)v409 + 8LL))(v409);
    }
  }

  uint64_t v410 = *(void *)(a2 + 696);
  if (v410)
  {
    uint64_t v411 = operator new(0x10uLL);
    uint64_t v412 = sub_1011084C8(v411, v410);
    uint64_t v413 = *(void *)(a1 + 696);
    *(void *)(a1 + 696) = v412;
    if (v413) {
      (*(void (**)(uint64_t))(*(void *)v413 + 8LL))(v413);
    }
  }

  uint64_t v414 = *(void *)(a2 + 2544);
  if (v414)
  {
    uint64_t v415 = operator new(0x10uLL);
    uint64_t v416 = sub_10119FD74(v415, v414);
    uint64_t v417 = *(void *)(a1 + 2544);
    *(void *)(a1 + 2544) = v416;
    if (v417) {
      (*(void (**)(uint64_t))(*(void *)v417 + 8LL))(v417);
    }
  }

  uint64_t v418 = *(void *)(a2 + 3328);
  if (v418)
  {
    uint64_t v419 = operator new(0x50uLL);
    uint64_t v420 = sub_10115B438((uint64_t)v419, v418);
    uint64_t v421 = *(void *)(a1 + 3328);
    *(void *)(a1 + 3328) = v420;
    if (v421) {
      (*(void (**)(uint64_t))(*(void *)v421 + 8LL))(v421);
    }
  }

  uint64_t v422 = *(void *)(a2 + 1904);
  if (v422)
  {
    uint64_t v423 = operator new(0x20uLL);
    uint64_t v424 = sub_101174410(v423, v422);
    uint64_t v425 = *(void *)(a1 + 1904);
    *(void *)(a1 + 1904) = v424;
    if (v425) {
      (*(void (**)(uint64_t))(*(void *)v425 + 8LL))(v425);
    }
  }

  uint64_t v426 = *(void *)(a2 + 1912);
  if (v426)
  {
    uint64_t v427 = operator new(0x10uLL);
    uint64_t v428 = sub_101174804((uint64_t)v427, v426);
    uint64_t v429 = *(void *)(a1 + 1912);
    *(void *)(a1 + 1912) = v428;
    if (v429) {
      (*(void (**)(uint64_t))(*(void *)v429 + 8LL))(v429);
    }
  }

  uint64_t v430 = *(void *)(a2 + 2536);
  if (v430)
  {
    uint64_t v431 = operator new(0x28uLL);
    float v432 = sub_10119F808((uint64_t)v431, v430);
    uint64_t v433 = *(void *)(a1 + 2536);
    *(void *)(a1 + 2536) = v434;
    if (v433) {
      (*(void (**)(uint64_t, float))(*(void *)v433 + 8LL))(v433, v432);
    }
  }

  uint64_t v435 = *(void *)(a2 + 3528);
  if (v435)
  {
    uint64_t v436 = operator new(0x10uLL);
    uint64_t v437 = sub_10116D478(v436, v435);
    uint64_t v438 = *(void *)(a1 + 3528);
    *(void *)(a1 + 3528) = v437;
    if (v438) {
      (*(void (**)(uint64_t))(*(void *)v438 + 8LL))(v438);
    }
  }

  uint64_t v439 = *(void *)(a2 + 3480);
  if (v439)
  {
    uint64_t v440 = operator new(0x10uLL);
    uint64_t v441 = sub_10116BF18(v440, v439);
    uint64_t v442 = *(void *)(a1 + 3480);
    *(void *)(a1 + 348sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v441;
    if (v442) {
      (*(void (**)(uint64_t))(*(void *)v442 + 8LL))(v442);
    }
  }

  uint64_t v443 = *(void *)(a2 + 2656);
  if (v443)
  {
    uint64_t v444 = operator new(0x20uLL);
    uint64_t v445 = sub_1011A3D38(v444, v443);
    uint64_t v446 = *(void *)(a1 + 2656);
    *(void *)(a1 + 2656) = v445;
    if (v446) {
      (*(void (**)(uint64_t))(*(void *)v446 + 8LL))(v446);
    }
  }

  uint64_t v447 = *(void *)(a2 + 584);
  if (v447)
  {
    uint64_t v448 = operator new(0x50uLL);
    uint64_t v449 = sub_1010FE730((uint64_t)v448, v447);
    uint64_t v450 = *(void *)(a1 + 584);
    *(void *)(a1 + 584) = v449;
    if (v450) {
      (*(void (**)(uint64_t))(*(void *)v450 + 8LL))(v450);
    }
  }

  uint64_t v451 = *(void *)(a2 + 480);
  if (v451)
  {
    v452 = operator new(0x98uLL);
    uint64_t v453 = sub_1010F8A6C((uint64_t)v452, v451);
    uint64_t v454 = *(void *)(a1 + 480);
    *(void *)(a1 + 48sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v453;
    if (v454) {
      (*(void (**)(uint64_t))(*(void *)v454 + 8LL))(v454);
    }
  }

  uint64_t v455 = *(void *)(a2 + 488);
  if (v455)
  {
    v456 = operator new(0x18uLL);
    uint64_t v457 = sub_1010F97B4((uint64_t)v456, v455);
    uint64_t v458 = *(void *)(a1 + 488);
    *(void *)(a1 + 488) = v457;
    if (v458) {
      (*(void (**)(uint64_t))(*(void *)v458 + 8LL))(v458);
    }
  }

  uint64_t v459 = *(void *)(a2 + 2128);
  if (v459)
  {
    v460 = operator new(0x30uLL);
    uint64_t v461 = sub_101187B64(v460, v459);
    uint64_t v462 = *(void *)(a1 + 2128);
    *(void *)(a1 + 2128) = v461;
    if (v462) {
      (*(void (**)(uint64_t))(*(void *)v462 + 8LL))(v462);
    }
  }

  uint64_t v463 = *(void *)(a2 + 2392);
  if (v463)
  {
    v464 = operator new(0x20uLL);
    double v465 = sub_101198200((uint64_t)v464, v463);
    uint64_t v466 = *(void *)(a1 + 2392);
    *(void *)(a1 + 2392) = v467;
    if (v466) {
      (*(void (**)(uint64_t, double))(*(void *)v466 + 8LL))(v466, v465);
    }
  }

  uint64_t v468 = *(void *)(a2 + 2400);
  if (v468)
  {
    v469 = operator new(0x60uLL);
    double v470 = sub_101198660((uint64_t)v469, v468);
    uint64_t v471 = *(void *)(a1 + 2400);
    *(void *)(a1 + 240sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v472;
    if (v471) {
      (*(void (**)(uint64_t, double))(*(void *)v471 + 8LL))(v471, v470);
    }
  }

  uint64_t v473 = *(void *)(a2 + 384);
  if (v473)
  {
    v474 = operator new(0x18uLL);
    float v475 = sub_1010F41EC((uint64_t)v474, v473);
    uint64_t v476 = *(void *)(a1 + 384);
    *(void *)(a1 + 384) = v477;
    if (v476) {
      (*(void (**)(uint64_t, float))(*(void *)v476 + 8LL))(v476, v475);
    }
  }

  uint64_t v478 = *(void *)(a2 + 3144);
  if (v478)
  {
    v479 = operator new(0x18uLL);
    uint64_t v480 = sub_101154D60((uint64_t)v479, v478);
    uint64_t v481 = *(void *)(a1 + 3144);
    *(void *)(a1 + 3144) = v480;
    if (v481) {
      (*(void (**)(uint64_t))(*(void *)v481 + 8LL))(v481);
    }
  }

  uint64_t v482 = *(void *)(a2 + 344);
  if (v482)
  {
    v483 = operator new(0x10uLL);
    v484 = sub_1010F19D4(v483, v482);
    uint64_t v485 = *(void *)(a1 + 344);
    *(void *)(a1 + 344) = v484;
    if (v485) {
      (*(void (**)(uint64_t))(*(void *)v485 + 8LL))(v485);
    }
  }

  uint64_t v486 = *(void *)(a2 + 464);
  if (v486)
  {
    v487 = operator new(0x10uLL);
    v488 = sub_1010F8140(v487, v486);
    uint64_t v489 = *(void *)(a1 + 464);
    *(void *)(a1 + 464) = v488;
    if (v489) {
      (*(void (**)(uint64_t))(*(void *)v489 + 8LL))(v489);
    }
  }

  uint64_t v490 = *(void *)(a2 + 512);
  if (v490)
  {
    v491 = operator new(0x10uLL);
    v492 = sub_1010FB2B8(v491, v490);
    uint64_t v493 = *(void *)(a1 + 512);
    *(void *)(a1 + 512) = v492;
    if (v493) {
      (*(void (**)(uint64_t))(*(void *)v493 + 8LL))(v493);
    }
  }

  uint64_t v494 = *(void *)(a2 + 3360);
  if (v494)
  {
    v495 = operator new(0xF8uLL);
    uint64_t v496 = sub_1011655F4(v495, v494);
    uint64_t v497 = *(void *)(a1 + 3360);
    *(void *)(a1 + 336sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v496;
    if (v497) {
      (*(void (**)(uint64_t))(*(void *)v497 + 8LL))(v497);
    }
  }

  uint64_t v498 = *(void *)(a2 + 3000);
  if (v498)
  {
    v499 = operator new(0x38uLL);
    uint64_t v500 = sub_1011499C0((uint64_t)v499, v498);
    uint64_t v501 = *(void *)(a1 + 3000);
    *(void *)(a1 + 300sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v500;
    if (v501) {
      (*(void (**)(uint64_t))(*(void *)v501 + 8LL))(v501);
    }
  }

  uint64_t v502 = *(void *)(a2 + 2960);
  if (v502)
  {
    v503 = operator new(0x40uLL);
    double v504 = sub_1011463EC((uint64_t)v503, v502);
    uint64_t v505 = *(void *)(a1 + 2960);
    *(void *)(a1 + 296sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v506;
    if (v505) {
      (*(void (**)(uint64_t, double))(*(void *)v505 + 8LL))(v505, v504);
    }
  }

  uint64_t v507 = *(void *)(a2 + 2984);
  if (v507)
  {
    v508 = operator new(0x60uLL);
    double v509 = sub_101147F48((uint64_t)v508, v507);
    uint64_t v510 = *(void *)(a1 + 2984);
    *(void *)(a1 + 2984) = v511;
    if (v510) {
      (*(void (**)(uint64_t, double))(*(void *)v510 + 8LL))(v510, v509);
    }
  }

  uint64_t v512 = *(void *)(a2 + 2976);
  if (v512)
  {
    v513 = operator new(0xB8uLL);
    double v514 = sub_101147294((uint64_t)v513, v512);
    uint64_t v515 = *(void *)(a1 + 2976);
    *(void *)(a1 + 2976) = v516;
    if (v515) {
      (*(void (**)(uint64_t, double))(*(void *)v515 + 8LL))(v515, v514);
    }
  }

  uint64_t v517 = *(void *)(a2 + 3008);
  if (v517)
  {
    v518 = operator new(0x30uLL);
    double v519 = sub_10114A36C((uint64_t)v518, v517);
    uint64_t v520 = *(void *)(a1 + 3008);
    *(void *)(a1 + 3008) = v521;
    if (v520) {
      (*(void (**)(uint64_t, double))(*(void *)v520 + 8LL))(v520, v519);
    }
  }

  uint64_t v522 = *(void *)(a2 + 3016);
  if (v522)
  {
    v523 = operator new(0xE0uLL);
    double v524 = sub_10114AA2C((uint64_t)v523, v522);
    uint64_t v525 = *(void *)(a1 + 3016);
    *(void *)(a1 + 3016) = v526;
    if (v525) {
      (*(void (**)(uint64_t, double))(*(void *)v525 + 8LL))(v525, v524);
    }
  }

  uint64_t v527 = *(void *)(a2 + 2968);
  if (v527)
  {
    v528 = operator new(0x30uLL);
    double v529 = sub_101146C60((uint64_t)v528, v527);
    uint64_t v530 = *(void *)(a1 + 2968);
    *(void *)(a1 + 2968) = v531;
    if (v530) {
      (*(void (**)(uint64_t, double))(*(void *)v530 + 8LL))(v530, v529);
    }
  }

  uint64_t v532 = *(void *)(a2 + 1936);
  if (v532)
  {
    v533 = operator new(0x30uLL);
    uint64_t v534 = sub_101175DAC((uint64_t)v533, v532);
    uint64_t v535 = *(void *)(a1 + 1936);
    *(void *)(a1 + 1936) = v534;
    if (v535) {
      (*(void (**)(uint64_t))(*(void *)v535 + 8LL))(v535);
    }
  }

  uint64_t v536 = *(void *)(a2 + 3560);
  if (v536)
  {
    v537 = operator new(0x10uLL);
    uint64_t v538 = sub_10116E1DC(v537, v536);
    uint64_t v539 = *(void *)(a1 + 3560);
    *(void *)(a1 + 356sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v538;
    if (v539) {
      (*(void (**)(uint64_t))(*(void *)v539 + 8LL))(v539);
    }
  }

  uint64_t v540 = *(void *)(a2 + 1840);
  if (v540)
  {
    v541 = operator new(0x20uLL);
    double v542 = sub_1010DD078((uint64_t)v541, v540);
    uint64_t v543 = *(void *)(a1 + 1840);
    *(void *)(a1 + 184sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v544;
    if (v543) {
      (*(void (**)(uint64_t, double))(*(void *)v543 + 8LL))(v543, v542);
    }
  }

  uint64_t v545 = *(void *)(a2 + 192);
  if (v545)
  {
    v546 = operator new(0x28uLL);
    uint64_t v547 = sub_1010E67A0((uint64_t)v546, v545);
    uint64_t v548 = *(void *)(a1 + 192);
    *(void *)(a1 + 192) = v547;
    if (v548) {
      (*(void (**)(uint64_t))(*(void *)v548 + 8LL))(v548);
    }
  }

  uint64_t v549 = *(void *)(a2 + 3040);
  if (v549)
  {
    v550 = operator new(0x50uLL);
    uint64_t v551 = sub_10114DB10((uint64_t)v550, v549);
    uint64_t v552 = *(void *)(a1 + 3040);
    *(void *)(a1 + 304sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v551;
    if (v552) {
      (*(void (**)(uint64_t))(*(void *)v552 + 8LL))(v552);
    }
  }

  uint64_t v553 = *(void *)(a2 + 3048);
  if (v553)
  {
    v554 = operator new(0x68uLL);
    uint64_t v555 = sub_10114E558(v554, v553);
    uint64_t v556 = *(void *)(a1 + 3048);
    *(void *)(a1 + 3048) = v555;
    if (v556) {
      (*(void (**)(uint64_t))(*(void *)v556 + 8LL))(v556);
    }
  }

  uint64_t v557 = *(void *)(a2 + 2904);
  if (v557)
  {
    v558 = operator new(0x20uLL);
    uint64_t v559 = sub_101143CCC(v558, v557);
    uint64_t v560 = *(void *)(a1 + 2904);
    *(void *)(a1 + 2904) = v559;
    if (v560) {
      (*(void (**)(uint64_t))(*(void *)v560 + 8LL))(v560);
    }
  }

  uint64_t v561 = *(void *)(a2 + 736);
  if (v561)
  {
    v562 = operator new(0x20uLL);
    double v563 = sub_1010FF8D4((uint64_t)v562, v561);
    uint64_t v564 = *(void *)(a1 + 736);
    *(void *)(a1 + 736) = v565;
    if (v564) {
      (*(void (**)(uint64_t, double))(*(void *)v564 + 8LL))(v564, v563);
    }
  }

  uint64_t v566 = *(void *)(a2 + 888);
  if (v566)
  {
    v567 = operator new(0x38uLL);
    uint64_t v568 = sub_101118F08((uint64_t)v567, v566);
    uint64_t v569 = *(void *)(a1 + 888);
    *(void *)(a1 + 888) = v568;
    if (v569) {
      (*(void (**)(uint64_t))(*(void *)v569 + 8LL))(v569);
    }
  }

  uint64_t v570 = *(void *)(a2 + 456);
  if (v570)
  {
    v571 = operator new(0x20uLL);
    uint64_t v572 = sub_1010F7330((uint64_t)v571, v570);
    uint64_t v573 = *(void *)(a1 + 456);
    *(void *)(a1 + 456) = v572;
    if (v573) {
      (*(void (**)(uint64_t))(*(void *)v573 + 8LL))(v573);
    }
  }

  uint64_t v574 = *(void *)(a2 + 1872);
  if (v574)
  {
    v575 = operator new(0x10uLL);
    uint64_t v576 = sub_101173924((uint64_t)v575, v574);
    uint64_t v577 = *(void *)(a1 + 1872);
    *(void *)(a1 + 1872) = v576;
    if (v577) {
      (*(void (**)(uint64_t))(*(void *)v577 + 8LL))(v577);
    }
  }

  uint64_t v578 = *(void *)(a2 + 448);
  if (v578)
  {
    v579 = operator new(0x10uLL);
    uint64_t v580 = sub_1010F7020((uint64_t)v579, v578);
    uint64_t v581 = *(void *)(a1 + 448);
    *(void *)(a1 + 448) = v580;
    if (v581) {
      (*(void (**)(uint64_t))(*(void *)v581 + 8LL))(v581);
    }
  }

  uint64_t v582 = *(void *)(a2 + 2464);
  if (v582)
  {
    v583 = operator new(0x18uLL);
    uint64_t v584 = sub_10119C0B8((uint64_t)v583, v582);
    uint64_t v585 = *(void *)(a1 + 2464);
    *(void *)(a1 + 2464) = v584;
    if (v585) {
      (*(void (**)(uint64_t))(*(void *)v585 + 8LL))(v585);
    }
  }

  uint64_t v586 = *(void *)(a2 + 1040);
  if (v586)
  {
    v587 = operator new(0x38uLL);
    uint64_t v588 = sub_101088A9C((uint64_t)v587, v586);
    uint64_t v589 = *(void *)(a1 + 1040);
    *(void *)(a1 + 104sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v588;
    if (v589) {
      (*(void (**)(uint64_t))(*(void *)v589 + 8LL))(v589);
    }
  }

  uint64_t v590 = *(void *)(a2 + 784);
  if (v590)
  {
    v591 = operator new(0x10uLL);
    uint64_t v592 = sub_10110DC64((uint64_t)v591, v590);
    uint64_t v593 = *(void *)(a1 + 784);
    *(void *)(a1 + 784) = v592;
    if (v593) {
      (*(void (**)(uint64_t))(*(void *)v593 + 8LL))(v593);
    }
  }

  if (*(void *)(a2 + 8))
  {
    v594 = operator new(8uLL);
    v595 = sub_1010DE2C0(v594);
    uint64_t v596 = *v4;
    *uint64_t v4 = (uint64_t)v595;
    if (v596) {
      (*(void (**)(uint64_t))(*(void *)v596 + 8LL))(v596);
    }
  }

  uint64_t v597 = *(void *)(a2 + 16);
  if (v597)
  {
    v598 = operator new(0x10uLL);
    v599 = sub_1010DE524(v598, v597);
    uint64_t v600 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v599;
    if (v600) {
      (*(void (**)(uint64_t))(*(void *)v600 + 8LL))(v600);
    }
  }

  uint64_t v601 = *(void *)(a2 + 320);
  if (v601)
  {
    v602 = operator new(0x48uLL);
    uint64_t v603 = sub_1010F06B8((uint64_t)v602, v601);
    uint64_t v604 = *(void *)(a1 + 320);
    *(void *)(a1 + 32sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v603;
    if (v604) {
      (*(void (**)(uint64_t))(*(void *)v604 + 8LL))(v604);
    }
  }

  uint64_t v605 = *(void *)(a2 + 1848);
  if (v605)
  {
    v606 = operator new(0x20uLL);
    double v607 = sub_101171DF8((uint64_t)v606, v605);
    uint64_t v608 = *(void *)(a1 + 1848);
    *(void *)(a1 + 1848) = v609;
    if (v608) {
      (*(void (**)(uint64_t, double))(*(void *)v608 + 8LL))(v608, v607);
    }
  }

  uint64_t v610 = *(void *)(a2 + 3248);
  if (v610)
  {
    v611 = operator new(0x58uLL);
    uint64_t v612 = sub_10115F034((uint64_t)v611, v610);
    uint64_t v613 = *(void *)(a1 + 3248);
    *(void *)(a1 + 3248) = v612;
    if (v613) {
      (*(void (**)(uint64_t))(*(void *)v613 + 8LL))(v613);
    }
  }

  uint64_t v614 = *(void *)(a2 + 2744);
  if (v614)
  {
    v615 = operator new(0xE8uLL);
    double v616 = sub_1011AC238((uint64_t)v615, v614);
    uint64_t v617 = *(void *)(a1 + 2744);
    *(void *)(a1 + 2744) = v618;
    if (v617) {
      (*(void (**)(uint64_t, double))(*(void *)v617 + 8LL))(v617, v616);
    }
  }

  uint64_t v619 = *(void *)(a2 + 3600);
  if (v619)
  {
    v620 = operator new(0x20uLL);
    uint64_t v621 = sub_10116EF9C(v620, v619);
    uint64_t v622 = *(void *)(a1 + 3600);
    *(void *)(a1 + 360sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v621;
    if (v622) {
      (*(void (**)(uint64_t))(*(void *)v622 + 8LL))(v622);
    }
  }

  uint64_t v623 = *(void *)(a2 + 3592);
  if (v623)
  {
    v624 = operator new(0x10uLL);
    uint64_t v625 = sub_10116EFA0(v624, v623);
    uint64_t v626 = *(void *)(a1 + 3592);
    *(void *)(a1 + 3592) = v625;
    if (v626) {
      (*(void (**)(uint64_t))(*(void *)v626 + 8LL))(v626);
    }
  }

  uint64_t v627 = *(void *)(a2 + 360);
  if (v627)
  {
    v628 = operator new(0x40uLL);
    uint64_t v629 = sub_1010DE878((uint64_t)v628, v627);
    uint64_t v630 = *(void *)(a1 + 360);
    *(void *)(a1 + 36sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v629;
    if (v630) {
      (*(void (**)(uint64_t))(*(void *)v630 + 8LL))(v630);
    }
  }

  uint64_t v631 = *(void *)(a2 + 2248);
  if (v631)
  {
    v632 = operator new(0x18uLL);
    double v633 = sub_10117C838((uint64_t)v632, v631);
    uint64_t v634 = *(void *)(a1 + 2248);
    *(void *)(a1 + 2248) = v635;
    if (v634) {
      (*(void (**)(uint64_t, double))(*(void *)v634 + 8LL))(v634, v633);
    }
  }

  uint64_t v636 = *(void *)(a2 + 2424);
  if (v636)
  {
    v637 = operator new(0x58uLL);
    double v638 = sub_101199C14((uint64_t)v637, v636);
    uint64_t v639 = *(void *)(a1 + 2424);
    *(void *)(a1 + 2424) = v640;
    if (v639) {
      (*(void (**)(uint64_t, double))(*(void *)v639 + 8LL))(v639, v638);
    }
  }

  uint64_t v641 = *(void *)(a2 + 1832);
  if (v641)
  {
    v642 = operator new(0x30uLL);
    float v643 = sub_1010DCBC0((uint64_t)v642, v641);
    uint64_t v644 = *(void *)(a1 + 1832);
    *(void *)(a1 + 1832) = v645;
    if (v644) {
      (*(void (**)(uint64_t, float))(*(void *)v644 + 8LL))(v644, v643);
    }
  }

  uint64_t v646 = *(void *)(a2 + 1856);
  if (v646)
  {
    v647 = operator new(0x48uLL);
    uint64_t v648 = sub_101172380((uint64_t)v647, v646);
    uint64_t v649 = *(void *)(a1 + 1856);
    *(void *)(a1 + 1856) = v648;
    if (v649) {
      (*(void (**)(uint64_t))(*(void *)v649 + 8LL))(v649);
    }
  }

  uint64_t v650 = *(void *)(a2 + 2752);
  if (v650)
  {
    v651 = operator new(0x88uLL);
    uint64_t v652 = sub_1011ADB44((uint64_t)v651, v650);
    uint64_t v653 = *(void *)(a1 + 2752);
    *(void *)(a1 + 2752) = v652;
    if (v653) {
      (*(void (**)(uint64_t))(*(void *)v653 + 8LL))(v653);
    }
  }

  uint64_t v654 = *(void *)(a2 + 408);
  if (v654)
  {
    v655 = operator new(0x20uLL);
    uint64_t v656 = sub_1010F4EB8((uint64_t)v655, v654);
    uint64_t v657 = *(void *)(a1 + 408);
    *(void *)(a1 + 408) = v656;
    if (v657) {
      (*(void (**)(uint64_t))(*(void *)v657 + 8LL))(v657);
    }
  }

  uint64_t v658 = *(void *)(a2 + 416);
  if (v658)
  {
    v659 = operator new(0x38uLL);
    uint64_t v660 = sub_1010F5548((uint64_t)v659, v658);
    uint64_t v661 = *(void *)(a1 + 416);
    *(void *)(a1 + 416) = v660;
    if (v661) {
      (*(void (**)(uint64_t))(*(void *)v661 + 8LL))(v661);
    }
  }

  uint64_t v662 = *(void *)(a2 + 2000);
  if (v662)
  {
    v663 = operator new(0x20uLL);
    uint64_t v664 = sub_10117C888(v663, v662);
    uint64_t v665 = *(void *)(a1 + 2000);
    *(void *)(a1 + 200sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v664;
    if (v665) {
      (*(void (**)(uint64_t))(*(void *)v665 + 8LL))(v665);
    }
  }

  uint64_t v666 = *(void *)(a2 + 2152);
  if (v666)
  {
    v667 = operator new(0x10uLL);
    uint64_t v668 = sub_10118A3AC((uint64_t)v667, v666);
    uint64_t v669 = *(void *)(a1 + 2152);
    *(void *)(a1 + 2152) = v668;
    if (v669) {
      (*(void (**)(uint64_t))(*(void *)v669 + 8LL))(v669);
    }
  }

  uint64_t v670 = *(void *)(a2 + 72);
  if (v670)
  {
    v671 = operator new(0x78uLL);
    uint64_t v672 = sub_1010E0DB8((uint64_t)v671, v670);
    uint64_t v673 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v672;
    if (v673) {
      (*(void (**)(uint64_t))(*(void *)v673 + 8LL))(v673);
    }
  }

  uint64_t v674 = *(void *)(a2 + 832);
  if (v674)
  {
    v675 = operator new(0xD0uLL);
    uint64_t v676 = sub_10110F7B4((uint64_t)v675, v674);
    uint64_t v677 = *(void *)(a1 + 832);
    *(void *)(a1 + 832) = v676;
    if (v677) {
      (*(void (**)(uint64_t))(*(void *)v677 + 8LL))(v677);
    }
  }

  uint64_t v678 = *(void *)(a2 + 2256);
  if (v678)
  {
    v679 = operator new(0x30uLL);
    uint64_t v680 = sub_1011922F0(v679, v678);
    uint64_t v681 = *(void *)(a1 + 2256);
    *(void *)(a1 + 2256) = v680;
    if (v681) {
      (*(void (**)(uint64_t))(*(void *)v681 + 8LL))(v681);
    }
  }

  uint64_t v682 = *(void *)(a2 + 1088);
  if (v682)
  {
    v683 = operator new(0x60uLL);
    double v684 = sub_10108CC90((uint64_t)v683, v682);
    uint64_t v685 = *(void *)(a1 + 1088);
    *(void *)(a1 + 1088) = v686;
    if (v685) {
      (*(void (**)(uint64_t, double))(*(void *)v685 + 8LL))(v685, v684);
    }
  }

  uint64_t v687 = *(void *)(a2 + 1096);
  if (v687)
  {
    v688 = operator new(0x38uLL);
    double v689 = sub_10108D7E8((uint64_t)v688, v687);
    uint64_t v690 = *(void *)(a1 + 1096);
    *(void *)(a1 + 1096) = v691;
    if (v690) {
      (*(void (**)(uint64_t, double))(*(void *)v690 + 8LL))(v690, v689);
    }
  }

  uint64_t v692 = *(void *)(a2 + 1080);
  if (v692)
  {
    v693 = operator new(0x50uLL);
    double v694 = sub_10108C450((uint64_t)v693, v692);
    uint64_t v695 = *(void *)(a1 + 1080);
    *(void *)(a1 + 108sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v696;
    if (v695) {
      (*(void (**)(uint64_t, double))(*(void *)v695 + 8LL))(v695, v694);
    }
  }

  uint64_t v697 = *(void *)(a2 + 896);
  if (v697)
  {
    v698 = operator new(0x18uLL);
    uint64_t v699 = sub_1011193F0((uint64_t)v698, v697);
    uint64_t v700 = *(void *)(a1 + 896);
    *(void *)(a1 + 896) = v699;
    if (v700) {
      (*(void (**)(uint64_t))(*(void *)v700 + 8LL))(v700);
    }
  }

  uint64_t v701 = *(void *)(a2 + 3464);
  if (v701)
  {
    v702 = operator new(0x10uLL);
    uint64_t v703 = sub_10116B884(v702, v701);
    uint64_t v704 = *(void *)(a1 + 3464);
    *(void *)(a1 + 3464) = v703;
    if (v704) {
      (*(void (**)(uint64_t))(*(void *)v704 + 8LL))(v704);
    }
  }

  uint64_t v705 = *(void *)(a2 + 3088);
  if (v705)
  {
    v706 = operator new(0x60uLL);
    uint64_t v707 = sub_101150584((uint64_t)v706, v705);
    uint64_t v708 = *(void *)(a1 + 3088);
    *(void *)(a1 + 3088) = v707;
    if (v708) {
      (*(void (**)(uint64_t))(*(void *)v708 + 8LL))(v708);
    }
  }

  uint64_t v709 = *(void *)(a2 + 2768);
  if (v709)
  {
    v710 = operator new(0xC0uLL);
    uint64_t v711 = sub_1011AF264((uint64_t)v710, v709);
    uint64_t v712 = *(void *)(a1 + 2768);
    *(void *)(a1 + 2768) = v711;
    if (v712) {
      (*(void (**)(uint64_t))(*(void *)v712 + 8LL))(v712);
    }
  }

  uint64_t v713 = *(void *)(a2 + 2616);
  if (v713)
  {
    v714 = operator new(0x38uLL);
    uint64_t v715 = sub_1011A3554((uint64_t)v714, v713);
    uint64_t v716 = *(void *)(a1 + 2616);
    *(void *)(a1 + 2616) = v715;
    if (v716) {
      (*(void (**)(uint64_t))(*(void *)v716 + 8LL))(v716);
    }
  }

  uint64_t v717 = *(void *)(a2 + 1792);
  if (v717)
  {
    v718 = operator new(0x20uLL);
    float v719 = sub_1010DA260((uint64_t)v718, v717);
    uint64_t v720 = *(void *)(a1 + 1792);
    *(void *)(a1 + 1792) = v721;
    if (v720) {
      (*(void (**)(uint64_t, float))(*(void *)v720 + 8LL))(v720, v719);
    }
  }

  uint64_t v722 = *(void *)(a2 + 1800);
  if (v722)
  {
    v723 = operator new(0x18uLL);
    uint64_t v724 = sub_1010DA638((uint64_t)v723, v722);
    uint64_t v725 = *(void *)(a1 + 1800);
    *(void *)(a1 + 180sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v724;
    if (v725) {
      (*(void (**)(uint64_t))(*(void *)v725 + 8LL))(v725);
    }
  }

  uint64_t v726 = *(void *)(a2 + 304);
  if (v726)
  {
    v727 = operator new(0x18uLL);
    float v728 = sub_1010DDF24((uint64_t)v727, v726);
    uint64_t v729 = *(void *)(a1 + 304);
    *(void *)(a1 + 304) = v730;
    if (v729) {
      (*(void (**)(uint64_t, float))(*(void *)v729 + 8LL))(v729, v728);
    }
  }

  uint64_t v731 = *(void *)(a2 + 1784);
  if (v731)
  {
    v732 = operator new(0x18uLL);
    uint64_t v733 = sub_1010D9EB8((uint64_t)v732, v731);
    uint64_t v734 = *(void *)(a1 + 1784);
    *(void *)(a1 + 1784) = v733;
    if (v734) {
      (*(void (**)(uint64_t))(*(void *)v734 + 8LL))(v734);
    }
  }

  uint64_t v735 = *(void *)(a2 + 3336);
  if (v735)
  {
    v736 = operator new(0x30uLL);
    double v737 = sub_101162CC8((uint64_t)v736, v735);
    uint64_t v738 = *(void *)(a1 + 3336);
    *(void *)(a1 + 3336) = v739;
    if (v738) {
      (*(void (**)(uint64_t, double))(*(void *)v738 + 8LL))(v738, v737);
    }
  }

  uint64_t v740 = *(void *)(a2 + 2600);
  if (v740)
  {
    v741 = operator new(0x60uLL);
    float v742 = sub_1011A1DE0((uint64_t)v741, v740);
    uint64_t v743 = *(void *)(a1 + 2600);
    *(void *)(a1 + 260sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v744;
    if (v743) {
      (*(void (**)(uint64_t, float))(*(void *)v743 + 8LL))(v743, v742);
    }
  }

  uint64_t v745 = *(void *)(a2 + 432);
  if (v745)
  {
    v746 = operator new(0x20uLL);
    float v747 = sub_1010F6628((uint64_t)v746, v745);
    uint64_t v748 = *(void *)(a1 + 432);
    *(void *)(a1 + 432) = v749;
    if (v748) {
      (*(void (**)(uint64_t, float))(*(void *)v748 + 8LL))(v748, v747);
    }
  }

  uint64_t v750 = *(void *)(a2 + 2712);
  if (v750)
  {
    v751 = operator new(0x20uLL);
    uint64_t v752 = sub_1011AA38C((uint64_t)v751, v750);
    uint64_t v753 = *(void *)(a1 + 2712);
    *(void *)(a1 + 2712) = v752;
    if (v753) {
      (*(void (**)(uint64_t))(*(void *)v753 + 8LL))(v753);
    }
  }

  uint64_t v754 = *(void *)(a2 + 1808);
  if (v754)
  {
    v755 = operator new(0x18uLL);
    uint64_t v756 = sub_1010DAA00((uint64_t)v755, v754);
    uint64_t v757 = *(void *)(a1 + 1808);
    *(void *)(a1 + 1808) = v756;
    if (v757) {
      (*(void (**)(uint64_t))(*(void *)v757 + 8LL))(v757);
    }
  }

  uint64_t v758 = *(void *)(a2 + 1776);
  if (v758)
  {
    v759 = operator new(0x18uLL);
    uint64_t v760 = sub_1010D9B98((uint64_t)v759, v758);
    uint64_t v761 = *(void *)(a1 + 1776);
    *(void *)(a1 + 1776) = v760;
    if (v761) {
      (*(void (**)(uint64_t))(*(void *)v761 + 8LL))(v761);
    }
  }

  uint64_t v762 = *(void *)(a2 + 400);
  if (v762)
  {
    v763 = operator new(0x20uLL);
    uint64_t v764 = sub_1010F4A38((uint64_t)v763, v762);
    uint64_t v765 = *(void *)(a1 + 400);
    *(void *)(a1 + 40sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v764;
    if (v765) {
      (*(void (**)(uint64_t))(*(void *)v765 + 8LL))(v765);
    }
  }

  uint64_t v766 = *(void *)(a2 + 440);
  if (v766)
  {
    v767 = operator new(0x18uLL);
    uint64_t v768 = sub_1010F6C34((uint64_t)v767, v766);
    uint64_t v769 = *(void *)(a1 + 440);
    *(void *)(a1 + 44sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v768;
    if (v769) {
      (*(void (**)(uint64_t))(*(void *)v769 + 8LL))(v769);
    }
  }

  uint64_t v770 = *(void *)(a2 + 1320);
  if (v770)
  {
    v771 = operator new(0x28uLL);
    double v772 = sub_1010994F8((uint64_t)v771, v770);
    uint64_t v773 = *(void *)(a1 + 1320);
    *(void *)(a1 + 132sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v774;
    if (v773) {
      (*(void (**)(uint64_t, double))(*(void *)v773 + 8LL))(v773, v772);
    }
  }

  uint64_t v775 = *(void *)(a2 + 2896);
  if (v775)
  {
    v776 = operator new(0x38uLL);
    uint64_t v777 = sub_101142E70(v776, v775);
    uint64_t v778 = *(void *)(a1 + 2896);
    *(void *)(a1 + 2896) = v777;
    if (v778) {
      (*(void (**)(uint64_t))(*(void *)v778 + 8LL))(v778);
    }
  }

  uint64_t v779 = *(void *)(a2 + 2920);
  if (v779)
  {
    v780 = operator new(0x38uLL);
    uint64_t v781 = sub_101144F30(v780, v779);
    uint64_t v782 = *(void *)(a1 + 2920);
    *(void *)(a1 + 292sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v781;
    if (v782) {
      (*(void (**)(uint64_t))(*(void *)v782 + 8LL))(v782);
    }
  }

  uint64_t v783 = *(void *)(a2 + 2912);
  if (v783)
  {
    v784 = operator new(0x38uLL);
    uint64_t v785 = sub_101144314(v784, v783);
    uint64_t v786 = *(void *)(a1 + 2912);
    *(void *)(a1 + 2912) = v785;
    if (v786) {
      (*(void (**)(uint64_t))(*(void *)v786 + 8LL))(v786);
    }
  }

  uint64_t v787 = *(void *)(a2 + 1032);
  if (v787)
  {
    v788 = operator new(0x78uLL);
    float v789 = sub_101087AD0((uint64_t)v788, v787);
    uint64_t v790 = *(void *)(a1 + 1032);
    *(void *)(a1 + 1032) = v791;
    if (v790) {
      (*(void (**)(uint64_t, float))(*(void *)v790 + 8LL))(v790, v789);
    }
  }

  uint64_t v792 = *(void *)(a2 + 3392);
  if (v792)
  {
    v793 = operator new(0x28uLL);
    uint64_t v794 = sub_101167958(v793, v792);
    uint64_t v795 = *(void *)(a1 + 3392);
    *(void *)(a1 + 3392) = v794;
    if (v795) {
      (*(void (**)(uint64_t))(*(void *)v795 + 8LL))(v795);
    }
  }

  uint64_t v796 = *(void *)(a2 + 920);
  if (v796)
  {
    v797 = operator new(0x28uLL);
    uint64_t v798 = sub_10111BC04((uint64_t)v797, v796);
    uint64_t v799 = *(void *)(a1 + 920);
    *(void *)(a1 + 92sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v798;
    if (v799) {
      (*(void (**)(uint64_t))(*(void *)v799 + 8LL))(v799);
    }
  }

  uint64_t v800 = *(void *)(a2 + 3368);
  if (v800)
  {
    v801 = operator new(0x20uLL);
    double v802 = sub_101166D54((uint64_t)v801, v800);
    uint64_t v803 = *(void *)(a1 + 3368);
    *(void *)(a1 + 3368) = v804;
    if (v803) {
      (*(void (**)(uint64_t, double))(*(void *)v803 + 8LL))(v803, v802);
    }
  }

  uint64_t v805 = *(void *)(a2 + 3376);
  if (v805)
  {
    v806 = operator new(0x20uLL);
    double v807 = sub_101167118((uint64_t)v806, v805);
    uint64_t v808 = *(void *)(a1 + 3376);
    *(void *)(a1 + 3376) = v809;
    if (v808) {
      (*(void (**)(uint64_t, double))(*(void *)v808 + 8LL))(v808, v807);
    }
  }

  uint64_t v810 = *(void *)(a2 + 3160);
  if (v810)
  {
    v811 = operator new(0x30uLL);
    uint64_t v812 = sub_1011555C0((uint64_t)v811, v810);
    uint64_t v813 = *(void *)(a1 + 3160);
    *(void *)(a1 + 316sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v812;
    if (v813) {
      (*(void (**)(uint64_t))(*(void *)v813 + 8LL))(v813);
    }
  }

  uint64_t v814 = *(void *)(a2 + 1112);
  if (v814)
  {
    v815 = operator new(0x28uLL);
    double v816 = sub_10108E638((uint64_t)v815, v814);
    uint64_t v817 = *(void *)(a1 + 1112);
    *(void *)(a1 + 1112) = v818;
    if (v817) {
      (*(void (**)(uint64_t, double))(*(void *)v817 + 8LL))(v817, v816);
    }
  }

  uint64_t v819 = *(void *)(a2 + 1120);
  if (v819)
  {
    v820 = operator new(0xA0uLL);
    uint64_t v821 = sub_10108EEEC((uint64_t)v820, v819);
    uint64_t v822 = *(void *)(a1 + 1120);
    *(void *)(a1 + 112sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v821;
    if (v822) {
      (*(void (**)(uint64_t))(*(void *)v822 + 8LL))(v822);
    }
  }

  uint64_t v823 = *(void *)(a2 + 1944);
  if (v823)
  {
    v824 = operator new(0x18uLL);
    uint64_t v825 = sub_10117662C((uint64_t)v824, v823);
    uint64_t v826 = *(void *)(a1 + 1944);
    *(void *)(a1 + 1944) = v825;
    if (v826) {
      (*(void (**)(uint64_t))(*(void *)v826 + 8LL))(v826);
    }
  }

  uint64_t v827 = *(void *)(a2 + 1024);
  if (v827)
  {
    v828 = operator new(0xB8uLL);
    double v829 = sub_1010868B8((uint64_t)v828, v827);
    uint64_t v830 = *(void *)(a1 + 1024);
    *(void *)(a1 + 1024) = v831;
    if (v830) {
      (*(void (**)(uint64_t, double))(*(void *)v830 + 8LL))(v830, v829);
    }
  }

  uint64_t v832 = *(void *)(a2 + 3504);
  if (v832)
  {
    v833 = operator new(0x10uLL);
    uint64_t v834 = sub_10116C974(v833, v832);
    uint64_t v835 = *(void *)(a1 + 3504);
    *(void *)(a1 + 3504) = v834;
    if (v835) {
      (*(void (**)(uint64_t))(*(void *)v835 + 8LL))(v835);
    }
  }

  uint64_t v836 = *(void *)(a2 + 112);
  if (v836)
  {
    v837 = operator new(0x20uLL);
    uint64_t v838 = sub_1010E30D8((uint64_t)v837, v836);
    uint64_t v839 = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = v838;
    if (v839) {
      (*(void (**)(uint64_t))(*(void *)v839 + 8LL))(v839);
    }
  }

  uint64_t v840 = *(void *)(a2 + 2328);
  if (v840)
  {
    v841 = operator new(0x28uLL);
    uint64_t v842 = sub_101194C58((uint64_t)v841, v840);
    uint64_t v843 = *(void *)(a1 + 2328);
    *(void *)(a1 + 2328) = v842;
    if (v843) {
      (*(void (**)(uint64_t))(*(void *)v843 + 8LL))(v843);
    }
  }

  uint64_t v844 = *(void *)(a2 + 1416);
  if (v844)
  {
    v845 = operator new(0x48uLL);
    uint64_t v846 = sub_1010A0758((uint64_t)v845, v844);
    uint64_t v847 = *(void *)(a1 + 1416);
    *(void *)(a1 + 1416) = v846;
    if (v847) {
      (*(void (**)(uint64_t))(*(void *)v847 + 8LL))(v847);
    }
  }

  uint64_t v848 = *(void *)(a2 + 2408);
  if (v848)
  {
    v849 = operator new(0x20uLL);
    uint64_t v850 = sub_101198F30((uint64_t)v849, v848);
    uint64_t v851 = *(void *)(a1 + 2408);
    *(void *)(a1 + 2408) = v850;
    if (v851) {
      (*(void (**)(uint64_t))(*(void *)v851 + 8LL))(v851);
    }
  }

  uint64_t v852 = *(void *)(a2 + 2416);
  if (v852)
  {
    v853 = operator new(0x30uLL);
    uint64_t v854 = sub_1011993F4((uint64_t)v853, v852);
    uint64_t v855 = *(void *)(a1 + 2416);
    *(void *)(a1 + 2416) = v854;
    if (v855) {
      (*(void (**)(uint64_t))(*(void *)v855 + 8LL))(v855);
    }
  }

  uint64_t v856 = *(void *)(a2 + 2320);
  if (v856)
  {
    v857 = operator new(0x78uLL);
    uint64_t v858 = sub_101194108((uint64_t)v857, v856);
    uint64_t v859 = *(void *)(a1 + 2320);
    *(void *)(a1 + 232sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v858;
    if (v859) {
      (*(void (**)(uint64_t))(*(void *)v859 + 8LL))(v859);
    }
  }

  uint64_t v860 = *(void *)(a2 + 864);
  if (v860)
  {
    v861 = operator new(0x28uLL);
    uint64_t v862 = sub_101117458((uint64_t)v861, v860);
    uint64_t v863 = *(void *)(a1 + 864);
    *(void *)(a1 + 864) = v862;
    if (v863) {
      (*(void (**)(uint64_t))(*(void *)v863 + 8LL))(v863);
    }
  }

  uint64_t v864 = *(void *)(a2 + 1424);
  if (v864)
  {
    v865 = operator new(0x60uLL);
    uint64_t v866 = sub_1010A1260((uint64_t)v865, v864);
    uint64_t v867 = *(void *)(a1 + 1424);
    *(void *)(a1 + 1424) = v866;
    if (v867) {
      (*(void (**)(uint64_t))(*(void *)v867 + 8LL))(v867);
    }
  }

  uint64_t v868 = *(void *)(a2 + 3424);
  if (v868)
  {
    v869 = operator new(0x18uLL);
    uint64_t v870 = sub_101169664((uint64_t)v869, v868);
    uint64_t v871 = *(void *)(a1 + 3424);
    *(void *)(a1 + 3424) = v870;
    if (v871) {
      (*(void (**)(uint64_t))(*(void *)v871 + 8LL))(v871);
    }
  }

  uint64_t v872 = *(void *)(a2 + 2352);
  if (v872)
  {
    v873 = operator new(0x38uLL);
    uint64_t v874 = sub_101195B5C(v873, v872);
    uint64_t v875 = *(void *)(a1 + 2352);
    *(void *)(a1 + 2352) = v874;
    if (v875) {
      (*(void (**)(uint64_t))(*(void *)v875 + 8LL))(v875);
    }
  }

  uint64_t v876 = *(void *)(a2 + 2376);
  if (v876)
  {
    v877 = operator new(0x50uLL);
    uint64_t v878 = sub_101196C94((uint64_t)v877, v876);
    uint64_t v879 = *(void *)(a1 + 2376);
    *(void *)(a1 + 2376) = v878;
    if (v879) {
      (*(void (**)(uint64_t))(*(void *)v879 + 8LL))(v879);
    }
  }

  uint64_t v880 = *(void *)(a2 + 1272);
  if (v880)
  {
    v881 = operator new(0x18uLL);
    uint64_t v882 = sub_1010969A0((uint64_t)v881, v880);
    uint64_t v883 = *(void *)(a1 + 1272);
    *(void *)(a1 + 1272) = v882;
    if (v883) {
      (*(void (**)(uint64_t))(*(void *)v883 + 8LL))(v883);
    }
  }

  uint64_t v884 = *(void *)(a2 + 2992);
  if (v884)
  {
    v885 = operator new(0x100uLL);
    double v886 = sub_101148930((uint64_t)v885, v884);
    uint64_t v887 = *(void *)(a1 + 2992);
    *(void *)(a1 + 2992) = v888;
    if (v887) {
      (*(void (**)(uint64_t, double))(*(void *)v887 + 8LL))(v887, v886);
    }
  }

  uint64_t v889 = *(void *)(a2 + 2368);
  if (v889)
  {
    v890 = operator new(0x48uLL);
    uint64_t v891 = sub_101196C98(v890, v889);
    uint64_t v892 = *(void *)(a1 + 2368);
    *(void *)(a1 + 2368) = v891;
    if (v892) {
      (*(void (**)(uint64_t))(*(void *)v892 + 8LL))(v892);
    }
  }

  uint64_t v893 = *(void *)(a2 + 1968);
  if (v893)
  {
    v894 = operator new(0x30uLL);
    float v895 = sub_101179A88((uint64_t)v894, v893);
    uint64_t v896 = *(void *)(a1 + 1968);
    *(void *)(a1 + 1968) = v897;
    if (v896) {
      (*(void (**)(uint64_t, float))(*(void *)v896 + 8LL))(v896, v895);
    }
  }

  uint64_t v898 = *(void *)(a2 + 3384);
  if (v898)
  {
    v899 = operator new(0x20uLL);
    uint64_t v900 = sub_101167470((uint64_t)v899, v898);
    uint64_t v901 = *(void *)(a1 + 3384);
    *(void *)(a1 + 3384) = v900;
    if (v901) {
      (*(void (**)(uint64_t))(*(void *)v901 + 8LL))(v901);
    }
  }

  uint64_t v902 = *(void *)(a2 + 176);
  if (v902)
  {
    v903 = operator new(0x28uLL);
    uint64_t v904 = sub_1010E5CDC((uint64_t)v903, v902);
    uint64_t v905 = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = v904;
    if (v905) {
      (*(void (**)(uint64_t))(*(void *)v905 + 8LL))(v905);
    }
  }

  uint64_t v906 = *(void *)(a2 + 208);
  if (v906)
  {
    v907 = operator new(0xE8uLL);
    uint64_t v908 = sub_1010E7390((uint64_t)v907, v906);
    uint64_t v909 = *(void *)(a1 + 208);
    *(void *)(a1 + 208) = v908;
    if (v909) {
      (*(void (**)(uint64_t))(*(void *)v909 + 8LL))(v909);
    }
  }

  uint64_t v910 = *(void *)(a2 + 2032);
  if (v910)
  {
    v911 = operator new(0x38uLL);
    uint64_t v912 = sub_101180388(v911, v910);
    uint64_t v913 = *(void *)(a1 + 2032);
    *(void *)(a1 + 2032) = v912;
    if (v913) {
      (*(void (**)(uint64_t))(*(void *)v913 + 8LL))(v913);
    }
  }

  uint64_t v914 = *(void *)(a2 + 776);
  if (v914)
  {
    v915 = operator new(0x18uLL);
    uint64_t v916 = sub_10110D89C((uint64_t)v915, v914);
    uint64_t v917 = *(void *)(a1 + 776);
    *(void *)(a1 + 776) = v916;
    if (v917) {
      (*(void (**)(uint64_t))(*(void *)v917 + 8LL))(v917);
    }
  }

  uint64_t v918 = *(void *)(a2 + 2448);
  if (v918)
  {
    v919 = operator new(0x40uLL);
    uint64_t v920 = sub_10119B334(v919, v918);
    uint64_t v921 = *(void *)(a1 + 2448);
    *(void *)(a1 + 2448) = v920;
    if (v921) {
      (*(void (**)(uint64_t))(*(void *)v921 + 8LL))(v921);
    }
  }

  uint64_t v922 = *(void *)(a2 + 2456);
  if (v922)
  {
    v923 = operator new(0x20uLL);
    uint64_t v924 = sub_10119BCE0(v923, v922);
    uint64_t v925 = *(void *)(a1 + 2456);
    *(void *)(a1 + 2456) = v924;
    if (v925) {
      (*(void (**)(uint64_t))(*(void *)v925 + 8LL))(v925);
    }
  }

  uint64_t v926 = *(void *)(a2 + 1336);
  if (v926)
  {
    v927 = operator new(0x18uLL);
    uint64_t v928 = sub_101096680((uint64_t)v927, v926);
    uint64_t v929 = *(void *)(a1 + 1336);
    *(void *)(a1 + 1336) = v928;
    if (v929) {
      (*(void (**)(uint64_t))(*(void *)v929 + 8LL))(v929);
    }
  }

  uint64_t v930 = *(void *)(a2 + 3496);
  if (v930)
  {
    v931 = operator new(0x10uLL);
    uint64_t v932 = sub_10116C600(v931, v930);
    uint64_t v933 = *(void *)(a1 + 3496);
    *(void *)(a1 + 3496) = v932;
    if (v933) {
      (*(void (**)(uint64_t))(*(void *)v933 + 8LL))(v933);
    }
  }

  uint64_t v934 = *(void *)(a2 + 3072);
  if (v934)
  {
    v935 = operator new(0x10uLL);
    uint64_t v936 = sub_10114FB78(v935, v934);
    uint64_t v937 = *(void *)(a1 + 3072);
    *(void *)(a1 + 3072) = v936;
    if (v937) {
      (*(void (**)(uint64_t))(*(void *)v937 + 8LL))(v937);
    }
  }

  uint64_t v938 = *(void *)(a2 + 3168);
  if (v938)
  {
    v939 = operator new(0x20uLL);
    uint64_t v940 = sub_101156668(v939, v938);
    uint64_t v941 = *(void *)(a1 + 3168);
    *(void *)(a1 + 3168) = v940;
    if (v941) {
      (*(void (**)(uint64_t))(*(void *)v941 + 8LL))(v941);
    }
  }

  uint64_t v942 = *(void *)(a2 + 24);
  if (v942)
  {
    v943 = operator new(0x28uLL);
    uint64_t v944 = sub_1010DF384((uint64_t)v943, v942);
    uint64_t v945 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v944;
    if (v945) {
      (*(void (**)(uint64_t))(*(void *)v945 + 8LL))(v945);
    }
  }

  uint64_t v946 = *(void *)(a2 + 40);
  if (v946)
  {
    v947 = operator new(0x28uLL);
    uint64_t v948 = sub_1010DFC3C((uint64_t)v947, v946);
    uint64_t v949 = *(void *)(a1 + 40);
    *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v948;
    if (v949) {
      (*(void (**)(uint64_t))(*(void *)v949 + 8LL))(v949);
    }
  }

  uint64_t v950 = *(void *)(a2 + 64);
  if (v950)
  {
    v951 = operator new(0x10uLL);
    v952 = sub_1010E0964(v951, v950);
    uint64_t v953 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v952;
    if (v953) {
      (*(void (**)(uint64_t))(*(void *)v953 + 8LL))(v953);
    }
  }

  uint64_t v954 = *(void *)(a2 + 48);
  if (v954)
  {
    v955 = operator new(0x10uLL);
    v956 = sub_1010E01F0(v955, v954);
    uint64_t v957 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v956;
    if (v957) {
      (*(void (**)(uint64_t))(*(void *)v957 + 8LL))(v957);
    }
  }

  uint64_t v958 = *(void *)(a2 + 1144);
  if (v958)
  {
    v959 = operator new(0x30uLL);
    uint64_t v960 = sub_101082310((uint64_t)v959, v958);
    uint64_t v961 = *(void *)(a1 + 1144);
    *(void *)(a1 + 1144) = v960;
    if (v961) {
      (*(void (**)(uint64_t))(*(void *)v961 + 8LL))(v961);
    }
  }

  uint64_t v962 = *(void *)(a2 + 1256);
  if (v962)
  {
    v963 = operator new(0x28uLL);
    uint64_t v964 = sub_101095D38((uint64_t)v963, v962);
    uint64_t v965 = *(void *)(a1 + 1256);
    *(void *)(a1 + 1256) = v964;
    if (v965) {
      (*(void (**)(uint64_t))(*(void *)v965 + 8LL))(v965);
    }
  }

  uint64_t v966 = *(void *)(a2 + 1264);
  if (v966)
  {
    v967 = operator new(0x18uLL);
    uint64_t v968 = sub_1010962B8((uint64_t)v967, v966);
    uint64_t v969 = *(void *)(a1 + 1264);
    *(void *)(a1 + 1264) = v968;
    if (v969) {
      (*(void (**)(uint64_t))(*(void *)v969 + 8LL))(v969);
    }
  }

  uint64_t v970 = *(void *)(a2 + 1152);
  if (v970)
  {
    v971 = operator new(0x28uLL);
    uint64_t v972 = sub_1010908F8((uint64_t)v971, v970);
    uint64_t v973 = *(void *)(a1 + 1152);
    *(void *)(a1 + 1152) = v972;
    if (v973) {
      (*(void (**)(uint64_t))(*(void *)v973 + 8LL))(v973);
    }
  }

  uint64_t v974 = *(void *)(a2 + 1184);
  if (v974)
  {
    v975 = operator new(0x40uLL);
    uint64_t v976 = sub_101092C98((uint64_t)v975, v974);
    uint64_t v977 = *(void *)(a1 + 1184);
    *(void *)(a1 + 1184) = v976;
    if (v977) {
      (*(void (**)(uint64_t))(*(void *)v977 + 8LL))(v977);
    }
  }

  uint64_t v978 = *(void *)(a2 + 1232);
  if (v978)
  {
    v979 = operator new(0x10uLL);
    float v980 = sub_101095168((uint64_t)v979, v978);
    uint64_t v981 = *(void *)(a1 + 1232);
    *(void *)(a1 + 1232) = v982;
    if (v981) {
      (*(void (**)(uint64_t, float))(*(void *)v981 + 8LL))(v981, v980);
    }
  }

  uint64_t v983 = *(void *)(a2 + 1920);
  if (v983)
  {
    v984 = operator new(0x28uLL);
    uint64_t v985 = sub_101174B14((uint64_t)v984, v983);
    uint64_t v986 = *(void *)(a1 + 1920);
    *(void *)(a1 + 192sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v985;
    if (v986) {
      (*(void (**)(uint64_t))(*(void *)v986 + 8LL))(v986);
    }
  }

  uint64_t v987 = *(void *)(a2 + 640);
  if (v987)
  {
    v988 = operator new(0x48uLL);
    float v989 = sub_101104350((uint64_t)v988, v987);
    uint64_t v990 = *(void *)(a1 + 640);
    *(void *)(a1 + 64sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v991;
    if (v990) {
      (*(void (**)(uint64_t, float))(*(void *)v990 + 8LL))(v990, v989);
    }
  }

  uint64_t v992 = *(void *)(a2 + 648);
  if (v992)
  {
    v993 = operator new(0x18uLL);
    uint64_t v994 = sub_101104C64((uint64_t)v993, v992);
    uint64_t v995 = *(void *)(a1 + 648);
    *(void *)(a1 + 648) = v994;
    if (v995) {
      (*(void (**)(uint64_t))(*(void *)v995 + 8LL))(v995);
    }
  }

  uint64_t v996 = *(void *)(a2 + 1224);
  if (v996)
  {
    v997 = operator new(0x40uLL);
    uint64_t v998 = sub_10109493C((uint64_t)v997, v996);
    uint64_t v999 = *(void *)(a1 + 1224);
    *(void *)(a1 + 1224) = v998;
    if (v999) {
      (*(void (**)(uint64_t))(*(void *)v999 + 8LL))(v999);
    }
  }

  uint64_t v1000 = *(void *)(a2 + 656);
  if (v1000)
  {
    v1001 = operator new(0x58uLL);
    float v1002 = sub_10110523C((uint64_t)v1001, v1000);
    uint64_t v1003 = *(void *)(a1 + 656);
    *(void *)(a1 + 656) = v1004;
    if (v1003) {
      (*(void (**)(uint64_t, float))(*(void *)v1003 + 8LL))(v1003, v1002);
    }
  }

  uint64_t v1005 = *(void *)(a2 + 2528);
  if (v1005)
  {
    v1006 = operator new(0x20uLL);
    float v1007 = sub_10119F3F0((uint64_t)v1006, v1005);
    uint64_t v1008 = *(void *)(a1 + 2528);
    *(void *)(a1 + 2528) = v1009;
    if (v1008) {
      (*(void (**)(uint64_t, float))(*(void *)v1008 + 8LL))(v1008, v1007);
    }
  }

  uint64_t v1010 = *(void *)(a2 + 2584);
  if (v1010)
  {
    v1011 = operator new(0x10uLL);
    uint64_t v1012 = sub_1011A0EF0(v1011, v1010);
    uint64_t v1013 = *(void *)(a1 + 2584);
    *(void *)(a1 + 2584) = v1012;
    if (v1013) {
      (*(void (**)(uint64_t))(*(void *)v1013 + 8LL))(v1013);
    }
  }

  uint64_t v1014 = *(void *)(a2 + 2552);
  if (v1014)
  {
    v1015 = operator new(0x10uLL);
    uint64_t v1016 = sub_1011A00C8(v1015, v1014);
    uint64_t v1017 = *(void *)(a1 + 2552);
    *(void *)(a1 + 2552) = v1016;
    if (v1017) {
      (*(void (**)(uint64_t))(*(void *)v1017 + 8LL))(v1017);
    }
  }

  uint64_t v1018 = *(void *)(a2 + 2592);
  if (v1018)
  {
    v1019 = operator new(0x18uLL);
    uint64_t v1020 = sub_1011A17EC((uint64_t)v1019, v1018);
    uint64_t v1021 = *(void *)(a1 + 2592);
    *(void *)(a1 + 2592) = v1020;
    if (v1021) {
      (*(void (**)(uint64_t))(*(void *)v1021 + 8LL))(v1021);
    }
  }

  uint64_t v1022 = *(void *)(a2 + 3152);
  if (v1022)
  {
    v1023 = operator new(0x18uLL);
    uint64_t v1024 = sub_1011551C4((uint64_t)v1023, v1022);
    uint64_t v1025 = *(void *)(a1 + 3152);
    *(void *)(a1 + 3152) = v1024;
    if (v1025) {
      (*(void (**)(uint64_t))(*(void *)v1025 + 8LL))(v1025);
    }
  }

  uint64_t v1026 = *(void *)(a2 + 744);
  if (v1026)
  {
    v1027 = operator new(0x80uLL);
    float v1028 = sub_1010E3EEC((uint64_t)v1027, v1026);
    uint64_t v1029 = *(void *)(a1 + 744);
    *(void *)(a1 + 744) = v1030;
    if (v1029) {
      (*(void (**)(uint64_t, float))(*(void *)v1029 + 8LL))(v1029, v1028);
    }
  }

  uint64_t v1031 = *(void *)(a2 + 2048);
  if (v1031)
  {
    v1032 = operator new(0xC8uLL);
    uint64_t v1033 = sub_101181990(v1032, v1031);
    uint64_t v1034 = *(void *)(a1 + 2048);
    *(void *)(a1 + 2048) = v1033;
    if (v1034) {
      (*(void (**)(uint64_t))(*(void *)v1034 + 8LL))(v1034);
    }
  }

  uint64_t v1035 = *(void *)(a2 + 56);
  if (v1035)
  {
    v1036 = operator new(0x20uLL);
    float v1037 = sub_1010E04D8((uint64_t)v1036, v1035);
    uint64_t v1038 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v1039;
    if (v1038) {
      (*(void (**)(uint64_t, float))(*(void *)v1038 + 8LL))(v1038, v1037);
    }
  }

  uint64_t v1040 = *(void *)(a2 + 1248);
  if (v1040)
  {
    v1041 = operator new(0x20uLL);
    float v1042 = sub_1010958A0((uint64_t)v1041, v1040);
    uint64_t v1043 = *(void *)(a1 + 1248);
    *(void *)(a1 + 1248) = v1044;
    if (v1043) {
      (*(void (**)(uint64_t, float))(*(void *)v1043 + 8LL))(v1043, v1042);
    }
  }

  uint64_t v1045 = *(void *)(a2 + 2576);
  if (v1045)
  {
    v1046 = operator new(0x10uLL);
    uint64_t v1047 = sub_1011A0BDC(v1046, v1045);
    uint64_t v1048 = *(void *)(a1 + 2576);
    *(void *)(a1 + 2576) = v1047;
    if (v1048) {
      (*(void (**)(uint64_t))(*(void *)v1048 + 8LL))(v1048);
    }
  }

  uint64_t v1049 = *(void *)(a2 + 392);
  if (v1049)
  {
    v1050 = operator new(0x20uLL);
    uint64_t v1051 = sub_1010F4574((uint64_t)v1050, v1049);
    uint64_t v1052 = *(void *)(a1 + 392);
    *(void *)(a1 + 392) = v1051;
    if (v1052) {
      (*(void (**)(uint64_t))(*(void *)v1052 + 8LL))(v1052);
    }
  }

  uint64_t v1053 = *(void *)(a2 + 2840);
  if (v1053)
  {
    v1054 = operator new(0x18uLL);
    uint64_t v1055 = sub_101140664((uint64_t)v1054, v1053);
    uint64_t v1056 = *(void *)(a1 + 2840);
    *(void *)(a1 + 284sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1055;
    if (v1056) {
      (*(void (**)(uint64_t))(*(void *)v1056 + 8LL))(v1056);
    }
  }

  uint64_t v1057 = *(void *)(a2 + 1864);
  if (v1057)
  {
    v1058 = operator new(0x68uLL);
    uint64_t v1059 = sub_101172F24((uint64_t)v1058, v1057);
    uint64_t v1060 = *(void *)(a1 + 1864);
    *(void *)(a1 + 1864) = v1059;
    if (v1060) {
      (*(void (**)(uint64_t))(*(void *)v1060 + 8LL))(v1060);
    }
  }

  uint64_t v1061 = *(void *)(a2 + 2016);
  if (v1061)
  {
    v1062 = operator new(0x20uLL);
    uint64_t v1063 = sub_10117E584((uint64_t)v1062, v1061);
    uint64_t v1064 = *(void *)(a1 + 2016);
    *(void *)(a1 + 2016) = v1063;
    if (v1064) {
      (*(void (**)(uint64_t))(*(void *)v1064 + 8LL))(v1064);
    }
  }

  uint64_t v1065 = *(void *)(a2 + 880);
  if (v1065)
  {
    v1066 = operator new(0x68uLL);
    uint64_t v1067 = sub_101117D44((uint64_t)v1066, v1065);
    uint64_t v1068 = *(void *)(a1 + 880);
    *(void *)(a1 + 88sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1067;
    if (v1068) {
      (*(void (**)(uint64_t))(*(void *)v1068 + 8LL))(v1068);
    }
  }

  uint64_t v1069 = *(void *)(a2 + 2104);
  if (v1069)
  {
    v1070 = operator new(0xB8uLL);
    uint64_t v1071 = sub_101186414(v1070, v1069);
    uint64_t v1072 = *(void *)(a1 + 2104);
    *(void *)(a1 + 2104) = v1071;
    if (v1072) {
      (*(void (**)(uint64_t))(*(void *)v1072 + 8LL))(v1072);
    }
  }

  uint64_t v1073 = *(void *)(a2 + 2096);
  if (v1073)
  {
    v1074 = operator new(0x48uLL);
    uint64_t v1075 = sub_101185824((uint64_t)v1074, v1073);
    uint64_t v1076 = *(void *)(a1 + 2096);
    *(void *)(a1 + 2096) = v1075;
    if (v1076) {
      (*(void (**)(uint64_t))(*(void *)v1076 + 8LL))(v1076);
    }
  }

  uint64_t v1077 = *(void *)(a2 + 528);
  if (v1077)
  {
    v1078 = operator new(0x48uLL);
    float v1079 = sub_1010FBADC((uint64_t)v1078, v1077);
    uint64_t v1080 = *(void *)(a1 + 528);
    *(void *)(a1 + 528) = v1081;
    if (v1080) {
      (*(void (**)(uint64_t, float))(*(void *)v1080 + 8LL))(v1080, v1079);
    }
  }

  uint64_t v1082 = *(void *)(a2 + 3432);
  if (v1082)
  {
    v1083 = operator new(0x48uLL);
    uint64_t v1084 = sub_101169BF8((uint64_t)v1083, v1082);
    uint64_t v1085 = *(void *)(a1 + 3432);
    *(void *)(a1 + 3432) = v1084;
    if (v1085) {
      (*(void (**)(uint64_t))(*(void *)v1085 + 8LL))(v1085);
    }
  }

  uint64_t v1086 = *(void *)(a2 + 2136);
  if (v1086)
  {
    v1087 = operator new(0x48uLL);
    uint64_t v1088 = sub_101189684((uint64_t)v1087, v1086);
    uint64_t v1089 = *(void *)(a1 + 2136);
    *(void *)(a1 + 2136) = v1088;
    if (v1089) {
      (*(void (**)(uint64_t))(*(void *)v1089 + 8LL))(v1089);
    }
  }

  uint64_t v1090 = *(void *)(a2 + 3064);
  if (v1090)
  {
    v1091 = operator new(0x10uLL);
    uint64_t v1092 = sub_10114F804(v1091, v1090);
    uint64_t v1093 = *(void *)(a1 + 3064);
    *(void *)(a1 + 3064) = v1092;
    if (v1093) {
      (*(void (**)(uint64_t))(*(void *)v1093 + 8LL))(v1093);
    }
  }

  uint64_t v1094 = *(void *)(a2 + 848);
  if (v1094)
  {
    v1095 = operator new(0x40uLL);
    uint64_t v1096 = sub_101115948((uint64_t)v1095, v1094);
    uint64_t v1097 = *(void *)(a1 + 848);
    *(void *)(a1 + 848) = v1096;
    if (v1097) {
      (*(void (**)(uint64_t))(*(void *)v1097 + 8LL))(v1097);
    }
  }

  uint64_t v1098 = *(void *)(a2 + 632);
  if (v1098)
  {
    v1099 = operator new(0x18uLL);
    uint64_t v1100 = sub_101103DE8((uint64_t)v1099, v1098);
    uint64_t v1101 = *(void *)(a1 + 632);
    *(void *)(a1 + 632) = v1100;
    if (v1101) {
      (*(void (**)(uint64_t))(*(void *)v1101 + 8LL))(v1101);
    }
  }

  uint64_t v1102 = *(void *)(a2 + 2008);
  if (v1102)
  {
    v1103 = operator new(0xB8uLL);
    uint64_t v1104 = sub_10117D0B4(v1103, v1102);
    uint64_t v1105 = *(void *)(a1 + 2008);
    *(void *)(a1 + 2008) = v1104;
    if (v1105) {
      (*(void (**)(uint64_t))(*(void *)v1105 + 8LL))(v1105);
    }
  }

  uint64_t v1106 = *(void *)(a2 + 2064);
  if (v1106)
  {
    v1107 = operator new(0x10uLL);
    uint64_t v1108 = sub_101184214(v1107, v1106);
    uint64_t v1109 = *(void *)(a1 + 2064);
    *(void *)(a1 + 2064) = v1108;
    if (v1109) {
      (*(void (**)(uint64_t))(*(void *)v1109 + 8LL))(v1109);
    }
  }

  uint64_t v1110 = *(void *)(a2 + 3080);
  if (v1110)
  {
    v1111 = operator new(0x30uLL);
    double v1112 = sub_10114FE70((uint64_t)v1111, v1110);
    uint64_t v1113 = *(void *)(a1 + 3080);
    *(void *)(a1 + 308sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1114;
    if (v1113) {
      (*(void (**)(uint64_t, double))(*(void *)v1113 + 8LL))(v1113, v1112);
    }
  }

  uint64_t v1115 = *(void *)(a2 + 600);
  if (v1115)
  {
    v1116 = operator new(0x10uLL);
    uint64_t v1117 = sub_101101A08((uint64_t)v1116, v1115);
    uint64_t v1118 = *(void *)(a1 + 600);
    *(void *)(a1 + 60sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1117;
    if (v1118) {
      (*(void (**)(uint64_t))(*(void *)v1118 + 8LL))(v1118);
    }
  }

  uint64_t v1119 = *(void *)(a2 + 2112);
  if (v1119)
  {
    v1120 = operator new(0x68uLL);
    uint64_t v1121 = sub_1011881CC((uint64_t)v1120, v1119);
    uint64_t v1122 = *(void *)(a1 + 2112);
    *(void *)(a1 + 2112) = v1121;
    if (v1122) {
      (*(void (**)(uint64_t))(*(void *)v1122 + 8LL))(v1122);
    }
  }

  uint64_t v1123 = *(void *)(a2 + 1952);
  if (v1123)
  {
    v1124 = operator new(0x20uLL);
    float v1125 = sub_101176D38((uint64_t)v1124, v1123);
    uint64_t v1126 = *(void *)(a1 + 1952);
    *(void *)(a1 + 1952) = v1127;
    if (v1126) {
      (*(void (**)(uint64_t, float))(*(void *)v1126 + 8LL))(v1126, v1125);
    }
  }

  uint64_t v1128 = *(void *)(a2 + 1008);
  if (v1128)
  {
    v1129 = operator new(0xE0uLL);
    float v1130 = sub_101082314((uint64_t)v1129, v1128);
    uint64_t v1131 = *(void *)(a1 + 1008);
    *(void *)(a1 + 1008) = v1132;
    if (v1131) {
      (*(void (**)(uint64_t, float))(*(void *)v1131 + 8LL))(v1131, v1130);
    }
  }

  uint64_t v1133 = *(void *)(a2 + 424);
  if (v1133)
  {
    v1134 = operator new(0x28uLL);
    uint64_t v1135 = sub_1010F5DD4((uint64_t)v1134, v1133);
    uint64_t v1136 = *(void *)(a1 + 424);
    *(void *)(a1 + 424) = v1135;
    if (v1136) {
      (*(void (**)(uint64_t))(*(void *)v1136 + 8LL))(v1136);
    }
  }

  uint64_t v1137 = *(void *)(a2 + 3216);
  if (v1137)
  {
    v1138 = operator new(0x10uLL);
    uint64_t v1139 = sub_10115CC70((uint64_t)v1138, v1137);
    uint64_t v1140 = *(void *)(a1 + 3216);
    *(void *)(a1 + 3216) = v1139;
    if (v1140) {
      (*(void (**)(uint64_t))(*(void *)v1140 + 8LL))(v1140);
    }
  }

  uint64_t v1141 = *(void *)(a2 + 3024);
  if (v1141)
  {
    v1142 = operator new(0x30uLL);
    double v1143 = sub_10114B898((uint64_t)v1142, v1141);
    uint64_t v1144 = *(void *)(a1 + 3024);
    *(void *)(a1 + 3024) = v1145;
    if (v1144) {
      (*(void (**)(uint64_t, double))(*(void *)v1144 + 8LL))(v1144, v1143);
    }
  }

  uint64_t v1146 = *(void *)(a2 + 3408);
  if (v1146)
  {
    v1147 = operator new(0x18uLL);
    uint64_t v1148 = sub_101168658((uint64_t)v1147, v1146);
    uint64_t v1149 = *(void *)(a1 + 3408);
    *(void *)(a1 + 3408) = v1148;
    if (v1149) {
      (*(void (**)(uint64_t))(*(void *)v1149 + 8LL))(v1149);
    }
  }

  uint64_t v1150 = *(void *)(a2 + 2056);
  if (v1150)
  {
    v1151 = operator new(0x10uLL);
    uint64_t v1152 = sub_101183EF8((uint64_t)v1151, v1150);
    uint64_t v1153 = *(void *)(a1 + 2056);
    *(void *)(a1 + 2056) = v1152;
    if (v1153) {
      (*(void (**)(uint64_t))(*(void *)v1153 + 8LL))(v1153);
    }
  }

  uint64_t v1154 = *(void *)(a2 + 2040);
  if (v1154)
  {
    v1155 = operator new(0x60uLL);
    uint64_t v1156 = sub_101180B60((uint64_t)v1155, v1154);
    uint64_t v1157 = *(void *)(a1 + 2040);
    *(void *)(a1 + 204sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1156;
    if (v1157) {
      (*(void (**)(uint64_t))(*(void *)v1157 + 8LL))(v1157);
    }
  }

  uint64_t v1158 = *(void *)(a2 + 2120);
  if (v1158)
  {
    v1159 = operator new(0x58uLL);
    uint64_t v1160 = sub_101188EBC(v1159, v1158);
    uint64_t v1161 = *(void *)(a1 + 2120);
    *(void *)(a1 + 212sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1160;
    if (v1161) {
      (*(void (**)(uint64_t))(*(void *)v1161 + 8LL))(v1161);
    }
  }

  uint64_t v1162 = *(void *)(a2 + 2568);
  if (v1162)
  {
    v1163 = operator new(0x18uLL);
    float v1164 = sub_1011A044C((uint64_t)v1163, v1162);
    uint64_t v1165 = *(void *)(a1 + 2568);
    *(void *)(a1 + 2568) = v1166;
    if (v1165) {
      (*(void (**)(uint64_t, float))(*(void *)v1165 + 8LL))(v1165, v1164);
    }
  }

  uint64_t v1167 = *(void *)(a2 + 1400);
  if (v1167)
  {
    v1168 = operator new(0x28uLL);
    uint64_t v1169 = sub_10109EE00((uint64_t)v1168, v1167);
    uint64_t v1170 = *(void *)(a1 + 1400);
    *(void *)(a1 + 140sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1169;
    if (v1170) {
      (*(void (**)(uint64_t))(*(void *)v1170 + 8LL))(v1170);
    }
  }

  uint64_t v1171 = *(void *)(a2 + 624);
  if (v1171)
  {
    v1172 = operator new(0x48uLL);
    uint64_t v1173 = sub_101102470((uint64_t)v1172, v1171);
    uint64_t v1174 = *v5;
    *uint64_t v5 = v1173;
    if (v1174) {
      (*(void (**)(uint64_t))(*(void *)v1174 + 8LL))(v1174);
    }
  }

  uint64_t v1175 = *(void *)(a2 + 288);
  if (v1175)
  {
    v1176 = operator new(0x20uLL);
    uint64_t v1177 = sub_1010EFC40((uint64_t)v1176, v1175);
    uint64_t v1178 = *(void *)(a1 + 288);
    *(void *)(a1 + 288) = v1177;
    if (v1178) {
      (*(void (**)(uint64_t))(*(void *)v1178 + 8LL))(v1178);
    }
  }

  uint64_t v1179 = *(void *)(a2 + 1384);
  if (v1179)
  {
    v1180 = operator new(0x70uLL);
    uint64_t v1181 = sub_10109DA5C((uint64_t)v1180, v1179);
    uint64_t v1182 = *(void *)(a1 + 1384);
    *(void *)(a1 + 1384) = v1181;
    if (v1182) {
      (*(void (**)(uint64_t))(*(void *)v1182 + 8LL))(v1182);
    }
  }

  uint64_t v1183 = *(void *)(a2 + 1368);
  if (v1183)
  {
    v1184 = operator new(0x38uLL);
    uint64_t v1185 = sub_10109C82C((uint64_t)v1184, v1183);
    uint64_t v1186 = *(void *)(a1 + 1368);
    *(void *)(a1 + 1368) = v1185;
    if (v1186) {
      (*(void (**)(uint64_t))(*(void *)v1186 + 8LL))(v1186);
    }
  }

  uint64_t v1187 = *(void *)(a2 + 1376);
  if (v1187)
  {
    v1188 = operator new(0x30uLL);
    uint64_t v1189 = sub_10109D2DC((uint64_t)v1188, v1187);
    uint64_t v1190 = *(void *)(a1 + 1376);
    *(void *)(a1 + 1376) = v1189;
    if (v1190) {
      (*(void (**)(uint64_t))(*(void *)v1190 + 8LL))(v1190);
    }
  }

  uint64_t v1191 = *(void *)(a2 + 1360);
  if (v1191)
  {
    v1192 = operator new(0x40uLL);
    uint64_t v1193 = sub_10109BF6C((uint64_t)v1192, v1191);
    uint64_t v1194 = *(void *)(a1 + 1360);
    *(void *)(a1 + 136sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1193;
    if (v1194) {
      (*(void (**)(uint64_t))(*(void *)v1194 + 8LL))(v1194);
    }
  }

  uint64_t v1195 = *(void *)(a2 + 120);
  if (v1195)
  {
    v1196 = operator new(0x28uLL);
    uint64_t v1197 = sub_1010E24D4((uint64_t)v1196, v1195);
    uint64_t v1198 = *(void *)(a1 + 120);
    *(void *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1197;
    if (v1198) {
      (*(void (**)(uint64_t))(*(void *)v1198 + 8LL))(v1198);
    }
  }

  v1199 = *(void **)(a2 + 96);
  if (v1199)
  {
    v1200 = operator new(0x20uLL);
    v1201 = sub_1010E24D8(v1200, v1199);
    uint64_t v1202 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = v1201;
    if (v1202) {
      (*(void (**)(uint64_t))(*(void *)v1202 + 8LL))(v1202);
    }
  }

  v1203 = *(void **)(a2 + 240);
  if (v1203)
  {
    v1204 = operator new(0x30uLL);
    uint64_t v1205 = sub_1010EBDEC((uint64_t)v1204, v1203);
    uint64_t v1206 = *(void *)(a1 + 240);
    *(void *)(a1 + 24sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1205;
    if (v1206) {
      (*(void (**)(uint64_t))(*(void *)v1206 + 8LL))(v1206);
    }
  }

  uint64_t v1207 = *(void *)(a2 + 3120);
  if (v1207)
  {
    v1208 = operator new(0x48uLL);
    double v1209 = sub_101152858((uint64_t)v1208, v1207);
    uint64_t v1210 = *(void *)(a1 + 3120);
    *(void *)(a1 + 312sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1211;
    if (v1210) {
      (*(void (**)(uint64_t, double))(*(void *)v1210 + 8LL))(v1210, v1209);
    }
  }

  uint64_t v1212 = *(void *)(a2 + 3112);
  if (v1212)
  {
    v1213 = operator new(0x30uLL);
    uint64_t v1214 = sub_101151F80((uint64_t)v1213, v1212);
    uint64_t v1215 = *(void *)(a1 + 3112);
    *(void *)(a1 + 3112) = v1214;
    if (v1215) {
      (*(void (**)(uint64_t))(*(void *)v1215 + 8LL))(v1215);
    }
  }

  uint64_t v1216 = *(void *)(a2 + 840);
  if (v1216)
  {
    v1217 = operator new(0x38uLL);
    uint64_t v1218 = sub_101114FC4((uint64_t)v1217, v1216);
    uint64_t v1219 = *(void *)(a1 + 840);
    *(void *)(a1 + 84sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1218;
    if (v1219) {
      (*(void (**)(uint64_t))(*(void *)v1219 + 8LL))(v1219);
    }
  }

  uint64_t v1220 = *(void *)(a2 + 280);
  if (v1220)
  {
    v1221 = operator new(0xC8uLL);
    uint64_t v1222 = sub_1010EE734((uint64_t)v1221, v1220);
    uint64_t v1223 = *(void *)(a1 + 280);
    *(void *)(a1 + 28sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1222;
    if (v1223) {
      (*(void (**)(uint64_t))(*(void *)v1223 + 8LL))(v1223);
    }
  }

  uint64_t v1224 = *(void *)(a2 + 1104);
  if (v1224)
  {
    v1225 = operator new(0x38uLL);
    float v1226 = sub_10108DEAC((uint64_t)v1225, v1224);
    uint64_t v1227 = *(void *)(a1 + 1104);
    *(void *)(a1 + 1104) = v1228;
    if (v1227) {
      (*(void (**)(uint64_t, float))(*(void *)v1227 + 8LL))(v1227, v1226);
    }
  }

  uint64_t v1229 = *(void *)(a2 + 2688);
  if (v1229)
  {
    v1230 = operator new(0xA8uLL);
    uint64_t v1231 = sub_1011A7FF0(v1230, v1229);
    uint64_t v1232 = *(void *)(a1 + 2688);
    *(void *)(a1 + 2688) = v1231;
    if (v1232) {
      (*(void (**)(uint64_t))(*(void *)v1232 + 8LL))(v1232);
    }
  }

  uint64_t v1233 = *(void *)(a2 + 2704);
  if (v1233)
  {
    v1234 = operator new(0x18uLL);
    uint64_t v1235 = sub_1011A9FF0(v1234, v1233);
    uint64_t v1236 = *(void *)(a1 + 2704);
    *(void *)(a1 + 2704) = v1235;
    if (v1236) {
      (*(void (**)(uint64_t))(*(void *)v1236 + 8LL))(v1236);
    }
  }

  uint64_t v1237 = *(void *)(a2 + 2696);
  if (v1237)
  {
    v1238 = operator new(0x38uLL);
    float v1239 = sub_1011A98CC((uint64_t)v1238, v1237);
    uint64_t v1240 = *(void *)(a1 + 2696);
    *(void *)(a1 + 2696) = v1241;
    if (v1240) {
      (*(void (**)(uint64_t, float))(*(void *)v1240 + 8LL))(v1240, v1239);
    }
  }

  uint64_t v1242 = *(void *)(a2 + 3608);
  if (v1242)
  {
    v1243 = operator new(0x10uLL);
    uint64_t v1244 = sub_10116F8F0(v1243, v1242);
    uint64_t v1245 = *(void *)(a1 + 3608);
    *(void *)(a1 + 3608) = v1244;
    if (v1245) {
      (*(void (**)(uint64_t))(*(void *)v1245 + 8LL))(v1245);
    }
  }

  uint64_t v1246 = *(void *)(a2 + 328);
  if (v1246)
  {
    v1247 = operator new(0x20uLL);
    uint64_t v1248 = sub_1010F109C((uint64_t)v1247, v1246);
    uint64_t v1249 = *(void *)(a1 + 328);
    *(void *)(a1 + 328) = v1248;
    if (v1249) {
      (*(void (**)(uint64_t))(*(void *)v1249 + 8LL))(v1249);
    }
  }

  uint64_t v1250 = *(void *)(a2 + 2520);
  if (v1250)
  {
    v1251 = operator new(0x58uLL);
    double v1252 = sub_10119EAA4((uint64_t)v1251, v1250);
    uint64_t v1253 = *(void *)(a1 + 2520);
    *(void *)(a1 + 252sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1254;
    if (v1253) {
      (*(void (**)(uint64_t, double))(*(void *)v1253 + 8LL))(v1253, v1252);
    }
  }

  uint64_t v1255 = *(void *)(a2 + 2088);
  if (v1255)
  {
    v1256 = operator new(0x30uLL);
    float v1257 = sub_1011851A4((uint64_t)v1256, v1255);
    uint64_t v1258 = *(void *)(a1 + 2088);
    *(void *)(a1 + 2088) = v1259;
    if (v1258) {
      (*(void (**)(uint64_t, float))(*(void *)v1258 + 8LL))(v1258, v1257);
    }
  }

  uint64_t v1260 = *(void *)(a2 + 2080);
  if (v1260)
  {
    v1261 = operator new(0x50uLL);
    uint64_t v1262 = sub_101184848(v1261, v1260);
    uint64_t v1263 = *(void *)(a1 + 2080);
    *(void *)(a1 + 208sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1262;
    if (v1263) {
      (*(void (**)(uint64_t))(*(void *)v1263 + 8LL))(v1263);
    }
  }

  uint64_t v1264 = *(void *)(a2 + 520);
  if (v1264)
  {
    v1265 = operator new(0x18uLL);
    uint64_t v1266 = sub_1010FB608((uint64_t)v1265, v1264);
    uint64_t v1267 = *(void *)(a1 + 520);
    *(void *)(a1 + 52sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1266;
    if (v1267) {
      (*(void (**)(uint64_t))(*(void *)v1267 + 8LL))(v1267);
    }
  }

  uint64_t v1268 = *(void *)(a2 + 160);
  if (v1268)
  {
    v1269 = operator new(0x10uLL);
    v1270 = sub_1010E56A0(v1269, v1268);
    uint64_t v1271 = *(void *)(a1 + 160);
    *(void *)(a1 + 16sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1270;
    if (v1271) {
      (*(void (**)(uint64_t))(*(void *)v1271 + 8LL))(v1271);
    }
  }

  uint64_t v1272 = *(void *)(a2 + 168);
  if (v1272)
  {
    v1273 = operator new(0x10uLL);
    v1274 = sub_1010E5A14(v1273, v1272);
    uint64_t v1275 = *(void *)(a1 + 168);
    *(void *)(a1 + 168) = v1274;
    if (v1275) {
      (*(void (**)(uint64_t))(*(void *)v1275 + 8LL))(v1275);
    }
  }

  uint64_t v1276 = *(void *)(a2 + 152);
  if (v1276)
  {
    v1277 = operator new(0x10uLL);
    v1278 = sub_1010E53B0(v1277, v1276);
    uint64_t v1279 = *(void *)(a1 + 152);
    *(void *)(a1 + 152) = v1278;
    if (v1279) {
      (*(void (**)(uint64_t))(*(void *)v1279 + 8LL))(v1279);
    }
  }

  uint64_t v1280 = *(void *)(a2 + 1064);
  if (v1280)
  {
    v1281 = operator new(0x68uLL);
    float v1282 = sub_101089F80((uint64_t)v1281, v1280);
    uint64_t v1283 = *(void *)(a1 + 1064);
    *(void *)(a1 + 1064) = v1284;
    if (v1283) {
      (*(void (**)(uint64_t, float))(*(void *)v1283 + 8LL))(v1283, v1282);
    }
  }

  uint64_t v1285 = *(void *)(a2 + 1072);
  if (v1285)
  {
    v1286 = operator new(0x78uLL);
    uint64_t v1287 = sub_10108B204((uint64_t)v1286, v1285);
    uint64_t v1288 = *(void *)(a1 + 1072);
    *(void *)(a1 + 1072) = v1287;
    if (v1288) {
      (*(void (**)(uint64_t))(*(void *)v1288 + 8LL))(v1288);
    }
  }

  uint64_t v1289 = *(void *)(a2 + 664);
  if (v1289)
  {
    v1290 = operator new(0x58uLL);
    float v1291 = sub_101105F2C((uint64_t)v1290, v1289);
    uint64_t v1292 = *(void *)(a1 + 664);
    *(void *)(a1 + 664) = v1293;
    if (v1292) {
      (*(void (**)(uint64_t, float))(*(void *)v1292 + 8LL))(v1292, v1291);
    }
  }

  uint64_t v1294 = *(void *)(a2 + 3304);
  if (v1294)
  {
    v1295 = operator new(0x10uLL);
    uint64_t v1296 = sub_101161DC0(v1295, v1294);
    uint64_t v1297 = *(void *)(a1 + 3304);
    *(void *)(a1 + 3304) = v1296;
    if (v1297) {
      (*(void (**)(uint64_t))(*(void *)v1297 + 8LL))(v1297);
    }
  }

  uint64_t v1298 = *(void *)(a2 + 3296);
  if (v1298)
  {
    v1299 = operator new(0x40uLL);
    uint64_t v1300 = sub_10116162C(v1299, v1298);
    uint64_t v1301 = *(void *)(a1 + 3296);
    *(void *)(a1 + 3296) = v1300;
    if (v1301) {
      (*(void (**)(uint64_t))(*(void *)v1301 + 8LL))(v1301);
    }
  }

  uint64_t v1302 = *(void *)(a2 + 200);
  if (v1302)
  {
    v1303 = operator new(0x10uLL);
    v1304 = sub_1010E6EAC(v1303, v1302);
    uint64_t v1305 = *(void *)(a1 + 200);
    *(void *)(a1 + 20sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1304;
    if (v1305) {
      (*(void (**)(uint64_t))(*(void *)v1305 + 8LL))(v1305);
    }
  }

  uint64_t v1306 = *(void *)(a2 + 952);
  if (v1306)
  {
    v1307 = operator new(0x38uLL);
    uint64_t v1308 = sub_1010758EC((uint64_t)v1307, v1306);
    uint64_t v1309 = *(void *)(a1 + 952);
    *(void *)(a1 + 952) = v1308;
    if (v1309) {
      (*(void (**)(uint64_t))(*(void *)v1309 + 8LL))(v1309);
    }
  }

  uint64_t v1310 = *(void *)(a2 + 960);
  if (v1310)
  {
    v1311 = operator new(0x178uLL);
    double v1312 = sub_1010769B8((uint64_t)v1311, v1310);
    uint64_t v1313 = *(void *)(a1 + 960);
    *(void *)(a1 + 96sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1314;
    if (v1313) {
      (*(void (**)(uint64_t, double))(*(void *)v1313 + 8LL))(v1313, v1312);
    }
  }

  uint64_t v1315 = *(void *)(a2 + 968);
  if (v1315)
  {
    v1316 = operator new(0xA8uLL);
    double v1317 = sub_10107A280((uint64_t)v1316, v1315);
    uint64_t v1318 = *(void *)(a1 + 968);
    *(void *)(a1 + 968) = v1319;
    if (v1318) {
      (*(void (**)(uint64_t, double))(*(void *)v1318 + 8LL))(v1318, v1317);
    }
  }

  uint64_t v1320 = *(void *)(a2 + 936);
  if (v1320)
  {
    v1321 = operator new(0xA8uLL);
    float v1322 = sub_101073D08((uint64_t)v1321, v1320);
    uint64_t v1323 = *(void *)(a1 + 936);
    *(void *)(a1 + 936) = v1324;
    if (v1323) {
      (*(void (**)(uint64_t, float))(*(void *)v1323 + 8LL))(v1323, v1322);
    }
  }

  uint64_t v1325 = *(void *)(a2 + 992);
  if (v1325)
  {
    v1326 = operator new(0x58uLL);
    uint64_t v1327 = sub_1010800F0((uint64_t)v1326, v1325);
    uint64_t v1328 = *(void *)(a1 + 992);
    *(void *)(a1 + 992) = v1327;
    if (v1328) {
      (*(void (**)(uint64_t))(*(void *)v1328 + 8LL))(v1328);
    }
  }

  uint64_t v1329 = *(void *)(a2 + 136);
  if (v1329)
  {
    v1330 = operator new(0x30uLL);
    uint64_t v1331 = sub_1010E44EC((uint64_t)v1330, v1329);
    uint64_t v1332 = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = v1331;
    if (v1332) {
      (*(void (**)(uint64_t))(*(void *)v1332 + 8LL))(v1332);
    }
  }

  uint64_t v1333 = *(void *)(a2 + 2680);
  if (v1333)
  {
    v1334 = operator new(0x88uLL);
    uint64_t v1335 = sub_1011A6A4C((uint64_t)v1334, v1333);
    uint64_t v1336 = *(void *)(a1 + 2680);
    *(void *)(a1 + 268sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1335;
    if (v1336) {
      (*(void (**)(uint64_t))(*(void *)v1336 + 8LL))(v1336);
    }
  }

  uint64_t v1337 = *(void *)(a2 + 2672);
  if (v1337)
  {
    v1338 = operator new(0xC8uLL);
    uint64_t v1339 = sub_1011A4C28((uint64_t)v1338, v1337);
    uint64_t v1340 = *(void *)(a1 + 2672);
    *(void *)(a1 + 2672) = v1339;
    if (v1340) {
      (*(void (**)(uint64_t))(*(void *)v1340 + 8LL))(v1340);
    }
  }

  uint64_t v1341 = *(void *)(a2 + 752);
  if (v1341)
  {
    v1342 = operator new(0x18uLL);
    uint64_t v1343 = sub_10110B8B0((uint64_t)v1342, v1341);
    uint64_t v1344 = *(void *)(a1 + 752);
    *(void *)(a1 + 752) = v1343;
    if (v1344) {
      (*(void (**)(uint64_t))(*(void *)v1344 + 8LL))(v1344);
    }
  }

  uint64_t v1345 = *(void *)(a2 + 944);
  if (v1345)
  {
    v1346 = operator new(0x18uLL);
    uint64_t v1347 = sub_1010753AC((uint64_t)v1346, v1345);
    uint64_t v1348 = *(void *)(a1 + 944);
    *(void *)(a1 + 944) = v1347;
    if (v1348) {
      (*(void (**)(uint64_t))(*(void *)v1348 + 8LL))(v1348);
    }
  }

  uint64_t v1349 = *(void *)(a2 + 3352);
  if (v1349)
  {
    v1350 = operator new(0x40uLL);
    uint64_t v1351 = sub_101164574((uint64_t)v1350, v1349);
    uint64_t v1352 = *(void *)(a1 + 3352);
    *(void *)(a1 + 3352) = v1351;
    if (v1352) {
      (*(void (**)(uint64_t))(*(void *)v1352 + 8LL))(v1352);
    }
  }

  uint64_t v1353 = *(void *)(a2 + 184);
  if (v1353)
  {
    v1354 = operator new(0x18uLL);
    float v1355 = sub_1010E6294((uint64_t)v1354, v1353);
    uint64_t v1356 = *(void *)(a1 + 184);
    *(void *)(a1 + 184) = v1357;
    if (v1356) {
      (*(void (**)(uint64_t, float))(*(void *)v1356 + 8LL))(v1356, v1355);
    }
  }

  uint64_t v1358 = *(void *)(a2 + 976);
  if (v1358)
  {
    v1359 = operator new(0x190uLL);
    uint64_t v1360 = sub_10107C8AC((uint64_t)v1359, v1358);
    uint64_t v1361 = *(void *)(a1 + 976);
    *(void *)(a1 + 976) = v1360;
    if (v1361) {
      (*(void (**)(uint64_t))(*(void *)v1361 + 8LL))(v1361);
    }
  }

  uint64_t v1362 = *(void *)(a2 + 1176);
  if (v1362)
  {
    v1363 = operator new(0x60uLL);
    uint64_t v1364 = sub_101092238((uint64_t)v1363, v1362);
    uint64_t v1365 = *(void *)(a1 + 1176);
    *(void *)(a1 + 1176) = v1364;
    if (v1365) {
      (*(void (**)(uint64_t))(*(void *)v1365 + 8LL))(v1365);
    }
  }

  uint64_t v1366 = *(void *)(a2 + 3056);
  if (v1366)
  {
    v1367 = operator new(0x68uLL);
    double v1368 = sub_10114F03C((uint64_t)v1367, v1366);
    uint64_t v1369 = *(void *)(a1 + 3056);
    *(void *)(a1 + 3056) = v1370;
    if (v1369) {
      (*(void (**)(uint64_t, double))(*(void *)v1369 + 8LL))(v1369, v1368);
    }
  }

  uint64_t v1371 = *(void *)(a2 + 1016);
  if (v1371)
  {
    v1372 = operator new(0x30uLL);
    uint64_t v1373 = sub_101086144((uint64_t)v1372, v1371);
    uint64_t v1374 = *(void *)(a1 + 1016);
    *(void *)(a1 + 1016) = v1373;
    if (v1374) {
      (*(void (**)(uint64_t))(*(void *)v1374 + 8LL))(v1374);
    }
  }

  uint64_t v1375 = *(void *)(a2 + 264);
  if (v1375)
  {
    v1376 = operator new(0x40uLL);
    uint64_t v1377 = sub_1010ED2B0((uint64_t)v1376, v1375);
    uint64_t v1378 = *(void *)(a1 + 264);
    *(void *)(a1 + 264) = v1377;
    if (v1378) {
      (*(void (**)(uint64_t))(*(void *)v1378 + 8LL))(v1378);
    }
  }

  uint64_t v1379 = *(void *)(a2 + 2864);
  if (v1379)
  {
    v1380 = operator new(0x30uLL);
    float v1381 = sub_1011419D0((uint64_t)v1380, v1379);
    uint64_t v1382 = *(void *)(a1 + 2864);
    *(void *)(a1 + 2864) = v1383;
    if (v1382) {
      (*(void (**)(uint64_t, float))(*(void *)v1382 + 8LL))(v1382, v1381);
    }
  }

  uint64_t v1384 = *(void *)(a2 + 2888);
  if (v1384)
  {
    v1385 = operator new(0x18uLL);
    uint64_t v1386 = sub_101142838((uint64_t)v1385, v1384);
    uint64_t v1387 = *(void *)(a1 + 2888);
    *(void *)(a1 + 2888) = v1386;
    if (v1387) {
      (*(void (**)(uint64_t))(*(void *)v1387 + 8LL))(v1387);
    }
  }

  uint64_t v1388 = *(void *)(a2 + 2872);
  if (v1388)
  {
    v1389 = operator new(0x20uLL);
    float v1390 = sub_101142000((uint64_t)v1389, v1388);
    uint64_t v1391 = *(void *)(a1 + 2872);
    *(void *)(a1 + 2872) = v1392;
    if (v1391) {
      (*(void (**)(uint64_t, float))(*(void *)v1391 + 8LL))(v1391, v1390);
    }
  }

  uint64_t v1393 = *(void *)(a2 + 2880);
  if (v1393)
  {
    v1394 = operator new(0x20uLL);
    float v1395 = sub_101142460((uint64_t)v1394, v1393);
    uint64_t v1396 = *(void *)(a1 + 2880);
    *(void *)(a1 + 288sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1397;
    if (v1396) {
      (*(void (**)(uint64_t, float))(*(void *)v1396 + 8LL))(v1396, v1395);
    }
  }

  uint64_t v1398 = *(void *)(a2 + 2928);
  if (v1398)
  {
    v1399 = operator new(0x18uLL);
    double v1400 = sub_101145ED8((uint64_t)v1399, v1398);
    uint64_t v1401 = *(void *)(a1 + 2928);
    *(void *)(a1 + 2928) = v1402;
    if (v1401) {
      (*(void (**)(uint64_t, double))(*(void *)v1401 + 8LL))(v1401, v1400);
    }
  }

  uint64_t v1403 = *(void *)(a2 + 984);
  if (v1403)
  {
    v1404 = operator new(0x50uLL);
    float v1405 = sub_10107F4A4((uint64_t)v1404, v1403);
    uint64_t v1406 = *(void *)(a1 + 984);
    *(void *)(a1 + 984) = v1407;
    if (v1406) {
      (*(void (**)(uint64_t, float))(*(void *)v1406 + 8LL))(v1406, v1405);
    }
  }

  uint64_t v1408 = *(void *)(a2 + 1456);
  if (v1408)
  {
    v1409 = operator new(0x18uLL);
    uint64_t v1410 = sub_1010A2390((uint64_t)v1409, v1408);
    uint64_t v1411 = *(void *)(a1 + 1456);
    *(void *)(a1 + 1456) = v1410;
    if (v1411) {
      (*(void (**)(uint64_t))(*(void *)v1411 + 8LL))(v1411);
    }
  }

  uint64_t v1412 = *(void *)(a2 + 2560);
  if (v1412)
  {
    v1413 = operator new(0x20uLL);
    uint64_t v1414 = sub_1011A049C(v1413, v1412);
    uint64_t v1415 = *(void *)(a1 + 2560);
    *(void *)(a1 + 256sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1414;
    if (v1415) {
      (*(void (**)(uint64_t))(*(void *)v1415 + 8LL))(v1415);
    }
  }

  uint64_t v1416 = *(void *)(a2 + 1992);
  if (v1416)
  {
    v1417 = operator new(0x28uLL);
    uint64_t v1418 = sub_10117BDEC((uint64_t)v1417, v1416);
    uint64_t v1419 = *(void *)(a1 + 1992);
    *(void *)(a1 + 1992) = v1418;
    if (v1419) {
      (*(void (**)(uint64_t))(*(void *)v1419 + 8LL))(v1419);
    }
  }

  uint64_t v1420 = *(void *)(a2 + 928);
  if (v1420)
  {
    v1421 = operator new(0x28uLL);
    float v1422 = sub_1010731D0((uint64_t)v1421, v1420);
    uint64_t v1423 = *(void *)(a1 + 928);
    *(void *)(a1 + 928) = v1424;
    if (v1423) {
      (*(void (**)(uint64_t, float))(*(void *)v1423 + 8LL))(v1423, v1422);
    }
  }

  uint64_t v1425 = *(void *)(a2 + 1824);
  if (v1425)
  {
    v1426 = operator new(0x30uLL);
    float v1427 = sub_1010DC264((uint64_t)v1426, v1425);
    uint64_t v1428 = *(void *)(a1 + 1824);
    *(void *)(a1 + 1824) = v1429;
    if (v1428) {
      (*(void (**)(uint64_t, float))(*(void *)v1428 + 8LL))(v1428, v1427);
    }
  }

  uint64_t v1430 = *(void *)(a2 + 816);
  if (v1430)
  {
    v1431 = operator new(0x18uLL);
    uint64_t v1432 = sub_101114AD8((uint64_t)v1431, v1430);
    uint64_t v1433 = *(void *)(a1 + 816);
    *(void *)(a1 + 816) = v1432;
    if (v1433) {
      (*(void (**)(uint64_t))(*(void *)v1433 + 8LL))(v1433);
    }
  }

  uint64_t v1434 = *(void *)(a2 + 800);
  if (v1434)
  {
    v1435 = operator new(0x20uLL);
    uint64_t v1436 = sub_101112064((uint64_t)v1435, v1434);
    uint64_t v1437 = *(void *)(a1 + 800);
    *(void *)(a1 + 80sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1436;
    if (v1437) {
      (*(void (**)(uint64_t))(*(void *)v1437 + 8LL))(v1437);
    }
  }

  uint64_t v1438 = *(void *)(a2 + 808);
  if (v1438)
  {
    v1439 = operator new(0xB0uLL);
    uint64_t v1440 = sub_1011128EC((uint64_t)v1439, v1438);
    uint64_t v1441 = *(void *)(a1 + 808);
    *(void *)(a1 + 808) = v1440;
    if (v1441) {
      (*(void (**)(uint64_t))(*(void *)v1441 + 8LL))(v1441);
    }
  }

  uint64_t v1442 = *(void *)(a2 + 792);
  if (v1442)
  {
    v1443 = operator new(0x80uLL);
    float v1444 = sub_101110ED4((uint64_t)v1443, v1442);
    uint64_t v1445 = *(void *)(a1 + 792);
    *(void *)(a1 + 792) = v1446;
    if (v1445) {
      (*(void (**)(uint64_t, float))(*(void *)v1445 + 8LL))(v1445, v1444);
    }
  }

  uint64_t v1447 = *(void *)(a2 + 2144);
  if (v1447)
  {
    v1448 = operator new(0x18uLL);
    uint64_t v1449 = sub_101189FE8((uint64_t)v1448, v1447);
    uint64_t v1450 = *(void *)(a1 + 2144);
    *(void *)(a1 + 2144) = v1449;
    if (v1450) {
      (*(void (**)(uint64_t))(*(void *)v1450 + 8LL))(v1450);
    }
  }

  uint64_t v1451 = *(void *)(a2 + 1528);
  if (v1451)
  {
    v1452 = operator new(0x70uLL);
    float v1453 = sub_1010A9FC8((uint64_t)v1452, v1451);
    uint64_t v1454 = *(void *)(a1 + 1528);
    *(void *)(a1 + 1528) = v1455;
    if (v1454) {
      (*(void (**)(uint64_t, float))(*(void *)v1454 + 8LL))(v1454, v1453);
    }
  }

  uint64_t v1456 = *(void *)(a2 + 1536);
  if (v1456)
  {
    v1457 = operator new(0xA0uLL);
    float v1458 = sub_1010AB508((uint64_t)v1457, v1456);
    uint64_t v1459 = *(void *)(a1 + 1536);
    *(void *)(a1 + 1536) = v1460;
    if (v1459) {
      (*(void (**)(uint64_t, float))(*(void *)v1459 + 8LL))(v1459, v1458);
    }
  }

  uint64_t v1461 = *(void *)(a2 + 1544);
  if (v1461)
  {
    v1462 = operator new(0x88uLL);
    uint64_t v1463 = sub_1010ACF80((uint64_t)v1462, v1461);
    uint64_t v1464 = *(void *)(a1 + 1544);
    *(void *)(a1 + 1544) = v1463;
    if (v1464) {
      (*(void (**)(uint64_t))(*(void *)v1464 + 8LL))(v1464);
    }
  }

  uint64_t v1465 = *(void *)(a2 + 1552);
  if (v1465)
  {
    v1466 = operator new(0x148uLL);
    float v1467 = sub_1010AED8C((uint64_t)v1466, v1465);
    uint64_t v1468 = *(void *)(a1 + 1552);
    *(void *)(a1 + 1552) = v1469;
    if (v1468) {
      (*(void (**)(uint64_t, float))(*(void *)v1468 + 8LL))(v1468, v1467);
    }
  }

  uint64_t v1470 = *(void *)(a2 + 1568);
  if (v1470)
  {
    v1471 = operator new(0xB0uLL);
    uint64_t v1472 = sub_1010B3860((uint64_t)v1471, v1470);
    uint64_t v1473 = *(void *)(a1 + 1568);
    *(void *)(a1 + 1568) = v1472;
    if (v1473) {
      (*(void (**)(uint64_t))(*(void *)v1473 + 8LL))(v1473);
    }
  }

  uint64_t v1474 = *(void *)(a2 + 1664);
  if (v1474)
  {
    v1475 = operator new(0x18uLL);
    uint64_t v1476 = sub_1010CDFB4((uint64_t)v1475, v1474);
    uint64_t v1477 = *(void *)(a1 + 1664);
    *(void *)(a1 + 1664) = v1476;
    if (v1477) {
      (*(void (**)(uint64_t))(*(void *)v1477 + 8LL))(v1477);
    }
  }

  uint64_t v1478 = *(void *)(a2 + 1672);
  if (v1478)
  {
    v1479 = operator new(0x58uLL);
    double v1480 = sub_1010CE3C0((uint64_t)v1479, v1478);
    uint64_t v1481 = *(void *)(a1 + 1672);
    *(void *)(a1 + 1672) = v1482;
    if (v1481) {
      (*(void (**)(uint64_t, double))(*(void *)v1481 + 8LL))(v1481, v1480);
    }
  }

  uint64_t v1483 = *(void *)(a2 + 1312);
  if (v1483)
  {
    v1484 = operator new(0x10uLL);
    uint64_t v1485 = sub_101099198((uint64_t)v1484, v1483);
    uint64_t v1486 = *(void *)(a1 + 1312);
    *(void *)(a1 + 1312) = v1485;
    if (v1486) {
      (*(void (**)(uint64_t))(*(void *)v1486 + 8LL))(v1486);
    }
  }

  uint64_t v1487 = *(void *)(a2 + 1304);
  if (v1487)
  {
    v1488 = operator new(0x10uLL);
    uint64_t v1489 = sub_101098EA8((uint64_t)v1488, v1487);
    uint64_t v1490 = *(void *)(a1 + 1304);
    *(void *)(a1 + 1304) = v1489;
    if (v1490) {
      (*(void (**)(uint64_t))(*(void *)v1490 + 8LL))(v1490);
    }
  }

  uint64_t v1491 = *(void *)(a2 + 1576);
  if (v1491)
  {
    v1492 = operator new(0x48uLL);
    uint64_t v1493 = sub_1010B5458((uint64_t)v1492, v1491);
    uint64_t v1494 = *(void *)(a1 + 1576);
    *(void *)(a1 + 1576) = v1493;
    if (v1494) {
      (*(void (**)(uint64_t))(*(void *)v1494 + 8LL))(v1494);
    }
  }

  uint64_t v1495 = *(void *)(a2 + 1584);
  if (v1495)
  {
    v1496 = operator new(0x128uLL);
    float v1497 = sub_1010B6A6C((uint64_t)v1496, v1495);
    uint64_t v1498 = *(void *)(a1 + 1584);
    *(void *)(a1 + 1584) = v1499;
    if (v1498) {
      (*(void (**)(uint64_t, float))(*(void *)v1498 + 8LL))(v1498, v1497);
    }
  }

  uint64_t v1500 = *(void *)(a2 + 1592);
  if (v1500)
  {
    v1501 = operator new(0x20uLL);
    uint64_t v1502 = sub_1010B9520((uint64_t)v1501, v1500);
    uint64_t v1503 = *(void *)(a1 + 1592);
    *(void *)(a1 + 1592) = v1502;
    if (v1503) {
      (*(void (**)(uint64_t))(*(void *)v1503 + 8LL))(v1503);
    }
  }

  uint64_t v1504 = *(void *)(a2 + 1600);
  if (v1504)
  {
    v1505 = operator new(0x20uLL);
    uint64_t v1506 = sub_1010B9B98((uint64_t)v1505, v1504);
    uint64_t v1507 = *(void *)(a1 + 1600);
    *(void *)(a1 + 160sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1506;
    if (v1507) {
      (*(void (**)(uint64_t))(*(void *)v1507 + 8LL))(v1507);
    }
  }

  uint64_t v1508 = *(void *)(a2 + 1608);
  if (v1508)
  {
    v1509 = operator new(0x148uLL);
    float v1510 = sub_1010BB26C((uint64_t)v1509, v1508);
    uint64_t v1511 = *(void *)(a1 + 1608);
    *(void *)(a1 + 1608) = v1512;
    if (v1511) {
      (*(void (**)(uint64_t, float))(*(void *)v1511 + 8LL))(v1511, v1510);
    }
  }

  uint64_t v1513 = *(void *)(a2 + 1624);
  if (v1513)
  {
    v1514 = operator new(0x20uLL);
    uint64_t v1515 = sub_1010BFAB4((uint64_t)v1514, v1513);
    uint64_t v1516 = *(void *)(a1 + 1624);
    *(void *)(a1 + 1624) = v1515;
    if (v1516) {
      (*(void (**)(uint64_t))(*(void *)v1516 + 8LL))(v1516);
    }
  }

  uint64_t v1517 = *(void *)(a2 + 1632);
  if (v1517)
  {
    v1518 = operator new(0x60uLL);
    uint64_t v1519 = sub_1010C02B4((uint64_t)v1518, v1517);
    uint64_t v1520 = *(void *)(a1 + 1632);
    *(void *)(a1 + 1632) = v1519;
    if (v1520) {
      (*(void (**)(uint64_t))(*(void *)v1520 + 8LL))(v1520);
    }
  }

  uint64_t v1521 = *(void *)(a2 + 1640);
  if (v1521)
  {
    v1522 = operator new(0x178uLL);
    float v1523 = sub_1010C1F74((uint64_t)v1522, v1521);
    uint64_t v1524 = *(void *)(a1 + 1640);
    *(void *)(a1 + 164sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1525;
    if (v1524) {
      (*(void (**)(uint64_t, float))(*(void *)v1524 + 8LL))(v1524, v1523);
    }
  }

  uint64_t v1526 = *(void *)(a2 + 1656);
  if (v1526)
  {
    v1527 = operator new(0xB8uLL);
    float v1528 = sub_1010CC1E8((uint64_t)v1527, v1526);
    uint64_t v1529 = *(void *)(a1 + 1656);
    *(void *)(a1 + 1656) = v1530;
    if (v1529) {
      (*(void (**)(uint64_t, float))(*(void *)v1529 + 8LL))(v1529, v1528);
    }
  }

  uint64_t v1531 = *(void *)(a2 + 1648);
  if (v1531)
  {
    v1532 = operator new(0xD8uLL);
    uint64_t v1533 = sub_1010C87BC((uint64_t)v1532, v1531);
    uint64_t v1534 = *(void *)(a1 + 1648);
    *(void *)(a1 + 1648) = v1533;
    if (v1534) {
      (*(void (**)(uint64_t))(*(void *)v1534 + 8LL))(v1534);
    }
  }

  uint64_t v1535 = *(void *)(a2 + 768);
  if (v1535)
  {
    v1536 = operator new(0x20uLL);
    float v1537 = sub_10110D544((uint64_t)v1536, v1535);
    uint64_t v1538 = *(void *)(a1 + 768);
    *(void *)(a1 + 768) = v1539;
    if (v1538) {
      (*(void (**)(uint64_t, float))(*(void *)v1538 + 8LL))(v1538, v1537);
    }
  }

  uint64_t v1540 = *(void *)(a2 + 3224);
  if (v1540)
  {
    v1541 = operator new(0x18uLL);
    uint64_t v1542 = sub_10115CEC0((uint64_t)v1541, v1540);
    uint64_t v1543 = *(void *)(a1 + 3224);
    *(void *)(a1 + 3224) = v1542;
    if (v1543) {
      (*(void (**)(uint64_t))(*(void *)v1543 + 8LL))(v1543);
    }
  }

  uint64_t v1544 = *(void *)(a2 + 1296);
  if (v1544)
  {
    v1545 = operator new(0x58uLL);
    uint64_t v1546 = sub_1010986DC((uint64_t)v1545, v1544);
    uint64_t v1547 = *(void *)(a1 + 1296);
    *(void *)(a1 + 1296) = v1546;
    if (v1547) {
      (*(void (**)(uint64_t))(*(void *)v1547 + 8LL))(v1547);
    }
  }

  uint64_t v1548 = *(void *)(a2 + 3232);
  if (v1548)
  {
    v1549 = operator new(0x78uLL);
    float v1550 = sub_10115D56C((uint64_t)v1549, v1548);
    uint64_t v1551 = *(void *)(a1 + 3232);
    *(void *)(a1 + 3232) = v1552;
    if (v1551) {
      (*(void (**)(uint64_t, float))(*(void *)v1551 + 8LL))(v1551, v1550);
    }
  }

  uint64_t v1553 = *(void *)(a2 + 3240);
  if (v1553)
  {
    v1554 = operator new(0x48uLL);
    float v1555 = sub_10115E570((uint64_t)v1554, v1553);
    uint64_t v1556 = *(void *)(a1 + 3240);
    *(void *)(a1 + 324sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1557;
    if (v1556) {
      (*(void (**)(uint64_t, float))(*(void *)v1556 + 8LL))(v1556, v1555);
    }
  }

  uint64_t v1558 = *(void *)(a2 + 2728);
  if (v1558)
  {
    v1559 = operator new(0x48uLL);
    double v1560 = sub_1011AAF28((uint64_t)v1559, v1558);
    uint64_t v1561 = *(void *)(a1 + 2728);
    *(void *)(a1 + 2728) = v1562;
    if (v1561) {
      (*(void (**)(uint64_t, double))(*(void *)v1561 + 8LL))(v1561, v1560);
    }
  }

  uint64_t v1563 = *(void *)(a2 + 2736);
  if (v1563)
  {
    v1564 = operator new(0x80uLL);
    double v1565 = sub_1011AB5F4((uint64_t)v1564, v1563);
    uint64_t v1566 = *(void *)(a1 + 2736);
    *(void *)(a1 + 2736) = v1567;
    if (v1566) {
      (*(void (**)(uint64_t, double))(*(void *)v1566 + 8LL))(v1566, v1565);
    }
  }

  uint64_t v1568 = *(void *)(a2 + 2760);
  if (v1568)
  {
    v1569 = operator new(0x38uLL);
    double v1570 = sub_1011AEAF8((uint64_t)v1569, v1568);
    uint64_t v1571 = *(void *)(a1 + 2760);
    *(void *)(a1 + 276sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1572;
    if (v1571) {
      (*(void (**)(uint64_t, double))(*(void *)v1571 + 8LL))(v1571, v1570);
    }
  }

  uint64_t v1573 = *(void *)(a2 + 2800);
  if (v1573)
  {
    v1574 = operator new(0xD8uLL);
    double v1575 = sub_10113B700((uint64_t)v1574, v1573);
    uint64_t v1576 = *(void *)(a1 + 2800);
    *(void *)(a1 + 280sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1577;
    if (v1576) {
      (*(void (**)(uint64_t, double))(*(void *)v1576 + 8LL))(v1576, v1575);
    }
  }

  uint64_t v1578 = *(void *)(a2 + 2784);
  if (v1578)
  {
    v1579 = operator new(0x30uLL);
    double v1580 = sub_1011B107C((uint64_t)v1579, v1578);
    uint64_t v1581 = *(void *)(a1 + 2784);
    *(void *)(a1 + 2784) = v1582;
    if (v1581) {
      (*(void (**)(uint64_t, double))(*(void *)v1581 + 8LL))(v1581, v1580);
    }
  }

  uint64_t v1583 = *(void *)(a2 + 1560);
  if (v1583)
  {
    v1584 = operator new(0xD0uLL);
    uint64_t v1585 = sub_1010B1998((uint64_t)v1584, v1583);
    uint64_t v1586 = *(void *)(a1 + 1560);
    *(void *)(a1 + 156sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1585;
    if (v1586) {
      (*(void (**)(uint64_t))(*(void *)v1586 + 8LL))(v1586);
    }
  }

  uint64_t v1587 = *(void *)(a2 + 1688);
  if (v1587)
  {
    v1588 = operator new(0x78uLL);
    uint64_t v1589 = sub_1010CF7B0((uint64_t)v1588, v1587);
    uint64_t v1590 = *(void *)(a1 + 1688);
    *(void *)(a1 + 1688) = v1589;
    if (v1590) {
      (*(void (**)(uint64_t))(*(void *)v1590 + 8LL))(v1590);
    }
  }

  uint64_t v1591 = *(void *)(a2 + 2776);
  if (v1591)
  {
    v1592 = operator new(0x90uLL);
    double v1593 = sub_1011B0580((uint64_t)v1592, v1591);
    uint64_t v1594 = *(void *)(a1 + 2776);
    *(void *)(a1 + 2776) = v1595;
    if (v1594) {
      (*(void (**)(uint64_t, double))(*(void *)v1594 + 8LL))(v1594, v1593);
    }
  }

  uint64_t v1596 = *(void *)(a2 + 1448);
  if (v1596)
  {
    v1597 = operator new(0x88uLL);
    float v1598 = sub_101099F0C((uint64_t)v1597, v1596);
    uint64_t v1599 = *(void *)(a1 + 1448);
    *(void *)(a1 + 1448) = v1600;
    if (v1599) {
      (*(void (**)(uint64_t, float))(*(void *)v1599 + 8LL))(v1599, v1598);
    }
  }

  uint64_t v1601 = *(void *)(a2 + 1616);
  if (v1601)
  {
    v1602 = operator new(0x48uLL);
    uint64_t v1603 = sub_1010BE800((uint64_t)v1602, v1601);
    uint64_t v1604 = *(void *)(a1 + 1616);
    *(void *)(a1 + 1616) = v1603;
    if (v1604) {
      (*(void (**)(uint64_t))(*(void *)v1604 + 8LL))(v1604);
    }
  }

  uint64_t v1605 = *(void *)(a2 + 1680);
  if (v1605)
  {
    v1606 = operator new(0x70uLL);
    double v1607 = sub_1010CECA4((uint64_t)v1606, v1605);
    uint64_t v1608 = *(void *)(a1 + 1680);
    *(void *)(a1 + 168sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1609;
    if (v1608) {
      (*(void (**)(uint64_t, double))(*(void *)v1608 + 8LL))(v1608, v1607);
    }
  }

  uint64_t v1610 = *(void *)(a2 + 1280);
  if (v1610)
  {
    v1611 = operator new(0x30uLL);
    float v1612 = sub_101096DB8((uint64_t)v1611, v1610);
    uint64_t v1613 = *(void *)(a1 + 1280);
    *(void *)(a1 + 128sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1614;
    if (v1613) {
      (*(void (**)(uint64_t, float))(*(void *)v1613 + 8LL))(v1613, v1612);
    }
  }

  uint64_t v1615 = *(void *)(a2 + 592);
  if (v1615)
  {
    v1616 = operator new(0xB0uLL);
    float v1617 = sub_10110006C((uint64_t)v1616, v1615);
    uint64_t v1618 = *(void *)(a1 + 592);
    *(void *)(a1 + 592) = v1619;
    if (v1618) {
      (*(void (**)(uint64_t, float))(*(void *)v1618 + 8LL))(v1618, v1617);
    }
  }

  uint64_t v1620 = *(void *)(a2 + 2336);
  if (v1620)
  {
    v1621 = operator new(0x40uLL);
    double v1622 = sub_1011951A4((uint64_t)v1621, v1620);
    uint64_t v1623 = *(void *)(a1 + 2336);
    *(void *)(a1 + 2336) = v1624;
    if (v1623) {
      (*(void (**)(uint64_t, double))(*(void *)v1623 + 8LL))(v1623, v1622);
    }
  }

  uint64_t v1625 = *(void *)(a2 + 688);
  if (v1625)
  {
    v1626 = operator new(0x20uLL);
    uint64_t v1627 = sub_101108014((uint64_t)v1626, v1625);
    uint64_t v1628 = *(void *)(a1 + 688);
    *(void *)(a1 + 688) = v1627;
    if (v1628) {
      (*(void (**)(uint64_t))(*(void *)v1628 + 8LL))(v1628);
    }
  }

  uint64_t v1629 = *(void *)(a2 + 856);
  if (v1629)
  {
    v1630 = operator new(0x60uLL);
    uint64_t v1631 = sub_101116684((uint64_t)v1630, v1629);
    uint64_t v1632 = *(void *)(a1 + 856);
    *(void *)(a1 + 856) = v1631;
    if (v1632) {
      (*(void (**)(uint64_t))(*(void *)v1632 + 8LL))(v1632);
    }
  }

  uint64_t v1633 = *(void *)(a2 + 3200);
  if (v1633)
  {
    v1634 = operator new(0x30uLL);
    double v1635 = sub_10115AF54((uint64_t)v1634, v1633);
    uint64_t v1636 = *(void *)(a1 + 3200);
    *(void *)(a1 + 320sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1637;
    if (v1636) {
      (*(void (**)(uint64_t, double))(*(void *)v1636 + 8LL))(v1636, v1635);
    }
  }

  uint64_t v1638 = *(void *)(a2 + 2608);
  if (v1638)
  {
    v1639 = operator new(0x50uLL);
    uint64_t v1640 = sub_1011A2A80(v1639, v1638);
    uint64_t v1641 = *(void *)(a1 + 2608);
    *(void *)(a1 + 2608) = v1640;
    if (v1641) {
      (*(void (**)(uint64_t))(*(void *)v1641 + 8LL))(v1641);
    }
  }

  uint64_t v1642 = *(void *)(a2 + 1696);
  if (v1642)
  {
    v1643 = operator new(0x40uLL);
    uint64_t v1644 = sub_1010D0918((uint64_t)v1643, v1642);
    uint64_t v1645 = *(void *)(a1 + 1696);
    *(void *)(a1 + 1696) = v1644;
    if (v1645) {
      (*(void (**)(uint64_t))(*(void *)v1645 + 8LL))(v1645);
    }
  }

  uint64_t v1646 = *(void *)(a2 + 3344);
  if (v1646)
  {
    v1647 = operator new(0x58uLL);
    uint64_t v1648 = sub_1011635B8((uint64_t)v1647, v1646);
    uint64_t v1649 = *(void *)(a1 + 3344);
    *(void *)(a1 + 3344) = v1648;
    if (v1649) {
      (*(void (**)(uint64_t))(*(void *)v1649 + 8LL))(v1649);
    }
  }

  uint64_t v1650 = *(void *)(a2 + 1712);
  if (v1650)
  {
    v1651 = operator new(0x48uLL);
    uint64_t v1652 = sub_1010D1BEC((uint64_t)v1651, v1650);
    uint64_t v1653 = *(void *)(a1 + 1712);
    *(void *)(a1 + 1712) = v1652;
    if (v1653) {
      (*(void (**)(uint64_t))(*(void *)v1653 + 8LL))(v1653);
    }
  }

  uint64_t v1654 = *(void *)(a2 + 2792);
  if (v1654)
  {
    v1655 = operator new(0xD8uLL);
    uint64_t v1656 = sub_1011B173C((uint64_t)v1655, v1654);
    uint64_t v1657 = *(void *)(a1 + 2792);
    *(void *)(a1 + 2792) = v1656;
    if (v1657) {
      (*(void (**)(uint64_t))(*(void *)v1657 + 8LL))(v1657);
    }
  }

  uint64_t v1658 = *(void *)(a2 + 3096);
  if (v1658)
  {
    v1659 = operator new(0x40uLL);
    float v1660 = sub_10115105C((uint64_t)v1659, v1658);
    uint64_t v1661 = *(void *)(a1 + 3096);
    *(void *)(a1 + 3096) = v1662;
    if (v1661) {
      (*(void (**)(uint64_t, float))(*(void *)v1661 + 8LL))(v1661, v1660);
    }
  }

  uint64_t v1663 = *(void *)(a2 + 2312);
  if (v1663)
  {
    v1664 = operator new(0x40uLL);
    uint64_t v1665 = sub_101193944((uint64_t)v1664, v1663);
    uint64_t v1666 = *(void *)(a1 + 2312);
    *(void *)(a1 + 2312) = v1665;
    if (v1666) {
      (*(void (**)(uint64_t))(*(void *)v1666 + 8LL))(v1666);
    }
  }

  uint64_t v1667 = *(void *)(a2 + 1896);
  if (v1667)
  {
    v1668 = operator new(0x18uLL);
    uint64_t v1669 = sub_101173E94((uint64_t)v1668, v1667);
    uint64_t v1670 = *(void *)(a1 + 1896);
    *(void *)(a1 + 1896) = v1669;
    if (v1670) {
      (*(void (**)(uint64_t))(*(void *)v1670 + 8LL))(v1670);
    }
  }

  uint64_t v1671 = *(void *)(a2 + 2264);
  if (v1671)
  {
    v1672 = operator new(0x38uLL);
    uint64_t v1673 = sub_10118F464(v1672, v1671);
    uint64_t v1674 = *(void *)(a1 + 2264);
    *(void *)(a1 + 2264) = v1673;
    if (v1674) {
      (*(void (**)(uint64_t))(*(void *)v1674 + 8LL))(v1674);
    }
  }

  uint64_t v1675 = *(void *)(a2 + 2272);
  if (v1675)
  {
    v1676 = operator new(0x38uLL);
    uint64_t v1677 = sub_10118FB30(v1676, v1675);
    uint64_t v1678 = *(void *)(a1 + 2272);
    *(void *)(a1 + 2272) = v1677;
    if (v1678) {
      (*(void (**)(uint64_t))(*(void *)v1678 + 8LL))(v1678);
    }
  }

  uint64_t v1679 = *(void *)(a2 + 2280);
  if (v1679)
  {
    v1680 = operator new(0x28uLL);
    double v1681 = sub_101190234((uint64_t)v1680, v1679);
    uint64_t v1682 = *(void *)(a1 + 2280);
    *(void *)(a1 + 228sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1683;
    if (v1682) {
      (*(void (**)(uint64_t, double))(*(void *)v1682 + 8LL))(v1682, v1681);
    }
  }

  uint64_t v1684 = *(void *)(a2 + 2160);
  if (v1684)
  {
    v1685 = operator new(0x28uLL);
    double v1686 = sub_10118A728((uint64_t)v1685, v1684);
    uint64_t v1687 = *(void *)(a1 + 2160);
    *(void *)(a1 + 216sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1688;
    if (v1687) {
      (*(void (**)(uint64_t, double))(*(void *)v1687 + 8LL))(v1687, v1686);
    }
  }

  uint64_t v1689 = *(void *)(a2 + 2296);
  if (v1689)
  {
    v1690 = operator new(0x38uLL);
    double v1691 = sub_101190B64((uint64_t)v1690, v1689);
    uint64_t v1692 = *(void *)(a1 + 2296);
    *(void *)(a1 + 2296) = v1693;
    if (v1692) {
      (*(void (**)(uint64_t, double))(*(void *)v1692 + 8LL))(v1692, v1691);
    }
  }

  uint64_t v1694 = *(void *)(a2 + 1816);
  if (v1694)
  {
    v1695 = operator new(0x38uLL);
    double v1696 = sub_1010D29F8((uint64_t)v1695, v1694);
    uint64_t v1697 = *(void *)(a1 + 1816);
    *(void *)(a1 + 1816) = v1698;
    if (v1697) {
      (*(void (**)(uint64_t, double))(*(void *)v1697 + 8LL))(v1697, v1696);
    }
  }

  uint64_t v1699 = *(void *)(a2 + 3208);
  if (v1699)
  {
    v1700 = operator new(0x40uLL);
    double v1701 = sub_10115C350((uint64_t)v1700, v1699);
    uint64_t v1702 = *(void *)(a1 + 3208);
    *(void *)(a1 + 3208) = v1703;
    if (v1702) {
      (*(void (**)(uint64_t, double))(*(void *)v1702 + 8LL))(v1702, v1701);
    }
  }

  uint64_t v1704 = *(void *)(a2 + 2232);
  if (v1704)
  {
    v1705 = operator new(0x18uLL);
    float v1706 = sub_10118E2C4((uint64_t)v1705, v1704);
    uint64_t v1707 = *(void *)(a1 + 2232);
    *(void *)(a1 + 2232) = v1708;
    if (v1707) {
      (*(void (**)(uint64_t, float))(*(void *)v1707 + 8LL))(v1707, v1706);
    }
  }

  uint64_t v1709 = *(void *)(a2 + 2240);
  if (v1709)
  {
    v1710 = operator new(0x48uLL);
    uint64_t v1711 = sub_10118E764((uint64_t)v1710, v1709);
    uint64_t v1712 = *(void *)(a1 + 2240);
    *(void *)(a1 + 224sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1711;
    if (v1712) {
      (*(void (**)(uint64_t))(*(void *)v1712 + 8LL))(v1712);
    }
  }

  uint64_t v1713 = *(void *)(a2 + 3192);
  if (v1713)
  {
    v1714 = operator new(0x40uLL);
    double v1715 = sub_101155F3C((uint64_t)v1714, v1713);
    uint64_t v1716 = *(void *)(a1 + 3192);
    *(void *)(a1 + 3192) = v1717;
    if (v1716) {
      (*(void (**)(uint64_t, double))(*(void *)v1716 + 8LL))(v1716, v1715);
    }
  }

  uint64_t v1718 = *(void *)(a2 + 3104);
  if (v1718)
  {
    v1719 = operator new(0x28uLL);
    double v1720 = sub_101151ABC((uint64_t)v1719, v1718);
    uint64_t v1721 = *(void *)(a1 + 3104);
    *(void *)(a1 + 3104) = v1722;
    if (v1721) {
      (*(void (**)(uint64_t, double))(*(void *)v1721 + 8LL))(v1721, v1720);
    }
  }

  uint64_t v1723 = *(void *)(a2 + 824);
  if (v1723)
  {
    v1724 = operator new(0xB0uLL);
    uint64_t v1725 = sub_10110E1E8((uint64_t)v1724, v1723);
    uint64_t v1726 = *(void *)(a1 + 824);
    *(void *)(a1 + 824) = v1725;
    if (v1726) {
      (*(void (**)(uint64_t))(*(void *)v1726 + 8LL))(v1726);
    }
  }

  uint64_t v1727 = *(void *)(a2 + 1768);
  if (v1727)
  {
    v1728 = operator new(0x68uLL);
    uint64_t v1729 = sub_1010D8970((uint64_t)v1728, v1727);
    uint64_t v1730 = *(void *)(a1 + 1768);
    *(void *)(a1 + 1768) = v1729;
    if (v1730) {
      (*(void (**)(uint64_t))(*(void *)v1730 + 8LL))(v1730);
    }
  }

  uint64_t v1731 = *(void *)(a2 + 2856);
  if (v1731)
  {
    v1732 = operator new(0x20uLL);
    uint64_t v1733 = sub_101141274(v1732, v1731);
    uint64_t v1734 = *(void *)(a1 + 2856);
    *(void *)(a1 + 2856) = v1733;
    if (v1734) {
      (*(void (**)(uint64_t))(*(void *)v1734 + 8LL))(v1734);
    }
  }

  uint64_t v1735 = *(void *)(a2 + 2224);
  if (v1735)
  {
    v1736 = operator new(0x70uLL);
    double v1737 = sub_10118D650((uint64_t)v1736, v1735);
    uint64_t v1738 = *(void *)(a1 + 2224);
    *(void *)(a1 + 2224) = v1739;
    if (v1738) {
      (*(void (**)(uint64_t, double))(*(void *)v1738 + 8LL))(v1738, v1737);
    }
  }

  uint64_t v1740 = *(void *)(a2 + 2176);
  if (v1740)
  {
    v1741 = operator new(0x28uLL);
    double v1742 = sub_10118AFE8((uint64_t)v1741, v1740);
    uint64_t v1743 = *(void *)(a1 + 2176);
    *(void *)(a1 + 2176) = v1744;
    if (v1743) {
      (*(void (**)(uint64_t, double))(*(void *)v1743 + 8LL))(v1743, v1742);
    }
  }

  uint64_t v1745 = *(void *)(a2 + 2168);
  if (v1745)
  {
    v1746 = operator new(0x28uLL);
    double v1747 = sub_10118AB88((uint64_t)v1746, v1745);
    uint64_t v1748 = *(void *)(a1 + 2168);
    *(void *)(a1 + 2168) = v1749;
    if (v1748) {
      (*(void (**)(uint64_t, double))(*(void *)v1748 + 8LL))(v1748, v1747);
    }
  }

  uint64_t v1750 = *(void *)(a2 + 2200);
  if (v1750)
  {
    v1751 = operator new(0x28uLL);
    double v1752 = sub_10118C260((uint64_t)v1751, v1750);
    uint64_t v1753 = *(void *)(a1 + 2200);
    *(void *)(a1 + 220sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1754;
    if (v1753) {
      (*(void (**)(uint64_t, double))(*(void *)v1753 + 8LL))(v1753, v1752);
    }
  }

  uint64_t v1755 = *(void *)(a2 + 104);
  if (v1755)
  {
    v1756 = operator new(0x28uLL);
    uint64_t v1757 = sub_1010E2964((uint64_t)v1756, v1755);
    uint64_t v1758 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v1757;
    if (v1758) {
      (*(void (**)(uint64_t))(*(void *)v1758 + 8LL))(v1758);
    }
  }

  uint64_t v1759 = *(void *)(a2 + 2288);
  if (v1759)
  {
    v1760 = operator new(0x28uLL);
    double v1761 = sub_101190694((uint64_t)v1760, v1759);
    uint64_t v1762 = *(void *)(a1 + 2288);
    *(void *)(a1 + 2288) = v1763;
    if (v1762) {
      (*(void (**)(uint64_t, double))(*(void *)v1762 + 8LL))(v1762, v1761);
    }
  }

  uint64_t v1764 = *(void *)(a2 + 2472);
  if (v1764)
  {
    v1765 = operator new(0x20uLL);
    double v1766 = sub_10119C3B0((uint64_t)v1765, v1764);
    uint64_t v1767 = *(void *)(a1 + 2472);
    *(void *)(a1 + 2472) = v1768;
    if (v1767) {
      (*(void (**)(uint64_t, double))(*(void *)v1767 + 8LL))(v1767, v1766);
    }
  }

  uint64_t v1769 = *(void *)(a2 + 2496);
  if (v1769)
  {
    v1770 = operator new(0x60uLL);
    double v1771 = sub_10119D244((uint64_t)v1770, v1769);
    uint64_t v1772 = *(void *)(a1 + 2496);
    *(void *)(a1 + 2496) = v1773;
    if (v1772) {
      (*(void (**)(uint64_t, double))(*(void *)v1772 + 8LL))(v1772, v1771);
    }
  }

  uint64_t v1774 = *(void *)(a2 + 1760);
  if (v1774)
  {
    v1775 = operator new(0x30uLL);
    uint64_t v1776 = sub_1010D8078((uint64_t)v1775, v1774);
    uint64_t v1777 = *(void *)(a1 + 1760);
    *(void *)(a1 + 176sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1776;
    if (v1777) {
      (*(void (**)(uint64_t))(*(void *)v1777 + 8LL))(v1777);
    }
  }

  uint64_t v1778 = *(void *)(a2 + 2504);
  if (v1778)
  {
    v1779 = operator new(0x30uLL);
    float v1780 = sub_10119DBF4((uint64_t)v1779, v1778);
    uint64_t v1781 = *(void *)(a1 + 2504);
    *(void *)(a1 + 2504) = v1782;
    if (v1781) {
      (*(void (**)(uint64_t, float))(*(void *)v1781 + 8LL))(v1781, v1780);
    }
  }

  uint64_t v1783 = *(void *)(a2 + 2480);
  if (v1783)
  {
    v1784 = operator new(0x30uLL);
    uint64_t v1785 = sub_10119C7A0((uint64_t)v1784, v1783);
    uint64_t v1786 = *(void *)(a1 + 2480);
    *(void *)(a1 + 248sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1785;
    if (v1786) {
      (*(void (**)(uint64_t))(*(void *)v1786 + 8LL))(v1786);
    }
  }

  uint64_t v1787 = *(void *)(a2 + 2216);
  if (v1787)
  {
    v1788 = operator new(0x38uLL);
    uint64_t v1789 = sub_10118CD38(v1788, v1787);
    uint64_t v1790 = *(void *)(a1 + 2216);
    *(void *)(a1 + 2216) = v1789;
    if (v1790) {
      (*(void (**)(uint64_t))(*(void *)v1790 + 8LL))(v1790);
    }
  }

  uint64_t v1791 = *(void *)(a2 + 576);
  if (v1791)
  {
    v1792 = operator new(0x18uLL);
    uint64_t v1793 = sub_1010FE1C8((uint64_t)v1792, v1791);
    uint64_t v1794 = *(void *)(a1 + 576);
    *(void *)(a1 + 576) = v1793;
    if (v1794) {
      (*(void (**)(uint64_t))(*(void *)v1794 + 8LL))(v1794);
    }
  }

  uint64_t v1795 = *(void *)(a2 + 2208);
  if (v1795)
  {
    v1796 = operator new(0x30uLL);
    float v1797 = sub_10118C714((uint64_t)v1796, v1795);
    uint64_t v1798 = *(void *)(a1 + 2208);
    *(void *)(a1 + 2208) = v1799;
    if (v1798) {
      (*(void (**)(uint64_t, float))(*(void *)v1798 + 8LL))(v1798, v1797);
    }
  }

  uint64_t v1800 = *(void *)(a2 + 2344);
  if (v1800)
  {
    v1801 = operator new(0x18uLL);
    uint64_t v1802 = sub_10119565C((uint64_t)v1801, v1800);
    uint64_t v1803 = *(void *)(a1 + 2344);
    *(void *)(a1 + 2344) = v1802;
    if (v1803) {
      (*(void (**)(uint64_t))(*(void *)v1803 + 8LL))(v1803);
    }
  }

  uint64_t v1804 = *(void *)(a2 + 1928);
  if (v1804)
  {
    v1805 = operator new(0x78uLL);
    uint64_t v1806 = sub_1011751E4(v1805, v1804);
    uint64_t v1807 = *(void *)(a1 + 1928);
    *(void *)(a1 + 1928) = v1806;
    if (v1807) {
      (*(void (**)(uint64_t))(*(void *)v1807 + 8LL))(v1807);
    }
  }

  uint64_t v1808 = *(void *)(a2 + 1720);
  if (v1808)
  {
    v1809 = operator new(0x90uLL);
    uint64_t v1810 = sub_1010D333C((uint64_t)v1809, v1808);
    uint64_t v1811 = *(void *)(a1 + 1720);
    *(void *)(a1 + 172sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1810;
    if (v1811) {
      (*(void (**)(uint64_t))(*(void *)v1811 + 8LL))(v1811);
    }
  }

  uint64_t v1812 = *(void *)(a2 + 1728);
  if (v1812)
  {
    v1813 = operator new(0x70uLL);
    uint64_t v1814 = sub_1010D47FC((uint64_t)v1813, v1812);
    uint64_t v1815 = *(void *)(a1 + 1728);
    *(void *)(a1 + 1728) = v1814;
    if (v1815) {
      (*(void (**)(uint64_t))(*(void *)v1815 + 8LL))(v1815);
    }
  }

  uint64_t v1816 = *(void *)(a2 + 2488);
  if (v1816)
  {
    v1817 = operator new(0x18uLL);
    uint64_t v1818 = sub_10119CDA0((uint64_t)v1817, v1816);
    uint64_t v1819 = *(void *)(a1 + 2488);
    *(void *)(a1 + 2488) = v1818;
    if (v1819) {
      (*(void (**)(uint64_t))(*(void *)v1819 + 8LL))(v1819);
    }
  }

  uint64_t v1820 = *(void *)(a2 + 2192);
  if (v1820)
  {
    v1821 = operator new(0x28uLL);
    double v1822 = sub_10118BE00((uint64_t)v1821, v1820);
    uint64_t v1823 = *(void *)(a1 + 2192);
    *(void *)(a1 + 2192) = v1824;
    if (v1823) {
      (*(void (**)(uint64_t, double))(*(void *)v1823 + 8LL))(v1823, v1822);
    }
  }

  uint64_t v1825 = *(void *)(a2 + 2184);
  if (v1825)
  {
    v1826 = operator new(0x50uLL);
    uint64_t v1827 = sub_10118B508(v1826, v1825);
    uint64_t v1828 = *(void *)(a1 + 2184);
    *(void *)(a1 + 2184) = v1827;
    if (v1828) {
      (*(void (**)(uint64_t))(*(void *)v1828 + 8LL))(v1828);
    }
  }

  uint64_t v1829 = *(void *)(a2 + 1744);
  if (v1829)
  {
    v1830 = operator new(0xA0uLL);
    uint64_t v1831 = sub_1010D6268((uint64_t)v1830, v1829);
    uint64_t v1832 = *(void *)(a1 + 1744);
    *(void *)(a1 + 1744) = v1831;
    if (v1832) {
      (*(void (**)(uint64_t))(*(void *)v1832 + 8LL))(v1832);
    }
  }

  uint64_t v1833 = *(void *)(a2 + 1736);
  if (v1833)
  {
    v1834 = operator new(0x30uLL);
    uint64_t v1835 = sub_1010D587C((uint64_t)v1834, v1833);
    uint64_t v1836 = *(void *)(a1 + 1736);
    *(void *)(a1 + 1736) = v1835;
    if (v1836) {
      (*(void (**)(uint64_t))(*(void *)v1836 + 8LL))(v1836);
    }
  }

  uint64_t v1837 = *(void *)(a2 + 2512);
  if (v1837)
  {
    v1838 = operator new(0x40uLL);
    uint64_t v1839 = sub_10119E2B0((uint64_t)v1838, v1837);
    uint64_t v1840 = *(void *)(a1 + 2512);
    *(void *)(a1 + 2512) = v1839;
    if (v1840) {
      (*(void (**)(uint64_t))(*(void *)v1840 + 8LL))(v1840);
    }
  }

  uint64_t v1841 = *(void *)(a2 + 312);
  if (v1841)
  {
    v1842 = operator new(0x30uLL);
    double v1843 = sub_1010F0180((uint64_t)v1842, v1841);
    uint64_t v1844 = *(void *)(a1 + 312);
    *(void *)(a1 + 312) = v1845;
    if (v1844) {
      (*(void (**)(uint64_t, double))(*(void *)v1844 + 8LL))(v1844, v1843);
    }
  }

  uint64_t v1846 = *(void *)(a2 + 904);
  if (v1846)
  {
    v1847 = operator new(0x68uLL);
    uint64_t v1848 = sub_101119908((uint64_t)v1847, v1846);
    uint64_t v1849 = *(void *)(a1 + 904);
    *(void *)(a1 + 904) = v1848;
    if (v1849) {
      (*(void (**)(uint64_t))(*(void *)v1849 + 8LL))(v1849);
    }
  }

  uint64_t v1850 = *(void *)(a2 + 2360);
  if (v1850)
  {
    v1851 = operator new(0x48uLL);
    uint64_t v1852 = sub_10119623C((uint64_t)v1851, v1850);
    uint64_t v1853 = *(void *)(a1 + 2360);
    *(void *)(a1 + 236sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1852;
    if (v1853) {
      (*(void (**)(uint64_t))(*(void *)v1853 + 8LL))(v1853);
    }
  }

  uint64_t v1854 = *(void *)(a2 + 2384);
  if (v1854)
  {
    v1855 = operator new(0x28uLL);
    double v1856 = sub_101197D70((uint64_t)v1855, v1854);
    uint64_t v1857 = *(void *)(a1 + 2384);
    *(void *)(a1 + 2384) = v1858;
    if (v1857) {
      (*(void (**)(uint64_t, double))(*(void *)v1857 + 8LL))(v1857, v1856);
    }
  }

  uint64_t v1859 = *(void *)(a2 + 256);
  if (v1859)
  {
    v1860 = operator new(0x20uLL);
    uint64_t v1861 = sub_1010ECA70((uint64_t)v1860, v1859);
    uint64_t v1862 = *(void *)(a1 + 256);
    *(void *)(a1 + 256) = v1861;
    if (v1862) {
      (*(void (**)(uint64_t))(*(void *)v1862 + 8LL))(v1862);
    }
  }

  uint64_t v1863 = *(void *)(a2 + 248);
  if (v1863)
  {
    v1864 = operator new(0x28uLL);
    uint64_t v1865 = sub_1010EC2FC((uint64_t)v1864, v1863);
    uint64_t v1866 = *(void *)(a1 + 248);
    *(void *)(a1 + 248) = v1865;
    if (v1866) {
      (*(void (**)(uint64_t))(*(void *)v1866 + 8LL))(v1866);
    }
  }

  uint64_t v1867 = *(void *)(a2 + 2816);
  if (v1867)
  {
    v1868 = operator new(0x20uLL);
    uint64_t v1869 = sub_10113CF64((uint64_t)v1868, v1867);
    uint64_t v1870 = *(void *)(a1 + 2816);
    *(void *)(a1 + 2816) = v1869;
    if (v1870) {
      (*(void (**)(uint64_t))(*(void *)v1870 + 8LL))(v1870);
    }
  }

  uint64_t v1871 = *(void *)(a2 + 2808);
  if (v1871)
  {
    v1872 = operator new(0x18uLL);
    uint64_t v1873 = sub_10113CA94((uint64_t)v1872, v1871);
    uint64_t v1874 = *(void *)(a1 + 2808);
    *(void *)(a1 + 2808) = v1873;
    if (v1874) {
      (*(void (**)(uint64_t))(*(void *)v1874 + 8LL))(v1874);
    }
  }

  uint64_t v1875 = *(void *)(a2 + 2624);
  if (v1875)
  {
    v1876 = operator new(0x18uLL);
    uint64_t v1877 = sub_101191200(v1876, v1875);
    uint64_t v1878 = *(void *)(a1 + 2624);
    *(void *)(a1 + 2624) = v1877;
    if (v1878) {
      (*(void (**)(uint64_t))(*(void *)v1878 + 8LL))(v1878);
    }
  }

  uint64_t v1879 = *(void *)(a2 + 2632);
  if (v1879)
  {
    v1880 = operator new(0x48uLL);
    uint64_t v1881 = sub_10119167C(v1880, v1879);
    uint64_t v1882 = *(void *)(a1 + 2632);
    *(void *)(a1 + 2632) = v1881;
    if (v1882) {
      (*(void (**)(uint64_t))(*(void *)v1882 + 8LL))(v1882);
    }
  }

  uint64_t v1883 = *(void *)(a2 + 2648);
  if (v1883)
  {
    v1884 = operator new(0x10uLL);
    uint64_t v1885 = sub_101191FDC(v1884, v1883);
    uint64_t v1886 = *(void *)(a1 + 2648);
    *(void *)(a1 + 2648) = v1885;
    if (v1886) {
      (*(void (**)(uint64_t))(*(void *)v1886 + 8LL))(v1886);
    }
  }

  uint64_t v1887 = *(void *)(a2 + 1288);
  if (v1887)
  {
    v1888 = operator new(0xB0uLL);
    uint64_t v1889 = sub_10109766C((uint64_t)v1888, v1887);
    uint64_t v1890 = *(void *)(a1 + 1288);
    *(void *)(a1 + 1288) = v1889;
    if (v1890) {
      (*(void (**)(uint64_t))(*(void *)v1890 + 8LL))(v1890);
    }
  }

  uint64_t v1891 = *(void *)(a2 + 2640);
  if (v1891)
  {
    v1892 = operator new(0x10uLL);
    uint64_t v1893 = sub_101191CAC(v1892, v1891);
    uint64_t v1894 = *(void *)(a1 + 2640);
    *(void *)(a1 + 264sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1893;
    if (v1894) {
      (*(void (**)(uint64_t))(*(void *)v1894 + 8LL))(v1894);
    }
  }

  uint64_t v1895 = *(void *)(a2 + 336);
  if (v1895)
  {
    v1896 = operator new(0x30uLL);
    double v1897 = sub_1010F14B8((uint64_t)v1896, v1895);
    uint64_t v1898 = *(void *)(a1 + 336);
    *(void *)(a1 + 336) = v1899;
    if (v1898) {
      (*(void (**)(uint64_t, double))(*(void *)v1898 + 8LL))(v1898, v1897);
    }
  }

  uint64_t v1900 = *(void *)(a2 + 1480);
  if (v1900)
  {
    v1901 = operator new(0x18uLL);
    uint64_t v1902 = sub_1010A2E88((uint64_t)v1901, v1900);
    uint64_t v1903 = *(void *)(a1 + 1480);
    *(void *)(a1 + 148sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v1902;
    if (v1903) {
      (*(void (**)(uint64_t))(*(void *)v1903 + 8LL))(v1903);
    }
  }

  uint64_t v1904 = *(void *)(a2 + 1488);
  if (v1904)
  {
    v1905 = operator new(0x68uLL);
    uint64_t v1906 = sub_1010A3534((uint64_t)v1905, v1904);
    uint64_t v1907 = *(void *)(a1 + 1488);
    *(void *)(a1 + 1488) = v1906;
    if (v1907) {
      (*(void (**)(uint64_t))(*(void *)v1907 + 8LL))(v1907);
    }
  }

  uint64_t v1908 = *(void *)(a2 + 1496);
  if (v1908)
  {
    v1909 = operator new(0x20uLL);
    float v1910 = sub_1010A4678((uint64_t)v1909, v1908);
    uint64_t v1911 = *(void *)(a1 + 1496);
    *(void *)(a1 + 1496) = v1912;
    if (v1911) {
      (*(void (**)(uint64_t, float))(*(void *)v1911 + 8LL))(v1911, v1910);
    }
  }

  uint64_t v1913 = *(void *)(a2 + 2824);
  if (v1913)
  {
    v1914 = operator new(0x38uLL);
    uint64_t v1915 = sub_10113D594((uint64_t)v1914, v1913);
    uint64_t v1916 = *(void *)(a1 + 2824);
    *(void *)(a1 + 2824) = v1915;
    if (v1916) {
      (*(void (**)(uint64_t))(*(void *)v1916 + 8LL))(v1916);
    }
  }

  uint64_t v1917 = *(void *)(a2 + 2832);
  if (v1917)
  {
    v1918 = operator new(0xE0uLL);
    uint64_t v1919 = sub_10113E41C((uint64_t)v1918, v1917);
    uint64_t v1920 = *(void *)(a1 + 2832);
    *(void *)(a1 + 2832) = v1919;
    if (v1920) {
      (*(void (**)(uint64_t))(*(void *)v1920 + 8LL))(v1920);
    }
  }

  uint64_t v1921 = *(void *)(a2 + 2944);
  if (v1921)
  {
    v1922 = operator new(0x10uLL);
    uint64_t v1923 = sub_10113C520(v1922, v1921);
    uint64_t v1924 = *(void *)(a1 + 2944);
    *(void *)(a1 + 2944) = v1923;
    if (v1924) {
      (*(void (**)(uint64_t))(*(void *)v1924 + 8LL))(v1924);
    }
  }

  uint64_t v1925 = *(void *)(a2 + 2952);
  if (v1925)
  {
    v1926 = operator new(0x10uLL);
    uint64_t v1927 = sub_10113C840(v1926, v1925);
    uint64_t v1928 = *(void *)(a1 + 2952);
    *(void *)(a1 + 2952) = v1927;
    if (v1928) {
      (*(void (**)(uint64_t))(*(void *)v1928 + 8LL))(v1928);
    }
  }

  uint64_t v1929 = *(void *)(a2 + 1432);
  if (v1929)
  {
    v1930 = operator new(0x10uLL);
    v1931 = sub_1010A1C1C(v1930, v1929);
    uint64_t v1932 = *(void *)(a1 + 1432);
    *(void *)(a1 + 1432) = v1931;
    if (v1932) {
      (*(void (**)(uint64_t))(*(void *)v1932 + 8LL))(v1932);
    }
  }

  return a1;
}

uint64_t sub_10112D900(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "aPSleep");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "aPWake");
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "accel");
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32LL))(v8, this, "accel800");
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32LL))(v9, this, "accelBatch");
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32LL))( v10,  this,  "accelGesture");
  }
  uint64_t v11 = *(void *)(a1 + 56);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32LL))(v11, this, "accelGps");
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32LL))( v12,  this,  "accelOscarEmu");
  }
  uint64_t v13 = *(void *)(a1 + 72);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32LL))( v13,  this,  "accelTNBFrame");
  }
  uint64_t v14 = *(void *)(a1 + 80);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32LL))( v14,  this,  "accelerometerPace");
  }
  uint64_t v15 = *(void *)(a1 + 88);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32LL))( v15,  this,  "accessoryAccel");
  }
  uint64_t v16 = *(void *)(a1 + 96);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32LL))( v16,  this,  "accessoryAccelConfig");
  }
  uint64_t v17 = *(void *)(a1 + 104);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32LL))( v17,  this,  "accessoryActivityAsleepConfidenceEpoch");
  }
  uint64_t v18 = *(void *)(a1 + 112);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32LL))( v18,  this,  "accessoryActivityStateUpdate");
  }
  uint64_t v19 = *(void *)(a1 + 120);
  if (v19) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v19 + 32LL))( v19,  this,  "accessoryConfig");
  }
  uint64_t v20 = *(void *)(a1 + 128);
  if (v20) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v20 + 32LL))( v20,  this,  "accessoryDeviceMotion");
  }
  uint64_t v21 = *(void *)(a1 + 136);
  if (v21) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v21 + 32LL))( v21,  this,  "accessoryDeviceMotionConfig");
  }
  uint64_t v22 = *(void *)(a1 + 144);
  if (v22) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v22 + 32LL))( v22,  this,  "accessoryGyro");
  }
  uint64_t v23 = *(void *)(a1 + 152);
  if (v23) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v23 + 32LL))( v23,  this,  "accessoryGyroCachedBias");
  }
  uint64_t v24 = *(void *)(a1 + 160);
  if (v24) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v24 + 32LL))( v24,  this,  "accessoryGyroConfig");
  }
  uint64_t v25 = *(void *)(a1 + 168);
  if (v25) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v25 + 32LL))( v25,  this,  "accessoryGyroGYTT");
  }
  uint64_t v26 = *(void *)(a1 + 176);
  if (v26) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v26 + 32LL))( v26,  this,  "accessoryHeartRate");
  }
  uint64_t v27 = *(void *)(a1 + 184);
  if (v27) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v27 + 32LL))( v27,  this,  "accessoryInEarStatus");
  }
  uint64_t v28 = *(void *)(a1 + 192);
  if (v28) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v28 + 32LL))( v28,  this,  "accessoryMagnetometer");
  }
  uint64_t v29 = *(void *)(a1 + 200);
  if (v29) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v29 + 32LL))( v29,  this,  "accessoryMagnetometerConfig");
  }
  uint64_t v30 = *(void *)(a1 + 208);
  if (v30) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v30 + 32LL))( v30,  this,  "accessoryPPG");
  }
  uint64_t v31 = *(void *)(a1 + 216);
  if (v31) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v31 + 32LL))( v31,  this,  "accessoryProx");
  }
  uint64_t v32 = *(void *)(a1 + 224);
  if (v32) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v32 + 32LL))( v32,  this,  "accessoryProxSensorDrop");
  }
  uint64_t v33 = *(void *)(a1 + 232);
  if (v33) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v33 + 32LL))( v33,  this,  "accessoryProxTempComp");
  }
  uint64_t v34 = *(void *)(a1 + 240);
  if (v34) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v34 + 32LL))( v34,  this,  "accessoryProximityConfig");
  }
  uint64_t v35 = *(void *)(a1 + 248);
  if (v35) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v35 + 32LL))( v35,  this,  "accessorySleepStateConfidenceEpoch");
  }
  uint64_t v36 = *(void *)(a1 + 256);
  if (v36) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v36 + 32LL))( v36,  this,  "accessorySleepStateUpdate");
  }
  uint64_t v37 = *(void *)(a1 + 264);
  if (v37) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v37 + 32LL))( v37,  this,  "accessoryStepDetectorDebug");
  }
  uint64_t v38 = *(void *)(a1 + 272);
  if (v38) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v38 + 32LL))( v38,  this,  "accessoryWake");
  }
  uint64_t v39 = *(void *)(a1 + 280);
  if (v39) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v39 + 32LL))( v39,  this,  "accessoryWakeDebug");
  }
  uint64_t v40 = *(void *)(a1 + 288);
  if (v40) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v40 + 32LL))( v40,  this,  "airpodEvent");
  }
  uint64_t v41 = *(void *)(a1 + 296);
  if (v41) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v41 + 32LL))(v41, this, "alsData");
  }
  uint64_t v42 = *(void *)(a1 + 304);
  if (v42) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v42 + 32LL))(v42, this, "alsPhone");
  }
  uint64_t v43 = *(void *)(a1 + 312);
  if (v43) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v43 + 32LL))(v43, this, "altimeter");
  }
  uint64_t v44 = *(void *)(a1 + 320);
  if (v44) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v44 + 32LL))( v44,  this,  "altimeterKF");
  }
  uint64_t v45 = *(void *)(a1 + 328);
  if (v45) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v45 + 32LL))( v45,  this,  "anchorCorrection");
  }
  uint64_t v46 = *(void *)(a1 + 336);
  if (v46) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v46 + 32LL))( v46,  this,  "anchorMotionCorrespondence");
  }
  uint64_t v47 = *(void *)(a1 + 344);
  if (v47) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v47 + 32LL))( v47,  this,  "appleCV3DSLAMState");
  }
  uint64_t v48 = *(void *)(a1 + 352);
  if (v48) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v48 + 32LL))( v48,  this,  "arSessionState");
  }
  uint64_t v49 = *(void *)(a1 + 360);
  if (v49) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v49 + 32LL))( v49,  this,  "arkitWorldPose");
  }
  uint64_t v50 = *(void *)(a1 + 368);
  if (v50) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v50 + 32LL))( v50,  this,  "audioAccessoryDeviceMotion");
  }
  uint64_t v51 = *(void *)(a1 + 376);
  if (v51) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v51 + 32LL))( v51,  this,  "auxiliaryDeviceMotion");
  }
  uint64_t v52 = *(void *)(a1 + 384);
  if (v52) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v52 + 32LL))( v52,  this,  "averagedALSData");
  }
  uint64_t v53 = *(void *)(a1 + 392);
  if (v53) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v53 + 32LL))( v53,  this,  "bTConnection");
  }
  uint64_t v54 = *(void *)(a1 + 400);
  if (v54) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v54 + 32LL))( v54,  this,  "backlightState");
  }
  uint64_t v55 = *(void *)(a1 + 408);
  if (v55) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v55 + 32LL))( v55,  this,  "basebandCompassCoex");
  }
  uint64_t v56 = *(void *)(a1 + 416);
  if (v56) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v56 + 32LL))( v56,  this,  "basebandCompassCoexConstraints");
  }
  uint64_t v57 = *(void *)(a1 + 424);
  if (v57) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v57 + 32LL))( v57,  this,  "basebandSpeed");
  }
  uint64_t v58 = *(void *)(a1 + 432);
  if (v58) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v58 + 32LL))( v58,  this,  "baselineResetCheck");
  }
  uint64_t v59 = *(void *)(a1 + 440);
  if (v59) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v59 + 32LL))( v59,  this,  "batchedLocationFromOdometer");
  }
  uint64_t v60 = *(void *)(a1 + 448);
  if (v60) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v60 + 32LL))( v60,  this,  "batterySaverModeStatus");
  }
  uint64_t v61 = *(void *)(a1 + 456);
  if (v61) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v61 + 32LL))( v61,  this,  "batteryStatus");
  }
  uint64_t v62 = *(void *)(a1 + 464);
  if (v62) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v62 + 32LL))( v62,  this,  "bioMotionAnchorPose");
  }
  uint64_t v63 = *(void *)(a1 + 472);
  if (v63) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v63 + 32LL))( v63,  this,  "bioMotionClassification");
  }
  uint64_t v64 = *(void *)(a1 + 480);
  if (v64) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v64 + 32LL))( v64,  this,  "bioMotionLinkLengthFitParameters");
  }
  uint64_t v65 = *(void *)(a1 + 488);
  if (v65) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v65 + 32LL))( v65,  this,  "bioMotionOnlineLinkLengthUpdate");
  }
  uint64_t v66 = *(void *)(a1 + 496);
  if (v66) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v66 + 32LL))( v66,  this,  "bioMotionPose");
  }
  uint64_t v67 = *(void *)(a1 + 504);
  if (v67) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v67 + 32LL))( v67,  this,  "bioMotionPredictedPose");
  }
  uint64_t v68 = *(void *)(a1 + 512);
  if (v68) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v68 + 32LL))( v68,  this,  "bioMotionPropagatedAnchor");
  }
  uint64_t v69 = *(void *)(a1 + 520);
  if (v69) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v69 + 32LL))( v69,  this,  "bleedToZeroCorrection");
  }
  uint64_t v70 = *(void *)(a1 + 528);
  if (v70) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v70 + 32LL))( v70,  this,  "bodyMetrics");
  }
  uint64_t v71 = *(void *)(a1 + 536);
  if (v71) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v71 + 32LL))( v71,  this,  "braveHeartAccel");
  }
  uint64_t v72 = *(void *)(a1 + 544);
  if (v72) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v72 + 32LL))( v72,  this,  "braveHeartDeviceMotion");
  }
  uint64_t v73 = *(void *)(a1 + 552);
  if (v73) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v73 + 32LL))( v73,  this,  "braveHeartNatalieData");
  }
  uint64_t v74 = *(void *)(a1 + 560);
  if (v74) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v74 + 32LL))( v74,  this,  "braveHeartVO2MaxInput");
  }
  uint64_t v75 = *(void *)(a1 + 568);
  if (v75) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v75 + 32LL))( v75,  this,  "braveHeartWorkoutEvent");
  }
  uint64_t v76 = *(void *)(a1 + 576);
  if (v76) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v76 + 32LL))( v76,  this,  "bumpToWakeState");
  }
  uint64_t v77 = *(void *)(a1 + 584);
  if (v77) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v77 + 32LL))( v77,  this,  "cV3DPredictedPose");
  }
  uint64_t v78 = *(void *)(a1 + 592);
  if (v78) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v78 + 32LL))( v78,  this,  "calorimetryMETsConsumed");
  }
  uint64_t v79 = *(void *)(a1 + 600);
  if (v79) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v79 + 32LL))( v79,  this,  "calorimetryPauseEvent");
  }
  uint64_t v80 = *(void *)(a1 + 608);
  if (v80) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v80 + 32LL))( v80,  this,  "catherineHealthKitData");
  }
  if ((*(_BYTE *)(a1 + 3616) & 1) != 0) {
    PB::TextFormatter::format(this, "cftime", *(double *)(a1 + 616));
  }
  uint64_t v81 = *(void *)(a1 + 624);
  if (v81) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v81 + 32LL))( v81,  this,  "clefCalibration");
  }
  uint64_t v82 = *(void *)(a1 + 632);
  if (v82) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v82 + 32LL))( v82,  this,  "coarseElevationChange");
  }
  uint64_t v83 = *(void *)(a1 + 640);
  if (v83) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v83 + 32LL))(v83, this, "compass");
  }
  uint64_t v84 = *(void *)(a1 + 648);
  if (v84) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v84 + 32LL))( v84,  this,  "compassAlignment");
  }
  uint64_t v85 = *(void *)(a1 + 656);
  if (v85) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v85 + 32LL))( v85,  this,  "compassCalibration");
  }
  uint64_t v86 = *(void *)(a1 + 664);
  if (v86) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v86 + 32LL))( v86,  this,  "compassCalibrationAttempt");
  }
  uint64_t v87 = *(void *)(a1 + 672);
  if (v87) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v87 + 32LL))( v87,  this,  "compassConstraints");
  }
  uint64_t v88 = *(void *)(a1 + 680);
  if (v88) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v88 + 32LL))( v88,  this,  "compassCorrection");
  }
  uint64_t v89 = *(void *)(a1 + 688);
  if (v89) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v89 + 32LL))( v89,  this,  "complexHandMotion");
  }
  uint64_t v90 = *(void *)(a1 + 696);
  if (v90) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v90 + 32LL))( v90,  this,  "constrainedIntegratorModelPredictedPose");
  }
  uint64_t v91 = *(void *)(a1 + 704);
  if (v91) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v91 + 32LL))( v91,  this,  "constrainedIntegratorPose");
  }
  uint64_t v92 = *(void *)(a1 + 712);
  if (v92) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v92 + 32LL))( v92,  this,  "coprocessorReplyGaitMetrics");
  }
  uint64_t v93 = *(void *)(a1 + 720);
  if (v93) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v93 + 32LL))( v93,  this,  "courseConstraints");
  }
  uint64_t v94 = *(void *)(a1 + 728);
  if (v94) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v94 + 32LL))( v94,  this,  "courseCorrection");
  }
  uint64_t v95 = *(void *)(a1 + 736);
  if (v95) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v95 + 32LL))( v95,  this,  "cvWatchCalories");
  }
  uint64_t v96 = *(void *)(a1 + 744);
  if (v96) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v96 + 32LL))( v96,  this,  "deviceMotion");
  }
  uint64_t v97 = *(void *)(a1 + 752);
  if (v97) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v97 + 32LL))( v97,  this,  "deviceMotionAlwaysOn");
  }
  uint64_t v98 = *(void *)(a1 + 760);
  if (v98) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v98 + 32LL))( v98,  this,  "deviceMotionCovariance");
  }
  uint64_t v99 = *(void *)(a1 + 768);
  if (v99) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v99 + 32LL))( v99,  this,  "directionOfTravelMetrics");
  }
  uint64_t v100 = *(void *)(a1 + 776);
  if (v100) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v100 + 32LL))( v100,  this,  "displacingState");
  }
  uint64_t v101 = *(void *)(a1 + 784);
  if (v101) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v101 + 32LL))( v101,  this,  "displayStatus");
  }
  uint64_t v102 = *(void *)(a1 + 792);
  if (v102) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v102 + 32LL))( v102,  this,  "dopplerDebugRecord");
  }
  uint64_t v103 = *(void *)(a1 + 800);
  if (v103) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v103 + 32LL))( v103,  this,  "dopplerProximityEvent");
  }
  uint64_t v104 = *(void *)(a1 + 808);
  if (v104) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v104 + 32LL))( v104,  this,  "dopplerRawDataInput");
  }
  uint64_t v105 = *(void *)(a1 + 816);
  if (v105) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v105 + 32LL))( v105,  this,  "dopplerSample");
  }
  uint64_t v106 = *(void *)(a1 + 824);
  if (v106) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v106 + 32LL))( v106,  this,  "dotEstimatorHandSwing");
  }
  uint64_t v107 = *(void *)(a1 + 832);
  if (v107) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v107 + 32LL))( v107,  this,  "dotEstimatorWithTNB");
  }
  uint64_t v108 = *(void *)(a1 + 840);
  if (v108) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v108 + 32LL))( v108,  this,  "doubleTap");
  }
  uint64_t v109 = *(void *)(a1 + 848);
  if (v109) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v109 + 32LL))( v109,  this,  "elevationChange");
  }
  uint64_t v110 = *(void *)(a1 + 856);
  if (v110) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v110 + 32LL))( v110,  this,  "elevationGradeEstimator");
  }
  uint64_t v111 = *(void *)(a1 + 864);
  if (v111) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v111 + 32LL))( v111,  this,  "elevationThreshold");
  }
  uint64_t v112 = *(void *)(a1 + 872);
  if (v112) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v112 + 32LL))( v112,  this,  "emergencyState");
  }
  uint64_t v113 = *(void *)(a1 + 880);
  if (v113) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v113 + 32LL))( v113,  this,  "enhancedDeviceMotion");
  }
  uint64_t v114 = *(void *)(a1 + 888);
  if (v114) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v114 + 32LL))( v114,  this,  "faceBlendShapeCoefficientsSample");
  }
  uint64_t v115 = *(void *)(a1 + 896);
  if (v115) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v115 + 32LL))( v115,  this,  "faceCovered");
  }
  uint64_t v116 = *(void *)(a1 + 904);
  if (v116) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v116 + 32LL))( v116,  this,  "faceDownDetection");
  }
  uint64_t v117 = *(void *)(a1 + 912);
  if (v117) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v117 + 32LL))( v117,  this,  "facePose");
  }
  uint64_t v118 = *(void *)(a1 + 920);
  if (v118) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v118 + 32LL))( v118,  this,  "facePoseSynchronized");
  }
  uint64_t v119 = *(void *)(a1 + 928);
  if (v119) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v119 + 32LL))( v119,  this,  "fallDetectionActivityClassifierReplay");
  }
  uint64_t v120 = *(void *)(a1 + 936);
  if (v120) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v120 + 32LL))( v120,  this,  "fallDetectionDetector");
  }
  uint64_t v121 = *(void *)(a1 + 944);
  if (v121) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v121 + 32LL))( v121,  this,  "fallDetectionGyroControllerReplay");
  }
  uint64_t v122 = *(void *)(a1 + 952);
  if (v122) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v122 + 32LL))( v122,  this,  "fallDetectionReferee");
  }
  uint64_t v123 = *(void *)(a1 + 960);
  if (v123) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v123 + 32LL))( v123,  this,  "fallDetectionReplay");
  }
  uint64_t v124 = *(void *)(a1 + 968);
  if (v124) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v124 + 32LL))( v124,  this,  "fallDetectionStateMachine");
  }
  uint64_t v125 = *(void *)(a1 + 976);
  if (v125) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v125 + 32LL))( v125,  this,  "fallDetectionWristStateReplay");
  }
  uint64_t v126 = *(void *)(a1 + 984);
  if (v126) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v126 + 32LL))( v126,  this,  "fallDistanceReplay");
  }
  uint64_t v127 = *(void *)(a1 + 992);
  if (v127) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v127 + 32LL))( v127,  this,  "fallFalsePositiveSuppressionFeatures");
  }
  uint64_t v128 = *(void *)(a1 + 1000);
  if (v128) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v128 + 32LL))( v128,  this,  "fallSnippet");
  }
  uint64_t v129 = *(void *)(a1 + 1008);
  if (v129) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v129 + 32LL))( v129,  this,  "fallStats");
  }
  uint64_t v130 = *(void *)(a1 + 1016);
  if (v130) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v130 + 32LL))( v130,  this,  "firstStepFeatures");
  }
  uint64_t v131 = *(void *)(a1 + 1024);
  if (v131) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v131 + 32LL))( v131,  this,  "fitnessMachineData");
  }
  uint64_t v132 = *(void *)(a1 + 1032);
  if (v132) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v132 + 32LL))( v132,  this,  "fitnessMachineSample");
  }
  uint64_t v133 = *(void *)(a1 + 1040);
  if (v133) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v133 + 32LL))( v133,  this,  "focusModes");
  }
  uint64_t v134 = *(void *)(a1 + 1048);
  if (v134) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v134 + 32LL))( v134,  this,  "frequencyResponse");
  }
  uint64_t v135 = *(void *)(a1 + 1056);
  if (v135) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v135 + 32LL))( v135,  this,  "fusedBioMotionClassification");
  }
  uint64_t v136 = *(void *)(a1 + 1064);
  if (v136) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v136 + 32LL))( v136,  this,  "gaitCycleSegment");
  }
  uint64_t v137 = *(void *)(a1 + 1072);
  if (v137) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v137 + 32LL))( v137,  this,  "gaitCycleSegmentationState");
  }
  uint64_t v138 = *(void *)(a1 + 1080);
  if (v138) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v138 + 32LL))( v138,  this,  "gaitEventsHKResult");
  }
  uint64_t v139 = *(void *)(a1 + 1088);
  if (v139) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v139 + 32LL))( v139,  this,  "gaitEventsModelOutput");
  }
  uint64_t v140 = *(void *)(a1 + 1096);
  if (v140) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v140 + 32LL))( v140,  this,  "gaitEventsStrideAggregation");
  }
  uint64_t v141 = *(void *)(a1 + 1104);
  if (v141) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v141 + 32LL))( v141,  this,  "geomagneticData");
  }
  uint64_t v142 = *(void *)(a1 + 1112);
  if (v142) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v142 + 32LL))( v142,  this,  "gnssAvailabilityPredictorData");
  }
  uint64_t v143 = *(void *)(a1 + 1120);
  if (v143) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v143 + 32LL))( v143,  this,  "gnssLeechLocationData");
  }
  uint64_t v144 = *(void *)(a1 + 1128);
  if (v144) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v144 + 32LL))( v144,  this,  "gravityConstraints");
  }
  uint64_t v145 = *(void *)(a1 + 1136);
  if (v145) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v145 + 32LL))( v145,  this,  "gravityCorrection");
  }
  uint64_t v146 = *(void *)(a1 + 1144);
  if (v146) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v146 + 32LL))(v146, this, "gyro");
  }
  uint64_t v147 = *(void *)(a1 + 1152);
  if (v147) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v147 + 32LL))( v147,  this,  "gyroBiasAndVariance");
  }
  uint64_t v148 = *(void *)(a1 + 1160);
  if (v148) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v148 + 32LL))( v148,  this,  "gyroBiasConstraints");
  }
  uint64_t v149 = *(void *)(a1 + 1168);
  if (v149) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v149 + 32LL))( v149,  this,  "gyroBiasCorrection");
  }
  uint64_t v150 = *(void *)(a1 + 1176);
  if (v150) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v150 + 32LL))( v150,  this,  "gyroBiasEstimateError");
  }
  uint64_t v151 = *(void *)(a1 + 1184);
  if (v151) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v151 + 32LL))( v151,  this,  "gyroBiasFit");
  }
  uint64_t v152 = *(void *)(a1 + 1192);
  if (v152) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v152 + 32LL))( v152,  this,  "gyroCalibrationDataFactory");
  }
  uint64_t v153 = *(void *)(a1 + 1200);
  if (v153) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v153 + 32LL))( v153,  this,  "gyroCalibrationDataNonlinearNonFactory");
  }
  uint64_t v154 = *(void *)(a1 + 1208);
  if (v154) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v154 + 32LL))( v154,  this,  "gyroCalibrationSample");
  }
  uint64_t v155 = *(void *)(a1 + 1216);
  if (v155) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v155 + 32LL))( v155,  this,  "gyroCalibrationSampleNonlinear");
  }
  uint64_t v156 = *(void *)(a1 + 1224);
  if (v156) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v156 + 32LL))( v156,  this,  "gyroCompass");
  }
  uint64_t v157 = *(void *)(a1 + 1232);
  if (v157) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v157 + 32LL))(v157, this, "gyroDt");
  }
  uint64_t v158 = *(void *)(a1 + 1240);
  if (v158) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v158 + 32LL))( v158,  this,  "gyroFactoryCalibrationData");
  }
  uint64_t v159 = *(void *)(a1 + 1248);
  if (v159) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v159 + 32LL))(v159, this, "gyroGps");
  }
  uint64_t v160 = *(void *)(a1 + 1256);
  if (v160) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v160 + 32LL))( v160,  this,  "gyroOscarEmu");
  }
  uint64_t v161 = *(void *)(a1 + 1264);
  if (v161) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v161 + 32LL))( v161,  this,  "gyroTemperature");
  }
  uint64_t v162 = *(void *)(a1 + 1272);
  if (v162) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v162 + 32LL))( v162,  this,  "hapticModuleState");
  }
  uint64_t v163 = *(void *)(a1 + 1280);
  if (v163) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v163 + 32LL))( v163,  this,  "harmonicMetrics");
  }
  uint64_t v164 = *(void *)(a1 + 1288);
  if (v164) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v164 + 32LL))( v164,  this,  "headToHeadsetAttitudeEstimatorMeasurementUpdate");
  }
  uint64_t v165 = *(void *)(a1 + 1296);
  if (v165) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v165 + 32LL))( v165,  this,  "headToHeadsetTransformationEstimate");
  }
  uint64_t v166 = *(void *)(a1 + 1304);
  if (v166) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v166 + 32LL))( v166,  this,  "headTrackingBehaviorUpdate");
  }
  uint64_t v167 = *(void *)(a1 + 1312);
  if (v167) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v167 + 32LL))( v167,  this,  "headTrackingClientModeUpdate");
  }
  uint64_t v168 = *(void *)(a1 + 1320);
  if (v168) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v168 + 32LL))( v168,  this,  "heartRateReference");
  }
  uint64_t v169 = *(void *)(a1 + 1328);
  if (v169) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v169 + 32LL))(v169, this, "hgAccel");
  }
  uint64_t v170 = *(void *)(a1 + 1336);
  if (v170) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v170 + 32LL))( v170,  this,  "hidShower");
  }
  uint64_t v171 = *(void *)(a1 + 1344);
  if (v171) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v171 + 32LL))( v171,  this,  "inEarAdditionalState");
  }
  uint64_t v172 = *(void *)(a1 + 1352);
  if (v172) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v172 + 32LL))( v172,  this,  "inEarBaseline");
  }
  uint64_t v173 = *(void *)(a1 + 1360);
  if (v173) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v173 + 32LL))( v173,  this,  "inEarBaselining");
  }
  uint64_t v174 = *(void *)(a1 + 1368);
  if (v174) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v174 + 32LL))( v174,  this,  "inEarConstraints");
  }
  uint64_t v175 = *(void *)(a1 + 1376);
  if (v175) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v175 + 32LL))( v175,  this,  "inEarOpenLid");
  }
  uint64_t v176 = *(void *)(a1 + 1384);
  if (v176) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v176 + 32LL))( v176,  this,  "inEarOptical");
  }
  uint64_t v177 = *(void *)(a1 + 1392);
  if (v177) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v177 + 32LL))( v177,  this,  "inEarSession");
  }
  uint64_t v178 = *(void *)(a1 + 1400);
  if (v178) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v178 + 32LL))( v178,  this,  "inEarTransition");
  }
  uint64_t v179 = *(void *)(a1 + 1408);
  if (v179) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v179 + 32LL))( v179,  this,  "inEarTransitionEntry");
  }
  uint64_t v180 = *(void *)(a1 + 1416);
  if (v180) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v180 + 32LL))( v180,  this,  "inertialOdometry");
  }
  uint64_t v181 = *(void *)(a1 + 1424);
  if (v181) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v181 + 32LL))( v181,  this,  "initialHistoricalMeanSeaLevelPressure");
  }
  uint64_t v182 = *(void *)(a1 + 1432);
  if (v182) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v182 + 32LL))( v182,  this,  "interpolatedAccessoryAccel");
  }
  uint64_t v183 = *(void *)(a1 + 1440);
  if (v183) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v183 + 32LL))( v183,  this,  "intersiloNSCodingData");
  }
  uint64_t v184 = *(void *)(a1 + 1448);
  if (v184) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v184 + 32LL))( v184,  this,  "ispPacket");
  }
  uint64_t v185 = *(void *)(a1 + 1456);
  if (v185) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v185 + 32LL))( v185,  this,  "jitterBufferLevel");
  }
  uint64_t v186 = *(void *)(a1 + 1464);
  if (v186) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v186 + 32LL))( v186,  this,  "jointLinkModelPose");
  }
  uint64_t v187 = *(void *)(a1 + 1472);
  if (v187) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v187 + 32LL))( v187,  this,  "jointLinkModelPredictedPose");
  }
  uint64_t v188 = *(void *)(a1 + 1480);
  if (v188) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v188 + 32LL))(v188, this, "kData1");
  }
  uint64_t v189 = *(void *)(a1 + 1488);
  if (v189) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v189 + 32LL))(v189, this, "kData2");
  }
  uint64_t v190 = *(void *)(a1 + 1496);
  if (v190) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v190 + 32LL))(v190, this, "kData3");
  }
  uint64_t v191 = *(void *)(a1 + 1504);
  if (v191) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v191 + 32LL))(v191, this, "kDataA");
  }
  uint64_t v192 = *(void *)(a1 + 1512);
  if (v192) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v192 + 32LL))(v192, this, "kDataB");
  }
  uint64_t v193 = *(void *)(a1 + 1520);
  if (v193) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v193 + 32LL))(v193, this, "kDataC");
  }
  uint64_t v194 = *(void *)(a1 + 1528);
  if (v194) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v194 + 32LL))(v194, this, "kDataD");
  }
  uint64_t v195 = *(void *)(a1 + 1536);
  if (v195) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v195 + 32LL))(v195, this, "kDataE");
  }
  uint64_t v196 = *(void *)(a1 + 1544);
  if (v196) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v196 + 32LL))(v196, this, "kDataF");
  }
  uint64_t v197 = *(void *)(a1 + 1552);
  if (v197) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v197 + 32LL))(v197, this, "kDataG");
  }
  uint64_t v198 = *(void *)(a1 + 1560);
  if (v198) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v198 + 32LL))(v198, this, "kDataH");
  }
  uint64_t v199 = *(void *)(a1 + 1568);
  if (v199) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v199 + 32LL))(v199, this, "kDataI");
  }
  uint64_t v200 = *(void *)(a1 + 1576);
  if (v200) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v200 + 32LL))(v200, this, "kDataJ");
  }
  uint64_t v201 = *(void *)(a1 + 1584);
  if (v201) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v201 + 32LL))(v201, this, "kDataK");
  }
  uint64_t v202 = *(void *)(a1 + 1592);
  if (v202) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v202 + 32LL))(v202, this, "kDataL");
  }
  uint64_t v203 = *(void *)(a1 + 1600);
  if (v203) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v203 + 32LL))(v203, this, "kDataM");
  }
  uint64_t v204 = *(void *)(a1 + 1608);
  if (v204) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v204 + 32LL))(v204, this, "kDataN");
  }
  uint64_t v205 = *(void *)(a1 + 1616);
  if (v205) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v205 + 32LL))(v205, this, "kDataO");
  }
  uint64_t v206 = *(void *)(a1 + 1624);
  if (v206) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v206 + 32LL))(v206, this, "kDataP");
  }
  uint64_t v207 = *(void *)(a1 + 1632);
  if (v207) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v207 + 32LL))(v207, this, "kDataQ");
  }
  uint64_t v208 = *(void *)(a1 + 1640);
  if (v208) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v208 + 32LL))(v208, this, "kDataR");
  }
  uint64_t v209 = *(void *)(a1 + 1648);
  if (v209) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v209 + 32LL))(v209, this, "kDataS");
  }
  uint64_t v210 = *(void *)(a1 + 1656);
  if (v210) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v210 + 32LL))(v210, this, "kDataT");
  }
  uint64_t v211 = *(void *)(a1 + 1664);
  if (v211) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v211 + 32LL))(v211, this, "kDataU");
  }
  uint64_t v212 = *(void *)(a1 + 1672);
  if (v212) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v212 + 32LL))(v212, this, "kDataV");
  }
  uint64_t v213 = *(void *)(a1 + 1680);
  if (v213) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v213 + 32LL))(v213, this, "kDataW");
  }
  uint64_t v214 = *(void *)(a1 + 1688);
  if (v214) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v214 + 32LL))(v214, this, "kDataY");
  }
  uint64_t v215 = *(void *)(a1 + 1696);
  if (v215) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v215 + 32LL))(v215, this, "kDataZ");
  }
  uint64_t v216 = *(void *)(a1 + 1704);
  if (v216) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v216 + 32LL))(v216, this, "kDataZZ");
  }
  uint64_t v217 = *(void *)(a1 + 1712);
  if (v217) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v217 + 32LL))( v217,  this,  "kDataZZZ");
  }
  uint64_t v218 = *(void *)(a1 + 1720);
  if (v218) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v218 + 32LL))( v218,  this,  "kappaActivityPhone");
  }
  uint64_t v219 = *(void *)(a1 + 1728);
  if (v219) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v219 + 32LL))( v219,  this,  "kappaActivityWatch");
  }
  uint64_t v220 = *(void *)(a1 + 1736);
  if (v220) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v220 + 32LL))( v220,  this,  "kappaPeakDetectorMapMagTimestamps");
  }
  uint64_t v221 = *(void *)(a1 + 1744);
  if (v221) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v221 + 32LL))( v221,  this,  "kappaPeakDetectorMapResult");
  }
  uint64_t v222 = *(void *)(a1 + 1752);
  if (v222) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v222 + 32LL))( v222,  this,  "kappaRoads");
  }
  uint64_t v223 = *(void *)(a1 + 1760);
  if (v223) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v223 + 32LL))( v223,  this,  "kappaRoadsResult");
  }
  uint64_t v224 = *(void *)(a1 + 1768);
  if (v224) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v224 + 32LL))( v224,  this,  "kappaTriggerClustersResult");
  }
  uint64_t v225 = *(void *)(a1 + 1776);
  if (v225) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v225 + 32LL))( v225,  this,  "keyboardAttached");
  }
  uint64_t v226 = *(void *)(a1 + 1784);
  if (v226) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v226 + 32LL))( v226,  this,  "keyboardKeyPress");
  }
  uint64_t v227 = *(void *)(a1 + 1792);
  if (v227) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v227 + 32LL))( v227,  this,  "keyboardMotionFeatures");
  }
  uint64_t v228 = *(void *)(a1 + 1800);
  if (v228) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v228 + 32LL))( v228,  this,  "keyboardMotionState");
  }
  uint64_t v229 = *(void *)(a1 + 1808);
  if (v229) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v229 + 32LL))( v229,  this,  "keyboardMotionTrackpad");
  }
  uint64_t v230 = *(void *)(a1 + 1816);
  if (v230) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v230 + 32LL))( v230,  this,  "kmVelocityEstimatorState");
  }
  uint64_t v231 = *(void *)(a1 + 1824);
  if (v231) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v231 + 32LL))( v231,  this,  "legacyALS5CHInput");
  }
  uint64_t v232 = *(void *)(a1 + 1832);
  if (v232) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v232 + 32LL))( v232,  this,  "liftToWakeFeaturesNeo");
  }
  uint64_t v233 = *(void *)(a1 + 1840);
  if (v233) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v233 + 32LL))( v233,  this,  "liftToWakeOnHeadStatus");
  }
  uint64_t v234 = *(void *)(a1 + 1848);
  if (v234) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v234 + 32LL))( v234,  this,  "liftToWakeState");
  }
  uint64_t v235 = *(void *)(a1 + 1856);
  if (v235) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v235 + 32LL))( v235,  this,  "liftToWakeStatusNeo");
  }
  uint64_t v236 = *(void *)(a1 + 1864);
  if (v236) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v236 + 32LL))( v236,  this,  "locationOscarEmu");
  }
  uint64_t v237 = *(void *)(a1 + 1872);
  if (v237) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v237 + 32LL))( v237,  this,  "lockScreenStatus");
  }
  uint64_t v238 = *(void *)(a1 + 1880);
  if (v238) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v238 + 32LL))( v238,  this,  "lslHeadingEstimation");
  }
  uint64_t v239 = *(void *)(a1 + 1888);
  if (v239) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v239 + 32LL))( v239,  this,  "mLBasedBioMotionClassification");
  }
  uint64_t v240 = *(void *)(a1 + 1896);
  if (v240) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v240 + 32LL))( v240,  this,  "magicMountState");
  }
  uint64_t v241 = *(void *)(a1 + 1904);
  if (v241) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v241 + 32LL))( v241,  this,  "magneticAccessoryType1");
  }
  uint64_t v242 = *(void *)(a1 + 1912);
  if (v242) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v242 + 32LL))( v242,  this,  "magneticAccessoryType2");
  }
  uint64_t v243 = *(void *)(a1 + 1920);
  if (v243) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v243 + 32LL))( v243,  this,  "magnetometer");
  }
  uint64_t v244 = *(void *)(a1 + 1928);
  if (v244) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v244 + 32LL))( v244,  this,  "magnetometerCalibratorFilterParameters");
  }
  uint64_t v245 = *(void *)(a1 + 1936);
  if (v245) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v245 + 32LL))( v245,  this,  "magnetometerReset");
  }
  uint64_t v246 = *(void *)(a1 + 1944);
  if (v246) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v246 + 32LL))( v246,  this,  "mapsRouteHintData");
  }
  uint64_t v247 = *(void *)(a1 + 1952);
  if (v247) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v247 + 32LL))( v247,  this,  "metsInfo");
  }
  uint64_t v248 = *(void *)(a1 + 1960);
  if (v248) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v248 + 32LL))( v248,  this,  "mobilityBoutMetrics");
  }
  uint64_t v249 = *(void *)(a1 + 1968);
  if (v249) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v249 + 32LL))( v249,  this,  "mobilitySmoothedGaitMetrics");
  }
  uint64_t v250 = *(void *)(a1 + 1976);
  if (v250) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v250 + 32LL))( v250,  this,  "modelBasedBioMotionClassification");
  }
  uint64_t v251 = *(void *)(a1 + 1984);
  if (v251) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v251 + 32LL))( v251,  this,  "motionActivity");
  }
  uint64_t v252 = *(void *)(a1 + 1992);
  if (v252) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v252 + 32LL))( v252,  this,  "motionActivityReplay");
  }
  uint64_t v253 = *(void *)(a1 + 2000);
  if (v253) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v253 + 32LL))( v253,  this,  "motionContextActivity");
  }
  uint64_t v254 = *(void *)(a1 + 2008);
  if (v254) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v254 + 32LL))( v254,  this,  "motionGPSLocation");
  }
  uint64_t v255 = *(void *)(a1 + 2016);
  if (v255) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v255 + 32LL))( v255,  this,  "motionHint");
  }
  uint64_t v256 = *(void *)(a1 + 2024);
  if (v256) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v256 + 32LL))( v256,  this,  "motionLocation");
  }
  uint64_t v257 = *(void *)(a1 + 2032);
  if (v257) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v257 + 32LL))( v257,  this,  "motionLoiAltitudeData");
  }
  uint64_t v258 = *(void *)(a1 + 2040);
  if (v258) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v258 + 32LL))( v258,  this,  "motionLoiData");
  }
  uint64_t v259 = *(void *)(a1 + 2048);
  if (v259) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v259 + 32LL))( v259,  this,  "motionStateUpdate");
  }
  uint64_t v260 = *(void *)(a1 + 2056);
  if (v260) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v260 + 32LL))( v260,  this,  "motionWifiAssociation");
  }
  uint64_t v261 = *(void *)(a1 + 2064);
  if (v261) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v261 + 32LL))( v261,  this,  "motionWifiLocation");
  }
  uint64_t v262 = *(void *)(a1 + 2072);
  if (v262) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v262 + 32LL))( v262,  this,  "movementStats");
  }
  uint64_t v263 = *(void *)(a1 + 2080);
  if (v263) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v263 + 32LL))( v263,  this,  "movementStatsGravityProjection");
  }
  uint64_t v264 = *(void *)(a1 + 2088);
  if (v264) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v264 + 32LL))( v264,  this,  "movementStatsSignal");
  }
  uint64_t v265 = *(void *)(a1 + 2096);
  if (v265) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v265 + 32LL))( v265,  this,  "natalieData");
  }
  uint64_t v266 = *(void *)(a1 + 2104);
  if (v266) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v266 + 32LL))( v266,  this,  "nonlinearBiasFit");
  }
  uint64_t v267 = *(void *)(a1 + 2112);
  if (v267) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v267 + 32LL))( v267,  this,  "odometer");
  }
  uint64_t v268 = *(void *)(a1 + 2120);
  if (v268) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v268 + 32LL))( v268,  this,  "odometerWithAltitude");
  }
  uint64_t v269 = *(void *)(a1 + 2128);
  if (v269) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v269 + 32LL))(v269, this, "odtPose");
  }
  uint64_t v270 = *(void *)(a1 + 2136);
  if (v270) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v270 + 32LL))( v270,  this,  "onsetHeartRateData");
  }
  uint64_t v271 = *(void *)(a1 + 2144);
  if (v271) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v271 + 32LL))( v271,  this,  "orientation");
  }
  uint64_t v272 = *(void *)(a1 + 2152);
  if (v272) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v272 + 32LL))( v272,  this,  "pdrAlgType");
  }
  uint64_t v273 = *(void *)(a1 + 2160);
  if (v273) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v273 + 32LL))( v273,  this,  "pdrDOTEstimatorState");
  }
  uint64_t v274 = *(void *)(a1 + 2168);
  if (v274) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v274 + 32LL))( v274,  this,  "pdrDOTEstimatorStateArmSwing");
  }
  uint64_t v275 = *(void *)(a1 + 2176);
  if (v275) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v275 + 32LL))( v275,  this,  "pdrDOTEstimatorStateBody");
  }
  uint64_t v276 = *(void *)(a1 + 2184);
  if (v276) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v276 + 32LL))( v276,  this,  "pdrDOTEstimatorStateBodyDebug");
  }
  uint64_t v277 = *(void *)(a1 + 2192);
  if (v277) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v277 + 32LL))( v277,  this,  "pdrDOTEstimatorStateDebug");
  }
  uint64_t v278 = *(void *)(a1 + 2200);
  if (v278) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v278 + 32LL))( v278,  this,  "pdrDOTEstimatorStateHeading");
  }
  uint64_t v279 = *(void *)(a1 + 2208);
  if (v279) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v279 + 32LL))( v279,  this,  "pdrDOTEstimatorUncertaintyModelOnBody");
  }
  uint64_t v280 = *(void *)(a1 + 2216);
  if (v280) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v280 + 32LL))( v280,  this,  "pdrDOTMeasurementSelectorState");
  }
  uint64_t v281 = *(void *)(a1 + 2224);
  if (v281) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v281 + 32LL))( v281,  this,  "pdrFeatures");
  }
  uint64_t v282 = *(void *)(a1 + 2232);
  if (v282) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v282 + 32LL))( v282,  this,  "pdrFenceReference");
  }
  uint64_t v283 = *(void *)(a1 + 2240);
  if (v283) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v283 + 32LL))( v283,  this,  "pdrFenceState");
  }
  uint64_t v284 = *(void *)(a1 + 2248);
  if (v284) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v284 + 32LL))( v284,  this,  "pdrImpulse");
  }
  uint64_t v285 = *(void *)(a1 + 2256);
  if (v285) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v285 + 32LL))( v285,  this,  "pdrMLModelOutput");
  }
  uint64_t v286 = *(void *)(a1 + 2264);
  if (v286) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v286 + 32LL))( v286,  this,  "pdrPedestrianClassifierState");
  }
  uint64_t v287 = *(void *)(a1 + 2272);
  if (v287) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v287 + 32LL))( v287,  this,  "pdrPlacementClassifierState");
  }
  uint64_t v288 = *(void *)(a1 + 2280);
  if (v288) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v288 + 32LL))( v288,  this,  "pdrSpeedEstimatorState");
  }
  uint64_t v289 = *(void *)(a1 + 2288);
  if (v289) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v289 + 32LL))( v289,  this,  "pdrSpeedEstimatorStateDebug");
  }
  uint64_t v290 = *(void *)(a1 + 2296);
  if (v290) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v290 + 32LL))( v290,  this,  "pdrVelocityEstimatorState");
  }
  uint64_t v291 = *(void *)(a1 + 2304);
  if (v291) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v291 + 32LL))( v291,  this,  "pearlAttitude");
  }
  uint64_t v292 = *(void *)(a1 + 2312);
  if (v292) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v292 + 32LL))( v292,  this,  "pedOdomFusionExtendedModeSegment");
  }
  uint64_t v293 = *(void *)(a1 + 2320);
  if (v293) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v293 + 32LL))( v293,  this,  "pedestrianCalorieModelDebugging");
  }
  uint64_t v294 = *(void *)(a1 + 2328);
  if (v294) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v294 + 32LL))( v294,  this,  "pedestrianFenceExit");
  }
  uint64_t v295 = *(void *)(a1 + 2336);
  if (v295) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v295 + 32LL))( v295,  this,  "pedometerPathStraightness");
  }
  uint64_t v296 = *(void *)(a1 + 2344);
  if (v296) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v296 + 32LL))( v296,  this,  "peerState");
  }
  uint64_t v297 = *(void *)(a1 + 2352);
  if (v297) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v297 + 32LL))( v297,  this,  "pencilDeviceMotion");
  }
  uint64_t v298 = *(void *)(a1 + 2360);
  if (v298) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v298 + 32LL))( v298,  this,  "pencilFusionDMYawAlignmentUpdate");
  }
  uint64_t v299 = *(void *)(a1 + 2368);
  if (v299) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v299 + 32LL))( v299,  this,  "pencilFusionReplayResult");
  }
  uint64_t v300 = *(void *)(a1 + 2376);
  if (v300) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v300 + 32LL))( v300,  this,  "pencilFusionResult");
  }
  uint64_t v301 = *(void *)(a1 + 2384);
  if (v301) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v301 + 32LL))( v301,  this,  "pencilFusionRingSensorTrustModelUpdate");
  }
  uint64_t v302 = *(void *)(a1 + 2392);
  if (v302) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v302 + 32LL))( v302,  this,  "pencilTipForce");
  }
  uint64_t v303 = *(void *)(a1 + 2400);
  if (v303) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v303 + 32LL))( v303,  this,  "pencilTouch");
  }
  uint64_t v304 = *(void *)(a1 + 2408);
  if (v304) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v304 + 32LL))( v304,  this,  "physicalEffortInput");
  }
  uint64_t v305 = *(void *)(a1 + 2416);
  if (v305) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v305 + 32LL))( v305,  this,  "physicalEffortSample");
  }
  uint64_t v306 = *(void *)(a1 + 2424);
  if (v306) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v306 + 32LL))( v306,  this,  "pocketDetectionPacket");
  }
  uint64_t v307 = *(void *)(a1 + 2432);
  if (v307) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v307 + 32LL))(v307, this, "pose");
  }
  uint64_t v308 = *(void *)(a1 + 2440);
  if (v308) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v308 + 32LL))( v308,  this,  "poseState");
  }
  uint64_t v309 = *(void *)(a1 + 2448);
  if (v309) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v309 + 32LL))( v309,  this,  "postureJoint");
  }
  uint64_t v310 = *(void *)(a1 + 2456);
  if (v310) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v310 + 32LL))( v310,  this,  "postureSkeleton");
  }
  uint64_t v311 = *(void *)(a1 + 2464);
  if (v311) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v311 + 32LL))( v311,  this,  "powerManagementUserActivity");
  }
  uint64_t v312 = *(void *)(a1 + 2472);
  if (v312) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v312 + 32LL))( v312,  this,  "precisionFindingDOTEstimate");
  }
  uint64_t v313 = *(void *)(a1 + 2480);
  if (v313) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v313 + 32LL))( v313,  this,  "precisionFindingRangeFilter");
  }
  uint64_t v314 = *(void *)(a1 + 2488);
  if (v314) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v314 + 32LL))( v314,  this,  "precisionFindingSessionStartStop");
  }
  uint64_t v315 = *(void *)(a1 + 2496);
  if (v315) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v315 + 32LL))( v315,  this,  "precisionFindingState");
  }
  uint64_t v316 = *(void *)(a1 + 2504);
  if (v316) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v316 + 32LL))( v316,  this,  "precisionFindingVelocityEstimate");
  }
  uint64_t v317 = *(void *)(a1 + 2512);
  if (v317) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v317 + 32LL))( v317,  this,  "precisionFindingVerticalState");
  }
  uint64_t v318 = *(void *)(a1 + 2520);
  if (v318) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v318 + 32LL))( v318,  this,  "predictedRelativeDeviceMotion");
  }
  uint64_t v319 = *(void *)(a1 + 2528);
  if (v319) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v319 + 32LL))( v319,  this,  "pressure");
  }
  uint64_t v320 = *(void *)(a1 + 2536);
  if (v320) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v320 + 32LL))( v320,  this,  "pressureCalibration");
  }
  uint64_t v321 = *(void *)(a1 + 2544);
  if (v321) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v321 + 32LL))( v321,  this,  "pressureCompensated");
  }
  uint64_t v322 = *(void *)(a1 + 2552);
  if (v322) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v322 + 32LL))( v322,  this,  "pressureFiltered");
  }
  uint64_t v323 = *(void *)(a1 + 2560);
  if (v323) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v323 + 32LL))( v323,  this,  "pressureFiltered1HzLowPass");
  }
  uint64_t v324 = *(void *)(a1 + 2568);
  if (v324) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v324 + 32LL))( v324,  this,  "pressureFilteredNoTemperature");
  }
  uint64_t v325 = *(void *)(a1 + 2576);
  if (v325) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v325 + 32LL))( v325,  this,  "pressureGps");
  }
  uint64_t v326 = *(void *)(a1 + 2584);
  if (v326) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v326 + 32LL))( v326,  this,  "pressureOscarEmu");
  }
  uint64_t v327 = *(void *)(a1 + 2592);
  if (v327) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v327 + 32LL))(v327, this, "prox");
  }
  uint64_t v328 = *(void *)(a1 + 2600);
  if (v328) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v328 + 32LL))( v328,  this,  "proxBaselineEstimatorState");
  }
  uint64_t v329 = *(void *)(a1 + 2608);
  if (v329) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v329 + 32LL))( v329,  this,  "proxCalibration");
  }
  uint64_t v330 = *(void *)(a1 + 2616);
  if (v330) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v330 + 32LL))(v330, this, "proxPDP");
  }
  uint64_t v331 = *(void *)(a1 + 2624);
  if (v331) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v331 + 32LL))( v331,  this,  "ptsConsumedGNSS");
  }
  uint64_t v332 = *(void *)(a1 + 2632);
  if (v332) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v332 + 32LL))( v332,  this,  "ptsForwardPropagation");
  }
  uint64_t v333 = *(void *)(a1 + 2640);
  if (v333) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v333 + 32LL))( v333,  this,  "ptsMapMatchedRoute");
  }
  uint64_t v334 = *(void *)(a1 + 2648);
  if (v334) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v334 + 32LL))( v334,  this,  "ptsReconstructedRoute");
  }
  uint64_t v335 = *(void *)(a1 + 2656);
  if (v335) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v335 + 32LL))( v335,  this,  "rawAudio");
  }
  uint64_t v336 = *(void *)(a1 + 2664);
  if (v336) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v336 + 32LL))( v336,  this,  "relDMInSystemConfig");
  }
  uint64_t v337 = *(void *)(a1 + 2672);
  if (v337) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v337 + 32LL))( v337,  this,  "relativeDeviceMotionComplexTransition");
  }
  uint64_t v338 = *(void *)(a1 + 2680);
  if (v338) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v338 + 32LL))( v338,  this,  "relativeDeviceMotionCorrelatedMotion");
  }
  uint64_t v339 = *(void *)(a1 + 2688);
  if (v339) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v339 + 32LL))( v339,  this,  "relativeDeviceMotionInternal");
  }
  uint64_t v340 = *(void *)(a1 + 2696);
  if (v340) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v340 + 32LL))( v340,  this,  "relativeGravityConstraints");
  }
  uint64_t v341 = *(void *)(a1 + 2704);
  if (v341) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v341 + 32LL))( v341,  this,  "relativeGravityCorrection");
  }
  uint64_t v342 = *(void *)(a1 + 2712);
  if (v342) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v342 + 32LL))( v342,  this,  "rhythmicGnssOperatorStatus");
  }
  uint64_t v343 = *(void *)(a1 + 2720);
  if (v343) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v343 + 32LL))( v343,  this,  "rotationRate");
  }
  uint64_t v344 = *(void *)(a1 + 2728);
  if (v344) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v344 + 32LL))( v344,  this,  "runningArmSwingSignals");
  }
  uint64_t v345 = *(void *)(a1 + 2736);
  if (v345) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v345 + 32LL))( v345,  this,  "runningCentripetalAccelSignals");
  }
  uint64_t v346 = *(void *)(a1 + 2744);
  if (v346) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v346 + 32LL))( v346,  this,  "runningFormMetrics");
  }
  uint64_t v347 = *(void *)(a1 + 2752);
  if (v347) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v347 + 32LL))( v347,  this,  "runningPower");
  }
  uint64_t v348 = *(void *)(a1 + 2760);
  if (v348) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v348 + 32LL))( v348,  this,  "runningRotationAxis");
  }
  uint64_t v349 = *(void *)(a1 + 2768);
  if (v349) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v349 + 32LL))( v349,  this,  "runningSpeedKFResult");
  }
  uint64_t v350 = *(void *)(a1 + 2776);
  if (v350) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v350 + 32LL))( v350,  this,  "runningStrideLength");
  }
  uint64_t v351 = *(void *)(a1 + 2784);
  if (v351) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v351 + 32LL))( v351,  this,  "runningVerticalOscillation");
  }
  uint64_t v352 = *(void *)(a1 + 2792);
  if (v352) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v352 + 32LL))( v352,  this,  "runningVerticalOscillationGradientBoostedSignals");
  }
  uint64_t v353 = *(void *)(a1 + 2800);
  if (v353) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v353 + 32LL))( v353,  this,  "runningVerticalOscillationSignals");
  }
  uint64_t v354 = *(void *)(a1 + 2808);
  if (v354) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v354 + 32LL))( v354,  this,  "safetyCompanionStatus");
  }
  uint64_t v355 = *(void *)(a1 + 2816);
  if (v355) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v355 + 32LL))( v355,  this,  "safetyHertzSample");
  }
  uint64_t v356 = *(void *)(a1 + 2824);
  if (v356) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v356 + 32LL))( v356,  this,  "safetyRemoteSample");
  }
  uint64_t v357 = *(void *)(a1 + 2832);
  if (v357) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v357 + 32LL))( v357,  this,  "safetyTrustedAudioResult");
  }
  uint64_t v358 = *(void *)(a1 + 2840);
  if (v358) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v358 + 32LL))( v358,  this,  "sessionOverride");
  }
  uint64_t v359 = *(void *)(a1 + 2848);
  if (v359) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v359 + 32LL))( v359,  this,  "signalEnvironment");
  }
  uint64_t v360 = *(void *)(a1 + 2856);
  if (v360) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v360 + 32LL))( v360,  this,  "simActivityEvent");
  }
  uint64_t v361 = *(void *)(a1 + 2864);
  if (v361) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v361 + 32LL))( v361,  this,  "sitStandDetectorFeatures");
  }
  uint64_t v362 = *(void *)(a1 + 2872);
  if (v362) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v362 + 32LL))( v362,  this,  "sitStandDetectorPosteriorBufferStatsForSitToStand");
  }
  uint64_t v363 = *(void *)(a1 + 2880);
  if (v363) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v363 + 32LL))( v363,  this,  "sitStandDetectorPosteriorBufferStatsForStandToSit");
  }
  uint64_t v364 = *(void *)(a1 + 2888);
  if (v364) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v364 + 32LL))( v364,  this,  "sitStandDetectorTransitions");
  }
  uint64_t v365 = *(void *)(a1 + 2896);
  if (v365) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v365 + 32LL))( v365,  this,  "skeleton2D");
  }
  uint64_t v366 = *(void *)(a1 + 2904);
  if (v366) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v366 + 32LL))( v366,  this,  "skeleton3D");
  }
  uint64_t v367 = *(void *)(a1 + 2912);
  if (v367) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v367 + 32LL))( v367,  this,  "skeleton3DLifted");
  }
  uint64_t v368 = *(void *)(a1 + 2920);
  if (v368) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v368 + 32LL))( v368,  this,  "skeleton3DRetargeted");
  }
  uint64_t v369 = *(void *)(a1 + 2928);
  if (v369) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v369 + 32LL))( v369,  this,  "spatialEvent");
  }
  uint64_t v370 = *(void *)(a1 + 2936);
  if (v370) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v370 + 32LL))(v370, this, "spl");
  }
  uint64_t v371 = *(void *)(a1 + 2944);
  if (v371) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v371 + 32LL))( v371,  this,  "spuPlaybackExampleDeviceMotion");
  }
  uint64_t v372 = *(void *)(a1 + 2952);
  if (v372) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v372 + 32LL))( v372,  this,  "spuPlaybackExampleMotionStateUpdate");
  }
  uint64_t v373 = *(void *)(a1 + 2960);
  if (v373) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v373 + 32LL))( v373,  this,  "steadinessEvent");
  }
  uint64_t v374 = *(void *)(a1 + 2968);
  if (v374) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v374 + 32LL))( v374,  this,  "steadinessModelBalanceFeatures");
  }
  uint64_t v375 = *(void *)(a1 + 2976);
  if (v375) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v375 + 32LL))( v375,  this,  "steadinessModelContinuousWalkingFeatures");
  }
  uint64_t v376 = *(void *)(a1 + 2984);
  if (v376) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v376 + 32LL))( v376,  this,  "steadinessModelGaitBaselineFeatures");
  }
  uint64_t v377 = *(void *)(a1 + 2992);
  if (v377) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v377 + 32LL))( v377,  this,  "steadinessModelHarmonicFeatures");
  }
  uint64_t v378 = *(void *)(a1 + 3000);
  if (v378) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v378 + 32LL))( v378,  this,  "steadinessModelResult");
  }
  uint64_t v379 = *(void *)(a1 + 3008);
  if (v379) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v379 + 32LL))( v379,  this,  "steadinessModelTemporalDispersionFeatures");
  }
  uint64_t v380 = *(void *)(a1 + 3016);
  if (v380) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v380 + 32LL))( v380,  this,  "steadinessModelTemporalEntropyFeatures");
  }
  uint64_t v381 = *(void *)(a1 + 3024);
  if (v381) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v381 + 32LL))( v381,  this,  "stepCadenceToStrideLengthBin");
  }
  uint64_t v382 = *(void *)(a1 + 3032);
  if (v382) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v382 + 32LL))( v382,  this,  "stepCountEntry");
  }
  uint64_t v383 = *(void *)(a1 + 3040);
  if (v383) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v383 + 32LL))( v383,  this,  "stepCountEntryAddition");
  }
  uint64_t v384 = *(void *)(a1 + 3048);
  if (v384) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v384 + 32LL))( v384,  this,  "stepDistanceFusionResult");
  }
  uint64_t v385 = *(void *)(a1 + 3056);
  if (v385) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v385 + 32LL))( v385,  this,  "stepLikelihoodFeatures");
  }
  uint64_t v386 = *(void *)(a1 + 3064);
  if (v386) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v386 + 32LL))( v386,  this,  "streamingHeartRateData");
  }
  uint64_t v387 = *(void *)(a1 + 3072);
  if (v387) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v387 + 32LL))( v387,  this,  "streamingHighFrequencyHeartRateData");
  }
  uint64_t v388 = *(void *)(a1 + 3080);
  if (v388) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v388 + 32LL))( v388,  this,  "strideCalBin");
  }
  uint64_t v389 = *(void *)(a1 + 3088);
  if (v389) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v389 + 32LL))( v389,  this,  "strideCalEntry");
  }
  uint64_t v390 = *(void *)(a1 + 3096);
  if (v390) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v390 + 32LL))( v390,  this,  "subStats");
  }
  uint64_t v391 = *(void *)(a1 + 3104);
  if (v391) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v391 + 32LL))( v391,  this,  "swingDoTCandidate");
  }
  uint64_t v392 = *(void *)(a1 + 3112);
  if (v392) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v392 + 32LL))( v392,  this,  "tapAccept");
  }
  uint64_t v393 = *(void *)(a1 + 3120);
  if (v393) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v393 + 32LL))( v393,  this,  "tapDetect");
  }
  uint64_t v394 = *(void *)(a1 + 3128);
  if (v394) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v394 + 32LL))( v394,  this,  "tempestPoCAuxiliaryDeviceMotion");
  }
  uint64_t v395 = *(void *)(a1 + 3136);
  if (v395) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v395 + 32LL))( v395,  this,  "tempestPoCListenerOrientation");
  }
  uint64_t v396 = *(void *)(a1 + 3144);
  if (v396) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v396 + 32LL))( v396,  this,  "timestamp");
  }
  uint64_t v397 = *(void *)(a1 + 3152);
  if (v397) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v397 + 32LL))( v397,  this,  "touchOscarEmu");
  }
  uint64_t v398 = *(void *)(a1 + 3160);
  if (v398) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v398 + 32LL))( v398,  this,  "trackRunData");
  }
  uint64_t v399 = *(void *)(a1 + 3168);
  if (v399) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v399 + 32LL))( v399,  this,  "ultraFastAccel");
  }
  uint64_t v400 = *(void *)(a1 + 3176);
  if (v400) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v400 + 32LL))( v400,  this,  "userInteraction");
  }
  uint64_t v401 = *(void *)(a1 + 3184);
  if (v401) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v401 + 32LL))( v401,  this,  "userStudyEvent");
  }
  uint64_t v402 = *(void *)(a1 + 3192);
  if (v402) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v402 + 32LL))( v402,  this,  "uwbRange");
  }
  uint64_t v403 = *(void *)(a1 + 3200);
  if (v403) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v403 + 32LL))( v403,  this,  "vO2MaxModelInput");
  }
  uint64_t v404 = *(void *)(a1 + 3208);
  if (v404) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v404 + 32LL))( v404,  this,  "velocityEstimatorFusionState");
  }
  uint64_t v405 = *(void *)(a1 + 3216);
  if (v405) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v405 + 32LL))( v405,  this,  "vibrationEvent");
  }
  uint64_t v406 = *(void *)(a1 + 3224);
  if (v406) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v406 + 32LL))( v406,  this,  "viewObstructedMachineLearningDecision");
  }
  uint64_t v407 = *(void *)(a1 + 3232);
  if (v407) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v407 + 32LL))( v407,  this,  "viewObstructedMachineLearningFeatures");
  }
  uint64_t v408 = *(void *)(a1 + 3240);
  if (v408) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v408 + 32LL))( v408,  this,  "viewObstructedMachineLearningProbabilities");
  }
  uint64_t v409 = *(void *)(a1 + 3248);
  if (v409) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v409 + 32LL))( v409,  this,  "viewObstructedState");
  }
  uint64_t v410 = *(void *)(a1 + 3256);
  if (v410) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v410 + 32LL))( v410,  this,  "vioEstimation");
  }
  uint64_t v411 = *(void *)(a1 + 3264);
  if (v411) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v411 + 32LL))(v411, this, "vioPose");
  }
  uint64_t v412 = *(void *)(a1 + 3272);
  if (v412) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v412 + 32LL))( v412,  this,  "vioReplayPose");
  }
  uint64_t v413 = *(void *)(a1 + 3280);
  if (v413) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v413 + 32LL))( v413,  this,  "visionCompassBias");
  }
  uint64_t v414 = *(void *)(a1 + 3288);
  if (v414) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v414 + 32LL))( v414,  this,  "visualLocalization");
  }
  uint64_t v415 = *(void *)(a1 + 3296);
  if (v415) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v415 + 32LL))( v415,  this,  "visualLocalizationAttitudeConstraints");
  }
  uint64_t v416 = *(void *)(a1 + 3304);
  if (v416) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v416 + 32LL))( v416,  this,  "visualLocalizationAttitudeCorrection");
  }
  uint64_t v417 = *(void *)(a1 + 3312);
  if (v417) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v417 + 32LL))( v417,  this,  "visualStateMeasurement");
  }
  uint64_t v418 = *(void *)(a1 + 3320);
  if (v418) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v418 + 32LL))( v418,  this,  "vo2MaxInput");
  }
  uint64_t v419 = *(void *)(a1 + 3328);
  if (v419) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v419 + 32LL))( v419,  this,  "vo2MaxOutput");
  }
  uint64_t v420 = *(void *)(a1 + 3336);
  if (v420) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v420 + 32LL))( v420,  this,  "wakeGestureNotification");
  }
  uint64_t v421 = *(void *)(a1 + 3344);
  if (v421) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v421 + 32LL))( v421,  this,  "wakeGestureSample");
  }
  uint64_t v422 = *(void *)(a1 + 3352);
  if (v422) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v422 + 32LL))( v422,  this,  "walkingDetectionResult");
  }
  uint64_t v423 = *(void *)(a1 + 3360);
  if (v423) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v423 + 32LL))( v423,  this,  "walkingSteadinessClassification");
  }
  uint64_t v424 = *(void *)(a1 + 3368);
  if (v424) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v424 + 32LL))( v424,  this,  "watchActiveCalories");
  }
  uint64_t v425 = *(void *)(a1 + 3376);
  if (v425) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v425 + 32LL))( v425,  this,  "watchBasalCalories");
  }
  uint64_t v426 = *(void *)(a1 + 3384);
  if (v426) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v426 + 32LL))( v426,  this,  "watchEnclosureMaterial");
  }
  uint64_t v427 = *(void *)(a1 + 3392);
  if (v427) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v427 + 32LL))( v427,  this,  "watchHeartRateData");
  }
  uint64_t v428 = *(void *)(a1 + 3400);
  if (v428) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v428 + 32LL))( v428,  this,  "watchOnWristState");
  }
  uint64_t v429 = *(void *)(a1 + 3408);
  if (v429) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v429 + 32LL))( v429,  this,  "watchOrientationSettings");
  }
  uint64_t v430 = *(void *)(a1 + 3416);
  if (v430) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v430 + 32LL))( v430,  this,  "wifiScanResults");
  }
  uint64_t v431 = *(void *)(a1 + 3424);
  if (v431) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v431 + 32LL))( v431,  this,  "workoutActivity");
  }
  uint64_t v432 = *(void *)(a1 + 3432);
  if (v432) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v432 + 32LL))( v432,  this,  "workoutEvent");
  }
  uint64_t v433 = *(void *)(a1 + 3440);
  if (v433) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v433 + 32LL))( v433,  this,  "workoutRecorderALSData");
  }
  uint64_t v434 = *(void *)(a1 + 3448);
  if (v434) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v434 + 32LL))( v434,  this,  "workoutRecorderAccel");
  }
  uint64_t v435 = *(void *)(a1 + 3456);
  if (v435) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v435 + 32LL))( v435,  this,  "workoutRecorderAccel800");
  }
  uint64_t v436 = *(void *)(a1 + 3464);
  if (v436) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v436 + 32LL))( v436,  this,  "workoutRecorderAveragedALSData");
  }
  uint64_t v437 = *(void *)(a1 + 3472);
  if (v437) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v437 + 32LL))( v437,  this,  "workoutRecorderBodyMetrics");
  }
  uint64_t v438 = *(void *)(a1 + 3480);
  if (v438) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v438 + 32LL))( v438,  this,  "workoutRecorderCompassCalibration");
  }
  uint64_t v439 = *(void *)(a1 + 3488);
  if (v439) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v439 + 32LL))( v439,  this,  "workoutRecorderElevation");
  }
  uint64_t v440 = *(void *)(a1 + 3496);
  if (v440) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v440 + 32LL))( v440,  this,  "workoutRecorderFaceCovered");
  }
  uint64_t v441 = *(void *)(a1 + 3504);
  if (v441) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v441 + 32LL))( v441,  this,  "workoutRecorderFitnessMachineData");
  }
  uint64_t v442 = *(void *)(a1 + 3512);
  if (v442) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v442 + 32LL))( v442,  this,  "workoutRecorderHealthKitInfo");
  }
  uint64_t v443 = *(void *)(a1 + 3520);
  if (v443) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v443 + 32LL))( v443,  this,  "workoutRecorderHeartRate");
  }
  uint64_t v444 = *(void *)(a1 + 3528);
  if (v444) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v444 + 32LL))( v444,  this,  "workoutRecorderMagnetometer");
  }
  uint64_t v445 = *(void *)(a1 + 3536);
  if (v445) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v445 + 32LL))( v445,  this,  "workoutRecorderOdometer");
  }
  uint64_t v446 = *(void *)(a1 + 3544);
  if (v446) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v446 + 32LL))( v446,  this,  "workoutRecorderPressure");
  }
  uint64_t v447 = *(void *)(a1 + 3552);
  if (v447) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v447 + 32LL))( v447,  this,  "workoutRecorderRotationRate");
  }
  uint64_t v448 = *(void *)(a1 + 3560);
  if (v448) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v448 + 32LL))( v448,  this,  "workoutRecorderWatchOnWristStatus");
  }
  uint64_t v449 = *(void *)(a1 + 3568);
  if (v449) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v449 + 32LL))( v449,  this,  "workoutRecorderWatchOrientationSettings");
  }
  uint64_t v450 = *(void *)(a1 + 3576);
  if (v450) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v450 + 32LL))( v450,  this,  "workoutRecorderWifiScanResults");
  }
  uint64_t v451 = *(void *)(a1 + 3584);
  if (v451) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v451 + 32LL))( v451,  this,  "workoutRecorderWorkoutEvent");
  }
  uint64_t v452 = *(void *)(a1 + 3592);
  if (v452) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v452 + 32LL))( v452,  this,  "workoutRecorderWorkoutSessionPriors");
  }
  uint64_t v453 = *(void *)(a1 + 3600);
  if (v453) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v453 + 32LL))( v453,  this,  "workoutSessionPriors");
  }
  uint64_t v454 = *(void *)(a1 + 3608);
  if (v454) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v454 + 32LL))( v454,  this,  "zeroVelocityCorrection");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10113118C(void *a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        unint64_t v18 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (1)
        {
          if (v3 == v2)
          {
            unint64_t v12 = 0LL;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_24;
          }

          unint64_t v19 = v2 + 1;
          char v20 = *(_BYTE *)(v9 + v2);
          *((void *)this + 1) = v19;
          v18 |= (unint64_t)(v20 & 0x7F) << v16;
          if ((v20 & 0x80) == 0) {
            break;
          }
          v16 += 7;
          unint64_t v2 = v19;
          BOOL v15 = v17++ > 8;
          if (v15)
          {
LABEL_19:
            unint64_t v12 = 0LL;
            goto LABEL_24;
          }
        }

        if (*((_BYTE *)this + 24)) {
          unint64_t v12 = 0LL;
        }
        else {
          unint64_t v12 = v18;
        }
      }

      else
      {
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0LL;
        while (1)
        {
          unint64_t v13 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v14 = *(_BYTE *)(v9 + v2);
          v12 |= (unint64_t)(v14 & 0x7F) << v10;
          if ((v14 & 0x80) == 0) {
            break;
          }
          v10 += 7;
          unint64_t v2 = v13;
          BOOL v15 = v11++ > 8;
          if (v15) {
            goto LABEL_19;
          }
        }
      }

uint64_t sub_101136890(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if ((*(_BYTE *)(result + 3616) & 1) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 616), 1u);
  }
  int v4 = (const PB::Base *)v3[146];
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 2u);
  }
  uint64_t v5 = (const PB::Base *)v3[145];
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5, 3u);
  }
  uint64_t v6 = (const PB::Base *)v3[142];
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 4u);
  }
  uint64_t v7 = (const PB::Base *)v3[141];
  if (v7) {
    uint64_t result = PB::Writer::writeSubmessage(this, v7, 5u);
  }
  uint64_t v8 = (const PB::Base *)v3[85];
  if (v8) {
    uint64_t result = PB::Writer::writeSubmessage(this, v8, 6u);
  }
  uint64_t v9 = (const PB::Base *)v3[84];
  if (v9) {
    uint64_t result = PB::Writer::writeSubmessage(this, v9, 7u);
  }
  char v10 = (const PB::Base *)v3[91];
  if (v10) {
    uint64_t result = PB::Writer::writeSubmessage(this, v10, 8u);
  }
  unsigned int v11 = (const PB::Base *)v3[90];
  if (v11) {
    uint64_t result = PB::Writer::writeSubmessage(this, v11, 9u);
  }
  unint64_t v12 = (const PB::Base *)v3[180];
  if (v12) {
    uint64_t result = PB::Writer::writeSubmessage(this, v12, 0xAu);
  }
  unint64_t v13 = (const PB::Base *)v3[95];
  if (v13) {
    uint64_t result = PB::Writer::writeSubmessage(this, v13, 0xBu);
  }
  char v14 = (const PB::Base *)v3[11];
  if (v14) {
    uint64_t result = PB::Writer::writeSubmessage(this, v14, 0x10u);
  }
  BOOL v15 = (const PB::Base *)v3[18];
  if (v15) {
    uint64_t result = PB::Writer::writeSubmessage(this, v15, 0x11u);
  }
  char v16 = (const PB::Base *)v3[27];
  if (v16) {
    uint64_t result = PB::Writer::writeSubmessage(this, v16, 0x12u);
  }
  unsigned int v17 = (const PB::Base *)v3[431];
  if (v17) {
    uint64_t result = PB::Writer::writeSubmessage(this, v17, 0x13u);
  }
  unint64_t v18 = (const PB::Base *)v3[434];
  if (v18) {
    uint64_t result = PB::Writer::writeSubmessage(this, v18, 0x14u);
  }
  unint64_t v19 = (const PB::Base *)v3[436];
  if (v19) {
    uint64_t result = PB::Writer::writeSubmessage(this, v19, 0x15u);
  }
  char v20 = (const PB::Base *)v3[440];
  if (v20) {
    uint64_t result = PB::Writer::writeSubmessage(this, v20, 0x16u);
  }
  int v21 = (const PB::Base *)v3[444];
  if (v21) {
    uint64_t result = PB::Writer::writeSubmessage(this, v21, 0x17u);
  }
  BOOL v22 = (const PB::Base *)v3[442];
  if (v22) {
    uint64_t result = PB::Writer::writeSubmessage(this, v22, 0x18u);
  }
  unint64_t v23 = (const PB::Base *)v3[448];
  if (v23) {
    uint64_t result = PB::Writer::writeSubmessage(this, v23, 0x19u);
  }
  uint64_t v24 = (const PB::Base *)v3[415];
  if (v24) {
    uint64_t result = PB::Writer::writeSubmessage(this, v24, 0x1Au);
  }
  uint64_t v25 = (const PB::Base *)v3[68];
  if (v25) {
    uint64_t result = PB::Writer::writeSubmessage(this, v25, 0x1Bu);
  }
  uint64_t v26 = (const PB::Base *)v3[69];
  if (v26) {
    uint64_t result = PB::Writer::writeSubmessage(this, v26, 0x1Cu);
  }
  uint64_t v27 = (const PB::Base *)v3[70];
  if (v27) {
    uint64_t result = PB::Writer::writeSubmessage(this, v27, 0x1Du);
  }
  uint64_t v28 = (const PB::Base *)v3[67];
  if (v28) {
    uint64_t result = PB::Writer::writeSubmessage(this, v28, 0x1Eu);
  }
  uint64_t v29 = (const PB::Base *)v3[71];
  if (v29) {
    uint64_t result = PB::Writer::writeSubmessage(this, v29, 0x1Fu);
  }
  uint64_t v30 = (const PB::Base *)v3[439];
  if (v30) {
    uint64_t result = PB::Writer::writeSubmessage(this, v30, 0x20u);
  }
  uint64_t v31 = (const PB::Base *)v3[288];
  if (v31) {
    uint64_t result = PB::Writer::writeSubmessage(this, v31, 0x21u);
  }
  uint64_t v32 = (const PB::Base *)v3[340];
  if (v32) {
    uint64_t result = PB::Writer::writeSubmessage(this, v32, 0x22u);
  }
  uint64_t v33 = (const PB::Base *)v3[446];
  if (v33) {
    uint64_t result = PB::Writer::writeSubmessage(this, v33, 0x23u);
  }
  uint64_t v34 = (const PB::Base *)v3[425];
  if (v34) {
    uint64_t result = PB::Writer::writeSubmessage(this, v34, 0x24u);
  }
  uint64_t v35 = (const PB::Base *)v3[76];
  if (v35) {
    uint64_t result = PB::Writer::writeSubmessage(this, v35, 0x25u);
  }
  uint64_t v36 = (const PB::Base *)v3[427];
  if (v36) {
    uint64_t result = PB::Writer::writeSubmessage(this, v36, 0x26u);
  }
  uint64_t v37 = (const PB::Base *)v3[176];
  if (v37) {
    uint64_t result = PB::Writer::writeSubmessage(this, v37, 0x27u);
  }
  uint64_t v38 = (const PB::Base *)v3[174];
  if (v38) {
    uint64_t result = PB::Writer::writeSubmessage(this, v38, 0x28u);
  }
  uint64_t v39 = (const PB::Base *)v3[169];
  if (v39) {
    uint64_t result = PB::Writer::writeSubmessage(this, v39, 0x29u);
  }
  uint64_t v40 = (const PB::Base *)v3[28];
  if (v40) {
    uint64_t result = PB::Writer::writeSubmessage(this, v40, 0x2Au);
  }
  uint64_t v41 = (const PB::Base *)v3[29];
  if (v41) {
    uint64_t result = PB::Writer::writeSubmessage(this, v41, 0x2Bu);
  }
  uint64_t v42 = (const PB::Base *)v3[34];
  if (v42) {
    uint64_t result = PB::Writer::writeSubmessage(this, v42, 0x2Cu);
  }
  uint64_t v43 = (const PB::Base *)v3[114];
  if (v43) {
    uint64_t result = PB::Writer::writeSubmessage(this, v43, 0x2Du);
  }
  uint64_t v44 = (const PB::Base *)v3[447];
  if (v44) {
    uint64_t result = PB::Writer::writeSubmessage(this, v44, 0x2Eu);
  }
  uint64_t v45 = (const PB::Base *)v3[443];
  if (v45) {
    uint64_t result = PB::Writer::writeSubmessage(this, v45, 0x2Fu);
  }
  uint64_t v46 = (const PB::Base *)v3[168];
  if (v46) {
    uint64_t result = PB::Writer::writeSubmessage(this, v46, 0x30u);
  }
  uint64_t v47 = (const PB::Base *)v3[410];
  if (v47) {
    uint64_t result = PB::Writer::writeSubmessage(this, v47, 0x31u);
  }
  uint64_t v48 = (const PB::Base *)v3[44];
  if (v48) {
    uint64_t result = PB::Writer::writeSubmessage(this, v48, 0x32u);
  }
  uint64_t v49 = (const PB::Base *)v3[407];
  if (v49) {
    uint64_t result = PB::Writer::writeSubmessage(this, v49, 0x33u);
  }
  uint64_t v50 = (const PB::Base *)v3[235];
  if (v50) {
    uint64_t result = PB::Writer::writeSubmessage(this, v50, 0x34u);
  }
  uint64_t v51 = (const PB::Base *)v3[125];
  if (v51) {
    uint64_t result = PB::Writer::writeSubmessage(this, v51, 0x35u);
  }
  uint64_t v52 = (const PB::Base *)v3[10];
  if (v52) {
    uint64_t result = PB::Writer::writeSubmessage(this, v52, 0x36u);
  }
  uint64_t v53 = (const PB::Base *)v3[259];
  if (v53) {
    uint64_t result = PB::Writer::writeSubmessage(this, v53, 0x37u);
  }
  uint64_t v54 = (const PB::Base *)v3[379];
  if (v54) {
    uint64_t result = PB::Writer::writeSubmessage(this, v54, 0x38u);
  }
  uint64_t v55 = (const PB::Base *)v3[245];
  if (v55) {
    uint64_t result = PB::Writer::writeSubmessage(this, v55, 0x39u);
  }
  uint64_t v56 = (const PB::Base *)v3[89];
  if (v56) {
    uint64_t result = PB::Writer::writeSubmessage(this, v56, 0x3Au);
  }
  uint64_t v57 = (const PB::Base *)v3[408];
  if (v57) {
    uint64_t result = PB::Writer::writeSubmessage(this, v57, 0x3Bu);
  }
  uint64_t v58 = (const PB::Base *)v3[356];
  if (v58) {
    uint64_t result = PB::Writer::writeSubmessage(this, v58, 0x3Cu);
  }
  uint64_t v59 = (const PB::Base *)v3[409];
  if (v59) {
    uint64_t result = PB::Writer::writeSubmessage(this, v59, 0x3Du);
  }
  uint64_t v60 = (const PB::Base *)v3[414];
  if (v60) {
    uint64_t result = PB::Writer::writeSubmessage(this, v60, 0x3Eu);
  }
  uint64_t v61 = (const PB::Base *)v3[189];
  if (v61) {
    uint64_t result = PB::Writer::writeSubmessage(this, v61, 0x3Fu);
  }
  uint64_t v62 = (const PB::Base *)v3[190];
  if (v62) {
    uint64_t result = PB::Writer::writeSubmessage(this, v62, 0x40u);
  }
  uint64_t v63 = (const PB::Base *)v3[166];
  if (v63) {
    uint64_t result = PB::Writer::writeSubmessage(this, v63, 0x41u);
  }
  uint64_t v64 = (const PB::Base *)v3[213];
  if (v64) {
    uint64_t result = PB::Writer::writeSubmessage(this, v64, 0x42u);
  }
  uint64_t v65 = (const PB::Base *)v3[397];
  if (v65) {
    uint64_t result = PB::Writer::writeSubmessage(this, v65, 0x43u);
  }
  uint64_t v66 = (const PB::Base *)v3[219];
  if (v66) {
    uint64_t result = PB::Writer::writeSubmessage(this, v66, 0x44u);
  }
  uint64_t v67 = (const PB::Base *)v3[16];
  if (v67) {
    uint64_t result = PB::Writer::writeSubmessage(this, v67, 0x64u);
  }
  uint64_t v68 = (const PB::Base *)v3[398];
  if (v68) {
    uint64_t result = PB::Writer::writeSubmessage(this, v68, 0x65u);
  }
  uint64_t v69 = (const PB::Base *)v3[47];
  if (v69) {
    uint64_t result = PB::Writer::writeSubmessage(this, v69, 0x66u);
  }
  uint64_t v70 = (const PB::Base *)v3[391];
  if (v70) {
    uint64_t result = PB::Writer::writeSubmessage(this, v70, 0x67u);
  }
  uint64_t v71 = (const PB::Base *)v3[46];
  if (v71) {
    uint64_t result = PB::Writer::writeSubmessage(this, v71, 0x68u);
  }
  uint64_t v72 = (const PB::Base *)v3[392];
  if (v72) {
    uint64_t result = PB::Writer::writeSubmessage(this, v72, 0x69u);
  }
  uint64_t v73 = (const PB::Base *)v3[432];
  if (v73) {
    uint64_t result = PB::Writer::writeSubmessage(this, v73, 0x6Au);
  }
  uint64_t v74 = (const PB::Base *)v3[37];
  if (v74) {
    uint64_t result = PB::Writer::writeSubmessage(this, v74, 0x6Bu);
  }
  uint64_t v75 = (const PB::Base *)v3[430];
  if (v75) {
    uint64_t result = PB::Writer::writeSubmessage(this, v75, 0x6Cu);
  }
  uint64_t v76 = (const PB::Base *)v3[411];
  if (v76) {
    uint64_t result = PB::Writer::writeSubmessage(this, v76, 0x6Du);
  }
  uint64_t v77 = (const PB::Base *)v3[155];
  if (v77) {
    uint64_t result = PB::Writer::writeSubmessage(this, v77, 0x6Eu);
  }
  uint64_t v78 = (const PB::Base *)v3[367];
  if (v78) {
    uint64_t result = PB::Writer::writeSubmessage(this, v78, 0x6Fu);
  }
  uint64_t v79 = (const PB::Base *)v3[131];
  if (v79) {
    uint64_t result = PB::Writer::writeSubmessage(this, v79, 0x70u);
  }
  uint64_t v80 = (const PB::Base *)v3[109];
  if (v80) {
    uint64_t result = PB::Writer::writeSubmessage(this, v80, 0x71u);
  }
  uint64_t v81 = (const PB::Base *)v3[4];
  if (v81) {
    uint64_t result = PB::Writer::writeSubmessage(this, v81, 0x72u);
  }
  uint64_t v82 = (const PB::Base *)v3[253];
  if (v82) {
    uint64_t result = PB::Writer::writeSubmessage(this, v82, 0x73u);
  }
  uint64_t v83 = (const PB::Base *)v3[248];
  if (v83) {
    uint64_t result = PB::Writer::writeSubmessage(this, v83, 0x74u);
  }
  uint64_t v84 = (const PB::Base *)v3[62];
  if (v84) {
    uint64_t result = PB::Writer::writeSubmessage(this, v84, 0x75u);
  }
  uint64_t v85 = (const PB::Base *)v3[188];
  if (v85) {
    uint64_t result = PB::Writer::writeSubmessage(this, v85, 0x76u);
  }
  uint64_t v86 = (const PB::Base *)v3[333];
  if (v86) {
    uint64_t result = PB::Writer::writeSubmessage(this, v86, 0x77u);
  }
  uint64_t v87 = (const PB::Base *)v3[183];
  if (v87) {
    uint64_t result = PB::Writer::writeSubmessage(this, v87, 0x78u);
  }
  uint64_t v88 = (const PB::Base *)v3[88];
  if (v88) {
    uint64_t result = PB::Writer::writeSubmessage(this, v88, 0x79u);
  }
  uint64_t v89 = (const PB::Base *)v3[151];
  if (v89) {
    uint64_t result = PB::Writer::writeSubmessage(this, v89, 0x7Au);
  }
  uint64_t v90 = (const PB::Base *)v3[152];
  if (v90) {
    uint64_t result = PB::Writer::writeSubmessage(this, v90, 0x7Bu);
  }
  uint64_t v91 = (const PB::Base *)v3[150];
  if (v91) {
    uint64_t result = PB::Writer::writeSubmessage(this, v91, 0x7Cu);
  }
  uint64_t v92 = (const PB::Base *)v3[149];
  if (v92) {
    uint64_t result = PB::Writer::writeSubmessage(this, v92, 0x7Du);
  }
  uint64_t v93 = (const PB::Base *)v3[59];
  if (v93) {
    uint64_t result = PB::Writer::writeSubmessage(this, v93, 0x7Eu);
  }
  uint64_t v94 = (const PB::Base *)v3[132];
  if (v94) {
    uint64_t result = PB::Writer::writeSubmessage(this, v94, 0x7Fu);
  }
  uint64_t v95 = (const PB::Base *)v3[247];
  if (v95) {
    uint64_t result = PB::Writer::writeSubmessage(this, v95, 0x80u);
  }
  uint64_t v96 = (const PB::Base *)v3[236];
  if (v96) {
    uint64_t result = PB::Writer::writeSubmessage(this, v96, 0x81u);
  }
  uint64_t v97 = (const PB::Base *)v3[304];
  if (v97) {
    uint64_t result = PB::Writer::writeSubmessage(this, v97, 0x82u);
  }
  uint64_t v98 = (const PB::Base *)v3[305];
  if (v98) {
    uint64_t result = PB::Writer::writeSubmessage(this, v98, 0x83u);
  }
  uint64_t v99 = (const PB::Base *)v3[63];
  if (v99) {
    uint64_t result = PB::Writer::writeSubmessage(this, v99, 0x84u);
  }
  uint64_t v100 = (const PB::Base *)v3[184];
  if (v100) {
    uint64_t result = PB::Writer::writeSubmessage(this, v100, 0x85u);
  }
  uint64_t v101 = (const PB::Base *)v3[87];
  if (v101) {
    uint64_t result = PB::Writer::writeSubmessage(this, v101, 0x86u);
  }
  uint64_t v102 = (const PB::Base *)v3[318];
  if (v102) {
    uint64_t result = PB::Writer::writeSubmessage(this, v102, 0x87u);
  }
  uint64_t v103 = (const PB::Base *)v3[416];
  if (v103) {
    uint64_t result = PB::Writer::writeSubmessage(this, v103, 0x88u);
  }
  uint64_t v104 = (const PB::Base *)v3[238];
  if (v104) {
    uint64_t result = PB::Writer::writeSubmessage(this, v104, 0x8Bu);
  }
  uint64_t v105 = (const PB::Base *)v3[239];
  if (v105) {
    uint64_t result = PB::Writer::writeSubmessage(this, v105, 0x8Cu);
  }
  uint64_t v106 = (const PB::Base *)v3[317];
  if (v106) {
    uint64_t result = PB::Writer::writeSubmessage(this, v106, 0x8Du);
  }
  uint64_t v107 = (const PB::Base *)v3[441];
  if (v107) {
    uint64_t result = PB::Writer::writeSubmessage(this, v107, 0x8Eu);
  }
  uint64_t v108 = (const PB::Base *)v3[435];
  if (v108) {
    uint64_t result = PB::Writer::writeSubmessage(this, v108, 0x8Fu);
  }
  uint64_t v109 = (const PB::Base *)v3[332];
  if (v109) {
    uint64_t result = PB::Writer::writeSubmessage(this, v109, 0x90u);
  }
  uint64_t v110 = (const PB::Base *)v3[73];
  if (v110) {
    uint64_t result = PB::Writer::writeSubmessage(this, v110, 0x91u);
  }
  uint64_t v111 = (const PB::Base *)v3[60];
  if (v111) {
    uint64_t result = PB::Writer::writeSubmessage(this, v111, 0x94u);
  }
  uint64_t v112 = (const PB::Base *)v3[61];
  if (v112) {
    uint64_t result = PB::Writer::writeSubmessage(this, v112, 0x96u);
  }
  uint64_t v113 = (const PB::Base *)v3[266];
  if (v113) {
    uint64_t result = PB::Writer::writeSubmessage(this, v113, 0x97u);
  }
  uint64_t v114 = (const PB::Base *)v3[299];
  if (v114) {
    uint64_t result = PB::Writer::writeSubmessage(this, v114, 0x98u);
  }
  uint64_t v115 = (const PB::Base *)v3[300];
  if (v115) {
    uint64_t result = PB::Writer::writeSubmessage(this, v115, 0x99u);
  }
  uint64_t v116 = (const PB::Base *)v3[48];
  if (v116) {
    uint64_t result = PB::Writer::writeSubmessage(this, v116, 0x9Au);
  }
  uint64_t v117 = (const PB::Base *)v3[393];
  if (v117) {
    uint64_t result = PB::Writer::writeSubmessage(this, v117, 0x9Bu);
  }
  uint64_t v118 = (const PB::Base *)v3[43];
  if (v118) {
    uint64_t result = PB::Writer::writeSubmessage(this, v118, 0x9Cu);
  }
  uint64_t v119 = (const PB::Base *)v3[58];
  if (v119) {
    uint64_t result = PB::Writer::writeSubmessage(this, v119, 0x9Du);
  }
  uint64_t v120 = (const PB::Base *)v3[64];
  if (v120) {
    uint64_t result = PB::Writer::writeSubmessage(this, v120, 0x9Eu);
  }
  uint64_t v121 = (const PB::Base *)v3[420];
  if (v121) {
    uint64_t result = PB::Writer::writeSubmessage(this, v121, 0x9Fu);
  }
  uint64_t v122 = (const PB::Base *)v3[375];
  if (v122) {
    uint64_t result = PB::Writer::writeSubmessage(this, v122, 0xA0u);
  }
  uint64_t v123 = (const PB::Base *)v3[370];
  if (v123) {
    uint64_t result = PB::Writer::writeSubmessage(this, v123, 0xA1u);
  }
  uint64_t v124 = (const PB::Base *)v3[373];
  if (v124) {
    uint64_t result = PB::Writer::writeSubmessage(this, v124, 0xA2u);
  }
  uint64_t v125 = (const PB::Base *)v3[372];
  if (v125) {
    uint64_t result = PB::Writer::writeSubmessage(this, v125, 0xA3u);
  }
  uint64_t v126 = (const PB::Base *)v3[376];
  if (v126) {
    uint64_t result = PB::Writer::writeSubmessage(this, v126, 0xA4u);
  }
  uint64_t v127 = (const PB::Base *)v3[377];
  if (v127) {
    uint64_t result = PB::Writer::writeSubmessage(this, v127, 0xA5u);
  }
  uint64_t v128 = (const PB::Base *)v3[371];
  if (v128) {
    uint64_t result = PB::Writer::writeSubmessage(this, v128, 0xA6u);
  }
  uint64_t v129 = (const PB::Base *)v3[242];
  if (v129) {
    uint64_t result = PB::Writer::writeSubmessage(this, v129, 0xA7u);
  }
  uint64_t v130 = (const PB::Base *)v3[445];
  if (v130) {
    uint64_t result = PB::Writer::writeSubmessage(this, v130, 0xA8u);
  }
  uint64_t v131 = (const PB::Base *)v3[230];
  if (v131) {
    uint64_t result = PB::Writer::writeSubmessage(this, v131, 0xA9u);
  }
  uint64_t v132 = (const PB::Base *)v3[24];
  if (v132) {
    uint64_t result = PB::Writer::writeSubmessage(this, v132, 0xAAu);
  }
  uint64_t v133 = (const PB::Base *)v3[380];
  if (v133) {
    uint64_t result = PB::Writer::writeSubmessage(this, v133, 0xABu);
  }
  uint64_t v134 = (const PB::Base *)v3[381];
  if (v134) {
    uint64_t result = PB::Writer::writeSubmessage(this, v134, 0xACu);
  }
  uint64_t v135 = (const PB::Base *)v3[363];
  if (v135) {
    uint64_t result = PB::Writer::writeSubmessage(this, v135, 0xADu);
  }
  uint64_t v136 = (const PB::Base *)v3[92];
  if (v136) {
    uint64_t result = PB::Writer::writeSubmessage(this, v136, 0xAEu);
  }
  uint64_t v137 = (const PB::Base *)v3[111];
  if (v137) {
    uint64_t result = PB::Writer::writeSubmessage(this, v137, 0xAFu);
  }
  uint64_t v138 = (const PB::Base *)v3[57];
  if (v138) {
    uint64_t result = PB::Writer::writeSubmessage(this, v138, 0xB0u);
  }
  uint64_t v139 = (const PB::Base *)v3[234];
  if (v139) {
    uint64_t result = PB::Writer::writeSubmessage(this, v139, 0xB1u);
  }
  uint64_t v140 = (const PB::Base *)v3[56];
  if (v140) {
    uint64_t result = PB::Writer::writeSubmessage(this, v140, 0xB2u);
  }
  uint64_t v141 = (const PB::Base *)v3[308];
  if (v141) {
    uint64_t result = PB::Writer::writeSubmessage(this, v141, 0xB3u);
  }
  uint64_t v142 = (const PB::Base *)v3[130];
  if (v142) {
    uint64_t result = PB::Writer::writeSubmessage(this, v142, 0xB4u);
  }
  uint64_t v143 = (const PB::Base *)v3[98];
  if (v143) {
    uint64_t result = PB::Writer::writeSubmessage(this, v143, 0xB5u);
  }
  uint64_t v144 = (const PB::Base *)v3[1];
  if (v144) {
    uint64_t result = PB::Writer::writeSubmessage(this, v144, 0xB6u);
  }
  uint64_t v145 = (const PB::Base *)v3[2];
  if (v145) {
    uint64_t result = PB::Writer::writeSubmessage(this, v145, 0xB7u);
  }
  uint64_t v146 = (const PB::Base *)v3[40];
  if (v146) {
    uint64_t result = PB::Writer::writeSubmessage(this, v146, 0xB8u);
  }
  uint64_t v147 = (const PB::Base *)v3[231];
  if (v147) {
    uint64_t result = PB::Writer::writeSubmessage(this, v147, 0xB9u);
  }
  uint64_t v148 = (const PB::Base *)v3[406];
  if (v148) {
    uint64_t result = PB::Writer::writeSubmessage(this, v148, 0xBAu);
  }
  uint64_t v149 = (const PB::Base *)v3[343];
  if (v149) {
    uint64_t result = PB::Writer::writeSubmessage(this, v149, 0xBBu);
  }
  uint64_t v150 = (const PB::Base *)v3[450];
  if (v150) {
    uint64_t result = PB::Writer::writeSubmessage(this, v150, 0xBCu);
  }
  uint64_t v151 = (const PB::Base *)v3[449];
  if (v151) {
    uint64_t result = PB::Writer::writeSubmessage(this, v151, 0xBDu);
  }
  uint64_t v152 = (const PB::Base *)v3[45];
  if (v152) {
    uint64_t result = PB::Writer::writeSubmessage(this, v152, 0xBEu);
  }
  uint64_t v153 = (const PB::Base *)v3[281];
  if (v153) {
    uint64_t result = PB::Writer::writeSubmessage(this, v153, 0xBFu);
  }
  uint64_t v154 = (const PB::Base *)v3[303];
  if (v154) {
    uint64_t result = PB::Writer::writeSubmessage(this, v154, 0xC0u);
  }
  uint64_t v155 = (const PB::Base *)v3[229];
  if (v155) {
    uint64_t result = PB::Writer::writeSubmessage(this, v155, 0xC1u);
  }
  uint64_t v156 = (const PB::Base *)v3[232];
  if (v156) {
    uint64_t result = PB::Writer::writeSubmessage(this, v156, 0xC2u);
  }
  uint64_t v157 = (const PB::Base *)v3[344];
  if (v157) {
    uint64_t result = PB::Writer::writeSubmessage(this, v157, 0xC3u);
  }
  uint64_t v158 = (const PB::Base *)v3[51];
  if (v158) {
    uint64_t result = PB::Writer::writeSubmessage(this, v158, 0xC4u);
  }
  uint64_t v159 = (const PB::Base *)v3[52];
  if (v159) {
    uint64_t result = PB::Writer::writeSubmessage(this, v159, 0xC5u);
  }
  uint64_t v160 = (const PB::Base *)v3[250];
  if (v160) {
    uint64_t result = PB::Writer::writeSubmessage(this, v160, 0xC6u);
  }
  uint64_t v161 = (const PB::Base *)v3[269];
  if (v161) {
    uint64_t result = PB::Writer::writeSubmessage(this, v161, 0xC7u);
  }
  uint64_t v162 = (const PB::Base *)v3[9];
  if (v162) {
    uint64_t result = PB::Writer::writeSubmessage(this, v162, 0xC8u);
  }
  uint64_t v163 = (const PB::Base *)v3[104];
  if (v163) {
    uint64_t result = PB::Writer::writeSubmessage(this, v163, 0xC9u);
  }
  uint64_t v164 = (const PB::Base *)v3[282];
  if (v164) {
    uint64_t result = PB::Writer::writeSubmessage(this, v164, 0xCAu);
  }
  uint64_t v165 = (const PB::Base *)v3[136];
  if (v165) {
    uint64_t result = PB::Writer::writeSubmessage(this, v165, 0xCBu);
  }
  uint64_t v166 = (const PB::Base *)v3[137];
  if (v166) {
    uint64_t result = PB::Writer::writeSubmessage(this, v166, 0xCCu);
  }
  uint64_t v167 = (const PB::Base *)v3[135];
  if (v167) {
    uint64_t result = PB::Writer::writeSubmessage(this, v167, 0xCDu);
  }
  uint64_t v168 = (const PB::Base *)v3[112];
  if (v168) {
    uint64_t result = PB::Writer::writeSubmessage(this, v168, 0xCEu);
  }
  uint64_t v169 = (const PB::Base *)v3[433];
  if (v169) {
    uint64_t result = PB::Writer::writeSubmessage(this, v169, 0xCFu);
  }
  uint64_t v170 = (const PB::Base *)v3[386];
  if (v170) {
    uint64_t result = PB::Writer::writeSubmessage(this, v170, 0xD0u);
  }
  uint64_t v171 = (const PB::Base *)v3[346];
  if (v171) {
    uint64_t result = PB::Writer::writeSubmessage(this, v171, 0xD1u);
  }
  uint64_t v172 = (const PB::Base *)v3[327];
  if (v172) {
    uint64_t result = PB::Writer::writeSubmessage(this, v172, 0xD2u);
  }
  uint64_t v173 = (const PB::Base *)v3[224];
  if (v173) {
    uint64_t result = PB::Writer::writeSubmessage(this, v173, 0xD4u);
  }
  uint64_t v174 = (const PB::Base *)v3[225];
  if (v174) {
    uint64_t result = PB::Writer::writeSubmessage(this, v174, 0xD5u);
  }
  uint64_t v175 = (const PB::Base *)v3[38];
  if (v175) {
    uint64_t result = PB::Writer::writeSubmessage(this, v175, 0xD6u);
  }
  uint64_t v176 = (const PB::Base *)v3[223];
  if (v176) {
    uint64_t result = PB::Writer::writeSubmessage(this, v176, 0xD7u);
  }
  uint64_t v177 = (const PB::Base *)v3[417];
  if (v177) {
    uint64_t result = PB::Writer::writeSubmessage(this, v177, 0xD8u);
  }
  uint64_t v178 = (const PB::Base *)v3[325];
  if (v178) {
    uint64_t result = PB::Writer::writeSubmessage(this, v178, 0xD9u);
  }
  uint64_t v179 = (const PB::Base *)v3[54];
  if (v179) {
    uint64_t result = PB::Writer::writeSubmessage(this, v179, 0xDAu);
  }
  uint64_t v180 = (const PB::Base *)v3[339];
  if (v180) {
    uint64_t result = PB::Writer::writeSubmessage(this, v180, 0xDBu);
  }
  uint64_t v181 = (const PB::Base *)v3[226];
  if (v181) {
    uint64_t result = PB::Writer::writeSubmessage(this, v181, 0xDCu);
  }
  uint64_t v182 = (const PB::Base *)v3[222];
  if (v182) {
    uint64_t result = PB::Writer::writeSubmessage(this, v182, 0xDDu);
  }
  uint64_t v183 = (const PB::Base *)v3[50];
  if (v183) {
    uint64_t result = PB::Writer::writeSubmessage(this, v183, 0xDEu);
  }
  uint64_t v184 = (const PB::Base *)v3[55];
  if (v184) {
    uint64_t result = PB::Writer::writeSubmessage(this, v184, 0xDFu);
  }
  uint64_t v185 = (const PB::Base *)v3[165];
  if (v185) {
    uint64_t result = PB::Writer::writeSubmessage(this, v185, 0xE0u);
  }
  uint64_t v186 = (const PB::Base *)v3[362];
  if (v186) {
    uint64_t result = PB::Writer::writeSubmessage(this, v186, 0xE1u);
  }
  uint64_t v187 = (const PB::Base *)v3[365];
  if (v187) {
    uint64_t result = PB::Writer::writeSubmessage(this, v187, 0xE2u);
  }
  uint64_t v188 = (const PB::Base *)v3[364];
  if (v188) {
    uint64_t result = PB::Writer::writeSubmessage(this, v188, 0xE3u);
  }
  uint64_t v189 = (const PB::Base *)v3[129];
  if (v189) {
    uint64_t result = PB::Writer::writeSubmessage(this, v189, 0xE4u);
  }
  uint64_t v190 = (const PB::Base *)v3[424];
  if (v190) {
    uint64_t result = PB::Writer::writeSubmessage(this, v190, 0xE5u);
  }
  uint64_t v191 = (const PB::Base *)v3[115];
  if (v191) {
    uint64_t result = PB::Writer::writeSubmessage(this, v191, 0xE6u);
  }
  uint64_t v192 = (const PB::Base *)v3[421];
  if (v192) {
    uint64_t result = PB::Writer::writeSubmessage(this, v192, 0xE7u);
  }
  uint64_t v193 = (const PB::Base *)v3[422];
  if (v193) {
    uint64_t result = PB::Writer::writeSubmessage(this, v193, 0xE8u);
  }
  uint64_t v194 = (const PB::Base *)v3[395];
  if (v194) {
    uint64_t result = PB::Writer::writeSubmessage(this, v194, 0xE9u);
  }
  uint64_t v195 = (const PB::Base *)v3[139];
  if (v195) {
    uint64_t result = PB::Writer::writeSubmessage(this, v195, 0xEAu);
  }
  uint64_t v196 = (const PB::Base *)v3[140];
  if (v196) {
    uint64_t result = PB::Writer::writeSubmessage(this, v196, 0xEBu);
  }
  uint64_t v197 = (const PB::Base *)v3[243];
  if (v197) {
    uint64_t result = PB::Writer::writeSubmessage(this, v197, 0xECu);
  }
  uint64_t v198 = (const PB::Base *)v3[128];
  if (v198) {
    uint64_t result = PB::Writer::writeSubmessage(this, v198, 0xEDu);
  }
  uint64_t v199 = (const PB::Base *)v3[438];
  if (v199) {
    uint64_t result = PB::Writer::writeSubmessage(this, v199, 0xEEu);
  }
  uint64_t v200 = (const PB::Base *)v3[14];
  if (v200) {
    uint64_t result = PB::Writer::writeSubmessage(this, v200, 0xEFu);
  }
  uint64_t v201 = (const PB::Base *)v3[291];
  if (v201) {
    uint64_t result = PB::Writer::writeSubmessage(this, v201, 0xF0u);
  }
  uint64_t v202 = (const PB::Base *)v3[177];
  if (v202) {
    uint64_t result = PB::Writer::writeSubmessage(this, v202, 0xF1u);
  }
  uint64_t v203 = (const PB::Base *)v3[301];
  if (v203) {
    uint64_t result = PB::Writer::writeSubmessage(this, v203, 0xF2u);
  }
  uint64_t v204 = (const PB::Base *)v3[302];
  if (v204) {
    uint64_t result = PB::Writer::writeSubmessage(this, v204, 0xF3u);
  }
  uint64_t v205 = (const PB::Base *)v3[290];
  if (v205) {
    uint64_t result = PB::Writer::writeSubmessage(this, v205, 0xF4u);
  }
  uint64_t v206 = (const PB::Base *)v3[108];
  if (v206) {
    uint64_t result = PB::Writer::writeSubmessage(this, v206, 0xF5u);
  }
  uint64_t v207 = (const PB::Base *)v3[178];
  if (v207) {
    uint64_t result = PB::Writer::writeSubmessage(this, v207, 0xF6u);
  }
  uint64_t v208 = (const PB::Base *)v3[428];
  if (v208) {
    uint64_t result = PB::Writer::writeSubmessage(this, v208, 0xF7u);
  }
  uint64_t v209 = (const PB::Base *)v3[294];
  if (v209) {
    uint64_t result = PB::Writer::writeSubmessage(this, v209, 0xF8u);
  }
  uint64_t v210 = (const PB::Base *)v3[297];
  if (v210) {
    uint64_t result = PB::Writer::writeSubmessage(this, v210, 0xF9u);
  }
  uint64_t v211 = (const PB::Base *)v3[159];
  if (v211) {
    uint64_t result = PB::Writer::writeSubmessage(this, v211, 0xFAu);
  }
  uint64_t v212 = (const PB::Base *)v3[374];
  if (v212) {
    uint64_t result = PB::Writer::writeSubmessage(this, v212, 0xFBu);
  }
  uint64_t v213 = (const PB::Base *)v3[296];
  if (v213) {
    uint64_t result = PB::Writer::writeSubmessage(this, v213, 0xFCu);
  }
  uint64_t v214 = (const PB::Base *)v3[246];
  if (v214) {
    uint64_t result = PB::Writer::writeSubmessage(this, v214, 0xFDu);
  }
  uint64_t v215 = (const PB::Base *)v3[423];
  if (v215) {
    uint64_t result = PB::Writer::writeSubmessage(this, v215, 0xFEu);
  }
  uint64_t v216 = (const PB::Base *)v3[22];
  if (v216) {
    uint64_t result = PB::Writer::writeSubmessage(this, v216, 0xFFu);
  }
  uint64_t v217 = (const PB::Base *)v3[26];
  if (v217) {
    uint64_t result = PB::Writer::writeSubmessage(this, v217, 0x100u);
  }
  uint64_t v218 = (const PB::Base *)v3[254];
  if (v218) {
    uint64_t result = PB::Writer::writeSubmessage(this, v218, 0x101u);
  }
  uint64_t v219 = (const PB::Base *)v3[97];
  if (v219) {
    uint64_t result = PB::Writer::writeSubmessage(this, v219, 0x102u);
  }
  uint64_t v220 = (const PB::Base *)v3[306];
  if (v220) {
    uint64_t result = PB::Writer::writeSubmessage(this, v220, 0x103u);
  }
  uint64_t v221 = (const PB::Base *)v3[307];
  if (v221) {
    uint64_t result = PB::Writer::writeSubmessage(this, v221, 0x104u);
  }
  uint64_t v222 = (const PB::Base *)v3[167];
  if (v222) {
    uint64_t result = PB::Writer::writeSubmessage(this, v222, 0x105u);
  }
  uint64_t v223 = (const PB::Base *)v3[437];
  if (v223) {
    uint64_t result = PB::Writer::writeSubmessage(this, v223, 0x106u);
  }
  uint64_t v224 = (const PB::Base *)v3[384];
  if (v224) {
    uint64_t result = PB::Writer::writeSubmessage(this, v224, 0x107u);
  }
  uint64_t v225 = (const PB::Base *)v3[396];
  if (v225) {
    uint64_t result = PB::Writer::writeSubmessage(this, v225, 0x200u);
  }
  uint64_t v226 = (const PB::Base *)v3[3];
  if (v226) {
    uint64_t result = PB::Writer::writeSubmessage(this, v226, 0x3E9u);
  }
  uint64_t v227 = (const PB::Base *)v3[143];
  if (v227) {
    uint64_t result = PB::Writer::writeSubmessage(this, v227, 0x3EAu);
  }
  uint64_t v228 = (const PB::Base *)v3[240];
  if (v228) {
    uint64_t result = PB::Writer::writeSubmessage(this, v228, 0x3EBu);
  }
  uint64_t v229 = (const PB::Base *)v3[80];
  if (v229) {
    uint64_t result = PB::Writer::writeSubmessage(this, v229, 0x3ECu);
  }
  uint64_t v230 = (const PB::Base *)v3[93];
  if (v230) {
    uint64_t result = PB::Writer::writeSubmessage(this, v230, 0x3EDu);
  }
  uint64_t v231 = (const PB::Base *)v3[158];
  if (v231) {
    uint64_t result = PB::Writer::writeSubmessage(this, v231, 0x3EEu);
  }
  uint64_t v232 = (const PB::Base *)v3[7];
  if (v232) {
    uint64_t result = PB::Writer::writeSubmessage(this, v232, 0x3EFu);
  }
  uint64_t v233 = (const PB::Base *)v3[156];
  if (v233) {
    uint64_t result = PB::Writer::writeSubmessage(this, v233, 0x3F0u);
  }
  uint64_t v234 = (const PB::Base *)v3[5];
  if (v234) {
    uint64_t result = PB::Writer::writeSubmessage(this, v234, 0x3F1u);
  }
  uint64_t v235 = (const PB::Base *)v3[8];
  if (v235) {
    uint64_t result = PB::Writer::writeSubmessage(this, v235, 0x3F2u);
  }
  uint64_t v236 = (const PB::Base *)v3[81];
  if (v236) {
    uint64_t result = PB::Writer::writeSubmessage(this, v236, 0x3F3u);
  }
  uint64_t v237 = (const PB::Base *)v3[144];
  if (v237) {
    uint64_t result = PB::Writer::writeSubmessage(this, v237, 0x3F4u);
  }
  uint64_t v238 = (const PB::Base *)v3[316];
  if (v238) {
    uint64_t result = PB::Writer::writeSubmessage(this, v238, 0x3F5u);
  }
  uint64_t v239 = (const PB::Base *)v3[323];
  if (v239) {
    uint64_t result = PB::Writer::writeSubmessage(this, v239, 0x3F6u);
  }
  uint64_t v240 = (const PB::Base *)v3[322];
  if (v240) {
    uint64_t result = PB::Writer::writeSubmessage(this, v240, 0x3F7u);
  }
  uint64_t v241 = (const PB::Base *)v3[319];
  if (v241) {
    uint64_t result = PB::Writer::writeSubmessage(this, v241, 0x3F8u);
  }
  uint64_t v242 = (const PB::Base *)v3[148];
  if (v242) {
    uint64_t result = PB::Writer::writeSubmessage(this, v242, 0x3F9u);
  }
  uint64_t v243 = (const PB::Base *)v3[154];
  if (v243) {
    uint64_t result = PB::Writer::writeSubmessage(this, v243, 0x3FAu);
  }
  uint64_t v244 = (const PB::Base *)v3[324];
  if (v244) {
    uint64_t result = PB::Writer::writeSubmessage(this, v244, 0x3FBu);
  }
  uint64_t v245 = (const PB::Base *)v3[256];
  if (v245) {
    uint64_t result = PB::Writer::writeSubmessage(this, v245, 0x3FCu);
  }
  uint64_t v246 = (const PB::Base *)v3[153];
  if (v246) {
    uint64_t result = PB::Writer::writeSubmessage(this, v246, 0x3FDu);
  }
  uint64_t v247 = (const PB::Base *)v3[82];
  if (v247) {
    uint64_t result = PB::Writer::writeSubmessage(this, v247, 0x3FEu);
  }
  uint64_t v248 = (const PB::Base *)v3[157];
  if (v248) {
    uint64_t result = PB::Writer::writeSubmessage(this, v248, 0x3FFu);
  }
  uint64_t v249 = (const PB::Base *)v3[49];
  if (v249) {
    uint64_t result = PB::Writer::writeSubmessage(this, v249, 0x400u);
  }
  uint64_t v250 = (const PB::Base *)v3[394];
  if (v250) {
    uint64_t result = PB::Writer::writeSubmessage(this, v250, 0x401u);
  }
  uint64_t v251 = (const PB::Base *)v3[355];
  if (v251) {
    uint64_t result = PB::Writer::writeSubmessage(this, v251, 0x402u);
  }
  uint64_t v252 = (const PB::Base *)v3[252];
  if (v252) {
    uint64_t result = PB::Writer::writeSubmessage(this, v252, 0x403u);
  }
  uint64_t v253 = (const PB::Base *)v3[6];
  if (v253) {
    uint64_t result = PB::Writer::writeSubmessage(this, v253, 0x404u);
  }
  uint64_t v254 = (const PB::Base *)v3[233];
  if (v254) {
    uint64_t result = PB::Writer::writeSubmessage(this, v254, 0x405u);
  }
  uint64_t v255 = (const PB::Base *)v3[110];
  if (v255) {
    uint64_t result = PB::Writer::writeSubmessage(this, v255, 0x406u);
  }
  uint64_t v256 = (const PB::Base *)v3[263];
  if (v256) {
    uint64_t result = PB::Writer::writeSubmessage(this, v256, 0x407u);
  }
  uint64_t v257 = (const PB::Base *)v3[262];
  if (v257) {
    uint64_t result = PB::Writer::writeSubmessage(this, v257, 0x408u);
  }
  uint64_t v258 = (const PB::Base *)v3[66];
  if (v258) {
    uint64_t result = PB::Writer::writeSubmessage(this, v258, 0x409u);
  }
  uint64_t v259 = (const PB::Base *)v3[429];
  if (v259) {
    uint64_t result = PB::Writer::writeSubmessage(this, v259, 0x40Au);
  }
  uint64_t v260 = (const PB::Base *)v3[267];
  if (v260) {
    uint64_t result = PB::Writer::writeSubmessage(this, v260, 0x40Bu);
  }
  uint64_t v261 = (const PB::Base *)v3[383];
  if (v261) {
    uint64_t result = PB::Writer::writeSubmessage(this, v261, 0x40Cu);
  }
  uint64_t v262 = (const PB::Base *)v3[106];
  if (v262) {
    uint64_t result = PB::Writer::writeSubmessage(this, v262, 0x40Du);
  }
  uint64_t v263 = (const PB::Base *)v3[251];
  if (v263) {
    uint64_t result = PB::Writer::writeSubmessage(this, v263, 0x40Eu);
  }
  uint64_t v264 = (const PB::Base *)v3[258];
  if (v264) {
    uint64_t result = PB::Writer::writeSubmessage(this, v264, 0x40Fu);
  }
  uint64_t v265 = (const PB::Base *)v3[385];
  if (v265) {
    uint64_t result = PB::Writer::writeSubmessage(this, v265, 0x410u);
  }
  uint64_t v266 = (const PB::Base *)v3[75];
  if (v266) {
    uint64_t result = PB::Writer::writeSubmessage(this, v266, 0x411u);
  }
  uint64_t v267 = (const PB::Base *)v3[79];
  if (v267) {
    uint64_t result = PB::Writer::writeSubmessage(this, v267, 0x412u);
  }
  uint64_t v268 = (const PB::Base *)v3[264];
  if (v268) {
    uint64_t result = PB::Writer::writeSubmessage(this, v268, 0x413u);
  }
  uint64_t v269 = (const PB::Base *)v3[244];
  if (v269) {
    uint64_t result = PB::Writer::writeSubmessage(this, v269, 0x414u);
  }
  uint64_t v270 = (const PB::Base *)v3[126];
  if (v270) {
    uint64_t result = PB::Writer::writeSubmessage(this, v270, 0x415u);
  }
  uint64_t v271 = (const PB::Base *)v3[53];
  if (v271) {
    uint64_t result = PB::Writer::writeSubmessage(this, v271, 0x416u);
  }
  uint64_t v272 = (const PB::Base *)v3[402];
  if (v272) {
    uint64_t result = PB::Writer::writeSubmessage(this, v272, 0x417u);
  }
  uint64_t v273 = (const PB::Base *)v3[378];
  if (v273) {
    uint64_t result = PB::Writer::writeSubmessage(this, v273, 0x418u);
  }
  uint64_t v274 = (const PB::Base *)v3[426];
  if (v274) {
    uint64_t result = PB::Writer::writeSubmessage(this, v274, 0x419u);
  }
  uint64_t v275 = (const PB::Base *)v3[257];
  if (v275) {
    uint64_t result = PB::Writer::writeSubmessage(this, v275, 0x41Au);
  }
  uint64_t v276 = (const PB::Base *)v3[255];
  if (v276) {
    uint64_t result = PB::Writer::writeSubmessage(this, v276, 0x41Bu);
  }
  uint64_t v277 = (const PB::Base *)v3[265];
  if (v277) {
    uint64_t result = PB::Writer::writeSubmessage(this, v277, 0x41Cu);
  }
  uint64_t v278 = (const PB::Base *)v3[321];
  if (v278) {
    uint64_t result = PB::Writer::writeSubmessage(this, v278, 0x41Du);
  }
  uint64_t v279 = (const PB::Base *)v3[175];
  if (v279) {
    uint64_t result = PB::Writer::writeSubmessage(this, v279, 0x800u);
  }
  uint64_t v280 = (const PB::Base *)v3[78];
  if (v280) {
    uint64_t result = PB::Writer::writeSubmessage(this, v280, 0x801u);
  }
  uint64_t v281 = (const PB::Base *)v3[36];
  if (v281) {
    uint64_t result = PB::Writer::writeSubmessage(this, v281, 0x802u);
  }
  uint64_t v282 = (const PB::Base *)v3[173];
  if (v282) {
    uint64_t result = PB::Writer::writeSubmessage(this, v282, 0x803u);
  }
  uint64_t v283 = (const PB::Base *)v3[171];
  if (v283) {
    uint64_t result = PB::Writer::writeSubmessage(this, v283, 0x804u);
  }
  uint64_t v284 = (const PB::Base *)v3[172];
  if (v284) {
    uint64_t result = PB::Writer::writeSubmessage(this, v284, 0x805u);
  }
  uint64_t v285 = (const PB::Base *)v3[170];
  if (v285) {
    uint64_t result = PB::Writer::writeSubmessage(this, v285, 0x806u);
  }
  uint64_t v286 = (const PB::Base *)v3[15];
  if (v286) {
    uint64_t result = PB::Writer::writeSubmessage(this, v286, 0x807u);
  }
  uint64_t v287 = (const PB::Base *)v3[12];
  if (v287) {
    uint64_t result = PB::Writer::writeSubmessage(this, v287, 0x808u);
  }
  uint64_t v288 = (const PB::Base *)v3[30];
  if (v288) {
    uint64_t result = PB::Writer::writeSubmessage(this, v288, 0x809u);
  }
  uint64_t v289 = (const PB::Base *)v3[390];
  if (v289) {
    uint64_t result = PB::Writer::writeSubmessage(this, v289, 0x80Au);
  }
  uint64_t v290 = (const PB::Base *)v3[389];
  if (v290) {
    uint64_t result = PB::Writer::writeSubmessage(this, v290, 0x80Bu);
  }
  uint64_t v291 = (const PB::Base *)v3[105];
  if (v291) {
    uint64_t result = PB::Writer::writeSubmessage(this, v291, 0x80Cu);
  }
  uint64_t v292 = (const PB::Base *)v3[35];
  if (v292) {
    uint64_t result = PB::Writer::writeSubmessage(this, v292, 0x80Du);
  }
  uint64_t v293 = (const PB::Base *)v3[138];
  if (v293) {
    uint64_t result = PB::Writer::writeSubmessage(this, v293, 0x80Eu);
  }
  uint64_t v294 = (const PB::Base *)v3[336];
  if (v294) {
    uint64_t result = PB::Writer::writeSubmessage(this, v294, 0x80Fu);
  }
  uint64_t v295 = (const PB::Base *)v3[338];
  if (v295) {
    uint64_t result = PB::Writer::writeSubmessage(this, v295, 0x810u);
  }
  uint64_t v296 = (const PB::Base *)v3[337];
  if (v296) {
    uint64_t result = PB::Writer::writeSubmessage(this, v296, 0x811u);
  }
  uint64_t v297 = (const PB::Base *)v3[451];
  if (v297) {
    uint64_t result = PB::Writer::writeSubmessage(this, v297, 0x812u);
  }
  uint64_t v298 = (const PB::Base *)v3[41];
  if (v298) {
    uint64_t result = PB::Writer::writeSubmessage(this, v298, 0x813u);
  }
  uint64_t v299 = (const PB::Base *)v3[315];
  if (v299) {
    uint64_t result = PB::Writer::writeSubmessage(this, v299, 0x814u);
  }
  uint64_t v300 = (const PB::Base *)v3[261];
  if (v300) {
    uint64_t result = PB::Writer::writeSubmessage(this, v300, 0x815u);
  }
  uint64_t v301 = (const PB::Base *)v3[260];
  if (v301) {
    uint64_t result = PB::Writer::writeSubmessage(this, v301, 0x816u);
  }
  uint64_t v302 = (const PB::Base *)v3[65];
  if (v302) {
    uint64_t result = PB::Writer::writeSubmessage(this, v302, 0x817u);
  }
  uint64_t v303 = (const PB::Base *)v3[20];
  if (v303) {
    uint64_t result = PB::Writer::writeSubmessage(this, v303, 0x818u);
  }
  uint64_t v304 = (const PB::Base *)v3[21];
  if (v304) {
    uint64_t result = PB::Writer::writeSubmessage(this, v304, 0x819u);
  }
  uint64_t v305 = (const PB::Base *)v3[19];
  if (v305) {
    uint64_t result = PB::Writer::writeSubmessage(this, v305, 0x81Au);
  }
  uint64_t v306 = (const PB::Base *)v3[133];
  if (v306) {
    uint64_t result = PB::Writer::writeSubmessage(this, v306, 0x81Bu);
  }
  uint64_t v307 = (const PB::Base *)v3[134];
  if (v307) {
    uint64_t result = PB::Writer::writeSubmessage(this, v307, 0x81Cu);
  }
  uint64_t v308 = (const PB::Base *)v3[83];
  if (v308) {
    uint64_t result = PB::Writer::writeSubmessage(this, v308, 0x820u);
  }
  uint64_t v309 = (const PB::Base *)v3[413];
  if (v309) {
    uint64_t result = PB::Writer::writeSubmessage(this, v309, 0x829u);
  }
  uint64_t v310 = (const PB::Base *)v3[412];
  if (v310) {
    uint64_t result = PB::Writer::writeSubmessage(this, v310, 0x82Au);
  }
  uint64_t v311 = (const PB::Base *)v3[25];
  if (v311) {
    uint64_t result = PB::Writer::writeSubmessage(this, v311, 0x82Bu);
  }
  uint64_t v312 = (const PB::Base *)v3[119];
  if (v312) {
    uint64_t result = PB::Writer::writeSubmessage(this, v312, 0x832u);
  }
  uint64_t v313 = (const PB::Base *)v3[120];
  if (v313) {
    uint64_t result = PB::Writer::writeSubmessage(this, v313, 0x833u);
  }
  uint64_t v314 = (const PB::Base *)v3[121];
  if (v314) {
    uint64_t result = PB::Writer::writeSubmessage(this, v314, 0x834u);
  }
  uint64_t v315 = (const PB::Base *)v3[117];
  if (v315) {
    uint64_t result = PB::Writer::writeSubmessage(this, v315, 0x835u);
  }
  uint64_t v316 = (const PB::Base *)v3[124];
  if (v316) {
    uint64_t result = PB::Writer::writeSubmessage(this, v316, 0x836u);
  }
  uint64_t v317 = (const PB::Base *)v3[17];
  if (v317) {
    uint64_t result = PB::Writer::writeSubmessage(this, v317, 0x837u);
  }
  uint64_t v318 = (const PB::Base *)v3[335];
  if (v318) {
    uint64_t result = PB::Writer::writeSubmessage(this, v318, 0x838u);
  }
  uint64_t v319 = (const PB::Base *)v3[334];
  if (v319) {
    uint64_t result = PB::Writer::writeSubmessage(this, v319, 0x839u);
  }
  uint64_t v320 = (const PB::Base *)v3[94];
  if (v320) {
    uint64_t result = PB::Writer::writeSubmessage(this, v320, 0x83Au);
  }
  uint64_t v321 = (const PB::Base *)v3[118];
  if (v321) {
    uint64_t result = PB::Writer::writeSubmessage(this, v321, 0x83Bu);
  }
  uint64_t v322 = (const PB::Base *)v3[419];
  if (v322) {
    uint64_t result = PB::Writer::writeSubmessage(this, v322, 0x83Cu);
  }
  uint64_t v323 = (const PB::Base *)v3[23];
  if (v323) {
    uint64_t result = PB::Writer::writeSubmessage(this, v323, 0x83Du);
  }
  uint64_t v324 = (const PB::Base *)v3[122];
  if (v324) {
    uint64_t result = PB::Writer::writeSubmessage(this, v324, 0x83Eu);
  }
  uint64_t v325 = (const PB::Base *)v3[147];
  if (v325) {
    uint64_t result = PB::Writer::writeSubmessage(this, v325, 0x83Fu);
  }
  uint64_t v326 = (const PB::Base *)v3[382];
  if (v326) {
    uint64_t result = PB::Writer::writeSubmessage(this, v326, 0x840u);
  }
  uint64_t v327 = (const PB::Base *)v3[127];
  if (v327) {
    uint64_t result = PB::Writer::writeSubmessage(this, v327, 0x841u);
  }
  uint64_t v328 = (const PB::Base *)v3[33];
  if (v328) {
    uint64_t result = PB::Writer::writeSubmessage(this, v328, 0x842u);
  }
  uint64_t v329 = (const PB::Base *)v3[358];
  if (v329) {
    uint64_t result = PB::Writer::writeSubmessage(this, v329, 0x843u);
  }
  uint64_t v330 = (const PB::Base *)v3[361];
  if (v330) {
    uint64_t result = PB::Writer::writeSubmessage(this, v330, 0x844u);
  }
  uint64_t v331 = (const PB::Base *)v3[359];
  if (v331) {
    uint64_t result = PB::Writer::writeSubmessage(this, v331, 0x845u);
  }
  uint64_t v332 = (const PB::Base *)v3[360];
  if (v332) {
    uint64_t result = PB::Writer::writeSubmessage(this, v332, 0x846u);
  }
  uint64_t v333 = (const PB::Base *)v3[366];
  if (v333) {
    uint64_t result = PB::Writer::writeSubmessage(this, v333, 0x847u);
  }
  uint64_t v334 = (const PB::Base *)v3[123];
  if (v334) {
    uint64_t result = PB::Writer::writeSubmessage(this, v334, 0x848u);
  }
  uint64_t v335 = (const PB::Base *)v3[182];
  if (v335) {
    uint64_t result = PB::Writer::writeSubmessage(this, v335, 0x849u);
  }
  uint64_t v336 = (const PB::Base *)v3[320];
  if (v336) {
    uint64_t result = PB::Writer::writeSubmessage(this, v336, 0x84Au);
  }
  uint64_t v337 = (const PB::Base *)v3[249];
  if (v337) {
    uint64_t result = PB::Writer::writeSubmessage(this, v337, 0x84Bu);
  }
  uint64_t v338 = (const PB::Base *)v3[116];
  if (v338) {
    uint64_t result = PB::Writer::writeSubmessage(this, v338, 0x84Cu);
  }
  uint64_t v339 = (const PB::Base *)v3[228];
  if (v339) {
    uint64_t result = PB::Writer::writeSubmessage(this, v339, 0x84Du);
  }
  uint64_t v340 = (const PB::Base *)v3[102];
  if (v340) {
    uint64_t result = PB::Writer::writeSubmessage(this, v340, 0x84Eu);
  }
  uint64_t v341 = (const PB::Base *)v3[100];
  if (v341) {
    uint64_t result = PB::Writer::writeSubmessage(this, v341, 0x84Fu);
  }
  uint64_t v342 = (const PB::Base *)v3[101];
  if (v342) {
    uint64_t result = PB::Writer::writeSubmessage(this, v342, 0x850u);
  }
  uint64_t v343 = (const PB::Base *)v3[99];
  if (v343) {
    uint64_t result = PB::Writer::writeSubmessage(this, v343, 0x851u);
  }
  uint64_t v344 = (const PB::Base *)v3[268];
  if (v344) {
    uint64_t result = PB::Writer::writeSubmessage(this, v344, 0x852u);
  }
  uint64_t v345 = (const PB::Base *)v3[191];
  if (v345) {
    uint64_t result = PB::Writer::writeSubmessage(this, v345, 0x853u);
  }
  uint64_t v346 = (const PB::Base *)v3[192];
  if (v346) {
    uint64_t result = PB::Writer::writeSubmessage(this, v346, 0x854u);
  }
  uint64_t v347 = (const PB::Base *)v3[193];
  if (v347) {
    uint64_t result = PB::Writer::writeSubmessage(this, v347, 0x855u);
  }
  uint64_t v348 = (const PB::Base *)v3[194];
  if (v348) {
    uint64_t result = PB::Writer::writeSubmessage(this, v348, 0x856u);
  }
  uint64_t v349 = (const PB::Base *)v3[196];
  if (v349) {
    uint64_t result = PB::Writer::writeSubmessage(this, v349, 0x857u);
  }
  uint64_t v350 = (const PB::Base *)v3[208];
  if (v350) {
    uint64_t result = PB::Writer::writeSubmessage(this, v350, 0x858u);
  }
  uint64_t v351 = (const PB::Base *)v3[209];
  if (v351) {
    uint64_t result = PB::Writer::writeSubmessage(this, v351, 0x859u);
  }
  uint64_t v352 = (const PB::Base *)v3[164];
  if (v352) {
    uint64_t result = PB::Writer::writeSubmessage(this, v352, 0x85Au);
  }
  uint64_t v353 = (const PB::Base *)v3[163];
  if (v353) {
    uint64_t result = PB::Writer::writeSubmessage(this, v353, 0x85Bu);
  }
  uint64_t v354 = (const PB::Base *)v3[197];
  if (v354) {
    uint64_t result = PB::Writer::writeSubmessage(this, v354, 0x85Cu);
  }
  uint64_t v355 = (const PB::Base *)v3[198];
  if (v355) {
    uint64_t result = PB::Writer::writeSubmessage(this, v355, 0x85Du);
  }
  uint64_t v356 = (const PB::Base *)v3[199];
  if (v356) {
    uint64_t result = PB::Writer::writeSubmessage(this, v356, 0x85Eu);
  }
  uint64_t v357 = (const PB::Base *)v3[200];
  if (v357) {
    uint64_t result = PB::Writer::writeSubmessage(this, v357, 0x85Fu);
  }
  uint64_t v358 = (const PB::Base *)v3[201];
  if (v358) {
    uint64_t result = PB::Writer::writeSubmessage(this, v358, 0x860u);
  }
  uint64_t v359 = (const PB::Base *)v3[203];
  if (v359) {
    uint64_t result = PB::Writer::writeSubmessage(this, v359, 0x861u);
  }
  uint64_t v360 = (const PB::Base *)v3[204];
  if (v360) {
    uint64_t result = PB::Writer::writeSubmessage(this, v360, 0x862u);
  }
  uint64_t v361 = (const PB::Base *)v3[205];
  if (v361) {
    uint64_t result = PB::Writer::writeSubmessage(this, v361, 0x863u);
  }
  uint64_t v362 = (const PB::Base *)v3[207];
  if (v362) {
    uint64_t result = PB::Writer::writeSubmessage(this, v362, 0x864u);
  }
  uint64_t v363 = (const PB::Base *)v3[206];
  if (v363) {
    uint64_t result = PB::Writer::writeSubmessage(this, v363, 0x865u);
  }
  uint64_t v364 = (const PB::Base *)v3[96];
  if (v364) {
    uint64_t result = PB::Writer::writeSubmessage(this, v364, 0x866u);
  }
  uint64_t v365 = (const PB::Base *)v3[403];
  if (v365) {
    uint64_t result = PB::Writer::writeSubmessage(this, v365, 0x867u);
  }
  uint64_t v366 = (const PB::Base *)v3[162];
  if (v366) {
    uint64_t result = PB::Writer::writeSubmessage(this, v366, 0x868u);
  }
  uint64_t v367 = (const PB::Base *)v3[404];
  if (v367) {
    uint64_t result = PB::Writer::writeSubmessage(this, v367, 0x869u);
  }
  uint64_t v368 = (const PB::Base *)v3[405];
  if (v368) {
    uint64_t result = PB::Writer::writeSubmessage(this, v368, 0x86Au);
  }
  uint64_t v369 = (const PB::Base *)v3[341];
  if (v369) {
    uint64_t result = PB::Writer::writeSubmessage(this, v369, 0x86Bu);
  }
  uint64_t v370 = (const PB::Base *)v3[342];
  if (v370) {
    uint64_t result = PB::Writer::writeSubmessage(this, v370, 0x86Cu);
  }
  uint64_t v371 = (const PB::Base *)v3[345];
  if (v371) {
    uint64_t result = PB::Writer::writeSubmessage(this, v371, 0x86Du);
  }
  uint64_t v372 = (const PB::Base *)v3[350];
  if (v372) {
    uint64_t result = PB::Writer::writeSubmessage(this, v372, 0x86Eu);
  }
  uint64_t v373 = (const PB::Base *)v3[348];
  if (v373) {
    uint64_t result = PB::Writer::writeSubmessage(this, v373, 0x86Fu);
  }
  uint64_t v374 = (const PB::Base *)v3[195];
  if (v374) {
    uint64_t result = PB::Writer::writeSubmessage(this, v374, 0x870u);
  }
  uint64_t v375 = (const PB::Base *)v3[211];
  if (v375) {
    uint64_t result = PB::Writer::writeSubmessage(this, v375, 0x871u);
  }
  uint64_t v376 = (const PB::Base *)v3[347];
  if (v376) {
    uint64_t result = PB::Writer::writeSubmessage(this, v376, 0x872u);
  }
  uint64_t v377 = (const PB::Base *)v3[181];
  if (v377) {
    uint64_t result = PB::Writer::writeSubmessage(this, v377, 0x873u);
  }
  uint64_t v378 = (const PB::Base *)v3[202];
  if (v378) {
    uint64_t result = PB::Writer::writeSubmessage(this, v378, 0x874u);
  }
  uint64_t v379 = (const PB::Base *)v3[210];
  if (v379) {
    uint64_t result = PB::Writer::writeSubmessage(this, v379, 0x875u);
  }
  uint64_t v380 = (const PB::Base *)v3[160];
  if (v380) {
    uint64_t result = PB::Writer::writeSubmessage(this, v380, 0x876u);
  }
  uint64_t v381 = (const PB::Base *)v3[74];
  if (v381) {
    uint64_t result = PB::Writer::writeSubmessage(this, v381, 0x877u);
  }
  uint64_t v382 = (const PB::Base *)v3[292];
  if (v382) {
    uint64_t result = PB::Writer::writeSubmessage(this, v382, 0x878u);
  }
  uint64_t v383 = (const PB::Base *)v3[86];
  if (v383) {
    uint64_t result = PB::Writer::writeSubmessage(this, v383, 0x879u);
  }
  uint64_t v384 = (const PB::Base *)v3[107];
  if (v384) {
    uint64_t result = PB::Writer::writeSubmessage(this, v384, 0x87Au);
  }
  uint64_t v385 = (const PB::Base *)v3[400];
  if (v385) {
    uint64_t result = PB::Writer::writeSubmessage(this, v385, 0x87Bu);
  }
  uint64_t v386 = (const PB::Base *)v3[326];
  if (v386) {
    uint64_t result = PB::Writer::writeSubmessage(this, v386, 0x87Cu);
  }
  uint64_t v387 = (const PB::Base *)v3[212];
  if (v387) {
    uint64_t result = PB::Writer::writeSubmessage(this, v387, 0x87Du);
  }
  uint64_t v388 = (const PB::Base *)v3[418];
  if (v388) {
    uint64_t result = PB::Writer::writeSubmessage(this, v388, 0x87Eu);
  }
  uint64_t v389 = (const PB::Base *)v3[214];
  if (v389) {
    uint64_t result = PB::Writer::writeSubmessage(this, v389, 0x87Fu);
  }
  uint64_t v390 = (const PB::Base *)v3[349];
  if (v390) {
    uint64_t result = PB::Writer::writeSubmessage(this, v390, 0x880u);
  }
  uint64_t v391 = (const PB::Base *)v3[387];
  if (v391) {
    uint64_t result = PB::Writer::writeSubmessage(this, v391, 0x881u);
  }
  uint64_t v392 = (const PB::Base *)v3[289];
  if (v392) {
    uint64_t result = PB::Writer::writeSubmessage(this, v392, 0x882u);
  }
  uint64_t v393 = (const PB::Base *)v3[237];
  if (v393) {
    uint64_t result = PB::Writer::writeSubmessage(this, v393, 0x883u);
  }
  uint64_t v394 = (const PB::Base *)v3[283];
  if (v394) {
    uint64_t result = PB::Writer::writeSubmessage(this, v394, 0x884u);
  }
  uint64_t v395 = (const PB::Base *)v3[284];
  if (v395) {
    uint64_t result = PB::Writer::writeSubmessage(this, v395, 0x885u);
  }
  uint64_t v396 = (const PB::Base *)v3[285];
  if (v396) {
    uint64_t result = PB::Writer::writeSubmessage(this, v396, 0x886u);
  }
  uint64_t v397 = (const PB::Base *)v3[270];
  if (v397) {
    uint64_t result = PB::Writer::writeSubmessage(this, v397, 0x887u);
  }
  uint64_t v398 = (const PB::Base *)v3[287];
  if (v398) {
    uint64_t result = PB::Writer::writeSubmessage(this, v398, 0x888u);
  }
  uint64_t v399 = (const PB::Base *)v3[227];
  if (v399) {
    uint64_t result = PB::Writer::writeSubmessage(this, v399, 0x889u);
  }
  uint64_t v400 = (const PB::Base *)v3[401];
  if (v400) {
    uint64_t result = PB::Writer::writeSubmessage(this, v400, 0x88Au);
  }
  uint64_t v401 = (const PB::Base *)v3[279];
  if (v401) {
    uint64_t result = PB::Writer::writeSubmessage(this, v401, 0x88Bu);
  }
  uint64_t v402 = (const PB::Base *)v3[280];
  if (v402) {
    uint64_t result = PB::Writer::writeSubmessage(this, v402, 0x88Cu);
  }
  uint64_t v403 = (const PB::Base *)v3[399];
  if (v403) {
    uint64_t result = PB::Writer::writeSubmessage(this, v403, 0x88Du);
  }
  uint64_t v404 = (const PB::Base *)v3[388];
  if (v404) {
    uint64_t result = PB::Writer::writeSubmessage(this, v404, 0x88Eu);
  }
  uint64_t v405 = (const PB::Base *)v3[103];
  if (v405) {
    uint64_t result = PB::Writer::writeSubmessage(this, v405, 0x88Fu);
  }
  uint64_t v406 = (const PB::Base *)v3[221];
  if (v406) {
    uint64_t result = PB::Writer::writeSubmessage(this, v406, 0x890u);
  }
  uint64_t v407 = (const PB::Base *)v3[357];
  if (v407) {
    uint64_t result = PB::Writer::writeSubmessage(this, v407, 0x891u);
  }
  uint64_t v408 = (const PB::Base *)v3[278];
  if (v408) {
    uint64_t result = PB::Writer::writeSubmessage(this, v408, 0x892u);
  }
  uint64_t v409 = (const PB::Base *)v3[272];
  if (v409) {
    uint64_t result = PB::Writer::writeSubmessage(this, v409, 0x893u);
  }
  uint64_t v410 = (const PB::Base *)v3[271];
  if (v410) {
    uint64_t result = PB::Writer::writeSubmessage(this, v410, 0x894u);
  }
  uint64_t v411 = (const PB::Base *)v3[275];
  if (v411) {
    uint64_t result = PB::Writer::writeSubmessage(this, v411, 0x895u);
  }
  uint64_t v412 = (const PB::Base *)v3[13];
  if (v412) {
    uint64_t result = PB::Writer::writeSubmessage(this, v412, 0x896u);
  }
  uint64_t v413 = (const PB::Base *)v3[286];
  if (v413) {
    uint64_t result = PB::Writer::writeSubmessage(this, v413, 0x897u);
  }
  uint64_t v414 = (const PB::Base *)v3[309];
  if (v414) {
    uint64_t result = PB::Writer::writeSubmessage(this, v414, 0x898u);
  }
  uint64_t v415 = (const PB::Base *)v3[312];
  if (v415) {
    uint64_t result = PB::Writer::writeSubmessage(this, v415, 0x899u);
  }
  uint64_t v416 = (const PB::Base *)v3[220];
  if (v416) {
    uint64_t result = PB::Writer::writeSubmessage(this, v416, 0x89Au);
  }
  uint64_t v417 = (const PB::Base *)v3[313];
  if (v417) {
    uint64_t result = PB::Writer::writeSubmessage(this, v417, 0x89Bu);
  }
  uint64_t v418 = (const PB::Base *)v3[310];
  if (v418) {
    uint64_t result = PB::Writer::writeSubmessage(this, v418, 0x89Cu);
  }
  uint64_t v419 = (const PB::Base *)v3[277];
  if (v419) {
    uint64_t result = PB::Writer::writeSubmessage(this, v419, 0x89Du);
  }
  uint64_t v420 = (const PB::Base *)v3[72];
  if (v420) {
    uint64_t result = PB::Writer::writeSubmessage(this, v420, 0x89Eu);
  }
  uint64_t v421 = (const PB::Base *)v3[276];
  if (v421) {
    uint64_t result = PB::Writer::writeSubmessage(this, v421, 0x89Fu);
  }
  uint64_t v422 = (const PB::Base *)v3[293];
  if (v422) {
    uint64_t result = PB::Writer::writeSubmessage(this, v422, 0x8A0u);
  }
  uint64_t v423 = (const PB::Base *)v3[241];
  if (v423) {
    uint64_t result = PB::Writer::writeSubmessage(this, v423, 0x8A1u);
  }
  uint64_t v424 = (const PB::Base *)v3[215];
  if (v424) {
    uint64_t result = PB::Writer::writeSubmessage(this, v424, 0x8A2u);
  }
  uint64_t v425 = (const PB::Base *)v3[216];
  if (v425) {
    uint64_t result = PB::Writer::writeSubmessage(this, v425, 0x8A3u);
  }
  uint64_t v426 = (const PB::Base *)v3[311];
  if (v426) {
    uint64_t result = PB::Writer::writeSubmessage(this, v426, 0x8A4u);
  }
  uint64_t v427 = (const PB::Base *)v3[274];
  if (v427) {
    uint64_t result = PB::Writer::writeSubmessage(this, v427, 0x8A5u);
  }
  uint64_t v428 = (const PB::Base *)v3[273];
  if (v428) {
    uint64_t result = PB::Writer::writeSubmessage(this, v428, 0x8A6u);
  }
  uint64_t v429 = (const PB::Base *)v3[218];
  if (v429) {
    uint64_t result = PB::Writer::writeSubmessage(this, v429, 0x8A7u);
  }
  uint64_t v430 = (const PB::Base *)v3[217];
  if (v430) {
    uint64_t result = PB::Writer::writeSubmessage(this, v430, 0x8A8u);
  }
  uint64_t v431 = (const PB::Base *)v3[314];
  if (v431) {
    uint64_t result = PB::Writer::writeSubmessage(this, v431, 0x8A9u);
  }
  uint64_t v432 = (const PB::Base *)v3[39];
  if (v432) {
    uint64_t result = PB::Writer::writeSubmessage(this, v432, 0x8AAu);
  }
  uint64_t v433 = (const PB::Base *)v3[113];
  if (v433) {
    uint64_t result = PB::Writer::writeSubmessage(this, v433, 0x8ABu);
  }
  uint64_t v434 = (const PB::Base *)v3[295];
  if (v434) {
    uint64_t result = PB::Writer::writeSubmessage(this, v434, 0x8ACu);
  }
  uint64_t v435 = (const PB::Base *)v3[298];
  if (v435) {
    uint64_t result = PB::Writer::writeSubmessage(this, v435, 0x8ADu);
  }
  uint64_t v436 = (const PB::Base *)v3[32];
  if (v436) {
    uint64_t result = PB::Writer::writeSubmessage(this, v436, 0x8AEu);
  }
  uint64_t v437 = (const PB::Base *)v3[31];
  if (v437) {
    uint64_t result = PB::Writer::writeSubmessage(this, v437, 0x8AFu);
  }
  uint64_t v438 = (const PB::Base *)v3[352];
  if (v438) {
    uint64_t result = PB::Writer::writeSubmessage(this, v438, 0x8B0u);
  }
  uint64_t v439 = (const PB::Base *)v3[351];
  if (v439) {
    uint64_t result = PB::Writer::writeSubmessage(this, v439, 0x8B1u);
  }
  uint64_t v440 = (const PB::Base *)v3[328];
  if (v440) {
    uint64_t result = PB::Writer::writeSubmessage(this, v440, 0x8B2u);
  }
  uint64_t v441 = (const PB::Base *)v3[329];
  if (v441) {
    uint64_t result = PB::Writer::writeSubmessage(this, v441, 0x8B3u);
  }
  uint64_t v442 = (const PB::Base *)v3[331];
  if (v442) {
    uint64_t result = PB::Writer::writeSubmessage(this, v442, 0x8B4u);
  }
  uint64_t v443 = (const PB::Base *)v3[161];
  if (v443) {
    uint64_t result = PB::Writer::writeSubmessage(this, v443, 0x8B5u);
  }
  uint64_t v444 = (const PB::Base *)v3[330];
  if (v444) {
    uint64_t result = PB::Writer::writeSubmessage(this, v444, 0x8B6u);
  }
  uint64_t v445 = (const PB::Base *)v3[42];
  if (v445) {
    uint64_t result = PB::Writer::writeSubmessage(this, v445, 0x8B7u);
  }
  uint64_t v446 = (const PB::Base *)v3[185];
  if (v446) {
    uint64_t result = PB::Writer::writeSubmessage(this, v446, 0x8B8u);
  }
  uint64_t v447 = (const PB::Base *)v3[186];
  if (v447) {
    uint64_t result = PB::Writer::writeSubmessage(this, v447, 0x8B9u);
  }
  uint64_t v448 = (const PB::Base *)v3[187];
  if (v448) {
    uint64_t result = PB::Writer::writeSubmessage(this, v448, 0x8BAu);
  }
  uint64_t v449 = (const PB::Base *)v3[353];
  if (v449) {
    uint64_t result = PB::Writer::writeSubmessage(this, v449, 0x8BBu);
  }
  uint64_t v450 = (const PB::Base *)v3[354];
  if (v450) {
    uint64_t result = PB::Writer::writeSubmessage(this, v450, 0x8BCu);
  }
  uint64_t v451 = (const PB::Base *)v3[368];
  if (v451) {
    uint64_t result = PB::Writer::writeSubmessage(this, v451, 0x7530u);
  }
  uint64_t v452 = (const PB::Base *)v3[369];
  if (v452) {
    uint64_t result = PB::Writer::writeSubmessage(this, v452, 0x7531u);
  }
  uint64_t v453 = (const PB::Base *)v3[179];
  if (v453) {
    return PB::Writer::writeSubmessage(this, v453, 0x7532u);
  }
  return result;
}

void *sub_101138BF8(void *result)
{
  if (!result[11])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_1010E1C20((uint64_t)v2);
    uint64_t result = (void *)v1[11];
    v1[11] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138C4C(void *result)
{
  if (!result[18])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_1010E4A84((uint64_t)v2);
    uint64_t result = (void *)v1[18];
    v1[18] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138CA0(void *result)
{
  if (!result[27])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x40uLL);
    sub_1010E94F0((uint64_t)v2);
    uint64_t result = (void *)v1[27];
    v1[27] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138CF4(void *result)
{
  if (!result[431])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116B14C(v2);
    uint64_t result = (void *)v1[431];
    v1[431] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138D48(void *result)
{
  if (!result[434])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116BAAC(v2);
    uint64_t result = (void *)v1[434];
    v1[434] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138D9C(void *result)
{
  if (!result[436])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116C194(v2);
    uint64_t result = (void *)v1[436];
    v1[436] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138DF0(void *result)
{
  if (!result[440])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116D060(v2);
    uint64_t result = (void *)v1[440];
    v1[440] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138E44(void *result)
{
  if (!result[444])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116DD88(v2);
    uint64_t result = (void *)v1[444];
    v1[444] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138E98(void *result)
{
  if (!result[442])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116D6A0(v2);
    uint64_t result = (void *)v1[442];
    v1[442] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138EEC(void *result)
{
  if (!result[448])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116EB50(v2);
    uint64_t result = (void *)v1[448];
    v1[448] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138F40(void *result)
{
  if (!result[446])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116E450(v2);
    uint64_t result = (void *)v1[446];
    v1[446] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138F94(void *result)
{
  if (!result[425])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x30uLL);
    sub_101167CA0((uint64_t)v2);
    uint64_t result = (void *)v1[425];
    v1[425] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101138FE8(void *result)
{
  if (!result[76])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_101101C2C((uint64_t)v2);
    uint64_t result = (void *)v1[76];
    v1[76] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113903C(void *result)
{
  if (!result[427])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_101169050(v2);
    uint64_t result = (void *)v1[427];
    v1[427] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139090(void *result)
{
  if (!result[34])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x38uLL);
    sub_1010ED9B0((uint64_t)v2);
    uint64_t result = (void *)v1[34];
    v1[34] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_1011390E4(void *result)
{
  if (!result[447])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116E7E4(v2);
    uint64_t result = (void *)v1[447];
    v1[447] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139138(void *result)
{
  if (!result[443])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116DA14(v2);
    uint64_t result = (void *)v1[443];
    v1[443] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113918C(void *result)
{
  if (!result[125])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x88uLL);
    double v3 = sub_101081E10((uint64_t)v2);
    uint64_t result = (void *)v1[125];
    v1[125] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *, double))(*result + 8LL))(result, v3);
    }
  }

  return result;
}

void *sub_1011391E0(void *result)
{
  if (!result[356])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_101140A00(v2);
    uint64_t result = (void *)v1[356];
    v1[356] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139234(void *result)
{
  if (!result[166])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_1010998D0(v2);
    uint64_t result = (void *)v1[166];
    v1[166] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139288(void *result)
{
  if (!result[397])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_101140CF0(v2);
    uint64_t result = (void *)v1[397];
    v1[397] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_1011392DC(void *result)
{
  if (!result[46])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x78uLL);
    double v3 = sub_1010F1C20((uint64_t)v2);
    uint64_t result = (void *)v1[46];
    v1[46] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *, double))(*result + 8LL))(result, v3);
    }
  }

  return result;
}

void *sub_101139330(void *result)
{
  if (!result[432])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116B46C(v2);
    uint64_t result = (void *)v1[432];
    v1[432] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139384(void *result)
{
  if (!result[367])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_101145AE4((uint64_t)v2);
    uint64_t result = (void *)v1[367];
    v1[367] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_1011393D8(void *result)
{
  if (!result[253])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0xE0uLL);
    sub_10117EA10((uint64_t)v2);
    uint64_t result = (void *)v1[253];
    v1[253] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113942C(void *result)
{
  if (!result[150])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_101093934(v2);
    uint64_t result = (void *)v1[150];
    v1[150] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139480(void *result)
{
  if (!result[149])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_10109334C(v2);
    uint64_t result = (void *)v1[149];
    v1[149] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_1011394D4(void *result)
{
  if (!result[318])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10119FC94(v2);
    uint64_t result = (void *)v1[318];
    v1[318] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139528(void *result)
{
  if (!result[238])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_1011742CC((uint64_t)v2);
    uint64_t result = (void *)v1[238];
    v1[238] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113957C(void *result)
{
  if (!result[239])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_1011747D8((uint64_t)v2);
    uint64_t result = (void *)v1[239];
    v1[239] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_1011395D0(void *result)
{
  if (!result[441])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116D380(v2);
    uint64_t result = (void *)v1[441];
    v1[441] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139624(void *result)
{
  if (!result[435])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116BE20(v2);
    uint64_t result = (void *)v1[435];
    v1[435] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139678(void *result)
{
  if (!result[48])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_1010F41C0((uint64_t)v2);
    uint64_t result = (void *)v1[48];
    v1[48] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_1011396CC(void *result)
{
  if (!result[242])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x30uLL);
    sub_101175CA4((uint64_t)v2);
    uint64_t result = (void *)v1[242];
    v1[242] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139720(void *result)
{
  if (!result[445])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116E0FC(v2);
    uint64_t result = (void *)v1[445];
    v1[445] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139774(void *result)
{
  if (!result[24])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_1010E6634((uint64_t)v2);
    uint64_t result = (void *)v1[24];
    v1[24] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_1011397C8(void *result)
{
  if (!result[57])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_1010F7244((uint64_t)v2);
    uint64_t result = (void *)v1[57];
    v1[57] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113981C(void *result)
{
  if (!result[234])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_1011738F8((uint64_t)v2);
    uint64_t result = (void *)v1[234];
    v1[234] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139870(void *result)
{
  if (!result[56])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_1010F6FF4((uint64_t)v2);
    uint64_t result = (void *)v1[56];
    v1[56] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_1011398C4(void *result)
{
  if (!result[308])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_10119C08C((uint64_t)v2);
    uint64_t result = (void *)v1[308];
    v1[308] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139918(void *result)
{
  if (!result[130])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x38uLL);
    sub_101088880((uint64_t)v2);
    uint64_t result = (void *)v1[130];
    v1[130] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113996C(void *result)
{
  if (!result[98])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10110DC38((uint64_t)v2);
    uint64_t result = (void *)v1[98];
    v1[98] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_1011399C0(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(8uLL);
    sub_1010DE2C0(v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139A14(void *result)
{
  if (!result[2])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_1010DE42C(v2);
    uint64_t result = (void *)v1[2];
    v1[2] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139A68(void *result)
{
  if (!result[406])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x58uLL);
    sub_10115EDDC((uint64_t)v2);
    uint64_t result = (void *)v1[406];
    v1[406] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139ABC(void *result)
{
  if (!result[449])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116EEA4(v2);
    uint64_t result = (void *)v1[449];
    v1[449] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139B10(void *result)
{
  if (!result[51])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_1010F4E04((uint64_t)v2);
    uint64_t result = (void *)v1[51];
    v1[51] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139B64(void *result)
{
  if (!result[112])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_1011193C4((uint64_t)v2);
    uint64_t result = (void *)v1[112];
    v1[112] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139BB8(void *result)
{
  if (!result[327])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x38uLL);
    sub_1011A33F8((uint64_t)v2);
    uint64_t result = (void *)v1[327];
    v1[327] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139C0C(void *result)
{
  if (!result[225])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_1010DA60C((uint64_t)v2);
    uint64_t result = (void *)v1[225];
    v1[225] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139C60(void *result)
{
  if (!result[38])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_1010DDEF8((uint64_t)v2);
    uint64_t result = (void *)v1[38];
    v1[38] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139CB4(void *result)
{
  if (!result[223])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_1010D9E8C((uint64_t)v2);
    uint64_t result = (void *)v1[223];
    v1[223] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139D08(void *result)
{
  if (!result[417])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x30uLL);
    sub_101162BDC((uint64_t)v2);
    uint64_t result = (void *)v1[417];
    v1[417] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139D5C(void *result)
{
  if (!result[339])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_1011AA2BC((uint64_t)v2);
    uint64_t result = (void *)v1[339];
    v1[339] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139DB0(void *result)
{
  if (!result[226])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_1010DA9D4((uint64_t)v2);
    uint64_t result = (void *)v1[226];
    v1[226] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139E04(void *result)
{
  if (!result[222])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_1010D9B6C((uint64_t)v2);
    uint64_t result = (void *)v1[222];
    v1[222] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139E58(void *result)
{
  if (!result[50])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_1010F48A4((uint64_t)v2);
    uint64_t result = (void *)v1[50];
    v1[50] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139EAC(void *result)
{
  if (!result[55])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_1010F6B0C((uint64_t)v2);
    uint64_t result = (void *)v1[55];
    v1[55] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139F00(void *result)
{
  if (!result[139])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_10108E57C((uint64_t)v2);
    uint64_t result = (void *)v1[139];
    v1[139] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139F54(void *result)
{
  if (!result[140])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0xA0uLL);
    double v3 = sub_10108EB44((uint64_t)v2);
    uint64_t result = (void *)v1[140];
    v1[140] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *, double))(*result + 8LL))(result, v3);
    }
  }

  return result;
}

void *sub_101139FA8(void *result)
{
  if (!result[243])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_1011764EC((uint64_t)v2);
    uint64_t result = (void *)v1[243];
    v1[243] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_101139FFC(void *result)
{
  if (!result[128])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0xB8uLL);
    sub_101086610((uint64_t)v2);
    uint64_t result = (void *)v1[128];
    v1[128] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A050(void *result)
{
  if (!result[438])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116C87C(v2);
    uint64_t result = (void *)v1[438];
    v1[438] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A0A4(void *result)
{
  if (!result[291])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    double v3 = sub_101194B9C(v2);
    uint64_t result = (void *)v1[291];
    v1[291] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *, double))(*result + 8LL))(result, v3);
    }
  }

  return result;
}

void *sub_10113A0F8(void *result)
{
  if (!result[177])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x48uLL);
    sub_1010A058C((uint64_t)v2);
    uint64_t result = (void *)v1[177];
    v1[177] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A14C(void *result)
{
  if (!result[108])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_1011172FC((uint64_t)v2);
    uint64_t result = (void *)v1[108];
    v1[108] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A1A0(void *result)
{
  if (!result[178])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x60uLL);
    double v3 = sub_1010A1100((uint64_t)v2);
    uint64_t result = (void *)v1[178];
    v1[178] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *, double))(*result + 8LL))(result, v3);
    }
  }

  return result;
}

void *sub_10113A1F4(void *result)
{
  if (!result[428])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_101169638((uint64_t)v2);
    uint64_t result = (void *)v1[428];
    v1[428] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A248(void *result)
{
  if (!result[423])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_101167444((uint64_t)v2);
    uint64_t result = (void *)v1[423];
    v1[423] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A29C(void *result)
{
  if (!result[22])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_1010E5C0C((uint64_t)v2);
    uint64_t result = (void *)v1[22];
    v1[22] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A2F0(void *result)
{
  if (!result[26])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0xE8uLL);
    double v3 = sub_1010E70E4((uint64_t)v2);
    uint64_t result = (void *)v1[26];
    v1[26] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *, double))(*result + 8LL))(result, v3);
    }
  }

  return result;
}

void *sub_10113A344(void *result)
{
  if (!result[254])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x38uLL);
    double v3 = sub_101180290((uint64_t)v2);
    uint64_t result = (void *)v1[254];
    v1[254] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *, double))(*result + 8LL))(result, v3);
    }
  }

  return result;
}

void *sub_10113A398(void *result)
{
  if (!result[167])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_101096654((uint64_t)v2);
    uint64_t result = (void *)v1[167];
    v1[167] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A3EC(void *result)
{
  if (!result[437])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10116C508(v2);
    uint64_t result = (void *)v1[437];
    v1[437] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A440(void *result)
{
  if (!result[384])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10114FA80(v2);
    uint64_t result = (void *)v1[384];
    v1[384] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A494(void *result)
{
  if (!result[396])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_101156530((uint64_t)v2);
    uint64_t result = (void *)v1[396];
    v1[396] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A4E8(void *result)
{
  if (!result[3])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_1010DF2B4((uint64_t)v2);
    uint64_t result = (void *)v1[3];
    v1[3] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A53C(void *result)
{
  if (!result[8])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_1010E0884(v2);
    uint64_t result = (void *)v1[8];
    v1[8] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A590(void *result)
{
  if (!result[143])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x30uLL);
    sub_101082AAC((uint64_t)v2);
    uint64_t result = (void *)v1[143];
    v1[143] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A5E4(void *result)
{
  if (!result[157])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_101095C4C((uint64_t)v2);
    uint64_t result = (void *)v1[157];
    v1[157] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A638(void *result)
{
  if (!result[158])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_10109628C((uint64_t)v2);
    uint64_t result = (void *)v1[158];
    v1[158] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A68C(void *result)
{
  if (!result[144])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_1010907F0((uint64_t)v2);
    uint64_t result = (void *)v1[144];
    v1[144] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A6E0(void *result)
{
  if (!result[148])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x40uLL);
    double v3 = sub_101092B70((uint64_t)v2);
    uint64_t result = (void *)v1[148];
    v1[148] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *, double))(*result + 8LL))(result, v3);
    }
  }

  return result;
}

void *sub_10113A734(void *result)
{
  if (!result[154])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10109513C((uint64_t)v2);
    uint64_t result = (void *)v1[154];
    v1[154] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A788(void *result)
{
  if (!result[240])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_101174A28((uint64_t)v2);
    uint64_t result = (void *)v1[240];
    v1[240] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A7DC(void *result)
{
  if (!result[80])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x48uLL);
    sub_101104184((uint64_t)v2);
    uint64_t result = (void *)v1[80];
    v1[80] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A830(void *result)
{
  if (!result[81])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_101104C38((uint64_t)v2);
    uint64_t result = (void *)v1[81];
    v1[81] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A884(void *result)
{
  if (!result[82])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x58uLL);
    sub_101105000((uint64_t)v2);
    uint64_t result = (void *)v1[82];
    v1[82] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A8D8(void *result)
{
  if (!result[324])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_1011A17C0((uint64_t)v2);
    uint64_t result = (void *)v1[324];
    v1[324] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A92C(void *result)
{
  if (!result[394])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_101155198((uint64_t)v2);
    uint64_t result = (void *)v1[394];
    v1[394] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A980(void *result)
{
  if (!result[93])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x80uLL);
    sub_1010E4324((uint64_t)v2);
    uint64_t result = (void *)v1[93];
    v1[93] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113A9D4(void *result)
{
  if (!result[256])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0xC8uLL);
    sub_101181418(v2);
    uint64_t result = (void *)v1[256];
    v1[256] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AA28(void *result)
{
  if (!result[49])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_1010F44DC((uint64_t)v2);
    uint64_t result = (void *)v1[49];
    v1[49] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AA7C(void *result)
{
  if (!result[355])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_101140638((uint64_t)v2);
    uint64_t result = (void *)v1[355];
    v1[355] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AAD0(void *result)
{
  if (!result[252])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_10117E4EC((uint64_t)v2);
    uint64_t result = (void *)v1[252];
    v1[252] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AB24(void *result)
{
  if (!result[110])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x68uLL);
    sub_101117B08((uint64_t)v2);
    uint64_t result = (void *)v1[110];
    v1[110] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AB78(void *result)
{
  if (!result[262])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x48uLL);
    sub_1011856AC((uint64_t)v2);
    uint64_t result = (void *)v1[262];
    v1[262] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113ABCC(void *result)
{
  if (!result[66])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x48uLL);
    sub_1010FB910((uint64_t)v2);
    uint64_t result = (void *)v1[66];
    v1[66] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AC20(void *result)
{
  if (!result[429])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x48uLL);
    sub_101169A9C((uint64_t)v2);
    uint64_t result = (void *)v1[429];
    v1[429] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AC74(void *result)
{
  if (!result[267])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x48uLL);
    sub_101189528((uint64_t)v2);
    uint64_t result = (void *)v1[267];
    v1[267] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113ACC8(void *result)
{
  if (!result[383])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10114F70C(v2);
    uint64_t result = (void *)v1[383];
    v1[383] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AD1C(void *result)
{
  if (!result[79])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_101103DBC((uint64_t)v2);
    uint64_t result = (void *)v1[79];
    v1[79] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AD70(void *result)
{
  if (!result[251])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0xB8uLL);
    sub_10117CCA4((uint64_t)v2);
    uint64_t result = (void *)v1[251];
    v1[251] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113ADC4(void *result)
{
  if (!result[258])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10118411C(v2);
    uint64_t result = (void *)v1[258];
    v1[258] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AE18(void *result)
{
  if (!result[385])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x30uLL);
    sub_10114FDA0((uint64_t)v2);
    uint64_t result = (void *)v1[385];
    v1[385] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AE6C(void *result)
{
  if (!result[75])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_1011019DC((uint64_t)v2);
    uint64_t result = (void *)v1[75];
    v1[75] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AEC0(void *result)
{
  if (!result[244])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_101176C68((uint64_t)v2);
    uint64_t result = (void *)v1[244];
    v1[244] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AF14(void *result)
{
  if (!result[53])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_1010F5D04((uint64_t)v2);
    uint64_t result = (void *)v1[53];
    v1[53] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AF68(void *result)
{
  if (!result[402])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_10115CC44((uint64_t)v2);
    uint64_t result = (void *)v1[402];
    v1[402] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113AFBC(void *result)
{
  if (!result[378])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x30uLL);
    sub_10114B7C8((uint64_t)v2);
    uint64_t result = (void *)v1[378];
    v1[378] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113B010(void *result)
{
  if (!result[426])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_10116862C((uint64_t)v2);
    uint64_t result = (void *)v1[426];
    v1[426] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113B064(void *result)
{
  if (!result[257])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_101183ECC((uint64_t)v2);
    uint64_t result = (void *)v1[257];
    v1[257] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113B0B8(void *result)
{
  if (!result[255])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x60uLL);
    sub_1011809BC((uint64_t)v2);
    uint64_t result = (void *)v1[255];
    v1[255] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113B10C(void *result)
{
  if (!result[265])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x58uLL);
    sub_101188CD4((uint64_t)v2);
    uint64_t result = (void *)v1[265];
    v1[265] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113B160(void *result)
{
  if (!result[12])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_1010E2340(v2);
    uint64_t result = (void *)v1[12];
    v1[12] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113B1B4(void *result)
{
  if (!result[30])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x30uLL);
    double v3 = sub_1010EBBA4((uint64_t)v2);
    uint64_t result = (void *)v1[30];
    v1[30] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *, double))(*result + 8LL))(result, v3);
    }
  }

  return result;
}

void *sub_10113B208(void *result)
{
  if (!result[20])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_1010E55A8(v2);
    uint64_t result = (void *)v1[20];
    v1[20] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113B25C(void *result)
{
  if (!result[25])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x10uLL);
    sub_1010E6DB4(v2);
    uint64_t result = (void *)v1[25];
    v1[25] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113B2B0(void *result)
{
  if (!result[17])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x30uLL);
    double v3 = sub_1010E43A4((uint64_t)v2);
    uint64_t result = (void *)v1[17];
    v1[17] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *, double))(*result + 8LL))(result, v3);
    }
  }

  return result;
}

void *sub_10113B304(void *result)
{
  if (!result[94])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_10110B780((uint64_t)v2);
    uint64_t result = (void *)v1[94];
    v1[94] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113B358(void *result)
{
  if (!result[268])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_101189FBC((uint64_t)v2);
    uint64_t result = (void *)v1[268];
    v1[268] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10113B3AC(void *result)
{
  if (!result[279])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_10118E298((uint64_t)v2);
    uint64_t result = (void *)v1[279];
    v1[279] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

uint64_t sub_10113B400(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D3A0;
  *(_DWORD *)(result + 208) = 0;
  return result;
}

void sub_10113B418(PB::Base *a1)
{
}

double sub_10113B42C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D3A0;
  *(_DWORD *)(a1 + 208) = 0;
  int v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x400) != 0)
  {
    double result = *(double *)(a2 + 88);
    int v3 = 1024;
    *(_DWORD *)(a1 + 208) = 1024;
    *(double *)(a1 + 88) = result;
    int v2 = *(_DWORD *)(a2 + 208);
    if ((v2 & 0x10000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 136);
    v3 |= 0x10000u;
    *(_DWORD *)(a1 + 208) = v3;
    *(double *)(a1 + 136) = result;
    int v2 = *(_DWORD *)(a2 + 208);
  }

uint64_t sub_10113B704(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "acceleration", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 208);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "centerOfMassAccelAmplitude", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }

uint64_t sub_10113BA54(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10113C148(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 208);
  if ((v4 & 0x400) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 88), 1u);
    int v4 = *(_DWORD *)(v3 + 208);
    if ((v4 & 0x10000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }

  else if ((v4 & 0x10000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136), 2u);
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }

void *sub_10113C428(void *result)
{
  *uint64_t result = off_10189D3D8;
  result[1] = 0LL;
  return result;
}

void sub_10113C438(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189D3D8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10113C478(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189D3D8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10113C4BC(void *a1, uint64_t a2)
{
  *a1 = off_10189D3D8;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x80uLL);
    float v5 = sub_1010E3EEC((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v7;
    if (v6) {
      (*(void (**)(uint64_t, float))(*(void *)v6 + 8LL))(v6, v5);
    }
  }

  return a1;
}

uint64_t sub_10113C524(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10113C574(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10113C72C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10113C748(void *result)
{
  *uint64_t result = off_10189D410;
  result[1] = 0LL;
  return result;
}

void sub_10113C758(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189D410;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10113C798(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189D410;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10113C7DC(void *a1, uint64_t a2)
{
  *a1 = off_10189D410;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0xC8uLL);
    uint64_t v5 = sub_101181990(v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10113C844(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10113C894(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10113CA4C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_10113CA68(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D448;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10113CA80(PB::Base *a1)
{
}

uint64_t sub_10113CA94(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189D448;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_10113CAE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "code", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10113CB4C(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10113CE74(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_10113CECC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D480;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10113CEE4(PB::Base *a1)
{
}

uint64_t sub_10113CEF8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189D480;
  *(_DWORD *)(result + 24) = 0;
  char v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 24) = 1;
    *(void *)(result + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
    char v2 = *(_BYTE *)(a2 + 24);
  }

uint64_t sub_10113CF68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 24) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "dramDurationMs", *(_DWORD *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "vehicularFlags", *(_DWORD *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10113CFF8(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10113D414(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        return result;
      }
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 24) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  }
  return result;
}

uint64_t sub_10113D48C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D4B8;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_10113D4A4(PB::Base *a1)
{
}

uint64_t sub_10113D4B8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189D4B8;
  *(_DWORD *)(result + 52) = 0;
  char v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 44);
    char v3 = 32;
    *(_BYTE *)(result + 52) = 32;
    *(_DWORD *)(result + 44) = v4;
    char v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 52) & 0x40) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 48);
    v3 |= 0x40u;
    *(_BYTE *)(result + 52) = v3;
    *(_DWORD *)(result + 48) = v5;
    char v2 = *(_BYTE *)(a2 + 52);
  }

uint64_t sub_10113D598(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "createdAtTimestamp", *(void *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 52);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 52) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "epochNumber", *(_DWORD *)(a1 + 40));
  char v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_10113D6A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(_BYTE *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10113DE90(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 52);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 44), 2u);
    char v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 52) & 0x40) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 3u);
  char v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

void *sub_10113DF78(void *result)
{
  *uint64_t result = &off_10189D4F0;
  *(void *)((char *)result + 212) = 0LL;
  return result;
}

void sub_10113DF90(PB::Base *a1)
{
}

uint64_t sub_10113DFA4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189D4F0;
  *(void *)(result + 212) = 0LL;
  uint64_t v2 = *(void *)(a2 + 212);
  if ((v2 & 0x800) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 96);
    uint64_t v3 = 2048LL;
    *(void *)(result + 212) = 2048LL;
    *(void *)(result + 96) = v4;
    uint64_t v2 = *(void *)(a2 + 212);
    if ((v2 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 0x200000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 140);
    v3 |= 0x200000uLL;
    *(void *)(result + 212) = v3;
    *(_DWORD *)(result + 14sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
    uint64_t v2 = *(void *)(a2 + 212);
  }

uint64_t sub_10113E420(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "calculationTimestamp", *(void *)(a1 + 8));
    uint64_t v5 = *(void *)(a1 + 212);
    if ((v5 & 0x1000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }

  else if ((v5 & 0x1000) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "dramDuration", *(_DWORD *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }

uint64_t sub_10113E950(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

LABEL_325:
          *(void *)(a1 + 56) = v35;
          goto LABEL_313;
        case 4u:
          *(void *)(a1 + 212) |= 0x10000uLL;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_312;
        case 5u:
          *(void *)(a1 + 212) |= 0x1000000uLL;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_312;
        case 6u:
          *(void *)(a1 + 212) |= 0x100000uLL;
          unint64_t v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_312;
        case 7u:
          *(void *)(a1 + 212) |= 0x20uLL;
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          uint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5LL && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0LL;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              char v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_329;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v14 = v45++ > 8;
            }

            while (!v14);
LABEL_222:
            uint64_t v46 = 0LL;
            goto LABEL_329;
          }

          char v180 = 0;
          unsigned int v181 = 0;
          uint64_t v46 = 0LL;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)this + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              uint64_t v46 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v182 = v41 + 1;
              char v183 = *(_BYTE *)(v43 + v41);
              *((void *)this + 1) = v182;
              v46 |= (unint64_t)(v183 & 0x7F) << v180;
              if (v183 < 0)
              {
                v180 += 7;
                unint64_t v41 = v182;
                BOOL v14 = v181++ > 8;
                if (v14) {
                  goto LABEL_222;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v46 = 0LL;
              }
            }

            break;
          }

LABEL_329:
          *(void *)(a1 + 48) = v46;
          goto LABEL_313;
        case 8u:
          *(void *)(a1 + 212) |= 0x40000uLL;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v49);
          goto LABEL_312;
        case 9u:
          *(void *)(a1 + 212) |= 0x800000uLL;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v50);
          goto LABEL_312;
        case 0xAu:
          *(void *)(a1 + 212) |= 0x400000uLL;
          unint64_t v51 = *((void *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v51);
          goto LABEL_312;
        case 0xBu:
          *(void *)(a1 + 212) |= 0x80uLL;
          unint64_t v52 = *((void *)this + 1);
          unint64_t v53 = *((void *)this + 2);
          uint64_t v54 = *(void *)this;
          if (v52 <= 0xFFFFFFFFFFFFFFF5LL && v52 + 10 <= v53)
          {
            char v55 = 0;
            unsigned int v56 = 0;
            uint64_t v57 = 0LL;
            do
            {
              unint64_t v58 = v52 + 1;
              *((void *)this + 1) = v52 + 1;
              char v59 = *(_BYTE *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0) {
                goto LABEL_333;
              }
              v55 += 7;
              unint64_t v52 = v58;
              BOOL v14 = v56++ > 8;
            }

            while (!v14);
LABEL_229:
            uint64_t v57 = 0LL;
            goto LABEL_333;
          }

          char v184 = 0;
          unsigned int v185 = 0;
          uint64_t v57 = 0LL;
          if (v53 <= v52) {
            unint64_t v53 = *((void *)this + 1);
          }
          while (2)
          {
            if (v53 == v52)
            {
              uint64_t v57 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v186 = v52 + 1;
              char v187 = *(_BYTE *)(v54 + v52);
              *((void *)this + 1) = v186;
              v57 |= (unint64_t)(v187 & 0x7F) << v184;
              if (v187 < 0)
              {
                v184 += 7;
                unint64_t v52 = v186;
                BOOL v14 = v185++ > 8;
                if (v14) {
                  goto LABEL_229;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v57 = 0LL;
              }
            }

            break;
          }

LABEL_337:
          *(void *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v68;
          goto LABEL_313;
        case 0x10u:
          *(void *)(a1 + 212) |= 0x2000000uLL;
          unint64_t v71 = *((void *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v71);
          goto LABEL_312;
        case 0x11u:
          *(void *)(a1 + 212) |= 0x200000000uLL;
          unint64_t v72 = *((void *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(void *)this + v72);
          goto LABEL_312;
        case 0x12u:
          *(void *)(a1 + 212) |= 0x20000000uLL;
          unint64_t v73 = *((void *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v73);
          goto LABEL_312;
        case 0x13u:
          *(void *)(a1 + 212) |= 0x100uLL;
          unint64_t v74 = *((void *)this + 1);
          unint64_t v75 = *((void *)this + 2);
          uint64_t v76 = *(void *)this;
          if (v74 <= 0xFFFFFFFFFFFFFFF5LL && v74 + 10 <= v75)
          {
            char v77 = 0;
            unsigned int v78 = 0;
            uint64_t v79 = 0LL;
            do
            {
              unint64_t v80 = v74 + 1;
              *((void *)this + 1) = v74 + 1;
              char v81 = *(_BYTE *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0) {
                goto LABEL_341;
              }
              v77 += 7;
              unint64_t v74 = v80;
              BOOL v14 = v78++ > 8;
            }

            while (!v14);
LABEL_243:
            uint64_t v79 = 0LL;
            goto LABEL_341;
          }

          char v192 = 0;
          unsigned int v193 = 0;
          uint64_t v79 = 0LL;
          if (v75 <= v74) {
            unint64_t v75 = *((void *)this + 1);
          }
          while (2)
          {
            if (v75 == v74)
            {
              uint64_t v79 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v194 = v74 + 1;
              char v195 = *(_BYTE *)(v76 + v74);
              *((void *)this + 1) = v194;
              v79 |= (unint64_t)(v195 & 0x7F) << v192;
              if (v195 < 0)
              {
                v192 += 7;
                unint64_t v74 = v194;
                BOOL v14 = v193++ > 8;
                if (v14) {
                  goto LABEL_243;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v79 = 0LL;
              }
            }

            break;
          }

LABEL_341:
          *(void *)(a1 + 72) = v79;
          goto LABEL_313;
        case 0x14u:
          *(void *)(a1 + 212) |= 0x8000000uLL;
          unint64_t v82 = *((void *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v82);
          goto LABEL_312;
        case 0x15u:
          *(void *)(a1 + 212) |= (unint64_t)&_mh_execute_header;
          unint64_t v83 = *((void *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(void *)this + v83);
          goto LABEL_312;
        case 0x16u:
          *(void *)(a1 + 212) |= 0x80000000uLL;
          unint64_t v84 = *((void *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 18sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(_DWORD *)(*(void *)this + v84);
          goto LABEL_312;
        case 0x17u:
          *(void *)(a1 + 212) |= 0x400uLL;
          unint64_t v85 = *((void *)this + 1);
          unint64_t v86 = *((void *)this + 2);
          uint64_t v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5LL && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0LL;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              char v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_345;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }

            while (!v14);
LABEL_250:
            uint64_t v90 = 0LL;
            goto LABEL_345;
          }

          char v196 = 0;
          unsigned int v197 = 0;
          uint64_t v90 = 0LL;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              uint64_t v90 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v198 = v85 + 1;
              char v199 = *(_BYTE *)(v87 + v85);
              *((void *)this + 1) = v198;
              v90 |= (unint64_t)(v199 & 0x7F) << v196;
              if (v199 < 0)
              {
                v196 += 7;
                unint64_t v85 = v198;
                BOOL v14 = v197++ > 8;
                if (v14) {
                  goto LABEL_250;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v90 = 0LL;
              }
            }

            break;
          }

LABEL_345:
          *(void *)(a1 + 88) = v90;
          goto LABEL_313;
        case 0x18u:
          *(void *)(a1 + 212) |= 0x4000000uLL;
          unint64_t v93 = *((void *)this + 1);
          if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 16sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(_DWORD *)(*(void *)this + v93);
          goto LABEL_312;
        case 0x19u:
          *(void *)(a1 + 212) |= 0x10000000uLL;
          unint64_t v94 = *((void *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(void *)this + v94);
          goto LABEL_312;
        case 0x1Au:
          *(void *)(a1 + 212) |= 0x2000uLL;
          unint64_t v95 = *((void *)this + 1);
          if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v95);
          goto LABEL_312;
        case 0x1Bu:
          *(void *)(a1 + 212) |= 0x8000uLL;
          unint64_t v96 = *((void *)this + 1);
          unint64_t v97 = *((void *)this + 2);
          uint64_t v98 = *(void *)this;
          if (v96 <= 0xFFFFFFFFFFFFFFF5LL && v96 + 10 <= v97)
          {
            char v99 = 0;
            unsigned int v100 = 0;
            uint64_t v101 = 0LL;
            do
            {
              unint64_t v102 = v96 + 1;
              *((void *)this + 1) = v96 + 1;
              char v103 = *(_BYTE *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0) {
                goto LABEL_377;
              }
              v99 += 7;
              unint64_t v96 = v102;
              BOOL v14 = v100++ > 8;
            }

            while (!v14);
LABEL_257:
            LODWORD(v101) = 0;
            goto LABEL_377;
          }

          char v200 = 0;
          unsigned int v201 = 0;
          uint64_t v101 = 0LL;
          if (v97 <= v96) {
            unint64_t v97 = *((void *)this + 1);
          }
          while (2)
          {
            if (v97 == v96)
            {
              LODWORD(v101) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v202 = v96 + 1;
              char v203 = *(_BYTE *)(v98 + v96);
              *((void *)this + 1) = v202;
              v101 |= (unint64_t)(v203 & 0x7F) << v200;
              if (v203 < 0)
              {
                v200 += 7;
                unint64_t v96 = v202;
                BOOL v14 = v201++ > 8;
                if (v14) {
                  goto LABEL_257;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v101) = 0;
              }
            }

            break;
          }

LABEL_350:
          *(_DWORD *)(a1 + 112) = v109;
          goto LABEL_313;
        case 0x1Du:
          *(void *)(a1 + 212) |= 0x10uLL;
          unint64_t v112 = *((void *)this + 1);
          unint64_t v113 = *((void *)this + 2);
          uint64_t v114 = *(void *)this;
          if (v112 <= 0xFFFFFFFFFFFFFFF5LL && v112 + 10 <= v113)
          {
            char v115 = 0;
            unsigned int v116 = 0;
            uint64_t v117 = 0LL;
            do
            {
              unint64_t v118 = v112 + 1;
              *((void *)this + 1) = v112 + 1;
              char v119 = *(_BYTE *)(v114 + v112);
              v117 |= (unint64_t)(v119 & 0x7F) << v115;
              if ((v119 & 0x80) == 0) {
                goto LABEL_354;
              }
              v115 += 7;
              unint64_t v112 = v118;
              BOOL v14 = v116++ > 8;
            }

            while (!v14);
LABEL_271:
            uint64_t v117 = 0LL;
            goto LABEL_354;
          }

          char v208 = 0;
          unsigned int v209 = 0;
          uint64_t v117 = 0LL;
          if (v113 <= v112) {
            unint64_t v113 = *((void *)this + 1);
          }
          while (2)
          {
            if (v113 == v112)
            {
              uint64_t v117 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v210 = v112 + 1;
              char v211 = *(_BYTE *)(v114 + v112);
              *((void *)this + 1) = v210;
              v117 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                unint64_t v112 = v210;
                BOOL v14 = v209++ > 8;
                if (v14) {
                  goto LABEL_271;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v117 = 0LL;
              }
            }

            break;
          }

LABEL_358:
          *(void *)(a1 + 32) = v125;
          goto LABEL_313;
        case 0x1Fu:
          *(void *)(a1 + 212) |= 0x800000000uLL;
          unint64_t v128 = *((void *)this + 1);
          if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(void *)this + v128);
          goto LABEL_312;
        case 0x20u:
          *(void *)(a1 + 212) |= 0x2000000000uLL;
          unint64_t v129 = *((void *)this + 1);
          if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(void *)this + v129);
          goto LABEL_312;
        case 0x21u:
          *(void *)(a1 + 212) |= 0x1000000000uLL;
          unint64_t v130 = *((void *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 20sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(_DWORD *)(*(void *)this + v130);
          goto LABEL_312;
        case 0x22u:
          *(void *)(a1 + 212) |= 0x400000000uLL;
          unint64_t v131 = *((void *)this + 1);
          if (v131 <= 0xFFFFFFFFFFFFFFFBLL && v131 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(void *)this + v131);
LABEL_312:
            *((void *)this + 1) += 4LL;
          }

          else
          {
LABEL_169:
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_313;
        case 0x23u:
          *(void *)(a1 + 212) |= 0x4000000000uLL;
          unint64_t v132 = *((void *)this + 1);
          if (v132 >= *((void *)this + 2))
          {
            BOOL v135 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v133 = v132 + 1;
            int v134 = *(unsigned __int8 *)(*(void *)this + v132);
            *((void *)this + 1) = v133;
            BOOL v135 = v134 != 0;
          }

          *(_BYTE *)(a1 + 208) = v135;
          goto LABEL_313;
        case 0x24u:
          *(void *)(a1 + 212) |= 0x8000000000uLL;
          unint64_t v136 = *((void *)this + 1);
          if (v136 >= *((void *)this + 2))
          {
            BOOL v139 = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v137 = v136 + 1;
            int v138 = *(unsigned __int8 *)(*(void *)this + v136);
            *((void *)this + 1) = v137;
            BOOL v139 = v138 != 0;
          }

          *(_BYTE *)(a1 + 209) = v139;
          goto LABEL_313;
        case 0x25u:
          *(void *)(a1 + 212) |= 0x1000uLL;
          unint64_t v140 = *((void *)this + 1);
          unint64_t v141 = *((void *)this + 2);
          uint64_t v142 = *(void *)this;
          if (v140 <= 0xFFFFFFFFFFFFFFF5LL && v140 + 10 <= v141)
          {
            char v143 = 0;
            unsigned int v144 = 0;
            uint64_t v145 = 0LL;
            do
            {
              unint64_t v146 = v140 + 1;
              *((void *)this + 1) = v140 + 1;
              char v147 = *(_BYTE *)(v142 + v140);
              v145 |= (unint64_t)(v147 & 0x7F) << v143;
              if ((v147 & 0x80) == 0) {
                goto LABEL_362;
              }
              v143 += 7;
              unint64_t v140 = v146;
              BOOL v14 = v144++ > 8;
            }

            while (!v14);
LABEL_289:
            LODWORD(v145) = 0;
            goto LABEL_362;
          }

          char v216 = 0;
          unsigned int v217 = 0;
          uint64_t v145 = 0LL;
          if (v141 <= v140) {
            unint64_t v141 = *((void *)this + 1);
          }
          while (2)
          {
            if (v141 == v140)
            {
              LODWORD(v145) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v218 = v140 + 1;
              char v219 = *(_BYTE *)(v142 + v140);
              *((void *)this + 1) = v218;
              v145 |= (unint64_t)(v219 & 0x7F) << v216;
              if (v219 < 0)
              {
                v216 += 7;
                unint64_t v140 = v218;
                BOOL v14 = v217++ > 8;
                if (v14) {
                  goto LABEL_289;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v145) = 0;
              }
            }

            break;
          }

LABEL_362:
          *(_DWORD *)(a1 + 104) = v145;
          goto LABEL_313;
        case 0x26u:
          *(void *)(a1 + 212) |= 4uLL;
          unint64_t v148 = *((void *)this + 1);
          unint64_t v149 = *((void *)this + 2);
          uint64_t v150 = *(void *)this;
          if (v148 <= 0xFFFFFFFFFFFFFFF5LL && v148 + 10 <= v149)
          {
            char v151 = 0;
            unsigned int v152 = 0;
            uint64_t v153 = 0LL;
            do
            {
              unint64_t v154 = v148 + 1;
              *((void *)this + 1) = v148 + 1;
              char v155 = *(_BYTE *)(v150 + v148);
              v153 |= (unint64_t)(v155 & 0x7F) << v151;
              if ((v155 & 0x80) == 0) {
                goto LABEL_366;
              }
              v151 += 7;
              unint64_t v148 = v154;
              BOOL v14 = v152++ > 8;
            }

            while (!v14);
LABEL_296:
            uint64_t v153 = 0LL;
            goto LABEL_366;
          }

          char v220 = 0;
          unsigned int v221 = 0;
          uint64_t v153 = 0LL;
          if (v149 <= v148) {
            unint64_t v149 = *((void *)this + 1);
          }
          while (2)
          {
            if (v149 == v148)
            {
              uint64_t v153 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v222 = v148 + 1;
              char v223 = *(_BYTE *)(v150 + v148);
              *((void *)this + 1) = v222;
              v153 |= (unint64_t)(v223 & 0x7F) << v220;
              if (v223 < 0)
              {
                v220 += 7;
                unint64_t v148 = v222;
                BOOL v14 = v221++ > 8;
                if (v14) {
                  goto LABEL_296;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v153 = 0LL;
              }
            }

            break;
          }

LABEL_366:
          *(void *)(a1 + 24) = v153;
          goto LABEL_313;
        case 0x27u:
          *(void *)(a1 + 212) |= 2uLL;
          unint64_t v156 = *((void *)this + 1);
          unint64_t v157 = *((void *)this + 2);
          uint64_t v158 = *(void *)this;
          if (v156 <= 0xFFFFFFFFFFFFFFF5LL && v156 + 10 <= v157)
          {
            char v159 = 0;
            unsigned int v160 = 0;
            uint64_t v161 = 0LL;
            do
            {
              unint64_t v162 = v156 + 1;
              *((void *)this + 1) = v156 + 1;
              char v163 = *(_BYTE *)(v158 + v156);
              v161 |= (unint64_t)(v163 & 0x7F) << v159;
              if ((v163 & 0x80) == 0) {
                goto LABEL_370;
              }
              v159 += 7;
              unint64_t v156 = v162;
              BOOL v14 = v160++ > 8;
            }

            while (!v14);
LABEL_303:
            uint64_t v161 = 0LL;
            goto LABEL_370;
          }

          char v224 = 0;
          unsigned int v225 = 0;
          uint64_t v161 = 0LL;
          if (v157 <= v156) {
            unint64_t v157 = *((void *)this + 1);
          }
          while (2)
          {
            if (v157 == v156)
            {
              uint64_t v161 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v226 = v156 + 1;
              char v227 = *(_BYTE *)(v158 + v156);
              *((void *)this + 1) = v226;
              v161 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                unint64_t v156 = v226;
                BOOL v14 = v225++ > 8;
                if (v14) {
                  goto LABEL_303;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v161 = 0LL;
              }
            }

            break;
          }

LABEL_370:
          *(void *)(a1 + 16) = v161;
          goto LABEL_313;
        case 0x28u:
          *(void *)(a1 + 212) |= 1uLL;
          unint64_t v164 = *((void *)this + 1);
          unint64_t v165 = *((void *)this + 2);
          uint64_t v166 = *(void *)this;
          if (v164 <= 0xFFFFFFFFFFFFFFF5LL && v164 + 10 <= v165)
          {
            char v167 = 0;
            unsigned int v168 = 0;
            uint64_t v169 = 0LL;
            do
            {
              unint64_t v170 = v164 + 1;
              *((void *)this + 1) = v164 + 1;
              char v171 = *(_BYTE *)(v166 + v164);
              v169 |= (unint64_t)(v171 & 0x7F) << v167;
              if ((v171 & 0x80) == 0) {
                goto LABEL_374;
              }
              v167 += 7;
              unint64_t v164 = v170;
              BOOL v14 = v168++ > 8;
            }

            while (!v14);
LABEL_310:
            uint64_t v169 = 0LL;
            goto LABEL_374;
          }

          char v228 = 0;
          unsigned int v229 = 0;
          uint64_t v169 = 0LL;
          if (v165 <= v164) {
            unint64_t v165 = *((void *)this + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_313;
      }

      while (1)
      {
        if (v165 == v164)
        {
          uint64_t v169 = 0LL;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_374;
        }

        unint64_t v230 = v164 + 1;
        char v231 = *(_BYTE *)(v166 + v164);
        *((void *)this + 1) = v230;
        v169 |= (unint64_t)(v231 & 0x7F) << v228;
        if ((v231 & 0x80) == 0) {
          break;
        }
        v228 += 7;
        unint64_t v164 = v230;
        BOOL v14 = v229++ > 8;
        if (v14) {
          goto LABEL_310;
        }
      }

      if (*((_BYTE *)this + 24)) {
        uint64_t v169 = 0LL;
      }
LABEL_374:
      *(void *)(a1 + 8) = v169;
LABEL_313:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }

    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0LL;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(_BYTE *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0LL;
        goto LABEL_20;
      }
    }

    int v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v4 == 0;
}

uint64_t sub_10113FDF8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 212);
  if ((v4 & 0x800) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 96), 1u);
    uint64_t v4 = *(void *)(v3 + 212);
    if ((v4 & 0x200000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_44;
    }
  }

  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 2u);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_45;
  }

uint64_t sub_10114027C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D528;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101140294(PB::Base *a1)
{
}

float sub_1011402A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D528;
  *(_DWORD *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 2) != 0)
  {
    float result = *(float *)(a2 + 12);
    char v3 = 2;
    *(_BYTE *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 2;
    *(float *)(a1 + 12) = result;
    char v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(float *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 20);
  }

uint64_t sub_101140318(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 20) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "elevationDeg", *(float *)(a1 + 12));
    if ((*(_BYTE *)(a1 + 20) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "azimuthDeg", *(float *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "l1Cn0", *(float *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011403A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011405C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 12), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(float *)(v3 + 16), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 20) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 20) & 4) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  }
  return result;
}

uint64_t sub_101140638(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D560;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101140650(PB::Base *a1)
{
}

uint64_t sub_101140664(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189D560;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1011406B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "sessionType", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10114071C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011409A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

void *sub_101140A00(void *result)
{
  *uint64_t result = &off_10189D598;
  result[1] = 0LL;
  return result;
}

void sub_101140A14(PB::Base *a1)
{
}

uint64_t sub_101140A28(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189D598;
  *(void *)(result + 8) = 0LL;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }

  return result;
}

uint64_t sub_101140A50(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101140A9C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101140CD0(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  }
  return result;
}

void *sub_101140CF0(void *result)
{
  *uint64_t result = &off_10189D5D0;
  result[2] = 0LL;
  return result;
}

void sub_101140D08(PB::Base *a1)
{
}

uint64_t sub_101140D1C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189D5D0;
  *(void *)(result + 16) = 0LL;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_101140D6C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101140DD4(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011410FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_101141154(uint64_t result)
{
  *(void *)uint64_t result = off_10189D608;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101141168(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189D608;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1011411A8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189D608;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1011411EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189D608;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 1;
    *(void *)(a1 + 16) = v3;
  }

  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    char v5 = operator new(0x10uLL);
    *(void *)char v5 = &off_10189D640;
    v5[3] = 0;
    if ((*(_BYTE *)(v4 + 12) & 1) != 0)
    {
      int v6 = *(_DWORD *)(v4 + 8);
      *((_BYTE *)v5 + 12) = 1;
      v5[2] = v6;
    }

    *(void *)(a1 + 8) = v5;
  }

  return a1;
}

uint64_t sub_101141278(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "motionState");
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011412E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011415A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 24) & 1) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 16), 1u);
  }
  int v4 = *(const PB::Base **)(v3 + 8);
  if (v4) {
    return PB::Writer::writeSubmessage(this, v4, 2u);
  }
  return result;
}

void sub_1011415F8(PB::Base *a1)
{
}

uint64_t sub_10114160C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101141658(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10114188C(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_1011418AC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D678;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1011418C4(PB::Base *a1)
{
}

float sub_1011418D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D678;
  *(_DWORD *)(a1 + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 44) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 28) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
  }

uint64_t sub_1011419D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "magnitudeRangeInertialVertical", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "maxAngleBetweenThighAndShinDeg", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_101141B04(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101141E48(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_101141F4C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D6B0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101141F64(PB::Base *a1)
{
}

float sub_101141F78(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D6B0;
  *(_DWORD *)(a1 + 28) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_101142004(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxPosterior", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "minPosterior", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "meanPosterior", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 1) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011420B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101142318(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  }

uint64_t sub_1011423AC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D6E8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1011423C4(PB::Base *a1)
{
}

float sub_1011423D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D6E8;
  *(_DWORD *)(a1 + 28) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_101142464(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxPosterior", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "minPosterior", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "meanPosterior", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 1) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101142514(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101142778(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 20), 4u);
  }

void *sub_10114280C(void *result)
{
  *uint64_t result = &off_10189D720;
  result[2] = 0LL;
  return result;
}

void sub_101142824(PB::Base *a1)
{
}

uint64_t sub_101142838(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189D720;
  *(void *)(result + 16) = 0LL;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_101142888(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "transitionType", *(_DWORD *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011428F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101142B7C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_101142BD4(uint64_t result)
{
  *(void *)uint64_t result = off_10189D758;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_101142BF0(void **a1)
{
  *a1 = off_10189D758;
  unint64_t v2 = a1 + 2;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_101142C38(void **a1)
{
  *a1 = off_10189D758;
  uint64_t v3 = a1 + 2;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

uint64_t sub_101142C84(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189D758;
  *(void *)(a1 + 16) = 0LL;
  char v4 = (char **)(a1 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(_DWORD *)(a1 + 48) = 0;
  char v5 = *(uint64_t **)(a2 + 16);
  int v6 = *(uint64_t **)(a2 + 24);
  while (v5 != v6)
    sub_101142D30(v4, *v5++);
  char v7 = *(_BYTE *)(a2 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 48) |= 2u;
    *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v8;
    char v7 = *(_BYTE *)(a2 + 48);
  }

  if ((v7 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(void *)(a1 + 8) = v9;
  }

  return a1;
}

uint64_t sub_101142D30(char **a1, uint64_t a2)
{
  char v4 = operator new(0x30uLL);
  sub_101143384((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  char v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    unsigned int v24 = a1 + 2;
    if (v12) {
      char v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      char v13 = 0LL;
    }
    BOOL v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    char v23 = v15;
    *(void *)BOOL v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    unint64_t v17 = *a1;
    unsigned int v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)unsigned int v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      char v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    unint64_t v20 = a1[2];
    a1[2] = v15;
    char v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)char v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_101142E54(_Unwind_Exception *a1)
{
}

uint64_t sub_101142E74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0) {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  }
  char v5 = *(uint64_t **)(a1 + 16);
  unint64_t v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "joint");
  }

  if ((*(_BYTE *)(a1 + 48) & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101142F20(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char **)(a1 + 16);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        unint64_t v12 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v18 = v2 + 1;
          char v19 = *(_BYTE *)(v9 + v2);
          *((void *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0) {
            goto LABEL_21;
          }
          v16 += 7;
          unint64_t v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            unint64_t v12 = 0LL;
            goto LABEL_21;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101143160(char **a1)
{
  unint64_t v2 = operator new(0x30uLL);
  *unint64_t v2 = &off_10189D790;
  v2[1] = 0LL;
  v2[2] = 0LL;
  v2[3] = 0LL;
  *((_DWORD *)v2 + 9) = 0;
  *((_DWORD *)v2 + 11) = 0;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  char v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    unint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    char v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    unint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)char v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_101143290(_Unwind_Exception *a1)
{
}

uint64_t sub_1011432AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base ***)(result + 16);
  char v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    unint64_t v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 1u);
  }

  char v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
    char v7 = *(_BYTE *)(v3 + 48);
  }

  if ((v7 & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  }
  return result;
}

void sub_101143330(PB::Base *this)
{
  *(void *)this = &off_10189D790;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_101143370(PB::Base *a1)
{
}

uint64_t sub_101143384(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0LL;
  unint64_t v4 = (char *)(a1 + 8);
  *(void *)a1 = &off_10189D790;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    int v5 = *(_DWORD *)(a2 + 36);
    *(_BYTE *)(a1 + 44) = 2;
    *(_DWORD *)(a1 + 36) = v5;
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  char v6 = *(_BYTE *)(a2 + 44);
  if ((v6 & 1) != 0)
  {
    int v7 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 32) = v7;
    char v6 = *(_BYTE *)(a2 + 44);
  }

  if ((v6 & 4) != 0)
  {
    char v8 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a1 + 44) |= 4u;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v8;
  }

  return a1;
}

uint64_t sub_101143430(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 32));
    char v5 = *(_BYTE *)(a1 + 44);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "joint", *(_DWORD *)(a1 + 36));
  }
  char v6 = *(float **)(a1 + 8);
  int v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "position", v8);
  }

  if ((*(_BYTE *)(a1 + 44) & 4) != 0) {
    PB::TextFormatter::format(this, "visible", *(_BYTE *)(a1 + 40));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1011434F0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unint64_t v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }

uint64_t sub_1011439E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 44) & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 36), 1u);
  }
  unint64_t v4 = *(float **)(v3 + 8);
  unint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    uint64_t result = PB::Writer::write(this, v6, 2u);
  }

  char v7 = *(_BYTE *)(v3 + 44);
  if ((v7 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
    char v7 = *(_BYTE *)(v3 + 44);
  }

  if ((v7 & 4) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 40), 4u);
  }
  return result;
}

void *sub_101143A80(void *result)
{
  *uint64_t result = off_10189D7C8;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_101143A94(void **a1)
{
  *a1 = off_10189D7C8;
  unint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_101143ADC(void **a1)
{
  *a1 = off_10189D7C8;
  uint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

void *sub_101143B28(void *a1, uint64_t a2)
{
  a1[1] = 0LL;
  uint64_t v3 = (char **)(a1 + 1);
  *a1 = off_10189D7C8;
  a1[2] = 0LL;
  a1[3] = 0LL;
  unint64_t v4 = *(uint64_t **)(a2 + 8);
  unint64_t v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_101143B8C(v3, *v4++);
  return a1;
}

uint64_t sub_101143B8C(char **a1, uint64_t a2)
{
  unint64_t v4 = operator new(0x40uLL);
  sub_101145308((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  char v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    uint64_t v24 = a1 + 2;
    if (v12) {
      char v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      char v13 = 0LL;
    }
    unsigned int v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    uint64_t v23 = v15;
    *(void *)unsigned int v14 = v4;
    float v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    char v17 = *a1;
    unint64_t v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)unint64_t v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      float v8 = (char *)v22.i64[1];
      unint64_t v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    unsigned int v20 = a1[2];
    a1[2] = v15;
    uint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)char v7 = v4;
    float v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_101143CB0(_Unwind_Exception *a1)
{
}

uint64_t sub_101143CD0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "joint");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101143D3C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (char **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101143EDC(char **a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &off_10189D8A8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *((void *)v2 + 7) = 0LL;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  unint64_t v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    uint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    unint64_t v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    uint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)unint64_t v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_101144014(_Unwind_Exception *a1)
{
}

uint64_t sub_101144030(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5, 1u))
    unint64_t v5 = *v2++;
  return result;
}

uint64_t sub_101144078(uint64_t result)
{
  *(void *)uint64_t result = off_10189D800;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_101144094(void **a1)
{
  *a1 = off_10189D800;
  unint64_t v2 = a1 + 2;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1011440DC(void **a1)
{
  *a1 = off_10189D800;
  unint64_t v3 = a1 + 2;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

uint64_t sub_101144128(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189D800;
  *(void *)(a1 + 16) = 0LL;
  unint64_t v4 = (char **)(a1 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(_DWORD *)(a1 + 48) = 0;
  unint64_t v5 = *(uint64_t **)(a2 + 16);
  unint64_t v6 = *(uint64_t **)(a2 + 24);
  while (v5 != v6)
    sub_1011441D4(v4, *v5++);
  char v7 = *(_BYTE *)(a2 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 48) |= 2u;
    *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v8;
    char v7 = *(_BYTE *)(a2 + 48);
  }

  if ((v7 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(void *)(a1 + 8) = v9;
  }

  return a1;
}

uint64_t sub_1011441D4(char **a1, uint64_t a2)
{
  unint64_t v4 = operator new(0x28uLL);
  sub_101144828((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  char v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    uint64_t v24 = a1 + 2;
    if (v12) {
      unint64_t v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      unint64_t v13 = 0LL;
    }
    char v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    uint64_t v23 = v15;
    *(void *)char v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    int64x2_t v17 = *a1;
    uint64_t v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)uint64_t v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      unint64_t v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    int64x2_t v20 = a1[2];
    a1[2] = v15;
    uint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)char v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_1011442F8(_Unwind_Exception *a1)
{
}

uint64_t sub_101144318(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0) {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  }
  unint64_t v5 = *(uint64_t **)(a1 + 16);
  unint64_t v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "joint");
  }

  if ((*(_BYTE *)(a1 + 48) & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011443C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char **)(a1 + 16);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        unint64_t v12 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v18 = v2 + 1;
          char v19 = *(_BYTE *)(v9 + v2);
          *((void *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0) {
            goto LABEL_21;
          }
          v16 += 7;
          unint64_t v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            unint64_t v12 = 0LL;
            goto LABEL_21;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101144604(char **a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &off_10189D838;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  unint64_t v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    unint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    unint64_t v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    unint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)unint64_t v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_101144734(_Unwind_Exception *a1)
{
}

uint64_t sub_101144750(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base ***)(result + 16);
  unint64_t v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    unint64_t v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 1u);
  }

  char v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
    char v7 = *(_BYTE *)(v3 + 48);
  }

  if ((v7 & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  }
  return result;
}

void sub_1011447D4(PB::Base *this)
{
  *(void *)this = &off_10189D838;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_101144814(PB::Base *a1)
{
}

uint64_t sub_101144828(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D838;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v3 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 36) = 1;
    *(_DWORD *)(a1 + 32) = v4;
  }

  if (a1 != a2) {
    sub_10004C5F8( v3,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_101144898(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 36) & 1) != 0) {
    PB::TextFormatter::format(this, "joint", *(_DWORD *)(a1 + 32));
  }
  unint64_t v5 = *(float **)(a1 + 8);
  unint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "position", v7);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101144918(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unint64_t v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }

uint64_t sub_101144D74(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 36) & 1) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 32), 1u);
  }
  unint64_t v5 = *(float **)(v3 + 8);
  unint64_t v4 = *(float **)(v3 + 16);
  while (v5 != v4)
  {
    float v6 = *v5++;
    uint64_t result = PB::Writer::write(this, v6, 2u);
  }

  return result;
}

uint64_t sub_101144DD4(uint64_t result)
{
  *(void *)uint64_t result = off_10189D870;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_101144DF0(void **a1)
{
  *a1 = off_10189D870;
  unint64_t v2 = a1 + 2;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_101144E38(void **a1)
{
  *a1 = off_10189D870;
  uint64_t v3 = a1 + 2;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

uint64_t sub_101144E84(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189D870;
  *(void *)(a1 + 16) = 0LL;
  unint64_t v4 = (char **)(a1 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(_DWORD *)(a1 + 48) = 0;
  unint64_t v5 = *(uint64_t **)(a2 + 16);
  float v6 = *(uint64_t **)(a2 + 24);
  while (v5 != v6)
    sub_101143B8C(v4, *v5++);
  char v7 = *(_BYTE *)(a2 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 48) |= 2u;
    *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v8;
    char v7 = *(_BYTE *)(a2 + 48);
  }

  if ((v7 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(void *)(a1 + 8) = v9;
  }

  return a1;
}

uint64_t sub_101144F34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0) {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  }
  unint64_t v5 = *(uint64_t **)(a1 + 16);
  float v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "joint");
  }

  if ((*(_BYTE *)(a1 + 48) & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101144FE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char **)(a1 + 16);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        unint64_t v12 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v18 = v2 + 1;
          char v19 = *(_BYTE *)(v9 + v2);
          *((void *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0) {
            goto LABEL_21;
          }
          v16 += 7;
          unint64_t v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            unint64_t v12 = 0LL;
            goto LABEL_21;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101145220(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base ***)(result + 16);
  unint64_t v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    float v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 1u);
  }

  char v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
    char v7 = *(_BYTE *)(v3 + 48);
  }

  if ((v7 & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  }
  return result;
}

void sub_1011452A4(PB::Base *this)
{
  *(void *)this = &off_10189D8A8;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1011452F4(PB::Base *a1)
{
}

uint64_t sub_101145308(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D8A8;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(void *)(a1 + 56) = 0LL;
  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    int v5 = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(_DWORD *)(a1 + 56) = v5;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  return a1;
}

uint64_t sub_101145394(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 60) & 1) != 0) {
    PB::TextFormatter::format(this, "joint", *(_DWORD *)(a1 + 56));
  }
  int v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "position", v7);
  }

  uint64_t v8 = *(float **)(a1 + 32);
  uint64_t v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "quaternion", v10);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101145448(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    unint64_t v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        unint64_t v17 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v23 = v4 + 1;
          char v24 = *(_BYTE *)(v14 + v4);
          *((void *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_21;
          }
          v21 += 7;
          unint64_t v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            unint64_t v17 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_101145A64(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = (void *)result;
  if ((*(_BYTE *)(result + 60) & 1) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 56), 1u);
  }
  unint64_t v4 = (float *)v3[1];
  unint64_t v5 = (float *)v3[2];
  while (v4 != v5)
  {
    float v6 = *v4++;
    uint64_t result = PB::Writer::write(this, v6, 2u);
  }

  uint64_t v8 = (float *)v3[4];
  float v7 = (float *)v3[5];
  while (v8 != v7)
  {
    float v9 = *v8++;
    uint64_t result = PB::Writer::write(this, v9, 3u);
  }

  return result;
}

uint64_t sub_101145AE4(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D8E0;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101145AFC(PB::Base *a1)
{
}

uint64_t sub_101145B10(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189D8E0;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    int v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 2;
    *(_DWORD *)(result + 16) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    uint64_t v4 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(void *)(result + 8) = v4;
  }

  return result;
}

uint64_t sub_101145B60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "rms", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101145BC8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101145E54(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 2u);
  }
  return result;
}

void *sub_101145EAC(void *result)
{
  *uint64_t result = &off_10189D918;
  result[2] = 0LL;
  return result;
}

void sub_101145EC4(PB::Base *a1)
{
}

double sub_101145ED8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D918;
  *(void *)(a1 + 16) = 0LL;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    int v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 2;
    *(_DWORD *)(a1 + 16) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(double *)(a1 + 8) = result;
  }

  return result;
}

uint64_t sub_101145F28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "event", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101145F90(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10114621C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  }
  return result;
}

uint64_t sub_101146274(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D950;
  *(_DWORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10114628C(PB::Base *a1)
{
}

double sub_1011462A0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D950;
  *(_DWORD *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    __int16 v3 = 8;
    *(_WORD *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 8;
    *(double *)(a1 + 32) = result;
    __int16 v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(_DWORD *)(a1 + 48) = v5;
    __int16 v2 = *(_WORD *)(a2 + 60);
  }

uint64_t sub_1011463F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "isBlockoutPeriodLow", *(_BYTE *)(a1 + 52));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "isBlockoutPeriodVeryLow", *(_BYTE *)(a1 + 53));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_101146580(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101146A54(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_101146BAC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D988;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101146BC4(PB::Base *a1)
{
}

double sub_101146BD8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D988;
  *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 2;
    *(double *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_101146C64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "intermediateBoutsAsymmetryPercentageCv", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "intermediateBoutsAsymmetryPercentageMedian", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageStd", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101146D14(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101146F70(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  }

uint64_t sub_101147004(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D9C0;
  *(_DWORD *)(result + 176) = 0;
  return result;
}

void sub_10114701C(PB::Base *a1)
{
}

double sub_101147030(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D9C0;
  *(_DWORD *)(a1 + 176) = 0;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 176) = 1;
    *(double *)(a1 + 8) = result;
    int v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 16) = result;
    int v2 = *(_DWORD *)(a2 + 176);
  }

uint64_t sub_101147298(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "allBoutsBoutDurationSecCv", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 176);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "allBoutsBoutDurationSecMedian", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }

uint64_t sub_101147568(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101147B7C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 176);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }

uint64_t sub_101147DEC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189D9F8;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_101147E04(PB::Base *a1)
{
}

double sub_101147E18(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189D9F8;
  *(_DWORD *)(a1 + 88) = 0;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(a1 + 88) = 1;
    *(double *)(a1 + 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 16) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
  }

uint64_t sub_101147F4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryPercentageMedian", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "asymmetryPercentageStd", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_1011480BC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101148468(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 88);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_1011485A4(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DA30;
  *(_DWORD *)(result + 248) = 0;
  return result;
}

void sub_1011485BC(PB::Base *a1)
{
}

double sub_1011485D0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DA30;
  *(_DWORD *)(a1 + 248) = 0;
  int v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 248) = 1;
    *(double *)(a1 + 8) = result;
    int v2 = *(_DWORD *)(a2 + 248);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 248) = v3;
    *(double *)(a1 + 16) = result;
    int v2 = *(_DWORD *)(a2 + 248);
  }

uint64_t sub_101148934(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApCv", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 248);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApMean", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }

uint64_t sub_101148D24(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101149530(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 248);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 248);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }

uint64_t sub_10114989C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DA68;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1011498B4(PB::Base *a1)
{
}

uint64_t sub_1011498C8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189DA68;
  *(_DWORD *)(result + 52) = 0;
  char v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(result + 52) = 4;
    *(void *)(result + 24) = v4;
    char v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 52) = v3;
    *(void *)(result + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 52);
  }

uint64_t sub_1011499C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "likelihoodNotOK", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 52) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "likelihoodOK", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_101149AF4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10114A1B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 52);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(result + 52) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_10114A2B8(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DAA0;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10114A2D0(PB::Base *a1)
{
}

double sub_10114A2E4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DAA0;
  *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    char v3 = 8;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 8;
    *(double *)(a1 + 32) = result;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(double *)(a1 + 24) = result;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_10114A370(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "centroidSlopeHeightNormDoubleSupportPercentageCadence", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "l2DispersionHeightNormDoubleSupportPercentageCadence", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "centroidSlopeHeightNormWalkingSpeedStepLength", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "l2DispersionHeightNormWalkingSpeedStepLength", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10114A420(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10114A67C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  }

uint64_t sub_10114A710(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DAD8;
  *(_DWORD *)(result + 216) = 0;
  return result;
}

void sub_10114A728(PB::Base *a1)
{
}

double sub_10114A73C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DAD8;
  *(_DWORD *)(a1 + 216) = 0;
  int v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x80000) != 0)
  {
    double result = *(double *)(a2 + 160);
    int v3 = 0x80000;
    *(_DWORD *)(a1 + 216) = 0x80000;
    *(double *)(a1 + 16sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = result;
    int v2 = *(_DWORD *)(a2 + 216);
    if ((v2 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 152);
    v3 |= 0x40000u;
    *(_DWORD *)(a1 + 216) = v3;
    *(double *)(a1 + 152) = result;
    int v2 = *(_DWORD *)(a2 + 216);
  }

uint64_t sub_10114AA30(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "allBoutsCycleTimeEntropy5thTo95th", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 216);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "allBoutsCycleTimeEntropyMean", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }

uint64_t sub_10114ADA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10114B4CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 216);
  if ((v4 & 0x80000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 160), 1u);
    int v4 = *(_DWORD *)(v3 + 216);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }

  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 152), 2u);
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }

uint64_t sub_10114B7C8(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DB10;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10114B7E0(PB::Base *a1)
{
}

double sub_10114B7F4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DB10;
  *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 32);
    char v3 = 8;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 8;
    *(_DWORD *)(a1 + 32) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_10114B89C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "begin", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "bin", *(_DWORD *)(a1 + 32));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_10114B96C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10114BD68(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_10114BE18(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DB48;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 56) = 0LL;
  *(void *)(result + 72) = 0LL;
  *(_DWORD *)(result + 152) = 0;
  return result;
}

void sub_10114BE34(PB::Base *this)
{
  *(void *)this = &off_10189DB48;
  char v4 = (void **)*((void *)this + 9);
  unint64_t v2 = (void *)((char *)this + 72);
  uint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  PB::Base::~Base(this);
}

void sub_10114BEA4(PB::Base *a1)
{
}

uint64_t sub_10114BEB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DB48;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  char v4 = (void ***)(a1 + 72);
  *(_DWORD *)(a1 + 152) = 0;
  int v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x80) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 88);
    int v6 = 128;
    *(_DWORD *)(a1 + 152) = 128;
    *(void *)(a1 + 88) = v7;
    int v5 = *(_DWORD *)(a2 + 152);
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v6 = 0;
  if ((v5 & 0x40) != 0)
  {
LABEL_5:
    uint64_t v8 = *(void *)(a2 + 80);
    v6 |= 0x40u;
    *(_DWORD *)(a1 + 152) = v6;
    *(void *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v8;
    int v5 = *(_DWORD *)(a2 + 152);
  }

uint64_t sub_10114C274(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))( v5,  this,  "accelerometerPace");
  }
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "activeTime", *(double *)(a1 + 16));
    int v6 = *(_DWORD *)(a1 + 152);
    if ((v6 & 0x100) == 0)
    {
LABEL_5:
      if ((v6 & 2) == 0) {
        goto LABEL_6;
      }
      goto LABEL_36;
    }
  }

  else if ((v6 & 0x100) == 0)
  {
    goto LABEL_5;
  }

  PB::TextFormatter::format(this, "count", *(_DWORD *)(a1 + 96));
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 2) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }

uint64_t sub_10114C5DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  int v8 = (void ***)(a1 + 72);
  while (2)
  {
    uint64_t v9 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v12 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v18 = v2 + 1;
        char v19 = *(_BYTE *)(v9 + v2);
        *((void *)this + 1) = v18;
        v12 |= (unint64_t)(v19 & 0x7F) << v16;
        if ((v19 & 0x80) == 0) {
          goto LABEL_21;
        }
        v16 += 7;
        unint64_t v2 = v18;
        if (v17++ >= 9)
        {
LABEL_20:
          unint64_t v12 = 0LL;
          goto LABEL_21;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v10 = 0;
    unsigned int v11 = 0;
    unint64_t v12 = 0LL;
    while (1)
    {
      unint64_t v13 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0) {
        break;
      }
      v10 += 7;
      unint64_t v2 = v13;
      BOOL v15 = v11++ > 8;
      if (v15) {
        goto LABEL_20;
      }
    }

LABEL_283:
        *(_DWORD *)(a1 + 104) = v106;
        goto LABEL_304;
      case 0x15u:
        *(_DWORD *)(a1 + 152) |= 0x800u;
        unint64_t v109 = *((void *)this + 1);
        unint64_t v110 = *((void *)this + 2);
        uint64_t v111 = *(void *)this;
        if (v109 <= 0xFFFFFFFFFFFFFFF5LL && v109 + 10 <= v110)
        {
          char v112 = 0;
          unsigned int v113 = 0;
          uint64_t v114 = 0LL;
          do
          {
            unint64_t v115 = v109 + 1;
            *((void *)this + 1) = v109 + 1;
            char v116 = *(_BYTE *)(v111 + v109);
            v114 |= (unint64_t)(v116 & 0x7F) << v112;
            if ((v116 & 0x80) == 0) {
              goto LABEL_287;
            }
            v112 += 7;
            unint64_t v109 = v115;
            BOOL v15 = v113++ > 8;
          }

          while (!v15);
LABEL_221:
          LODWORD(v114) = 0;
          goto LABEL_287;
        }

        char v182 = 0;
        unsigned int v183 = 0;
        uint64_t v114 = 0LL;
        if (v110 <= v109) {
          unint64_t v110 = *((void *)this + 1);
        }
        while (2)
        {
          if (v110 == v109)
          {
            LODWORD(v114) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v184 = v109 + 1;
            char v185 = *(_BYTE *)(v111 + v109);
            *((void *)this + 1) = v184;
            v114 |= (unint64_t)(v185 & 0x7F) << v182;
            if (v185 < 0)
            {
              v182 += 7;
              unint64_t v109 = v184;
              BOOL v15 = v183++ > 8;
              if (v15) {
                goto LABEL_221;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v114) = 0;
            }
          }

          break;
        }

          *(_DWORD *)(a1 + 104) = v126;
          goto LABEL_296;
        case 0x18u:
          *(_DWORD *)(a1 + 116) |= 8u;
          unsigned int v129 = *((void *)this + 1);
          if (v129 <= 0xFFFFFFFFFFFFFFF7LL && v129 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 32) = *(void *)(*(void *)this + v129);
LABEL_246:
            char v120 = *((void *)this + 1) + 8LL;
LABEL_247:
            *((void *)this + 1) = v120;
          }

          else
          {
LABEL_125:
            *((_BYTE *)this + 24) = 1;
          }

          goto LABEL_296;
        case 0x19u:
          *(_DWORD *)(a1 + 116) |= 0x10u;
          uint64_t v130 = *((void *)this + 1);
          unint64_t v131 = *((void *)this + 2);
          char v132 = *(void *)this;
          if (v130 <= 0xFFFFFFFFFFFFFFF5LL && v130 + 10 <= v131)
          {
            unint64_t v133 = 0;
            unint64_t v134 = 0;
            uint64_t v135 = 0LL;
            do
            {
              char v136 = v130 + 1;
              *((void *)this + 1) = v130 + 1;
              unsigned int v137 = *(_BYTE *)(v132 + v130);
              v135 |= (unint64_t)(v137 & 0x7F) << v133;
              if ((v137 & 0x80) == 0) {
                goto LABEL_287;
              }
              v133 += 7;
              uint64_t v130 = v136;
              char v14 = v134++ > 8;
            }

            while (!v14);
LABEL_230:
            uint64_t v135 = 0LL;
            goto LABEL_287;
          }

          char v190 = 0;
          unsigned int v191 = 0;
          uint64_t v135 = 0LL;
          if (v131 <= v130) {
            unint64_t v131 = *((void *)this + 1);
          }
          while (2)
          {
            if (v131 == v130)
            {
              uint64_t v135 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              unint64_t v192 = v130 + 1;
              char v193 = *(_BYTE *)(v132 + v130);
              *((void *)this + 1) = v192;
              v135 |= (unint64_t)(v193 & 0x7F) << v190;
              if (v193 < 0)
              {
                v190 += 7;
                uint64_t v130 = v192;
                char v14 = v191++ > 8;
                if (v14) {
                  goto LABEL_230;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v135 = 0LL;
              }
            }

            break;
          }

uint64_t sub_10114D668(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 152);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 88), 1u);
    int v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }

  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 2u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }

void *sub_10114D944(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x28uLL);
    sub_1010E1864((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

uint64_t sub_10114D998(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DB80;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_10114D9B0(PB::Base *a1)
{
}

uint64_t sub_10114D9C4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189DB80;
  *(_DWORD *)(result + 72) = 0;
  __int16 v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 48);
    __int16 v3 = 32;
    *(_WORD *)(result + 72) = 32;
    *(void *)(result + 48) = v4;
    __int16 v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 64);
    v3 |= 0x80u;
    *(_WORD *)(result + 72) = v3;
    *(_DWORD *)(result + 64) = v5;
    __int16 v2 = *(_WORD *)(a2 + 72);
  }

uint64_t sub_10114DB14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "calibratedDistance", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "energyDeltaDistance", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_10114DCA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10114E160(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 72);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 48), 1u);
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 2u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_10114E2B8(uint64_t result)
{
  *(_DWORD *)(result + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = &off_10189DBB8;
  return result;
}

void sub_10114E2D0(PB::Base *this)
{
  *(void *)this = &off_10189DBB8;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  PB::Base::~Base(this);
}

void sub_10114E330(PB::Base *a1)
{
}

uint64_t sub_10114E344(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DBB8;
  *(void *)(a1 + 8) = 0LL;
  __int16 v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = operator new(0xA0uLL);
    uint64_t v7 = sub_10114BEB8((uint64_t)v6, v5);
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v7;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    unsigned int v10 = operator new(0x50uLL);
    uint64_t v11 = sub_10114D9C4((uint64_t)v10, v9);
    uint64_t v12 = *v4;
    *__int16 v4 = v11;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
  }

  __int16 v13 = *(_WORD *)(a2 + 100);
  if ((v13 & 1) != 0)
  {
    uint64_t v16 = *(void *)(a2 + 24);
    *(_WORD *)(a1 + 100) |= 1u;
    *(void *)(a1 + 24) = v16;
    __int16 v13 = *(_WORD *)(a2 + 100);
    if ((v13 & 2) == 0)
    {
LABEL_9:
      if ((v13 & 0x80) == 0) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }
  }

  else if ((v13 & 2) == 0)
  {
    goto LABEL_9;
  }

  uint64_t v17 = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 100) |= 2u;
  *(void *)(a1 + 32) = v17;
  __int16 v13 = *(_WORD *)(a2 + 100);
  if ((v13 & 0x80) == 0)
  {
LABEL_10:
    if ((v13 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }

uint64_t sub_10114E55C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "addition");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "fused");
  }
  __int16 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x400) != 0)
  {
    PB::TextFormatter::format(this, "isVehicular", *(_BYTE *)(a1 + 96));
    __int16 v7 = *(_WORD *)(a1 + 100);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
  }

  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }

  PB::TextFormatter::format(this, "odometerDeltaDistance", *(double *)(a1 + 24));
  __int16 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x100) == 0)
  {
LABEL_8:
    if ((v7 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }

uint64_t sub_10114E72C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_10114ED44(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 16);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5, 2u);
  }
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 3u);
    __int16 v6 = *(_WORD *)(v3 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0) {
        goto LABEL_8;
      }
      goto LABEL_19;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_7;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }

uint64_t sub_10114EEC4(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DBF0;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_10114EEDC(PB::Base *a1)
{
}

double sub_10114EEF0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DBF0;
  *(_DWORD *)(a1 + 96) = 0;
  __int16 v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x40) != 0)
  {
    double result = *(double *)(a2 + 56);
    __int16 v3 = 64;
    *(_WORD *)(a1 + 96) = 64;
    *(double *)(a1 + 56) = result;
    __int16 v2 = *(_WORD *)(a2 + 96);
    if ((v2 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 96) & 0x400) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 88);
    v3 |= 0x400u;
    *(_WORD *)(a1 + 96) = v3;
    *(double *)(a1 + 88) = result;
    __int16 v2 = *(_WORD *)(a2 + 96);
  }

uint64_t sub_10114F040(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "bobbiness", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 96);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "bufferAvgSampleRateHz", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_10114F1D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10114F5B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 96);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    __int16 v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((*(_WORD *)(result + 96) & 0x400) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 2u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

void *sub_10114F70C(void *result)
{
  *uint64_t result = off_10189DC28;
  result[1] = 0LL;
  return result;
}

void sub_10114F71C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189DC28;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10114F75C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189DC28;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10114F7A0(void *a1, uint64_t a2)
{
  *a1 = off_10189DC28;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    __int16 v4 = operator new(0x48uLL);
    uint64_t v5 = sub_101189684((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10114F808(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10114F858(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10114FA10(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10114FA2C(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x48uLL);
    sub_101189528((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10114FA80(void *result)
{
  *uint64_t result = off_10189DC60;
  result[1] = 0LL;
  return result;
}

void sub_10114FA90(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189DC60;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10114FAD0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189DC60;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10114FB14(void *a1, uint64_t a2)
{
  *a1 = off_10189DC60;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x48uLL);
    uint64_t v5 = sub_101189684((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10114FB7C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10114FBCC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10114FD84(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_10114FDA0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DC98;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10114FDB8(PB::Base *a1)
{
}

double sub_10114FDCC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DC98;
  *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 32);
    char v3 = 8;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 8;
    *(_DWORD *)(a1 + 32) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_10114FE74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "begin", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "bin", *(_DWORD *)(a1 + 32));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "kValue", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 40) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_10114FF44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101150340(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1011503F0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DCD0;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_101150408(PB::Base *a1)
{
}

uint64_t sub_10115041C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189DCD0;
  *(_DWORD *)(result + 92) = 0;
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 72);
    __int16 v3 = 256;
    *(_WORD *)(result + 92) = 256;
    *(void *)(result + 72) = v4;
    __int16 v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 92) = v3;
    *(void *)(result + 16) = v5;
    __int16 v2 = *(_WORD *)(a2 + 92);
  }

uint64_t sub_101150588(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "distance", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_101150738(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101150D70(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x100) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 72), 1u);
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_101150EE4(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DD08;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_101150EFC(PB::Base *a1)
{
}

float sub_101150F10(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DD08;
  *(_DWORD *)(a1 + 56) = 0;
  __int16 v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(a1 + 56) = 1;
    *(void *)(a1 + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 56);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 56) = v3;
    *(_DWORD *)(a1 + 32) = v5;
    __int16 v2 = *(_WORD *)(a2 + 56);
  }

uint64_t sub_101151060(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "classifierCall", *(_DWORD *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 56);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "featureSlope", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_1011511F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011518B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 56);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 2u);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_101151A08(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DD40;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101151A20(PB::Base *a1)
{
}

double sub_101151A34(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DD40;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 8) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 28);
    char v3 = 8;
    *(_BYTE *)(a1 + 32) = 8;
    *(_DWORD *)(a1 + 28) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_101151AC0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dirAngleRad", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "peakTimestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "extremaVal", *(float *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "valleyTimestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101151B70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101151DD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 28), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }

uint64_t sub_101151E68(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DD78;
  *(_DWORD *)(result + 36) = -1;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_101151E88(PB::Base *a1)
{
}

uint64_t sub_101151E9C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189DD78;
  *(_DWORD *)(result + 36) = -1;
  *(_DWORD *)(result + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(result + 44) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 44) = v3;
    *(_DWORD *)(result + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 44);
  }

uint64_t sub_101151F84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "peakHalfWidth", *(float *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_101152094(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011525BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

double sub_1011526A4(uint64_t a1)
{
  *(void *)a1 = &off_10189DDB0;
  *(_DWORD *)(a1 + 28) = -2;
  double result = NAN;
  *(_OWORD *)(a1 + 52) = xmmword_1013E2FF0;
  return result;
}

void sub_1011526CC(PB::Base *a1)
{
}

double sub_1011526E0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DDB0;
  *(_DWORD *)(a1 + 28) = -2;
  double result = NAN;
  *(_OWORD *)(a1 + 52) = xmmword_1013E2FF0;
  __int16 v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    __int16 v4 = 2;
    *(_WORD *)(a1 + 64) = 2;
    *(double *)(a1 + 16) = result;
    __int16 v3 = *(_WORD *)(a2 + 64);
    if ((v3 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v4 = 0;
  if ((v3 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 36);
    v4 |= 0x20u;
    *(_WORD *)(a1 + 64) = v4;
    *(_DWORD *)(a1 + 36) = v5;
    __int16 v3 = *(_WORD *)(a2 + 64);
  }

uint64_t sub_10115285C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "axis", *(_DWORD *)(a1 + 24));
    __int16 v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "clippedPeakType", *(_DWORD *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_101152A0C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10115331C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 64);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_101153490(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DDE8;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  *(_DWORD *)(result + 104) = 0;
  return result;
}

void sub_1011534AC(PB::Base *this)
{
  *(void *)this = &off_10189DDE8;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 1sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101153504(PB::Base *a1)
{
}

uint64_t sub_101153518(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0LL;
  __int16 v4 = (char *)(a1 + 8);
  *(void *)a1 = &off_10189DDE8;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  *(_DWORD *)(a1 + 104) = 0;
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5)
  {
    int v6 = operator new(0xA0uLL);
    uint64_t v7 = sub_1010F1EE8((uint64_t)v6, v5);
    uint64_t v8 = *(void *)(a1 + 80);
    *(void *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v7;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  __int16 v9 = *(_WORD *)(a2 + 104);
  if ((v9 & 0x80) != 0)
  {
    int v12 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(a1 + 104) |= 0x80u;
    *(_DWORD *)(a1 + 92) = v12;
    __int16 v9 = *(_WORD *)(a2 + 104);
    if ((v9 & 0x40) == 0)
    {
LABEL_8:
      if ((v9 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }

  else if ((v9 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  int v13 = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 104) |= 0x40u;
  *(_DWORD *)(a1 + 88) = v13;
  __int16 v9 = *(_WORD *)(a2 + 104);
  if ((v9 & 0x100) == 0)
  {
LABEL_9:
    if ((v9 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }

uint64_t sub_1011536FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_WORD *)(a1 + 104) & 1) != 0) {
    PB::TextFormatter::format(this, "auxiliaryIosTimeUncertainty", *(double *)(a1 + 32));
  }
  uint64_t v5 = *(float **)(a1 + 8);
  int v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "filteredAcceleration", v7);
  }

  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "quiescentMode", *(_DWORD *)(a1 + 88));
    __int16 v8 = *(_WORD *)(a1 + 104);
    if ((v8 & 0x80) == 0)
    {
LABEL_7:
      if ((v8 & 2) == 0) {
        goto LABEL_8;
      }
      goto LABEL_21;
    }
  }

  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_7;
  }

  PB::TextFormatter::format(this, "quiescentNoise", *(float *)(a1 + 92));
  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_8:
    if ((v8 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }

BOOL sub_1011538C0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }

uint64_t sub_10115403C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base **)(result + 80);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  unint64_t v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 2u);
  }

  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 3u);
    __int16 v8 = *(_WORD *)(v3 + 104);
    if ((v8 & 0x40) == 0)
    {
LABEL_8:
      if ((v8 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }

  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_8;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 4u);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_9:
    if ((v8 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }

uint64_t sub_1011541B8(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DE20;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_1011541D0(PB::Base *this)
{
  *(void *)this = &off_10189DE20;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_101154210(PB::Base *a1)
{
}

uint64_t sub_101154224(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DE20;
  *(void *)(a1 + 8) = 0LL;
  unint64_t v4 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 96) = 0;
  __int16 v5 = *(_WORD *)(a2 + 96);
  if ((v5 & 0x10) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 64);
    __int16 v6 = 16;
    *(_WORD *)(a1 + 96) = 16;
    *(void *)(a1 + 64) = v7;
    __int16 v5 = *(_WORD *)(a2 + 96);
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v6 = 0;
  if ((*(_WORD *)(a2 + 96) & 0x200) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 88);
    v6 |= 0x200u;
    *(_WORD *)(a1 + 96) = v6;
    *(_DWORD *)(a1 + 88) = v8;
    __int16 v5 = *(_WORD *)(a2 + 96);
  }

uint64_t sub_1011543D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "angularVelocityConstraintRps", *(float *)(a1 + 72));
    __int16 v5 = *(_WORD *)(a1 + 96);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "consumedAuxTimestamp", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }

BOOL sub_1011545A0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    __int16 v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101154BB0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 96);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
LABEL_19:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 3u);
      if ((*(_WORD *)(v3 + 96) & 0x100) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }

  else if ((*(_WORD *)(result + 96) & 0x200) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 2u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) != 0) {
    goto LABEL_19;
  }
LABEL_4:
  if ((v4 & 0x100) != 0) {
LABEL_5:
  }
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 4u);
LABEL_6:
  unint64_t v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 5u);
  }

  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x400) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 92), 6u);
    __int16 v8 = *(_WORD *)(v3 + 96);
    if ((v8 & 0x20) == 0)
    {
LABEL_11:
      if ((v8 & 0x40) == 0) {
        goto LABEL_12;
      }
      goto LABEL_23;
    }
  }

  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_11;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 7u);
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }

void *sub_101154D34(void *result)
{
  *uint64_t result = &off_10189DE58;
  result[2] = 0LL;
  return result;
}

void sub_101154D4C(PB::Base *a1)
{
}

uint64_t sub_101154D60(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189DE58;
  *(void *)(result + 16) = 0LL;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    int v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 2;
    *(_DWORD *)(result + 16) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    uint64_t v4 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(void *)(result + 8) = v4;
  }

  return result;
}

uint64_t sub_101154DB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "source", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101154E18(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101155140(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 2u);
  }
  return result;
}

uint64_t sub_101155198(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DE90;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_1011551B0(PB::Base *a1)
{
}

uint64_t sub_1011551C4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189DE90;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_BYTE *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_101155214(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "touchDetected", *(_BYTE *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10115527C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101155460(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1011554B8(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DEC8;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_1011554D0(PB::Base *a1)
{
}

uint64_t sub_1011554E4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189DEC8;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 28);
    char v3 = 16;
    *(_BYTE *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 16;
    *(_DWORD *)(result + 28) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_1011555C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "distanceToTrackMeters", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "estimatedLaneConfidence", *(_DWORD *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_1011556D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101155D68(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 28), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_101155E50(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DF00;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_101155E68(PB::Base *a1)
{
}

double sub_101155E7C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DF00;
  *(_DWORD *)(a1 + 56) = 0;
  char v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    char v3 = 8;
    *(_BYTE *)(a1 + 56) = 8;
    *(double *)(a1 + 32) = result;
    char v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 56) = v3;
    *(double *)(a1 + 24) = result;
    char v2 = *(_BYTE *)(a2 + 56);
  }

uint64_t sub_101155F40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cycleIndex", *(void *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 56) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "error", *(void *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_101156030(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101156464(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 56);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_101156530(uint64_t result)
{
  *(void *)uint64_t result = off_10189DF38;
  *(void *)(result + 16) = 0LL;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_101156548(PB::Base *this)
{
  *(void *)this = off_10189DF38;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10115658C(PB::Base *this)
{
  *(void *)this = off_10189DF38;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1011565D4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189DF38;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    char v5 = operator new(0x28uLL);
    uint64_t v6 = sub_1010DF384((uint64_t)v5, v4);
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    *(_BYTE *)(a1 + 24) |= 1u;
    *(void *)(a1 + 8) = v8;
  }

  return a1;
}

uint64_t sub_10115666C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
    PB::TextFormatter::format(this, "aopTimestamp", *(void *)(a1 + 8));
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011566D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101156980(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 16);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if ((*(_BYTE *)(v3 + 24) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 2u);
  }
  return result;
}

uint64_t sub_1011569D4(uint64_t result)
{
  *(void *)uint64_t result = &off_10189DF70;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1011569E8(PB::Base *this)
{
  *(void *)this = &off_10189DF70;
  int v4 = (void **)*((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  PB::Base::~Base(this);
}

void sub_101156A28(PB::Base *a1)
{
}

uint64_t sub_101156A3C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DF70;
  *(void *)(a1 + 8) = 0LL;
  uint64_t v3 = (void ***)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 1;
    *(void *)(a1 + 16) = v4;
  }

  uint64_t v5 = *(__int128 **)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = (void **)operator new(0x18uLL);
    uint64_t v7 = v6;
    if (*((char *)v5 + 23) < 0)
    {
      sub_1010DD48C(v6, *(void **)v5, *((void *)v5 + 1));
      char v9 = *v3;
      *uint64_t v3 = v7;
      if (v9) {
        sub_10058A4FC((int)v3, v9);
      }
    }

    else
    {
      __int128 v8 = *v5;
      v6[2] = (void *)*((void *)v5 + 2);
      *(_OWORD *)uint64_t v6 = v8;
      *uint64_t v3 = v6;
    }
  }

  return a1;
}

uint64_t sub_101156AF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format(this, "event");
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101156B54(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    __int128 v8 = (void ***)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101156D48(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 24) & 1) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4) {
    return PB::Writer::write(this, v4, 2LL);
  }
  return result;
}

double sub_101156D9C(uint64_t a1)
{
  *(void *)a1 = &off_10189DFA8;
  *(void *)(a1 + 336) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  return result;
}

void sub_101156DFC(PB::Base *this)
{
  *(void *)this = &off_10189DFA8;
  unint64_t v2 = (void *)*((void *)this + 34);
  if (v2)
  {
    *((void *)this + 35) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 31);
  if (v3)
  {
    *((void *)this + 32) = v3;
    operator delete(v3);
  }

  uint64_t v4 = (void *)*((void *)this + 28);
  if (v4)
  {
    *((void *)this + 29) = v4;
    operator delete(v4);
  }

  uint64_t v5 = (void *)*((void *)this + 25);
  if (v5)
  {
    *((void *)this + 26) = v5;
    operator delete(v5);
  }

  uint64_t v6 = (void *)*((void *)this + 22);
  if (v6)
  {
    *((void *)this + 23) = v6;
    operator delete(v6);
  }

  uint64_t v7 = (void *)*((void *)this + 19);
  if (v7)
  {
    *((void *)this + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v7;
    operator delete(v7);
  }

  __int128 v8 = (void *)*((void *)this + 16);
  if (v8)
  {
    *((void *)this + 17) = v8;
    operator delete(v8);
  }

  uint64_t v9 = (void *)*((void *)this + 13);
  if (v9)
  {
    *((void *)this + 14) = v9;
    operator delete(v9);
  }

  char v10 = (void *)*((void *)this + 10);
  if (v10)
  {
    *((void *)this + 11) = v10;
    operator delete(v10);
  }

  unsigned int v11 = (void *)*((void *)this + 7);
  if (v11)
  {
    *((void *)this + 8) = v11;
    operator delete(v11);
  }

  unint64_t v12 = (void *)*((void *)this + 4);
  if (v12)
  {
    *((void *)this + 5) = v12;
    operator delete(v12);
  }

  unint64_t v13 = (void *)*((void *)this + 1);
  if (v13)
  {
    *((void *)this + 2) = v13;
    operator delete(v13);
  }

  PB::Base::~Base(this);
}

void sub_101156EEC(PB::Base *a1)
{
}

uint64_t sub_101156F00(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DFA8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v7 = (char *)(a1 + 152);
  *(_OWORD *)(a1 + 20sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  __int128 v8 = (char *)(a1 + 200);
  *(_OWORD *)(a1 + 248) = 0u;
  uint64_t v9 = (char *)(a1 + 248);
  *(void *)(a1 + 336) = 0LL;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  char v10 = *(_BYTE *)(a2 + 340);
  if ((v10 & 0x40) != 0)
  {
    int v12 = *(_DWORD *)(a2 + 336);
    char v11 = 64;
    *(_BYTE *)(a1 + 34sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 64;
    *(_DWORD *)(a1 + 336) = v12;
    char v10 = *(_BYTE *)(a2 + 340);
    if ((v10 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v11 = 0;
  if ((*(_BYTE *)(a2 + 340) & 4) != 0)
  {
LABEL_5:
    uint64_t v13 = *(void *)(a2 + 312);
    v11 |= 4u;
    *(_BYTE *)(a1 + 34sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v11;
    *(void *)(a1 + 312) = v13;
    char v10 = *(_BYTE *)(a2 + 340);
  }

uint64_t sub_101157174(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "accelBias", v7);
  }

  __int128 v8 = *(double **)(a1 + 32);
  uint64_t v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "accelBiasCov", v10);
  }

  char v11 = *(_BYTE *)(a1 + 340);
  if ((v11 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "cameraImageResolutionHeight", *(float *)(a1 + 328));
    char v11 = *(_BYTE *)(a1 + 340);
  }

  if ((v11 & 0x20) != 0) {
    PB::TextFormatter::format(this, "cameraImageResolutionWidth", *(float *)(a1 + 332));
  }
  int v12 = *(double **)(a1 + 56);
  uint64_t v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(this, "cameraIntrinsics", v14);
  }

  char v15 = *(double **)(a1 + 80);
  int v16 = *(double **)(a1 + 88);
  while (v15 != v16)
  {
    double v17 = *v15++;
    PB::TextFormatter::format(this, "cameraPose", v17);
  }

  unint64_t v18 = *(double **)(a1 + 104);
  uint64_t v19 = *(double **)(a1 + 112);
  while (v18 != v19)
  {
    double v20 = *v18++;
    PB::TextFormatter::format(this, "gyroBias", v20);
  }

  unint64_t v21 = *(double **)(a1 + 128);
  unint64_t v22 = *(double **)(a1 + 136);
  while (v21 != v22)
  {
    double v23 = *v21++;
    PB::TextFormatter::format(this, "gyroBiasCov", v23);
  }

  char v24 = *(_BYTE *)(a1 + 340);
  if ((v24 & 1) != 0)
  {
    PB::TextFormatter::format(this, "machContinuousOriginTimestamp", *(double *)(a1 + 296));
    char v24 = *(_BYTE *)(a1 + 340);
  }

  if ((v24 & 2) != 0) {
    PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 304));
  }
  unint64_t v25 = *(double **)(a1 + 176);
  unint64_t v26 = *(double **)(a1 + 184);
  while (v25 != v26)
  {
    double v27 = *v25++;
    PB::TextFormatter::format(this, "orientation", v27);
  }

  char v28 = *(double **)(a1 + 152);
  unsigned int v29 = *(double **)(a1 + 160);
  while (v28 != v29)
  {
    double v30 = *v28++;
    PB::TextFormatter::format(this, "orientationCov", v30);
  }

  if ((*(_BYTE *)(a1 + 340) & 4) != 0) {
    PB::TextFormatter::format(this, "originTimestamp", *(double *)(a1 + 312));
  }
  unint64_t v31 = *(double **)(a1 + 224);
  char v32 = *(double **)(a1 + 232);
  while (v31 != v32)
  {
    double v33 = *v31++;
    PB::TextFormatter::format(this, "position", v33);
  }

  char v34 = *(double **)(a1 + 200);
  unsigned int v35 = *(double **)(a1 + 208);
  while (v34 != v35)
  {
    double v36 = *v34++;
    PB::TextFormatter::format(this, "positionCov", v36);
  }

  char v37 = *(_BYTE *)(a1 + 340);
  if ((v37 & 8) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 320));
    char v37 = *(_BYTE *)(a1 + 340);
  }

  if ((v37 & 0x40) != 0) {
    PB::TextFormatter::format(this, "trackingState", *(_DWORD *)(a1 + 336));
  }
  unsigned int v38 = *(double **)(a1 + 272);
  unint64_t v39 = *(double **)(a1 + 280);
  while (v38 != v39)
  {
    double v40 = *v38++;
    PB::TextFormatter::format(this, "velocity", v40);
  }

  char v41 = *(double **)(a1 + 248);
  unsigned int v42 = *(double **)(a1 + 256);
  while (v41 != v42)
  {
    double v43 = *v41++;
    PB::TextFormatter::format(this, "velocityCov", v43);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101157488(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v357 = (void **)(a1 + 56);
    uint64_t v348 = a1 + 72;
    uint64_t v356 = (void **)(a1 + 80);
    uint64_t v347 = a1 + 96;
    uint64_t v355 = (void **)(a1 + 200);
    uint64_t v354 = (void **)(a1 + 32);
    uint64_t v345 = a1 + 48;
    uint64_t v346 = a1 + 216;
    uint64_t v344 = a1 + 264;
    uint64_t v352 = (void **)(a1 + 128);
    uint64_t v353 = (void **)(a1 + 248);
    uint64_t v351 = (void **)(a1 + 152);
    uint64_t v342 = a1 + 168;
    uint64_t v343 = a1 + 144;
    uint64_t v341 = a1 + 240;
    uint64_t v349 = (void **)(a1 + 8);
    uint64_t v350 = (void **)(a1 + 224);
    double v10 = (void **)(a1 + 272);
    uint64_t v339 = a1 + 288;
    uint64_t v340 = a1 + 24;
    char v11 = (void **)(a1 + 104);
    int v12 = (void **)(a1 + 176);
    uint64_t v337 = a1 + 192;
    uint64_t v338 = a1 + 120;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0LL;
      while (1)
      {
        unint64_t v17 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v18 = *(_BYTE *)(v13 + v4);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v4 = v17;
        BOOL v19 = v15++ > 8;
        if (v19) {
          goto LABEL_20;
        }
      }

LABEL_562:
          unint64_t v4 = *((void *)this + 1);
          unint64_t v5 = *((void *)this + 2);
          int v6 = *((unsigned __int8 *)this + 24);
          if (v4 >= v5 || v6 != 0) {
            return v6 == 0;
          }
          break;
        case 0x12u:
          *(_BYTE *)(a1 + 340) |= 0x20u;
          unint64_t v206 = *((void *)this + 1);
          if (v206 > 0xFFFFFFFFFFFFFFFBLL || v206 + 4 > *((void *)this + 2)) {
            goto LABEL_558;
          }
          *(_DWORD *)(a1 + 332) = *(_DWORD *)(*(void *)this + v206);
          goto LABEL_340;
        case 0x13u:
          *(_BYTE *)(a1 + 340) |= 0x10u;
          unint64_t v207 = *((void *)this + 1);
          if (v207 > 0xFFFFFFFFFFFFFFFBLL || v207 + 4 > *((void *)this + 2)) {
            goto LABEL_558;
          }
          *(_DWORD *)(a1 + 328) = *(_DWORD *)(*(void *)this + v207);
LABEL_340:
          uint64_t v208 = *((void *)this + 1) + 4LL;
          goto LABEL_561;
        default:
          if ((PB::Reader::skip(this, v16 >> 3, v16 & 7, 0) & 1) == 0) {
            return 0LL;
          }
          goto LABEL_562;
      }
    }

    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0LL;
    if (v4 > v5) {
      unint64_t v5 = v4;
    }
    while (v5 != v4)
    {
      unint64_t v22 = v4 + 1;
      char v23 = *(_BYTE *)(v13 + v4);
      *((void *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v4 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0LL;
        goto LABEL_21;
      }
    }

    int v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }

  return v6 == 0;
}

    sub_1002F0B04(&v376);
    uint64_t v311 = sub_1002A6F64(v376, "LogLocations", &v371);
    uint64_t v312 = v311;
    uint64_t v313 = (std::__shared_weak_count *)*((void *)&v376 + 1);
    if (!*((void *)&v376 + 1)) {
      goto LABEL_566;
    }
    uint64_t v314 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
    do
      uint64_t v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
      std::__shared_weak_count::__release_weak(v313);
      if (v312) {
        goto LABEL_567;
      }
    }

    else
    {
LABEL_566:
      if (v311)
      {
LABEL_567:
        sub_1002F0B04(&v376);
        sub_1002A667C(v376, "LogLocations", 0xFFFFFFFFLL);
        uint64_t v316 = (std::__shared_weak_count *)*((void *)&v376 + 1);
        if (*((void *)&v376 + 1))
        {
          uint64_t v317 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
          do
            uint64_t v318 = __ldaxr(v317);
          while (__stlxr(v318 - 1, v317));
          if (!v318)
          {
            ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
            std::__shared_weak_count::__release_weak(v316);
          }
        }

        if (v371)
        {
          sub_1002F0B04(&v376);
          LODWORD(v363) = 3;
          sub_1002AC220(v376, "LogFileLevel", &v363);
          uint64_t v319 = (std::__shared_weak_count *)*((void *)&v376 + 1);
          if (*((void *)&v376 + 1))
          {
            uint64_t v320 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
            do
              uint64_t v321 = __ldaxr(v320);
            while (__stlxr(v321 - 1, v320));
            if (!v321)
            {
              ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
              std::__shared_weak_count::__release_weak(v319);
            }
          }

          sub_1002F0B04(&v376);
          LOBYTE(v363) = 1;
          sub_1002AB3FC(v376, "LogShowUI", &v363);
          uint64_t v322 = (std::__shared_weak_count *)*((void *)&v376 + 1);
          if (!*((void *)&v376 + 1)) {
            goto LABEL_594;
          }
          uint64_t v323 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
          do
            uint64_t v324 = __ldaxr(v323);
          while (__stlxr(v324 - 1, v323));
        }

        else
        {
          sub_1002F0B04(&v376);
          LODWORD(v363) = -1;
          sub_1002AC220(v376, "LogFileLevel", &v363);
          uint64_t v325 = (std::__shared_weak_count *)*((void *)&v376 + 1);
          if (*((void *)&v376 + 1))
          {
            uint64_t v326 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
            do
              uint64_t v327 = __ldaxr(v326);
            while (__stlxr(v327 - 1, v326));
            if (!v327)
            {
              ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
              std::__shared_weak_count::__release_weak(v325);
            }
          }

          sub_1002F0B04(&v376);
          LOBYTE(v363) = 0;
          sub_1002AB3FC(v376, "LogShowUI", &v363);
          uint64_t v322 = (std::__shared_weak_count *)*((void *)&v376 + 1);
          if (!*((void *)&v376 + 1)) {
            goto LABEL_594;
          }
          uint64_t v328 = (unint64_t *)(*((void *)&v376 + 1) + 8LL);
          do
            uint64_t v324 = __ldaxr(v328);
          while (__stlxr(v324 - 1, v328));
        }

        if (!v324)
        {
          ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
          std::__shared_weak_count::__release_weak(v322);
        }

uint64_t sub_101158D6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 340);
  if ((v4 & 0x40) != 0)
  {
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 336), 1u);
    char v4 = *(_BYTE *)(v3 + 340);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }

  else if ((*(_BYTE *)(result + 340) & 4) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 312), 2u);
  char v4 = *(_BYTE *)(v3 + 340);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_50:
    double result = PB::Writer::write(this, *(double *)(v3 + 320), 4u);
    if ((*(_BYTE *)(v3 + 340) & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

uint64_t sub_101158FDC(uint64_t result)
{
  *(void *)double result = &off_10189DFE0;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_101158FF4(PB::Base *this)
{
  *(void *)this = &off_10189DFE0;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_101159034(PB::Base *a1)
{
}

uint64_t sub_101159048(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189DFE0;
  *(void *)(a1 + 8) = 0LL;
  char v4 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 112) = 0;
  __int16 v5 = *(_WORD *)(a2 + 112);
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    __int16 v6 = 1;
    *(_WORD *)(a1 + 112) = 1;
    *(void *)(a1 + 32) = v7;
    __int16 v5 = *(_WORD *)(a2 + 112);
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v6 = 0;
  if ((*(_WORD *)(a2 + 112) & 0x200) != 0)
  {
LABEL_5:
    uint64_t v8 = *(void *)(a2 + 104);
    v6 |= 0x200u;
    *(_WORD *)(a1 + 112) = v6;
    *(void *)(a1 + 104) = v8;
    __int16 v5 = *(_WORD *)(a2 + 112);
  }

uint64_t sub_1011591D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "currentTimestamp", *(double *)(a1 + 32));
    __int16 v5 = *(_WORD *)(a1 + 112);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "latestInertialTimestamp", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

BOOL sub_101159380(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    __int16 v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101159944(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 112);
  if ((v4 & 1) == 0)
  {
    if ((*(_WORD *)(result + 112) & 0x200) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    double result = PB::Writer::write(this, *(double *)(v3 + 104), 2u);
    if ((*(_WORD *)(v3 + 112) & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  double result = PB::Writer::write(this, *(double *)(result + 32), 1u);
  __int16 v4 = *(_WORD *)(v3 + 112);
  if ((v4 & 0x200) != 0) {
    goto LABEL_17;
  }
LABEL_3:
  if ((v4 & 2) != 0) {
LABEL_4:
  }
    double result = PB::Writer::write(this, *(double *)(v3 + 40), 3u);
LABEL_5:
  unint64_t v5 = *(double **)(v3 + 8);
  int v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7, 4u);
  }

  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 8) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 56), 5u);
    __int16 v8 = *(_WORD *)(v3 + 112);
    if ((v8 & 0x10) == 0)
    {
LABEL_10:
      if ((v8 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
  }

  else if ((v8 & 0x10) == 0)
  {
    goto LABEL_10;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 64), 6u);
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x20) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }

double sub_101159AAC(uint64_t a1)
{
  *(void *)a1 = &off_10189E018;
  *(_DWORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  return result;
}

void sub_101159AD0(PB::Base *this)
{
  *(void *)this = &off_10189E018;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101159B20(PB::Base *a1)
{
}

uint64_t sub_101159B34(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E018;
  *(_OWORD *)(a1 + 8) = 0u;
  __int16 v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    *(void *)(a1 + 56) = v5;
  }

  if (a1 != a2)
  {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  }

  return a1;
}

uint64_t sub_101159BC4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(double **)(a1 + 8);
  int v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "so3", v7);
  }

  if ((*(_BYTE *)(a1 + 64) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }
  __int16 v8 = *(double **)(a1 + 32);
  uint64_t v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101159C78(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    double v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    uint64_t v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        unint64_t v17 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v23 = v4 + 1;
          char v24 = *(_BYTE *)(v14 + v4);
          *((void *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_21;
          }
          v21 += 7;
          unint64_t v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            unint64_t v17 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_10115A1E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = (void *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  }
  unint64_t v4 = (double *)v3[1];
  unint64_t v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  __int16 v8 = (double *)v3[4];
  double v7 = (double *)v3[5];
  while (v8 != v7)
  {
    double v9 = *v8++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  return result;
}

uint64_t sub_10115A268(uint64_t result)
{
  *(void *)double result = &off_10189E050;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_10115A280(PB::Base *a1)
{
}

double sub_10115A294(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E050;
  *(_DWORD *)(a1 + 88) = 0;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x80) != 0)
  {
    double result = *(double *)(a2 + 64);
    __int16 v3 = 128;
    *(_WORD *)(a1 + 88) = 128;
    *(double *)(a1 + 64) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 48) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
  }

uint64_t sub_10115A438(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }

uint64_t sub_10115A628(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10115ACF4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_10115AEA0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E088;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10115AEB8(PB::Base *a1)
{
}

double sub_10115AECC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E088;
  *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 4;
    *(double *)(a1 + 24) = result;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(double *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_10115AF58(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "hr", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "time", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "hrTime", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "vo2", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10115B008(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10115B264(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 32), 4u);
  }

uint64_t sub_10115B2F8(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E0C0;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_10115B310(PB::Base *a1)
{
}

uint64_t sub_10115B324(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E0C0;
  *(_DWORD *)(result + 72) = 0;
  __int16 v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 48);
    __int16 v3 = 32;
    *(_WORD *)(result + 72) = 32;
    *(void *)(result + 48) = v4;
    __int16 v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 72) = v3;
    *(void *)(result + 16) = v5;
    __int16 v2 = *(_WORD *)(a2 + 72);
  }

uint64_t sub_10115B43C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "durationInSeconds", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "estimatedVo2Max", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_10115B58C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10115BA68(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 72);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 48), 1u);
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_10115BB88(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E0F8;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10115BBA0(PB::Base *a1)
{
}

uint64_t sub_10115BBB4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E0F8;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 0x10) != 0)
  {
    char v4 = *(_BYTE *)(a2 + 15);
    char v3 = 16;
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 16;
    *(_BYTE *)(result + 15) = v4;
    char v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 8) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 14);
    v3 |= 8u;
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(_BYTE *)(result + 14) = v5;
    char v2 = *(_BYTE *)(a2 + 20);
  }

uint64_t sub_10115BC78(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "basebandHint", *(_BYTE *)(a1 + 12));
    char v5 = *(_BYTE *)(a1 + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 20) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "btHint", *(_BYTE *)(a1 + 13));
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_10115BD68(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(_BYTE *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10115C10C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(result + 15), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 20) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 14), 2u);
  char v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_10115C1D8(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E130;
  *(_DWORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10115C1F0(PB::Base *a1)
{
}

double sub_10115C204(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E130;
  *(_DWORD *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(double *)(a1 + 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 48);
    v3 |= 0x100u;
    *(_WORD *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(_DWORD *)(a1 + 48) = LODWORD(result);
    __int16 v2 = *(_WORD *)(a2 + 60);
  }

uint64_t sub_10115C354(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "sourceX", *(_DWORD *)(a1 + 24));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "sourceY", *(_DWORD *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_10115C4E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10115CAEC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((*(_WORD *)(result + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_10115CC44(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E168;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_10115CC5C(PB::Base *a1)
{
}

uint64_t sub_10115CC70(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E168;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    char v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }

  return result;
}

uint64_t sub_10115CC9C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "isDeviceVibrating", *(_BYTE *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10115CCE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10115CE74(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_10115CE94(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E1A0;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10115CEAC(PB::Base *a1)
{
}

uint64_t sub_10115CEC0(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E1A0;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_BYTE *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_10115CF10(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "shouldSuppress", *(_BYTE *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10115CF78(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10115D1F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_10115D250(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E1D8;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_10115D268(PB::Base *a1)
{
}

float sub_10115D27C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E1D8;
  *(_DWORD *)(a1 + 116) = 0;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 116) = 1;
    *(void *)(a1 + 8) = v4;
    int v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 68);
    v3 |= 0x4000u;
    *(_DWORD *)(a1 + 116) = v3;
    *(float *)(a1 + 68) = result;
    int v2 = *(_DWORD *)(a2 + 116);
  }

uint64_t sub_10115D570(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "absMeanGravX", *(float *)(a1 + 16));
    int v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "accelFFTBin1", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }

uint64_t sub_10115D8E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10115E0C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 116);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x8000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }

  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 2u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }

uint64_t sub_10115E3C0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E210;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_10115E3D8(PB::Base *a1)
{
}

float sub_10115E3EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E210;
  *(_DWORD *)(a1 + 64) = 0;
  __int16 v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(a1 + 64) = 1;
    *(void *)(a1 + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 20);
    v3 |= 4u;
    *(_WORD *)(a1 + 64) = v3;
    *(float *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = result;
    __int16 v2 = *(_WORD *)(a2 + 64);
  }

uint64_t sub_10115E574(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "bagObstructed", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "closeCoveredBagObstructed", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_10115E744(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10115EC4C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 64);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_10115EDDC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E248;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_10115EDF4(PB::Base *a1)
{
}

uint64_t sub_10115EE08(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E248;
  *(_DWORD *)(result + 84) = 0;
  int v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(result + 84) = 1;
    *(void *)(result + 8) = v4;
    int v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 80);
    v3 |= 0x20000u;
    *(_DWORD *)(result + 84) = v3;
    *(_BYTE *)(result + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
    int v2 = *(_DWORD *)(a2 + 84);
  }

uint64_t sub_10115F038(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "currentEventTag", *(_DWORD *)(a1 + 16));
    int v5 = *(_DWORD *)(a1 + 84);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "currentState", *(_DWORD *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }

uint64_t sub_10115F2C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10115FC08(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 84);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }

  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 80), 2u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

uint64_t sub_10115FE40(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E280;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

void sub_10115FE58(PB::Base *this)
{
  *(void *)this = &off_10189E280;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_10115FE98(PB::Base *a1)
{
}

uint64_t sub_10115FEAC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E280;
  *(void *)(a1 + 8) = 0LL;
  int v4 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 76) = 0;
  __int16 v5 = *(_WORD *)(a2 + 76);
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    __int16 v6 = 1;
    *(_WORD *)(a1 + 76) = 1;
    *(void *)(a1 + 32) = v7;
    __int16 v5 = *(_WORD *)(a2 + 76);
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v6 = 0;
  if ((v5 & 2) != 0)
  {
LABEL_5:
    uint64_t v8 = *(void *)(a2 + 40);
    v6 |= 2u;
    *(_WORD *)(a1 + 76) = v6;
    *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v8;
    __int16 v5 = *(_WORD *)(a2 + 76);
  }

uint64_t sub_101160018(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "compassBias", *(float *)(a1 + 48));
    __int16 v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "estimatedBiasUncertainty", *(float *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

BOOL sub_1011601A4(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    __int16 v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }

uint64_t sub_101160890(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 76);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 4u);
    if ((*(_WORD *)(v3 + 76) & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

double sub_1011609DC(uint64_t a1)
{
  *(void *)a1 = &off_10189E2B8;
  *(_DWORD *)(a1 + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  return result;
}

void sub_101160A00(PB::Base *this)
{
  *(void *)this = &off_10189E2B8;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101160A50(PB::Base *a1)
{
}

uint64_t sub_101160A64(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E2B8;
  *(_OWORD *)(a1 + 8) = 0u;
  __int16 v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  char v5 = *(_BYTE *)(a2 + 100);
  if ((v5 & 0x10) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 88);
    char v6 = 16;
    *(_BYTE *)(a1 + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 16;
    *(void *)(a1 + 88) = v7;
    char v5 = *(_BYTE *)(a2 + 100);
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v6 = 0;
  if ((*(_BYTE *)(a2 + 100) & 4) != 0)
  {
LABEL_5:
    uint64_t v8 = *(void *)(a2 + 72);
    v6 |= 4u;
    *(_BYTE *)(a1 + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v6;
    *(void *)(a1 + 72) = v8;
    char v5 = *(_BYTE *)(a2 + 100);
  }

uint64_t sub_101160B98(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 56));
    char v5 = *(_BYTE *)(a1 + 100);
  }

  if ((v5 & 0x20) != 0) {
    PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 96));
  }
  char v6 = *(float **)(a1 + 8);
  uint64_t v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "covariance", v8);
  }

  char v9 = *(_BYTE *)(a1 + 100);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(this, "horizontalAccuracyOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 64));
    char v9 = *(_BYTE *)(a1 + 100);
    if ((v9 & 4) == 0)
    {
LABEL_9:
      if ((v9 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }

  else if ((*(_BYTE *)(a1 + 100) & 4) == 0)
  {
    goto LABEL_9;
  }

  PB::TextFormatter::format(this, "latitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 72));
  char v9 = *(_BYTE *)(a1 + 100);
  if ((v9 & 8) == 0)
  {
LABEL_10:
    if ((v9 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

BOOL sub_101160CE8(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    double v12 = (void **)(a1 + 32);
    uint64_t v13 = a1 + 48;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1011613C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 100);
  if ((v4 & 0x10) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 88), 1u);
    char v4 = *(_BYTE *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((*(_BYTE *)(result + 100) & 4) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 72), 2u);
  char v4 = *(_BYTE *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    double result = PB::Writer::write(this, *(double *)(v3 + 56), 4u);
    if ((*(_BYTE *)(v3 + 100) & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

uint64_t sub_1011614D8(uint64_t result)
{
  *(void *)double result = &off_10189E2F0;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_1011614F0(PB::Base *this)
{
  *(void *)this = &off_10189E2F0;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_101161530(PB::Base *a1)
{
}

uint64_t sub_101161544(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E2F0;
  *(void *)(a1 + 8) = 0LL;
  char v4 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v5 = *(_BYTE *)(a2 + 60);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    char v6 = 2;
    *(_BYTE *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 2;
    *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v7;
    char v5 = *(_BYTE *)(a2 + 60);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v6 = 0;
  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
LABEL_5:
    uint64_t v8 = *(void *)(a2 + 32);
    v6 |= 1u;
    *(_BYTE *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v6;
    *(void *)(a1 + 32) = v8;
    char v5 = *(_BYTE *)(a2 + 60);
  }

uint64_t sub_101161630(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "deltaHeading", *(float *)(a1 + 48));
    char v5 = *(_BYTE *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((*(_BYTE *)(a1 + 60) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "gravityZ", *(float *)(a1 + 52));
  char v5 = *(_BYTE *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

BOOL sub_101161738(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101161BEC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 60);
  if ((v4 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    char v4 = *(_BYTE *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
LABEL_13:
      double result = PB::Writer::write(this, *(float *)(v3 + 56), 3u);
      if ((*(_BYTE *)(v3 + 60) & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(result + 60) & 1) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  char v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v4 & 8) != 0) {
LABEL_5:
  }
    double result = PB::Writer::write(this, *(float *)(v3 + 52), 4u);
LABEL_6:
  unint64_t v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7, 5u);
  }

  if ((*(_BYTE *)(v3 + 60) & 4) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 48), 6u);
  }
  return result;
}

void *sub_101161CC8(void *result)
{
  *double result = off_10189E328;
  result[1] = 0LL;
  return result;
}

void sub_101161CD8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E328;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101161D18(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E328;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_101161D5C(void *a1, uint64_t a2)
{
  *a1 = off_10189E328;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0xA8uLL);
    uint64_t v5 = sub_1010F1098(v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_101161DC4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "correction");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101161E14(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101161FCC(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

double sub_101161FE8(uint64_t a1)
{
  *(void *)a1 = &off_10189E360;
  *(_DWORD *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

void sub_101162014(PB::Base *this)
{
  *(void *)this = &off_10189E360;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }

  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }

  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_101162074(PB::Base *a1)
{
}

uint64_t sub_101162088(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &off_10189E360;
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(void *)(a1 + 72) = 0LL;
  if ((*(_BYTE *)(a2 + 96) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = 1;
    *(void *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
  }

  if (a1 != a2)
  {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_1000F9040( (char *)(a1 + 56),  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }

  char v6 = *(_BYTE *)(a2 + 96);
  if ((v6 & 4) != 0)
  {
    char v7 = *(_BYTE *)(a2 + 92);
    *(_BYTE *)(a1 + 96) |= 4u;
    *(_BYTE *)(a1 + 92) = v7;
    char v6 = *(_BYTE *)(a2 + 96);
  }

  if ((v6 & 2) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) |= 2u;
    *(_DWORD *)(a1 + 88) = v8;
  }

  return a1;
}

uint64_t sub_101162178(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(double **)(a1 + 8);
  char v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }

  char v8 = *(_BYTE *)(a1 + 96);
  if ((v8 & 4) != 0)
  {
    PB::TextFormatter::format(this, "isInitFinished", *(_BYTE *)(a1 + 92));
    char v8 = *(_BYTE *)(a1 + 96);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 2) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }

  else if ((*(_BYTE *)(a1 + 96) & 1) == 0)
  {
    goto LABEL_5;
  }

  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  if ((*(_BYTE *)(a1 + 96) & 2) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "trackingState", *(_DWORD *)(a1 + 88));
LABEL_7:
  char v9 = *(double **)(a1 + 32);
  unsigned int v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(this, "translation", v11);
  }

  unint64_t v12 = *(double **)(a1 + 56);
  char v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(this, "velocity", v14);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_10116229C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 56);
    double v11 = (void **)(a1 + 32);
    uint64_t v120 = a1 + 48;
    uint64_t v121 = a1 + 72;
    unint64_t v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_101162B00(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 96) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 80), 1u);
  }
  unint64_t v4 = *(double **)(v3 + 8);
  unint64_t v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  double v7 = *(double **)(v3 + 32);
  char v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  unsigned int v10 = *(double **)(v3 + 56);
  double v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    double v12 = *v10++;
    double result = PB::Writer::write(this, v12, 4u);
  }

  char v13 = *(_BYTE *)(v3 + 96);
  if ((v13 & 4) != 0)
  {
    double result = PB::Writer::write(this, *(_BYTE *)(v3 + 92), 5u);
    char v13 = *(_BYTE *)(v3 + 96);
  }

  if ((v13 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 6u);
  }
  return result;
}

uint64_t sub_101162BDC(uint64_t result)
{
  *(void *)double result = &off_10189E398;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_101162BF4(PB::Base *a1)
{
}

double sub_101162C08(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E398;
  *(_DWORD *)(a1 + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(a1 + 44) = 2;
    *(double *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 44) = v3;
    *(void *)(a1 + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 44);
  }

uint64_t sub_101162CCC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "gestureType", *(_DWORD *)(a1 + 32));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "hostPowerState", *(_BYTE *)(a1 + 40));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_101162DBC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011632B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_10116337C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E3D0;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_101163394(PB::Base *a1)
{
}

uint64_t sub_1011633A8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E3D0;
  *(_DWORD *)(result + 84) = 0;
  int v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 40);
    int v3 = 16;
    *(_DWORD *)(result + 84) = 16;
    *(void *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v4;
    int v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(result + 84) = v3;
    *(void *)(result + 48) = v5;
    int v2 = *(_DWORD *)(a2 + 84);
  }

uint64_t sub_1011635BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "detectionMode", *(_DWORD *)(a1 + 56));
    int v5 = *(_DWORD *)(a1 + 84);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }

  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "detectorRunning", *(_BYTE *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

uint64_t sub_10116382C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101164170(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 84);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    int v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }

uint64_t sub_10116438C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E408;
  *(_DWORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_1011643A4(PB::Base *a1)
{
}

uint64_t sub_1011643B8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E408;
  *(_DWORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 24);
    __int16 v3 = 8;
    *(_WORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 8;
    *(_DWORD *)(result + 24) = v4;
    __int16 v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(_DWORD *)(result + 28) = v5;
    __int16 v2 = *(_WORD *)(a2 + 60);
  }

uint64_t sub_101164578(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dataRate", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }

  else if ((*(_WORD *)(a1 + 60) & 0x800) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "isInterpolated", *(_BYTE *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }

uint64_t sub_101164788(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101164DE4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }

double sub_101164FAC(uint64_t a1)
{
  *(void *)a1 = &off_10189E440;
  *(void *)(a1 + 64) = 0LL;
  *(_DWORD *)(a1 + 244) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0LL;
  return result;
}

void sub_101164FE0(PB::Base *this)
{
  *(void *)this = &off_10189E440;
  uint64_t v2 = *((void *)this + 21);
  *((void *)this + 21) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 20);
  *((void *)this + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *((void *)this + 18);
  *((void *)this + 18) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *((void *)this + 17);
  *((void *)this + 17) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *((void *)this + 16);
  *((void *)this + 16) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *((void *)this + 15);
  *((void *)this + 15) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *((void *)this + 14);
  *((void *)this + 14) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = *((void *)this + 13);
  *((void *)this + 13) = 0LL;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = *((void *)this + 12);
  *((void *)this + 12) = 0LL;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = *((void *)this + 11);
  *((void *)this + 11) = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  PB::Base::~Base(this);
}

void sub_101165130(PB::Base *a1)
{
}

uint64_t sub_101165144(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E440;
  *(void *)(a1 + 64) = 0LL;
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v4 = (void *)(a1 + 88);
  *(_DWORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0LL;
  int v5 = *(_DWORD *)(a2 + 244);
  if ((v5 & 0x100) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 80);
    int v6 = 256;
    *(_DWORD *)(a1 + 244) = 256;
    *(void *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v7;
    int v5 = *(_DWORD *)(a2 + 244);
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v6 = 0;
  if ((v5 & 0x80) != 0)
  {
LABEL_5:
    uint64_t v8 = *(void *)(a2 + 72);
    v6 |= 0x80u;
    *(_DWORD *)(a1 + 244) = v6;
    *(void *)(a1 + 72) = v8;
    int v5 = *(_DWORD *)(a2 + 244);
  }

uint64_t sub_1011655F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x100000) != 0)
  {
    PB::TextFormatter::format(this, "appliedBoutMetricCorrections", *(_BYTE *)(a1 + 236));
    int v5 = *(_DWORD *)(a1 + 244);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_58;
    }
  }

  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "dailyFlights30daysMax", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_59;
  }

uint64_t sub_101165B08(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_1011668B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 244);
  if ((v4 & 0x100) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 80), 1u);
    int v4 = *(_DWORD *)(v3 + 244);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_58;
    }
  }

  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 2u);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_59;
  }

uint64_t sub_101166CBC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E478;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101166CD4(PB::Base *a1)
{
}

double sub_101166CE8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E478;
  *(_DWORD *)(a1 + 28) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(double *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_101166D58(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "calories_kCal", *(float *)(a1 + 24));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101166DE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101167008(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  }
  return result;
}

uint64_t sub_101167080(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E4B0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101167098(PB::Base *a1)
{
}

double sub_1011670AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E4B0;
  *(_DWORD *)(a1 + 28) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(double *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_10116711C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "calories_kCal", *(float *)(a1 + 24));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011671AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011673CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  }
  return result;
}

uint64_t sub_101167444(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E4E8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10116745C(PB::Base *a1)
{
}

uint64_t sub_101167470(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E4E8;
  *(_DWORD *)(result + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    *(_BYTE *)(result + 24) = 2;
    *(void *)(result + 16) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 1;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
LABEL_5:
    uint64_t v4 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 24) = v2;
    *(void *)(result + 8) = v4;
  }

  return result;
}

uint64_t sub_1011674C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "enclosureMaterial", *(void *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 24);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101167528(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011677B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
  }

  if ((v4 & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 2u);
  }
  return result;
}

uint64_t sub_10116780C(uint64_t result)
{
  *(void *)uint64_t result = off_10189E520;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101167824(PB::Base *this)
{
  *(void *)this = off_10189E520;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101167868(PB::Base *this)
{
  *(void *)this = off_10189E520;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1011678B0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189E520;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 32) & 2) == 0)
  {
    char v3 = 1;
    if ((*(_BYTE *)(a2 + 32) & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v4 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = 2;
  *(void *)(a1 + 16) = v4;
  char v3 = 3;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    *(_BYTE *)(a1 + 32) = v3;
    *(void *)(a1 + 8) = v5;
  }

uint64_t sub_10116795C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 32);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011679E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101167C34(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
  }

  if ((v4 & 1) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  }
  char v5 = *(const PB::Base **)(v3 + 24);
  if (v5) {
    return PB::Writer::writeSubmessage(this, v5, 3u);
  }
  return result;
}

uint64_t sub_101167CA0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E558;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101167CB8(PB::Base *a1)
{
}

uint64_t sub_101167CCC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E558;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(_DWORD *)(result + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_101167DC8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "date", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "isForcedOnWristEnabled", *(_BYTE *)(a1 + 36));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_101167EF8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101168528(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_10116862C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E590;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_101168644(PB::Base *a1)
{
}

uint64_t sub_101168658(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E590;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    int v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 8) = v4;
  }

  return result;
}

uint64_t sub_1011686A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "crown", *(_DWORD *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 16);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "wrist", *(_DWORD *)(a1 + 12));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101168710(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101168A38(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 16);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 12), 1u);
    char v4 = *(_BYTE *)(v3 + 16);
  }

  if ((v4 & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 2u);
  }
  return result;
}

void sub_101168A94(PB::Base *a1)
{
}

uint64_t sub_101168AA8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E5C8;
  *(_DWORD *)(result + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(void *)(result + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_101168B30(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "entryId", *(void *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "rssi", *(_DWORD *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "isMoving", *(_BYTE *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101168BE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101168FBC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeSInt(this, *(_DWORD *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(_BYTE *)(v3 + 28), 4u);
  }

void *sub_101169050(void *result)
{
  *uint64_t result = off_10189E600;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_101169064(void **a1)
{
  *a1 = off_10189E600;
  unint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_1011690AC(void **a1)
{
  *a1 = off_10189E600;
  uint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

void *sub_1011690F8(void *a1, uint64_t a2)
{
  a1[1] = 0LL;
  uint64_t v3 = (char **)(a1 + 1);
  *a1 = off_10189E600;
  a1[2] = 0LL;
  a1[3] = 0LL;
  char v4 = *(uint64_t **)(a2 + 8);
  char v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_10116915C(v3, *v4++);
  return a1;
}

uint64_t sub_10116915C(char **a1, uint64_t a2)
{
  char v4 = operator new(0x28uLL);
  sub_101168AA8((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  char v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    uint64_t v24 = a1 + 2;
    if (v12) {
      char v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      char v13 = 0LL;
    }
    BOOL v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    unsigned int v23 = v15;
    *(void *)BOOL v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    unint64_t v17 = *a1;
    unsigned int v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)unsigned int v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      char v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    unint64_t v20 = a1[2];
    a1[2] = v15;
    unsigned int v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)char v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_101169280(_Unwind_Exception *a1)
{
}

uint64_t sub_1011692A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "entries");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116930C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1011694AC(char **a1)
{
  unint64_t v2 = operator new(0x28uLL);
  *(void *)unint64_t v2 = &off_10189E5C8;
  v2[8] = 0;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  char v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    uint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    char v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    uint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)char v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_1011695D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1011695F0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5, 1u))
    char v5 = *v2++;
  return result;
}

uint64_t sub_101169638(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E638;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_101169650(PB::Base *a1)
{
}

uint64_t sub_101169664(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E638;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    int v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 8) = v4;
  }

  return result;
}

uint64_t sub_1011696B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 16);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "motionNotification", *(_DWORD *)(a1 + 12));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116971C(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101169A44(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 16);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 12), 1u);
    char v4 = *(_BYTE *)(v3 + 16);
  }

  if ((v4 & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 8), 2u);
  }
  return result;
}

uint64_t sub_101169A9C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E670;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_101169AB4(PB::Base *a1)
{
}

uint64_t sub_101169AC8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E670;
  *(_DWORD *)(result + 64) = 0;
  __int16 v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 60);
    __int16 v3 = 512;
    *(_WORD *)(result + 64) = 512;
    *(_DWORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v4;
    __int16 v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 40);
    v3 |= 0x10u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
    __int16 v2 = *(_WORD *)(a2 + 64);
  }

uint64_t sub_101169BFC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "eventTime", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_101169D6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10116A550(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x200) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 60), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

void sub_10116A690(PB::Base *a1)
{
}

uint64_t sub_10116A6A4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189E6A8;
  *(_DWORD *)(result + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 28);
    char v3 = 16;
    *(_BYTE *)(result + 32) = 16;
    *(_DWORD *)(result + 28) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_10116A748(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "genericWorkoutLabel", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "poolLength", *(double *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "workoutLocationType", *(_DWORD *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_10116A818(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10116AD7C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 28), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

void *sub_10116AE2C(void *result)
{
  *uint64_t result = off_10189E6E0;
  result[1] = 0LL;
  return result;
}

void sub_10116AE3C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E6E0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116AE7C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E6E0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116AEC0(void *a1, uint64_t a2)
{
  *a1 = off_10189E6E0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x10uLL);
    float v5 = sub_1010DDCCC((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v7;
    if (v6) {
      (*(void (**)(uint64_t, float))(*(void *)v6 + 8LL))(v6, v5);
    }
  }

  return a1;
}

uint64_t sub_10116AF28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116AF78(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116B130(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116B14C(void *result)
{
  *uint64_t result = off_10189E718;
  result[1] = 0LL;
  return result;
}

void sub_10116B15C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E718;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116B19C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E718;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116B1E0(void *a1, uint64_t a2)
{
  *a1 = off_10189E718;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x28uLL);
    uint64_t v5 = sub_1010DF384((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10116B248(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116B298(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116B450(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116B46C(void *result)
{
  *uint64_t result = off_10189E750;
  result[1] = 0LL;
  return result;
}

void sub_10116B47C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E750;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116B4BC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E750;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116B500(void *a1, uint64_t a2)
{
  *a1 = off_10189E750;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x28uLL);
    uint64_t v5 = sub_1010DF384((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10116B568(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116B5B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116B770(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116B78C(void *result)
{
  *uint64_t result = off_10189E788;
  result[1] = 0LL;
  return result;
}

void sub_10116B79C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E788;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116B7DC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E788;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116B820(void *a1, uint64_t a2)
{
  *a1 = off_10189E788;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x18uLL);
    float v5 = sub_1010F41EC((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v7;
    if (v6) {
      (*(void (**)(uint64_t, float))(*(void *)v6 + 8LL))(v6, v5);
    }
  }

  return a1;
}

uint64_t sub_10116B888(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116B8D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116BA90(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116BAAC(void *result)
{
  *uint64_t result = off_10189E7C0;
  result[1] = 0LL;
  return result;
}

void sub_10116BABC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E7C0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116BAFC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E7C0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116BB40(void *a1, uint64_t a2)
{
  *a1 = off_10189E7C0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x48uLL);
    float v5 = sub_1010FBADC((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v7;
    if (v6) {
      (*(void (**)(uint64_t, float))(*(void *)v6 + 8LL))(v6, v5);
    }
  }

  return a1;
}

uint64_t sub_10116BBA8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116BBF8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116BDB0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116BDCC(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x48uLL);
    sub_1010FB910((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10116BE20(void *result)
{
  *uint64_t result = off_10189E7F8;
  result[1] = 0LL;
  return result;
}

void sub_10116BE30(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E7F8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116BE70(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E7F8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116BEB4(void *a1, uint64_t a2)
{
  *a1 = off_10189E7F8;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x58uLL);
    float v5 = sub_10110523C((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v7;
    if (v6) {
      (*(void (**)(uint64_t, float))(*(void *)v6 + 8LL))(v6, v5);
    }
  }

  return a1;
}

uint64_t sub_10116BF1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116BF6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116C124(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116C140(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x58uLL);
    sub_101105000((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10116C194(void *result)
{
  *uint64_t result = off_10189E830;
  result[1] = 0LL;
  return result;
}

void sub_10116C1A4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E830;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116C1E4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E830;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116C228(void *a1, uint64_t a2)
{
  *a1 = off_10189E830;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x40uLL);
    uint64_t v5 = sub_101115948((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10116C290(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116C2E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116C498(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116C4B4(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x40uLL);
    sub_1011157D0((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10116C508(void *result)
{
  *uint64_t result = off_10189E868;
  result[1] = 0LL;
  return result;
}

void sub_10116C518(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E868;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116C558(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E868;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116C59C(void *a1, uint64_t a2)
{
  *a1 = off_10189E868;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x18uLL);
    uint64_t v5 = sub_1011193F0((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10116C604(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116C654(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116C80C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116C828(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_1011193C4((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10116C87C(void *result)
{
  *uint64_t result = off_10189E8A0;
  result[1] = 0LL;
  return result;
}

void sub_10116C88C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E8A0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116C8CC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E8A0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116C910(void *a1, uint64_t a2)
{
  *a1 = off_10189E8A0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0xB8uLL);
    double v5 = sub_1010868B8((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v7;
    if (v6) {
      (*(void (**)(uint64_t, double))(*(void *)v6 + 8LL))(v6, v5);
    }
  }

  return a1;
}

uint64_t sub_10116C978(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116C9C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116CB80(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116CB9C(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0xB8uLL);
    sub_101086610((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

uint64_t sub_10116CBF0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189E8D8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_10116CC08(PB::Base *a1)
{
}

double sub_10116CC1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189E8D8;
  *(_DWORD *)(a1 + 28) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 4) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 24) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 28) = v3;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_10116CC8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "walkingHeartRateAverage", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 28) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "restingHeartRate", *(double *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "workoutActivityType", *(_DWORD *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116CD1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_10116CFE8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 28) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  }
  return result;
}

void *sub_10116D060(void *result)
{
  *uint64_t result = off_10189E910;
  result[1] = 0LL;
  return result;
}

void sub_10116D070(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E910;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116D0B0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E910;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116D0F4(void *a1, uint64_t a2)
{
  *a1 = off_10189E910;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x48uLL);
    uint64_t v5 = sub_101189684((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10116D15C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116D1AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116D364(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116D380(void *result)
{
  *uint64_t result = off_10189E948;
  result[1] = 0LL;
  return result;
}

void sub_10116D390(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E948;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116D3D0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E948;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116D414(void *a1, uint64_t a2)
{
  *a1 = off_10189E948;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x28uLL);
    uint64_t v5 = sub_101174B14((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10116D47C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116D4CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116D684(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116D6A0(void *result)
{
  *uint64_t result = off_10189E980;
  result[1] = 0LL;
  return result;
}

void sub_10116D6B0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E980;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116D6F0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E980;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116D734(void *a1, uint64_t a2)
{
  *a1 = off_10189E980;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x58uLL);
    uint64_t v5 = sub_101188EBC(v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10116D79C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116D7EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116D9A4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116D9C0(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x58uLL);
    sub_101188CD4((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10116DA14(void *result)
{
  *uint64_t result = off_10189E9B8;
  result[1] = 0LL;
  return result;
}

void sub_10116DA24(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E9B8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116DA64(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E9B8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116DAA8(void *a1, uint64_t a2)
{
  *a1 = off_10189E9B8;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x20uLL);
    float v5 = sub_10119F3F0((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v7;
    if (v6) {
      (*(void (**)(uint64_t, float))(*(void *)v6 + 8LL))(v6, v5);
    }
  }

  return a1;
}

uint64_t sub_10116DB10(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116DB60(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116DD18(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116DD34(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_10119F358((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10116DD88(void *result)
{
  *uint64_t result = off_10189E9F0;
  result[1] = 0LL;
  return result;
}

void sub_10116DD98(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E9F0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116DDD8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189E9F0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116DE1C(void *a1, uint64_t a2)
{
  *a1 = off_10189E9F0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x20uLL);
    float v5 = sub_1011AAA74((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v7;
    if (v6) {
      (*(void (**)(uint64_t, float))(*(void *)v6 + 8LL))(v6, v5);
    }
  }

  return a1;
}

uint64_t sub_10116DE84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116DED4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116E08C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116E0A8(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    unint64_t v2 = operator new(0x20uLL);
    sub_1011AA9C0((uint64_t)v2);
    uint64_t result = (void *)v1[1];
    v1[1] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void *sub_10116E0FC(void *result)
{
  *uint64_t result = off_10189EA28;
  result[1] = 0LL;
  return result;
}

void sub_10116E10C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EA28;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116E14C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EA28;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116E190(void *a1, uint64_t a2)
{
  *a1 = off_10189EA28;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x30uLL);
    a1[1] = sub_101167CCC((uint64_t)v4, v3);
  }

  return a1;
}

uint64_t sub_10116E1E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116E230(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116E3F4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

_DWORD *sub_10116E410(_DWORD *result)
{
  if (!*((void *)result + 1))
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x30uLL);
    *(void *)uint64_t result = &off_10189E558;
    result[10] = 0;
    *((void *)v1 + 1) = result;
  }

  return result;
}

void *sub_10116E450(void *result)
{
  *uint64_t result = off_10189EA60;
  result[1] = 0LL;
  return result;
}

void sub_10116E460(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EA60;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116E4A0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EA60;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116E4E4(void *a1, uint64_t a2)
{
  *a1 = off_10189EA60;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x18uLL);
    *(void *)int v4 = &off_10189E590;
    v4[4] = 0;
    char v5 = *(_BYTE *)(v3 + 16);
    if ((v5 & 2) != 0)
    {
      int v7 = *(_DWORD *)(v3 + 12);
      *((_BYTE *)v4 + 16) = 2;
      v4[3] = v7;
      char v6 = 3;
      if ((v5 & 1) == 0)
      {
LABEL_7:
        a1[1] = v4;
        return a1;
      }
    }

    else
    {
      char v6 = 1;
      if ((*(_BYTE *)(v3 + 16) & 1) == 0) {
        goto LABEL_7;
      }
    }

    int v8 = *(_DWORD *)(v3 + 8);
    *((_BYTE *)v4 + 16) = v6;
    v4[2] = v8;
    goto LABEL_7;
  }

  return a1;
}

uint64_t sub_10116E574(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116E5C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116E788(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

_DWORD *sub_10116E7A4(_DWORD *result)
{
  if (!*((void *)result + 1))
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x18uLL);
    *(void *)uint64_t result = &off_10189E590;
    result[4] = 0;
    *((void *)v1 + 1) = result;
  }

  return result;
}

void *sub_10116E7E4(void *result)
{
  *uint64_t result = off_10189EA98;
  result[1] = 0LL;
  return result;
}

void sub_10116E7F4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EA98;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116E834(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EA98;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116E878(void *a1, uint64_t a2)
{
  *a1 = off_10189EA98;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x20uLL);
    uint64_t v5 = sub_1011690F8(v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10116E8E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116E930(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116EAF4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116EB10(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x20uLL);
    *uint64_t result = off_10189E600;
    result[1] = 0LL;
    result[2] = 0LL;
    result[3] = 0LL;
    v1[1] = result;
  }

  return result;
}

void *sub_10116EB50(void *result)
{
  *uint64_t result = off_10189EAD0;
  result[1] = 0LL;
  return result;
}

void sub_10116EB60(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EAD0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116EBA0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EAD0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116EBE4(void *a1, uint64_t a2)
{
  *a1 = off_10189EAD0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x48uLL);
    a1[1] = sub_101169AC8((uint64_t)v4, v3);
  }

  return a1;
}

uint64_t sub_10116EC34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116EC84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116EE48(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

_DWORD *sub_10116EE64(_DWORD *result)
{
  if (!*((void *)result + 1))
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x48uLL);
    *(void *)uint64_t result = &off_10189E670;
    result[16] = 0;
    *((void *)v1 + 1) = result;
  }

  return result;
}

void *sub_10116EEA4(void *result)
{
  *uint64_t result = off_10189EB08;
  result[1] = 0LL;
  return result;
}

void sub_10116EEB4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EB08;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116EEF4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EB08;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116EF38(void *a1, uint64_t a2)
{
  *a1 = off_10189EB08;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x20uLL);
    uint64_t v5 = sub_10116F2BC(v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10116EFA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116EFF4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

void *sub_10116F1B8(void *result)
{
  *uint64_t result = off_10189EB40;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_10116F1CC(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10116F1E8(void *result)
{
  if (!result[1])
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x20uLL);
    *uint64_t result = off_10189EB40;
    result[1] = 0LL;
    result[2] = 0LL;
    result[3] = 0LL;
    v1[1] = result;
  }

  return result;
}

void sub_10116F228(void **a1)
{
  *a1 = off_10189EB40;
  unint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10116F270(void **a1)
{
  *a1 = off_10189EB40;
  unint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

void *sub_10116F2BC(void *a1, uint64_t a2)
{
  a1[1] = 0LL;
  unint64_t v3 = (char **)(a1 + 1);
  *a1 = off_10189EB40;
  a1[2] = 0LL;
  a1[3] = 0LL;
  int v4 = *(uint64_t **)(a2 + 8);
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_10116F320(v3, *v4++);
  return a1;
}

uint64_t sub_10116F320(char **a1, uint64_t a2)
{
  int v4 = operator new(0x28uLL);
  sub_10116A6A4((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  int v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    unsigned int v24 = a1 + 2;
    if (v12) {
      char v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      char v13 = 0LL;
    }
    BOOL v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    uint64_t v23 = v15;
    *(void *)BOOL v14 = v4;
    uint64_t v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    unint64_t v17 = *a1;
    unsigned int v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)unsigned int v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v22.i64[1];
      char v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    uint64_t v20 = a1[2];
    a1[2] = v15;
    uint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)int v7 = v4;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_10116F444(_Unwind_Exception *a1)
{
}

uint64_t sub_10116F460(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))( v7,  this,  "workoutPriors");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116F4CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_10116F66C(char **a1)
{
  unint64_t v2 = operator new(0x28uLL);
  *(void *)unint64_t v2 = &off_10189E6A8;
  v2[8] = 0;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  uint64_t v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    uint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    char v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    uint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)uint64_t v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_10116F794(_Unwind_Exception *a1)
{
}

uint64_t sub_10116F7B0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5, 2u))
    uint64_t v5 = *v2++;
  return result;
}

void *sub_10116F7F8(void *result)
{
  *uint64_t result = off_10189EB78;
  result[1] = 0LL;
  return result;
}

void sub_10116F808(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EB78;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10116F848(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189EB78;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10116F88C(void *a1, uint64_t a2)
{
  *a1 = off_10189EB78;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    unint64_t v4 = operator new(0xA8uLL);
    uint64_t v5 = sub_1010F1098(v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_10116F8F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "correction");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10116F944(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10116FAFC(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

float sub_10116FB18@<S0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = operator new(0xC0uLL);
  uint64_t v5 = sub_101177204(v4);
  *a2 = v5;
  int v6 = *(_DWORD *)(a1 + 52);
  if (v6) {
    int v7 = 42;
  }
  else {
    int v7 = -1;
  }
  int v9 = *(_DWORD *)(a1 + 188);
  int v8 = *(_DWORD *)(a1 + 192);
  *((_BYTE *)v5 + 181) = (v7 & v8) == 0;
  int v10 = *(_DWORD *)(a1 + 196);
  int v11 = *(_DWORD *)(a1 + 200);
  *((_BYTE *)v5 + 177) = (v10 & v7) == 0;
  *((_BYTE *)v5 + 18sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = (v11 & v7) == 0;
  int v12 = *(_DWORD *)(a1 + 204);
  *((_BYTE *)v5 + 176) = (v12 & v7) == 0;
  int v13 = *(_DWORD *)(a1 + 36);
  *((_DWORD *)v5 + 38) = *(_DWORD *)(a1 + 32);
  int v14 = *(_DWORD *)(a1 + 24);
  int v15 = *(_DWORD *)(a1 + 28);
  *((_DWORD *)v5 + 25) = *(_DWORD *)(a1 + 168);
  *((_DWORD *)v5 + 26) = v14;
  *((_DWORD *)v5 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v9;
  *((_DWORD *)v5 + 15) = *(unsigned __int8 *)(a1 + 48);
  uint64_t v16 = v5[23];
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 16);
  double v19 = *(double *)(a1 + 120);
  float v20 = *(double *)(a1 + 112);
  *((float *)v5 + 41) = v20;
  float v21 = v19;
  *((float *)v5 + 16) = v21;
  uint64_t v22 = *(void *)(a1 + 40);
  v5[1] = v17;
  v5[2] = v22;
  v5[3] = v18;
  v23.f64[0] = *(float64_t *)(a1 + 128);
  *(float *)&uint64_t v17 = *(double *)(a1 + 136);
  *((_DWORD *)v5 + 8) = v17;
  *(void *)&__int128 v24 = vrev64q_s32(*(int32x4_t *)(a1 + 172)).u64[0];
  *((void *)&v24 + 1) = *(void *)(a1 + 180);
  *(_OWORD *)((char *)v5 + 84) = v24;
  *((_DWORD *)v5 + 42) = v8;
  *((_DWORD *)v5 + 43) = v15;
  *((_DWORD *)v5 + 17) = v10;
  *((_DWORD *)v5 + 18) = v13;
  *((_DWORD *)v5 + 34) = v11;
  LODWORD(v17) = *(_DWORD *)(a1 + 208);
  *((_BYTE *)v5 + 178) = *(_BYTE *)(a1 + 212);
  LODWORD(v24) = *(_DWORD *)(a1 + 216);
  *((_DWORD *)v5 + 39) = v17;
  *((_DWORD *)v5 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v24;
  *((_BYTE *)v5 + 179) = *(_BYTE *)(a1 + 220);
  *((_DWORD *)v5 + 9) = v12;
  *((_DWORD *)v5 + 1sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v6;
  float64_t v25 = *(double *)(a1 + 56);
  v23.f64[1] = *(float64_t *)(a1 + 64);
  *(float32x4_t *)(v5 + 15) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v23), *(float64x2_t *)(a1 + 72));
  v23.f64[0] = *(float64_t *)(a1 + 88);
  v23.f64[1] = v25;
  *(float32x4_t *)((char *)v5 + 44) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v23), *(float64x2_t *)(a1 + 96));
  *(void *)((char *)v5 + 108) = *(void *)(a1 + 144);
  *((_DWORD *)v5 + 29) = *(_DWORD *)(a1 + 152);
  *(void *)((char *)v5 + 14sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(void *)(a1 + 156);
  float result = *(float *)(a1 + 164);
  v5[23] = v16 | 0x1FFFFFFFBFFFLL;
  *((float *)v5 + 37) = result;
  return result;
}

float sub_10116FC88@<S0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v4 = operator new(0x60uLL);
  uint64_t v5 = sub_101108A4C((uint64_t)v4);
  *a2 = v5;
  int v6 = *(_DWORD *)(v5 + 92);
  *(void *)(v5 + 8) = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v5 + 88) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v5 + 28) = v7;
  *(_DWORD *)(v5 + 72) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v5 + 24) = *(unsigned __int8 *)(a1 + 1);
  *(_DWORD *)(v5 + 56) = *(unsigned __int8 *)(a1 + 2);
  v8.i32[0] = *(_DWORD *)(a1 + 3);
  int32x4_t v9 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v8));
  *(void *)&__int128 v10 = vrev64q_s32(v9).u64[0];
  *((void *)&v10 + 1) = v9.i64[1];
  *(_OWORD *)(v5 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v10;
  *(_DWORD *)(v5 + 36) = *(unsigned __int8 *)(a1 + 7);
  *(void *)(v5 + 16) = *(void *)(a1 + 36);
  *(void *)(v5 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(void *)(a1 + 44);
  *(_DWORD *)(v5 + 68) = *(_DWORD *)(a1 + 52);
  *(void *)(v5 + 76) = *(void *)(a1 + 56);
  float result = *(float *)(a1 + 64);
  *(_DWORD *)(v5 + 92) = v6 | 0xFFFDF;
  *(float *)(v5 + 84) = result;
  return result;
}

double sub_10116FD40@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 36);
  int v4 = sub_1011ABE20(a2);
  uint64_t v5 = v4[28];
  *(_OWORD *)(v4 + 7) = *(_OWORD *)a1;
  uint64_t v6 = *(void *)(a1 + 24);
  v4[2] = *(void *)(a1 + 16);
  v4[20] = v6;
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  *((_BYTE *)v4 + 22sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = (v7 & 0xFFFFFFBF) == 0;
  BOOL v9 = 1;
  if (v8 && v8 != 64) {
    BOOL v9 = v8 == 256;
  }
  *((_BYTE *)v4 + 217) = v9;
  int v10 = *(_DWORD *)(a1 + 40);
  *((_BYTE *)v4 + 221) = (v10 & 0xFFFFFFBF) == 0;
  *((_BYTE *)v4 + 218) = (v3 & 4) == 0;
  uint64_t v11 = *(void *)(a1 + 56);
  v4[19] = *(void *)(a1 + 48);
  v4[15] = v11;
  *((_DWORD *)v4 + 51) = v8;
  *((_DWORD *)v4 + 52) = v7;
  *((_DWORD *)v4 + 53) = v10;
  uint64_t v12 = *(void *)(a1 + 64);
  int v13 = *(_DWORD *)(a1 + 72);
  int v14 = *(_DWORD *)(a1 + 76);
  int v15 = *(_DWORD *)(a1 + 80);
  *((_DWORD *)v4 + 49) = *(_DWORD *)(a1 + 84);
  *((_DWORD *)v4 + 5sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v13;
  uint64_t v16 = *(void *)(a1 + 128);
  uint64_t v17 = *(void *)(a1 + 96);
  uint64_t v18 = *(void *)(a1 + 104);
  v4[3] = *(void *)(a1 + 136);
  v4[4] = v17;
  LOBYTE(v13) = *(_BYTE *)(a1 + 120);
  *(int8x16_t *)(v4 + 17) = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v19 = *(void *)(a1 + 176);
  uint64_t v20 = *(void *)(a1 + 184);
  v4[5] = v16;
  void v4[6] = v19;
  uint64_t v22 = *(void *)(a1 + 144);
  uint64_t v21 = *(void *)(a1 + 152);
  uint64_t v23 = *(void *)(a1 + 192);
  v4[13] = v12;
  v4[14] = v23;
  uint64_t v24 = *(void *)(a1 + 112);
  v4[9] = v21;
  v4[10] = v24;
  v4[21] = v18;
  *((double *)v4 + 22) = (double)v14;
  v4[23] = v20;
  double result = (double)v15;
  *((_BYTE *)v4 + 219) = v13;
  v4[28] = v5 | 0x7DF7F7FFELL;
  *((double *)v4 + 11) = (double)v15;
  v4[12] = v22;
  return result;
}

double sub_10116FE54@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_10108CAC4(a2);
  *(_BYTE *)(v3 + 84) = *(_BYTE *)(a1 + 68);
  *(_WORD *)(v3 + 85) = *(_WORD *)(a1 + 69);
  int v5 = *(_DWORD *)(a1 + 72);
  int v4 = *(_DWORD *)(a1 + 76);
  __int16 v6 = *(_WORD *)(v3 + 88);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
  *(void *)(v3 + 48) = *(void *)(a1 + 16);
  *(int8x16_t *)(v3 + 56) = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 24);
  double result = *(double *)(a1 + 56);
  *(double *)(v3 + 24) = result;
  int v8 = *(_DWORD *)(a1 + 64);
  *(_WORD *)(v3 + 88) = v6 | 0x3FFF;
  *(_DWORD *)(v3 + 76) = v8;
  *(_DWORD *)(v3 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
  *(_DWORD *)(v3 + 72) = v4;
  return result;
}

__n128 sub_10116FED0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_10108D6FC(a2);
  char v4 = *(_BYTE *)(v3 + 48);
  *(_BYTE *)(v3 + 44) = *(_BYTE *)(a1 + 36);
  __n128 result = *(__n128 *)a1;
  __int128 v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)a1;
  *(_DWORD *)(v3 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(v3 + 48) = v4 | 0x3F;
  *(_OWORD *)(v3 + 24) = v6;
  return result;
}

uint64_t sub_10116FF1C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10108C2F4(a2);
  __int16 v4 = *(_WORD *)(result + 76);
  *(void *)(result + 48) = *((void *)a1 + 4);
  *(int8x16_t *)(result + 56) = vextq_s8(*(int8x16_t *)((char *)a1 + 40), *(int8x16_t *)((char *)a1 + 40), 8uLL);
  __int128 v5 = *a1;
  int8x16_t v6 = vextq_s8(*((int8x16_t *)a1 + 1), *((int8x16_t *)a1 + 1), 8uLL);
  *(_BYTE *)(result + 73) = *((_DWORD *)a1 + 14) == 0;
  *(_WORD *)(result + 76) = v4 | 0x2FE;
  *(_OWORD *)(result + 16) = v5;
  *(int8x16_t *)(result + 32) = v6;
  return result;
}

double sub_10116FF80@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_1011503F0(a2);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 24);
  *(int8x16_t *)(v3 + 8) = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
  unint64_t v4 = *(void *)(a1 + 72);
  *(int32x2_t *)(v3 + 84) = vrev64_s32(*(int32x2_t *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 8);
  __int16 v6 = *(_WORD *)(v3 + 92);
  *(void *)(v3 + 64) = v4;
  *(void *)(v3 + 72) = v5;
  double result = *(double *)(a1 + 80);
  LODWORD(v4) = *(_DWORD *)(a1 + 88);
  *(double *)(v3 + 24) = (double)v4;
  uint64_t v8 = *(void *)(a1 + 104);
  *(double *)(v3 + 48) = result;
  *(void *)(v3 + 56) = v8;
  int v9 = *(_DWORD *)(a1 + 112);
  *(_WORD *)(v3 + 92) = v6 | 0xFFF;
  *(_DWORD *)(v3 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v9;
  return result;
}

float sub_10116FFF8@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_1011157D0(a2);
  __int16 v4 = *(_WORD *)(v3 + 60);
  *(int8x16_t *)(v3 + 8) = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  *(void *)(v3 + 32) = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v3 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(_DWORD *)(a1 + 48);
  int v6 = *(unsigned __int16 *)(a1 + 54);
  *(_DWORD *)(v3 + 48) = *(unsigned __int8 *)(a1 + 52);
  *(_DWORD *)(v3 + 52) = v5;
  *(_DWORD *)(v3 + 44) = v6;
  float result = *(float *)(a1 + 56);
  *(float *)(v3 + 24) = result;
  char v8 = *(_BYTE *)(a1 + 60);
  *(_WORD *)(v3 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v4 | 0x7FF;
  *(_BYTE *)(v3 + 56) = v8;
  return result;
}

uint64_t sub_10117006C(uint64_t *a1)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  __int16 v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
  char v12 = 0;
  if ([v2 fileExistsAtPath:v4 isDirectory:&v12])
  {
    if (!v12)
    {
LABEL_15:
      uint64_t v8 = 0LL;
      goto LABEL_16;
    }
  }

  else
  {
    id v11 = 0LL;
    unsigned __int8 v5 = [v2 createDirectoryAtPath:v4 withIntermediateDirectories:1 attributes:0 error:&v11];
    id v6 = v11;
    int v7 = v6;
    if ((v5 & 1) == 0)
    {
      if (qword_1019A05A0 != -1) {
        dispatch_once(&qword_1019A05A0, &stru_10189F5F0);
      }
      int v9 = (os_log_s *)qword_1019A0598;
      if (os_log_type_enabled((os_log_t)qword_1019A0598, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543618;
        int v14 = v4;
        __int16 v15 = 2114;
        uint64_t v16 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Unable to create directory at path: %{public}@, error, %{public}@",  buf,  0x16u);
      }

      goto LABEL_15;
    }
  }

  uint64_t v8 = 1LL;
LABEL_16:

  return v8;
}

void sub_1011701F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_101170218(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  else {
    int v7 = (uint64_t *)*a1;
  }
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7));
  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v8));
  id v33 = 0LL;
  char v28 = (void *)objc_claimAutoreleasedReturnValue( [v6 contentsOfDirectoryAtURL:v9 includingPropertiesForKeys:0 options:4 error:&v33]);
  id v10 = v33;

  if (v10)
  {
    if (qword_1019A05A0 != -1) {
      dispatch_once(&qword_1019A05A0, &stru_10189F5F0);
    }
    id v11 = (os_log_s *)qword_1019A0598;
    if (os_log_type_enabled((os_log_t)qword_1019A0598, OS_LOG_TYPE_INFO))
    {
      else {
        char v12 = (uint64_t *)*a1;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v37 = 2114;
      id v38 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Unable to list files at path: %{public}s, error, %{public}@",  buf,  0x16u);
    }
  }

  else
  {
    else {
      int v13 = (uint64_t *)*a2;
    }
    int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v13));
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id v15 = v28;
    id v16 = [v15 countByEnumeratingWithState:&v29 objects:v35 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v30;
      do
      {
        for (int i = 0LL; i != v16; int i = (char *)i + 1)
        {
          if (*(void *)v30 != v17) {
            objc_enumerationMutation(v15);
          }
          uint64_t v19 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 pathExtension]);
          BOOL v21 = [v20 compare:v14 options:1] == 0;

          if (v21)
          {
            uint64_t v22 = (char *)[v19 fileSystemRepresentation];
            *(void *)buf = v22;
            unint64_t v23 = a3[1];
            if (v23 >= a3[2])
            {
              uint64_t v24 = sub_101170764(a3, (char **)buf);
            }

            else
            {
              sub_1010DDBC0((void *)a3[1], v22);
              uint64_t v24 = v23 + 24;
              a3[1] = v23 + 24;
            }

            a3[1] = v24;
          }
        }

        id v16 = [v15 countByEnumeratingWithState:&v29 objects:v35 count:16];
      }

      while (v16);
    }

    float64_t v25 = (const void **)a3[1];
    unint64_t v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - *a3) >> 3));
    else {
      uint64_t v27 = v26;
    }
    sub_101170868(*a3, v25, (uint64_t)&v34, v27, 1);
  }
}

void sub_101170524( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *(void *)(v12 - 128) = v10;
  sub_1000129D4((void ***)(v12 - 128));
  _Unwind_Resume(a1);
}

void sub_1011705B4(uint64_t *a1)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  __int16 v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
  id v9 = 0LL;
  unsigned __int8 v5 = [v2 removeItemAtPath:v4 error:&v9];
  id v6 = v9;

  if ((v5 & 1) == 0)
  {
    if (qword_1019A05A0 != -1) {
      dispatch_once(&qword_1019A05A0, &stru_10189F5F0);
    }
    int v7 = (os_log_s *)qword_1019A0598;
    if (os_log_type_enabled((os_log_t)qword_1019A0598, OS_LOG_TYPE_INFO))
    {
      else {
        uint64_t v8 = (uint64_t *)*a1;
      }
      *(_DWORD *)buf = 136446466;
      id v11 = v8;
      __int16 v12 = 2114;
      id v13 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Unable to delete file %{public}s, error, %{public}@",  buf,  0x16u);
    }
  }
}

void sub_101170710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_101170734(id a1)
{
  os_log_t v1 = os_log_create("com.apple.MotionSensorLogging", "MSL");
  unint64_t v2 = (void *)qword_1019A0598;
  qword_1019A0598 = (uint64_t)v1;
}

uint64_t sub_101170764(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_100007008();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10000701C(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  id v13 = v10;
  int v14 = &v10[24 * v4];
  id v15 = v14;
  id v16 = &v10[24 * v9];
  sub_1010DDBC0(v14, *a2);
  id v15 = v14 + 24;
  sub_100013F10(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100014098((uint64_t)&v13);
  return v11;
}

void sub_101170854(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_101170868(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v9 = a2 - 3;
  uint64_t v10 = (const void **)a1;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    uint64_t v12 = v11;
    uint64_t v13 = (char *)a2 - (char *)v10;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_100022920(a3, a2 - 3, v10))
        {
          __int128 v29 = v10[2];
          __int128 v27 = *(_OWORD *)v10;
          __int128 v25 = *(_OWORD *)v9;
          v10[2] = *(a2 - 1);
          *(_OWORD *)uint64_t v10 = v25;
          *(_OWORD *)unint64_t v9 = v27;
          *(a2 - 1) = v29;
        }

        return;
      case 3uLL:
        sub_101170E30(v10, v10 + 3, a2 - 3, a3);
        return;
      case 4uLL:
        sub_1011714C4((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(a2 - 3), a3);
        return;
      case 5uLL:
        sub_1011715AC((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(v10 + 9), (__int128 *)(a2 - 3), a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0) {
            sub_101170C0C((uint64_t)v10, a2, a3);
          }
          else {
            sub_101170D2C(v10, a2, a3);
          }
          return;
        }

        if (v12 != 1)
        {
          unint64_t v15 = v14 >> 1;
          id v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            sub_101170E30(&v10[3 * v15], v10, a2 - 3, a3);
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          else
          {
            sub_101170E30(v10, &v10[3 * v15], a2 - 3, a3);
            uint64_t v17 = 3 * v15;
            uint64_t v18 = &v10[3 * v15 - 3];
            sub_101170E30(v10 + 3, v18, a2 - 6, a3);
            uint64_t v19 = v10 + 6;
            uint64_t v20 = &v10[v17 + 3];
            sub_101170E30(v19, v20, a2 - 9, a3);
            sub_101170E30(v18, v16, v20, a3);
            char v28 = *(const void **)(a1 + 16);
            __int128 v26 = *(_OWORD *)a1;
            __int128 v21 = *(_OWORD *)v16;
            *(void *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            v16[2] = v28;
            *(_OWORD *)id v16 = v26;
            if ((a5 & 1) != 0) {
              goto LABEL_11;
            }
          }

          if (!sub_100022920(a3, (const void **)(a1 - 24), (const void **)a1))
          {
            uint64_t v10 = sub_101170F78((const void **)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }

void sub_101170C0C(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = (const void **)a1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        if (sub_100022920(a3, v7, v11))
        {
          __int128 v17 = *(_OWORD *)v10;
          uint64_t v18 = v10[2];
          v10[1] = 0LL;
          v10[2] = 0LL;
          *uint64_t v10 = 0LL;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            unint64_t v14 = (void **)(a1 + v12 + 24);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(void *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }

            v12 -= 24LL;
          }

          while (sub_100022920(a3, (const void **)&v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }

        uint64_t v7 = v10 + 3;
        v9 += 24LL;
      }

      while (v10 + 3 != a2);
    }
  }

void sub_101170D2C(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    id v6 = a1;
    uint64_t v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        uint64_t v10 = v6;
        id v6 = v7;
        if (sub_100022920(a3, v7, v10))
        {
          __int128 v16 = *(_OWORD *)v6;
          __int128 v17 = v6[2];
          v6[1] = 0LL;
          v6[2] = 0LL;
          *id v6 = 0LL;
          uint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            BOOL v13 = sub_100022920(a3, (const void **)&v16, v11);
            v11 -= 3;
          }

          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = v11 + 6;
          if (v14 < 0) {
            operator delete((void *)*v15);
          }
          *(_OWORD *)int v15 = v16;
          void v15[2] = v17;
        }

        uint64_t v7 = v6 + 3;
        v9 += 3;
      }

      while (v6 + 3 != a2);
    }
  }

uint64_t sub_101170E30(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = sub_100022920(a4, a2, a1);
  uint64_t result = sub_100022920(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result) {
      return result;
    }
    BOOL v13 = a2[2];
    __int128 v14 = *(_OWORD *)a2;
    int v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_100022920(a4, a2, a1)) {
      return 1LL;
    }
    __int128 v16 = a1[2];
    __int128 v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2LL;
  }

  if (!(_DWORD)result)
  {
    uint64_t v19 = a1[2];
    __int128 v20 = *(_OWORD *)a1;
    __int128 v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_100022920(a4, a3, a2)) {
      return 1LL;
    }
    unint64_t v22 = a2[2];
    __int128 v23 = *(_OWORD *)a2;
    BOOL v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2LL;
  }

  uint64_t v10 = a1[2];
  __int128 v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1LL;
}

const void **sub_101170F78(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  __int128 v16 = *(_OWORD *)a1;
  __int128 v17 = a1[2];
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = 0LL;
  if (sub_100022920(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    id v6 = a1;
    do
      v6 += 3;
    while (!sub_100022920(a3, (const void **)&v16, v6));
  }

  else
  {
    uint64_t v7 = a1 + 3;
    do
    {
      id v6 = v7;
      BOOL v8 = sub_100022920(a3, (const void **)&v16, v7);
      uint64_t v7 = v6 + 3;
    }

    while (!v8);
  }

  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24LL;
    while (sub_100022920(a3, (const void **)&v16, (const void **)v4));
  }

  while ((unint64_t)v6 < v4)
  {
    __int128 v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    __int128 v18 = v9;
    __int128 v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)id v6 = v10;
    __int128 v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!sub_100022920(a3, (const void **)&v16, v6));
    do
      v4 -= 24LL;
    while (sub_100022920(a3, (const void **)&v16, (const void **)v4));
  }

  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
  }

  else
  {
    __int128 v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }

  __int128 v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

unint64_t sub_101171108(__int128 *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  __int128 v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0LL;
  *((void *)a1 + 2) = 0LL;
  *(void *)a1 = 0LL;
  do
    v6 += 24LL;
  while (sub_100022920(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      a2 -= 3;
    }

    while (!sub_100022920(a3, a2, (const void **)&v17));
  }

  else
  {
    do
      a2 -= 3;
    while (!sub_100022920(a3, a2, (const void **)&v17));
  }

  unint64_t v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    __int128 v9 = a2;
    do
    {
      __int128 v19 = *(_OWORD *)v8;
      __int128 v10 = v19;
      __int128 v20 = *(const void **)(v8 + 16);
      __int128 v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)__int128 v9 = v10;
      do
        v8 += 24LL;
      while (sub_100022920(a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_100022920(a3, v9, (const void **)&v17));
    }

    while (v8 < (unint64_t)v9);
  }

  __int128 v13 = (void **)(v8 - 24);
  if ((__int128 *)(v8 - 24) == a1)
  {
  }

  else
  {
    __int128 v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(void *)(v8 - 8);
    *a1 = v14;
    *(_BYTE *)(v8 - 1) = 0;
    *(_BYTE *)(v8 - 24) = 0;
  }

  __int128 v15 = v17;
  *(void *)(v8 - 8) = v18;
  *(_OWORD *)__int128 v13 = v15;
  return v8 - 24;
}

BOOL sub_101171294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (sub_100022920(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        __int128 v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }

      return 1LL;
    case 3uLL:
      sub_101170E30((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1LL;
    case 4uLL:
      sub_1011714C4(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24), a3);
      return 1LL;
    case 5uLL:
      sub_1011715AC( a1,  (const void **)(a1 + 24),  (const void **)(a1 + 48),  (__int128 *)(a1 + 72),  (__int128 *)(a2 - 24),  a3);
      return 1LL;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      sub_101170E30((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1LL;
      }
      uint64_t v14 = 0LL;
      int v15 = 0;
      break;
  }

  while (1)
  {
    if (sub_100022920(a3, (const void **)v13, v12))
    {
      __int128 v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0LL;
      *(void *)(v13 + 16) = 0LL;
      *(void *)uint64_t v13 = 0LL;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }

        BOOL v19 = sub_100022920(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24LL;
      }

      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }

    uint64_t v12 = (const void **)v13;
    v14 += 24LL;
    v13 += 24LL;
    if (v13 == a2) {
      return 1LL;
    }
  }

__n128 sub_1011714C4(uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  if (sub_100022920(a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    __int128 v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (sub_100022920(a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      __int128 v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_100022920(a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }

  return result;
}

__n128 sub_1011715AC(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  if (sub_100022920(a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    __int128 v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (sub_100022920(a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      __int128 v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (sub_100022920(a6, a3, a2))
      {
        BOOL v19 = a2[2];
        __int128 v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_100022920(a6, a2, (const void **)a1))
        {
          __int128 v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }

  return result;
}

__int128 *sub_1011716CC(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  if ((__int128 *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      __int128 v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_101171914(a1, a4, v9, v12);
        __int128 v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }

      while (v11);
    }

    uint64_t v13 = a2;
    if (a2 != a3)
    {
      __int128 v14 = a2;
      do
      {
        if (sub_100022920(a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *((void *)v14 + 2);
          __int128 v16 = *v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *__int128 v14 = *(_OWORD *)a1;
          *((void *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          sub_101171914(a1, a4, v9, (__n128 *)a1);
        }

        __int128 v14 = (__int128 *)((char *)v14 + 24);
      }

      while (v14 != a3);
      uint64_t v13 = a3;
    }

    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = (__int128 *)((char *)a2 - 24);
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)char v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(_BYTE *)(a1 + 23);
        *(void *)(a1 + 8) = 0LL;
        *(void *)(a1 + 16) = 0LL;
        *(void *)a1 = 0LL;
        uint64_t v22 = sub_101171AA8(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (__int128 *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }

        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          __int128 v25 = *v19;
          *(void *)(v23 + 16) = *((void *)v19 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          *(void *)BOOL v19 = v20;
          *((void *)v19 + 1) = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          sub_101171B80(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }

        BOOL v19 = (__int128 *)((char *)v19 - 24);
      }

      while (v18-- > 2);
    }

    return v13;
  }

  return a3;
}

void sub_1011718FC(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_101171914(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556LL * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556LL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_100022920(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24LL;
        uint64_t v12 = v14;
      }

      if (!sub_100022920(a2, (const void **)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0LL;
        v7[1].n128_u64[0] = 0LL;
        v7->n128_u64[0] = 0LL;
        while (1)
        {
          __int128 v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_100022920(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24LL;
            uint64_t v18 = v19;
          }

          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (sub_100022920(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }

        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        *__int128 v16 = result;
      }
    }
  }

  return result;
}

uint64_t sub_101171AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_100022920(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24LL;
      uint64_t v6 = v11;
    }

    __int128 v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)uint64_t v9 = 0;
    a1 = v9;
  }

  while (v6 <= v8);
  return v9;
}

double sub_101171B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (__int128 *)(a1 + 24 * v8);
    uint64_t v10 = (__int128 *)(a2 - 24);
    if (sub_100022920(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      __int128 v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0LL;
      *((void *)v10 + 2) = 0LL;
      *(void *)uint64_t v10 = 0LL;
      while (1)
      {
        __int128 v12 = v9;
        __int128 v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        *uint64_t v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (__int128 *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!sub_100022920(a3, (const void **)v9, (const void **)&v14))
        {
          break;
        }
      }

      double result = *(double *)&v14;
      *__int128 v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }

  return result;
}

double sub_101171C7C(unint64_t a1)
{
  double v2 = *(double *)&qword_1019A05A8;
  if (*(double *)&qword_1019A05A8 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      uint32_t numer = info.numer;
      uint32_t denom = info.denom;
      do
      {
        uint32_t v5 = denom;
        uint32_t denom = numer % denom;
        uint32_t numer = v5;
      }

      while (denom);
    }

    else
    {
      uint32_t v5 = info.numer;
    }

    uint32_t v6 = info.numer / v5;
    unsigned int v7 = 1000000000;
    do
    {
      uint32_t v8 = v7;
      unsigned int v7 = v6 % v7;
      uint32_t v6 = v8;
    }

    while (v7);
    double v2 = (double)(info.numer / v5 / v8) / (double)(0x3B9ACA00 / v8 * (unint64_t)(info.denom / v5));
    *(double *)&qword_1019A05A8 = v2;
  }

  return v2 * (double)a1;
}

double sub_101171D38()
{
  uint64_t v0 = mach_absolute_time();
  return sub_101171C7C(v0);
}

double sub_101171D4C()
{
  uint64_t v0 = mach_continuous_time();
  return sub_101171C7C(v0);
}

uint64_t sub_101171D60(uint64_t result)
{
  *(void *)double result = &off_10189F620;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101171D78(PB::Base *a1)
{
}

double sub_101171D8C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189F620;
  *(_DWORD *)(a1 + 28) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_101171DFC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 24));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestampGestureBegin", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101171E8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_101172158(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 2u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  }
  return result;
}

uint64_t sub_1011721D0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F658;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1011721E8(PB::Base *a1)
{
}

uint64_t sub_1011721FC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189F658;
  *(_DWORD *)(result + 64) = 0;
  __int16 v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(result + 64) = 1;
    *(void *)(result + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 60);
    v3 |= 0x800u;
    *(_WORD *)(result + 64) = v3;
    *(_BYTE *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
    __int16 v2 = *(_WORD *)(a2 + 64);
  }

uint64_t sub_101172384(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "classificationType", *(_DWORD *)(a1 + 24));
    __int16 v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "intervalSleepBeginToSleepDetected", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_101172554(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101172BE4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 64);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((*(_WORD *)(result + 64) & 0x800) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 60), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_101172D74(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F690;
  *(_DWORD *)(result + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101172D8C(PB::Base *a1)
{
}

uint64_t sub_101172DA0(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189F690;
  *(_DWORD *)(result + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x100) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 72);
    __int16 v3 = 256;
    *(_WORD *)(result + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 256;
    *(void *)(result + 72) = v4;
    __int16 v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 100) & 0x1000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 96);
    v3 |= 0x1000u;
    *(_WORD *)(result + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(_DWORD *)(result + 96) = v5;
    __int16 v2 = *(_WORD *)(a2 + 100);
  }

uint64_t sub_101172F28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 100);
    if ((v5 & 0x400) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((*(_WORD *)(a1 + 100) & 0x400) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "confidence", *(_DWORD *)(a1 + 88));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_1011730F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101173768(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 100);
  if ((v4 & 0x100) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 72), 1u);
    __int16 v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 0x1000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((*(_WORD *)(result + 100) & 0x1000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 2u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_1011738F8(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F6C8;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_101173910(PB::Base *a1)
{
}

uint64_t sub_101173924(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189F6C8;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    char v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }

  return result;
}

uint64_t sub_101173950(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "lockScreen", *(_BYTE *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10117399C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101173B28(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  }
  return result;
}

void *sub_101173B48(void *result)
{
  *uint64_t result = off_10189F700;
  result[1] = 0LL;
  return result;
}

void sub_101173B58(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189F700;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101173B98(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189F700;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_101173BDC(void *a1, uint64_t a2)
{
  *a1 = off_10189F700;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x38uLL);
    double v5 = sub_1010F844C((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v7;
    if (v6) {
      (*(void (**)(uint64_t, double))(*(void *)v6 + 8LL))(v6, v5);
    }
  }

  return a1;
}

uint64_t sub_101173C44(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101173C94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101173E4C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_101173E68(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F738;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101173E80(PB::Base *a1)
{
}

uint64_t sub_101173E94(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189F738;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_101173EE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101173F4C(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101174274(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1011742CC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F770;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1011742E0(PB::Base *this)
{
  *(void *)this = &off_10189F770;
  char v4 = (void **)*((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  PB::Base::~Base(this);
}

void sub_101174320(PB::Base *a1)
{
}

uint64_t sub_101174334(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189F770;
  *(void *)(a1 + 8) = 0LL;
  char v4 = (void ***)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  char v5 = *(__int128 **)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = (void **)operator new(0x18uLL);
    uint64_t v7 = v6;
    if (*((char *)v5 + 23) < 0)
    {
      sub_1010DD48C(v6, *(void **)v5, *((void *)v5 + 1));
      char v9 = *v4;
      *char v4 = v7;
      if (v9) {
        sub_10058A4FC((int)v4, v9);
      }
    }

    else
    {
      __int128 v8 = *v5;
      v6[2] = (void *)*((void *)v5 + 2);
      *(_OWORD *)uint64_t v6 = v8;
      *char v4 = v6;
    }
  }

  char v10 = *(_BYTE *)(a2 + 24);
  if ((v10 & 1) != 0)
  {
    int v11 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_DWORD *)(a1 + 16) = v11;
    char v10 = *(_BYTE *)(a2 + 24);
  }

  if ((v10 & 2) != 0)
  {
    char v12 = *(_BYTE *)(a2 + 20);
    *(_BYTE *)(a1 + 24) |= 2u;
    *(_BYTE *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v12;
  }

  return a1;
}

uint64_t sub_101174414(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "accessoryType", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 24);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "isAttached", *(_BYTE *)(a1 + 20));
  }
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format(this, "uuid");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101174494(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    __int128 v8 = (void ***)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }

uint64_t sub_10117476C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::write(this, v4, 1LL);
  }
  char v5 = *(_BYTE *)(v3 + 24);
  if ((v5 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
    char v5 = *(_BYTE *)(v3 + 24);
  }

  if ((v5 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 20), 3u);
  }
  return result;
}

uint64_t sub_1011747D8(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F7A8;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1011747F0(PB::Base *a1)
{
}

uint64_t sub_101174804(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189F7A8;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    char v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }

  return result;
}

uint64_t sub_101174830(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "isCharging", *(_BYTE *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10117487C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101174A08(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_101174A28(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F7E0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_101174A40(PB::Base *a1)
{
}

uint64_t sub_101174A54(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189F7E0;
  *(_DWORD *)(result + 36) = 0;
  char v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 36) = 1;
    *(void *)(result + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 36);
  }

uint64_t sub_101174B18(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 36) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_101174C08(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101174F90(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 36);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 36) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

double sub_10117505C(uint64_t a1)
{
  *(void *)a1 = &off_10189F818;
  *(_DWORD *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_10117508C(PB::Base *this)
{
  *(void *)this = &off_10189F818;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }

  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }

  char v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

void sub_1011750FC(PB::Base *a1)
{
}

uint64_t sub_101175110(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189F818;
  *(_OWORD *)(a1 + 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  char v5 = (char *)(a1 + 56);
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if ((*(_BYTE *)(a2 + 112) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = 1;
    *(void *)(a1 + 104) = v6;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_10004C5F8( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  }

  return a1;
}

uint64_t sub_1011751E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(float **)(a1 + 32);
  uint64_t v6 = *(float **)(a1 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "biasEst", v7);
  }

  uint64_t v8 = *(float **)(a1 + 8);
  char v9 = *(float **)(a1 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "biasEstVar", v10);
  }

  unint64_t v11 = *(float **)(a1 + 56);
  unint64_t v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "residual", v13);
  }

  BOOL v14 = *(float **)(a1 + 80);
  char v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(this, "temperature", v16);
  }

  if ((*(_BYTE *)(a1 + 112) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1011752F4(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 56);
    unint64_t v11 = (void **)(a1 + 80);
    uint64_t v130 = a1 + 96;
    uint64_t v131 = a1 + 72;
    unint64_t v12 = (void **)(a1 + 8);
    float v13 = (void **)(a1 + 32);
    uint64_t v128 = a1 + 48;
    uint64_t v129 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101175BE4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = (void *)result;
  if ((*(_BYTE *)(result + 112) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 104), 1u);
  }
  unint64_t v4 = (float *)v3[4];
  unint64_t v5 = (float *)v3[5];
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  float v7 = (float *)v3[1];
  uint64_t v8 = (float *)v3[2];
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  float v10 = (float *)v3[10];
  unint64_t v11 = (float *)v3[11];
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12, 4u);
  }

  uint64_t v14 = (float *)v3[7];
  float v13 = (float *)v3[8];
  while (v14 != v13)
  {
    float v15 = *v14++;
    double result = PB::Writer::write(this, v15, 5u);
  }

  return result;
}

uint64_t sub_101175CA4(uint64_t result)
{
  *(void *)double result = &off_10189F850;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_101175CBC(PB::Base *a1)
{
}

uint64_t sub_101175CD0(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10189F850;
  *(_DWORD *)(result + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(result + 44) = 4;
    *(void *)(result + 24) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 44) = v3;
    *(void *)(result + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 44);
  }

uint64_t sub_101175DB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "exitingSaturation", *(_BYTE *)(a1 + 40));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "extendedSaturation", *(_BYTE *)(a1 + 41));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_101175EC0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101176404(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_1011764EC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F888;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101176504(PB::Base *a1)
{
}

uint64_t sub_101176518(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189F888;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  __int16 v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x80) != 0)
  {
    char v4 = *(_BYTE *)(a2 + 15);
    __int16 v3 = 128;
    *(_WORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 128;
    *(_BYTE *)(result + 15) = v4;
    __int16 v2 = *(_WORD *)(a2 + 20);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 9);
    v3 |= 2u;
    *(_WORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(_BYTE *)(result + 9) = v5;
    __int16 v2 = *(_WORD *)(a2 + 20);
  }

uint64_t sub_101176630(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "isAppleMapsRoutingActive", *(_BYTE *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "isBicycleRouting", *(_BYTE *)(a1 + 9));
  __int16 v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_101176780(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }

uint64_t sub_101176B48(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 20);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(result + 15), 1u);
    __int16 v4 = *(_WORD *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 9), 2u);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_101176C68(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F8C0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101176C80(PB::Base *a1)
{
}

float sub_101176C94(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189F8C0;
  *(_DWORD *)(a1 + 28) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    float result = *(float *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(float *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 16);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(float *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_101176D3C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "mets", *(float *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "metsDiff", *(float *)(a1 + 12));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "metsWR", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_101176E0C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101177154(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

void *sub_101177204(void *result)
{
  *uint64_t result = &off_10189F8F8;
  result[23] = 0LL;
  return result;
}

void sub_10117721C(PB::Base *a1)
{
}

float sub_101177230(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189F8F8;
  *(void *)(a1 + 184) = 0LL;
  uint64_t v2 = *(void *)(a2 + 184);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    uint64_t v3 = 4LL;
    *(void *)(a1 + 184) = 4LL;
    *(void *)(a1 + 24) = v4;
    uint64_t v2 = *(void *)(a2 + 184);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    uint64_t v4 = *(void *)(a2 + 8);
    v3 |= 1uLL;
    *(void *)(a1 + 184) = v3;
    *(void *)(a1 + 8) = v4;
    uint64_t v2 = *(void *)(a2 + 184);
  }

uint64_t sub_101177738(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryPercentage", *(float *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 184);
    if ((v5 & 0x8000000000LL) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_50;
    }
  }

  else if ((v5 & 0x8000000000LL) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "asymmetryPercentageIsValid", *(_BYTE *)(a1 + 176));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_51;
  }

uint64_t sub_101177D08(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_101179470(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 184);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    uint64_t v4 = *(void *)(v3 + 184);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }

  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000000LL) == 0) {
      goto LABEL_5;
    }
    goto LABEL_50;
  }

uint64_t sub_101179980(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F930;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101179998(PB::Base *a1)
{
}

float sub_1011799AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189F930;
  *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 36);
    v3 |= 0x40u;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(_DWORD *)(a1 + 36) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_101179A8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbability", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "cycleTime", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_101179B9C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101179EA8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 0x40) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

void *sub_101179F90(void *result)
{
  *uint64_t result = off_10189F968;
  result[1] = 0LL;
  return result;
}

void sub_101179FA0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189F968;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101179FE0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189F968;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10117A024(void *a1, uint64_t a2)
{
  *a1 = off_10189F968;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x38uLL);
    double v5 = sub_1010F844C((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v7;
    if (v6) {
      (*(void (**)(uint64_t, double))(*(void *)v6 + 8LL))(v6, v5);
    }
  }

  return a1;
}

uint64_t sub_10117A08C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10117A0DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10117A294(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_10117A2B0(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F9A0;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_10117A2C8(PB::Base *a1)
{
}

uint64_t sub_10117A2DC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189F9A0;
  *(_DWORD *)(result + 116) = 0;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10000) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 92);
    int v3 = 0x10000;
    *(_DWORD *)(result + 116) = 0x10000;
    *(_DWORD *)(result + 92) = v4;
    int v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 64);
    v3 |= 0x200u;
    *(_DWORD *)(result + 116) = v3;
    *(_DWORD *)(result + 64) = v5;
    int v2 = *(_DWORD *)(a2 + 116);
  }

uint64_t sub_10117A5EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(_DWORD *)(a1 + 48));
    int v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }

  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "drivingArmLikelihoodSum", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }

uint64_t sub_10117A97C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10117B994(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 116);
  if ((v4 & 0x10000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 92), 1u);
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }

  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 2u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }

uint64_t sub_10117BCAC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189F9D8;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_10117BCC4(PB::Base *a1)
{
}

uint64_t sub_10117BCD8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189F9D8;
  *(_DWORD *)(result + 36) = 0;
  __int16 v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(result + 36) = 1;
    *(void *)(result + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 36);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 36) = v3;
    *(_DWORD *)(result + 28) = v5;
    __int16 v2 = *(_WORD *)(a2 + 36);
  }

uint64_t sub_10117BDF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "outdoorCyclingStateMachineFrom", *(_DWORD *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_10117BF40(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10117C5B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 36);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 36);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

void *sub_10117C6D4(void *result)
{
  *uint64_t result = off_10189FA10;
  result[1] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_10117C6E8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189FA10;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10117C728(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189FA10;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_10117C76C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189FA10;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 28) = 2;
    *(_DWORD *)(a1 + 24) = v4;
    char v3 = 3;
    if ((*(_BYTE *)(a2 + 28) & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 1;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v3;
    *(void *)(a1 + 16) = v5;
  }

double sub_10117C838(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A00D8;
  *(_DWORD *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    int v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 2;
    *(_DWORD *)(a1 + 16) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(double *)(a1 + 8) = result;
  }

  return result;
}

uint64_t sub_10117C88C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "impulse");
  }
  char v6 = *(_BYTE *)(a1 + 28);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 24));
    char v6 = *(_BYTE *)(a1 + 28);
  }

  if ((v6 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10117C914(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10117CC24(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A00D8;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

uint64_t sub_10117CC38(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
  }

  if ((v4 & 1) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    return PB::Writer::writeSubmessage(this, v5, 3u);
  }
  return result;
}

uint64_t sub_10117CCA4(uint64_t result)
{
  *(void *)uint64_t result = off_10189FA48;
  *(void *)(result + 112) = 0LL;
  *(_DWORD *)(result + 18sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10117CCBC(PB::Base *this)
{
  *(void *)this = off_10189FA48;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10117CD00(PB::Base *this)
{
  *(void *)this = off_10189FA48;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_10117CD48(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189FA48;
  *(void *)(a1 + 112) = 0LL;
  *(_DWORD *)(a1 + 18sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  int v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x800) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 96);
    int v5 = 2048;
    *(_DWORD *)(a1 + 18sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 2048;
    *(void *)(a1 + 96) = v6;
    int v4 = *(_DWORD *)(a2 + 180);
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v5 = 0;
  if ((v4 & 0x40) != 0)
  {
LABEL_5:
    uint64_t v7 = *(void *)(a2 + 56);
    v5 |= 0x40u;
    *(_DWORD *)(a1 + 18sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
    *(void *)(a1 + 56) = v7;
    int v4 = *(_DWORD *)(a2 + 180);
  }

uint64_t sub_10117D0B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 180);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }

uint64_t sub_10117D468(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_10117E1C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 180);
  if ((v4 & 0x800) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 96), 1u);
    int v4 = *(_DWORD *)(v3 + 180);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }

  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 2u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }

uint64_t sub_10117E4EC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FA80;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10117E504(PB::Base *a1)
{
}

uint64_t sub_10117E518(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189FA80;
  *(_DWORD *)(result + 24) = 0;
  char v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 24) = 1;
    *(void *)(result + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 24);
  }

uint64_t sub_10117E588(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 24) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "event", *(_DWORD *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "value", *(_DWORD *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10117E618(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10117E998(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        return result;
      }
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 24) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 3u);
  }
  return result;
}

uint64_t sub_10117EA10(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FAB8;
  *(_DWORD *)(result + 22sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10117EA28(PB::Base *a1)
{
}

uint64_t sub_10117EA3C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189FAB8;
  *(_DWORD *)(result + 22sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  int v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 152);
    int v3 = 0x40000;
    *(_DWORD *)(result + 22sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0x40000;
    *(void *)(result + 152) = v4;
    int v2 = *(_DWORD *)(a2 + 220);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 72);
    v3 |= 0x100u;
    *(_DWORD *)(result + 22sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(void *)(result + 72) = v5;
    int v2 = *(_DWORD *)(a2 + 220);
  }

uint64_t sub_10117EDD8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 220);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }

uint64_t sub_10117F208(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10117FEEC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 220);
  if ((v4 & 0x40000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 152), 1u);
    int v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }

  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 2u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }

double sub_101180290(uint64_t a1)
{
  *(void *)a1 = &off_10189FAF0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  return result;
}

void sub_1011802B0(PB::Base *this)
{
  *(void *)this = &off_10189FAF0;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101180300(PB::Base *a1)
{
}

uint64_t sub_101180314(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FAF0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v3 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  if (a1 != a2)
  {
    sub_1000F9040( v3,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  }

  return a1;
}

uint64_t sub_10118038C(void *a1, PB::TextFormatter *this, char *a3)
{
  int v5 = (double *)a1[1];
  uint64_t v6 = (double *)a1[2];
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "loiAltitude", v7);
  }

  uint64_t v8 = (double *)a1[4];
  char v9 = (double *)a1[5];
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "loiVerticalUncertainty", v10);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101180424(void *a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    double v10 = (void **)(a1 + 4);
    uint64_t v11 = (uint64_t)(a1 + 6);
    unint64_t v12 = (void **)(a1 + 1);
    uint64_t v13 = (uint64_t)(a1 + 3);
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        unint64_t v17 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v23 = v4 + 1;
          char v24 = *(_BYTE *)(v14 + v4);
          *((void *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_21;
          }
          v21 += 7;
          unint64_t v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            unint64_t v17 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101180954(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(double **)(result + 8);
  unint64_t v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 1u);
  }

  uint64_t v8 = *(double **)(v3 + 32);
  double v7 = *(double **)(v3 + 40);
  while (v8 != v7)
  {
    double v9 = *v8++;
    double result = PB::Writer::write(this, v9, 2u);
  }

  return result;
}

uint64_t sub_1011809BC(uint64_t result)
{
  *(void *)double result = &off_10189FB28;
  *(_DWORD *)(result + 84) = -1;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_1011809DC(PB::Base *a1)
{
}

uint64_t sub_1011809F0(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10189FB28;
  *(_DWORD *)(result + 84) = -1;
  *(_DWORD *)(result + 92) = 0;
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 56);
    __int16 v3 = 64;
    *(_WORD *)(result + 92) = 64;
    *(void *)(result + 56) = v4;
    __int16 v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 92) = v3;
    *(void *)(result + 48) = v5;
    __int16 v2 = *(_WORD *)(a2 + 92);
  }

uint64_t sub_101180B64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "arrivalDate", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((*(_WORD *)(a1 + 92) & 0x200) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "confidence", *(_DWORD *)(a1 + 80));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_101180D14(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011812A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

void *sub_101181418(void *result)
{
  *uint64_t result = off_10189FB60;
  result[4] = 0LL;
  result[24] = 0LL;
  return result;
}

void sub_101181430(PB::Base *this)
{
  *(void *)this = off_10189FB60;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101181474(PB::Base *this)
{
  *(void *)this = off_10189FB60;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1011814BC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189FB60;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  uint64_t v4 = *(void *)(a2 + 192);
  if ((v4 & 0x8000) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 100);
    uint64_t v5 = 0x8000LL;
    *(void *)(a1 + 192) = 0x8000LL;
    *(_DWORD *)(a1 + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v6;
    uint64_t v4 = *(void *)(a2 + 192);
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v5 = 0LL;
  if ((v4 & 0x100) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 72);
    v5 |= 0x100uLL;
    *(void *)(a1 + 192) = v5;
    *(_DWORD *)(a1 + 72) = v7;
    uint64_t v4 = *(void *)(a2 + 192);
  }

uint64_t sub_101181994(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "alsLux", *(_DWORD *)(a1 + 64));
    uint64_t v5 = *(void *)(a1 + 192);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_46;
    }
  }

  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "caltype", *(_DWORD *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_47;
  }

uint64_t sub_101181EA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

LABEL_449:
        *(_DWORD *)(a1 + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v25;
        goto LABEL_522;
      case 2u:
        *(void *)(a1 + 192) |= 0x100uLL;
        unint64_t v29 = *((void *)this + 1);
        unint64_t v30 = *((void *)this + 2);
        uint64_t v31 = *(void *)this;
        if (v29 <= 0xFFFFFFFFFFFFFFF5LL && v29 + 10 <= v30)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0LL;
          do
          {
            unint64_t v35 = v29 + 1;
            *((void *)this + 1) = v29 + 1;
            char v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0) {
              goto LABEL_452;
            }
            v32 += 7;
            unint64_t v29 = v35;
            BOOL v14 = v33++ > 8;
          }

          while (!v14);
LABEL_257:
          LODWORD(v34) = 0;
          goto LABEL_452;
        }

        char v243 = 0;
        unsigned int v244 = 0;
        uint64_t v34 = 0LL;
        if (v30 <= v29) {
          unint64_t v30 = *((void *)this + 1);
        }
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v245 = v29 + 1;
            char v246 = *(_BYTE *)(v31 + v29);
            *((void *)this + 1) = v245;
            v34 |= (unint64_t)(v246 & 0x7F) << v243;
            if (v246 < 0)
            {
              v243 += 7;
              unint64_t v29 = v245;
              BOOL v14 = v244++ > 8;
              if (v14) {
                goto LABEL_257;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v34) = 0;
            }
          }

          break;
        }

LABEL_455:
        *(_DWORD *)(a1 + 104) = v42;
        goto LABEL_522;
      case 4u:
        *(void *)(a1 + 192) |= 0x20000uLL;
        unint64_t v45 = *((void *)this + 1);
        unint64_t v46 = *((void *)this + 2);
        uint64_t v47 = *(void *)this;
        if (v45 <= 0xFFFFFFFFFFFFFFF5LL && v45 + 10 <= v46)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0LL;
          do
          {
            unint64_t v51 = v45 + 1;
            *((void *)this + 1) = v45 + 1;
            char v52 = *(_BYTE *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0) {
              goto LABEL_458;
            }
            v48 += 7;
            unint64_t v45 = v51;
            BOOL v14 = v49++ > 8;
          }

          while (!v14);
LABEL_271:
          LODWORD(v5sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
          goto LABEL_458;
        }

        char v251 = 0;
        unsigned int v252 = 0;
        uint64_t v50 = 0LL;
        if (v46 <= v45) {
          unint64_t v46 = *((void *)this + 1);
        }
        while (2)
        {
          if (v46 == v45)
          {
            LODWORD(v5sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v253 = v45 + 1;
            char v254 = *(_BYTE *)(v47 + v45);
            *((void *)this + 1) = v253;
            v50 |= (unint64_t)(v254 & 0x7F) << v251;
            if (v254 < 0)
            {
              v251 += 7;
              unint64_t v45 = v253;
              BOOL v14 = v252++ > 8;
              if (v14) {
                goto LABEL_271;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v5sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
            }
          }

          break;
        }

LABEL_458:
        *(_DWORD *)(a1 + 108) = v50;
        goto LABEL_522;
      case 5u:
        *(void *)(a1 + 192) |= 0x800uLL;
        unint64_t v53 = *((void *)this + 1);
        unint64_t v54 = *((void *)this + 2);
        uint64_t v55 = *(void *)this;
        if (v53 <= 0xFFFFFFFFFFFFFFF5LL && v53 + 10 <= v54)
        {
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v58 = 0LL;
          do
          {
            unint64_t v59 = v53 + 1;
            *((void *)this + 1) = v53 + 1;
            char v60 = *(_BYTE *)(v55 + v53);
            v58 |= (unint64_t)(v60 & 0x7F) << v56;
            if ((v60 & 0x80) == 0) {
              goto LABEL_461;
            }
            v56 += 7;
            unint64_t v53 = v59;
            BOOL v14 = v57++ > 8;
          }

          while (!v14);
LABEL_278:
          LODWORD(v58) = 0;
          goto LABEL_461;
        }

        char v255 = 0;
        unsigned int v256 = 0;
        uint64_t v58 = 0LL;
        if (v54 <= v53) {
          unint64_t v54 = *((void *)this + 1);
        }
        while (2)
        {
          if (v54 == v53)
          {
            LODWORD(v58) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v257 = v53 + 1;
            char v258 = *(_BYTE *)(v55 + v53);
            *((void *)this + 1) = v257;
            v58 |= (unint64_t)(v258 & 0x7F) << v255;
            if (v258 < 0)
            {
              v255 += 7;
              unint64_t v53 = v257;
              BOOL v14 = v256++ > 8;
              if (v14) {
                goto LABEL_278;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v58) = 0;
            }
          }

          break;
        }

LABEL_461:
        *(_DWORD *)(a1 + 84) = v58;
        goto LABEL_522;
      case 6u:
        *(void *)(a1 + 192) |= 0x8000000uLL;
        unint64_t v61 = *((void *)this + 1);
        unint64_t v62 = *((void *)this + 2);
        uint64_t v63 = *(void *)this;
        if (v61 <= 0xFFFFFFFFFFFFFFF5LL && v61 + 10 <= v62)
        {
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v66 = 0LL;
          do
          {
            unint64_t v67 = v61 + 1;
            *((void *)this + 1) = v61 + 1;
            char v68 = *(_BYTE *)(v63 + v61);
            v66 |= (unint64_t)(v68 & 0x7F) << v64;
            if ((v68 & 0x80) == 0) {
              goto LABEL_464;
            }
            v64 += 7;
            unint64_t v61 = v67;
            BOOL v14 = v65++ > 8;
          }

          while (!v14);
LABEL_285:
          LODWORD(v66) = 0;
          goto LABEL_464;
        }

        char v259 = 0;
        unsigned int v260 = 0;
        uint64_t v66 = 0LL;
        if (v62 <= v61) {
          unint64_t v62 = *((void *)this + 1);
        }
        while (2)
        {
          if (v62 == v61)
          {
            LODWORD(v66) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v261 = v61 + 1;
            char v262 = *(_BYTE *)(v63 + v61);
            *((void *)this + 1) = v261;
            v66 |= (unint64_t)(v262 & 0x7F) << v259;
            if (v262 < 0)
            {
              v259 += 7;
              unint64_t v61 = v261;
              BOOL v14 = v260++ > 8;
              if (v14) {
                goto LABEL_285;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v66) = 0;
            }
          }

          break;
        }

LABEL_467:
        *(_DWORD *)(a1 + 92) = v74;
        goto LABEL_522;
      case 8u:
        *(void *)(a1 + 192) |= 0x1000uLL;
        unint64_t v77 = *((void *)this + 1);
        unint64_t v78 = *((void *)this + 2);
        uint64_t v79 = *(void *)this;
        if (v77 <= 0xFFFFFFFFFFFFFFF5LL && v77 + 10 <= v78)
        {
          char v80 = 0;
          unsigned int v81 = 0;
          uint64_t v82 = 0LL;
          do
          {
            unint64_t v83 = v77 + 1;
            *((void *)this + 1) = v77 + 1;
            char v84 = *(_BYTE *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0) {
              goto LABEL_470;
            }
            v80 += 7;
            unint64_t v77 = v83;
            BOOL v14 = v81++ > 8;
          }

          while (!v14);
LABEL_299:
          LODWORD(v82) = 0;
          goto LABEL_470;
        }

        char v267 = 0;
        unsigned int v268 = 0;
        uint64_t v82 = 0LL;
        if (v78 <= v77) {
          unint64_t v78 = *((void *)this + 1);
        }
        while (2)
        {
          if (v78 == v77)
          {
            LODWORD(v82) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v269 = v77 + 1;
            char v270 = *(_BYTE *)(v79 + v77);
            *((void *)this + 1) = v269;
            v82 |= (unint64_t)(v270 & 0x7F) << v267;
            if (v270 < 0)
            {
              v267 += 7;
              unint64_t v77 = v269;
              BOOL v14 = v268++ > 8;
              if (v14) {
                goto LABEL_299;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v82) = 0;
            }
          }

          break;
        }

LABEL_470:
        *(_DWORD *)(a1 + 88) = v82;
        goto LABEL_522;
      case 9u:
        *(void *)(a1 + 192) |= 0x1000000uLL;
        unint64_t v85 = *((void *)this + 1);
        unint64_t v86 = *((void *)this + 2);
        uint64_t v87 = *(void *)this;
        if (v85 <= 0xFFFFFFFFFFFFFFF5LL && v85 + 10 <= v86)
        {
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v90 = 0LL;
          do
          {
            unint64_t v91 = v85 + 1;
            *((void *)this + 1) = v85 + 1;
            char v92 = *(_BYTE *)(v87 + v85);
            v90 |= (unint64_t)(v92 & 0x7F) << v88;
            if ((v92 & 0x80) == 0) {
              goto LABEL_473;
            }
            v88 += 7;
            unint64_t v85 = v91;
            BOOL v14 = v89++ > 8;
          }

          while (!v14);
LABEL_306:
          LODWORD(v9sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
          goto LABEL_473;
        }

        char v271 = 0;
        unsigned int v272 = 0;
        uint64_t v90 = 0LL;
        if (v86 <= v85) {
          unint64_t v86 = *((void *)this + 1);
        }
        while (2)
        {
          if (v86 == v85)
          {
            LODWORD(v9sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v273 = v85 + 1;
            char v274 = *(_BYTE *)(v87 + v85);
            *((void *)this + 1) = v273;
            v90 |= (unint64_t)(v274 & 0x7F) << v271;
            if (v274 < 0)
            {
              v271 += 7;
              unint64_t v85 = v273;
              BOOL v14 = v272++ > 8;
              if (v14) {
                goto LABEL_306;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v9sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
            }
          }

          break;
        }

LABEL_473:
        *(_DWORD *)(a1 + 136) = v90;
        goto LABEL_522;
      case 0xAu:
        *(void *)(a1 + 192) |= 8uLL;
        unint64_t v93 = *((void *)this + 1);
        if (v93 > 0xFFFFFFFFFFFFFFF7LL || v93 + 8 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(void *)(*(void *)this + v93);
        goto LABEL_93;
      case 0xBu:
        *(void *)(a1 + 192) |= 1uLL;
        unint64_t v94 = *((void *)this + 1);
        if (v94 > 0xFFFFFFFFFFFFFFF7LL || v94 + 8 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v94);
LABEL_93:
        uint64_t v95 = *((void *)this + 1) + 8LL;
        goto LABEL_421;
      case 0xCu:
        *(void *)(a1 + 192) |= 4uLL;
        unint64_t v96 = *((void *)this + 1);
        unint64_t v97 = *((void *)this + 2);
        uint64_t v98 = *(void *)this;
        if (v96 <= 0xFFFFFFFFFFFFFFF5LL && v96 + 10 <= v97)
        {
          char v99 = 0;
          unsigned int v100 = 0;
          uint64_t v101 = 0LL;
          do
          {
            unint64_t v102 = v96 + 1;
            *((void *)this + 1) = v96 + 1;
            char v103 = *(_BYTE *)(v98 + v96);
            v101 |= (unint64_t)(v103 & 0x7F) << v99;
            if ((v103 & 0x80) == 0) {
              goto LABEL_476;
            }
            v99 += 7;
            unint64_t v96 = v102;
            BOOL v14 = v100++ > 8;
          }

          while (!v14);
LABEL_313:
          uint64_t v101 = 0LL;
          goto LABEL_476;
        }

        char v275 = 0;
        unsigned int v276 = 0;
        uint64_t v101 = 0LL;
        if (v97 <= v96) {
          unint64_t v97 = *((void *)this + 1);
        }
        while (2)
        {
          if (v97 == v96)
          {
            uint64_t v101 = 0LL;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v277 = v96 + 1;
            char v278 = *(_BYTE *)(v98 + v96);
            *((void *)this + 1) = v277;
            v101 |= (unint64_t)(v278 & 0x7F) << v275;
            if (v278 < 0)
            {
              v275 += 7;
              unint64_t v96 = v277;
              BOOL v14 = v276++ > 8;
              if (v14) {
                goto LABEL_313;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              uint64_t v101 = 0LL;
            }
          }

          break;
        }

LABEL_482:
        *(_DWORD *)(a1 + 68) = v117;
        goto LABEL_522;
      case 0xFu:
        *(void *)(a1 + 192) |= 0x20000000uLL;
        unint64_t v120 = *((void *)this + 1);
        if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v120);
        goto LABEL_420;
      case 0x10u:
        *(void *)(a1 + 192) |= 0x4000000uLL;
        unint64_t v121 = *((void *)this + 1);
        unint64_t v122 = *((void *)this + 2);
        uint64_t v123 = *(void *)this;
        if (v121 <= 0xFFFFFFFFFFFFFFF5LL && v121 + 10 <= v122)
        {
          char v124 = 0;
          unsigned int v125 = 0;
          uint64_t v126 = 0LL;
          do
          {
            unint64_t v127 = v121 + 1;
            *((void *)this + 1) = v121 + 1;
            char v128 = *(_BYTE *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0) {
              goto LABEL_485;
            }
            v124 += 7;
            unint64_t v121 = v127;
            BOOL v14 = v125++ > 8;
          }

          while (!v14);
LABEL_334:
          LODWORD(v126) = 0;
          goto LABEL_485;
        }

        char v287 = 0;
        unsigned int v288 = 0;
        uint64_t v126 = 0LL;
        if (v122 <= v121) {
          unint64_t v122 = *((void *)this + 1);
        }
        while (2)
        {
          if (v122 == v121)
          {
            LODWORD(v126) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v289 = v121 + 1;
            char v290 = *(_BYTE *)(v123 + v121);
            *((void *)this + 1) = v289;
            v126 |= (unint64_t)(v290 & 0x7F) << v287;
            if (v290 < 0)
            {
              v287 += 7;
              unint64_t v121 = v289;
              BOOL v14 = v288++ > 8;
              if (v14) {
                goto LABEL_334;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v126) = 0;
            }
          }

          break;
        }

LABEL_485:
        *(_DWORD *)(a1 + 144) = v126;
        goto LABEL_522;
      case 0x11u:
        *(void *)(a1 + 192) |= 0x4000uLL;
        unint64_t v129 = *((void *)this + 1);
        if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v129);
        goto LABEL_420;
      case 0x12u:
        *(void *)(a1 + 192) |= 0x400000uLL;
        unint64_t v130 = *((void *)this + 1);
        if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v130);
        goto LABEL_420;
      case 0x13u:
        *(void *)(a1 + 192) |= 0x200000uLL;
        unint64_t v131 = *((void *)this + 1);
        if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v131);
        goto LABEL_420;
      case 0x14u:
        *(void *)(a1 + 192) |= 0x800000uLL;
        unint64_t v132 = *((void *)this + 1);
        if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v132);
        goto LABEL_420;
      case 0x15u:
        *(void *)(a1 + 192) |= 0x10uLL;
        unint64_t v133 = *((void *)this + 1);
        unint64_t v134 = *((void *)this + 2);
        uint64_t v135 = *(void *)this;
        if (v133 <= 0xFFFFFFFFFFFFFFF5LL && v133 + 10 <= v134)
        {
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v138 = 0LL;
          do
          {
            unint64_t v139 = v133 + 1;
            *((void *)this + 1) = v133 + 1;
            char v140 = *(_BYTE *)(v135 + v133);
            v138 |= (unint64_t)(v140 & 0x7F) << v136;
            if ((v140 & 0x80) == 0) {
              goto LABEL_488;
            }
            v136 += 7;
            unint64_t v133 = v139;
            BOOL v14 = v137++ > 8;
          }

          while (!v14);
LABEL_341:
          uint64_t v138 = 0LL;
          goto LABEL_488;
        }

        char v291 = 0;
        unsigned int v292 = 0;
        uint64_t v138 = 0LL;
        if (v134 <= v133) {
          unint64_t v134 = *((void *)this + 1);
        }
        while (2)
        {
          if (v134 == v133)
          {
            uint64_t v138 = 0LL;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v293 = v133 + 1;
            char v294 = *(_BYTE *)(v135 + v133);
            *((void *)this + 1) = v293;
            v138 |= (unint64_t)(v294 & 0x7F) << v291;
            if (v294 < 0)
            {
              v291 += 7;
              unint64_t v133 = v293;
              BOOL v14 = v292++ > 8;
              if (v14) {
                goto LABEL_341;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              uint64_t v138 = 0LL;
            }
          }

          break;
        }

LABEL_488:
        *(void *)(a1 + 48) = v138;
        goto LABEL_522;
      case 0x16u:
        *(void *)(a1 + 192) |= 0x800000000uLL;
        unint64_t v141 = *((void *)this + 1);
        unint64_t v142 = *((void *)this + 2);
        uint64_t v143 = *(void *)this;
        if (v141 <= 0xFFFFFFFFFFFFFFF5LL && v141 + 10 <= v142)
        {
          char v144 = 0;
          unsigned int v145 = 0;
          uint64_t v146 = 0LL;
          do
          {
            unint64_t v147 = v141 + 1;
            *((void *)this + 1) = v141 + 1;
            char v148 = *(_BYTE *)(v143 + v141);
            v146 |= (unint64_t)(v148 & 0x7F) << v144;
            if ((v148 & 0x80) == 0) {
              goto LABEL_491;
            }
            v144 += 7;
            unint64_t v141 = v147;
            BOOL v14 = v145++ > 8;
          }

          while (!v14);
LABEL_348:
          LODWORD(v146) = 0;
          goto LABEL_491;
        }

        char v295 = 0;
        unsigned int v296 = 0;
        uint64_t v146 = 0LL;
        if (v142 <= v141) {
          unint64_t v142 = *((void *)this + 1);
        }
        while (2)
        {
          if (v142 == v141)
          {
            LODWORD(v146) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v297 = v141 + 1;
            char v298 = *(_BYTE *)(v143 + v141);
            *((void *)this + 1) = v297;
            v146 |= (unint64_t)(v298 & 0x7F) << v295;
            if (v298 < 0)
            {
              v295 += 7;
              unint64_t v141 = v297;
              BOOL v14 = v296++ > 8;
              if (v14) {
                goto LABEL_348;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v146) = 0;
            }
          }

          break;
        }

LABEL_491:
        *(_DWORD *)(a1 + 18sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v146;
        goto LABEL_522;
      case 0x17u:
        *(void *)(a1 + 192) |= 0x40000000uLL;
        unint64_t v149 = *((void *)this + 1);
        unint64_t v150 = *((void *)this + 2);
        uint64_t v151 = *(void *)this;
        if (v149 <= 0xFFFFFFFFFFFFFFF5LL && v149 + 10 <= v150)
        {
          char v152 = 0;
          unsigned int v153 = 0;
          uint64_t v154 = 0LL;
          do
          {
            unint64_t v155 = v149 + 1;
            *((void *)this + 1) = v149 + 1;
            char v156 = *(_BYTE *)(v151 + v149);
            v154 |= (unint64_t)(v156 & 0x7F) << v152;
            if ((v156 & 0x80) == 0) {
              goto LABEL_494;
            }
            v152 += 7;
            unint64_t v149 = v155;
            BOOL v14 = v153++ > 8;
          }

          while (!v14);
LABEL_355:
          LODWORD(v154) = 0;
          goto LABEL_494;
        }

        char v299 = 0;
        unsigned int v300 = 0;
        uint64_t v154 = 0LL;
        if (v150 <= v149) {
          unint64_t v150 = *((void *)this + 1);
        }
        while (2)
        {
          if (v150 == v149)
          {
            LODWORD(v154) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v301 = v149 + 1;
            char v302 = *(_BYTE *)(v151 + v149);
            *((void *)this + 1) = v301;
            v154 |= (unint64_t)(v302 & 0x7F) << v299;
            if (v302 < 0)
            {
              v299 += 7;
              unint64_t v149 = v301;
              BOOL v14 = v300++ > 8;
              if (v14) {
                goto LABEL_355;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v154) = 0;
            }
          }

          break;
        }

LABEL_494:
        *(_DWORD *)(a1 + 16sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v154;
        goto LABEL_522;
      case 0x18u:
        *(void *)(a1 + 192) |= 0x100000uLL;
        unint64_t v157 = *((void *)this + 1);
        unint64_t v158 = *((void *)this + 2);
        uint64_t v159 = *(void *)this;
        if (v157 <= 0xFFFFFFFFFFFFFFF5LL && v157 + 10 <= v158)
        {
          char v160 = 0;
          unsigned int v161 = 0;
          uint64_t v162 = 0LL;
          do
          {
            unint64_t v163 = v157 + 1;
            *((void *)this + 1) = v157 + 1;
            char v164 = *(_BYTE *)(v159 + v157);
            v162 |= (unint64_t)(v164 & 0x7F) << v160;
            if ((v164 & 0x80) == 0) {
              goto LABEL_497;
            }
            v160 += 7;
            unint64_t v157 = v163;
            BOOL v14 = v161++ > 8;
          }

          while (!v14);
LABEL_362:
          LODWORD(v162) = 0;
          goto LABEL_497;
        }

        char v303 = 0;
        unsigned int v304 = 0;
        uint64_t v162 = 0LL;
        if (v158 <= v157) {
          unint64_t v158 = *((void *)this + 1);
        }
        while (2)
        {
          if (v158 == v157)
          {
            LODWORD(v162) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v305 = v157 + 1;
            char v306 = *(_BYTE *)(v159 + v157);
            *((void *)this + 1) = v305;
            v162 |= (unint64_t)(v306 & 0x7F) << v303;
            if (v306 < 0)
            {
              v303 += 7;
              unint64_t v157 = v305;
              BOOL v14 = v304++ > 8;
              if (v14) {
                goto LABEL_362;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v162) = 0;
            }
          }

          break;
        }

LABEL_497:
        *(_DWORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v162;
        goto LABEL_522;
      case 0x19u:
        *(void *)(a1 + 192) |= 0x80000uLL;
        unint64_t v165 = *((void *)this + 1);
        unint64_t v166 = *((void *)this + 2);
        uint64_t v167 = *(void *)this;
        if (v165 <= 0xFFFFFFFFFFFFFFF5LL && v165 + 10 <= v166)
        {
          char v168 = 0;
          unsigned int v169 = 0;
          uint64_t v170 = 0LL;
          do
          {
            unint64_t v171 = v165 + 1;
            *((void *)this + 1) = v165 + 1;
            char v172 = *(_BYTE *)(v167 + v165);
            v170 |= (unint64_t)(v172 & 0x7F) << v168;
            if ((v172 & 0x80) == 0) {
              goto LABEL_500;
            }
            v168 += 7;
            unint64_t v165 = v171;
            BOOL v14 = v169++ > 8;
          }

          while (!v14);
LABEL_369:
          LODWORD(v17sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
          goto LABEL_500;
        }

        char v307 = 0;
        unsigned int v308 = 0;
        uint64_t v170 = 0LL;
        if (v166 <= v165) {
          unint64_t v166 = *((void *)this + 1);
        }
        while (2)
        {
          if (v166 == v165)
          {
            LODWORD(v17sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v309 = v165 + 1;
            char v310 = *(_BYTE *)(v167 + v165);
            *((void *)this + 1) = v309;
            v170 |= (unint64_t)(v310 & 0x7F) << v307;
            if (v310 < 0)
            {
              v307 += 7;
              unint64_t v165 = v309;
              BOOL v14 = v308++ > 8;
              if (v14) {
                goto LABEL_369;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v17sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
            }
          }

          break;
        }

LABEL_500:
        *(_DWORD *)(a1 + 116) = v170;
        goto LABEL_522;
      case 0x1Au:
        *(void *)(a1 + 192) |= 0x40000uLL;
        unint64_t v173 = *((void *)this + 1);
        unint64_t v174 = *((void *)this + 2);
        uint64_t v175 = *(void *)this;
        if (v173 <= 0xFFFFFFFFFFFFFFF5LL && v173 + 10 <= v174)
        {
          char v176 = 0;
          unsigned int v177 = 0;
          uint64_t v178 = 0LL;
          do
          {
            unint64_t v179 = v173 + 1;
            *((void *)this + 1) = v173 + 1;
            char v180 = *(_BYTE *)(v175 + v173);
            v178 |= (unint64_t)(v180 & 0x7F) << v176;
            if ((v180 & 0x80) == 0) {
              goto LABEL_503;
            }
            v176 += 7;
            unint64_t v173 = v179;
            BOOL v14 = v177++ > 8;
          }

          while (!v14);
LABEL_376:
          LODWORD(v178) = 0;
          goto LABEL_503;
        }

        char v311 = 0;
        unsigned int v312 = 0;
        uint64_t v178 = 0LL;
        if (v174 <= v173) {
          unint64_t v174 = *((void *)this + 1);
        }
        while (2)
        {
          if (v174 == v173)
          {
            LODWORD(v178) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v313 = v173 + 1;
            char v314 = *(_BYTE *)(v175 + v173);
            *((void *)this + 1) = v313;
            v178 |= (unint64_t)(v314 & 0x7F) << v311;
            if (v314 < 0)
            {
              v311 += 7;
              unint64_t v173 = v313;
              BOOL v14 = v312++ > 8;
              if (v14) {
                goto LABEL_376;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v178) = 0;
            }
          }

          break;
        }

LABEL_503:
        *(_DWORD *)(a1 + 112) = v178;
        goto LABEL_522;
      case 0x1Bu:
        char v181 = operator new(0x18uLL);
        sub_10115BB88((uint64_t)v181);
        uint64_t v184 = *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v181;
        if (v184)
        {
          (*(void (**)(uint64_t))(*(void *)v184 + 8LL))(v184);
          char v181 = *(void **)(a1 + 32);
        }

        if (PB::Reader::placeMark(this, v340, v182, v183)
          && ((*(uint64_t (**)(void *, PB::Reader *))(*(void *)v181 + 16LL))(v181, this) & 1) != 0)
        {
          PB::Reader::recallMark(this, v340);
LABEL_522:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          continue;
        }

        return 0LL;
      case 0x1Cu:
        *(void *)(a1 + 192) |= 0x400uLL;
        unint64_t v185 = *((void *)this + 1);
        if (v185 > 0xFFFFFFFFFFFFFFFBLL || v185 + 4 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(_DWORD *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(_DWORD *)(*(void *)this + v185);
        goto LABEL_420;
      case 0x1Du:
        *(void *)(a1 + 192) |= 0x200uLL;
        unint64_t v186 = *((void *)this + 1);
        if (v186 > 0xFFFFFFFFFFFFFFFBLL || v186 + 4 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v186);
        goto LABEL_420;
      case 0x1Eu:
        *(void *)(a1 + 192) |= 0x2000000uLL;
        unint64_t v187 = *((void *)this + 1);
        if (v187 > 0xFFFFFFFFFFFFFFFBLL || v187 + 4 > *((void *)this + 2)) {
          goto LABEL_236;
        }
        *(_DWORD *)(a1 + 14sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(_DWORD *)(*(void *)this + v187);
        goto LABEL_420;
      case 0x1Fu:
        *(void *)(a1 + 192) |= 0x1000000000uLL;
        unint64_t v188 = *((void *)this + 1);
        unint64_t v189 = *((void *)this + 2);
        uint64_t v190 = *(void *)this;
        if (v188 <= 0xFFFFFFFFFFFFFFF5LL && v188 + 10 <= v189)
        {
          char v191 = 0;
          unsigned int v192 = 0;
          uint64_t v193 = 0LL;
          do
          {
            unint64_t v194 = v188 + 1;
            *((void *)this + 1) = v188 + 1;
            char v195 = *(_BYTE *)(v190 + v188);
            v193 |= (unint64_t)(v195 & 0x7F) << v191;
            if ((v195 & 0x80) == 0) {
              goto LABEL_506;
            }
            v191 += 7;
            unint64_t v188 = v194;
            BOOL v14 = v192++ > 8;
          }

          while (!v14);
LABEL_383:
          LODWORD(v193) = 0;
          goto LABEL_506;
        }

        char v315 = 0;
        unsigned int v316 = 0;
        uint64_t v193 = 0LL;
        if (v189 <= v188) {
          unint64_t v189 = *((void *)this + 1);
        }
        while (2)
        {
          if (v189 == v188)
          {
            LODWORD(v193) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v317 = v188 + 1;
            char v318 = *(_BYTE *)(v190 + v188);
            *((void *)this + 1) = v317;
            v193 |= (unint64_t)(v318 & 0x7F) << v315;
            if (v318 < 0)
            {
              v315 += 7;
              unint64_t v188 = v317;
              BOOL v14 = v316++ > 8;
              if (v14) {
                goto LABEL_383;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v193) = 0;
            }
          }

          break;
        }

LABEL_506:
        *(_DWORD *)(a1 + 184) = v193;
        goto LABEL_522;
      case 0x20u:
        *(void *)(a1 + 192) |= 0x20uLL;
        unint64_t v196 = *((void *)this + 1);
        unint64_t v197 = *((void *)this + 2);
        uint64_t v198 = *(void *)this;
        if (v196 <= 0xFFFFFFFFFFFFFFF5LL && v196 + 10 <= v197)
        {
          char v199 = 0;
          unsigned int v200 = 0;
          uint64_t v201 = 0LL;
          do
          {
            unint64_t v202 = v196 + 1;
            *((void *)this + 1) = v196 + 1;
            char v203 = *(_BYTE *)(v198 + v196);
            v201 |= (unint64_t)(v203 & 0x7F) << v199;
            if ((v203 & 0x80) == 0) {
              goto LABEL_509;
            }
            v199 += 7;
            unint64_t v196 = v202;
            BOOL v14 = v200++ > 8;
          }

          while (!v14);
LABEL_390:
          uint64_t v201 = 0LL;
          goto LABEL_509;
        }

        char v319 = 0;
        unsigned int v320 = 0;
        uint64_t v201 = 0LL;
        if (v197 <= v196) {
          unint64_t v197 = *((void *)this + 1);
        }
        while (2)
        {
          if (v197 == v196)
          {
            uint64_t v201 = 0LL;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v321 = v196 + 1;
            char v322 = *(_BYTE *)(v198 + v196);
            *((void *)this + 1) = v321;
            v201 |= (unint64_t)(v322 & 0x7F) << v319;
            if (v322 < 0)
            {
              v319 += 7;
              unint64_t v196 = v321;
              BOOL v14 = v320++ > 8;
              if (v14) {
                goto LABEL_390;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              uint64_t v201 = 0LL;
            }
          }

          break;
        }

LABEL_509:
        *(void *)(a1 + 56) = v201;
        goto LABEL_522;
      case 0x21u:
        *(void *)(a1 + 192) |= 0x10000000uLL;
        unint64_t v204 = *((void *)this + 1);
        unint64_t v205 = *((void *)this + 2);
        uint64_t v206 = *(void *)this;
        if (v204 <= 0xFFFFFFFFFFFFFFF5LL && v204 + 10 <= v205)
        {
          char v207 = 0;
          unsigned int v208 = 0;
          uint64_t v209 = 0LL;
          do
          {
            unint64_t v210 = v204 + 1;
            *((void *)this + 1) = v204 + 1;
            char v211 = *(_BYTE *)(v206 + v204);
            v209 |= (unint64_t)(v211 & 0x7F) << v207;
            if ((v211 & 0x80) == 0) {
              goto LABEL_512;
            }
            v207 += 7;
            unint64_t v204 = v210;
            BOOL v14 = v208++ > 8;
          }

          while (!v14);
LABEL_397:
          LODWORD(v209) = 0;
          goto LABEL_512;
        }

        char v323 = 0;
        unsigned int v324 = 0;
        uint64_t v209 = 0LL;
        if (v205 <= v204) {
          unint64_t v205 = *((void *)this + 1);
        }
        while (2)
        {
          if (v205 == v204)
          {
            LODWORD(v209) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v325 = v204 + 1;
            char v326 = *(_BYTE *)(v206 + v204);
            *((void *)this + 1) = v325;
            v209 |= (unint64_t)(v326 & 0x7F) << v323;
            if (v326 < 0)
            {
              v323 += 7;
              unint64_t v204 = v325;
              BOOL v14 = v324++ > 8;
              if (v14) {
                goto LABEL_397;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v209) = 0;
            }
          }

          break;
        }

LABEL_512:
        *(_DWORD *)(a1 + 152) = v209;
        goto LABEL_522;
      case 0x22u:
        *(void *)(a1 + 192) |= 0x2000000000uLL;
        unint64_t v212 = *((void *)this + 1);
        unint64_t v213 = *((void *)this + 2);
        uint64_t v214 = *(void *)this;
        if (v212 <= 0xFFFFFFFFFFFFFFF5LL && v212 + 10 <= v213)
        {
          char v215 = 0;
          unsigned int v216 = 0;
          uint64_t v217 = 0LL;
          do
          {
            unint64_t v218 = v212 + 1;
            *((void *)this + 1) = v212 + 1;
            char v219 = *(_BYTE *)(v214 + v212);
            v217 |= (unint64_t)(v219 & 0x7F) << v215;
            if ((v219 & 0x80) == 0) {
              goto LABEL_515;
            }
            v215 += 7;
            unint64_t v212 = v218;
            BOOL v14 = v216++ > 8;
          }

          while (!v14);
LABEL_404:
          LODWORD(v217) = 0;
          goto LABEL_515;
        }

        char v327 = 0;
        unsigned int v328 = 0;
        uint64_t v217 = 0LL;
        if (v213 <= v212) {
          unint64_t v213 = *((void *)this + 1);
        }
        while (2)
        {
          if (v213 == v212)
          {
            LODWORD(v217) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v329 = v212 + 1;
            char v330 = *(_BYTE *)(v214 + v212);
            *((void *)this + 1) = v329;
            v217 |= (unint64_t)(v330 & 0x7F) << v327;
            if (v330 < 0)
            {
              v327 += 7;
              unint64_t v212 = v329;
              BOOL v14 = v328++ > 8;
              if (v14) {
                goto LABEL_404;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v217) = 0;
            }
          }

          break;
        }

LABEL_515:
        *(_DWORD *)(a1 + 188) = v217;
        goto LABEL_522;
      case 0x23u:
        *(void *)(a1 + 192) |= 0x40uLL;
        unint64_t v220 = *((void *)this + 1);
        unint64_t v221 = *((void *)this + 2);
        uint64_t v222 = *(void *)this;
        if (v220 <= 0xFFFFFFFFFFFFFFF5LL && v220 + 10 <= v221)
        {
          char v223 = 0;
          unsigned int v224 = 0;
          uint64_t v225 = 0LL;
          do
          {
            unint64_t v226 = v220 + 1;
            *((void *)this + 1) = v220 + 1;
            char v227 = *(_BYTE *)(v222 + v220);
            v225 |= (unint64_t)(v227 & 0x7F) << v223;
            if ((v227 & 0x80) == 0) {
              goto LABEL_518;
            }
            v223 += 7;
            unint64_t v220 = v226;
            BOOL v14 = v224++ > 8;
          }

          while (!v14);
LABEL_411:
          LODWORD(v225) = 0;
          goto LABEL_518;
        }

        char v331 = 0;
        unsigned int v332 = 0;
        uint64_t v225 = 0LL;
        if (v221 <= v220) {
          unint64_t v221 = *((void *)this + 1);
        }
        while (2)
        {
          if (v221 == v220)
          {
            LODWORD(v225) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            unint64_t v333 = v220 + 1;
            char v334 = *(_BYTE *)(v222 + v220);
            *((void *)this + 1) = v333;
            v225 |= (unint64_t)(v334 & 0x7F) << v331;
            if (v334 < 0)
            {
              v331 += 7;
              unint64_t v220 = v333;
              BOOL v14 = v332++ > 8;
              if (v14) {
                goto LABEL_411;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v225) = 0;
            }
          }

          break;
        }

uint64_t sub_101183A18(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 192);
  if ((v4 & 0x8000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 100), 1u);
    uint64_t v4 = *(void *)(v3 + 192);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }

  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 2u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }

void *sub_101183E78(void *result)
{
  if (!result[4])
  {
    os_log_t v1 = result;
    unint64_t v2 = operator new(0x18uLL);
    sub_10115BB88((uint64_t)v2);
    uint64_t result = (void *)v1[4];
    v1[4] = v2;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

uint64_t sub_101183ECC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FB98;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_101183EE4(PB::Base *a1)
{
}

uint64_t sub_101183EF8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189FB98;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    char v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }

  return result;
}

uint64_t sub_101183F24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "isWifiAssociated", *(_BYTE *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101183F70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011840FC(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(result + 8), 1u);
  }
  return result;
}

void *sub_10118411C(void *result)
{
  *uint64_t result = off_10189FBD0;
  result[1] = 0LL;
  return result;
}

void sub_10118412C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189FBD0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10118416C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_10189FBD0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1011841B0(void *a1, uint64_t a2)
{
  *a1 = off_10189FBD0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0xB8uLL);
    uint64_t v5 = sub_10117CD48((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_101184218(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101184268(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101184430(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_10118444C(void *result)
{
  if (!result[1])
  {
    os_log_t v1 = result;
    uint64_t result = operator new(0xB8uLL);
    *uint64_t result = off_10189FA48;
    result[14] = 0LL;
    *((_DWORD *)result + 45) = 0;
    v1[1] = result;
  }

  return result;
}

uint64_t sub_101184490(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FC08;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1011844A8(PB::Base *a1)
{
}

float sub_1011844BC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FC08;
  *(_DWORD *)(a1 + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    float result = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 12) = 1;
    *(float *)(a1 + 8) = result;
  }

  return result;
}

uint64_t sub_1011844E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "walkingVariable01", *(float *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101184534(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011846CC(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::write(this, *(float *)(result + 8), 1u);
  }
  return result;
}

double sub_1011846E8(uint64_t a1)
{
  *(void *)a1 = &off_10189FC40;
  *(_DWORD *)(a1 + 76) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  return result;
}

void sub_10118470C(PB::Base *this)
{
  *(void *)this = &off_10189FC40;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_10118475C(PB::Base *a1)
{
}

uint64_t sub_101184770(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FC40;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  char v5 = *(_BYTE *)(a2 + 76);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 64);
    char v6 = 2;
    *(_BYTE *)(a1 + 76) = 2;
    *(void *)(a1 + 64) = v7;
    char v5 = *(_BYTE *)(a2 + 76);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v6 = 0;
  if ((*(_BYTE *)(a2 + 76) & 1) != 0)
  {
LABEL_5:
    uint64_t v8 = *(void *)(a2 + 56);
    v6 |= 1u;
    *(_BYTE *)(a1 + 76) = v6;
    *(void *)(a1 + 56) = v8;
    char v5 = *(_BYTE *)(a2 + 76);
  }

uint64_t sub_10118484C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(float **)(a1 + 8);
  char v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "accel", v7);
  }

  if ((*(_BYTE *)(a1 + 76) & 1) != 0) {
    PB::TextFormatter::format(this, "adjustedTimestamp", *(double *)(a1 + 56));
  }
  uint64_t v8 = *(float **)(a1 + 32);
  int v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "gravity", v10);
  }

  char v11 = *(_BYTE *)(a1 + 76);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(this, "rawProjectedSignal", *(float *)(a1 + 72));
    char v11 = *(_BYTE *)(a1 + 76);
  }

  if ((v11 & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 64));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101184938(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    unint64_t v12 = (void **)(a1 + 32);
    uint64_t v13 = a1 + 48;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_101184FE0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 76);
  if ((v4 & 2) == 0)
  {
    if ((*(_BYTE *)(result + 76) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_13:
    double result = PB::Writer::write(this, *(double *)(v3 + 56), 2u);
    if ((*(_BYTE *)(v3 + 76) & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  double result = PB::Writer::writeVarInt(this, *(void *)(result + 64), 1u);
  char v4 = *(_BYTE *)(v3 + 76);
  if ((v4 & 1) != 0) {
    goto LABEL_13;
  }
LABEL_3:
  if ((v4 & 4) != 0) {
LABEL_4:
  }
    double result = PB::Writer::write(this, *(float *)(v3 + 72), 3u);
LABEL_5:
  unint64_t v5 = *(float **)(v3 + 32);
  int v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7, 4u);
  }

  int v9 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    float v10 = *v9++;
    double result = PB::Writer::write(this, v10, 5u);
  }

  return result;
}

uint64_t sub_10118509C(uint64_t result)
{
  *(void *)double result = &off_10189FC78;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_1011850B4(PB::Base *a1)
{
}

float sub_1011850C8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FC78;
  *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(_DWORD *)(a1 + 24) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_1011851A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "horizontalRotationRateFiltered", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_1011852B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011855C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_1011856AC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FCB0;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_1011856C4(PB::Base *a1)
{
}

uint64_t sub_1011856D8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189FCB0;
  *(_DWORD *)(result + 68) = 0;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 40);
    __int16 v3 = 16;
    *(_WORD *)(result + 68) = 16;
    *(void *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v4;
    __int16 v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 48) = v5;
    __int16 v2 = *(_WORD *)(a2 + 68);
  }

uint64_t sub_101185828(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 48));
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "duration", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_1011859B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101186084(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

double sub_1011861DC(uint64_t a1)
{
  *(void *)a1 = &off_10189FCE8;
  *(_DWORD *)(a1 + 18sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0LL;
  return result;
}

void sub_101186220(PB::Base *this)
{
  *(void *)this = &off_10189FCE8;
  unint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }

  __int16 v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }

  __int16 v5 = (void *)*((void *)this + 10);
  if (v5)
  {
    *((void *)this + 11) = v5;
    operator delete(v5);
  }

  char v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    *((void *)this + 8) = v6;
    operator delete(v6);
  }

  uint64_t v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }

  uint64_t v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }

  PB::Base::~Base(this);
}

void sub_1011862C0(PB::Base *a1)
{
}

uint64_t sub_1011862D4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FCE8;
  *(_OWORD *)(a1 + 8) = 0u;
  __int16 v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  __int16 v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  char v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v7 = (char *)(a1 + 152);
  *(_DWORD *)(a1 + 18sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 168) = 0LL;
  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 128),  *(char **)(a2 + 128),  *(void *)(a2 + 136),  (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
    sub_10004C5F8( v6,  *(char **)(a2 + 104),  *(void *)(a2 + 112),  (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
    sub_10004C5F8( v7,  *(char **)(a2 + 152),  *(void *)(a2 + 160),  (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  }

  if ((*(_BYTE *)(a2 + 180) & 1) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 180) |= 1u;
    *(_DWORD *)(a1 + 176) = v8;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( (char *)(a1 + 80),  *(char **)(a2 + 80),  *(void *)(a2 + 88),  (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_10004C5F8( v5,  *(char **)(a2 + 56),  *(void *)(a2 + 64),  (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  }

  return a1;
}

uint64_t sub_101186418(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(unsigned int **)(a1 + 80);
  char v6 = *(unsigned int **)(a1 + 88);
  while (v5 != v6)
  {
    unsigned int v7 = *v5++;
    PB::TextFormatter::format(this, "error", v7);
  }

  int v8 = *(unsigned int **)(a1 + 8);
  char v9 = *(unsigned int **)(a1 + 16);
  while (v8 != v9)
  {
    unsigned int v10 = *v8++;
    PB::TextFormatter::format(this, "errorX", v10);
  }

  unint64_t v11 = *(unsigned int **)(a1 + 32);
  unint64_t v12 = *(unsigned int **)(a1 + 40);
  while (v11 != v12)
  {
    unsigned int v13 = *v11++;
    PB::TextFormatter::format(this, "errorY", v13);
  }

  BOOL v14 = *(unsigned int **)(a1 + 56);
  char v15 = *(unsigned int **)(a1 + 64);
  while (v14 != v15)
  {
    unsigned int v16 = *v14++;
    PB::TextFormatter::format(this, "errorZ", v16);
  }

  unint64_t v17 = *(float **)(a1 + 104);
  char v18 = *(float **)(a1 + 112);
  while (v17 != v18)
  {
    float v19 = *v17++;
    PB::TextFormatter::format(this, "intercept", v19);
  }

  if ((*(_BYTE *)(a1 + 180) & 1) != 0) {
    PB::TextFormatter::format(this, "overlap", *(float *)(a1 + 176));
  }
  BOOL v20 = *(float **)(a1 + 128);
  unint64_t v21 = *(float **)(a1 + 136);
  while (v20 != v21)
  {
    float v22 = *v20++;
    PB::TextFormatter::format(this, "slope", v22);
  }

  char v23 = *(float **)(a1 + 152);
  unsigned int v24 = *(float **)(a1 + 160);
  while (v23 != v24)
  {
    float v25 = *v23++;
    PB::TextFormatter::format(this, "temperature", v25);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1011865A8(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void *)(a1 + 72);
    char v279 = (void **)(a1 + 32);
    unsigned int v280 = (void **)(a1 + 56);
    unint64_t v11 = (void *)(a1 + 48);
    char v278 = (void **)(a1 + 8);
    unint64_t v12 = (void *)(a1 + 24);
    unsigned int v13 = (void *)(a1 + 96);
    char v287 = (void **)(a1 + 152);
    uint64_t v284 = a1 + 168;
    char v286 = (void **)(a1 + 104);
    uint64_t v283 = a1 + 120;
    unint64_t v285 = (void **)(a1 + 128);
    unint64_t v281 = (void **)(a1 + 80);
    uint64_t v282 = a1 + 144;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v82 = v16++ > 8;
        if (v82) {
          goto LABEL_20;
        }
      }

LABEL_463:
              LODWORD(v237) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v237 = 0LL;
              while (1)
              {
                unint64_t v274 = v266 + 1;
                *((void *)this + 1) = v266 + 1;
                char v275 = *(_BYTE *)(v268 + v266);
                v237 |= (unint64_t)(v275 & 0x7F) << v269;
                if ((v275 & 0x80) == 0) {
                  break;
                }
                v269 += 7;
                unint64_t v266 = v274;
                BOOL v82 = v270++ > 8;
                if (v82) {
                  goto LABEL_470;
                }
              }
            }

uint64_t sub_101187968(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(float **)(result + 128);
  unint64_t v5 = *(float **)(result + 136);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 1u);
  }

  unsigned int v7 = *(float **)(v3 + 104);
  int v8 = *(float **)(v3 + 112);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 2u);
  }

  unsigned int v10 = *(float **)(v3 + 152);
  unint64_t v11 = *(float **)(v3 + 160);
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12, 3u);
  }

  if ((*(_BYTE *)(v3 + 180) & 1) != 0) {
    double result = PB::Writer::write(this, *(float *)(v3 + 176), 4u);
  }
  unsigned int v13 = *(unsigned int **)(v3 + 80);
  uint64_t v14 = *(unsigned int **)(v3 + 88);
  while (v13 != v14)
  {
    unsigned int v15 = *v13++;
    double result = PB::Writer::writeVarInt(this, v15, 5u);
  }

  unsigned int v16 = *(unsigned int **)(v3 + 8);
  unint64_t v17 = *(unsigned int **)(v3 + 16);
  while (v16 != v17)
  {
    unsigned int v18 = *v16++;
    double result = PB::Writer::writeVarInt(this, v18, 6u);
  }

  char v19 = *(unsigned int **)(v3 + 32);
  char v20 = *(unsigned int **)(v3 + 40);
  while (v19 != v20)
  {
    unsigned int v21 = *v19++;
    double result = PB::Writer::writeVarInt(this, v21, 7u);
  }

  char v23 = *(unsigned int **)(v3 + 56);
  unint64_t v22 = *(unsigned int **)(v3 + 64);
  while (v23 != v22)
  {
    unsigned int v24 = *v23++;
    double result = PB::Writer::writeVarInt(this, v24, 8u);
  }

  return result;
}

uint64_t sub_101187A88(uint64_t result)
{
  *(void *)double result = &off_10189FD20;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101187AA0(PB::Base *this)
{
  *(void *)this = &off_10189FD20;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_101187AE0(PB::Base *a1)
{
}

uint64_t sub_101187AF4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FD20;
  *(void *)(a1 + 8) = 0LL;
  uint64_t v3 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(a1 + 32) = v4;
  }

  if (a1 != a2) {
    sub_1000F9040( v3,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  return a1;
}

uint64_t sub_101187B68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  unint64_t v5 = *(double **)(a1 + 8);
  float v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "pose", v7);
  }

  if ((*(_BYTE *)(a1 + 40) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101187BF0(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    do
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v21 = v4 + 1;
          char v22 = *(_BYTE *)(v12 + v4);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v4 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101187FA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 40) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 32), 1u);
  }
  unint64_t v5 = *(double **)(v3 + 8);
  unint64_t v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    double v6 = *v5++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  return result;
}

uint64_t sub_101188000(uint64_t result)
{
  *(void *)double result = &off_10189FD58;
  *(_DWORD *)(result + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101188018(PB::Base *a1)
{
}

uint64_t sub_10118802C(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_10189FD58;
  *(_DWORD *)(result + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  __int16 v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 64);
    __int16 v3 = 128;
    *(_WORD *)(result + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 128;
    *(void *)(result + 64) = v4;
    __int16 v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(void *)(result + 16) = v5;
    __int16 v2 = *(_WORD *)(a2 + 100);
  }

uint64_t sub_1011881D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 100);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((*(_WORD *)(a1 + 100) & 0x200) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "batchedLocationFixType", *(_DWORD *)(a1 + 80));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }

uint64_t sub_1011883C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101188B28(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 100);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_101188CD4(uint64_t result)
{
  *(void *)uint64_t result = off_10189FD90;
  *(void *)(result + 72) = 0LL;
  *(_DWORD *)(result + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101188CEC(PB::Base *this)
{
  *(void *)this = off_10189FD90;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101188D30(PB::Base *this)
{
  *(void *)this = off_10189FD90;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_101188D78(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10189FD90;
  *(void *)(a1 + 72) = 0LL;
  *(_DWORD *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  uint64_t v4 = *(void *)(a2 + 72);
  if (v4)
  {
    __int16 v5 = operator new(0x68uLL);
    *(void *)(a1 + 72) = sub_10118802C((uint64_t)v5, v4);
  }

  char v6 = *(_BYTE *)(a2 + 80);
  if ((v6 & 4) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    char v7 = 4;
    *(_BYTE *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 4;
    *(void *)(a1 + 24) = v8;
    char v6 = *(_BYTE *)(a2 + 80);
    if ((v6 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  char v7 = 0;
  if ((*(_BYTE *)(a2 + 80) & 8) != 0)
  {
LABEL_7:
    uint64_t v9 = *(void *)(a2 + 32);
    v7 |= 8u;
    *(_BYTE *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v7;
    *(void *)(a1 + 32) = v9;
    char v6 = *(_BYTE *)(a2 + 80);
  }

uint64_t sub_101188EC0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "gpsCourseAccuracy", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((*(_BYTE *)(a1 + 80) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "gpsCourseRadians", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_101189010(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011893D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 72);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  char v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
    char v5 = *(_BYTE *)(v3 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_5:
      if ((v5 & 0x40) == 0) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }

  else if ((*(_BYTE *)(v3 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  char v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

_DWORD *sub_1011894E8(_DWORD *result)
{
  if (!*((void *)result + 9))
  {
    os_log_t v1 = result;
    uint64_t result = operator new(0x68uLL);
    *(void *)uint64_t result = &off_10189FD58;
    result[25] = 0;
    *((void *)v1 + 9) = result;
  }

  return result;
}

uint64_t sub_101189528(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FDC8;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_101189540(PB::Base *a1)
{
}

uint64_t sub_101189554(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189FDC8;
  *(_DWORD *)(result + 68) = 0;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 52);
    __int16 v3 = 64;
    *(_WORD *)(result + 68) = 64;
    *(_DWORD *)(result + 52) = v4;
    __int16 v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 56);
    v3 |= 0x80u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 56) = v5;
    __int16 v2 = *(_WORD *)(a2 + 68);
  }

uint64_t sub_101189688(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "context", *(_DWORD *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_1011897F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101189E80(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 52), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_101189FBC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FE00;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101189FD4(PB::Base *a1)
{
}

uint64_t sub_101189FE8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189FE00;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_10118A038(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "orientation", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10118A0A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10118A32C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

void *sub_10118A384(void *result)
{
  *uint64_t result = &off_10189FE38;
  result[1] = 0LL;
  return result;
}

void sub_10118A398(PB::Base *a1)
{
}

uint64_t sub_10118A3AC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_10189FE38;
  *(void *)(result + 8) = 0LL;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }

  return result;
}

uint64_t sub_10118A3D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0) {
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10118A420(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10118A654(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_10118A674(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FE70;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10118A68C(PB::Base *a1)
{
}

double sub_10118A6A0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FE70;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_10118A72C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10118A7DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10118AA40(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }

uint64_t sub_10118AAD4(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FEA8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10118AAEC(PB::Base *a1)
{
}

double sub_10118AB00(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FEA8;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_10118AB8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10118AC3C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10118AEA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }

uint64_t sub_10118AF34(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FEE0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10118AF4C(PB::Base *a1)
{
}

double sub_10118AF60(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FEE0;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_10118AFEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10118B09C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10118B300(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }

double sub_10118B394(uint64_t a1)
{
  *(void *)a1 = &off_10189FF18;
  *(_DWORD *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  return result;
}

void sub_10118B3B8(PB::Base *this)
{
  *(void *)this = &off_10189FF18;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_10118B408(PB::Base *a1)
{
}

uint64_t sub_10118B41C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FF18;
  *(_OWORD *)(a1 + 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 56);
    *(_BYTE *)(a1 + 72) = 1;
    *(void *)(a1 + 56) = v5;
  }

  if (a1 != a2)
  {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_10004C5F8( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }

  char v6 = *(_BYTE *)(a2 + 72);
  if ((v6 & 2) == 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 8) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    char v10 = *(_BYTE *)(a2 + 69);
    *(_BYTE *)(a1 + 72) |= 8u;
    *(_BYTE *)(a1 + 69) = v10;
    if ((*(_BYTE *)(a2 + 72) & 4) == 0) {
      return a1;
    }
    goto LABEL_8;
  }

  int v9 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) |= 2u;
  *(_DWORD *)(a1 + 64) = v9;
  char v6 = *(_BYTE *)(a2 + 72);
  if ((v6 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_7:
  if ((v6 & 4) != 0)
  {
LABEL_8:
    char v7 = *(_BYTE *)(a2 + 68);
    *(_BYTE *)(a1 + 72) |= 4u;
    *(_BYTE *)(a1 + 68) = v7;
  }

  return a1;
}

uint64_t sub_10118B50C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(float **)(a1 + 8);
  char v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "dotVector", v7);
  }

  if ((*(_BYTE *)(a1 + 72) & 4) != 0) {
    PB::TextFormatter::format(this, "hasValidTNBFrame", *(_BYTE *)(a1 + 68));
  }
  uint64_t v8 = *(float **)(a1 + 32);
  int v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "headingVector", v10);
  }

  char v11 = *(_BYTE *)(a1 + 72);
  if ((v11 & 8) == 0)
  {
    if ((*(_BYTE *)(a1 + 72) & 1) == 0) {
      goto LABEL_9;
    }
LABEL_13:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
    if ((*(_BYTE *)(a1 + 72) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_10;
  }

  PB::TextFormatter::format(this, "isPedestrian", *(_BYTE *)(a1 + 69));
  char v11 = *(_BYTE *)(a1 + 72);
  if ((v11 & 1) != 0) {
    goto LABEL_13;
  }
LABEL_9:
  if ((v11 & 2) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "uncertainty", *(float *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10118B620(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    float v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    unint64_t v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_10118BC70(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 72) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  }
  unint64_t v4 = *(float **)(v3 + 8);
  unint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  char v10 = *(_BYTE *)(v3 + 72);
  if ((v10 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 64), 4u);
    char v10 = *(_BYTE *)(v3 + 72);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 4) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(_BYTE *)(v3 + 68), 6u);
    }
  }

  else if ((*(_BYTE *)(v3 + 72) & 8) == 0)
  {
    goto LABEL_11;
  }

  double result = PB::Writer::write(this, *(_BYTE *)(v3 + 69), 5u);
  if ((*(_BYTE *)(v3 + 72) & 4) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 68), 6u);
  }
  return result;
}

uint64_t sub_10118BD4C(uint64_t result)
{
  *(void *)double result = &off_10189FF50;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10118BD64(PB::Base *a1)
{
}

double sub_10118BD78(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FF50;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_10118BE04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dotMeasurement", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "dotMeasurementUnc", *(float *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10118BEB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10118C118(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }

uint64_t sub_10118C1AC(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FF88;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10118C1C4(PB::Base *a1)
{
}

double sub_10118C1D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FF88;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_10118C264(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10118C314(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10118C578(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }

uint64_t sub_10118C60C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FFC0;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10118C624(PB::Base *a1)
{
}

float sub_10118C638(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FFC0;
  *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(_DWORD *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_10118C718(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dotDeltaBufferMaxAbs", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "dotDeltaBufferVar", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_10118C828(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10118CB34(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_10118CC1C(uint64_t result)
{
  *(void *)uint64_t result = &off_10189FFF8;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_10118CC34(PB::Base *this)
{
  *(void *)this = &off_10189FFF8;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_10118CC74(PB::Base *a1)
{
}

uint64_t sub_10118CC88(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_10189FFF8;
  *(void *)(a1 + 8) = 0LL;
  char v4 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 52) = 0;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(_BYTE *)(a1 + 52) = 1;
    *(void *)(a1 + 32) = v6;
    char v5 = 5;
    if ((*(_BYTE *)(a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v5 = 4;
  if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 52) = v5;
    *(_DWORD *)(a1 + 48) = v7;
  }

uint64_t sub_10118CD3C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 52) & 4) != 0) {
    PB::TextFormatter::format(this, "placementFiltered", *(_DWORD *)(a1 + 48));
  }
  char v5 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbabilityFiltered", v7);
  }

  char v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    char v8 = *(_BYTE *)(a1 + 52);
  }

  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10118CDFC(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }

uint64_t sub_10118D2EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 52);
  }

  if ((v4 & 4) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  }
  unint64_t v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 3u);
  }

  if ((*(_BYTE *)(v3 + 52) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 40), 4u);
  }
  return result;
}

uint64_t sub_10118D388(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0030;
  *(_DWORD *)(result + 108) = 0;
  return result;
}

void sub_10118D3A0(PB::Base *a1)
{
}

double sub_10118D3B4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0030;
  *(_DWORD *)(a1 + 108) = 0;
  int v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 108) = 1;
    *(double *)(a1 + 8) = result;
    int v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 88);
    v3 |= 0x40000u;
    *(_DWORD *)(a1 + 108) = v3;
    *(_DWORD *)(a1 + 88) = LODWORD(result);
    int v2 = *(_DWORD *)(a2 + 108);
  }

uint64_t sub_10118D654(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "pitchMean", *(float *)(a1 + 24));
    int v5 = *(_DWORD *)(a1 + 108);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "pitchStd", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }

uint64_t sub_10118D964(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10118DFF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 108);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 0x100000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }

  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 2u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }

uint64_t sub_10118E298(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0068;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10118E2B0(PB::Base *a1)
{
}

float sub_10118E2C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0068;
  *(_DWORD *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
    char v2 = 2;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return *(float *)&v3;
    }
    goto LABEL_5;
  }

  uint64_t v3 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
  *(void *)(a1 + 8) = v3;
  char v2 = 3;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }

  return *(float *)&v3;
}

uint64_t sub_10118E314(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10118E37C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10118E55C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_10118E5B4(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A00A0;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_10118E5CC(PB::Base *a1)
{
}

uint64_t sub_10118E5E0(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A00A0;
  *(_DWORD *)(result + 68) = 0;
  __int16 v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(result + 68) = 1;
    *(void *)(result + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 52);
    v3 |= 0x200u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 52) = v5;
    __int16 v2 = *(_WORD *)(a2 + 68);
  }

uint64_t sub_10118E768(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "didExceedRadius", *(_BYTE *)(a1 + 64));
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "fenceID", *(_DWORD *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_10118E938(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10118EE54(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((*(_WORD *)(result + 68) & 0x200) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

void sub_10118EFE8(PB::Base *a1)
{
}

uint64_t sub_10118EFFC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10118F064(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10118F2F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  }
  return result;
}

uint64_t sub_10118F348(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0110;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_10118F360(PB::Base *this)
{
  *(void *)this = &off_1018A0110;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_10118F3A0(PB::Base *a1)
{
}

uint64_t sub_10118F3B4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0110;
  *(void *)(a1 + 8) = 0LL;
  char v4 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 52) = 0;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(_BYTE *)(a1 + 52) = 1;
    *(void *)(a1 + 32) = v6;
    char v5 = 5;
    if ((*(_BYTE *)(a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v5 = 4;
  if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    char v7 = *(_BYTE *)(a2 + 48);
    *(_BYTE *)(a1 + 52) = v5;
    *(_BYTE *)(a1 + 48) = v7;
  }

uint64_t sub_10118F468(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 52) & 4) != 0) {
    PB::TextFormatter::format(this, "isPedestrian", *(_BYTE *)(a1 + 48));
  }
  char v5 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "pedestrianClassProbability", v7);
  }

  char v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    char v8 = *(_BYTE *)(a1 + 52);
  }

  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10118F528(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_10118F978(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 52);
  }

  if ((v4 & 4) != 0) {
    uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 48), 2u);
  }
  unint64_t v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 3u);
  }

  if ((*(_BYTE *)(v3 + 52) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 40), 4u);
  }
  return result;
}

uint64_t sub_10118FA14(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0148;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_10118FA2C(PB::Base *this)
{
  *(void *)this = &off_1018A0148;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_10118FA6C(PB::Base *a1)
{
}

uint64_t sub_10118FA80(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0148;
  *(void *)(a1 + 8) = 0LL;
  char v4 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 52) = 0;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(_BYTE *)(a1 + 52) = 1;
    *(void *)(a1 + 32) = v6;
    char v5 = 5;
    if ((*(_BYTE *)(a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v5 = 4;
  if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    int v7 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 52) = v5;
    *(_DWORD *)(a1 + 48) = v7;
  }

uint64_t sub_10118FB34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 52) & 4) != 0) {
    PB::TextFormatter::format(this, "placement", *(_DWORD *)(a1 + 48));
  }
  char v5 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbability", v7);
  }

  char v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    char v8 = *(_BYTE *)(a1 + 52);
  }

  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10118FBF4(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }

uint64_t sub_1011900E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 52);
  }

  if ((v4 & 4) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 2u);
  }
  unint64_t v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 3u);
  }

  if ((*(_BYTE *)(v3 + 52) & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 40), 4u);
  }
  return result;
}

uint64_t sub_101190180(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0180;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101190198(PB::Base *a1)
{
}

double sub_1011901AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0180;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_101190238(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011902E8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10119054C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }

uint64_t sub_1011905E0(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A01B8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1011905F8(PB::Base *a1)
{
}

double sub_10119060C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A01B8;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_101190698(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101190748(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011909AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }

uint64_t sub_101190A40(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A01F0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_101190A58(PB::Base *a1)
{
}

double sub_101190A6C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A01F0;
  *(_DWORD *)(a1 + 48) = 0;
  char v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 48) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 48) & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 36);
    v3 |= 0x20u;
    *(_BYTE *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 36) = LODWORD(result);
    char v2 = *(_BYTE *)(a2 + 48);
  }

uint64_t sub_101190B68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_101190C98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101190FDC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 48);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(result + 48) & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 2u);
  char v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

void *sub_1011910E0(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_1018A0228;
  return result;
}

void sub_1011910F4(PB::Base *this)
{
  *(void *)this = &off_1018A0228;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  PB::Base::~Base(this);
}

void sub_101191154(PB::Base *a1)
{
}

void *sub_101191168(void *a1, uint64_t a2)
{
  *a1 = &off_1018A0228;
  a1[1] = 0LL;
  char v4 = a1 + 1;
  a1[2] = 0LL;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    int v6 = operator new(0x68uLL);
    a1[2] = sub_101172DA0((uint64_t)v6, v5);
  }

  uint64_t v7 = *(void *)(a2 + 8);
  if (v7)
  {
    uint64_t v8 = operator new(0x10uLL);
    uint64_t v9 = sub_101140A28((uint64_t)v8, v7);
    uint64_t v10 = *v4;
    *char v4 = v9;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    }
  }

  return a1;
}

uint64_t sub_101191204(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))( v5,  this,  "signalEnvironment");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32LL))(v6, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101191274(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101191470(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 16);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    return PB::Writer::writeSubmessage(this, v5, 2u);
  }
  return result;
}

uint64_t sub_1011914C0(uint64_t result)
{
  *(void *)uint64_t result = off_1018A0260;
  *(void *)(result + 48) = 0LL;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1011914D8(PB::Base *this)
{
  *(void *)this = off_1018A0260;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10119151C(PB::Base *this)
{
  *(void *)this = off_1018A0260;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_101191564(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1018A0260;
  *(void *)(a1 + 48) = 0LL;
  *(_DWORD *)(a1 + 64) = 0;
  char v3 = *(_BYTE *)(a2 + 64);
  if ((v3 & 0x20) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 56);
    char v4 = 32;
    *(_BYTE *)(a1 + 64) = 32;
    *(void *)(a1 + 56) = v5;
    char v3 = *(_BYTE *)(a2 + 64);
    if ((v3 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v4 = 0;
  if ((*(_BYTE *)(a2 + 64) & 8) != 0)
  {
LABEL_5:
    uint64_t v6 = *(void *)(a2 + 32);
    v4 |= 8u;
    *(_BYTE *)(a1 + 64) = v4;
    *(void *)(a1 + 32) = v6;
    char v3 = *(_BYTE *)(a2 + 64);
  }

uint64_t sub_101191680(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "course", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_10119178C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (2)
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      if (v10++ > 8) {
        goto LABEL_19;
      }
    }

uint64_t sub_101191AD0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    char v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(result + 64) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  char v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

void *sub_101191BB4(void *result)
{
  *uint64_t result = off_1018A0298;
  result[1] = 0LL;
  return result;
}

void sub_101191BC4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A0298;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101191C04(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A0298;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_101191C48(void *a1, uint64_t a2)
{
  *a1 = off_1018A0298;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x48uLL);
    uint64_t v5 = sub_101191564((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_101191CB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101191D00(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101191EC8(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_101191EE4(void *result)
{
  *uint64_t result = off_1018A02D0;
  result[1] = 0LL;
  return result;
}

void sub_101191EF4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A02D0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_101191F34(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A02D0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_101191F78(void *a1, uint64_t a2)
{
  *a1 = off_1018A02D0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x48uLL);
    uint64_t v5 = sub_101191564((uint64_t)v4, v3);
    uint64_t v6 = a1[1];
    a1[1] = v5;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return a1;
}

uint64_t sub_101191FE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101192030(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011921F8(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_101192214(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0308;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10119222C(PB::Base *this)
{
  *(void *)this = &off_1018A0308;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_10119226C(PB::Base *a1)
{
}

uint64_t sub_101192280(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0308;
  *(void *)(a1 + 8) = 0LL;
  unint64_t v3 = (char *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(a1 + 32) = v4;
  }

  if (a1 != a2) {
    sub_1000F9040( v3,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  return a1;
}

uint64_t sub_1011922F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 40) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  }
  uint64_t v5 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "velocity", v7);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101192374(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    do
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v21 = v4 + 1;
          char v22 = *(_BYTE *)(v12 + v4);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v4 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101192724(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 40) & 1) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
  }
  unint64_t v5 = *(double **)(v3 + 8);
  unint64_t v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    double v6 = *v5++;
    uint64_t result = PB::Writer::write(this, v6, 2u);
  }

  return result;
}

double sub_101192784(uint64_t a1)
{
  *(void *)a1 = &off_1018A0340;
  *(_DWORD *)(a1 + 124) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

void sub_1011927B0(PB::Base *this)
{
  *(void *)this = &off_1018A0340;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }

  unint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_101192810(PB::Base *a1)
{
}

uint64_t sub_101192824(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &off_1018A0340;
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(void *)(a1 + 72) = 0LL;
  __int16 v5 = *(_WORD *)(a2 + 124);
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 80);
    __int16 v6 = 1;
    *(_WORD *)(a1 + 124) = 1;
    *(void *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v7;
    __int16 v5 = *(_WORD *)(a2 + 124);
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v6 = 0;
  if ((v5 & 0x40) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 108);
    v6 |= 0x40u;
    *(_WORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 108) = v8;
    __int16 v5 = *(_WORD *)(a2 + 124);
  }

uint64_t sub_1011929F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "distance", *(float *)(a1 + 88));
    __int16 v5 = *(_WORD *)(a1 + 124);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "focalLength", *(float *)(a1 + 92));
  __int16 v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

BOOL sub_101192BEC(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    __int16 v10 = (void **)(a1 + 56);
    uint64_t v137 = a1 + 72;
    float v11 = (void **)(a1 + 32);
    uint64_t v12 = a1 + 48;
    int v13 = (void **)(a1 + 8);
    uint64_t v14 = a1 + 24;
    while (1)
    {
      uint64_t v15 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0LL;
      while (1)
      {
        unint64_t v19 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v4 = v19;
        BOOL v21 = v17++ > 8;
        if (v21) {
          goto LABEL_20;
        }
      }

uint64_t sub_10119369C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 124);
  if ((v4 & 1) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 80), 1u);
    __int16 v4 = *(_WORD *)(v3 + 124);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }

  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 108), 2u);
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }

uint64_t sub_10119383C(uint64_t result)
{
  *(void *)double result = &off_1018A0378;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_101193854(PB::Base *a1)
{
}

uint64_t sub_101193868(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_1018A0378;
  *(_DWORD *)(result + 56) = 0;
  char v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(result + 56) = 4;
    *(void *)(result + 24) = v4;
    char v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(result + 56) = v3;
    *(void *)(result + 32) = v5;
    char v2 = *(_BYTE *)(a2 + 56);
  }

uint64_t sub_101193948(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "batchedLocationFixType", *(_DWORD *)(a1 + 48));
    char v5 = *(_BYTE *)(a1 + 56);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "distOdom", *(double *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_101193A58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101193E1C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 56);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 56) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  char v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_101193F04(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A03B0;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_101193F1C(PB::Base *a1)
{
}

uint64_t sub_101193F30(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A03B0;
  *(_DWORD *)(result + 116) = 0;
  __int16 v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 64);
    __int16 v3 = 128;
    *(_WORD *)(result + 116) = 128;
    *(void *)(result + 64) = v4;
    __int16 v2 = *(_WORD *)(a2 + 116);
    if ((v2 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 116) & 0x2000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 108);
    v3 |= 0x2000u;
    *(_WORD *)(result + 116) = v3;
    *(_DWORD *)(result + 108) = v5;
    __int16 v2 = *(_WORD *)(a2 + 116);
  }

uint64_t sub_10119410C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "activeTime", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 116);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }

uint64_t sub_10119433C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011949B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 116);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 116);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }

  else if ((*(_WORD *)(result + 116) & 0x2000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 2u);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }

double sub_101194B9C(void *a1)
{
  *a1 = &off_1018A03E8;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)((char *)a1 + 28) = 0xFFFFFFFFLL;
  return result;
}

void sub_101194BB8(PB::Base *a1)
{
}

uint64_t sub_101194BCC(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_1018A03E8;
  *(void *)(result + 28) = 0xFFFFFFFFLL;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(result + 32) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 32) = v3;
    *(void *)(result + 8) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_101194C5C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "timestampSet", *(double *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 32) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "timestampExit", *(double *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "userResponse", *(_DWORD *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101194D0C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101195024(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 4u);
  }

uint64_t sub_1011950B8(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0420;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_1011950D0(PB::Base *a1)
{
}

double sub_1011950E4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0420;
  *(_DWORD *)(a1 + 56) = 0;
  char v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    char v3 = 8;
    *(_BYTE *)(a1 + 56) = 8;
    *(double *)(a1 + 32) = result;
    char v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 56) = v3;
    *(double *)(a1 + 24) = result;
    char v2 = *(_BYTE *)(a2 + 56);
  }

uint64_t sub_1011951A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "complexHandMotionPercentage", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 56) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_101195298(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101195564(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 56);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_101195630(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0458;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_101195648(PB::Base *a1)
{
}

uint64_t sub_10119565C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0458;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1011956AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "motionState", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101195714(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011959A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

double sub_1011959F8(uint64_t a1)
{
  *(void *)a1 = &off_1018A0490;
  *(_DWORD *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_101195A18(PB::Base *this)
{
  *(void *)this = &off_1018A0490;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101195A70(PB::Base *a1)
{
}

uint64_t sub_101195A84(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0490;
  *(_OWORD *)(a1 + 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    int v6 = operator new(0xA0uLL);
    uint64_t v7 = sub_1010F1EE8((uint64_t)v6, v5);
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v7;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  if (a1 != a2) {
    sub_10004C5F8( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  char v9 = *(_BYTE *)(a2 + 48);
  if ((v9 & 2) != 0)
  {
    int v10 = *(_DWORD *)(a2 + 44);
    *(_BYTE *)(a1 + 48) |= 2u;
    *(_DWORD *)(a1 + 44) = v10;
    char v9 = *(_BYTE *)(a2 + 48);
  }

  if ((v9 & 1) != 0)
  {
    int v11 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v11;
  }

  return a1;
}

uint64_t sub_101195B60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(float **)(a1 + 8);
  int v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "gyroBias", v7);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32LL))(v8, this, "super");
  }
  char v9 = *(_BYTE *)(a1 + 48);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(this, "temperatureGyro", *(float *)(a1 + 40));
    char v9 = *(_BYTE *)(a1 + 48);
  }

  if ((v9 & 2) != 0) {
    PB::TextFormatter::format(this, "temperatureGyroBias", *(float *)(a1 + 44));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101195C24(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_101196080(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base **)(result + 32);
  if (v4) {
    double result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  unint64_t v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7, 2u);
  }

  char v8 = *(_BYTE *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 44), 3u);
    char v8 = *(_BYTE *)(v3 + 48);
  }

  if ((v8 & 1) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 40), 4u);
  }
  return result;
}

uint64_t sub_101196118(uint64_t result)
{
  *(void *)double result = &off_1018A04C8;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_101196130(PB::Base *a1)
{
}

uint64_t sub_101196144(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_1018A04C8;
  *(_DWORD *)(result + 64) = 0;
  char v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 48);
    char v3 = 32;
    *(_BYTE *)(result + 64) = 32;
    *(void *)(result + 48) = v4;
    char v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 64) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 64) = v3;
    *(void *)(result + 24) = v5;
    char v2 = *(_BYTE *)(a2 + 64);
  }

uint64_t sub_101196240(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "firstRingSensorTimeStampMicroSeconds", *(void *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds", *(void *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_101196370(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101196A30(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 48), 1u);
    char v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(result + 64) & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_101196B34(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0500;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 48) = 0LL;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_101196B50(PB::Base *this)
{
  *(void *)this = &off_1018A0500;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101196BA8(PB::Base *a1)
{
}

uint64_t sub_101196BBC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0LL;
  char v4 = (char *)(a1 + 8);
  *(void *)a1 = &off_1018A0500;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(_DWORD *)(a1 + 64) = 0;
  uint64_t v5 = *(void *)(a2 + 48);
  if (v5)
  {
    uint64_t v6 = operator new(0x50uLL);
    *(void *)(a1 + 48) = sub_1011974FC((uint64_t)v6, v5);
  }

  if ((*(_BYTE *)(a2 + 64) & 4) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 4;
    *(void *)(a1 + 56) = v7;
  }

  if (a1 != a2) {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  char v8 = *(_BYTE *)(a2 + 64);
  if ((v8 & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 32);
    *(_BYTE *)(a1 + 64) |= 1u;
    *(void *)(a1 + 32) = v9;
    char v8 = *(_BYTE *)(a2 + 64);
  }

  if ((v8 & 2) != 0)
  {
    uint64_t v10 = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 64) |= 2u;
    *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v10;
  }

  return a1;
}

uint64_t sub_101196C9C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "lastAuxTimeStampMicroSeconds", *(void *)(a1 + 32));
    char v5 = *(_BYTE *)(a1 + 64);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds", *(void *)(a1 + 40));
  }
  uint64_t v6 = *(double **)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "qSP", v8);
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32LL))(v9, this, "super");
  }
  if ((*(_BYTE *)(a1 + 64) & 4) != 0) {
    PB::TextFormatter::format(this, "timeStampMicroSeconds", *(void *)(a1 + 56));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_101196D7C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    uint64_t v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }

uint64_t sub_101197420(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0538;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

uint64_t sub_101197434(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base **)(result + 48);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if ((*(_BYTE *)(v3 + 64) & 4) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 2u);
  }
  unint64_t v5 = *(double **)(v3 + 8);
  int v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 3u);
  }

  char v8 = *(_BYTE *)(v3 + 64);
  if ((v8 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 4u);
    char v8 = *(_BYTE *)(v3 + 64);
  }

  if ((v8 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 5u);
  }
  return result;
}

void sub_1011974E8(PB::Base *a1)
{
}

uint64_t sub_1011974FC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0538;
  *(_DWORD *)(result + 76) = 0;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 40);
    __int16 v3 = 16;
    *(_WORD *)(result + 76) = 16;
    *(void *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v4;
    __int16 v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 76) = v3;
    *(void *)(result + 48) = v5;
    __int16 v2 = *(_WORD *)(a2 + 76);
  }

uint64_t sub_101197610(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_101197760(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101197B94(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 76);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_101197CB4(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0570;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101197CD0(PB::Base *a1)
{
}

double sub_101197CE4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0570;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(a1 + 32) = 2;
    *(double *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 28);
    v3 |= 8u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_BYTE *)(a1 + 28) = v5;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_101197D74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "avgRelOmegaRps", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 32) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "ringSensorTrustModelMode", *(_DWORD *)(a1 + 24));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "trustPencilRingSensorBool", *(_BYTE *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101197E24(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101198140(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 28), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 8), 4u);
  }

uint64_t sub_1011981D4(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A05A8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1011981EC(PB::Base *a1)
{
}

double sub_101198200(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A05A8;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = 1;
    *(double *)(a1 + 8) = result;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = v2;
    *(double *)(a1 + 16) = result;
  }

  return result;
}

uint64_t sub_101198250(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 24);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "tipForce", *(double *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011982B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_101198490(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1011984E8(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A05E0;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_101198500(PB::Base *a1)
{
}

double sub_101198514(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A05E0;
  *(_DWORD *)(a1 + 88) = 0;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x20) != 0)
  {
    double result = *(double *)(a2 + 48);
    __int16 v3 = 32;
    *(_WORD *)(a1 + 88) = 32;
    *(double *)(a1 + 48) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 56);
    v3 |= 0x40u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 56) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
  }

uint64_t sub_101198664(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "altitudeAngleConfidence", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_1011987F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_101198D40(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 48), 1u);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 2u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_101198E98(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0618;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_101198EB0(PB::Base *a1)
{
}

uint64_t sub_101198EC4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0618;
  *(_DWORD *)(result + 28) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(void *)(result + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 28) = v3;
    *(void *)(result + 16) = v5;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_101198F34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "sampleTime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 24));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "wrMets", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101198FC4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0LL;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(_BYTE *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0LL;
          goto LABEL_20;
        }
      }

      int i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }

    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }

uint64_t sub_101199290(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        return result;
      }
      return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  }
  return result;
}

uint64_t sub_101199308(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0650;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_101199320(PB::Base *a1)
{
}

uint64_t sub_101199334(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0650;
  *(_DWORD *)(result + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(result + 44) = 4;
    *(void *)(result + 24) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 44) = v3;
    *(void *)(result + 8) = v5;
    char v2 = *(_BYTE *)(a2 + 44);
  }

uint64_t sub_1011993F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 32));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "algorithmVersion", *(_DWORD *)(a1 + 36));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_1011994E8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011999D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_101199A9C(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0688;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_101199AB4(PB::Base *a1)
{
}

double sub_101199AC8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0688;
  *(_DWORD *)(a1 + 84) = 0;
  __int16 v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x200) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 76);
    __int16 v3 = 512;
    *(_WORD *)(a1 + 84) = 512;
    *(_DWORD *)(a1 + 76) = v4;
    __int16 v2 = *(_WORD *)(a2 + 84);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 64);
    v3 |= 0x80u;
    *(_WORD *)(a1 + 84) = v3;
    *(double *)(a1 + 64) = result;
    __int16 v2 = *(_WORD *)(a2 + 84);
  }

uint64_t sub_101199C18(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "ambient", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 84);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((*(_WORD *)(a1 + 84) & 0x100) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "baselineAccuracy", *(float *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_101199DA8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10119A254(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 84);
  if ((v4 & 0x200) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 76), 1u);
    __int16 v4 = *(_WORD *)(v3 + 84);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 2u);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

double sub_10119A3AC(uint64_t a1)
{
  *(void *)a1 = &off_1018A06C0;
  *(_DWORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  return result;
}

void sub_10119A3D0(PB::Base *this)
{
  *(void *)this = &off_1018A06C0;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_10119A420(PB::Base *a1)
{
}

uint64_t sub_10119A434(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A06C0;
  *(_OWORD *)(a1 + 8) = 0u;
  __int16 v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    *(void *)(a1 + 56) = v5;
  }

  if (a1 != a2)
  {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  }

  return a1;
}

uint64_t sub_10119A4C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(double **)(a1 + 8);
  char v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }

  uint64_t v8 = *(double **)(a1 + 32);
  char v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "position", v10);
  }

  if ((*(_BYTE *)(a1 + 64) & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10119A578(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    double v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    unint64_t v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        unint64_t v17 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v23 = v4 + 1;
          char v24 = *(_BYTE *)(v14 + v4);
          *((void *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_21;
          }
          v21 += 7;
          unint64_t v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            unint64_t v17 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        if (v16++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_10119AAE8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = (void *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  }
  unint64_t v4 = (double *)v3[1];
  unint64_t v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }

  uint64_t v8 = (double *)v3[4];
  double v7 = (double *)v3[5];
  while (v8 != v7)
  {
    double v9 = *v8++;
    double result = PB::Writer::write(this, v9, 3u);
  }

  return result;
}

double sub_10119AB68(uint64_t a1)
{
  *(void *)a1 = &off_1018A06F8;
  *(_DWORD *)(a1 + 44) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_10119AB88(PB::Base *this)
{
  *(void *)this = &off_1018A06F8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_10119ABE0(PB::Base *a1)
{
}

uint64_t sub_10119ABF4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A06F8;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    double v6 = operator new(0x48uLL);
    uint64_t v7 = sub_10119A434((uint64_t)v6, v5);
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v7;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  if (a1 != a2) {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    char v9 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a1 + 44) |= 1u;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v9;
  }

  return a1;
}

uint64_t sub_10119ACB4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "pose");
  }
  double v6 = *(double **)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }

  if ((*(_BYTE *)(a1 + 44) & 1) != 0) {
    PB::TextFormatter::format(this, "wasCorrected", *(_BYTE *)(a1 + 40));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_10119AD5C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    double v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v21 = v4 + 1;
          char v22 = *(_BYTE *)(v12 + v4);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v4 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_10119B19C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base **)(result + 32);
  if (v4) {
    double result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  unint64_t v5 = *(double **)(v3 + 8);
  int v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7, 2u);
  }

  if ((*(_BYTE *)(v3 + 44) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 40), 3u);
  }
  return result;
}

double sub_10119B21C(uint64_t a1)
{
  *(void *)a1 = &off_1018A0730;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(void *)(a1 + 56) = 0LL;
  return result;
}

void sub_10119B240(PB::Base *this)
{
  *(void *)this = &off_1018A0730;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_10119B290(PB::Base *a1)
{
}

uint64_t sub_10119B2A4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0730;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(void *)(a1 + 56) = 0LL;
  if (a1 != a2)
  {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1000F9040( (char *)(a1 + 32),  *(char **)(a2 + 32),  *(void *)(a2 + 40),  (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  }

  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    int v5 = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 60) |= 1u;
    *(_DWORD *)(a1 + 56) = v5;
  }

  return a1;
}

uint64_t sub_10119B338(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 60) & 1) != 0) {
    PB::TextFormatter::format(this, "jointName", *(_DWORD *)(a1 + 56));
  }
  int v5 = *(double **)(a1 + 8);
  int v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "rotation", v7);
  }

  double v8 = *(double **)(a1 + 32);
  char v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_10119B3EC(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    double v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    uint64_t v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        unint64_t v17 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v23 = v4 + 1;
          char v24 = *(_BYTE *)(v14 + v4);
          *((void *)this + 1) = v23;
          v17 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_21;
          }
          v21 += 7;
          unint64_t v4 = v23;
          if (v22++ >= 9)
          {
LABEL_20:
            unint64_t v17 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_10119BA08(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(double **)(result + 8);
  unint64_t v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6, 1u);
  }

  double v7 = *(double **)(v3 + 32);
  double v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9, 2u);
  }

  if ((*(_BYTE *)(v3 + 60) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 3u);
  }
  return result;
}

void *sub_10119BA94(void *result)
{
  *double result = off_1018A0768;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_10119BAA8(void **a1)
{
  *a1 = off_1018A0768;
  uint64_t v2 = a1 + 1;
  sub_1004CADB0(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10119BAF0(void **a1)
{
  *a1 = off_1018A0768;
  uint64_t v3 = a1 + 1;
  sub_1004CADB0(&v3);
  PB::Base::~Base((PB::Base *)a1);
  operator delete(v2);
}

void *sub_10119BB3C(void *a1, uint64_t a2)
{
  a1[1] = 0LL;
  uint64_t v3 = (char **)(a1 + 1);
  *a1 = off_1018A0768;
  a1[2] = 0LL;
  a1[3] = 0LL;
  unint64_t v4 = *(uint64_t **)(a2 + 8);
  unint64_t v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_10119BBA0(v3, *v4++);
  return a1;
}

uint64_t sub_10119BBA0(char **a1, uint64_t a2)
{
  unint64_t v4 = operator new(0x40uLL);
  sub_10119B2A4((uint64_t)v4, a2);
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v6 = (unint64_t)a1[2];
  double v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v6 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    char v24 = a1 + 2;
    if (v12) {
      uint64_t v13 = (char *)sub_1000071BC(result, v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[8 * v9];
    char v15 = &v13[8 * v12];
    unint64_t v23 = v15;
    *(void *)uint64_t v14 = v4;
    double v8 = v14 + 8;
    v22.i64[1] = (uint64_t)(v14 + 8);
    unint64_t v17 = *a1;
    unsigned int v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)unsigned int v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      double v8 = (char *)v22.i64[1];
      char v15 = v23;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v22 = v19;
    BOOL v20 = a1[2];
    a1[2] = v15;
    unint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v21);
  }

  else
  {
    *(void *)double v7 = v4;
    double v8 = v7 + 8;
  }

  a1[1] = v8;
  return result;
}

void sub_10119BCC4(_Unwind_Exception *a1)
{
}

uint64_t sub_10119BCE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32LL))(v7, this, "joint");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10119BD50(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (char **)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_10119BEF0(char **a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &off_1018A0730;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *((void *)v2 + 7) = 0LL;
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v4 = (unint64_t)a1[2];
  unint64_t v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    else {
      unint64_t v10 = v9;
    }
    uint64_t v22 = a1 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1000071BC(result, v10);
    }
    else {
      unsigned int v11 = 0LL;
    }
    unint64_t v12 = &v11[8 * v7];
    unint64_t v13 = &v11[8 * v10];
    uint64_t v21 = v13;
    *(void *)unint64_t v12 = v2;
    unint64_t v6 = v12 + 8;
    v20.i64[1] = (uint64_t)(v12 + 8);
    char v15 = *a1;
    char v14 = a1[1];
    if (v14 == *a1)
    {
      int64x2_t v17 = vdupq_n_s64((unint64_t)v14);
    }

    else
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *(void *)char v14 = 0LL;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }

      while (v14 != v15);
      int64x2_t v17 = *(int64x2_t *)a1;
      unint64_t v6 = (char *)v20.i64[1];
      unint64_t v13 = v21;
    }

    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v17;
    unint64_t v18 = a1[2];
    a1[2] = v13;
    uint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = sub_1004CAE9C((uint64_t)&v19);
  }

  else
  {
    *(void *)unint64_t v5 = v2;
    unint64_t v6 = v5 + 8;
  }

  a1[1] = v6;
  return result;
}

void sub_10119C028(_Unwind_Exception *a1)
{
}

uint64_t sub_10119C044(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5, 1u))
    unint64_t v5 = *v2++;
  return result;
}

uint64_t sub_10119C08C(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A07A0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_10119C0A4(PB::Base *a1)
{
}

uint64_t sub_10119C0B8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A07A0;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    uint64_t v2 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(void *)(result + 8) = v2;
  }

  return result;
}

uint64_t sub_10119C0E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0) {
    PB::TextFormatter::format(this, "userActivity", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10119C130(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_10119C364(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0) {
    return PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
  }
  return result;
}

uint64_t sub_10119C384(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A07D8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10119C39C(PB::Base *a1)
{
}

double sub_10119C3B0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A07D8;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 2;
    *(double *)(a1 + 16) = result;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 1;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = v2;
    *(double *)(a1 + 8) = result;
  }

  return result;
}

uint64_t sub_10119C400(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 24);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10119C468(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10119C640(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
  }

  if ((v4 & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  }
  return result;
}

uint64_t sub_10119C698(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0810;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10119C6B0(PB::Base *a1)
{
}

uint64_t sub_10119C6C4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0810;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(void *)(result + 8) = v5;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_10119C7A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "inlierCount", *(_DWORD *)(a1 + 24));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "isOutlierCurrentSample", *(_BYTE *)(a1 + 36));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_10119C8B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10119CC8C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_10119CD74(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0848;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10119CD8C(PB::Base *a1)
{
}

uint64_t sub_10119CDA0(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0848;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_BYTE *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_10119CDF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "isStart", *(_BYTE *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10119CE58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10119D03C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_10119D094(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0880;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_10119D0AC(PB::Base *a1)
{
}

double sub_10119D0C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0880;
  *(_DWORD *)(a1 + 92) = 0;
  __int16 v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    double result = *(double *)(a2 + 56);
    __int16 v3 = 64;
    *(_WORD *)(a1 + 92) = 64;
    *(double *)(a1 + 56) = result;
    __int16 v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(a1 + 92) = v3;
    *(double *)(a1 + 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 92);
  }

uint64_t sub_10119D248(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "distanceFromParticleFilter", *(float *)(a1 + 80));
    __int16 v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "horizontalAngle", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

uint64_t sub_10119D418(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_10119D940(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }

  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

uint64_t sub_10119DAD0(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A08B8;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_10119DAE8(PB::Base *a1)
{
}

float sub_10119DAFC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A08B8;
  *(_DWORD *)(a1 + 44) = 0;
  char v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 44) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 28) = v4;
    char v2 = *(_BYTE *)(a2 + 44);
  }

uint64_t sub_10119DBF8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "noiseVelocityX", *(float *)(a1 + 20));
  char v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_10119DD28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10119E06C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(result + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  char v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_10119E170(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A08F0;
  *(_DWORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10119E188(PB::Base *a1)
{
}

uint64_t sub_10119E19C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A08F0;
  *(_DWORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  __int16 v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 40);
    __int16 v3 = 16;
    *(_WORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 16;
    *(void *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v4;
    __int16 v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(void *)(result + 16) = v5;
    __int16 v2 = *(_WORD *)(a2 + 60);
  }

uint64_t sub_10119E2B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "fractionAboveThreshold", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "horizontalDistance", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_10119E404(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10119E79C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_10119E8BC(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0928;
  *(_DWORD *)(result + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_10119E8D4(PB::Base *a1)
{
}

double sub_10119E8E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0928;
  *(_DWORD *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(double *)(a1 + 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(double *)(a1 + 24) = result;
    __int16 v2 = *(_WORD *)(a2 + 80);
  }

uint64_t sub_10119EAA8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }

  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "qStartW", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }

uint64_t sub_10119ECB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10119F190(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 80);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }

uint64_t sub_10119F358(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0960;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10119F370(PB::Base *a1)
{
}

float sub_10119F384(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0960;
  *(_DWORD *)(a1 + 24) = 0;
  char v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 24) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 24);
  }

uint64_t sub_10119F3F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 24) & 1) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_4;
  }

  PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((v5 & 1) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10119F484(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }

      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10119F6A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        return result;
      }
      return PB::Writer::write(this, *(float *)(v3 + 20), 3u);
    }
  }

  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 24) & 4) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  }
  return result;
}

uint64_t sub_10119F71C(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0998;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10119F734(PB::Base *a1)
{
}

float sub_10119F748(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0998;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 0x20) != 0)
  {
    float result = *(float *)(a2 + 28);
    char v3 = 32;
    *(_BYTE *)(a1 + 32) = 32;
    *(float *)(a1 + 28) = result;
    char v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 24);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 32) = v3;
    *(float *)(a1 + 24) = result;
    char v2 = *(_BYTE *)(a2 + 32);
  }

uint64_t sub_10119F80C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "inertialX", *(float *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "inertialY", *(float *)(a1 + 12));
  char v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_10119F8FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10119FBC8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 32);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 28), 1u);
    char v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  char v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

void *sub_10119FC94(void *result)
{
  *uint64_t result = off_1018A09D0;
  result[1] = 0LL;
  return result;
}

void sub_10119FCA4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A09D0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_10119FCE4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A09D0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_10119FD28(void *a1, uint64_t a2)
{
  *a1 = off_1018A09D0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x20uLL);
    sub_10119F384((uint64_t)v4, v3);
    a1[1] = v5;
  }

  return a1;
}

uint64_t sub_10119FD78(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10119FDC8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_10119FF8C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

_DWORD *sub_10119FFA8(_DWORD *result)
{
  if (!*((void *)result + 1))
  {
    uint64_t v1 = result;
    uint64_t result = operator new(0x20uLL);
    *(void *)uint64_t result = &off_1018A0960;
    result[6] = 0;
    *((void *)v1 + 1) = result;
  }

  return result;
}

void *sub_10119FFE8(void *result)
{
  *uint64_t result = off_1018A0A08;
  result[1] = 0LL;
  return result;
}

void sub_10119FFF8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A0A08;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1011A0038(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A0A08;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1011A007C(void *a1, uint64_t a2)
{
  *a1 = off_1018A0A08;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x20uLL);
    sub_10119F384((uint64_t)v4, v3);
    a1[1] = v5;
  }

  return a1;
}

uint64_t sub_1011A00CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011A011C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011A02E0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_1011A02FC(uint64_t result)
{
  *(void *)uint64_t result = off_1018A0A40;
  *(void *)(result + 16) = 0LL;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1011A0314(PB::Base *this)
{
  *(void *)this = off_1018A0A40;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1011A0358(PB::Base *this)
{
  *(void *)this = off_1018A0A40;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1011A03A0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1018A0A40;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = 1;
    *(void *)(a1 + 8) = v3;
  }

  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = operator new(0x18uLL);
    *(void *)uint64_t v5 = &off_1018A0A78;
    v5[5] = 0;
    char v6 = *(_BYTE *)(v4 + 20);
    if ((v6 & 1) != 0)
    {
      uint64_t v8 = *(void *)(v4 + 8);
      *((_BYTE *)v5 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
      *((void *)v5 + 1) = v8;
      char v7 = 3;
      if ((v6 & 2) == 0)
      {
LABEL_9:
        *(void *)(a1 + 16) = v5;
        return a1;
      }
    }

    else
    {
      char v7 = 2;
      if ((*(_BYTE *)(v4 + 20) & 2) == 0) {
        goto LABEL_9;
      }
    }

    int v9 = *(_DWORD *)(v4 + 16);
    *((_BYTE *)v5 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v7;
    v5[4] = v9;
    goto LABEL_9;
  }

  return a1;
}

float sub_1011A044C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0A78;
  *(_DWORD *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(a1 + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(float *)(a1 + 16) = result;
  }

  return result;
}

uint64_t sub_1011A04A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
    PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011A050C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011A0730(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0A78;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

uint64_t sub_1011A0744(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_BYTE *)(result + 24) & 1) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
  }
  int v4 = *(const PB::Base **)(v3 + 16);
  if (v4) {
    return PB::Writer::writeSubmessage(this, v4, 2u);
  }
  return result;
}

void sub_1011A079C(PB::Base *a1)
{
}

uint64_t sub_1011A07B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011A0818(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011A0AA4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  }
  return result;
}

void *sub_1011A0AFC(void *result)
{
  *uint64_t result = off_1018A0AB0;
  result[1] = 0LL;
  return result;
}

void sub_1011A0B0C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A0AB0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1011A0B4C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A0AB0;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1011A0B90(void *a1, uint64_t a2)
{
  *a1 = off_1018A0AB0;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    char v4 = operator new(0x20uLL);
    sub_10119F384((uint64_t)v4, v3);
    a1[1] = v5;
  }

  return a1;
}

uint64_t sub_1011A0BE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011A0C30(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011A0DF4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

void *sub_1011A0E10(void *result)
{
  *uint64_t result = off_1018A0AE8;
  result[1] = 0LL;
  return result;
}

void sub_1011A0E20(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A0AE8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1011A0E60(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A0AE8;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

void *sub_1011A0EA4(void *a1, uint64_t a2)
{
  *a1 = off_1018A0AE8;
  a1[1] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = operator new(0x20uLL);
    sub_10119F384((uint64_t)v4, v3);
    a1[1] = v5;
  }

  return a1;
}

uint64_t sub_1011A0EF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "super");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011A0F44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011A1108(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_1011A1124(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0B20;
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1011A1140(PB::Base *this)
{
  *(void *)this = &off_1018A0B20;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1011A1198(PB::Base *a1)
{
}

uint64_t sub_1011A11AC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0LL;
  int v4 = (char *)(a1 + 8);
  *(void *)a1 = &off_1018A0B20;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0LL;
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5)
  {
    char v6 = operator new(0x48uLL);
    uint64_t v7 = sub_10119A434((uint64_t)v6, v5);
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v7;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  if (a1 != a2) {
    sub_1000F9040( v4,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    uint64_t v9 = *(void *)(a2 + 32);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(void *)(a1 + 32) = v9;
  }

  return a1;
}

uint64_t sub_1011A126C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0) {
    PB::TextFormatter::format(this, "originalTimestamp", *(double *)(a1 + 32));
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "pose");
  }
  char v6 = *(double **)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1011A130C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0LL;
        if (v4 > v5) {
          unint64_t v5 = v4;
        }
        while (v5 != v4)
        {
          unint64_t v21 = v4 + 1;
          char v22 = *(_BYTE *)(v12 + v4);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v4 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0LL;
            goto LABEL_21;
          }
        }

        int v6 = 1;
        *((_BYTE *)this + 24) = 1;
        return v6 == 0;
      }

      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1011A1740(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  unint64_t v4 = *(const PB::Base **)(result + 40);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  unint64_t v5 = *(double **)(v3 + 8);
  int v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7, 2u);
  }

  if ((*(_BYTE *)(v3 + 48) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  }
  return result;
}

uint64_t sub_1011A17C0(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0B58;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_1011A17D8(PB::Base *a1)
{
}

uint64_t sub_1011A17EC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0B58;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }

  char v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v2;
    *(_DWORD *)(result + 16) = v4;
  }

  return result;
}

uint64_t sub_1011A183C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "detectionMask", *(_DWORD *)(a1 + 16));
    char v5 = *(_BYTE *)(a1 + 20);
  }

  if ((v5 & 1) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011A18A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011A1B30(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 20);
  }

  if ((v4 & 2) != 0) {
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1011A1B88(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0B90;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_1011A1BA0(PB::Base *a1)
{
}

float sub_1011A1BB4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0B90;
  *(_DWORD *)(a1 + 88) = 0;
  int v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 88) = 1;
    *(void *)(a1 + 8) = v4;
    int v2 = *(_DWORD *)(a2 + 88);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 44);
    v3 |= 0x100u;
    *(_DWORD *)(a1 + 88) = v3;
    *(float *)(a1 + 44) = result;
    int v2 = *(_DWORD *)(a2 + 88);
  }

uint64_t sub_1011A1DE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "baselineError", *(float *)(a1 + 16));
    int v5 = *(_DWORD *)(a1 + 88);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "covariancePostMeasurement00", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }

uint64_t sub_1011A2074(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011A26D8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 88);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }

  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 2u);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

double sub_1011A2910(uint64_t a1)
{
  *(void *)a1 = &off_1018A0BC8;
  *(_DWORD *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  return result;
}

void sub_1011A2934(PB::Base *this)
{
  *(void *)this = &off_1018A0BC8;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1011A2984(PB::Base *a1)
{
}

uint64_t sub_1011A2998(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0BC8;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  char v5 = *(_BYTE *)(a2 + 72);
  if ((v5 & 2) != 0)
  {
    int v7 = *(_DWORD *)(a2 + 60);
    char v6 = 2;
    *(_BYTE *)(a1 + 72) = 2;
    *(_DWORD *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v7;
    char v5 = *(_BYTE *)(a2 + 72);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v6 = 0;
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 56);
    v6 |= 1u;
    *(_BYTE *)(a1 + 72) = v6;
    *(_DWORD *)(a1 + 56) = v8;
    char v5 = *(_BYTE *)(a2 + 72);
  }

uint64_t sub_1011A2A84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "bC150RXAVE", *(float *)(a1 + 56));
    char v5 = *(_BYTE *)(a1 + 72);
  }

  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "gC0RXAVE", *(float *)(a1 + 60));
  }
  char v6 = *(float **)(a1 + 8);
  int v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "ntcRamp", v8);
  }

  int v9 = *(float **)(a1 + 32);
  unsigned int v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(this, "rxXT", v11);
  }

  char v12 = *(_BYTE *)(a1 + 72);
  if ((v12 & 4) != 0)
  {
    PB::TextFormatter::format(this, "versionPxCL", *(_DWORD *)(a1 + 64));
    char v12 = *(_BYTE *)(a1 + 72);
  }

  if ((v12 & 8) != 0) {
    PB::TextFormatter::format(this, "versionPxTC", *(_DWORD *)(a1 + 68));
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_1011A2B8C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    char v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_1011A3320(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 72);
  if ((v4 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(result + 60), 1u);
    char v4 = *(_BYTE *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_15:
      double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 3u);
      if ((*(_BYTE *)(v3 + 72) & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(result + 72) & 1) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 56), 2u);
  char v4 = *(_BYTE *)(v3 + 72);
  if ((v4 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_4:
  if ((v4 & 8) != 0) {
LABEL_5:
  }
    double result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 4u);
LABEL_6:
  unint64_t v5 = *(float **)(v3 + 8);
  int v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7, 5u);
  }

  int v9 = *(float **)(v3 + 32);
  float v8 = *(float **)(v3 + 40);
  while (v9 != v8)
  {
    float v10 = *v9++;
    double result = PB::Writer::write(this, v10, 6u);
  }

  return result;
}

uint64_t sub_1011A33F8(uint64_t result)
{
  *(void *)double result = &off_1018A0C00;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1011A3410(PB::Base *a1)
{
}

uint64_t sub_1011A3424(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_1018A0C00;
  *(_DWORD *)(result + 48) = 0;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(result + 48) = 1;
    *(void *)(result + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 24) = v5;
    __int16 v2 = *(_WORD *)(a2 + 48);
  }

uint64_t sub_1011A3558(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "ambient", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "baselineConfidence", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

uint64_t sub_1011A36C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011A3B40(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 2u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

void *sub_1011A3C7C(void *result)
{
  *uint64_t result = &off_1018A0C38;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

void sub_1011A3C90(PB::Base *this)
{
  *(void *)this = &off_1018A0C38;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1011A3CD0(PB::Base *a1)
{
}

void *sub_1011A3CE4(void *a1, uint64_t a2)
{
  *a1 = &off_1018A0C38;
  a1[1] = 0LL;
  uint64_t v3 = (char *)(a1 + 1);
  a1[2] = 0LL;
  a1[3] = 0LL;
  if (a1 != (void *)a2) {
    sub_10004C5F8( v3,  *(char **)(a2 + 8),  *(void *)(a2 + 16),  (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_1011A3D3C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(int **)(a1 + 8);
  int v6 = *(int **)(a1 + 16);
  while (v5 != v6)
  {
    int v7 = *v5++;
    PB::TextFormatter::format(this, "volts", v7);
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_1011A3DA0(void *a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    unsigned int v10 = (void **)(a1 + 1);
    unint64_t v11 = a1 + 3;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0LL;
      while (1)
      {
        unint64_t v16 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v17 = *(_BYTE *)(v12 + v4);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v4 = v16;
        BOOL v37 = v14++ > 8;
        if (v37) {
          goto LABEL_20;
        }
      }

uint64_t sub_1011A424C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(int **)(result + 8);
  return result;
}

uint64_t sub_1011A4294(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0C70;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1011A42A8(PB::Base *this)
{
  *(void *)this = &off_1018A0C70;
  unint64_t v4 = (void **)*((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *unint64_t v2 = 0LL;
  if (v4) {
    sub_10058A4FC((int)v2, v3);
  }
  PB::Base::~Base(this);
}

void sub_1011A42E8(PB::Base *a1)
{
}

uint64_t sub_1011A42FC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0C70;
  *(void *)(a1 + 8) = 0LL;
  unint64_t v4 = (void ***)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  int v5 = *(__int128 **)(a2 + 8);
  if (v5)
  {
    int v6 = (void **)operator new(0x18uLL);
    int v7 = v6;
    if (*((char *)v5 + 23) < 0)
    {
      sub_1010DD48C(v6, *(void **)v5, *((void *)v5 + 1));
      char v9 = *v4;
      *unint64_t v4 = v7;
      if (v9) {
        sub_10058A4FC((int)v4, v9);
      }
    }

    else
    {
      __int128 v8 = *v5;
      v6[2] = (void *)*((void *)v5 + 2);
      *(_OWORD *)int v6 = v8;
      *unint64_t v4 = v6;
    }
  }

  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    *(_BYTE *)(a1 + 24) |= 1u;
    *(void *)(a1 + 16) = v10;
  }

  return a1;
}

uint64_t sub_1011A43C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format(this, "name");
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
    PB::TextFormatter::format(this, "value", *(double *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011A4424(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    __int128 v8 = (void ***)(a1 + 8);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0LL;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        if (v11++ > 8) {
          goto LABEL_20;
        }
      }

uint64_t sub_1011A4618(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::write(this, v4, 1LL);
  }
  if ((*(_BYTE *)(v3 + 24) & 1) != 0) {
    return PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  }
  return result;
}

void *sub_1011A466C(void *result)
{
  *uint64_t result = &off_1018A0CA8;
  *(void *)((char *)result + 188) = 0LL;
  return result;
}

void sub_1011A4684(PB::Base *a1)
{
}

uint64_t sub_1011A4698(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0CA8;
  *(void *)(result + 188) = 0LL;
  uint64_t v2 = *(void *)(a2 + 188);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v3 = 1LL;
    *(void *)(result + 188) = 1LL;
    *(void *)(result + 8) = v4;
    uint64_t v2 = *(void *)(a2 + 188);
    if ((v2 & 0x800000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 0x800000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 104);
    v3 |= 0x800000uLL;
    *(void *)(result + 188) = v3;
    *(_DWORD *)(result + 104) = v5;
    uint64_t v2 = *(void *)(a2 + 188);
  }

uint64_t sub_1011A4C2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "auxHorizontalRotation", *(float *)(a1 + 16));
    uint64_t v5 = *(void *)(a1 + 188);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_55;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "auxHorizontalTranslation", *(float *)(a1 + 20));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_56;
  }

uint64_t sub_1011A529C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011A60EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 188);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    uint64_t v4 = *(void *)(v3 + 188);
    if ((v4 & 0x800000) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_54;
    }
  }

  else if ((v4 & 0x800000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 2u);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_55;
  }

uint64_t sub_1011A6688(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0CE0;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_1011A66A0(PB::Base *a1)
{
}

uint64_t sub_1011A66B4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0CE0;
  *(_DWORD *)(result + 128) = 0;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    int v3 = 4;
    *(_DWORD *)(result + 128) = 4;
    *(void *)(result + 24) = v4;
    int v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 100);
    v3 |= 0x100000u;
    *(_DWORD *)(result + 128) = v3;
    *(_DWORD *)(result + 10sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
    int v2 = *(_DWORD *)(a2 + 128);
  }

uint64_t sub_1011A6A50(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "auxAvgOmegaAroundGrav2s", *(float *)(a1 + 32));
    int v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }

  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravLong", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }

uint64_t sub_1011A6E80(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011A7774(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 128);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }

  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 2u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }

double sub_1011A7B18(uint64_t a1)
{
  *(void *)a1 = &off_1018A0D18;
  *(_DWORD *)(a1 + 164) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  return result;
}

void sub_1011A7B3C(PB::Base *this)
{
  *(void *)this = &off_1018A0D18;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1011A7B8C(PB::Base *a1)
{
}

uint64_t sub_1011A7BA0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0D18;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 164) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  int v5 = *(_DWORD *)(a2 + 164);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 64);
    int v6 = 2;
    *(_DWORD *)(a1 + 164) = 2;
    *(void *)(a1 + 64) = v7;
    int v5 = *(_DWORD *)(a2 + 164);
    if ((v5 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v6 = 0;
  if ((v5 & 0x800) != 0)
  {
LABEL_5:
    int v8 = *(_DWORD *)(a2 + 108);
    v6 |= 0x800u;
    *(_DWORD *)(a1 + 164) = v6;
    *(_DWORD *)(a1 + 108) = v8;
    int v5 = *(_DWORD *)(a2 + 164);
  }

uint64_t sub_1011A7FF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x400000) != 0)
  {
    PB::TextFormatter::format(this, "btz", *(_BYTE *)(a1 + 152));
    int v5 = *(_DWORD *)(a1 + 164);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "btzDisturbanceDuration", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }

BOOL sub_1011A848C(uint64_t a1, PB::Reader *this, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  int v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    float v12 = (void **)(a1 + 32);
    uint64_t v13 = a1 + 48;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5LL || v4 + 10 > v5) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0LL;
      while (1)
      {
        unint64_t v18 = v4 + 1;
        *((void *)this + 1) = v4 + 1;
        char v19 = *(_BYTE *)(v14 + v4);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v4 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }

uint64_t sub_1011A939C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 164);
  if ((v4 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    int v4 = *(_DWORD *)(v3 + 164);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }

  else if ((v4 & 0x800) == 0)
  {
    goto LABEL_3;
  }

  double result = PB::Writer::write(this, *(float *)(v3 + 108), 2u);
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }

uint64_t sub_1011A978C(uint64_t result)
{
  *(void *)double result = &off_1018A0D50;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1011A97A4(PB::Base *a1)
{
}

float sub_1011A97B8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0D50;
  *(_DWORD *)(a1 + 48) = 0;
  __int16 v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(a1 + 48) = 1;
    *(void *)(a1 + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    __int16 v2 = *(_WORD *)(a2 + 48);
  }

uint64_t sub_1011A98D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "avgRotationMax", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "historicalDisturbanceDuration", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_1011A9A20(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011A9DA8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 2u);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }

uint64_t sub_1011A9EC8(uint64_t result)
{
  *(void *)uint64_t result = off_1018A0D88;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_1011A9EDC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A0D88;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
}

void sub_1011A9F1C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1018A0D88;
  *((void *)this + 1) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  PB::Base::~Base(this);
  operator delete(v3);
}

uint64_t sub_1011A9F60(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1018A0D88;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    __int16 v5 = operator new(0xA8uLL);
    uint64_t v6 = sub_1010F1098(v5, v4);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    char v8 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a1 + 20) |= 1u;
    *(_BYTE *)(a1 + 16) = v8;
  }

  return a1;
}

uint64_t sub_1011A9FF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32LL))(v5, this, "correction");
  }
  if ((*(_BYTE *)(a1 + 20) & 1) != 0) {
    PB::TextFormatter::format(this, "isAvgGrav", *(_BYTE *)(a1 + 16));
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011AA060(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011AA268(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if ((*(_BYTE *)(v3 + 20) & 1) != 0) {
    return PB::Writer::write(this, *(_BYTE *)(v3 + 16), 2u);
  }
  return result;
}

uint64_t sub_1011AA2BC(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0DC0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1011AA2D4(PB::Base *a1)
{
}

uint64_t sub_1011AA2E8(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0DC0;
  *(_DWORD *)(result + 24) = 0;
  char v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 2) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 12);
    char v3 = 2;
    *(_BYTE *)(result + 24) = 2;
    *(_DWORD *)(result + 12) = v4;
    char v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 8) != 0)
  {
LABEL_5:
    char v5 = *(_BYTE *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(result + 24) = v3;
    *(_BYTE *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
    char v2 = *(_BYTE *)(a2 + 24);
  }

uint64_t sub_1011AA390(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activeGnssSession", *(_BYTE *)(a1 + 20));
    char v5 = *(_BYTE *)(a1 + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "currentModesOfOperation", *(_DWORD *)(a1 + 8));
  char v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "hasSubscribedRhythmicClient", *(_BYTE *)(a1 + 21));
    if ((*(_BYTE *)(a1 + 24) & 4) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1011AA460(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5LL || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(_BYTE *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011AA910(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 24);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 12), 1u);
    char v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 24) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 20), 2u);
  char v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1011AA9C0(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0DF8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1011AA9D8(PB::Base *a1)
{
}

float sub_1011AA9EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0DF8;
  *(_DWORD *)(a1 + 28) = 0;
  char v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    char v2 = *(_BYTE *)(a2 + 28);
  }

uint64_t sub_1011AAA78(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011AAB28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011AAD8C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 2u);
  char v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  }

uint64_t sub_1011AAE20(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0E30;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1011AAE38(PB::Base *a1)
{
}

double sub_1011AAE4C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0E30;
  *(_DWORD *)(a1 + 64) = 0;
  char v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    char v3 = 2;
    *(_BYTE *)(a1 + 64) = 2;
    *(double *)(a1 + 16) = result;
    char v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 64) & 0x40) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 56);
    v3 |= 0x40u;
    *(_BYTE *)(a1 + 64) = v3;
    *(double *)(a1 + 56) = result;
    char v2 = *(_BYTE *)(a2 + 64);
  }

uint64_t sub_1011AAF2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

uint64_t sub_1011AB03C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011AB340(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 64);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((*(_BYTE *)(result + 64) & 0x40) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 2u);
  char v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_1011AB428(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0E68;
  *(_DWORD *)(result + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_1011AB440(PB::Base *a1)
{
}

double sub_1011AB454(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0E68;
  *(_DWORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  __int16 v2 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x200) != 0)
  {
    double result = *(double *)(a2 + 80);
    __int16 v3 = 512;
    *(_WORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 512;
    *(double *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = result;
    __int16 v2 = *(_WORD *)(a2 + 120);
    if ((v2 & 0x2000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  __int16 v3 = 0;
  if ((*(_WORD *)(a2 + 120) & 0x2000) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 112);
    v3 |= 0x2000u;
    *(_WORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(double *)(a1 + 112) = result;
    __int16 v2 = *(_WORD *)(a2 + 120);
  }

uint64_t sub_1011AB5F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "centerOfMassPrefiltAccelX", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 120);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "centerOfMassPrefiltAccelY", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }

uint64_t sub_1011AB7E8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011ABC74(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 120);
  if ((v4 & 0x200) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 80), 1u);
    __int16 v4 = *(_WORD *)(v3 + 120);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }

  else if ((*(_WORD *)(result + 120) & 0x2000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 2u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

void *sub_1011ABE20(void *result)
{
  *uint64_t result = &off_1018A0EA0;
  result[28] = 0LL;
  return result;
}

void sub_1011ABE38(PB::Base *a1)
{
}

double sub_1011ABE4C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0EA0;
  *(void *)(a1 + 224) = 0LL;
  uint64_t v2 = *(void *)(a2 + 224);
  if ((v2 & 0x40) != 0)
  {
    double result = *(double *)(a2 + 56);
    uint64_t v3 = 64LL;
    *(void *)(a1 + 224) = 64LL;
    *(double *)(a1 + 56) = result;
    uint64_t v2 = *(void *)(a2 + 224);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 64);
    v3 |= 0x80uLL;
    *(void *)(a1 + 224) = v3;
    *(double *)(a1 + 64) = result;
    uint64_t v2 = *(void *)(a2 + 224);
  }

uint64_t sub_1011AC23C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "emptyField0", *(double *)(a1 + 8));
    uint64_t v5 = *(void *)(a1 + 224);
    if ((v5 & 0x20000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }

  else if ((v5 & 0x20000000) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "emptyField1", *(_BYTE *)(a1 + 216));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_41;
  }

uint64_t sub_1011AC6CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011AD4A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 224);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    uint64_t v4 = *(void *)(v3 + 224);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000000LL) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }

  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 2u);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200000000LL) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }

uint64_t sub_1011AD898(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0ED8;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_1011AD8B0(PB::Base *a1)
{
}

uint64_t sub_1011AD8C4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0ED8;
  *(_DWORD *)(result + 128) = 0;
  int v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 56);
    int v3 = 64;
    *(_DWORD *)(result + 128) = 64;
    *(void *)(result + 56) = v4;
    int v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(result + 128) = v3;
    *(void *)(result + 48) = v5;
    int v2 = *(_DWORD *)(a2 + 128);
  }

uint64_t sub_1011ADB48(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "activityType", *(_DWORD *)(a1 + 104));
    int v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x2000) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }

  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "activityTypeWithoutOverride", *(_DWORD *)(a1 + 108));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }

uint64_t sub_1011ADE38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011AE79C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 128);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56), 1u);
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }

  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 2u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }

uint64_t sub_1011AEA28(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0F10;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1011AEA40(PB::Base *a1)
{
}

double sub_1011AEA54(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0F10;
  *(_DWORD *)(a1 + 48) = 0;
  char v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    char v3 = 8;
    *(_BYTE *)(a1 + 48) = 8;
    *(double *)(a1 + 32) = result;
    char v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 48) & 0x10) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 48) = v3;
    *(double *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = result;
    char v2 = *(_BYTE *)(a2 + 48);
  }

uint64_t sub_1011AEAFC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "primaryAxisX", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "primaryAxisY", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 48) & 0x10) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_6;
  }

uint64_t sub_1011AEBCC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011AEE60(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 48);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    char v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(result + 48) & 0x10) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
  char v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

uint64_t sub_1011AEF10(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0F48;
  *(_DWORD *)(result + 188) = 0;
  return result;
}

void sub_1011AEF28(PB::Base *a1)
{
}

uint64_t sub_1011AEF3C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0F48;
  *(_DWORD *)(result + 188) = 0;
  int v2 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x80000) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 160);
    int v3 = 0x80000;
    *(_DWORD *)(result + 188) = 0x80000;
    *(void *)(result + 16sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v4;
    int v2 = *(_DWORD *)(a2 + 188);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 64);
    v3 |= 0x80u;
    *(_DWORD *)(result + 188) = v3;
    *(void *)(result + 64) = v5;
    int v2 = *(_DWORD *)(a2 + 188);
  }

uint64_t sub_1011AF268(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "algDelay", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 188);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "biasFactor", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }

uint64_t sub_1011AF618(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011B002C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 188);
  if ((v4 & 0x80000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 160), 1u);
    int v4 = *(_DWORD *)(v3 + 188);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }

  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 2u);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }

uint64_t sub_1011B0360(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0F80;
  *(_DWORD *)(result + 136) = 0;
  return result;
}

void sub_1011B0378(PB::Base *a1)
{
}

double sub_1011B038C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0F80;
  *(_DWORD *)(a1 + 136) = 0;
  int v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    int v3 = 4;
    *(_DWORD *)(a1 + 136) = 4;
    *(double *)(a1 + 24) = result;
    int v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 80);
    v3 |= 0x200u;
    *(_DWORD *)(a1 + 136) = v3;
    *(double *)(a1 + 8sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = result;
    int v2 = *(_DWORD *)(a2 + 136);
  }

uint64_t sub_1011B0584(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000) != 0)
  {
    PB::TextFormatter::format(this, "algorithmType", *(_DWORD *)(a1 + 128));
    int v5 = *(_DWORD *)(a1 + 136);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }

  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "alpha", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }

uint64_t sub_1011B07D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0LL;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(_BYTE *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0LL;
            goto LABEL_20;
          }
        }

        int v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }

      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0LL;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }

uint64_t sub_1011B0DC8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 136);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    int v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }

  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 2u);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }

uint64_t sub_1011B0FC8(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0FB8;
  *(_DWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

void sub_1011B0FE0(PB::Base *a1)
{
}

double sub_1011B0FF4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1018A0FB8;
  *(_DWORD *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  char v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    char v3 = 4;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 4;
    *(double *)(a1 + 24) = result;
    char v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v3;
    *(double *)(a1 + 32) = result;
    char v2 = *(_BYTE *)(a2 + 40);
  }

uint64_t sub_1011B1080(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "displacement", *(double *)(a1 + 8));
    char v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0) {
        return PB::TextFormatter::endObject(this);
      }
      goto LABEL_5;
    }
  }

  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 16));
  char v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v5 & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1011B1130(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011B138C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(_BYTE *)(result + 40);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    char v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 2u);
  char v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(double *)(v3 + 16), 4u);
  }

uint64_t sub_1011B1420(uint64_t result)
{
  *(void *)uint64_t result = &off_1018A0FF0;
  *(_DWORD *)(result + 212) = 0;
  return result;
}

void sub_1011B1438(PB::Base *a1)
{
}

uint64_t sub_1011B144C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1018A0FF0;
  *(_DWORD *)(result + 212) = 0;
  int v2 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 152);
    int v3 = 0x40000;
    *(_DWORD *)(result + 212) = 0x40000;
    *(void *)(result + 152) = v4;
    int v2 = *(_DWORD *)(a2 + 212);
    if ((v2 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  int v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 120);
    v3 |= 0x4000u;
    *(_DWORD *)(result + 212) = v3;
    *(void *)(result + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v5;
    int v2 = *(_DWORD *)(a2 + 212);
  }

uint64_t sub_1011B1740(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "centerOfMassAccelZAmplitudeBackwards", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 212);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }

  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }

  PB::TextFormatter::format(this, "height", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }

uint64_t sub_1011B1AB0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5LL || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0LL;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }

uint64_t sub_1011B21EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 212);
  if ((v4 & 0x40000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 152), 1u);
    int v4 = *(_DWORD *)(v3 + 212);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }

  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 2u);
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }

void sub_1011B24E8()
{
  if (qword_1019A4168) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A4168 + 8LL))(qword_1019A4168);
  }
  if (qword_1019A4170) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A4170 + 8LL))(qword_1019A4170);
  }
  if (qword_1019A4178) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A4178 + 8LL))(qword_1019A4178);
  }
  if (qword_1019A4180) {
    (*(void (**)(uint64_t))(*(void *)qword_1019A4180 + 8LL))(qword_1019A4180);
  }
  uint64_t v0 = (void *)qword_1019A4188;
  if (qword_1019A4188)
  {
    operator delete(v0);
  }

void sub_1011B258C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_1019A05B0 & 1) == 0)
  {
    byte_1019A05B0 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion( (wireless_diagnostics::google::protobuf::internal *)0x1E9808,  2005000,  (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPReferencePressure.pb.cc",  a4);
    int v4 = operator new(0x18uLL);
    v4[1] = 0LL;
    v4[2] = 0LL;
    *int v4 = &off_1018A1B50;
    qword_1019A4168 = (uint64_t)v4;
    int v5 = (char *)operator new(0x48uLL);
    *(void *)int v5 = off_1018A1BC8;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
    *(_OWORD *)(v5 + 52) = 0u;
    qword_1019A4170 = (uint64_t)v5;
    uint64_t v6 = operator new(0x18uLL);
    v6[1] = 0LL;
    v6[2] = 0LL;
    *uint64_t v6 = off_1018A1C40;
    qword_1019A4178 = (uint64_t)v6;
    uint64_t v7 = (char *)operator new(0x18uLL);
    v7[23] = 7;
    strcpy(v7, "unknown");
    qword_1019A4188 = (uint64_t)v7;
    uint64_t v8 = operator new(0x50uLL);
    v8[6] = 0LL;
    v8[7] = 0LL;
    *((_DWORD *)v8 + 16) = 0;
    v8[2] = 0LL;
    v8[3] = v7;
    v8[9] = 0LL;
    v8[4] = 0LL;
    v8[5] = 0LL;
    qword_1019A4180 = (uint64_t)v8;
    v4[1] = v8;
    *uint64_t v8 = off_1018A1CB8;
    v8[1] = v6;
    wireless_diagnostics::google::protobuf::internal::OnShutdown( (wireless_diagnostics::google::protobuf::internal *)sub_1011B24E8,  v9);
  }

void *sub_1011B26DC(void *result)
{
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_1018A1B50;
  return result;
}

double sub_1011B26F0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPReferencePressure.pb.cc",  233LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v6 = *(void **)(a1 + 8);
    if (!v6)
    {
      uint64_t v6 = operator new(0x50uLL);
      v6[6] = 0LL;
      void v6[7] = 0LL;
      *((_DWORD *)v6 + 16) = 0;
      *uint64_t v6 = off_1018A1CB8;
      v6[1] = 0LL;
      uint64_t v7 = qword_1019A4188;
      v6[2] = 0LL;
      v6[3] = v7;
      v6[9] = 0LL;
      v6[4] = 0LL;
      v6[5] = 0LL;
      *(void *)(a1 + 8) = v6;
    }

    uint64_t v8 = *(void *)(a2 + 8);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A4168 + 8);
    }
    return sub_1011B2C08((uint64_t)v6, v8);
  }

  return result;
}

void sub_1011B27C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1011B27DC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1018A1B50;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A4168 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1011B2830(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

uint64_t sub_1011B2844(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A4168;
  if (!qword_1019A4168)
  {
    sub_1011B258C(0LL, a2, a3, a4);
    return qword_1019A4168;
  }

  return result;
}

void *sub_1011B2870()
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_1018A1B50;
  return result;
}

std::string *sub_1011B2898(std::string *result)
{
  uint64_t v1 = result;
  if ((result->__r_.__value_.__s.__data_[20] & 1) != 0)
  {
    uint64_t result = (std::string *)result->__r_.__value_.__l.__size_;
    if (result) {
      uint64_t result = sub_1011B28CC(result);
    }
  }

  HIDWORD(v1->__r_.__value_.__r.__words[2]) = 0;
  return result;
}

std::string *sub_1011B28CC(std::string *result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = result[3].__r_.__value_.__s.__data_[4];
  if ((_BYTE)v2)
  {
    if ((result[3].__r_.__value_.__s.__data_[4] & 1) != 0)
    {
      std::string::size_type size = result->__r_.__value_.__l.__size_;
      if (size)
      {
        if (*(_BYTE *)(size + 20)) {
          *(void *)(size + 8) = 0LL;
        }
        *(_DWORD *)(size + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
        int v2 = HIDWORD(result[3].__r_.__value_.__r.__words[0]);
      }
    }

    result->__r_.__value_.__l.__cap_ = 0LL;
    if ((v2 & 8) != 0)
    {
      uint64_t result = (std::string *)result[1].__r_.__value_.__l.__data_;
      if (result != (std::string *)qword_1019A4188) {
        uint64_t result = std::string::operator=(result, (const std::string *)qword_1019A4188);
      }
    }

    v1[1].__r_.__value_.__l.__size_ = 0LL;
    v1[1].__r_.__value_.__l.__cap_ = 0LL;
  }

  if (SLODWORD(v1[2].__r_.__value_.__r.__words[1]) >= 1)
  {
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = *(void *)(v1[2].__r_.__value_.__r.__words[0] + 8 * v4);
      uint64_t result = (std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 32LL))(v5);
      ++v4;
    }

    while (v4 < SLODWORD(v1[2].__r_.__value_.__r.__words[1]));
  }

  LODWORD(v1[2].__r_.__value_.__r.__words[1]) = 0;
  HIDWORD(v1[3].__r_.__value_.__r.__words[0]) = 0;
  return result;
}

uint64_t sub_1011B2970( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      uint64_t v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        uint64_t v7 = operator new(0x50uLL);
        v7[6] = 0LL;
        v7[7] = 0LL;
        *((_DWORD *)v7 + 16) = 0;
        *uint64_t v7 = off_1018A1CB8;
        v7[1] = 0LL;
        uint64_t v8 = qword_1019A4188;
        v7[2] = 0LL;
        v7[3] = v8;
        v7[9] = 0LL;
        v7[4] = 0LL;
        v7[5] = 0LL;
        *(void *)(a1 + 8) = v7;
      }

      char v9 = (char *)*((void *)this + 1);
      if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v18)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v18 = *v9;
        *((void *)this + 1) = v9 + 1;
      }

      int v10 = *((_DWORD *)this + 14);
      int v11 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v10 + 1;
      if (v10 >= v11) {
        return 0LL;
      }
      int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v18);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
      int v14 = *((_DWORD *)this + 14);
      BOOL v15 = __OFSUB__(v14, 1);
      int v16 = v14 - 1;
      if (v16 < 0 == v15) {
        *((_DWORD *)this + 14) = v16;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_1011B2B24( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A4168 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v5,  a2,  a4);
  }

  return result;
}

uint64_t sub_1011B2B50(uint64_t a1, unsigned int a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1019A4168 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1011B4028(v4, a2);
    int v7 = (int)v5;
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

double sub_1011B2BBC(uint64_t a1, void *lpsrc)
{
  return sub_1011B26F0(a1, (uint64_t)lpsrc);
}

double sub_1011B2C08(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v22,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPReferencePressure.pb.cc",  1133LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v22,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v21, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48),  *(_DWORD *)(a2 + 56) + *(_DWORD *)(a1 + 56));
  if (*(int *)(a2 + 56) >= 1)
  {
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
      int v8 = *(_DWORD *)(a1 + 60);
      uint64_t v9 = *(int *)(a1 + 56);
      if ((int)v9 >= v8)
      {
        if (v8 == *(_DWORD *)(a1 + 64))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48),  v8 + 1);
          int v8 = *(_DWORD *)(a1 + 60);
        }

        *(_DWORD *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v8 + 1;
        int v11 = (char *)operator new(0x48uLL);
        *(void *)int v11 = off_1018A1BC8;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
        *(_OWORD *)(v11 + 52) = 0u;
        uint64_t v12 = *(void *)(a1 + 48);
        uint64_t v13 = *(int *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = v13 + 1;
        *(void *)(v12 + 8 * v13) = v11;
      }

      else
      {
        uint64_t v10 = *(void *)(a1 + 48);
        *(_DWORD *)(a1 + 56) = v9 + 1;
        int v11 = *(char **)(v10 + 8 * v9);
      }

      double result = sub_1011B2EA8((uint64_t)v11, v7);
      ++v6;
    }

    while (v6 < *(int *)(a2 + 56));
  }

  LOBYTE(v14) = *(_BYTE *)(a2 + 76);
  if (!(_BYTE)v14) {
    return result;
  }
  if ((*(_BYTE *)(a2 + 76) & 1) != 0)
  {
    *(_DWORD *)(a1 + 76) |= 1u;
    BOOL v15 = *(void **)(a1 + 8);
    if (!v15)
    {
      BOOL v15 = operator new(0x18uLL);
      v15[1] = 0LL;
      void v15[2] = 0LL;
      *BOOL v15 = off_1018A1C40;
      *(void *)(a1 + 8) = v15;
    }

    uint64_t v16 = *(void *)(a2 + 8);
    if (!v16) {
      uint64_t v16 = *(void *)(qword_1019A4180 + 8);
    }
    double result = sub_1011B35EC((uint64_t)v15, v16);
    int v14 = *(_DWORD *)(a2 + 76);
  }

  if ((v14 & 2) != 0)
  {
    unsigned int v17 = *(_DWORD *)(a2 + 16);
    if (v17 >= 2) {
      sub_1011B4234();
    }
    *(_DWORD *)(a1 + 76) |= 2u;
    *(_DWORD *)(a1 + 16) = v17;
    int v14 = *(_DWORD *)(a2 + 76);
  }

  if ((v14 & 4) == 0)
  {
    if ((v14 & 8) == 0) {
      goto LABEL_23;
    }
LABEL_28:
    uint64_t v19 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 76) |= 8u;
    int v20 = *(std::string **)(a1 + 24);
    if (v20 == (std::string *)qword_1019A4188)
    {
      int v20 = (std::string *)operator new(0x18uLL);
      v20->__r_.__value_.__l.__size_ = 0LL;
      v20->__r_.__value_.__l.__cap_ = 0LL;
      v20->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)(a1 + 24) = v20;
    }

    std::string::operator=(v20, v19);
    int v14 = *(_DWORD *)(a2 + 76);
    if ((v14 & 0x10) == 0)
    {
LABEL_24:
      if ((v14 & 0x20) == 0) {
        return result;
      }
      goto LABEL_25;
    }

    goto LABEL_31;
  }

  int v18 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 76) |= 4u;
  *(_DWORD *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v18;
  int v14 = *(_DWORD *)(a2 + 76);
  if ((v14 & 8) != 0) {
    goto LABEL_28;
  }
LABEL_23:
  if ((v14 & 0x10) == 0) {
    goto LABEL_24;
  }
LABEL_31:
  double result = *(double *)(a2 + 32);
  *(_DWORD *)(a1 + 76) |= 0x10u;
  *(double *)(a1 + 32) = result;
  if ((*(_DWORD *)(a2 + 76) & 0x20) != 0)
  {
LABEL_25:
    double result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 76) |= 0x20u;
    *(double *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = result;
  }

  return result;
}

void sub_1011B2E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1011B2E90()
{
  return 1LL;
}

void *sub_1011B2E98@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.ReferencePressure.LogEntry");
}

double sub_1011B2EA8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v9,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPReferencePressure.pb.cc",  577LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v9,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 64);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) != 0)
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 64) |= 1u;
      *(double *)(a1 + 8) = result;
      int v6 = *(_DWORD *)(a2 + 64);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_16;
      }
    }

    else if ((*(_BYTE *)(a2 + 64) & 2) == 0)
    {
      goto LABEL_6;
    }

    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 64) |= 2u;
    *(double *)(a1 + 16) = result;
    int v6 = *(_DWORD *)(a2 + 64);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_17;
    }

void sub_1011B3008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1011B3020(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018A1BC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1011B3030(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018A1BC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

double sub_1011B3050()
{
  uint64_t v0 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v0 = off_1018A1BC8;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
  *(_OWORD *)(v0 + 52) = 0u;
  return result;
}

uint64_t sub_1011B3088(uint64_t result)
{
  if (*(_BYTE *)(result + 64))
  {
    *(_DWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }

  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_1011B30AC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_36;
        }
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 8) = *(void *)v19;
        *(_DWORD *)(a1 + 64) |= 1u;
        char v8 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_36;
        }
LABEL_14:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = *(void *)v19;
        *(_DWORD *)(a1 + 64) |= 2u;
        uint64_t v9 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v9 + 1;
LABEL_19:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 24) = *(void *)v19;
        *(_DWORD *)(a1 + 64) |= 4u;
        uint64_t v10 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v10 + 1;
LABEL_24:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 32) = *(void *)v19;
        *(_DWORD *)(a1 + 64) |= 8u;
        uint64_t v12 = (_BYTE *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        uint64_t v13 = v12 + 1;
        *((void *)this + 1) = v13;
LABEL_30:
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v19);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v14 = v19[0];
        }

        else
        {
          unsigned int v14 = *v13;
          *((void *)this + 1) = v13 + 1;
        }

        if (v14 <= 5 && v14 != 2)
        {
          *(_DWORD *)(a1 + 64) |= 0x10u;
          *(_DWORD *)(a1 + 56) = v14;
        }

        unsigned int v17 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v17 + 1;
LABEL_49:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(void *)v19;
        *(_DWORD *)(a1 + 64) |= 0x20u;
        int v18 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v18 + 1;
LABEL_53:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v19) & 1) != 0)
        {
          *(void *)(a1 + 48) = *(void *)v19;
          *(_DWORD *)(a1 + 64) |= 0x40u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_19;
        }
        goto LABEL_36;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_24;
        }
        goto LABEL_36;
      case 5u:
        int v7 = TagFallback & 7;
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_30;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_49;
        }
        goto LABEL_36;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_36;
        }
        goto LABEL_53;
      default:
        int v7 = TagFallback & 7;
LABEL_36:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_1011B33F4( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 64);
  if ((v6 & 1) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
    int v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(double *)(v5 + 16),  a3);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

uint64_t sub_1011B34DC(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 64);
  if (*(_BYTE *)(a1 + 64))
  {
    int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      int v5 = v4 + 9;
    }
    else {
      int v5 = v4;
    }
    if ((v3 & 0x10) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
      if ((v6 & 0x80000000) != 0)
      {
        int v7 = 11;
      }

      else if (v6 >= 0x80)
      {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 64);
      }

      else
      {
        int v7 = 2;
      }

      v5 += v7;
    }

    unsigned int v9 = v5 + 9;
    if ((v3 & 0x20) == 0) {
      unsigned int v9 = v5;
    }
    if ((v3 & 0x40) != 0) {
      uint64_t result = v9 + 9;
    }
    else {
      uint64_t result = v9;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = result;
  return result;
}

double sub_1011B3588(uint64_t a1, void *lpsrc)
{
  return sub_1011B2EA8(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011B35D4()
{
  return 1LL;
}

void *sub_1011B35DC@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.ReferencePressure.ReferencePressureData");
}

double sub_1011B35EC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v7,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPReferencePressure.pb.cc",  766LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v7,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    double result = *(double *)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    *(double *)(a1 + 8) = result;
  }

  return result;
}

void sub_1011B3674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1011B368C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018A1C40;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1011B369C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018A1C40;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v1);
}

void *sub_1011B36BC()
{
  double result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *double result = off_1018A1C40;
  return result;
}

uint64_t sub_1011B36E4(uint64_t result)
{
  if (*(_BYTE *)(result + 20)) {
    *(void *)(result + 8) = 0LL;
  }
  *(_DWORD *)(result + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0;
  return result;
}

uint64_t sub_1011B36F8( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 9) {
        break;
      }
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v8) & 1) == 0) {
        return 0LL;
      }
      *(void *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 20) |= 1u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0);
  return 0LL;
}

uint64_t sub_1011B37E4( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(double *)(result + 8),  a3);
  }
  return result;
}

uint64_t sub_1011B37FC(uint64_t a1)
{
  uint64_t v1 = ((int)(*(_DWORD *)(a1 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(a1 + 16) = v1;
  return v1;
}

double sub_1011B3818(uint64_t a1, void *lpsrc)
{
  return sub_1011B35EC(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011B3864()
{
  return 1LL;
}

void *sub_1011B386C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.ReferencePressure.ReferencePressureTimestamp");
}

void sub_1011B387C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018A1CB8;
  uint64_t v2 = (uint64_t)a1 + 48;
  sub_1011B38BC((uint64_t)a1);
  sub_10008D0EC(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1011B38BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    BOOL v3 = v2 == qword_1019A4188;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    operator delete((void *)v2);
  }

  if (qword_1019A4180 != a1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

void sub_1011B3938(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_1011B394C()
{
  uint64_t result = operator new(0x50uLL);
  result[6] = 0LL;
  result[7] = 0LL;
  *((_DWORD *)result + 16) = 0;
  *uint64_t result = off_1018A1CB8;
  result[1] = 0LL;
  uint64_t v1 = qword_1019A4188;
  result[2] = 0LL;
  result[3] = v1;
  result[9] = 0LL;
  result[4] = 0LL;
  result[5] = 0LL;
  return result;
}

uint64_t sub_1011B398C( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 48);
  while (1)
  {
    char v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 < *((void *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_7;
    }

    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        *(_DWORD *)(a1 + 76) |= 1u;
        unsigned int v9 = *(void **)(a1 + 8);
        if (!v9)
        {
          unsigned int v9 = operator new(0x18uLL);
          v9[1] = 0LL;
          v9[2] = 0LL;
          *unsigned int v9 = off_1018A1C40;
          *(void *)(a1 + 8) = v9;
        }

        uint64_t v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v50)) {
            return 0LL;
          }
        }

        else
        {
          v50[0] = *v10;
          *((void *)this + 1) = v10 + 1;
        }

        int v16 = *((_DWORD *)this + 14);
        int v17 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v16 + 1;
        if (v16 >= v17) {
          return 0LL;
        }
        int v18 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v50[0]);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v18);
        int v20 = *((_DWORD *)this + 14);
        BOOL v21 = __OFSUB__(v20, 1);
        int v22 = v20 - 1;
        if (v22 < 0 == v21) {
          *((_DWORD *)this + 14) = v22;
        }
        uint64_t v23 = (_BYTE *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        uint64_t v12 = v23 + 1;
        *((void *)this + 1) = v12;
        goto LABEL_38;
      case 2u:
        int v8 = TagFallback & 7;
        uint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
LABEL_38:
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v50);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v24 = v50[0];
        }

        else
        {
          unsigned int v24 = *v12;
          *((void *)this + 1) = v12 + 1;
        }

        if (v24 <= 1)
        {
          *(_DWORD *)(a1 + 76) |= 2u;
          *(_DWORD *)(a1 + 16) = v24;
        }

        uint64_t v26 = (_BYTE *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        unsigned int v14 = v26 + 1;
        *((void *)this + 1) = v14;
LABEL_48:
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v50);
          if (!(_DWORD)result) {
            return result;
          }
          unsigned int v27 = v50[0];
          uint64_t v28 = (_BYTE *)*((void *)this + 1);
          unint64_t v13 = *((void *)this + 2);
        }

        else
        {
          unsigned int v27 = *v14;
          uint64_t v28 = v14 + 1;
          *((void *)this + 1) = v28;
        }

        *(_DWORD *)(a1 + 2sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v27;
        int v15 = *(_DWORD *)(a1 + 76) | 4;
        *(_DWORD *)(a1 + 76) = v15;
        *((void *)this + 1) = v28 + 1;
LABEL_56:
        *(_DWORD *)(a1 + 76) = v15 | 8;
        char v29 = *(__int128 **)(a1 + 24);
        if (v29 == (__int128 *)qword_1019A4188)
        {
          unint64_t v31 = operator new(0x18uLL);
          unsigned int v30 = v31;
          if (*((char *)v29 + 23) < 0)
          {
            sub_1010DD48C(v31, *(void **)v29, *((void *)v29 + 1));
          }

          else
          {
            __int128 v32 = *v29;
            v31[2] = *((void *)v29 + 2);
            *(_OWORD *)unint64_t v31 = v32;
          }

          *(void *)(a1 + 24) = v30;
        }

        else
        {
          unsigned int v30 = *(void **)(a1 + 24);
        }

        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v30);
        if (!(_DWORD)result) {
          return result;
        }
        unint64_t v33 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v33 + 1;
LABEL_66:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v50) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 32) = *(void *)v50;
        *(_DWORD *)(a1 + 76) |= 0x10u;
        uint64_t v34 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v34 + 1;
LABEL_70:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v50) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = *(void *)v50;
        *(_DWORD *)(a1 + 76) |= 0x20u;
        char v35 = (_BYTE *)*((void *)this + 1);
        if ((unint64_t)v35 < *((void *)this + 2) && *v35 == 58)
        {
          do
          {
            *((void *)this + 1) = v35 + 1;
LABEL_74:
            int v36 = *(_DWORD *)(a1 + 60);
            uint64_t v37 = *(int *)(a1 + 56);
            if ((int)v37 >= v36)
            {
              if (v36 == *(_DWORD *)(a1 + 64))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v36 + 1);
                int v36 = *(_DWORD *)(a1 + 60);
              }

              *(_DWORD *)(a1 + 6sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v36 + 1;
              unint64_t v39 = (char *)operator new(0x48uLL);
              *(void *)unint64_t v39 = off_1018A1BC8;
              *(_OWORD *)(v39 + 8) = 0u;
              *(_OWORD *)(v39 + 24) = 0u;
              *(_OWORD *)(v39 + 4sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
              *(_OWORD *)(v39 + 52) = 0u;
              uint64_t v40 = *(void *)(a1 + 48);
              uint64_t v41 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v41 + 1;
              *(void *)(v40 + 8 * v41) = v39;
            }

            else
            {
              uint64_t v38 = *(void *)(a1 + 48);
              *(_DWORD *)(a1 + 56) = v37 + 1;
              unint64_t v39 = *(char **)(v38 + 8 * v37);
            }

            unsigned int v42 = (char *)*((void *)this + 1);
            if ((unint64_t)v42 >= *((void *)this + 2) || *v42 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v50)) {
                return 0LL;
              }
            }

            else
            {
              v50[0] = *v42;
              *((void *)this + 1) = v42 + 1;
            }

            int v43 = *((_DWORD *)this + 14);
            int v44 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v43 + 1;
            if (v43 >= v44) {
              return 0LL;
            }
            int v45 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v50[0]);
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v45);
            int v47 = *((_DWORD *)this + 14);
            BOOL v21 = __OFSUB__(v47, 1);
            int v48 = v47 - 1;
            if (v48 < 0 == v21) {
              *((_DWORD *)this + 14) = v48;
            }
            char v35 = (_BYTE *)*((void *)this + 1);
            char v49 = (_BYTE *)*((void *)this + 2);
          }

          while (v35 < v49 && *v35 == 58);
          if (v35 == v49 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
        }

        break;
      case 3u:
        int v8 = TagFallback & 7;
        unsigned int v14 = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_48;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        int v15 = *(_DWORD *)(a1 + 76);
        goto LABEL_56;
      case 5u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_66;
        }
        goto LABEL_26;
      case 6u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_70;
        }
        goto LABEL_26;
      case 7u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_26;
        }
        goto LABEL_74;
      default:
        int v8 = TagFallback & 7;
LABEL_26:
        if (v8 == 4) {
          return 1LL;
        }
        continue;
    }
  }

void sub_1011B3F00(_Unwind_Exception *a1)
{
}

uint64_t sub_1011B3F14( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 76);
  if ((v6 & 1) != 0)
  {
    uint64_t v8 = *(void *)(result + 8);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_1019A4180 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v8,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 76);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(_DWORD *)(v5 + 16),  (int)a2,  a4);
  int v6 = *(_DWORD *)(v5 + 76);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_1011B4028(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 76);
  if (!*(_BYTE *)(a1 + 76)) {
    goto LABEL_37;
  }
  if ((v3 & 1) == 0)
  {
    int v4 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_8;
  }

  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_1019A4180 + 8);
  }
  int v6 = ((int)(*(_DWORD *)(v5 + 20) << 31) >> 31) & 9;
  *(_DWORD *)(v5 + 16) = v6;
  int v4 = v6 | 2;
  int v3 = *(_DWORD *)(a1 + 76);
  if ((v3 & 2) != 0)
  {
LABEL_8:
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      int v8 = 11;
    }

    else if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 76);
    }

    else
    {
      int v8 = 2;
    }

    v4 += v8;
  }

double sub_1011B41D0(uint64_t a1, void *lpsrc)
{
  return sub_1011B2C08(a1, (uint64_t)lpsrc);
}

uint64_t sub_1011B421C()
{
  return 1LL;
}

void *sub_1011B4224@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.ReferencePressure.ReferencePressureTile");
}

void sub_1011B4234()
{
}

void sub_1011B425C()
{
}

uint64_t sub_1011B4288(unsigned int a1)
{
  return (a1 < 5) & (0x19u >> a1);
}

BOOL sub_1011B42A0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 1) {
    return *(_BYTE *)(a2 + 24) && *(_DWORD *)(a2 + 8) == 1;
  }
  return result;
}

uint64_t sub_1011B42C4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) & 1;
}

uint64_t sub_1011B42D0(int a1, int a2)
{
  return a1 & ~a2;
}

void sub_1011B42D8(uint64_t a1)
{
  *(double *)(a1 + 376) = vabdd_f64(sub_101171D4C(), *(double *)(a1 + 272));
  if (*(_BYTE *)(a1 + 304))
  {
    *(_WORD *)(a1 + 307) = 0;
    if (*(_BYTE *)(a1 + 160))
    {
      *(double *)(a1 + 28sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = sub_101171D4C();
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      uint64_t v2 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = *(void *)(a1 + 120);
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "CLRGE,scheduling AP wake after,%.3lf,sec",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        uint64_t v14 = *(void *)(a1 + 120);
        int v26 = 134217984;
        uint64_t v27 = v14;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,scheduling AP wake after,%.3lf,sec",  COERCE_DOUBLE(&v26));
        int v16 = (char *)v15;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      sub_1011B7428(a1);
    }

    if (+[CLGnssProviderAdapter isSupported](&OBJC_CLASS___CLGnssProviderAdapter, "isSupported")
      && *(void *)(a1 + 16))
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      uint64_t v4 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,CLRhythmicGnss", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        LOWORD(v26) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#wigo,off,CLRhythmicGnss",  &v26,  2);
        uint64_t v20 = (char *)v19;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v19);
        if (v20 != buf) {
          free(v20);
        }
      }

      BOOL v5 = 1;
      sub_1011B6BA8(a1, 1, 0, *(_DWORD *)(a1 + 88));
      [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0];
      if (!*(_BYTE *)(a1 + 305))
      {
        double v6 = *(double *)(a1 + 288);
        if (v6 != 0.0) {
          BOOL v5 = v6 > *(double *)(a1 + 296);
        }
      }

      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      uint64_t v7 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 288);
        uint64_t v9 = *(void *)(a1 + 296);
        *(_DWORD *)buf = 134218496;
        *(void *)&uint8_t buf[4] = v8;
        __int16 v33 = 2048;
        uint64_t v34 = v9;
        __int16 v35 = 1024;
        BOOL v36 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "fLastWifiCellOnTime_s,%f,fLastWifiCellOffTime_s,%f,isTimeToStopWifiCellPosition,%d",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        uint64_t v21 = *(void *)(a1 + 288);
        uint64_t v22 = *(void *)(a1 + 296);
        int v26 = 134218496;
        uint64_t v27 = v21;
        __int16 v28 = 2048;
        uint64_t v29 = v22;
        __int16 v30 = 1024;
        BOOL v31 = v5;
        LODWORD(v25) = 28;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "fLastWifiCellOnTime_s,%f,fLastWifiCellOffTime_s,%f,isTimeToStopWifiCellPosition,%d",  COERCE_DOUBLE(&v26),  v25);
        unsigned int v24 = (char *)v23;
        sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v23);
        if (v24 != buf) {
          free(v24);
        }
      }

      if (v5)
      {
        sub_1011B7A40(a1);
        sub_1011B7F18(a1);
        *(_BYTE *)(a1 + 305) = 0;
        *(double *)(a1 + 288) = sub_101171D4C();
      }

      *(_BYTE *)(a1 + 304) = 0;
      sub_1011B83F0(a1);
      double v10 = *(double *)(a1 + 272);
      double v11 = 0.0;
      if (v10 > 0.0) {
        double v11 = *(double *)(a1 + 280) - v10;
      }
      sub_1011B85BC(a1, v11, *(double *)(a1 + 432));
      *(double *)(a1 + 432) = sub_1011B88C4();
      sub_1011B890C(a1, v11);
      uint64_t v12 = *(void *)(a1 + 200);
      if (v12)
      {
        *(double *)buf = v11;
        (*(void (**)(uint64_t, _BYTE *))(*(void *)v12 + 48LL))(v12, buf);
      }
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    char v13 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "CLRGE,stopGps,already stopped gps session",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      LOWORD(v26) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,stopGps,already stopped gps session",  &v26,  2);
      int v18 = (char *)v17;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v17);
      if (v18 != buf) {
        free(v18);
      }
    }
  }

BOOL sub_1011B4988(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 304))
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    uint64_t v2 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,startGps,already started", buf, 2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    LOWORD(v61) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,startGps,already started",  &v61,  2);
    uint64_t v9 = (char *)v41;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v41);
    goto LABEL_102;
  }

  if (*(_BYTE *)(a1 + 160))
  {
    if (*(_BYTE *)(a1 + 306))
    {
      if (*(_BYTE *)(a1 + 152)) {
        int isTypeStatic = CLMotionActivity::isTypeStatic(*(unsigned int *)(a1 + 320));
      }
      else {
        int isTypeStatic = 0;
      }
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      uint64_t v12 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(_DWORD *)(a1 + 320);
        if (*(_BYTE *)(a1 + 160)) {
          int v14 = *(unsigned __int8 *)(a1 + 152);
        }
        else {
          int v14 = 0;
        }
        int v15 = CLMotionActivity::isTypeStatic(*(unsigned int *)(a1 + 320));
        *(_DWORD *)buf = 67175425;
        *(_DWORD *)&uint8_t buf[4] = v13;
        *(_WORD *)&buf[8] = 1025;
        *(_DWORD *)&buf[10] = v14;
        *(_WORD *)&buf[14] = 1025;
        *(_DWORD *)&uint8_t buf[16] = v15;
        *(_WORD *)&buf[20] = 1025;
        *(_DWORD *)&buf[22] = isTypeStatic;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "CLRGE,block RhythmicGnss based on motion state,%{private}d,isStaticDeviceOptimizationEnabled,%{private}d,isSta tic,%{private}d,blockRGBasedOnMotionState,%{private}d",  buf,  0x1Au);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        int v42 = *(_DWORD *)(a1 + 320);
        if (*(_BYTE *)(a1 + 160)) {
          int v43 = *(unsigned __int8 *)(a1 + 152);
        }
        else {
          int v43 = 0;
        }
        uint64_t v44 = qword_101934888;
        int v45 = CLMotionActivity::isTypeStatic(*(unsigned int *)(a1 + 320));
        int v61 = 67175425;
        *(_DWORD *)unsigned int v62 = v42;
        *(_WORD *)&v62[4] = 1025;
        *(_DWORD *)&v62[6] = v43;
        LOWORD(v63) = 1025;
        *(_DWORD *)((char *)&v63 + 2) = v45;
        HIWORD(v63) = 1025;
        *(_DWORD *)char v64 = isTypeStatic;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v44,  0LL,  "CLRGE,block RhythmicGnss based on motion state,%{private}d,isStaticDeviceOptimizationEnabled,%{private}d,isSta tic,%{private}d,blockRGBasedOnMotionState,%{private}d",  &v61,  26);
        int v47 = (char *)v46;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v46);
        if (v47 != buf) {
          free(v47);
        }
      }

      if ((isTypeStatic & 1) != 0) {
        return 0LL;
      }
      if (sub_1011B625C(a1))
      {
        double v16 = *(double *)(a1 + 272);
        double v17 = a2 - v16;
        double v18 = *(double *)(a1 + 280) - v16;
        if (a2 - v16 >= *(double *)(a1 + 96) - v18)
        {
          if (+[CLGnssProviderAdapter isSupported](&OBJC_CLASS___CLGnssProviderAdapter, "isSupported")
            && *(void *)(a1 + 16))
          {
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_1018A1D80);
            }
            double v25 = (os_log_s *)qword_101934888;
            if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#wigo,on,CLRhythmicGnss", buf, 2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934880 != -1) {
                dispatch_once(&qword_101934880, &stru_1018A1D80);
              }
              LOWORD(v61) = 0;
              LODWORD(v58) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#wigo,on,CLRhythmicGnss",  &v61,  v58);
              char v49 = (char *)v48;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)",  "%s\n",  v48);
              if (v49 != buf) {
                free(v49);
              }
            }

            if (*(_BYTE *)(a1 + 105))
            {
              uint64_t v26 = *(void *)(a1 + 8);
              if (*(int *)(v26 + 8) <= 0)
              {
                sub_1010DDBC0(__p, "none");
                sub_100AD5668(v26, (uint64_t *)__p);
                if (v60 < 0) {
                  operator delete(__p[0]);
                }
                if (qword_101934880 != -1) {
                  dispatch_once(&qword_101934880, &stru_1018A1D80);
                }
                uint64_t v27 = (os_log_s *)qword_101934888;
                if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#pah,on,CLRhythmicGnss", buf, 2u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_101934880 != -1) {
                    dispatch_once(&qword_101934880, &stru_1018A1D80);
                  }
                  LOWORD(v61) = 0;
                  LODWORD(v58) = 2;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "#pah,on,CLRhythmicGnss",  &v61,  v58);
                  char v57 = (char *)v56;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)",  "%s\n",  v56);
                  if (v57 != buf) {
                    free(v57);
                  }
                }
              }
            }

            *(void *)(a1 + 328) = -1LL;
            *(_BYTE *)(a1 + 336) = 0;
            *(void *)(a1 + 344) = 0LL;
            *(void *)(a1 + 352) = 0xBFF0000000000000LL;
            *(void *)(a1 + 392) = 0LL;
            *(_OWORD *)(a1 + 36sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 0u;
            *(_OWORD *)(a1 + 376) = 0u;
            double v28 = *(double *)(a1 + 96);
            *(double *)(a1 + 384) = v28;
            *(double *)(a1 + 392) = v28;
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_1018A1D80);
            }
            uint64_t v29 = (os_log_s *)qword_101934888;
            if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v30 = *(void *)(a1 + 392);
              uint64_t v31 = *(void *)(a1 + 96);
              *(_DWORD *)buf = 134349312;
              *(void *)&uint8_t buf[4] = v30;
              *(_WORD *)&_BYTE buf[12] = 2050;
              *(void *)&buf[14] = v31;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "CLRGE,first fix received,realInterSessionDuration_s,%{public}.3lf,intendedInterSessionDuration_s,%{public}.3lf",  buf,  0x16u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934880 != -1) {
                dispatch_once(&qword_101934880, &stru_1018A1D80);
              }
              uint64_t v50 = *(void *)(a1 + 392);
              double v51 = *(double *)(a1 + 96);
              int v61 = 134349312;
              *(void *)unsigned int v62 = v50;
              *(_WORD *)&v62[8] = 2050;
              double v63 = v51;
              LODWORD(v58) = 22;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGE,first fix received,realInterSessionDuration_s,%{public}.3lf,intendedInterSessionDuration_s,%{public}.3lf",  &v61,  v58);
              char v53 = (char *)v52;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)",  "%s\n",  v52);
              if (v53 != buf) {
                free(v53);
              }
            }

            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_1018A1D80);
            }
            __int128 v32 = (os_log_s *)qword_101934888;
            if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "CLRGE,cancelling sleep at start",  buf,  2u);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934880 != -1) {
                dispatch_once(&qword_101934880, &stru_1018A1D80);
              }
              LOWORD(v61) = 0;
              LODWORD(v58) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,cancelling sleep at start",  &v61,  v58);
              unint64_t v55 = (char *)v54;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)",  "%s\n",  v54);
              if (v55 != buf) {
                free(v55);
              }
            }

            sub_1011B67A0(a1);
            __asm { FMOV            V0.2D, #-1.0 }

            *(_OWORD *)buf = _Q0;
            *(_WORD *)&uint8_t buf[16] = 0;
            if (*(_BYTE *)(a1 + 128)) {
              int v38 = 11;
            }
            else {
              int v38 = 0;
            }
            *(_DWORD *)&buf[20] = v38;
            *(_DWORD *)&buf[24] = 0;
            sub_1011B6BA8(a1, 1, 1, *(_DWORD *)(a1 + 88));
            [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0 registrationInfo:sub_100419014(buf)];
            *(_BYTE *)(a1 + 304) = 1;
            *(double *)(a1 + 272) = a2;
            if (a2 - *(double *)(a1 + 296) >= *(double *)(a1 + 136))
            {
              sub_1011B6C18(a1);
              sub_1011B7020(a1);
              *(_BYTE *)(a1 + 305) = 1;
              *(double *)(a1 + 296) = a2;
            }

            return 1LL;
          }

          else
          {
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_1018A1D80);
            }
            unint64_t v39 = (os_log_s *)qword_101934888;
            if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "CLRGE,failed to start GPS", buf, 2u);
            }

            BOOL result = sub_1002921D0(115, 0);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934880 != -1) {
                dispatch_once(&qword_101934880, &stru_1018A1D80);
              }
              LOWORD(v61) = 0;
              LODWORD(v58) = 2;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  16LL,  "CLRGE,failed to start GPS",  &v61,  v58);
              uint64_t v9 = (char *)v40;
              sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)",  "%s\n",  v40);
              goto LABEL_102;
            }
          }
        }

        else
        {
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_1018A1D80);
          }
          uint64_t v19 = (os_log_s *)qword_101934888;
          if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = *(void *)(a1 + 96);
            *(_DWORD *)buf = 134349568;
            *(void *)&uint8_t buf[4] = v20;
            *(_WORD *)&_BYTE buf[12] = 2050;
            *(double *)&buf[14] = v17;
            *(_WORD *)&buf[22] = 2050;
            *(double *)&buf[24] = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "CLRGE,startGps,gps was on within last %{public}.3lf seconds so not turning on again, timeSinceLastStart,%{ public}.3lf,lastSessionDuration,%{public}.3lf",  buf,  0x20u);
          }

          BOOL result = sub_1002921D0(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934880 != -1) {
              dispatch_once(&qword_101934880, &stru_1018A1D80);
            }
            uint64_t v21 = *(void *)(a1 + 96);
            int v61 = 134349568;
            *(void *)unsigned int v62 = v21;
            *(_WORD *)&v62[8] = 2050;
            double v63 = v17;
            *(_WORD *)char v64 = 2050;
            *(double *)&v64[2] = v18;
            LODWORD(v58) = 32;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,startGps,gps was on within last %{public}.3lf seconds so not turning on again, timeSinceLastStart,%{ public}.3lf,lastSessionDuration,%{public}.3lf",  &v61,  v58);
            uint64_t v9 = (char *)v22;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)",  "%s\n",  v22);
LABEL_102:
            if (v9 != buf) {
              free(v9);
            }
            return 0LL;
          }
        }
      }

      else
      {
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        int v23 = (os_log_s *)qword_101934888;
        if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "CLRGE,power budget exceeded in proactive mode",  buf,  2u);
        }

        BOOL result = sub_1002921D0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934880 != -1) {
            dispatch_once(&qword_101934880, &stru_1018A1D80);
          }
          LOWORD(v61) = 0;
          LODWORD(v58) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,power budget exceeded in proactive mode",  &v61,  v58);
          uint64_t v9 = (char *)v24;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)",  "%s\n",  v24);
          goto LABEL_102;
        }
      }
    }

    else
    {
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      double v10 = (os_log_s *)qword_101934888;
      if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "CLRGE,startGps,LS toggle off,not starting GPS",  buf,  2u);
      }

      BOOL result = sub_1002921D0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934880 != -1) {
          dispatch_once(&qword_101934880, &stru_1018A1D80);
        }
        LOWORD(v61) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,startGps,LS toggle off,not starting GPS",  &v61,  2);
        uint64_t v9 = (char *)v11;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v11);
        goto LABEL_102;
      }
    }
  }

  else
  {
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    uint64_t v7 = (os_log_s *)qword_101934888;
    if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLRGE,can not startGps as no config", buf, 2u);
    }

    BOOL result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934880 != -1) {
        dispatch_once(&qword_101934880, &stru_1018A1D80);
      }
      LOWORD(v61) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "CLRGE,can not startGps as no config",  &v61,  2);
      uint64_t v9 = (char *)v8;
      sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v8);
      goto LABEL_102;
    }
  }

  return result;
}

void sub_1011B5950( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1011B5974(uint64_t a1, uint64_t *a2)
{
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  uint64_t v4 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "enableRhythmicGnssEngine", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    LOWORD(v57) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  1LL,  "enableRhythmicGnssEngine",  &v57,  2);
    unint64_t v39 = (uint8_t *)v38;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssEngine::enableRhythmicGnssEngine(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)",  "%s\n",  v38);
    if (v39 != buf) {
      free(v39);
    }
  }

  int v5 = *(unsigned __int8 *)(a1 + 160);
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  double v6 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    int v9 = *((_DWORD *)a2 + 4);
    uint64_t v10 = a2[3];
    int v11 = *((unsigned __int8 *)a2 + 32);
    int v12 = *((unsigned __int8 *)a2 + 33);
    double v13 = *((double *)a2 + 6);
    if (v13 == 1.79769313e308) {
      double v13 = -1.0;
    }
    int v14 = *((unsigned __int8 *)a2 + 34);
    else {
      double v15 = *((double *)a2 + 5);
    }
    int v16 = *((unsigned __int8 *)a2 + 56);
    int v17 = *((unsigned __int8 *)a2 + 57);
    uint64_t v18 = a2[8];
    uint64_t v19 = a2[9];
    int v20 = *((unsigned __int8 *)a2 + 80);
    *(_DWORD *)buf = 134352384;
    uint64_t v86 = v7;
    __int16 v87 = 2050;
    uint64_t v88 = v8;
    __int16 v89 = 1026;
    int v90 = v9;
    __int16 v91 = 2050;
    uint64_t v92 = v10;
    __int16 v93 = 1026;
    int v94 = v11;
    __int16 v95 = 1026;
    int v96 = v12;
    __int16 v97 = 2050;
    double v98 = v13;
    __int16 v99 = 1026;
    int v100 = v14;
    __int16 v101 = 2050;
    double v102 = v15;
    __int16 v103 = 1026;
    int v104 = v16;
    __int16 v105 = 1026;
    int v106 = v17;
    __int16 v107 = 2050;
    uint64_t v108 = v18;
    __int16 v109 = 2050;
    uint64_t v110 = v19;
    __int16 v111 = 1026;
    int v112 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "CLRGE,enableRhythmicGnssEngine,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{pu blic}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAsser tion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudg etPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCell InterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDeviceOptimizationEnabled,%{public}d",  buf,  0x72u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    uint64_t v40 = *a2;
    uint64_t v41 = a2[1];
    int v42 = *((_DWORD *)a2 + 4);
    uint64_t v43 = a2[3];
    int v44 = *((unsigned __int8 *)a2 + 32);
    int v45 = *((unsigned __int8 *)a2 + 33);
    double v46 = *((double *)a2 + 6);
    if (v46 == 1.79769313e308) {
      double v46 = -1.0;
    }
    int v47 = *((unsigned __int8 *)a2 + 34);
    else {
      double v48 = *((double *)a2 + 5);
    }
    int v49 = *((unsigned __int8 *)a2 + 56);
    int v50 = *((unsigned __int8 *)a2 + 57);
    uint64_t v52 = a2[8];
    uint64_t v51 = a2[9];
    int v53 = *((unsigned __int8 *)a2 + 80);
    int v57 = 134352384;
    uint64_t v58 = v40;
    __int16 v59 = 2050;
    uint64_t v60 = v41;
    __int16 v61 = 1026;
    int v62 = v42;
    __int16 v63 = 2050;
    uint64_t v64 = v43;
    __int16 v65 = 1026;
    int v66 = v44;
    __int16 v67 = 1026;
    int v68 = v45;
    __int16 v69 = 2050;
    double v70 = v46;
    __int16 v71 = 1026;
    int v72 = v47;
    __int16 v73 = 2050;
    double v74 = v48;
    __int16 v75 = 1026;
    int v76 = v49;
    __int16 v77 = 1026;
    int v78 = v50;
    __int16 v79 = 2050;
    uint64_t v80 = v52;
    __int16 v81 = 2050;
    uint64_t v82 = v51;
    __int16 v83 = 1026;
    int v84 = v53;
    LODWORD(v56) = 114;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "CLRGE,enableRhythmicGnssEngine,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{pu blic}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAsser tion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudg etPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCell InterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDeviceOptimizationEnabled,%{public}d",  &v57,  v56);
    unint64_t v55 = (uint8_t *)v54;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssEngine::enableRhythmicGnssEngine(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)",  "%s\n",  v54);
    if (v55 != buf) {
      free(v55);
    }
  }

  if (!v5
    || *(_DWORD *)(a1 + 88) != *((_DWORD *)a2 + 4)
    || *(unsigned __int8 *)(a1 + 104) != *((unsigned __int8 *)a2 + 32)
    || *(double *)(a1 + 80) != *((double *)a2 + 1)
    || *(double *)(a1 + 112) != *((double *)a2 + 5)
    || *(double *)(a1 + 120) != *((double *)a2 + 6)
    || *(double *)(a1 + 96) != *((double *)a2 + 3)
    || *(unsigned __int8 *)(a1 + 152) != *((unsigned __int8 *)a2 + 80))
  {
    double v25 = (_OWORD *)(a1 + 72);
    if (*(_BYTE *)(a1 + 160))
    {
      __int128 v26 = *((_OWORD *)a2 + 1);
      *double v25 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 88) = v26;
      __int128 v27 = *((_OWORD *)a2 + 2);
      __int128 v28 = *((_OWORD *)a2 + 3);
      __int128 v29 = *((_OWORD *)a2 + 4);
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 80);
      *(_OWORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v28;
      *(_OWORD *)(a1 + 136) = v29;
      *(_OWORD *)(a1 + 104) = v27;
      if (!v5) {
        goto LABEL_38;
      }
    }

    else
    {
      __int128 v30 = *((_OWORD *)a2 + 1);
      *double v25 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 88) = v30;
      __int128 v31 = *((_OWORD *)a2 + 2);
      __int128 v32 = *((_OWORD *)a2 + 3);
      __int128 v33 = *((_OWORD *)a2 + 4);
      *(void *)(a1 + 152) = a2[10];
      *(_OWORD *)(a1 + 12sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = v32;
      *(_OWORD *)(a1 + 136) = v33;
      *(_OWORD *)(a1 + 104) = v31;
      *(_BYTE *)(a1 + 16sub_10111D8E4(&v22, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0) = 1;
      if (!v5)
      {
LABEL_38:
        uint64_t v34 = *(void *)(a1 + 40);
        if (v34)
        {
          [*(id *)(v34 + 16) register:*(void *)(v34 + 8) forNotification:2 registrationInfo:0];
          [*(id *)(*(void *)(a1 + 40) + 16) register:*(void *)(*(void *)(a1 + 40) + 8) forNotification:3 registrationInfo:0];
        }

        uint64_t v35 = *(void *)(a1 + 56);
        if (v35) {
          [*(id *)(v35 + 16) register:*(void *)(v35 + 8) forNotification:1 registrationInfo:0];
        }
        uint64_t v36 = *(void *)(a1 + 48);
        if (v36) {
          [*(id *)(v36 + 16) register:*(void *)(v36 + 8) forNotification:4 registrationInfo:0];
        }
        [*(id *)(a1 + 168) setNextFireDelay:1.0 interval:1.0];
        double v37 = sub_101171D4C();
        sub_1011B4988(a1, v37);
      }
    }

    return 1LL;
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A1D80);
  }
  uint64_t v21 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "enableRhythmicGnssEngine,no config change",  buf,  2u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A1D80);
    }
    LOWORD(v57) = 0;
    LODWORD(v56) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "enableRhythmicGnssEngine,no config change",  &v57,  v56);
    unsigned int v24 = (uint8_t *)v23;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLRhythmicGnssEngine::enableRhythmicGnssEngine(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)",  "%s\n",  v23);
    if (v24 != buf) {
      free(v24);
    }
    return 0LL;
  }

  return result;
}