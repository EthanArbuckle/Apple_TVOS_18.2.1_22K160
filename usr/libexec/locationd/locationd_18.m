uint64_t sub_100816A9C( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  v5 = result;
  if ((*(_BYTE *)(result + 44) & 1) != 0) {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(result + 8),  (unint64_t)a2,  a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    v6 = 0LL;
    do
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(void *)(*(void *)(v5 + 16) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 24));
  }

  return result;
}

uint64_t sub_100816B10(uint64_t a1, unint64_t a2)
{
  if ((*(_BYTE *)(a1 + 44) & 1) != 0) {
    int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8),  a2)
  }
       + 1;
  else {
    int v3 = 0;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  uint64_t result = (v4 + v3);
  if ((int)v4 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    do
    {
      int v7 = *(unsigned __int8 *)(*(void *)v6 + 28LL);
      if (*(_BYTE *)(*(void *)v6 + 28LL))
      {
        if ((v7 & 2) != 0) {
          int v7 = ((v7 << 31 >> 31) & 9) + 9;
        }
        else {
          int v7 = (v7 << 31 >> 31) & 9;
        }
      }

      *(_DWORD *)(*(void *)v6 + 24LL) = v7;
      uint64_t result = (result + v7 + 1);
      v6 += 8LL;
      --v4;
    }

    while (v4);
  }

  *(_DWORD *)(a1 + 40) = result;
  return result;
}

void sub_100816B9C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100816BE8()
{
  return 1LL;
}

void *sub_100816BF0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.LSLMapRoadSegment");
}

void sub_100816C00(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1018592F0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A17E0 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100816C54(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100816C68()
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_1018592F0;
  return result;
}

uint64_t sub_100816C90( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      int v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        int v7 = operator new(0x30uLL);
        v7[5] = 0LL;
        *int v7 = off_101859278;
        v7[1] = 0LL;
        v7[2] = 0LL;
        v7[3] = 0LL;
        *((_DWORD *)v7 + 8) = 0;
        *(void *)(a1 + 8) = v7;
      }

      v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v17)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0LL;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_100816E34( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A17E0 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v5,  a2,  a4);
  }

  return result;
}

uint64_t sub_100816E60(uint64_t a1, unint64_t a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1019A17E0 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100816B10(v4, a2);
    int v7 = (int)v5;
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_100816ECC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_100816F18()
{
  return 1LL;
}

void *sub_100816F20@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.LSLHeadingSupplInfo");
}

void sub_100816F30(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v17,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  4428LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v17,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v16, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = a1[5];
      uint64_t v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  v7 + 1);
          int v7 = a1[5];
        }

        a1[5] = v7 + 1;
        int v10 = (char *)operator new(0x50uLL);
        *(void *)int v10 = off_101859200;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 24) = 0u;
        *((void *)v10 + 8) = 0xFFFFFFFFLL;
        *((_DWORD *)v10 + 18) = 0;
        *((void *)v10 + 6) = 0LL;
        *((void *)v10 + 7) = 0LL;
        *((void *)v10 + 5) = 0LL;
        uint64_t v11 = *((void *)a1 + 1);
        uint64_t v12 = (int)a1[4];
        a1[4] = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *((void *)a1 + 1);
        a1[4] = v8 + 1;
        int v10 = *(char **)(v9 + 8 * v8);
      }

      sub_10081537C((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 16));
  }

  LOBYTE(v13) = *(_BYTE *)(a2 + 44);
  if ((_BYTE)v13)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    {
      int v14 = *(_DWORD *)(a2 + 32);
      a1[11] |= 1u;
      a1[8] = v14;
      int v13 = *(_DWORD *)(a2 + 44);
    }

    if ((v13 & 4) != 0)
    {
      unsigned int v15 = *(_DWORD *)(a2 + 36);
      if (v15 >= 9) {
        sub_10124B830();
      }
      a1[11] |= 4u;
      a1[9] = v15;
    }
  }

void sub_1008170E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1008170FC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859368;
  sub_10008D0EC((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100817134(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

uint64_t sub_100817148(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A17E8;
  if (!qword_1019A17E8)
  {
    sub_10080F3B0(0LL, a2, a3, a4);
    return qword_1019A17E8;
  }

  return result;
}

double sub_100817174()
{
  v0 = operator new(0x30uLL);
  v0[1] = 0LL;
  v0[2] = 0LL;
  void *v0 = off_101859368;
  *((_DWORD *)v0 + 6) = 0;
  *(void *)&double result = 0x8FFFFFFFFLL;
  *((_OWORD *)v0 + 2) = xmmword_101338760;
  return result;
}

uint64_t sub_1008171AC(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_BYTE *)(result + 44)) {
    *(void *)(result + 32) = 0x8FFFFFFFFLL;
  }
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 8 * v2);
      double result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
      ++v2;
    }

    while (v2 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return result;
}

uint64_t sub_100817218( int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
    while (1)
    {
LABEL_2:
      uint64_t v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      unsigned int v8 = TagFallback >> 3;
      int v9 = TagFallback & 7;
      uint64_t v12 = (char *)*((void *)this + 1);
      if ((unint64_t)v12 >= *((void *)this + 2) || *v12 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v33);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v13 = v33;
      }

      else
      {
        unsigned int v13 = *v12;
        *((void *)this + 1) = v12 + 1;
      }

      if (v13 + 1 <= 5)
      {
        a1[11] |= 1u;
        a1[8] = v13;
      }

      unsigned int v15 = (_BYTE *)*((void *)this + 1);
      if ((unint64_t)v15 < *((void *)this + 2) && *v15 == 18)
      {
        while (1)
        {
          *((void *)this + 1) = v15 + 1;
LABEL_29:
          int v16 = a1[5];
          uint64_t v17 = a1[4];
          if ((int)v17 >= v16)
          {
            if (v16 == a1[6])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v16 + 1);
              int v16 = a1[5];
            }

            a1[5] = v16 + 1;
            v19 = (char *)operator new(0x50uLL);
            *(void *)v19 = off_101859200;
            *(_OWORD *)(v19 + 8) = 0u;
            *(_OWORD *)(v19 + 24) = 0u;
            *((void *)v19 + 8) = 0xFFFFFFFFLL;
            *((_DWORD *)v19 + 18) = 0;
            *((void *)v19 + 6) = 0LL;
            *((void *)v19 + 7) = 0LL;
            *((void *)v19 + 5) = 0LL;
            uint64_t v20 = *((void *)a1 + 1);
            uint64_t v21 = a1[4];
            a1[4] = v21 + 1;
            *(void *)(v20 + 8 * v21) = v19;
          }

          else
          {
            uint64_t v18 = *((void *)a1 + 1);
            a1[4] = v17 + 1;
            v19 = *(char **)(v18 + 8 * v17);
          }

          v22 = (char *)*((void *)this + 1);
          if ((unint64_t)v22 >= *((void *)this + 2) || *v22 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v34)) {
              return 0LL;
            }
          }

          else
          {
            unsigned int v34 = *v22;
            *((void *)this + 1) = v22 + 1;
          }

          int v23 = *((_DWORD *)this + 14);
          int v24 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v23 + 1;
          if (v23 >= v24) {
            return 0LL;
          }
          int v25 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v34);
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v25);
          int v27 = *((_DWORD *)this + 14);
          BOOL v28 = __OFSUB__(v27, 1);
          int v29 = v27 - 1;
          if (v29 < 0 == v28) {
            *((_DWORD *)this + 14) = v29;
          }
          unsigned int v15 = (_BYTE *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          int v30 = *v15;
          if (v30 != 18)
          {
            if (v30 == 24)
            {
              int v10 = v15 + 1;
              *((void *)this + 1) = v10;
LABEL_47:
              if ((unint64_t)v10 >= v11 || *v10 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32);
                if (!(_DWORD)result) {
                  return result;
                }
                unsigned int v31 = v32;
              }

              else
              {
                unsigned int v31 = *v10;
                *((void *)this + 1) = v10 + 1;
              }

              if (v31 <= 8)
              {
                a1[11] |= 4u;
                a1[9] = v31;
              }

              if (*((void *)this + 1) == *((void *)this + 2)
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1LL;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
            }

            goto LABEL_2;
          }
        }
      }
    }

    if (v8 == 2)
    {
      int v9 = TagFallback & 7;
      if (v9 != 2) {
        goto LABEL_19;
      }
      goto LABEL_29;
    }

    if (v8 == 3)
    {
      int v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v10 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_47;
      }
    }

    else
    {
      int v9 = TagFallback & 7;
    }

uint64_t sub_100817548( uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if ((*(_BYTE *)(result + 44) & 1) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(_DWORD *)(result + 32),  (int)a2,  a4);
  }
  if (*(int *)(v5 + 16) >= 1)
  {
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  if ((*(_BYTE *)(v5 + 44) & 4) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  *(_DWORD *)(v5 + 36),  (int)a2,  a4);
  }
  return result;
}

uint64_t sub_1008175E0(uint64_t a1, unint64_t a2)
{
  char v3 = *(_BYTE *)(a1 + 44);
  if (!v3)
  {
    int v4 = 0;
    goto LABEL_19;
  }

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      int v4 = 11;
      if ((v3 & 4) == 0) {
        goto LABEL_19;
      }
    }

    else if (v5 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      if ((*(_DWORD *)(a1 + 44) & 4) == 0) {
        goto LABEL_19;
      }
    }

    else
    {
      int v4 = 2;
      if ((v3 & 4) == 0) {
        goto LABEL_19;
      }
    }
  }

  else
  {
    int v4 = 0;
    if ((*(_BYTE *)(a1 + 44) & 4) == 0) {
      goto LABEL_19;
    }
  }

  uint64_t v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }

  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
  }

  else
  {
    int v7 = 2;
  }

  v4 += v7;
LABEL_19:
  int v8 = *(_DWORD *)(a1 + 16);
  uint64_t v9 = (v8 + v4);
  if (v8 >= 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10081622C( *(void *)(*(void *)(a1 + 8) + 8 * v10),  a2);
      int v12 = (int)v11;
      else {
        int v13 = 1;
      }
      uint64_t v9 = (v12 + v9 + v13);
      ++v10;
    }

    while (v10 < *(int *)(a1 + 16));
  }

  *(_DWORD *)(a1 + 40) = v9;
  return v9;
}

void sub_1008176E4(_DWORD *a1, void *lpsrc)
{
}

uint64_t sub_100817730()
{
  return 1LL;
}

void *sub_100817738@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.LSLHeadingEstimation");
}

double sub_100817748(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v10,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  4638LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v10,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }

  LOBYTE(v6) = *(_BYTE *)(a2 + 28);
  if ((_BYTE)v6)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      int v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        int v7 = operator new(0x20uLL);
        *int v7 = &off_101858DC8;
        v7[1] = 0LL;
        v7[2] = 0LL;
        v7[3] = 0LL;
        *(void *)(a1 + 8) = v7;
      }

      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_1019A17F0 + 8);
      }
      sub_1008104A4((uint64_t)v7, v8);
      int v6 = *(_DWORD *)(a2 + 28);
    }

    if ((v6 & 2) != 0)
    {
      double result = *(double *)(a2 + 16);
      *(_DWORD *)(a1 + 28) |= 2u;
      *(double *)(a1 + 16) = result;
    }
  }

  return result;
}

void sub_100817824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10081783C(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1018593E0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A17F0 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100817890(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_1008178A4()
{
  double result = operator new(0x20uLL);
  *double result = &off_1018593E0;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_1008178CC(uint64_t result)
{
  if (*(_BYTE *)(result + 28))
  {
    if ((*(_BYTE *)(result + 28) & 1) != 0)
    {
      uint64_t v1 = *(void *)(result + 8);
      if (v1)
      {
        *(_DWORD *)(v1 + 16) = 0;
        *(_DWORD *)(v1 + 28) = 0;
      }
    }

    *(void *)(result + 16) = 0LL;
  }

  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_1008178F4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      if (TagFallback >> 3 != 2)
      {
        int v7 = TagFallback & 7;
        goto LABEL_17;
      }

      int v7 = TagFallback & 7;
      if (v7 == 1)
      {
LABEL_29:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v19) & 1) == 0) {
          return 0LL;
        }
        *(void *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 28) |= 2u;
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }

      else
      {
LABEL_17:
        if (v7 == 4) {
          return 1LL;
        }
      }
    }

    int v7 = TagFallback & 7;
    if (v7 != 2) {
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 28) |= 1u;
    uint64_t v8 = *(void **)(a1 + 8);
    if (!v8)
    {
      uint64_t v8 = operator new(0x20uLL);
      void *v8 = &off_101858DC8;
      v8[1] = 0LL;
      v8[2] = 0LL;
      v8[3] = 0LL;
      *(void *)(a1 + 8) = v8;
    }

    char v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
    {
    }

    else
    {
      unsigned int v20 = *v9;
      *((void *)this + 1) = v9 + 1;
    }

    int v10 = *((_DWORD *)this + 14);
    int v11 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v10 + 1;
    if (v10 >= v11) {
      return 0LL;
    }
    int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v20);
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
    int v14 = *((_DWORD *)this + 14);
    BOOL v15 = __OFSUB__(v14, 1);
    int v16 = v14 - 1;
    if (v16 < 0 == v15) {
      *((_DWORD *)this + 14) = v16;
    }
    uint64_t v17 = (_BYTE *)*((void *)this + 1);
    if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 17)
    {
      *((void *)this + 1) = v17 + 1;
      goto LABEL_29;
    }
  }

uint64_t sub_100817B00( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v5 + 16),  a3);
  }

  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_1019A17F0 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0) {
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  (int)a2,  *(double *)(v5 + 16),  a3);
  }
  return result;
}

uint64_t sub_100817B6C(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_1019A17F0 + 8);
      }
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(9 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = (_DWORD)v7;
      else {
        int v8 = 1;
      }
      unsigned int v4 = (_DWORD)v7 + v8 + 1;
      int v3 = *(_DWORD *)(a1 + 28);
    }

    else
    {
      unsigned int v4 = 0;
    }

    if ((v3 & 2) != 0) {
      uint64_t result = v4 + 9;
    }
    else {
      uint64_t result = v4;
    }
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 24) = result;
  return result;
}

double sub_100817BF8(uint64_t a1, void *lpsrc)
{
  return sub_100817748(a1, (uint64_t)lpsrc);
}

uint64_t sub_100817C44()
{
  return 1LL;
}

void *sub_100817C4C@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.VLLocation");
}

void sub_100817C5C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v7,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  4812LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v7,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }

  int v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    sub_10004AAFC(a1 + 8, *(_DWORD *)(a1 + 16) + v5);
    memcpy((void *)(*(void *)(a1 + 8) + 4LL * *(int *)(a1 + 16)), *(const void **)(a2 + 8), 4LL * *(int *)(a2 + 16));
    *(_DWORD *)(a1 + 16) += *(_DWORD *)(a2 + 16);
  }

void sub_100817D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100817D24(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_101859458;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2) {
    operator delete[](v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_100817D60(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_100817D74()
{
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &off_101859458;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  return result;
}

uint64_t sub_100817D9C(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_100817DA8( uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v5 = a1 + 8;
  while (1)
  {
    while (1)
    {
      char v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!(_DWORD)TagFallback) {
          return 1LL;
        }
      }

      int v8 = TagFallback & 7;
      if (v8 != 2)
      {
        if (v8 != 5) {
          break;
        }
        goto LABEL_15;
      }

      uint64_t result = sub_1008102E0(this, v5);
      if (!(_DWORD)result) {
        return result;
      }
      while (1)
      {
        uint64_t v21 = (_BYTE *)*((void *)this + 1);
        v22 = (_BYTE *)*((void *)this + 2);
        if (v21 >= v22 || *v21 != 13) {
          break;
        }
        *((void *)this + 1) = v21 + 1;
LABEL_15:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v24) & 1) == 0) {
          return 0LL;
        }
        unsigned int v10 = v24[0];
        int v11 = *(_DWORD *)(a1 + 16);
        if (v11 == *(_DWORD *)(a1 + 20))
        {
          sub_10004AAFC(v5, v11 + 1);
          int v11 = *(_DWORD *)(a1 + 16);
        }

        uint64_t v12 = *(void *)(a1 + 8);
        int v13 = v11 + 1;
        *(_DWORD *)(a1 + 16) = v11 + 1;
        *(_DWORD *)(v12 + 4LL * v11) = v10;
        uint64_t v14 = *((void *)this + 1);
        int v15 = *((_DWORD *)this + 4) - v14;
        if (v15 >= 1)
        {
          signed int v16 = v15 / 5u;
          int v17 = v16 >= *(_DWORD *)(a1 + 20) - v13 ? *(_DWORD *)(a1 + 20) - v13 : v16;
          if (v17 >= 1)
          {
            int v18 = 0;
            while (*(_BYTE *)v14 == 13)
            {
              int v19 = *(_DWORD *)(v14 + 1);
              if (v13 >= *(_DWORD *)(a1 + 20))
              {
                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v24,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Contents /Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/include/go ogle/protobuf/repeated_field.h",  602LL);
                uint64_t v20 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v24,  "CHECK failed: (size()) < (Capacity()): ");
                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v23, v20);
                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
                int v13 = *(_DWORD *)(a1 + 16);
                uint64_t v12 = *(void *)(a1 + 8);
              }

              *(_DWORD *)(a1 + 16) = v13 + 1;
              *(_DWORD *)(v12 + 4LL * v13) = v19;
              ++v18;
              v14 += 5LL;
              ++v13;
              if (v17 == v18)
              {
                int v18 = v17;
                break;
              }
            }

            if (v18) {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v18);
            }
          }
        }
      }

      if (v21 == v22 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }

    if (v8 == 4) {
      return 1LL;
    }
  }

void sub_100818004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10081801C( uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  a2,  *(float *)(*(void *)(v4 + 8) + 4 * v5++),  a3);
    while (v5 < *(int *)(v4 + 16));
  }

  return result;
}

uint64_t sub_100818078(uint64_t a1)
{
  uint64_t v1 = (5 * *(_DWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

void sub_10081808C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_1008180D8()
{
  return 1LL;
}

void *sub_1008180E0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.VLVectorfM");
}

void sub_1008180F0(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v14,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  4972LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v14,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }

  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  *(_DWORD *)(a2 + 16) + a1[4]);
  if (*(int *)(a2 + 16) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v5);
      int v7 = a1[5];
      uint64_t v8 = (int)a1[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a1[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve( (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2),  v7 + 1);
          int v7 = a1[5];
        }

        a1[5] = v7 + 1;
        unsigned int v10 = operator new(0x20uLL);
        *unsigned int v10 = &off_101859458;
        v10[1] = 0LL;
        v10[2] = 0LL;
        v10[3] = 0LL;
        uint64_t v11 = *((void *)a1 + 1);
        uint64_t v12 = (int)a1[4];
        a1[4] = v12 + 1;
        *(void *)(v11 + 8 * v12) = v10;
      }

      else
      {
        uint64_t v9 = *((void *)a1 + 1);
        a1[4] = v8 + 1;
        unsigned int v10 = *(void **)(v9 + 8 * v8);
      }

      sub_100817C5C((uint64_t)v10, v6);
      ++v5;
    }

    while (v5 < *(int *)(a2 + 16));
  }

void sub_100818228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100818240(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1018594D0;
  sub_10008D0EC((uint64_t)a1 + 8);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100818278(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_10081828C()
{
  uint64_t result = operator new(0x28uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = off_1018594D0;
  *((_DWORD *)result + 6) = 0;
  result[4] = 0LL;
  return result;
}

uint64_t sub_1008182BC(uint64_t result)
{
  uint64_t v1 = result;
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 8) + 8 * v2);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
      ++v2;
    }

    while (v2 < *(int *)(v1 + 16));
  }

  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_100818314( int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 2);
  while (1)
  {
LABEL_2:
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v6;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v6 + 1;
    }

    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        int v8 = a1[5];
        uint64_t v9 = a1[4];
        if ((int)v9 >= v8)
        {
          if (v8 == a1[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v8 + 1);
            int v8 = a1[5];
          }

          a1[5] = v8 + 1;
          uint64_t v11 = operator new(0x20uLL);
          *uint64_t v11 = &off_101859458;
          v11[1] = 0LL;
          v11[2] = 0LL;
          v11[3] = 0LL;
          uint64_t v12 = *((void *)a1 + 1);
          uint64_t v13 = a1[4];
          a1[4] = v13 + 1;
          *(void *)(v12 + 8 * v13) = v11;
        }

        else
        {
          uint64_t v10 = *((void *)a1 + 1);
          a1[4] = v9 + 1;
          uint64_t v11 = *(void **)(v10 + 8 * v9);
        }

        uint64_t v14 = (char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v25)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v25 = *v14;
          *((void *)this + 1) = v14 + 1;
        }

        int v15 = *((_DWORD *)this + 14);
        int v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0LL;
        }
        int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        v22 = (_BYTE *)*((void *)this + 1);
        char v23 = (_BYTE *)*((void *)this + 2);
        if (v22 >= v23 || *v22 != 10)
        {
          if (v22 == v23 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1LL;
            *((_BYTE *)this + 36) = 1;
            return result;
          }

          goto LABEL_2;
        }

        *((void *)this + 1) = v22 + 1;
      }
    }
  }

uint64_t sub_100818514( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(*(void *)(v5 + 8) + 8 * v6++),  a2,  a4);
    while (v6 < *(int *)(v5 + 16));
  }

  return result;
}

uint64_t sub_100818570(uint64_t a1, unsigned int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 1)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }

  else
  {
    uint64_t v4 = 0LL;
    LODWORD(sub_1012279C0(0LL, v4, v5) = *(_DWORD *)(a1 + 16);
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 8 * v4);
      int v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(5 * *(_DWORD *)(v6 + 16));
      *(_DWORD *)(v6 + 24) = (_DWORD)v7;
      if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        int v3 = *(_DWORD *)(a1 + 16);
      }

      else
      {
        int v8 = 1;
      }

      uint64_t v5 = ((_DWORD)v7 + v5 + v8);
      ++v4;
    }

    while (v4 < v3);
  }

  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_1008185FC(_DWORD *a1, void *lpsrc)
{
}

uint64_t sub_100818648()
{
  return 1LL;
}

void *sub_100818650@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.VLMatrixfMxN");
}

void sub_100818660(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v27,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  5799LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v27,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v26, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v27);
  }

  int v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_10004AAFC(a1 + 16, *(_DWORD *)(a1 + 24) + v5);
    memcpy((void *)(*(void *)(a1 + 16) + 4LL * *(int *)(a1 + 24)), *(const void **)(a2 + 16), 4LL * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }

  int v6 = *(_DWORD *)(a2 + 40);
  if (v6)
  {
    sub_10008D024(a1 + 32, *(_DWORD *)(a1 + 40) + v6);
    memcpy((void *)(*(void *)(a1 + 32) + 8LL * *(int *)(a1 + 40)), *(const void **)(a2 + 32), 8LL * *(int *)(a2 + 40));
    *(_DWORD *)(a1 + 40) += *(_DWORD *)(a2 + 40);
  }

  int v7 = *(_DWORD *)(a2 + 56);
  if (v7)
  {
    sub_10004AAFC(a1 + 48, *(_DWORD *)(a1 + 56) + v7);
    memcpy((void *)(*(void *)(a1 + 48) + 4LL * *(int *)(a1 + 56)), *(const void **)(a2 + 48), 4LL * *(int *)(a2 + 56));
    *(_DWORD *)(a1 + 56) += *(_DWORD *)(a2 + 56);
  }

  int v8 = *(_DWORD *)(a2 + 72);
  if (v8)
  {
    sub_10008D024(a1 + 64, *(_DWORD *)(a1 + 72) + v8);
    memcpy((void *)(*(void *)(a1 + 64) + 8LL * *(int *)(a1 + 72)), *(const void **)(a2 + 64), 8LL * *(int *)(a2 + 72));
    *(_DWORD *)(a1 + 72) += *(_DWORD *)(a2 + 72);
  }

  int v9 = *(_DWORD *)(a2 + 96);
  if (v9)
  {
    sub_10004AAFC(a1 + 88, *(_DWORD *)(a1 + 96) + v9);
    memcpy((void *)(*(void *)(a1 + 88) + 4LL * *(int *)(a1 + 96)), *(const void **)(a2 + 88), 4LL * *(int *)(a2 + 96));
    *(_DWORD *)(a1 + 96) += *(_DWORD *)(a2 + 96);
  }

  int v10 = *(_DWORD *)(a2 + 128);
  if (v10)
  {
    sub_10004AAFC(a1 + 120, *(_DWORD *)(a1 + 128) + v10);
    memcpy( (void *)(*(void *)(a1 + 120) + 4LL * *(int *)(a1 + 128)),  *(const void **)(a2 + 120),  4LL * *(int *)(a2 + 128));
    *(_DWORD *)(a1 + 128) += *(_DWORD *)(a2 + 128);
  }

  int v11 = *(_DWORD *)(a2 + 144);
  if (v11)
  {
    sub_10004AAFC(a1 + 136, *(_DWORD *)(a1 + 144) + v11);
    memcpy( (void *)(*(void *)(a1 + 136) + 4LL * *(int *)(a1 + 144)),  *(const void **)(a2 + 136),  4LL * *(int *)(a2 + 144));
    *(_DWORD *)(a1 + 144) += *(_DWORD *)(a2 + 144);
  }

  int v12 = *(_DWORD *)(a2 + 160);
  if (v12)
  {
    sub_10004AAFC(a1 + 152, *(_DWORD *)(a1 + 160) + v12);
    memcpy( (void *)(*(void *)(a1 + 152) + 4LL * *(int *)(a1 + 160)),  *(const void **)(a2 + 152),  4LL * *(int *)(a2 + 160));
    *(_DWORD *)(a1 + 160) += *(_DWORD *)(a2 + 160);
  }

  int v13 = *(_DWORD *)(a2 + 184);
  if (v13)
  {
    sub_10004AAFC(a1 + 176, *(_DWORD *)(a1 + 184) + v13);
    memcpy( (void *)(*(void *)(a1 + 176) + 4LL * *(int *)(a1 + 184)),  *(const void **)(a2 + 176),  4LL * *(int *)(a2 + 184));
    *(_DWORD *)(a1 + 184) += *(_DWORD *)(a2 + 184);
  }

  int v14 = *(_DWORD *)(a2 + 200);
  if (v14)
  {
    sub_10004AAFC(a1 + 192, *(_DWORD *)(a1 + 200) + v14);
    memcpy( (void *)(*(void *)(a1 + 192) + 4LL * *(int *)(a1 + 200)),  *(const void **)(a2 + 192),  4LL * *(int *)(a2 + 200));
    *(_DWORD *)(a1 + 200) += *(_DWORD *)(a2 + 200);
  }

  int v15 = *(_DWORD *)(a2 + 216);
  if (v15)
  {
    sub_10004AAFC(a1 + 208, *(_DWORD *)(a1 + 216) + v15);
    memcpy( (void *)(*(void *)(a1 + 208) + 4LL * *(int *)(a1 + 216)),  *(const void **)(a2 + 208),  4LL * *(int *)(a2 + 216));
    *(_DWORD *)(a1 + 216) += *(_DWORD *)(a2 + 216);
  }

  int v16 = *(_DWORD *)(a2 + 232);
  if (v16)
  {
    sub_10004AAFC(a1 + 224, *(_DWORD *)(a1 + 232) + v16);
    memcpy( (void *)(*(void *)(a1 + 224) + 4LL * *(int *)(a1 + 232)),  *(const void **)(a2 + 224),  4LL * *(int *)(a2 + 232));
    *(_DWORD *)(a1 + 232) += *(_DWORD *)(a2 + 232);
  }

  int v17 = *(_DWORD *)(a2 + 248);
  if (v17)
  {
    sub_10008D024(a1 + 240, *(_DWORD *)(a1 + 248) + v17);
    memcpy( (void *)(*(void *)(a1 + 240) + 8LL * *(int *)(a1 + 248)),  *(const void **)(a2 + 240),  8LL * *(int *)(a2 + 248));
    *(_DWORD *)(a1 + 248) += *(_DWORD *)(a2 + 248);
  }

  int v18 = *(_DWORD *)(a2 + 264);
  if (v18)
  {
    sub_10008D024(a1 + 256, *(_DWORD *)(a1 + 264) + v18);
    memcpy( (void *)(*(void *)(a1 + 256) + 8LL * *(int *)(a1 + 264)),  *(const void **)(a2 + 256),  8LL * *(int *)(a2 + 264));
    *(_DWORD *)(a1 + 264) += *(_DWORD *)(a2 + 264);
  }

  int v19 = *(_DWORD *)(a2 + 276);
  if ((_BYTE)v19)
  {
    if ((v19 & 1) != 0)
    {
      uint64_t v24 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 276) |= 1u;
      *(void *)(a1 + 8) = v24;
      int v19 = *(_DWORD *)(a2 + 276);
      if ((v19 & 0x20) == 0)
      {
LABEL_34:
        if ((v19 & 0x80) == 0) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
    }

    else if ((v19 & 0x20) == 0)
    {
      goto LABEL_34;
    }

    uint64_t v25 = *(void *)(a2 + 80);
    *(_DWORD *)(a1 + 276) |= 0x20u;
    *(void *)(a1 + 80) = v25;
    int v19 = *(_DWORD *)(a2 + 276);
    if ((v19 & 0x80) != 0)
    {
LABEL_35:
      uint64_t v20 = *(void *)(a2 + 104);
      *(_DWORD *)(a1 + 276) |= 0x80u;
      *(void *)(a1 + 104) = v20;
      int v19 = *(_DWORD *)(a2 + 276);
    }
  }

void sub_100818B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100818B78(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859548;
  sub_100818C50((uint64_t)a1);
  uint64_t v2 = (void *)*((void *)a1 + 32);
  if (v2) {
    operator delete[](v2);
  }
  int v3 = (void *)*((void *)a1 + 30);
  if (v3) {
    operator delete[](v3);
  }
  uint64_t v4 = (void *)*((void *)a1 + 28);
  if (v4) {
    operator delete[](v4);
  }
  int v5 = (void *)*((void *)a1 + 26);
  if (v5) {
    operator delete[](v5);
  }
  int v6 = (void *)*((void *)a1 + 24);
  if (v6) {
    operator delete[](v6);
  }
  int v7 = (void *)*((void *)a1 + 22);
  if (v7) {
    operator delete[](v7);
  }
  int v8 = (void *)*((void *)a1 + 19);
  if (v8) {
    operator delete[](v8);
  }
  int v9 = (void *)*((void *)a1 + 17);
  if (v9) {
    operator delete[](v9);
  }
  int v10 = (void *)*((void *)a1 + 15);
  if (v10) {
    operator delete[](v10);
  }
  int v11 = (void *)*((void *)a1 + 11);
  if (v11) {
    operator delete[](v11);
  }
  int v12 = (void *)*((void *)a1 + 8);
  if (v12) {
    operator delete[](v12);
  }
  int v13 = (void *)*((void *)a1 + 6);
  if (v13) {
    operator delete[](v13);
  }
  int v14 = (void *)*((void *)a1 + 4);
  if (v14) {
    operator delete[](v14);
  }
  int v15 = (void *)*((void *)a1 + 2);
  if (v15) {
    operator delete[](v15);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100818C50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    operator delete((void *)v1);
  }

void sub_100818CA4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

double sub_100818CB8()
{
  v0 = operator new(0x118uLL);
  *(void *)v0 = off_101859548;
  double result = 0.0;
  *(_OWORD *)((char *)v0 + 8) = 0u;
  *(_OWORD *)((char *)v0 + 24) = 0u;
  *(_OWORD *)((char *)v0 + 40) = 0u;
  *(_OWORD *)((char *)v0 + 56) = 0u;
  *(_OWORD *)((char *)v0 + 72) = 0u;
  *(_OWORD *)((char *)v0 + 88) = 0u;
  *(_OWORD *)((char *)v0 + 120) = 0u;
  *(_OWORD *)((char *)v0 + 136) = 0u;
  *(_OWORD *)((char *)v0 + 152) = 0u;
  v0[11] = 0u;
  v0[12] = 0u;
  v0[13] = 0u;
  v0[14] = 0u;
  v0[15] = 0u;
  v0[16] = 0u;
  *((void *)v0 + 34) = 0LL;
  *((void *)v0 + 13) = 0LL;
  *((void *)v0 + 14) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *((void *)v0 + 21) = 0LL;
  return result;
}

uint64_t sub_100818D24(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 276);
  if ((_BYTE)v1)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 80) = 0LL;
    *(void *)(result + 104) = 0LL;
  }

  if ((v1 & 0xFF00) != 0)
  {
    if ((v1 & 0x100) != 0)
    {
      uint64_t v2 = *(void *)(result + 112);
      if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v2 + 23) < 0)
        {
          **(_BYTE **)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0LL;
        }

        else
        {
          *(_BYTE *)uint64_t v2 = 0;
          *(_BYTE *)(v2 + 23) = 0;
        }
      }
    }

    *(void *)(result + 168) = 0LL;
  }

  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 144) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_DWORD *)(result + 200) = 0;
  *(_DWORD *)(result + 216) = 0;
  *(_DWORD *)(result + 232) = 0;
  *(_DWORD *)(result + 248) = 0;
  *(_DWORD *)(result + 264) = 0;
  *(_DWORD *)(result + 276) = 0;
  return result;
}

uint64_t sub_100818DC0( uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  uint64_t v206 = a1 + 240;
  uint64_t v207 = a1 + 224;
  uint64_t v208 = a1 + 208;
  uint64_t v209 = a1 + 256;
  uint64_t v220 = a1 + 136;
  uint64_t v214 = a1 + 176;
  uint64_t v215 = a1 + 120;
  uint64_t v218 = a1 + 152;
  uint64_t v219 = a1 + 88;
  uint64_t v221 = a1 + 64;
  uint64_t v222 = a1 + 192;
  uint64_t v216 = a1 + 32;
  uint64_t v217 = a1 + 48;
  v205 = (unint64_t *)(a1 + 8);
  uint64_t v212 = a1 + 16;
  v213 = (unint64_t *)(a1 + 80);
  v210 = (unint64_t *)(a1 + 168);
  v211 = (unint64_t *)(a1 + 104);
LABEL_2:
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
    }

    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        int v8 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        if ((unint64_t)v8 >= v9 || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v205);
          if (!(_DWORD)result) {
            return result;
          }
          int v10 = (_BYTE *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }

        else
        {
          unint64_t *v205 = *v8;
          int v10 = v8 + 1;
          *((void *)this + 1) = v10;
        }

        *(_DWORD *)(a1 + 276) |= 1u;
        goto LABEL_129;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 == 2)
        {
          uint64_t result = sub_1008102E0(this, v212);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_146;
        }

        if (v7 != 5)
        {
LABEL_67:
          if (v7 == 4) {
            return 1LL;
          }
          continue;
        }

        while (1)
        {
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v224) & 1) == 0) {
            return 0LL;
          }
          unsigned int v41 = v224[0];
          int v42 = *(_DWORD *)(a1 + 24);
          if (v42 == *(_DWORD *)(a1 + 28))
          {
            sub_10004AAFC(v212, v42 + 1);
            int v42 = *(_DWORD *)(a1 + 24);
          }

          uint64_t v43 = *(void *)(a1 + 16);
          int v44 = v42 + 1;
          *(_DWORD *)(a1 + 24) = v42 + 1;
          *(_DWORD *)(v43 + 4LL * v42) = v41;
          uint64_t v45 = *((void *)this + 1);
          int v46 = *((_DWORD *)this + 4) - v45;
          if (v46 >= 1)
          {
            signed int v47 = v46 / 5u;
            int v48 = v47 >= *(_DWORD *)(a1 + 28) - v44 ? *(_DWORD *)(a1 + 28) - v44 : v47;
            if (v48 >= 1)
            {
              int v49 = 0;
              while (*(_BYTE *)v45 == 21)
              {
                int v50 = *(_DWORD *)(v45 + 1);
                if (v44 >= *(_DWORD *)(a1 + 28))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.app/Conten ts/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/includ e/google/protobuf/repeated_field.h",  602LL);
                  uint64_t v51 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (size()) < (Capacity()): ");
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v51);
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                  int v44 = *(_DWORD *)(a1 + 24);
                  uint64_t v43 = *(void *)(a1 + 16);
                }

                *(_DWORD *)(a1 + 24) = v44 + 1;
                *(_DWORD *)(v43 + 4LL * v44) = v50;
                ++v49;
                v45 += 5LL;
                ++v44;
                if (v48 == v49)
                {
                  int v49 = v48;
                  break;
                }
              }

              if (v49) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v49);
              }
            }
          }

LABEL_190:
              uint64_t v25 = (unsigned __int8 *)*((void *)this + 1);
              unint64_t v13 = *((void *)this + 2);
              int v76 = *v25;
              if (v76 == 41)
              {
                while (1)
                {
                  *((void *)this + 1) = v25 + 1;
LABEL_195:
                  if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v224) & 1) == 0) {
                    return 0LL;
                  }
                  uint64_t v77 = *(void *)v224;
                  int v78 = *(_DWORD *)(a1 + 72);
                  if (v78 == *(_DWORD *)(a1 + 76))
                  {
                    sub_10008D024(v221, v78 + 1);
                    int v78 = *(_DWORD *)(a1 + 72);
                  }

                  uint64_t v79 = *(void *)(a1 + 64);
                  int v80 = v78 + 1;
                  *(_DWORD *)(a1 + 72) = v78 + 1;
                  *(void *)(v79 + 8LL * v78) = v77;
                  uint64_t v81 = *((void *)this + 1);
                  int v82 = *((_DWORD *)this + 4) - v81;
                  if (v82 >= 1)
                  {
                    signed int v83 = v82 / 9u;
                    int v84 = v83 >= *(_DWORD *)(a1 + 76) - v80 ? *(_DWORD *)(a1 + 76) - v80 : v83;
                    if (v84 >= 1)
                    {
                      int v85 = 0;
                      while (*(_BYTE *)v81 == 41)
                      {
                        uint64_t v86 = *(void *)(v81 + 1);
                        if (v80 >= *(_DWORD *)(a1 + 76))
                        {
                          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.ap p/Contents/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sdk/ usr/local/include/google/protobuf/repeated_field.h",  602LL);
                          uint64_t v87 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (size()) < (Capacity()): ");
                          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v223, v87);
                          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                          int v80 = *(_DWORD *)(a1 + 72);
                          uint64_t v79 = *(void *)(a1 + 64);
                        }

                        *(_DWORD *)(a1 + 72) = v80 + 1;
                        *(void *)(v79 + 8LL * v80) = v86;
                        ++v85;
                        v81 += 9LL;
                        ++v80;
                        if (v84 == v85)
                        {
                          int v85 = v84;
                          break;
                        }
                      }

                      if (v85) {
                        wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v85);
                      }
                    }
                  }

        uint64_t result = 0LL;
        uint64_t v20 = 9;
LABEL_191:
        *(_DWORD *)(a1 + 1104) = v20;
        return result;
      }

      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      v144[0] = 0;
      LODWORD(v138) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,Failed to retrieve estimate from APWiFiFix hypothesis",  v144,  v138);
      unsigned int v65 = (char *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v131);
    }

    else
    {
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v81 = (os_log_s *)qword_101934968;
      if (os_log_type_enabled((os_log_t)qword_101934968, OS_LOG_TYPE_DEBUG))
      {
        int v82 = *v27;
        *(_DWORD *)buf = 134349824;
        *(double *)&buf[4] = v82;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = 0;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = 0;
        *(_WORD *)int v148 = 2050;
        *(void *)&v148[2] = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEBUG,  "#selection,mct,%{public}.3f,Selection based on APWiFiFix hypothesis is skipped,Static,%{public}d,LargeDisplace ment,%{public}d,Displacement_m,%{public}.3f",  buf,  0x22u);
      }

      if (!sub_1002921D0(115, 2)) {
        goto LABEL_136;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      int v129 = *v27;
      *(_DWORD *)uint64_t v145 = 134349824;
      *(double *)&v145[4] = v129;
      *(_WORD *)&v145[12] = 1026;
      *(_DWORD *)&v145[14] = 0;
      *(_WORD *)&v145[18] = 1026;
      *(_DWORD *)&v145[20] = 0;
      *(_WORD *)int v146 = 2050;
      *(void *)&v146[2] = v45;
      LODWORD(v138) = 34;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934968,  2LL,  "#selection,mct,%{public}.3f,Selection based on APWiFiFix hypothesis is skipped,Static,%{public}d,LargeDisplaceme nt,%{public}d,Displacement_m,%{public}.3f",  v145,  v138);
      unsigned int v65 = (char *)v130;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v130);
    }

  uint64_t result = *(float *)(a2 + 84);
  v5 |= 0x800uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(float *)(a1 + 84) = result;
  uint64_t v4 = *v3;
  int v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x100) == 0)
  {
LABEL_85:
    if ((v7 & 0x10000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_192;
  }

  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfUshaFPCondition", *(_BYTE *)(a1 + 352));
  int v7 = *v5;
  if ((*(void *)(a1 + 364) & 0x40000000000LL) == 0)
  {
LABEL_89:
    if ((v7 & 0x8000000000000LL) == 0) {
      goto LABEL_90;
    }
    goto LABEL_192;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0x324u);
  int v5 = *v4;
  int v6 = v4[1];
  if ((*v4 & 0x100) == 0)
  {
LABEL_85:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_192;
  }

          *(_DWORD *)(a1 + 92) = v33;
          goto LABEL_224;
        case 2u:
          *(_BYTE *)(a1 + 104) |= 4u;
          int v36 = *((void *)this + 1);
          uint64_t v37 = *((void *)this + 2);
          uint64_t v38 = *(void *)this;
          if (v36 <= 0xFFFFFFFFFFFFFFF5LL && v36 + 10 <= v37)
          {
            v39 = 0;
            int v40 = 0;
            unsigned int v41 = 0LL;
            do
            {
              int v42 = v36 + 1;
              *((void *)this + 1) = v36 + 1;
              uint64_t v43 = *(_BYTE *)(v38 + v36);
              v41 |= (unint64_t)(v43 & 0x7F) << v39;
              if ((v43 & 0x80) == 0) {
                goto LABEL_193;
              }
              v39 += 7;
              int v36 = v42;
              int v21 = v40++ > 8;
            }

            while (!v21);
LABEL_131:
            LODWORD(v41) = 0;
            goto LABEL_193;
          }

          int v111 = 0;
          uint64_t v112 = 0;
          unsigned int v41 = 0LL;
          if (v37 <= v36) {
            uint64_t v37 = *((void *)this + 1);
          }
          while (2)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v113 = v36 + 1;
              v114 = *(_BYTE *)(v38 + v36);
              *((void *)this + 1) = v113;
              v41 |= (unint64_t)(v114 & 0x7F) << v111;
              if (v114 < 0)
              {
                v111 += 7;
                int v36 = v113;
                int v21 = v112++ > 8;
                if (v21) {
                  goto LABEL_131;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v41) = 0;
              }
            }

            break;
          }

        *(_DWORD *)(a1 + 220) = v28;
        goto LABEL_203;
      case 5u:
        *(_DWORD *)(a1 + 244) |= 0x8000u;
        int v31 = *((void *)this + 1);
        int v32 = *((void *)this + 2);
        unsigned int v33 = *(void *)this;
        if (v31 <= 0xFFFFFFFFFFFFFFF5LL && v31 + 10 <= v32)
        {
          unint64_t v34 = 0;
          unsigned int v35 = 0;
          int v36 = 0LL;
          do
          {
            uint64_t v37 = v31 + 1;
            *((void *)this + 1) = v31 + 1;
            uint64_t v38 = *(_BYTE *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0) {
              goto LABEL_194;
            }
            v34 += 7;
            int v31 = v37;
            unint64_t v14 = v35++ > 8;
          }

          while (!v14);
LABEL_155:
          LODWORD(v36) = 0;
          goto LABEL_194;
        }

        int v117 = 0;
        uint64_t v118 = 0;
        int v36 = 0LL;
        if (v32 <= v31) {
          int v32 = *((void *)this + 1);
        }
        while (2)
        {
          if (v32 == v31)
          {
            LODWORD(v36) = 0;
            *((_BYTE *)this + 24) = 1;
          }

          else
          {
            int v119 = v31 + 1;
            uint64_t v120 = *(_BYTE *)(v33 + v31);
            *((void *)this + 1) = v119;
            v36 |= (unint64_t)(v120 & 0x7F) << v117;
            if (v120 < 0)
            {
              v117 += 7;
              int v31 = v119;
              unint64_t v14 = v118++ > 8;
              if (v14) {
                goto LABEL_155;
              }
              continue;
            }

            if (*((_BYTE *)this + 24)) {
              LODWORD(v36) = 0;
            }
          }

          break;
        }

LABEL_228:
                          int v27 = (_BYTE *)*((void *)this + 1);
                          unint64_t v16 = *((void *)this + 2);
                          int v99 = *v27;
                          if (v99 != 61)
                          {
                            if (v99 == 64)
                            {
                              int v17 = v27 + 1;
                              *((void *)this + 1) = v17;
LABEL_232:
                              if ((unint64_t)v17 >= v16 || *v17 < 0)
                              {
                                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback( this,  v211);
                                if (!(_DWORD)result) {
                                  return result;
                                }
                                v100 = (_BYTE *)*((void *)this + 1);
                                unint64_t v16 = *((void *)this + 2);
                              }

                              else
                              {
                                unint64_t *v211 = *v17;
                                v100 = v17 + 1;
                                *((void *)this + 1) = v100;
                              }

                              int v18 = *(_DWORD *)(a1 + 276) | 0x80;
                              *(_DWORD *)(a1 + 276) = v18;
                              if ((unint64_t)v100 < v16 && *v100 == 74)
                              {
                                *((void *)this + 1) = v100 + 1;
LABEL_240:
                                *(_DWORD *)(a1 + 276) = v18 | 0x100;
                                v101 = *(void **)(a1 + 112);
                                if (v101 == (void *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
                                {
                                  v101 = operator new(0x18uLL);
                                  v101[1] = 0LL;
                                  v101[2] = 0LL;
                                  void *v101 = 0LL;
                                  *(void *)(a1 + 112) = v101;
                                }

                                uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes( this,  v101);
                                if (!(_DWORD)result) {
                                  return result;
                                }
                                v102 = (_BYTE *)*((void *)this + 1);
                                unint64_t v19 = *((void *)this + 2);
                                if ((unint64_t)v102 < v19 && *v102 == 80)
                                {
                                  for (j = v102 + 1; ; j = (char *)(v114 + 1))
                                  {
                                    *((void *)this + 1) = j;
LABEL_247:
                                    if ((unint64_t)j >= v19 || *j < 0)
                                    {
                                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v224);
                                      if (!(_DWORD)result) {
                                        return result;
                                      }
                                      unsigned int v103 = v224[0];
                                    }

                                    else
                                    {
                                      unsigned int v103 = *j;
                                      *((void *)this + 1) = j + 1;
                                    }

                                    int v104 = *(_DWORD *)(a1 + 128);
                                    if (v104 == *(_DWORD *)(a1 + 132))
                                    {
                                      sub_10004AAFC(v215, v104 + 1);
                                      int v104 = *(_DWORD *)(a1 + 128);
                                    }

                                    uint64_t v105 = *(void *)(a1 + 120);
                                    *(_DWORD *)(a1 + 128) = v104 + 1;
                                    *(_DWORD *)(v105 + 4LL * v104) = v103;
                                    int v106 = *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 128);
                                    if (v106 >= 1)
                                    {
                                      int v107 = v106 + 1;
                                      do
                                      {
                                        v108 = (_BYTE *)*((void *)this + 1);
                                        unint64_t v109 = *((void *)this + 2);
                                        *((void *)this + 1) = v108 + 1;
                                        if ((unint64_t)(v108 + 1) >= v109 || (char)v108[1] < 0)
                                        {
                                          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  v224);
                                          if (!(_DWORD)result) {
                                            return result;
                                          }
                                          unsigned int v110 = v224[0];
                                        }

                                        else
                                        {
                                          unsigned int v110 = v108[1];
                                          *((void *)this + 1) = v108 + 2;
                                        }

                                        int v111 = *(_DWORD *)(a1 + 128);
                                        if (v111 >= *(_DWORD *)(a1 + 132))
                                        {
                                          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Appli cations/Xcode.app/Contents/Developer/Platforms/AppleTVOS.platform/Developer/ SDKs/AppleTVOS18.2.Internal.sdk/usr/local/include/google/protobuf/repeated_field.h",  602LL);
                                          uint64_t v112 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (size()) < (Capacity()): ");
                                          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=( &v223,  v112);
                                          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                          int v111 = *(_DWORD *)(a1 + 128);
                                        }

                                        uint64_t v113 = *(void *)(a1 + 120);
                                        *(_DWORD *)(a1 + 128) = v111 + 1;
                                        *(_DWORD *)(v113 + 4LL * v111) = v110;
                                        --v107;
                                      }

                                      while (v107 > 1);
                                    }

LABEL_266:
                                    v114 = (unsigned __int8 *)*((void *)this + 1);
                                    unint64_t v19 = *((void *)this + 2);
                                    int v115 = *v114;
                                    if (v115 == 93)
                                    {
                                      while (1)
                                      {
                                        *((void *)this + 1) = v114 + 1;
LABEL_271:
                                        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback( this,  v224) & 1) == 0) {
                                          return 0LL;
                                        }
                                        unsigned int v116 = v224[0];
                                        int v117 = *(_DWORD *)(a1 + 144);
                                        if (v117 == *(_DWORD *)(a1 + 148))
                                        {
                                          sub_10004AAFC(v220, v117 + 1);
                                          int v117 = *(_DWORD *)(a1 + 144);
                                        }

                                        uint64_t v118 = *(void *)(a1 + 136);
                                        int v119 = v117 + 1;
                                        *(_DWORD *)(a1 + 144) = v117 + 1;
                                        *(_DWORD *)(v118 + 4LL * v117) = v116;
                                        uint64_t v120 = *((void *)this + 1);
                                        int v121 = *((_DWORD *)this + 4) - v120;
                                        if (v121 >= 1)
                                        {
                                          signed int v122 = v121 / 5u;
                                          int v123 = v122 >= *(_DWORD *)(a1 + 148) - v119
                                               ? *(_DWORD *)(a1 + 148) - v119
                                               : v122;
                                          if (v123 >= 1)
                                          {
                                            int v124 = 0;
                                            while (*(_BYTE *)v120 == 93)
                                            {
                                              int v125 = *(_DWORD *)(v120 + 1);
                                              if (v119 >= *(_DWORD *)(a1 + 148))
                                              {
                                                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55 /Applications/Xcode.app/Contents/Developer/Platforms/AppleTVOS.platfor m/Developer/SDKs/AppleTVOS18.2.Internal.sdk/usr/local/include/google/p rotobuf/repeated_field.h",  602LL);
                                                uint64_t v126 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (size()) < (Capacity()): ");
                                                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=( &v223,  v126);
                                                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                int v119 = *(_DWORD *)(a1 + 144);
                                                uint64_t v118 = *(void *)(a1 + 136);
                                              }

                                              *(_DWORD *)(a1 + 144) = v119 + 1;
                                              *(_DWORD *)(v118 + 4LL * v119) = v125;
                                              ++v124;
                                              v120 += 5LL;
                                              ++v119;
                                              if (v123 == v124)
                                              {
                                                int v124 = v123;
                                                break;
                                              }
                                            }

                                            if (v124) {
                                              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip( this,  5 * v124);
                                            }
                                          }
                                        }

          *(_DWORD *)(a1 + 88) = v74;
          goto LABEL_238;
        case 0xCu:
          *(_DWORD *)(a1 + 152) |= 0x800000u;
          uint64_t v77 = *((void *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v77);
          goto LABEL_237;
        case 0xDu:
          *(_DWORD *)(a1 + 152) |= 0x400000u;
          int v78 = *((void *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v78);
          goto LABEL_237;
        case 0xEu:
          *(_DWORD *)(a1 + 152) |= 0x1000000u;
          uint64_t v79 = *((void *)this + 1);
          if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v79);
          goto LABEL_237;
        case 0xFu:
          *(_DWORD *)(a1 + 152) |= 0x2000u;
          int v80 = *((void *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v80);
          goto LABEL_237;
        case 0x10u:
          *(_DWORD *)(a1 + 152) |= 0x1000u;
          uint64_t v81 = *((void *)this + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v81);
          goto LABEL_237;
        case 0x11u:
          *(_DWORD *)(a1 + 152) |= 0x800u;
          int v82 = *((void *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v82);
          goto LABEL_237;
        case 0x12u:
          *(_DWORD *)(a1 + 152) |= 0x400u;
          signed int v83 = *((void *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v83);
          goto LABEL_237;
        case 0x13u:
          *(_DWORD *)(a1 + 152) |= 0x200u;
          int v84 = *((void *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v84);
          goto LABEL_237;
        case 0x14u:
          *(_DWORD *)(a1 + 152) |= 1u;
          int v85 = *((void *)this + 1);
          uint64_t v86 = *((void *)this + 2);
          uint64_t v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5LL && v85 + 10 <= v86)
          {
            unsigned int v88 = 0;
            int v89 = 0;
            uint64_t v90 = 0LL;
            do
            {
              int v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              uint64_t v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_270;
              }
              v88 += 7;
              int v85 = v91;
              unint64_t v14 = v89++ > 8;
            }

            while (!v14);
LABEL_207:
            uint64_t v90 = 0LL;
            goto LABEL_270;
          }

          int v155 = 0;
          uint64_t v156 = 0;
          uint64_t v90 = 0LL;
          if (v86 <= v85) {
            uint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              uint64_t v90 = 0LL;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              int v157 = v85 + 1;
              v158 = *(_BYTE *)(v87 + v85);
              *((void *)this + 1) = v157;
              v90 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                int v85 = v157;
                unint64_t v14 = v156++ > 8;
                if (v14) {
                  goto LABEL_207;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                uint64_t v90 = 0LL;
              }
            }

            break;
          }

    --v126;
  }

  while (v126);
  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_1018A2148);
  }
  unint64_t v134 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    int v136 = *(void *)(a1 + 176);
    uint64_t v137 = *(void *)(a1 + 184);
    uint64_t v138 = *(_DWORD *)(a1 + 192);
    v139 = *(void *)(a1 + 200);
    int v140 = *(unsigned __int8 *)(a1 + 208);
    unsigned int v141 = *(unsigned __int8 *)(a1 + 209);
    int v142 = *(double *)(a1 + 224);
    if (v142 == 1.79769313e308) {
      int v142 = -1.0;
    }
    uint64_t v143 = *(unsigned __int8 *)(a1 + 210);
    int v144 = *(void *)(a1 + 216);
    uint64_t v145 = *(unsigned __int8 *)(a1 + 232);
    int v146 = *(unsigned __int8 *)(a1 + 233);
    signed int v147 = *(void *)(a1 + 240);
    int v148 = *(void *)(a1 + 248);
    int v149 = *(unsigned __int8 *)(a1 + 256);
    *(_DWORD *)buf = 134352640;
    uint64_t v212 = v135;
    v213 = 2050;
    uint64_t v214 = v136;
    uint64_t v215 = 2050;
    uint64_t v216 = v137;
    uint64_t v217 = 1026;
    uint64_t v218 = v138;
    uint64_t v219 = 2050;
    uint64_t v220 = v139;
    uint64_t v221 = 1026;
    uint64_t v222 = v140;
    char v223 = 1026;
    v224 = v141;
    v225 = 2050;
    v226 = v142;
    v227 = 1026;
    v228 = v143;
    v229 = 2050;
    v230 = v144;
    v231 = 1026;
    v232 = v145;
    v233 = 1026;
    v234 = v146;
    v235 = 2050;
    v236 = v147;
    v237 = 2050;
    v238 = v148;
    v239 = 1026;
    v240 = v149;
    _os_log_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_DEBUG,  "CLRGCM,updateCurrentConfigurations,size,%{public}zu,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gp sActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{pu blic}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{pu blic}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycl e,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDev iceOptimizationEnabled,%{public}d",  buf,  0x7Cu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_1018A2148);
    }
    uint64_t v164 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    int v165 = *(void *)(a1 + 176);
    uint64_t v166 = *(void *)(a1 + 184);
    unsigned int v167 = *(_DWORD *)(a1 + 192);
    int v168 = *(void *)(a1 + 200);
    uint64_t v169 = *(unsigned __int8 *)(a1 + 208);
    int v170 = *(unsigned __int8 *)(a1 + 209);
    v171 = *(double *)(a1 + 224);
    if (v171 == 1.79769313e308) {
      v171 = -1.0;
    }
    int v172 = *(unsigned __int8 *)(a1 + 210);
    signed int v173 = *(void *)(a1 + 216);
    int v174 = *(unsigned __int8 *)(a1 + 232);
    int v175 = *(unsigned __int8 *)(a1 + 233);
    int v176 = *(void *)(a1 + 240);
    uint64_t v177 = *(void *)(a1 + 248);
    int v178 = *(unsigned __int8 *)(a1 + 256);
    int v181 = 134352640;
    uint64_t v182 = v164;
    int v183 = 2050;
    v184 = v165;
    int v185 = 2050;
    signed int v186 = v166;
    int v187 = 1026;
    int v188 = v167;
    uint64_t v189 = 2050;
    uint64_t v190 = v168;
    int v191 = 1026;
    uint64_t v192 = v169;
    uint64_t v193 = 1026;
    int v194 = v170;
    uint64_t v195 = 2050;
    int v196 = v171;
    v197 = 1026;
    int v198 = v172;
    signed int v199 = 2050;
    int v200 = v173;
    int v201 = 1026;
    uint64_t v202 = v174;
    uint64_t v203 = 1026;
    v204 = v175;
    v205 = 2050;
    uint64_t v206 = v176;
    uint64_t v207 = 2050;
    uint64_t v208 = v177;
    uint64_t v209 = 1026;
    v210 = v178;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  2LL,  "CLRGCM,updateCurrentConfigurations,size,%{public}zu,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gp sActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{pu blic}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{pu blic}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycl e,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDev iceOptimizationEnabled,%{public}d",  &v181,  124);
    uint64_t v180 = (uint8_t *)v179;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRhythmicGnssClientManager::updateCurrentConfigurations()",  "%s\n",  v179);
    if (v180 != buf) {
      free(v180);
    }
  }

LABEL_342:
                                                        v39 = (unsigned __int8 *)*((void *)this + 1);
                                                        unint64_t v152 = *((void *)this + 2);
                                                      }

                                                      while ((unint64_t)v39 < v152 && *v39 == 125);
                                                      if ((int)v152 - (int)v39 >= 2 && *v39 == 133 && v39[1] == 1)
                                                      {
                                                        while (1)
                                                        {
                                                          *((void *)this + 1) = v39 + 2;
LABEL_348:
                                                          if (wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)0x85,  TagFallback) != 2)
                                                          {
                                                            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff- a6e88e557b55/Applications/Xcode.app/Contents/Developer/Pla tforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Int ernal.sdk/usr/local/include/google/protobuf/wire_format_lite_inl.h",  247LL);
                                                            uint64_t v153 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (UInt32Size(tag)) == (tag_size): ");
                                                            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=( &v223,  v153);
                                                            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                          }

                                                          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback( this,  v224) & 1) == 0) {
                                                            return 0LL;
                                                          }
                                                          unsigned int v154 = v224[0];
                                                          int v155 = *(_DWORD *)(a1 + 216);
                                                          if (v155 == *(_DWORD *)(a1 + 220))
                                                          {
                                                            sub_10004AAFC(v208, v155 + 1);
                                                            int v155 = *(_DWORD *)(a1 + 216);
                                                          }

                                                          uint64_t v156 = *(void *)(a1 + 208);
                                                          int v157 = v155 + 1;
                                                          *(_DWORD *)(a1 + 216) = v155 + 1;
                                                          *(_DWORD *)(v156 + 4LL * v155) = v154;
                                                          v158 = (unsigned __int8 *)*((void *)this + 1);
                                                          int v159 = *((_DWORD *)this + 4) - (_DWORD)v158;
                                                          if (v159 >= 1)
                                                          {
                                                            signed int v160 = v159 / 6u;
                                                            int v161 = v160 >= *(_DWORD *)(a1 + 220) - v157
                                                                 ? *(_DWORD *)(a1 + 220) - v157
                                                                 : v160;
                                                            if (v161 >= 1)
                                                            {
                                                              int v162 = 0;
                                                              while (*v158 == 133 && v158[1] == 1)
                                                              {
                                                                int v163 = *(_DWORD *)(v158 + 2);
                                                                if (v157 >= *(_DWORD *)(a1 + 220))
                                                                {
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef -98ff-a6e88e557b55/Applications/Xcode.app/Contents/D eveloper/Platforms/AppleTVOS.platform/Developer/SDKs /AppleTVOS18.2.Internal.sdk/usr/local/include/google /protobuf/repeated_field.h",  602LL);
                                                                  uint64_t v164 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (size()) < (Capacity()): ");
                                                                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=( &v223,  v164);
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                  int v157 = *(_DWORD *)(a1 + 216);
                                                                  uint64_t v156 = *(void *)(a1 + 208);
                                                                }

                                                                *(_DWORD *)(a1 + 216) = v157 + 1;
                                                                *(_DWORD *)(v156 + 4LL * v157) = v163;
                                                                ++v162;
                                                                v158 += 6;
                                                                ++v157;
                                                                if (v161 == v162)
                                                                {
                                                                  int v162 = v161;
                                                                  break;
                                                                }
                                                              }

                                                              if (v162) {
                                                                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip( this,  6 * v162);
                                                              }
                                                            }
                                                          }

                *(void *)(a1 + 8) = v152;
              }

              else if ((_DWORD)v20 == 202)
              {
                *(void *)(a1 + 164) |= 2uLL;
                uint64_t v25 = *((void *)this + 1);
                int v26 = *((void *)this + 2);
                int v27 = *(void *)this;
                if (v25 > 0xFFFFFFFFFFFFFFF5LL || v25 + 10 > v26)
                {
                  uint64_t v156 = 0;
                  int v157 = 0;
                  uint64_t v30 = 0LL;
                  if (v26 <= v25) {
                    int v26 = *((void *)this + 1);
                  }
                  while (1)
                  {
                    if (v26 == v25)
                    {
                      uint64_t v30 = 0LL;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_290;
                    }

                    v158 = v25 + 1;
                    int v159 = *(_BYTE *)(v27 + v25);
                    *((void *)this + 1) = v158;
                    v30 |= (unint64_t)(v159 & 0x7F) << v156;
                    if ((v159 & 0x80) == 0) {
                      break;
                    }
                    v156 += 7;
                    uint64_t v25 = v158;
                    unint64_t v14 = v157++ > 8;
                    if (v14)
                    {
LABEL_188:
                      uint64_t v30 = 0LL;
                      goto LABEL_290;
                    }
                  }

                  if (*((_BYTE *)this + 24)) {
                    uint64_t v30 = 0LL;
                  }
                }

                else
                {
                  unsigned int v28 = 0;
                  int v29 = 0;
                  uint64_t v30 = 0LL;
                  while (1)
                  {
                    int v31 = v25 + 1;
                    *((void *)this + 1) = v25 + 1;
                    int v32 = *(_BYTE *)(v27 + v25);
                    v30 |= (unint64_t)(v32 & 0x7F) << v28;
                    if ((v32 & 0x80) == 0) {
                      break;
                    }
                    v28 += 7;
                    uint64_t v25 = v31;
                    unint64_t v14 = v29++ > 8;
                    if (v14) {
                      goto LABEL_188;
                    }
                  }
                }

LABEL_367:
                                                          v39 = (unsigned __int8 *)*((void *)this + 1);
                                                          int v165 = *v39;
                                                          if (v165 == 141)
                                                          {
                                                            if (v39[1] == 1)
                                                            {
                                                              while (1)
                                                              {
                                                                *((void *)this + 1) = v39 + 2;
LABEL_374:
                                                                if (wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)0x8D,  TagFallback) != 2)
                                                                {
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef -98ff-a6e88e557b55/Applications/Xcode.app/Contents/D eveloper/Platforms/AppleTVOS.platform/Developer/SDKs /AppleTVOS18.2.Internal.sdk/usr/local/include/google /protobuf/wire_format_lite_inl.h",  247LL);
                                                                  uint64_t v166 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (UInt32Size(tag)) == (tag_size): ");
                                                                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=( &v223,  v166);
                                                                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                }

                                                                if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback( this,  v224) & 1) == 0) {
                                                                  return 0LL;
                                                                }
                                                                unsigned int v167 = v224[0];
                                                                int v168 = *(_DWORD *)(a1 + 232);
                                                                if (v168 == *(_DWORD *)(a1 + 236))
                                                                {
                                                                  sub_10004AAFC(v207, v168 + 1);
                                                                  int v168 = *(_DWORD *)(a1 + 232);
                                                                }

                                                                uint64_t v169 = *(void *)(a1 + 224);
                                                                int v170 = v168 + 1;
                                                                *(_DWORD *)(a1 + 232) = v168 + 1;
                                                                *(_DWORD *)(v169 + 4LL * v168) = v167;
                                                                v171 = (unsigned __int8 *)*((void *)this + 1);
                                                                int v172 = *((_DWORD *)this + 4) - (_DWORD)v171;
                                                                if (v172 >= 1)
                                                                {
                                                                  signed int v173 = v172 / 6u;
                                                                  int v174 = v173 >= *(_DWORD *)(a1 + 236) - v170
                                                                       ? *(_DWORD *)(a1 + 236) - v170
                                                                       : v173;
                                                                  if (v174 >= 1)
                                                                  {
                                                                    int v175 = 0;
                                                                    while (*v171 == 141 && v171[1] == 1)
                                                                    {
                                                                      int v176 = *(_DWORD *)(v171 + 2);
                                                                      if (v170 >= *(_DWORD *)(a1 + 236))
                                                                      {
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a7d b-11ef-98ff-a6e88e557b55/Applications/Xcode.ap p/Contents/Developer/Platforms/AppleTVOS.platf orm/Developer/SDKs/AppleTVOS18.2.Internal.sdk/ usr/local/include/google/protobuf/repeated_field.h",  602LL);
                                                                        uint64_t v177 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (size()) < (Capacity()): ");
                                                                        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=( &v223,  v177);
                                                                        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                        int v170 = *(_DWORD *)(a1 + 232);
                                                                        uint64_t v169 = *(void *)(a1 + 224);
                                                                      }

                                                                      *(_DWORD *)(a1 + 232) = v170 + 1;
                                                                      *(_DWORD *)(v169 + 4LL * v170) = v176;
                                                                      ++v175;
                                                                      v171 += 6;
                                                                      ++v170;
                                                                      if (v174 == v175)
                                                                      {
                                                                        int v175 = v174;
                                                                        break;
                                                                      }
                                                                    }

                                                                    if (v175) {
                                                                      wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip( this,  6 * v175);
                                                                    }
                                                                  }
                                                                }

LABEL_419:
                                                                      v39 = (unsigned __int8 *)*((void *)this + 1);
                                                                      int v191 = *v39;
                                                                      if (v191 == 153) {
                                                                        break;
                                                                      }
                                                                      if (v191 != 145 || v39[1] != 1) {
                                                                        goto LABEL_2;
                                                                      }
                                                                    }

                                                                    if (v39[1] == 1)
                                                                    {
                                                                      do
                                                                      {
                                                                        *((void *)this + 1) = v39 + 2;
LABEL_426:
                                                                        if (wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)0x99,  TagFallback) != 2)
                                                                        {
                                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3fc02-a 7db-11ef-98ff-a6e88e557b55/Applications/Xcod e.app/Contents/Developer/Platforms/AppleTVOS .platform/Developer/SDKs/AppleTVOS18.2.Inter nal.sdk/usr/local/include/google/protobuf/wi re_format_lite_inl.h",  247LL);
                                                                          uint64_t v192 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (UInt32Size(tag)) == (tag_size): ");
                                                                          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=( &v223,  v192);
                                                                          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                        }

                                                                        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback( this,  (unint64_t *)v224) & 1) == 0) {
                                                                          return 0LL;
                                                                        }
                                                                        uint64_t v193 = *(void *)v224;
                                                                        int v194 = *(_DWORD *)(a1 + 264);
                                                                        if (v194 == *(_DWORD *)(a1 + 268))
                                                                        {
                                                                          sub_10008D024(v209, v194 + 1);
                                                                          int v194 = *(_DWORD *)(a1 + 264);
                                                                        }

                                                                        uint64_t v195 = *(void *)(a1 + 256);
                                                                        int v196 = v194 + 1;
                                                                        *(_DWORD *)(a1 + 264) = v194 + 1;
                                                                        *(void *)(v195 + 8LL * v194) = v193;
                                                                        v197 = (unsigned __int8 *)*((void *)this + 1);
                                                                        int v198 = *((_DWORD *)this + 4) - (_DWORD)v197;
                                                                        if (v198 >= 1)
                                                                        {
                                                                          signed int v199 = v198 / 0xAu;
                                                                          int v200 = v199 >= *(_DWORD *)(a1 + 268) - v196
                                                                               ? *(_DWORD *)(a1 + 268) - v196
                                                                               : v199;
                                                                          if (v200 >= 1)
                                                                          {
                                                                            int v201 = 0;
                                                                            while (*v197 == 153 && v197[1] == 1)
                                                                            {
                                                                              uint64_t v202 = *(void *)(v197 + 2);
                                                                              if (v196 >= *(_DWORD *)(a1 + 268))
                                                                              {
                                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v224,  3LL,  "/AppleInternal/Library/BuildRoots/9fd3 fc02-a7db-11ef-98ff-a6e88e557b55/Appli cations/Xcode.app/Contents/Developer/P latforms/AppleTVOS.platform/Developer/ SDKs/AppleTVOS18.2.Internal.sdk/usr/lo cal/include/google/protobuf/repeated_field.h",  602LL);
                                                                                uint64_t v203 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v224,  "CHECK failed: (size()) < (Capacity()): ");
                                                                                wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=( &v223,  v203);
                                                                                wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v224);
                                                                                int v196 = *(_DWORD *)(a1 + 264);
                                                                                uint64_t v195 = *(void *)(a1 + 256);
                                                                              }

                                                                              *(_DWORD *)(a1 + 264) = v196 + 1;
                                                                              *(void *)(v195 + 8LL * v196) = v202;
                                                                              ++v201;
                                                                              v197 += 10;
                                                                              ++v196;
                                                                              if (v200 == v201)
                                                                              {
                                                                                int v201 = v200;
                                                                                break;
                                                                              }
                                                                            }

                                                                            if (v201) {
                                                                              wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip( this,  10 * v201);
                                                                            }
                                                                          }
                                                                        }

LABEL_445:
                                                                        v39 = (unsigned __int8 *)*((void *)this + 1);
                                                                        v204 = (unsigned __int8 *)*((void *)this + 2);
                                                                      }

                                                                      while ((int)v204 - (int)v39 > 1
                                                                           && *v39 == 153
                                                                           && v39[1] == 1);
                                                                      if (v39 == v204
                                                                        && (*((_DWORD *)this + 11)
                                                                         || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                                                                      {
                                                                        *((_DWORD *)this + 8) = 0;
                                                                        uint64_t result = 1LL;
                                                                        *((_BYTE *)this + 36) = 1;
                                                                        return result;
                                                                      }
                                                                    }
                                                                  }

                                                                  goto LABEL_2;
                                                                }

                                                                if (v178 != 141 || v39[1] != 1) {
                                                                  goto LABEL_2;
                                                                }
                                                              }
                                                            }

                                                            goto LABEL_2;
                                                          }

                                                          if (v165 != 133 || v39[1] != 1) {
                                                            goto LABEL_2;
                                                          }
                                                        }
                                                      }

                                                      goto LABEL_2;
                                                    }
                                                  }
                                                }

                                                goto LABEL_2;
                                              }

                                              if (v140 != 96) {
                                                goto LABEL_2;
                                              }
                                            }
                                          }

                                          goto LABEL_2;
                                        }
                                      }
                                    }

                                    if (v115 != 80) {
                                      goto LABEL_2;
                                    }
                                  }
                                }
                              }
                            }

                            goto LABEL_2;
                          }
                        }
                      }
                    }

                    goto LABEL_2;
                  }
                }
              }

              if (v76 != 32) {
                goto LABEL_2;
              }
            }
          }

          continue;
        }

        return 0LL;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_150;
        }
        if (v7 != 2) {
          goto LABEL_67;
        }
        uint64_t result = sub_10006E130(this, v216);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_166;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2)
        {
          uint64_t result = sub_10081A7F0(this, v217);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_190;
        }

        i = (char *)*((void *)this + 1);
        unint64_t v13 = *((void *)this + 2);
        goto LABEL_171;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_195;
        }
        if (v7 != 2) {
          goto LABEL_67;
        }
        uint64_t result = sub_10006E130(this, v221);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_95;
      case 6u:
        int v7 = TagFallback & 7;
        int v15 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_99;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 2)
        {
          uint64_t result = sub_1008102E0(this, v219);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_228;
        }

        if (v7 == 5) {
          goto LABEL_212;
        }
        goto LABEL_67;
      case 8u:
        int v7 = TagFallback & 7;
        int v17 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_232;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_67;
        }
        int v18 = *(_DWORD *)(a1 + 276);
        goto LABEL_240;
      case 0xAu:
        int v7 = TagFallback & 7;
        if (v7 == 2)
        {
          uint64_t result = sub_10081A7F0(this, v215);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_266;
        }

        j = (char *)*((void *)this + 1);
        unint64_t v19 = *((void *)this + 2);
        goto LABEL_247;
      case 0xBu:
        int v7 = TagFallback & 7;
        if (v7 == 2)
        {
          uint64_t result = sub_1008102E0(this, v220);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_287;
        }

        if (v7 == 5) {
          goto LABEL_271;
        }
        goto LABEL_67;
      case 0xCu:
        int v7 = TagFallback & 7;
        if (v7 == 2)
        {
          uint64_t result = sub_10081A7F0(this, v218);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_311;
        }

        k = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_292;
      case 0xDu:
        int v7 = TagFallback & 7;
        uint64_t v23 = (unsigned __int8 *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_316;
      case 0xEu:
        int v7 = TagFallback & 7;
        if (v7 == 2)
        {
          uint64_t result = sub_10081A7F0(this, v214);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_126;
        }

        uint64_t v24 = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_107;
      case 0xFu:
        int v7 = TagFallback & 7;
        if (v7 == 2)
        {
          uint64_t result = sub_1008102E0(this, v222);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_342;
        }

        if (v7 == 5) {
          goto LABEL_326;
        }
        goto LABEL_67;
      case 0x10u:
        int v7 = TagFallback & 7;
        if (v7 == 2)
        {
          uint64_t result = sub_1008102E0(this, v208);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_367;
        }

        if (v7 == 5) {
          goto LABEL_348;
        }
        goto LABEL_67;
      case 0x11u:
        int v7 = TagFallback & 7;
        if (v7 == 2)
        {
          uint64_t result = sub_1008102E0(this, v207);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_393;
        }

        if (v7 == 5) {
          goto LABEL_374;
        }
        goto LABEL_67;
      case 0x12u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_400;
        }
        if (v7 != 2) {
          goto LABEL_67;
        }
        uint64_t result = sub_10006E130(this, v206);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_419;
      case 0x13u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_426;
        }
        if (v7 != 2) {
          goto LABEL_67;
        }
        uint64_t result = sub_10006E130(this, v209);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_445;
      default:
        int v7 = TagFallback & 7;
        goto LABEL_67;
    }
  }

void sub_10081A750( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

uint64_t sub_10081A7F0(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  uint64_t v4 = (char *)*((void *)this + 1);
  if ((unint64_t)v4 >= *((void *)this + 2) || *v4 < 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v5 = v12;
  }

  else
  {
    unsigned int v5 = *v4;
    unsigned int v12 = v5;
    *((void *)this + 1) = v4 + 1;
  }

  int v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
  {
    do
    {
      int v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v13);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v9 = v13;
      }

      else
      {
        unsigned int v9 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      int v10 = *(_DWORD *)(a2 + 8);
      if (v10 == *(_DWORD *)(a2 + 12))
      {
        sub_10004AAFC(a2, v10 + 1);
        int v10 = *(_DWORD *)(a2 + 8);
      }

      uint64_t v11 = *(void *)a2;
      *(_DWORD *)(a2 + 8) = v10 + 1;
      *(_DWORD *)(v11 + 4LL * v10) = v9;
    }

    while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) > 0);
  }

  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
  return 1LL;
}

uint64_t sub_10081A8FC( uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  if ((*(_BYTE *)(result + 276) & 1) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  *(void *)(result + 8),  a2,  a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    uint64_t v6 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  a2,  *(float *)(*(void *)(v5 + 16) + 4 * v6++),  a3);
    while (v6 < *(int *)(v5 + 24));
  }

  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3,  a2,  *(double *)(*(void *)(v5 + 32) + 8 * v7++),  a3);
    while (v7 < *(int *)(v5 + 40));
  }

  if (*(int *)(v5 + 56) >= 1)
  {
    uint64_t v8 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4,  *(_DWORD *)(*(void *)(v5 + 48) + 4 * v8++),  a2,  a4);
    while (v8 < *(int *)(v5 + 56));
  }

  if (*(int *)(v5 + 72) >= 1)
  {
    uint64_t v9 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5,  a2,  *(double *)(*(void *)(v5 + 64) + 8 * v9++),  a3);
    while (v9 < *(int *)(v5 + 72));
  }

  if ((*(_BYTE *)(v5 + 276) & 0x20) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6,  *(void *)(v5 + 80),  a2,  a4);
  }
  if (*(int *)(v5 + 96) >= 1)
  {
    uint64_t v10 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7,  a2,  *(float *)(*(void *)(v5 + 88) + 4 * v10++),  a3);
    while (v10 < *(int *)(v5 + 96));
  }

  int v11 = *(_DWORD *)(v5 + 276);
  if ((v11 & 0x80) != 0)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8,  *(void *)(v5 + 104),  a2,  a4);
    int v11 = *(_DWORD *)(v5 + 276);
  }

  if ((v11 & 0x100) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes( 9LL,  *(void *)(v5 + 112),  a2);
  }
  if (*(int *)(v5 + 128) >= 1)
  {
    uint64_t v12 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA,  *(_DWORD *)(*(void *)(v5 + 120) + 4 * v12++),  a2,  a4);
    while (v12 < *(int *)(v5 + 128));
  }

  if (*(int *)(v5 + 144) >= 1)
  {
    uint64_t v13 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB,  a2,  *(float *)(*(void *)(v5 + 136) + 4 * v13++),  a3);
    while (v13 < *(int *)(v5 + 144));
  }

  if (*(int *)(v5 + 160) >= 1)
  {
    uint64_t v14 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC,  *(_DWORD *)(*(void *)(v5 + 152) + 4 * v14++),  a2,  a4);
    while (v14 < *(int *)(v5 + 160));
  }

  if ((*(_BYTE *)(v5 + 277) & 0x10) != 0) {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD,  *(void *)(v5 + 168),  a2,  a4);
  }
  if (*(int *)(v5 + 184) >= 1)
  {
    uint64_t v15 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE,  *(_DWORD *)(*(void *)(v5 + 176) + 4 * v15++),  a2,  a4);
    while (v15 < *(int *)(v5 + 184));
  }

  if (*(int *)(v5 + 200) >= 1)
  {
    uint64_t v16 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF,  a2,  *(float *)(*(void *)(v5 + 192) + 4 * v16++),  a3);
    while (v16 < *(int *)(v5 + 200));
  }

  if (*(int *)(v5 + 216) >= 1)
  {
    uint64_t v17 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10,  a2,  *(float *)(*(void *)(v5 + 208) + 4 * v17++),  a3);
    while (v17 < *(int *)(v5 + 216));
  }

  if (*(int *)(v5 + 232) >= 1)
  {
    uint64_t v18 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x11,  a2,  *(float *)(*(void *)(v5 + 224) + 4 * v18++),  a3);
    while (v18 < *(int *)(v5 + 232));
  }

  if (*(int *)(v5 + 248) >= 1)
  {
    uint64_t v19 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12,  a2,  *(double *)(*(void *)(v5 + 240) + 8 * v19++),  a3);
    while (v19 < *(int *)(v5 + 248));
  }

  if (*(int *)(v5 + 264) >= 1)
  {
    uint64_t v20 = 0LL;
    do
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13,  a2,  *(double *)(*(void *)(v5 + 256) + 8 * v20++),  a3);
    while (v20 < *(int *)(v5 + 264));
  }

  return result;
}

uint64_t sub_10081AC74(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 276);
  if (!(_BYTE)v3)
  {
    int v4 = 0;
    goto LABEL_10;
  }

  if ((v3 & 1) != 0)
  {
    int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8),  a2)
       + 1;
    int v3 = *(_DWORD *)(a1 + 276);
    if ((v3 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  int v4 = 0;
  if ((v3 & 0x20) != 0)
  {
LABEL_7:
    v4 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64( *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 80),  a2)
        + 1;
    int v3 = *(_DWORD *)(a1 + 276);
  }

void sub_10081AF94(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_10081AFE0()
{
  return 1LL;
}

void *sub_10081AFE8@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.VLLocalizationMaps488Details");
}

void sub_10081AFF8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v8,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  6020LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v8,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }

  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) |= 1u;
    uint64_t v5 = *(_OWORD **)(a1 + 8);
    if (!v5)
    {
      uint64_t v5 = operator new(0x118uLL);
      *(void *)uint64_t v5 = off_101859548;
      *(_OWORD *)((char *)v5 + 8) = 0u;
      *(_OWORD *)((char *)v5 + 24) = 0u;
      *(_OWORD *)((char *)v5 + 40) = 0u;
      *(_OWORD *)((char *)v5 + 56) = 0u;
      *(_OWORD *)((char *)v5 + 72) = 0u;
      *(_OWORD *)((char *)v5 + 88) = 0u;
      *(_OWORD *)((char *)v5 + 120) = 0u;
      *(_OWORD *)((char *)v5 + 136) = 0u;
      *(_OWORD *)((char *)v5 + 152) = 0u;
      v5[11] = 0u;
      v5[12] = 0u;
      v5[13] = 0u;
      v5[14] = 0u;
      v5[15] = 0u;
      v5[16] = 0u;
      *((void *)v5 + 34) = 0LL;
      *((void *)v5 + 13) = 0LL;
      *((void *)v5 + 14) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
      *((void *)v5 + 21) = 0LL;
      *(void *)(a1 + 8) = v5;
    }

    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_1019A1810 + 8);
    }
    sub_100818660((uint64_t)v5, v6);
  }

void sub_10081B0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10081B110(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1018595C0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1019A1810 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10081B164(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
}

void *sub_10081B178()
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *uint64_t result = &off_1018595C0;
  return result;
}

uint64_t sub_10081B1A0(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t result = *(void *)(result + 8);
    if (result) {
      uint64_t result = sub_100818D24(result);
    }
  }

  *(_DWORD *)(v1 + 20) = 0;
  return result;
}

uint64_t sub_10081B1D4( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)this + 1);
      if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      }

      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((void *)this + 1) = v5 + 1;
      }

      if ((_DWORD)TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 20) |= 1u;
      char v7 = *(_OWORD **)(a1 + 8);
      if (!v7)
      {
        char v7 = operator new(0x118uLL);
        *(void *)char v7 = off_101859548;
        *(_OWORD *)((char *)v7 + 8) = 0u;
        *(_OWORD *)((char *)v7 + 24) = 0u;
        *(_OWORD *)((char *)v7 + 40) = 0u;
        *(_OWORD *)((char *)v7 + 56) = 0u;
        *(_OWORD *)((char *)v7 + 72) = 0u;
        *(_OWORD *)((char *)v7 + 88) = 0u;
        *(_OWORD *)((char *)v7 + 120) = 0u;
        *(_OWORD *)((char *)v7 + 136) = 0u;
        *(_OWORD *)((char *)v7 + 152) = 0u;
        v7[11] = 0u;
        v7[12] = 0u;
        v7[13] = 0u;
        v7[14] = 0u;
        v7[15] = 0u;
        v7[16] = 0u;
        *((void *)v7 + 34) = 0LL;
        *((void *)v7 + 13) = 0LL;
        *((void *)v7 + 14) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
        *((void *)v7 + 21) = 0LL;
        *(void *)(a1 + 8) = v7;
      }

      uint64_t v8 = (char *)*((void *)this + 1);
      if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v17)) {
          return 0LL;
        }
      }

      else
      {
        unsigned int v17 = *v8;
        *((void *)this + 1) = v8 + 1;
      }

      int v9 = *((_DWORD *)this + 14);
      int v10 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v9 + 1;
      if (v9 >= v10) {
        return 0LL;
      }
      int v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v17);
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v11);
      int v13 = *((_DWORD *)this + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)this + 14) = v15;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1LL;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
  }

  return 1LL;
}

uint64_t sub_10081B3B4( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if ((*(_BYTE *)(result + 20) & 1) != 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_1019A1810 + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v5,  a2,  a4);
  }

  return result;
}

uint64_t sub_10081B3E0(uint64_t a1, unint64_t a2)
{
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      uint64_t v4 = *(void *)(qword_1019A1810 + 8);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10081AC74(v4, a2);
    int v7 = (int)v5;
    else {
      int v8 = 1;
    }
    uint64_t result = (v7 + v8 + 1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void sub_10081B44C(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_10081B498()
{
  return 1LL;
}

void *sub_10081B4A0@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.VLLocalizationDebugInfo");
}

void sub_10081B4B0(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage( v18,  3LL,  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionEvent.pb.cc",  6380LL);
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<( v18,  "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v17, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v18);
  }

  LOBYTE(sub_1012279C0(0LL, v4, v5) = *(_BYTE *)(a2 + 56);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) != 0)
    {
      *(_DWORD *)(a1 + 56) |= 1u;
      unsigned int v6 = *(char **)(a1 + 8);
      if (!v6)
      {
        unsigned int v6 = (char *)operator new(0x28uLL);
        *(void *)unsigned int v6 = off_101858CD8;
        *(_OWORD *)(v6 + 8) = 0u;
        *(_OWORD *)(v6 + 24) = 0u;
        *(void *)(a1 + 8) = v6;
      }

      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_1019A1818 + 8);
      }
      sub_10080FAF4((uint64_t)v6, v7);
      int v5 = *(_DWORD *)(a2 + 56);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_21;
      }
    }

    else if ((*(_BYTE *)(a2 + 56) & 2) == 0)
    {
      goto LABEL_6;
    }

    *(_DWORD *)(a1 + 56) |= 2u;
    int v8 = *(void **)(a1 + 16);
    if (!v8)
    {
      int v8 = operator new(0x20uLL);
      void *v8 = &off_1018593E0;
      v8[1] = 0LL;
      v8[2] = 0LL;
      v8[3] = 0LL;
      *(void *)(a1 + 16) = v8;
    }

    uint64_t v9 = *(void *)(a2 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1818 + 16);
    }
    sub_100817748((uint64_t)v8, v9);
    int v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_26;
    }

void sub_10081B6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_10081B714(void *result)
{
  if ((void *)qword_1019A1818 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    uint64_t v4 = v1[3];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v5 = v1[4];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    uint64_t result = (void *)v1[5];
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  return result;
}

void sub_10081B7AC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859638;
  sub_10081B714(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10081B7DC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_101859638;
  sub_10081B714(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete(v2);
}

uint64_t sub_10081B810(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_1019A1818;
  if (!qword_1019A1818)
  {
    sub_10080F3B0(0LL, a2, a3, a4);
    return qword_1019A1818;
  }

  return result;
}

double sub_10081B83C()
{
  v0 = (char *)operator new(0x40uLL);
  *(void *)v0 = off_101859638;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *((_DWORD *)v0 + 14) = 0;
  return result;
}

uint64_t sub_10081B874(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 56);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(result + 56) & 1) != 0)
    {
      uint64_t v3 = *(void *)(result + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 36))
        {
          *(void *)(v3 + 8) = 0LL;
          *(void *)(v3 + 16) = 0LL;
          *(void *)(v3 + 24) = 0LL;
        }

        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *(_DWORD *)(result + 56);
      }
    }

    if ((v2 & 2) != 0)
    {
      uint64_t v4 = *(void *)(result + 16);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 28))
        {
          if ((*(_BYTE *)(v4 + 28) & 1) != 0)
          {
            uint64_t v5 = *(void *)(v4 + 8);
            if (v5)
            {
              *(_DWORD *)(v5 + 16) = 0;
              *(_DWORD *)(v5 + 28) = 0;
            }
          }

          *(void *)(v4 + 16) = 0LL;
        }

        *(_DWORD *)(v4 + 28) = 0;
        int v2 = *(_DWORD *)(result + 56);
      }
    }

    if ((v2 & 4) != 0)
    {
      uint64_t v6 = *(void *)(result + 24);
      if (v6)
      {
        if (*(int *)(v6 + 16) >= 1)
        {
          uint64_t v7 = 0LL;
          do
          {
            uint64_t v8 = *(void *)(*(void *)(v6 + 8) + 8 * v7);
            double result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32LL))(v8);
            ++v7;
          }

          while (v7 < *(int *)(v6 + 16));
        }

        *(_DWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 56);
      }
    }

    if ((v2 & 8) != 0)
    {
      uint64_t v9 = *(void *)(v1 + 32);
      if (v9)
      {
        if (*(int *)(v9 + 16) >= 1)
        {
          uint64_t v10 = 0LL;
          do
          {
            uint64_t v11 = *(void *)(*(void *)(v9 + 8) + 8 * v10);
            double result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32LL))(v11);
            ++v10;
          }

          while (v10 < *(int *)(v9 + 16));
        }

        *(_DWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 56);
      }
    }

    *(_DWORD *)(v1 + 48) = 0;
    if ((v2 & 0x20) != 0)
    {
      uint64_t v12 = *(void *)(v1 + 40);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 20) & 1) != 0)
        {
          double result = *(void *)(v12 + 8);
          if (result) {
            double result = sub_100818D24(result);
          }
        }

        *(_DWORD *)(v12 + 20) = 0;
      }
    }
  }

  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t sub_10081B9BC( uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 < *((void *)this + 2) && (*v5 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback) {
        return 1LL;
      }
      goto LABEL_6;
    }

    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback) {
      return 1LL;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_24;
        }
        *(_DWORD *)(a1 + 56) |= 1u;
        uint64_t v8 = *(char **)(a1 + 8);
        if (!v8)
        {
          uint64_t v8 = (char *)operator new(0x28uLL);
          *(void *)uint64_t v8 = off_101858CD8;
          *(_OWORD *)(v8 + 8) = 0u;
          *(_OWORD *)(v8 + 24) = 0u;
          *(void *)(a1 + 8) = v8;
        }

        uint64_t v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v56)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v56 = *v9;
          *((void *)this + 1) = v9 + 1;
        }

        int v11 = *((_DWORD *)this + 14);
        int v12 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v11 + 1;
        if (v11 >= v12) {
          return 0LL;
        }
        int v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
        int v15 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v15, 1);
        int v17 = v15 - 1;
        if (v17 < 0 == v16) {
          *((_DWORD *)this + 14) = v17;
        }
        int v18 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v18 + 1;
        goto LABEL_36;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_24;
        }
LABEL_36:
        *(_DWORD *)(a1 + 56) |= 2u;
        uint64_t v19 = *(void **)(a1 + 16);
        if (!v19)
        {
          uint64_t v19 = operator new(0x20uLL);
          void *v19 = &off_1018593E0;
          v19[1] = 0LL;
          v19[2] = 0LL;
          v19[3] = 0LL;
          *(void *)(a1 + 16) = v19;
        }

        int v20 = (char *)*((void *)this + 1);
        if ((unint64_t)v20 >= *((void *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v56)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v56 = *v20;
          *((void *)this + 1) = v20 + 1;
        }

        int v21 = *((_DWORD *)this + 14);
        int v22 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v21 + 1;
        if (v21 >= v22) {
          return 0LL;
        }
        int v23 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v23);
        int v25 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v25, 1);
        int v26 = v25 - 1;
        if (v26 < 0 == v16) {
          *((_DWORD *)this + 14) = v26;
        }
        int v27 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v27 + 1;
LABEL_50:
        *(_DWORD *)(a1 + 56) |= 4u;
        uint64_t v28 = *(void **)(a1 + 24);
        if (!v28)
        {
          uint64_t v28 = operator new(0x28uLL);
          v28[1] = 0LL;
          v28[2] = 0LL;
          *uint64_t v28 = off_101858EB8;
          *((_DWORD *)v28 + 6) = 0;
          v28[4] = 0LL;
          *(void *)(a1 + 24) = v28;
        }

        int v29 = (char *)*((void *)this + 1);
        if ((unint64_t)v29 >= *((void *)this + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v56)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v56 = *v29;
          *((void *)this + 1) = v29 + 1;
        }

        int v30 = *((_DWORD *)this + 14);
        int v31 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v30 + 1;
        if (v30 >= v31) {
          return 0LL;
        }
        int v32 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v32);
        int v34 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v34, 1);
        int v35 = v34 - 1;
        if (v35 < 0 == v16) {
          *((_DWORD *)this + 14) = v35;
        }
        int v36 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v36 + 1;
LABEL_64:
        *(_DWORD *)(a1 + 56) |= 8u;
        int v37 = *(void **)(a1 + 32);
        if (!v37)
        {
          int v37 = operator new(0x28uLL);
          v37[1] = 0LL;
          v37[2] = 0LL;
          *int v37 = off_1018594D0;
          *((_DWORD *)v37 + 6) = 0;
          v37[4] = 0LL;
          *(void *)(a1 + 32) = v37;
        }

        uint64_t v38 = (char *)*((void *)this + 1);
        if ((unint64_t)v38 >= *((void *)this + 2) || *v38 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v56)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v56 = *v38;
          *((void *)this + 1) = v38 + 1;
        }

        int v39 = *((_DWORD *)this + 14);
        int v40 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v39 + 1;
        if (v39 >= v40) {
          return 0LL;
        }
        int v41 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v41);
        int v43 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v43, 1);
        int v44 = v43 - 1;
        if (v44 < 0 == v16) {
          *((_DWORD *)this + 14) = v44;
        }
        uint64_t v45 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v45 + 1;
LABEL_78:
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v56) & 1) == 0) {
          return 0LL;
        }
        *(_DWORD *)(a1 + 48) = v56;
        int v10 = *(_DWORD *)(a1 + 56) | 0x10;
        *(_DWORD *)(a1 + 56) = v10;
        int v46 = (_BYTE *)*((void *)this + 1);
        *((void *)this + 1) = v46 + 1;
LABEL_82:
        *(_DWORD *)(a1 + 56) = v10 | 0x20;
        signed int v47 = *(void **)(a1 + 40);
        if (!v47)
        {
          signed int v47 = operator new(0x18uLL);
          v47[1] = 0LL;
          v47[2] = 0LL;
          *signed int v47 = &off_1018595C0;
          *(void *)(a1 + 40) = v47;
        }

        int v48 = (char *)*((void *)this + 1);
        if ((unint64_t)v48 >= *((void *)this + 2) || *v48 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback( this,  &v56)) {
            return 0LL;
          }
        }

        else
        {
          unsigned int v56 = *v48;
          *((void *)this + 1) = v48 + 1;
        }

        int v49 = *((_DWORD *)this + 14);
        int v50 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v49 + 1;
        if (v49 >= v50) {
          return 0LL;
        }
        int v51 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v56);
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v51);
        int v53 = *((_DWORD *)this + 14);
        BOOL v16 = __OFSUB__(v53, 1);
        int v54 = v53 - 1;
        if (v54 < 0 == v16) {
          *((_DWORD *)this + 14) = v54;
        }
        if (*((void *)this + 1) == *((void *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1LL;
          *((_BYTE *)this + 36) = 1;
          return result;
        }

        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_50;
        }
        goto LABEL_24;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_64;
        }
        goto LABEL_24;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_78;
        }
        goto LABEL_24;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_24;
        }
        int v10 = *(_DWORD *)(a1 + 56);
        goto LABEL_82;
      default:
        int v7 = TagFallback & 7;
LABEL_24:
        if (v7 == 4) {
          return 1LL;
        }
        continue;
    }
  }

uint64_t sub_10081BFD8( uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 56);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_1019A1818 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1,  v7,  a2,  a4);
    int v6 = *(_DWORD *)(v5 + 56);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_1019A1818 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage( (wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2,  v8,  a2,  a4);
  int v6 = *(_DWORD *)(v5 + 56);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }

uint64_t sub_10081C0F4(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(_BYTE *)(a1 + 56);
  if (!(_BYTE)v3)
  {
    uint64_t v5 = 0LL;
    goto LABEL_46;
  }

  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    unsigned int v4 = 0;
    if ((*(_BYTE *)(a1 + 56) & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }

  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_1019A1818 + 8);
  }
  int v7 = *(unsigned __int8 *)(v6 + 36);
  if (*(_BYTE *)(v6 + 36))
  {
    int v8 = (v7 << 31 >> 31) & 9;
    if ((v7 & 2) != 0) {
      v8 += 9;
    }
    if ((v7 & 4) != 0) {
      int v7 = v8 + 9;
    }
    else {
      int v7 = v8;
    }
  }

  *(_DWORD *)(v6 + 32) = v7;
  unsigned int v4 = v7 + 2;
  int v3 = *(_DWORD *)(a1 + 56);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_1019A1818 + 16);
    }
    uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100817B6C(v9, a2);
    int v11 = (int)v10;
    else {
      int v12 = 1;
    }
    v4 += v11 + v12 + 1;
    int v3 = *(_DWORD *)(a1 + 56);
  }

void sub_10081C2BC(uint64_t a1, void *lpsrc)
{
}

uint64_t sub_10081C308()
{
  return 1LL;
}

void *sub_10081C310@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "CLP.LogEntry.Vision.VLLocalizationResult");
}

uint64_t sub_10081C320(uint64_t a1)
{
  return *(unsigned int *)(a1 + 272);
}

uint64_t sub_10081C32C(uint64_t a1)
{
  uint64_t v2 = 264LL;
  do
  {
    int v3 = *(void **)(a1 + v2 - 24);
    if (v3)
    {
      *(void *)(a1 + v2 - 16) = v3;
      operator delete(v3);
    }

    v2 -= 24LL;
  }

  while (v2);
  return a1;
}

uint64_t sub_10081C36C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

uint64_t sub_10081C39C(uint64_t a1)
{
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_10081CCFC(a1 + 144, 360.0, 0.0, 10800.0);
  sub_10081CCFC(a1 + 192, 20.0, 0.0, 1000.0);
  sub_10081CCFC(a1 + 240, 10.0, 0.0, 200.0);
  sub_10081CCFC(a1 + 288, 15.0, 0.0, 180.0);
  *(_DWORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  sub_10081CCFC(a1 + 648, 10.0, 0.0, 200.0);
  *(_DWORD *)(a1 + 696) = 13;
  sub_10081CCFC(a1 + 704, 15.0, 0.0, 180.0);
  *(_DWORD *)(a1 + 752) = 13;
  *(void *)(a1 + 760) = 0LL;
  *(void *)(a1 + 776) = 0LL;
  *(void *)(a1 + 768) = 0LL;
  sub_10081CCFC(a1 + 784, 0.7, -4.7, 3.0);
  *(_DWORD *)(a1 + 832) = 13;
  sub_10081CCFC(a1 + 840, 0.7, -4.7, 3.0);
  *(_DWORD *)(a1 + 888) = 13;
  uint64_t v2 = sub_10081CCFC(a1 + 896, 0.5, -2.5, 3.0);
  *(_DWORD *)(a1 + 944) = 13;
  *(void *)(v2 + 52) = 0LL;
  *(void *)(v2 + 57) = 0LL;
  *(void *)(a1 + 968) = 0x7FEFFFFFFFFFFFFFLL;
  *(int64x2_t *)(a1 + 976) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 992) = 0LL;
  *(void *)(a1 + 1008) = 0LL;
  *(void *)(a1 + 1000) = 0LL;
  *(_BYTE *)(a1 + 1016) = 0;
  *(void *)(a1 + 1024) = 0xBFF0000000000000LL;
  *(void *)(a1 + 1032) = 0LL;
  *(void *)(a1 + 1048) = 0LL;
  *(void *)(a1 + 1040) = 0LL;
  *(void *)(a1 + 1176) = 0LL;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(int64x2_t *)(a1 + 1440) = vdupq_n_s64(0x42uLL);
  *(void *)(a1 + 1456) = 4LL;
  *(void *)(a1 + 1464) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1472) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1488) = dispatch_queue_create("com.apple.locationd.CLElevationAWDAggregator", 0LL);
  *(_BYTE *)(a1 + 1496) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_DWORD *)(a1 + 1696) = 1;
  return a1;
}

void sub_10081C630( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  int v12 = *(void **)(v10 + 864);
  if (v12)
  {
    *(void *)(v10 + 872) = v12;
    operator delete(v12);
  }

  uint64_t v13 = *(void **)(v10 + 808);
  if (v13)
  {
    *(void *)(v10 + 816) = v13;
    operator delete(v13);
  }

  unsigned int v14 = *(void **)(v10 + 728);
  if (v14)
  {
    *(void *)(v10 + 736) = v14;
    operator delete(v14);
  }

  int v15 = *(void **)(v10 + 672);
  if (v15)
  {
    *(void *)(v10 + 680) = v15;
    operator delete(v15);
  }

  a10 = (void **)(v10 + 456);
  sub_10081CDCC(&a10);
  a10 = (void **)(v10 + 432);
  sub_10081CDCC(&a10);
  a10 = (void **)(v10 + 408);
  sub_10081CDCC(&a10);
  int v16 = *(void **)(v10 + 384);
  if (v16)
  {
    *(void *)(v10 + 392) = v16;
    operator delete(v16);
  }

  a10 = (void **)(v10 + 360);
  sub_10081CDCC(&a10);
  a10 = (void **)(v10 + 336);
  sub_10081CDCC(&a10);
  uint64_t v17 = *(void **)(v10 + 312);
  if (v17)
  {
    *(void *)(v10 + 320) = v17;
    operator delete(v17);
  }

  int v18 = *(void **)(v10 + 264);
  if (v18)
  {
    *(void *)(v10 + 272) = v18;
    operator delete(v18);
  }

  int v19 = *(void **)(v10 + 216);
  if (v19)
  {
    *(void *)(v10 + 224) = v19;
    operator delete(v19);
  }

  int v20 = *(void **)(v10 + 168);
  if (v20)
  {
    *(void *)(v10 + 176) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10081C754()
{
  uint64_t result = sub_1004FAB40();
  if ((result & 0x10) != 0)
  {
    uint64_t v1 = operator new(0x6A8uLL);
    uint64_t result = sub_10081C39C((uint64_t)v1);
    qword_1019A1820 = (uint64_t)v1;
  }

  return result;
}

void sub_10081C78C(_Unwind_Exception *a1)
{
}

uint64_t sub_10081C7A0()
{
  if (qword_101998D18 != -1) {
    dispatch_once(&qword_101998D18, &stru_101859898);
  }
  return qword_1019A1820;
}

void sub_10081C7E4(uint64_t a1, int a2)
{
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 1488);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10081C854;
  v5[3] = &unk_10182B540;
  v5[4] = a1;
  int v6 = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_10081C854(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 1648LL) = *(_DWORD *)(result + 40);
  return result;
}

void sub_10081C864(uint64_t a1, __int128 *a2)
{
  v7[1] = 3221225472LL;
  __int128 v4 = a2[3];
  __int128 v10 = a2[2];
  __int128 v11 = v4;
  __int128 v12 = a2[4];
  __int128 v5 = a2[1];
  __int128 v8 = *a2;
  int v6 = *(dispatch_queue_s **)(a1 + 1488);
  v7[0] = _NSConcreteStackBlock;
  v7[2] = sub_10081C8F8;
  v7[3] = &unk_1018598B8;
  v7[4] = a1;
  uint64_t v13 = *((void *)a2 + 10);
  __int128 v9 = v5;
  dispatch_async(v6, v7);
}

void sub_10081C8F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 952))
  {
    unsigned int v3 = *(_DWORD *)(v1 + 1648);
    if (v3 >= 5) {
      unsigned int v3 = 5;
    }
    ++*(_DWORD *)(v1 + 4LL * v3 + 760);
    double v4 = *(double *)(a1 + 88);
    if (v4 >= 0.0)
    {
      float v6 = log(fmax(v4, 0.000335462628));
      float v7 = *(float *)(v1 + 900);
      if (v7 >= v6) {
        float v6 = *(float *)(v1 + 900);
      }
      float v8 = v6 - v7;
      float v9 = *(float *)(v1 + 904) - v7;
      if (v8 >= v9) {
        float v8 = v9;
      }
      ++*(_DWORD *)(*(void *)(v1 + 920) + 4 * (unint64_t)(float)(v8 / *(float *)(v1 + 896)));
      double v10 = *(double *)(a1 + 104);
      if (v10 < 0.0) {
        double v10 = -v10;
      }
      float v11 = log(fmax(v10, 0.000335462624));
      float v12 = *(float *)(v1 + 788);
      if (v12 >= v11) {
        float v11 = *(float *)(v1 + 788);
      }
      float v13 = v11 - v12;
      float v14 = *(float *)(v1 + 792) - v12;
      if (v13 >= v14) {
        float v13 = v14;
      }
      ++*(_DWORD *)(*(void *)(v1 + 808) + 4 * (unint64_t)(float)(v13 / *(float *)(v1 + 784)));
      float v15 = log(fmax(*(double *)(a1 + 112), 0.000335462624));
      float v16 = *(float *)(v1 + 844);
      if (v16 >= v15) {
        float v15 = *(float *)(v1 + 844);
      }
      float v17 = v15 - v16;
      float v18 = *(float *)(v1 + 848) - v16;
      if (v17 >= v18) {
        float v17 = v18;
      }
      __int128 v5 = (_DWORD *)(*(void *)(v1 + 864) + 4 * (unint64_t)(float)(v17 / *(float *)(v1 + 840)));
    }

    else
    {
      __int128 v5 = (_DWORD *)(v1 + 948);
    }

    ++*v5;
  }

void sub_10081CA5C(uint64_t a1, double a2, float a3)
{
  float v6 = *(dispatch_queue_s **)(a1 + 1488);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10081CADC;
  block[3] = &unk_101835F28;
  block[4] = a1;
  *(double *)&block[5] = a2;
  float v8 = a3;
  dispatch_async(v6, block);
}

double sub_10081CADC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double v2 = *(double *)(v1 + 1464);
  double v3 = *(double *)(a1 + 40);
  if (v2 != 1.79769313e308)
  {
    double v4 = (v3 - v2) / 60.0;
    if (v4 > 0.0)
    {
      double v5 = *(float *)(a1 + 48) - *(double *)(v1 + 1472);
      if (v5 < 0.0) {
        double v5 = -v5;
      }
      float v6 = v5 / v4 * 60.0;
      if (*(_BYTE *)(v1 + 952))
      {
        float v7 = *(float *)(v1 + 652);
        if (v7 >= v6) {
          float v6 = *(float *)(v1 + 652);
        }
        float v8 = v6 - v7;
        float v9 = *(float *)(v1 + 656) - v7;
        if (v8 >= v9) {
          float v8 = v9;
        }
        ++*(_DWORD *)(*(void *)(v1 + 672) + 4 * (unint64_t)(float)(v8 / *(float *)(v1 + 648)));
        double v10 = (float *)(v1 + 704);
        float v11 = v4;
        float v12 = *(float *)(v1 + 708);
        if (v12 >= v11) {
          float v11 = *(float *)(v1 + 708);
        }
        float v13 = v11 - v12;
        float v14 = *(float *)(v1 + 712) - v12;
        if (v13 >= v14) {
          float v13 = v14;
        }
        float v15 = (void *)(v1 + 728);
      }

      else
      {
        float v16 = *(float *)(v1 + 244);
        if (v16 >= v6) {
          float v6 = *(float *)(v1 + 244);
        }
        float v17 = v6 - v16;
        float v18 = *(float *)(v1 + 248) - v16;
        if (v17 >= v18) {
          float v17 = v18;
        }
        ++*(_DWORD *)(*(void *)(v1 + 264) + 4 * (unint64_t)(float)(v17 / *(float *)(v1 + 240)));
        double v10 = (float *)(v1 + 288);
        float v19 = v4;
        float v20 = *(float *)(v1 + 292);
        if (v20 >= v19) {
          float v19 = *(float *)(v1 + 292);
        }
        float v13 = v19 - v20;
        float v21 = *(float *)(v1 + 296) - v20;
        if (v13 >= v21) {
          float v13 = v21;
        }
        float v15 = (void *)(v1 + 312);
      }

      ++*(_DWORD *)(*v15 + 4 * (unint64_t)(float)(v13 / *v10));
    }
  }

  *(double *)(v1 + 1464) = v3;
  double result = *(float *)(a1 + 48);
  *(double *)(v1 + 1472) = result;
  return result;
}

void sub_10081CC44(uint64_t a1, char a2, char a3)
{
  float v6 = *(dispatch_queue_s **)(a1 + 1488);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10081CCC4;
  v7[3] = &unk_1018598F8;
  v7[4] = a1;
  char v8 = a2;
  char v9 = a3;
  dispatch_async(v6, v7);
}

uint64_t sub_10081CCC4(uint64_t result)
{
  uint64_t v1 = *(_BYTE **)(result + 32);
  char v2 = *(_BYTE *)(result + 40);
  if (v2) {
    char v2 = *(_BYTE *)(result + 41) != 0;
  }
  v1[954] = v2;
  if (v1[952])
  {
    if (v1[956]) {
      char v2 = 1;
    }
    v1[956] = v2;
  }

  return result;
}

uint64_t sub_10081CCFC(uint64_t a1, float a2, float a3, float a4)
{
  *(float *)a1 = a2;
  *(float *)(a1 + 4) = a3;
  *(float *)(a1 + 8) = a4;
  unint64_t v5 = (unint64_t)(float)((float)(a4 - a3) / a2) + 1;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  int v7 = 0;
  sub_10023D8E0((char **)(a1 + 24), v5, &v7);
  return a1;
}

void sub_10081CD64(_Unwind_Exception *exception_object)
{
  double v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void sub_10081CD80(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56LL)
  {
    double v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - 24) = v4;
      operator delete(v4);
    }
  }

  a1[1] = v2;
}

void sub_10081CDCC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10081CD80((uint64_t *)v2);
    operator delete(**a1);
  }

uint64_t sub_10081CE0C()
{
  xmmword_101998B30 = 0u;
  *(_OWORD *)&qword_101998B40 = 0u;
  xmmword_101998B20 = 0u;
  v0 = operator new(8uLL);
  *((void *)&xmmword_101998B30 + 1) = v0;
  void *v0 = 0x800040002000100LL;
  qword_101998B40 = (uint64_t)(v0 + 1);
  unk_101998B48 = v0 + 1;
  unk_101998B50 = 0u;
  unk_101998B60 = 0u;
  unk_101998B70 = 0u;
  *(_OWORD *)&qword_101998B80 = 0u;
  qword_101998B90 = 0LL;
  uint64_t v1 = operator new(6uLL);
  qword_101998B88 = (uint64_t)(v1 + 3);
  qword_101998B90 = (uint64_t)(v1 + 3);
  *(_DWORD *)uint64_t v1 = 67109376;
  v1[2] = 2048;
  qword_101998B80 = (uint64_t)v1;
  unk_101998B98 = 0u;
  unk_101998BA8 = 0u;
  unk_101998BB8 = 0u;
  unk_101998BC8 = 0u;
  unk_101998BD8 = 0u;
  *(_OWORD *)&qword_101998BE8 = 0u;
  uint64_t v2 = operator new(8uLL);
  qword_101998BE0 = (uint64_t)v2;
  *uint64_t v2 = 0x800040002000100LL;
  qword_101998BE8 = (uint64_t)(v2 + 1);
  unk_101998BF0 = v2 + 1;
  qword_101998C00 = 0LL;
  unk_101998C08 = 0LL;
  qword_101998BF8 = 0LL;
  double v3 = operator new(8uLL);
  qword_101998BF8 = (uint64_t)v3;
  *double v3 = 0x800040002000100LL;
  qword_101998C00 = (uint64_t)(v3 + 1);
  unk_101998C08 = v3 + 1;
  qword_101998C18 = 0LL;
  unk_101998C20 = 0LL;
  qword_101998C10 = 0LL;
  double v4 = operator new(8uLL);
  qword_101998C10 = (uint64_t)v4;
  *double v4 = 0x800040002000100LL;
  qword_101998C18 = (uint64_t)(v4 + 1);
  unk_101998C20 = v4 + 1;
  __cxa_atexit((void (*)(void *))sub_10081C32C, &xmmword_101998B20, (void *)&_mh_execute_header);
  qword_101998C30 = 0LL;
  unk_101998C38 = 0LL;
  qword_101998C28 = 0LL;
  unint64_t v5 = operator new(0x34uLL);
  qword_101998C30 = (uint64_t)(v5 + 13);
  unk_101998C38 = v5 + 13;
  v5[12] = 1119092736;
  *(_OWORD *)unint64_t v5 = xmmword_101338B30;
  *((_OWORD *)v5 + 1) = unk_101338B40;
  *((_OWORD *)v5 + 2) = xmmword_101338B50;
  qword_101998C28 = (uint64_t)v5;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_101998C28, (void *)&_mh_execute_header);
  qword_101998C48 = 0LL;
  unk_101998C50 = 0LL;
  qword_101998C40 = 0LL;
  float v6 = operator new(0x2CuLL);
  qword_101998C48 = (uint64_t)v6 + 44;
  unk_101998C50 = (char *)v6 + 44;
  *float v6 = xmmword_101338B64;
  v6[1] = unk_101338B74;
  *(_OWORD *)((char *)v6 + 28) = unk_101338B80;
  qword_101998C40 = (uint64_t)v6;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_101998C40, (void *)&_mh_execute_header);
  qword_101998C60 = 0LL;
  unk_101998C68 = 0LL;
  qword_101998C58 = 0LL;
  int v7 = operator new(0x54uLL);
  qword_101998C60 = (uint64_t)(v7 + 21);
  unk_101998C68 = v7 + 21;
  v7[20] = 1075419546;
  *((_OWORD *)v7 + 2) = xmmword_101338BB0;
  *((_OWORD *)v7 + 3) = unk_101338BC0;
  *((_OWORD *)v7 + 4) = xmmword_101338BD0;
  *(_OWORD *)int v7 = xmmword_101338B90;
  *((_OWORD *)v7 + 1) = unk_101338BA0;
  qword_101998C58 = (uint64_t)v7;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_101998C58, (void *)&_mh_execute_header);
  qword_101998C78 = 0LL;
  unk_101998C80 = 0LL;
  qword_101998C70 = 0LL;
  char v8 = operator new(0x7CuLL);
  qword_101998C78 = (uint64_t)v8 + 124;
  unk_101998C80 = (char *)v8 + 124;
  v8[4] = xmmword_101338C24;
  v8[5] = unk_101338C34;
  v8[6] = xmmword_101338C44;
  *(_OWORD *)((char *)v8 + 108) = *(__int128 *)((char *)&xmmword_101338C44 + 12);
  _OWORD *v8 = xmmword_101338BE4;
  v8[1] = unk_101338BF4;
  v8[2] = xmmword_101338C04;
  v8[3] = unk_101338C14;
  qword_101998C70 = (uint64_t)v8;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_101998C70, (void *)&_mh_execute_header);
  qword_101998C90 = 0LL;
  unk_101998C98 = 0LL;
  qword_101998C88 = 0LL;
  char v9 = operator new(0x5CuLL);
  qword_101998C90 = (uint64_t)v9 + 92;
  unk_101998C98 = (char *)v9 + 92;
  v9[2] = xmmword_101338C80;
  v9[3] = unk_101338C90;
  v9[4] = xmmword_101338CA0;
  *(_OWORD *)((char *)v9 + 76) = *(__int128 *)((char *)&xmmword_101338CA0 + 12);
  *char v9 = xmmword_101338C60;
  v9[1] = unk_101338C70;
  qword_101998C88 = (uint64_t)v9;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_101998C88, (void *)&_mh_execute_header);
  qword_101998CA8 = 0LL;
  unk_101998CB0 = 0LL;
  qword_101998CA0 = 0LL;
  double v10 = operator new(0x54uLL);
  qword_101998CA8 = (uint64_t)(v10 + 21);
  unk_101998CB0 = v10 + 21;
  v10[20] = 1172373504;
  *((_OWORD *)v10 + 2) = xmmword_101338CDC;
  *((_OWORD *)v10 + 3) = unk_101338CEC;
  *((_OWORD *)v10 + 4) = xmmword_101338CFC;
  *(_OWORD *)double v10 = xmmword_101338CBC;
  *((_OWORD *)v10 + 1) = unk_101338CCC;
  qword_101998CA0 = (uint64_t)v10;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_101998CA0, (void *)&_mh_execute_header);
  qword_101998CC0 = 0LL;
  unk_101998CC8 = 0LL;
  qword_101998CB8 = 0LL;
  float v11 = operator new(0x54uLL);
  qword_101998CC0 = (uint64_t)(v11 + 21);
  unk_101998CC8 = v11 + 21;
  v11[20] = 100;
  *((_OWORD *)v11 + 2) = xmmword_101338D30;
  *((_OWORD *)v11 + 3) = unk_101338D40;
  *((_OWORD *)v11 + 4) = xmmword_101338D50;
  *(_OWORD *)float v11 = xmmword_101338D10;
  *((_OWORD *)v11 + 1) = unk_101338D20;
  qword_101998CB8 = (uint64_t)v11;
  __cxa_atexit((void (*)(void *))sub_10081C36C, &qword_101998CB8, (void *)&_mh_execute_header);
  qword_101998CD8 = 0LL;
  unk_101998CE0 = 0LL;
  qword_101998CD0 = 0LL;
  float v12 = operator new(0x4CuLL);
  qword_101998CD8 = (uint64_t)v12 + 76;
  unk_101998CE0 = (char *)v12 + 76;
  v12[2] = xmmword_101338D84;
  v12[3] = unk_101338D94;
  *(_OWORD *)((char *)v12 + 60) = unk_101338DA0;
  *float v12 = xmmword_101338D64;
  v12[1] = unk_101338D74;
  qword_101998CD0 = (uint64_t)v12;
  __cxa_atexit((void (*)(void *))sub_1001B4198, &qword_101998CD0, (void *)&_mh_execute_header);
  sub_1010DDBC0(&qword_101998CE8, "CLElevationAWDAggregator");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_101998CE8, (void *)&_mh_execute_header);
  if (byte_101998CFF >= 0) {
    size_t v13 = byte_101998CFF;
  }
  else {
    size_t v13 = qword_101998CF0;
  }
  uint64_t v14 = sub_1000392EC((uint64_t)&unk_101998D00, v13 + 16);
  else {
    float v15 = *(void **)v14;
  }
  if (v13)
  {
    if (byte_101998CFF >= 0) {
      float v16 = &qword_101998CE8;
    }
    else {
      float v16 = (uint64_t *)qword_101998CE8;
    }
    memmove(v15, v16, v13);
  }

  strcpy((char *)v15 + v13, "_NextMidnightUTC");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &unk_101998D00, (void *)&_mh_execute_header);
}

void sub_10081D2E0(_Unwind_Exception *exception_object)
{
  double v3 = &qword_101998C10;
  double v4 = &qword_101998C10;
  while (1)
  {
    float v6 = (void *)*(v4 - 3);
    v4 -= 3;
    unint64_t v5 = v6;
    if (v6)
    {
      *(v3 - 2) = (uint64_t)v5;
      operator delete(v5);
    }

    double v3 = v4;
    if (v4 == v1) {
      _Unwind_Resume(exception_object);
    }
  }

id sub_10081D94C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateIDSStatusAndNotify];
}

void sub_10081FC5C(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10081FC88(id a1)
{
  qword_1019346D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

uint64_t sub_10081FCB4(uint64_t a1)
{
  *(_DWORD *)(v2 + 40) = 0xFFFF;
  *(void *)(v2 + 52) = 0LL;
  *(void *)(v2 + 44) = 0LL;
  *(_OWORD *)(v2 + 60) = xmmword_1012E0070;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(v2 + 76) = _Q0;
  *(_OWORD *)(v2 + 92) = _Q0;
  *(_OWORD *)(v2 + 108) = _Q0;
  *(_DWORD *)(v2 + 124) = 0;
  *(void *)(v2 + 136) = 0LL;
  *(void *)(v2 + 144) = 0LL;
  *(void *)(v2 + 128) = 0xBFF0000000000000LL;
  *(_DWORD *)(v2 + 152) = 0;
  *(void *)(v2 + 156) = 0xBFF0000000000000LL;
  *(_DWORD *)(v2 + 164) = 0x7FFFFFFF;
  *(void *)(v2 + 176) = 0LL;
  *(void *)(v2 + 184) = 0LL;
  *(void *)(v2 + 168) = 0LL;
  *(_BYTE *)(a1 + 192) = 0;
  sub_100869DC8(v2 + 200);
  return a1;
}

uint64_t sub_10081FD3C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 96) < 0xCu) & (0xC02u >> *(_DWORD *)(a1 + 96));
}

void sub_10081FD58(uint64_t a1, __int128 *a2, char *__src)
{
  unsigned int v4 = *((_DWORD *)a2 + 24);
  BOOL v5 = v4 > 0xB;
  int v6 = (1 << v4) & 0xC02;
  if (v5 || v6 == 0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101859978);
    }
    int v24 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
    {
      int v25 = *((_DWORD *)a2 + 24);
      *(_DWORD *)buf = 67240192;
      int v30 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "unexpected location type %{public}d", buf, 8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101859978);
      }
      int v26 = *((_DWORD *)a2 + 24);
      LODWORD(v28[0]) = 67240192;
      HIDWORD(v28[0]) = v26;
      char v9 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "unexpected location type %{public}d",  v28,  8,  v28[0]);
      goto LABEL_25;
    }
  }

  else if (*(double *)((char *)a2 + 76) == 0.0)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101859978);
    }
    char v8 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "location timestamp is not set!", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101859978);
      }
      LOWORD(v28[0]) = 0;
      char v9 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  17LL,  "location timestamp is not set!",  v28,  2,  v28[0]);
LABEL_25:
      int v27 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLWifiReachIntersectionAnalytics::receiveRefLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)",  "%s\n",  v9);
      if (v27 != buf) {
        free(v27);
      }
    }
  }

  else if (*(double *)((char *)a2 + 20) <= 30.0)
  {
    __int128 v12 = *a2;
    *(_OWORD *)(a1 + 56) = a2[1];
    *(_OWORD *)(a1 + 40) = v12;
    __int128 v13 = a2[2];
    __int128 v14 = a2[3];
    __int128 v15 = a2[4];
    *(_OWORD *)(a1 + 120) = a2[5];
    *(_OWORD *)(a1 + 104) = v15;
    *(_OWORD *)(a1 + 88) = v14;
    *(_OWORD *)(a1 + 72) = v13;
    __int128 v16 = a2[6];
    __int128 v17 = a2[7];
    __int128 v18 = a2[8];
    *(_OWORD *)(a1 + 180) = *(__int128 *)((char *)a2 + 140);
    *(_OWORD *)(a1 + 168) = v18;
    *(_OWORD *)(a1 + 152) = v17;
    *(_OWORD *)(a1 + 136) = v16;
    memcpy((void *)(a1 + 200), __src, 0x201uLL);
    sub_1000F2F30((void *)(a1 + 720), (uint64_t *)__src + 65);
    __int128 v20 = *(_OWORD *)(__src + 552);
    __int128 v19 = *(_OWORD *)(__src + 568);
    *(_OWORD *)(a1 + 736) = *(_OWORD *)(__src + 536);
    *(_OWORD *)(a1 + 752) = v20;
    *(_OWORD *)(a1 + 768) = v19;
    __int128 v22 = *(_OWORD *)(__src + 600);
    __int128 v21 = *(_OWORD *)(__src + 616);
    __int128 v23 = *(_OWORD *)(__src + 584);
    *(void *)(a1 + 829) = *(void *)(__src + 629);
    *(_OWORD *)(a1 + 800) = v22;
    *(_OWORD *)(a1 + 816) = v21;
    *(_OWORD *)(a1 + 784) = v23;
  }

void sub_1008200B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, double a8)
{
  int v16 = rand();
  if (!(v16 % *(_DWORD *)sub_100F4CD68()))
  {
    *(void *)buf = _NSConcreteStackBlock;
    uint64_t v25 = 3221225472LL;
    int v26 = sub_100820CEC;
    int v27 = &unk_101859958;
    uint64_t v28 = a1;
    uint64_t v29 = a2;
    uint64_t v30 = a4;
    double v31 = a8;
    uint64_t v32 = a3;
    uint64_t v33 = a5;
    char v34 = a6;
    char v35 = a7;
    AnalyticsSendEventLazy(@"com.apple.wifiPositionCalculatorWithReachIntersection.availability", buf);
  }

  if (sub_100869780(a1 + 40) && (sub_100869780(a2) & 1) != 0)
  {
    if ((sub_100869780(a3) & 1) != 0 || (sub_100869780(a5) & 1) != 0)
    {
      if (vabdd_f64(*(double *)(a1 + 116), *(double *)(a2 + 76)) <= 1.0)
      {
        int v20 = rand();
        if (!(v20 % *(_DWORD *)sub_100F4CD68()))
        {
          *(void *)buf = _NSConcreteStackBlock;
          uint64_t v25 = 3221225472LL;
          int v26 = sub_100820548;
          int v27 = &unk_101859958;
          uint64_t v28 = a1;
          uint64_t v29 = a2;
          uint64_t v30 = a4;
          double v31 = a8;
          uint64_t v32 = a3;
          uint64_t v33 = a5;
          char v34 = a6;
          char v35 = a7;
          AnalyticsSendEventLazy(@"com.apple.wifiPositionCalculatorWithReachIntersection.analytics", buf);
        }
      }

      else
      {
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101859978);
        }
        __int128 v17 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to deltaTimeFromRef is greater than maximum threshold",  buf,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101859978);
          }
          LOWORD(v23[0]) = 0;
          __int128 v18 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to deltaTimeFromRef i s greater than maximum threshold",  v23,  2,  v23[0]);
LABEL_35:
          __int128 v22 = (uint8_t *)v18;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiReachIntersectionAnalytics::submitMetricsIfPossible(const CLDaemonLocation &, const CLDaemonLocat ion &, size_t, double, const CLDaemonLocation &, BOOL, BOOL)",  "%s\n",  v18);
          if (v22 != buf) {
            free(v22);
          }
        }
      }
    }

    else
    {
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101859978);
      }
      __int128 v21 = (os_log_s *)qword_101934858;
      if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to invalid afterLocation and afterLocationConservative.",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101859978);
        }
        LOWORD(v23[0]) = 0;
        __int128 v18 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to invalid afterLocatio n and afterLocationConservative.",  v23,  2,  v23[0]);
        goto LABEL_35;
      }
    }
  }

  else
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101859978);
    }
    __int128 v19 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to invalid fRefLocation or invalid beforeLocation.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101859978);
      }
      LOWORD(v23[0]) = 0;
      __int128 v18 = (const char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "[WifiPositionCalculatorWithReachIntersectionAnalytics] aborted due to invalid fRefLocation o r invalid beforeLocation.",  v23,  2,  v23[0]);
      goto LABEL_35;
    }
  }

void *sub_100820548(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v4 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  double v5 = vabdd_f64(*(double *)(v2 + 116), *(double *)(*(void *)(a1 + 40) + 76LL));
  int v6 = *(void **)(v2 + 720);
  if (v6) {
    uint64_t v7 = -1227133513 * ((v6[1] - *v6) >> 2);
  }
  else {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  v66[0] = @"deltaTimeFromGps";
  LODWORD(v3) = llround(v5);
  v67[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v3);
  v66[1] = @"gpsHorizontalAccuracy";
  LODWORD(v8) = llround(*(double *)(v2 + 60));
  v67[1] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v8);
  v66[2] = @"numSatelliteVisible";
  v67[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v7);
  v66[3] = @"locType";
  v67[3] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 136));
  objc_msgSend( v4,  "setDictionary:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v67,  v66,  4));
  double v10 = *(double *)(v2 + 584);
  if (v10 > 0.0 && *(double *)(v2 + 672) > 0.0)
  {
    double v11 = *(double *)(v2 + 664) - *(double *)(v2 + 576);
    LODWORD(v9) = llround(v10);
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v9),  @"gpsGroundAltitudeUncertainty");
    LODWORD(v12) = llround(*(double *)(v2 + 672));
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v12),  @"gpsAbsoluteAltitudeUncertainty");
    LODWORD(v13) = llround(v11);
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v13),  @"gpsAltitudeAboveGround");
  }

  sub_100D2DCA4((double *)v2, v2 + 40, *(void *)(a1 + 40));
  double v15 = v14;
  LODWORD(v16) = llround(v14);
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v16),  @"wifiFixErrorBeforeUseOfReachIntersection");
  double v17 = *(double *)(*(void *)(a1 + 40) + 20LL);
  if (v17 > 0.0) {
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15 / v17),  @"hErrRatioBeforeUseOfReachIntersection");
  }
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 48)),  @"numOfInputCentroids");
  objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56)),  @"pairwiseIntersectionRatio");
  if (sub_100869780(*(void *)(a1 + 64)))
  {
    sub_100D2DCA4((double *)v2, v2 + 40, *(void *)(a1 + 64));
    double v19 = v18;
    double v20 = v18 - v15;
    sub_100D2DCA4((double *)v2, *(void *)(a1 + 40), *(void *)(a1 + 64));
    double v22 = v21;
    LODWORD(v23) = llround(v19);
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v23),  @"wifiFixErrorAfterUseOfReachIntersection");
    LODWORD(v24) = llround(v20);
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v24),  @"wifiFixErrorChangeByUseOfReachIntersection");
    LODWORD(v25) = llround(v22);
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v25),  @"wifiFixDistanceBeforeAndAfterUseOfReachIntersection");
    double v26 = *(double *)(*(void *)(a1 + 64) + 20LL);
    if (v26 > 0.0) {
      objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v19 / v26),  @"hErrRatioAfterUseOfReachIntersection");
    }
  }

  if (sub_100869780(*(void *)(a1 + 72)))
  {
    sub_100D2DCA4((double *)v2, v2 + 40, *(void *)(a1 + 72));
    double v28 = v27;
    double v29 = v27 - v15;
    sub_100D2DCA4((double *)v2, *(void *)(a1 + 40), *(void *)(a1 + 72));
    double v31 = v30;
    LODWORD(v32) = llround(v28);
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v32),  @"wifiFixErrorAfterUseOfReachIntersectionConservative");
    LODWORD(v33) = llround(v29);
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v33),  @"wifiFixErrorChangeByUseOfReachIntersectionConservative");
    LODWORD(v34) = llround(v31);
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v34),  @"wifiFixDistanceBeforeAndAfterUseOfReachIntersectionConservative");
    double v35 = *(double *)(*(void *)(a1 + 72) + 20LL);
    if (v35 > 0.0) {
      objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v28 / v35),  @"hErrRatioAfterUseOfReachIntersectionConservative");
    }
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)),  @"isOriginalLocUsedAfterUseOfReachIntersectionConservative");
    objc_msgSend( v4,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 81)),  @"isOriginalLocInsideReachIntersection");
  }

  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  int v36 = v4;
  id v37 = [v4 allKeys];
  id v38 = [v37 countByEnumeratingWithState:&v53 objects:v65 count:16];
  if (v38)
  {
    id v39 = v38;
    uint64_t v40 = *(void *)v54;
    do
    {
      int v41 = 0LL;
      do
      {
        if (*(void *)v54 != v40) {
          objc_enumerationMutation(v37);
        }
        uint64_t v42 = *(void *)(*((void *)&v53 + 1) + 8LL * (void)v41);
        if (qword_101934850 != -1) {
          dispatch_once(&qword_101934850, &stru_101859978);
        }
        int v43 = (os_log_s *)qword_101934858;
        if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
        {
          id v44 = [v36 objectForKey:v42];
          *(_DWORD *)buf = 138478083;
          uint64_t v62 = v42;
          __int16 v63 = 2113;
          id v64 = v44;
          _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "[WifiPositionCalculatorWithReachIntersectionAnalytics] %{private}@ -> %{private}@",  buf,  0x16u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934850 != -1) {
            dispatch_once(&qword_101934850, &stru_101859978);
          }
          uint64_t v45 = qword_101934858;
          id v46 = [v36 objectForKey:v42];
          int v57 = 138478083;
          uint64_t v58 = v42;
          __int16 v59 = 2113;
          id v60 = v46;
          LODWORD(v52) = 22;
          signed int v47 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v45,  2LL,  "[WifiPositionCalculatorWithReachIntersectionAnalytics] %{private}@ -> %{private}@",  &v57,  v52);
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiReachIntersectionAnalytics::sendCoreAnalyticsEventForWifiFixErrorAndHorizontalErrorRatio(const CL DaemonLocation &, const CLDaemonLocation &, size_t, double, const CLDaemonLocation &, BOOL, BOOL)_block_invoke",  "%s\n",  v47);
        }

        int v41 = (char *)v41 + 1;
      }

      while (v39 != v41);
      id v48 = [v37 countByEnumeratingWithState:&v53 objects:v65 count:16];
      id v39 = v48;
    }

    while (v48);
  }

  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101859978);
  }
  int v49 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "[WifiPositionCalculatorWithReachIntersectionAnalytics] sent payload.",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101859978);
    }
    LOWORD(v57) = 0;
    LODWORD(v52) = 2;
    int v51 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  2LL,  "[WifiPositionCalculatorWithReachIntersectionAnalytics] sent payload.",  &v57,  v52);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLWifiReachIntersectionAnalytics::sendCoreAnalyticsEventForWifiFixErrorAndHorizontalErrorRatio(const CLDaemon Location &, const CLDaemonLocation &, size_t, double, const CLDaemonLocation &, BOOL, BOOL)_block_invoke",  "%s\n",  v51);
  }

  return v36;
}

id sub_100820CEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  double v4 = vabdd_f64(*(double *)(v2 + 116), *(double *)(*(void *)(a1 + 40) + 76LL));
  v7[0] = @"deltaTimeFromGps";
  LODWORD(sub_1012279C0(0LL, v4, v5) = llround(v4);
  v8[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v5);
  v7[1] = @"validGpsLocation";
  v8[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_100869780(v2 + 40));
  v7[2] = @"locType";
  v8[2] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 136));
  objc_msgSend( v3,  "setDictionary:",  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v8,  v7,  3));
  objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 48)),  @"numOfInputCentroids");
  objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100869780(*(void *)(a1 + 40))),  @"validBeforeLocation");
  if (sub_100869780(*(void *)(a1 + 40))) {
    objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:]( NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 40) + 20)),  @"hUncBeforeLocation");
  }
  objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 56)),  @"pairwiseIntersectionRatio");
  objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100869780(*(void *)(a1 + 64))),  @"validAfterLocation");
  if (sub_100869780(*(void *)(a1 + 64)))
  {
    objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:]( NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 64) + 20)),  @"hUncAfterLocation");
    if (sub_100869780(*(void *)(a1 + 40)))
    {
      sub_100D2DCA4((double *)v2, *(void *)(a1 + 40), *(void *)(a1 + 64));
      objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),  @"wifiFixDistanceBeforeAndAfterUseOfReachIntersection");
    }
  }

  objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100869780(*(void *)(a1 + 72))),  @"validAfterLocationConservative");
  if (sub_100869780(*(void *)(a1 + 72)))
  {
    objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:]( NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 72) + 20)),  @"hUncAfterLocationConservative");
    objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 80)),  @"isOriginalLocUsedAfterUseOfReachIntersectionConservative");
    objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 81)),  @"isOriginalLocInsideReachIntersection");
    if (sub_100869780(*(void *)(a1 + 40)))
    {
      sub_100D2DCA4((double *)v2, *(void *)(a1 + 40), *(void *)(a1 + 72));
      objc_msgSend( v3,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"),  @"wifiFixDistanceBeforeAndAfterUseOfReachIntersectionConservative");
    }
  }

  return v3;
}

void sub_100821004(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100821030()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_1008210CC(_Unwind_Exception *a1)
{
}

void sub_1008210E4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100821170(_Unwind_Exception *a1)
{
}

double sub_100821188(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = a2;
  *(_DWORD *)(a1 + 108) = a3;
  return result;
}

uint64_t sub_1008211C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100821204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _Q0 = vdupq_n_s32(0x7F7FFFFFu);
  *(void *)double v18 = _Q0.i64[0];
  *(_DWORD *)&v18[8] = 2139095039;
  *(void *)&__int128 v5 = 0x8000000080000000LL;
  *((void *)&v5 + 1) = 0x8000000080000000LL;
  *(_OWORD *)&v18[12] = v5;
  *(_DWORD *)&v18[28] = 0x7FFFFFFF;
  int32x4_t v19 = _Q0;
  *(void *)&__int128 v20 = _Q0.i64[0];
  *((void *)&v20 + 1) = 0x7FFFFFFF7F7FFFFFLL;
  char v21 = 0;
  __asm { FMOV            V0.2S, #-1.0 }

  uint64_t v17 = _Q0.i64[0];
  sub_1008233D0((uint64_t)v22, 1uLL, &v17);
  __int128 v10 = v20;
  *(int32x4_t *)(a2 + 32) = v19;
  *(_OWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 64) = v21;
  __int128 v11 = *(_OWORD *)&v18[16];
  *(_OWORD *)a2 = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 16) = v11;
  sub_100822B68(a2 + 72, v22);
  if (*(void *)(a1 + 96))
  {
    uint64_t v14 = *(void *)(a1 + 88);
    uint64_t v13 = a1 + 88;
    uint64_t v12 = v14;
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(*(void *)(v13 - 8) + 28LL);
    if (v14)
    {
      do
      {
        uint64_t v15 = v12;
        uint64_t v12 = *(void *)(v12 + 8);
      }

      while (v12);
    }

    else
    {
      do
      {
        uint64_t v15 = *(void *)(v13 + 16);
        _ZF = *(void *)v15 == v13;
        uint64_t v13 = v15;
      }

      while (_ZF);
    }

    *(_DWORD *)(a2 + 16) = *(_DWORD *)(v15 + 28);
  }

  return sub_100210578(v22);
}

void sub_100821308(_Unwind_Exception *a1)
{
}

uint64_t sub_10082131C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *((void *)&v3 + 1) = 0LL;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  int v4 = *(_DWORD *)(result + 104);
  int v5 = *(_DWORD *)(result + 108);
  int v47 = v4;
  if (v4 <= v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = (uint64_t **)(result + 56);
    uint64_t v8 = (void *)(result + 64);
    *(void *)&__int128 v3 = 136315906LL;
    __int128 v43 = v3;
    do
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        __int128 v10 = v8;
        do
        {
          int v11 = *(_DWORD *)(v9 + 32);
          BOOL v12 = v11 < v4;
          if (v11 >= v4) {
            uint64_t v13 = (uint64_t *)v9;
          }
          else {
            uint64_t v13 = (uint64_t *)(v9 + 8);
          }
          if (!v12) {
            __int128 v10 = (void *)v9;
          }
          uint64_t v9 = *v13;
        }

        while (*v13);
        if (v10 != v8 && v4 >= *((_DWORD *)v10 + 8))
        {
          __int128 v45 = 0u;
          __int128 v46 = 0u;
          __int128 v44 = 0u;
          *(void *)buf = &v47;
          uint64_t v14 = sub_100823530(v7, &v47, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
          unint64_t v15 = (unint64_t)v14[9];
          uint64_t v16 = v14[6];
          uint64_t v17 = &v16[v15 >> 8];
          if (v14[7] == v16) {
            uint64_t v18 = 0LL;
          }
          else {
            uint64_t v18 = *v17 + 16LL * v15;
          }
LABEL_16:
          uint64_t v19 = v18 - 4096;
          while (1)
          {
            *(void *)buf = &v47;
            __int128 v20 = sub_100823530(v7, &v47, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
            char v21 = v20[6];
            if (v20[7] == v21)
            {
              uint64_t v23 = 0LL;
            }

            else
            {
              unint64_t v22 = (unint64_t)v20[9] + (void)v20[10];
              uint64_t v23 = *(uint64_t *)((char *)v21 + ((v22 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v22;
            }

            if (v18 == v23) {
              break;
            }
            uint64_t v24 = (float *)(v18 + 8);
            sub_10047109C(&v44, v24);
            v19 += 16LL;
            uint64_t v18 = (uint64_t)(v24 + 2);
            if (*v17 == v19)
            {
              uint64_t v25 = v17[1];
              ++v17;
              uint64_t v18 = v25;
              goto LABEL_16;
            }
          }

          if (*((void *)&v46 + 1))
          {
            double v26 = (float **)(*((void *)&v44 + 1) + 8 * ((unint64_t)v46 >> 10));
            if ((void)v45 == *((void *)&v44 + 1))
            {
              double v27 = 0LL;
              double v29 = 0LL;
              double v28 = (float **)(*((void *)&v44 + 1) + 8LL * (((void)v46 + *((void *)&v46 + 1)) >> 10));
            }

            else
            {
              double v27 = &(*v26)[v46 & 0x3FF];
              double v28 = (float **)(*((void *)&v44 + 1) + 8LL * (((void)v46 + *((void *)&v46 + 1)) >> 10));
              double v29 = &(*v28)[(v46 + *((void *)&v46 + 1)) & 0x3FF];
            }

            *(_DWORD *)buf = sub_100823664(v26, v27, v28, v29);
            *(float *)&uint8_t buf[4] = (float)v47 + 0.5;
            sub_1008217B8((void *)a2, buf);
            if (qword_1019345B0 != -1) {
              dispatch_once(&qword_1019345B0, &stru_101859998);
            }
            double v30 = (os_log_s *)qword_1019345B8;
            if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v31 = *(void *)(a2 + 40) + *(void *)(a2 + 32) - 1LL;
              uint64_t v32 = (float *)(*(void *)(*(void *)(a2 + 8) + ((v31 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v31 & 0x1FF));
              double v33 = v32[1];
              double v34 = *v32;
              *(_DWORD *)buf = v43;
              *(void *)&uint8_t buf[4] = "PRTTSampleTemperature";
              __int16 v57 = 2048;
              double v58 = v33;
              __int16 v59 = 2080;
              id v60 = "PRTTSamplePressure";
              __int16 v61 = 2048;
              double v62 = v34;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%f", buf, 0x2Au);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1019345B0 != -1) {
                dispatch_once(&qword_1019345B0, &stru_101859998);
              }
              unint64_t v36 = *(void *)(a2 + 40) + *(void *)(a2 + 32) - 1LL;
              id v37 = (float *)(*(void *)(*(void *)(a2 + 8) + ((v36 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v36 & 0x1FF));
              double v38 = v37[1];
              double v39 = *v37;
              int v48 = v43;
              int v49 = "PRTTSampleTemperature";
              __int16 v50 = 2048;
              double v51 = v38;
              __int16 v52 = 2080;
              __int128 v53 = "PRTTSamplePressure";
              __int16 v54 = 2048;
              double v55 = v39;
              LODWORD(v42) = 42;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  2LL,  "%s,%f,%s,%f",  (const char *)&v48,  v42,  (const char *)v43,  *((double *)&v43 + 1));
              int v41 = (char *)v40;
              sub_10029211C( "Generic",  1LL,  0,  2LL,  "std::deque<CLMotionTypePressure> CLRobustSlopeEstimator::computePRTT()",  "%s\n",  v40);
              if (v41 != buf) {
                free(v41);
              }
            }
          }

          double result = sub_10046E180(&v44);
        }
      }

      int v35 = v47;
      int v4 = ++v47;
    }

    while (v35 < *(_DWORD *)(v6 + 108));
  }

  return result;
}

void sub_100821788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1008217B8(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100823E2C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_100821840(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 72) >= (unint64_t)a2)
  {
    __int128 v97 = 0u;
    __int128 v98 = 0u;
    *(_OWORD *)buf = 0u;
    int v11 = *(void **)(a1 + 56);
    BOOL v12 = (void *)(a1 + 64);
    while (1)
    {
      uint64_t v13 = (void *)*v12;
      uint64_t v14 = (void *)(a1 + 64);
      if (*v12)
      {
        do
        {
          unint64_t v15 = v13;
          uint64_t v13 = (void *)v13[1];
        }

        while (v13);
      }

      else
      {
        do
        {
          unint64_t v15 = (void *)v14[2];
          BOOL v16 = *v15 == (void)v14;
          uint64_t v14 = v15;
        }

        while (v16);
      }

      if (v11 == v15) {
        break;
      }
      unint64_t v17 = v11[9];
      uint64_t v18 = v11[6];
      uint64_t v19 = v11[7];
      __int128 v20 = (void *)(v18 + 8 * (v17 >> 8));
      if (v19 == v18) {
        uint64_t v21 = 0LL;
      }
      else {
        uint64_t v21 = *v20 + 16LL * v17;
      }
      while (1)
      {
        if (v19 == v18)
        {
          uint64_t v37 = 0LL;
        }

        else
        {
          unint64_t v36 = v11[10] + v11[9];
          uint64_t v37 = *(void *)(v18 + ((v36 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v36;
        }

        uint64_t v24 = (void *)v11[1];
        if (v21 == v37) {
          break;
        }
        unint64_t v22 = v11;
        if (v24)
        {
          do
          {
            uint64_t v23 = v24;
            uint64_t v24 = (void *)*v24;
          }

          while (v24);
        }

        else
        {
          do
          {
            uint64_t v23 = (void *)v22[2];
            BOOL v16 = *v23 == (void)v22;
            unint64_t v22 = v23;
          }

          while (!v16);
        }

        if (v23 != v12)
        {
          do
          {
            unint64_t v25 = v23[9];
            uint64_t v26 = v23[6];
            uint64_t v27 = v23[7];
            double v28 = (void *)(v26 + 8 * (v25 >> 8));
            if (v27 == v26) {
              uint64_t v29 = 0LL;
            }
            else {
              uint64_t v29 = *v28 + 16LL * v25;
            }
            while (1)
            {
              if (v27 == v26)
              {
                uint64_t v32 = 0LL;
              }

              else
              {
                unint64_t v31 = v23[10] + v23[9];
                uint64_t v32 = *(void *)(v26 + ((v31 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v31;
              }

              if (v29 == v32) {
                break;
              }
              sub_10047109C(buf, (float *)&v93);
              v29 += 16LL;
              if (v29 - *v28 == 4096)
              {
                uint64_t v30 = v28[1];
                ++v28;
                uint64_t v29 = v30;
              }

              uint64_t v26 = v23[6];
              uint64_t v27 = v23[7];
            }

            double v33 = (void *)v23[1];
            if (v33)
            {
              do
              {
                double v34 = v33;
                double v33 = (void *)*v33;
              }

              while (v33);
            }

            else
            {
              do
              {
                double v34 = (void *)v23[2];
                BOOL v16 = *v34 == (void)v23;
                uint64_t v23 = v34;
              }

              while (!v16);
            }

            uint64_t v23 = v34;
          }

          while (v34 != v12);
        }

        v21 += 16LL;
        if (v21 - *v20 == 4096)
        {
          uint64_t v35 = v20[1];
          ++v20;
          uint64_t v21 = v35;
        }

        uint64_t v18 = v11[6];
        uint64_t v19 = v11[7];
      }

      double v38 = v11;
      if (v24)
      {
        do
        {
          int v11 = v24;
          uint64_t v24 = (void *)*v24;
        }

        while (v24);
      }

      else
      {
        do
        {
          int v11 = (void *)v38[2];
          BOOL v16 = *v11 == (void)v38;
          double v38 = v11;
        }

        while (!v16);
      }
    }

    double v39 = (float **)(*(void *)&buf[8] + 8 * ((unint64_t)v98 >> 10));
    if ((void)v97 == *(void *)&buf[8])
    {
      uint64_t v40 = 0LL;
      double v42 = 0LL;
      int v41 = (float **)(*(void *)&buf[8] + 8LL * ((*((void *)&v98 + 1) + (void)v98) >> 10));
    }

    else
    {
      uint64_t v40 = &(*v39)[v98 & 0x3FF];
      int v41 = (float **)(*(void *)&buf[8] + 8LL * ((*((void *)&v98 + 1) + (void)v98) >> 10));
      double v42 = &(*v41)[(*((void *)&v98 + 1) + v98) & 0x3FF];
    }

    float v43 = sub_100823664(v39, v40, v41, v42);
    __int128 v44 = *(void ***)&buf[8];
    *((void *)&v98 + 1) = 0LL;
    unint64_t v45 = v97 - *(void *)&buf[8];
    if ((void)v97 - *(void *)&buf[8] >= 0x11uLL)
    {
      do
      {
        operator delete(*v44);
        __int128 v44 = (void **)(*(void *)&buf[8] + 8LL);
        *(void *)&uint8_t buf[8] = v44;
        unint64_t v45 = v97 - (void)v44;
      }

      while ((void)v97 - (void)v44 > 0x10uLL);
    }

    if (v45 >> 3 == 1)
    {
      uint64_t v46 = 512LL;
    }

    else
    {
      if (v45 >> 3 != 2) {
        goto LABEL_65;
      }
      uint64_t v46 = 1024LL;
    }

    *(void *)&__int128 v98 = v46;
LABEL_65:
    __int128 v94 = 0u;
    __int128 v95 = 0u;
    __int128 v93 = 0u;
    int v47 = *(void **)(a1 + 56);
    if (v47 == v12)
    {
      id v60 = 0LL;
      uint64_t v58 = 0LL;
      uint64_t v59 = 0LL;
    }

    else
    {
      do
      {
        unint64_t v48 = v47[9];
        uint64_t v49 = v47[6];
        uint64_t v50 = v47[7];
        double v51 = (void *)(v49 + 8 * (v48 >> 8));
        if (v50 == v49) {
          uint64_t v52 = 0LL;
        }
        else {
          uint64_t v52 = *v51 + 16LL * v48;
        }
        while (1)
        {
          if (v50 == v49)
          {
            uint64_t v55 = 0LL;
          }

          else
          {
            unint64_t v54 = v47[10] + v47[9];
            uint64_t v55 = *(void *)(v49 + ((v54 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v54;
          }

          if (v52 == v55) {
            break;
          }
          *(float *)&__int128 v90 = *(float *)(v52 + 8) + (float)((float)-v43 * *(float *)(v52 + 12));
          sub_10047109C(&v93, (float *)&v90);
          v52 += 16LL;
          if (v52 - *v51 == 4096)
          {
            uint64_t v53 = v51[1];
            ++v51;
            uint64_t v52 = v53;
          }

          uint64_t v49 = v47[6];
          uint64_t v50 = v47[7];
        }

        __int128 v56 = (void *)v47[1];
        if (v56)
        {
          do
          {
            __int16 v57 = v56;
            __int128 v56 = (void *)*v56;
          }

          while (v56);
        }

        else
        {
          do
          {
            __int16 v57 = (void *)v47[2];
            BOOL v16 = *v57 == (void)v47;
            int v47 = v57;
          }

          while (!v16);
        }

        int v47 = v57;
      }

      while (v57 != v12);
      uint64_t v58 = v95;
      uint64_t v59 = v94;
      id v60 = (float **)(*((void *)&v93 + 1) + 8 * ((unint64_t)v95 >> 10));
      if ((void)v94 != *((void *)&v93 + 1))
      {
        __int16 v61 = &(*v60)[v95 & 0x3FF];
        double v62 = (float **)(*((void *)&v93 + 1) + 8LL * ((*((void *)&v95 + 1) + (void)v95) >> 10));
        __int16 v63 = &(*v62)[(*((void *)&v95 + 1) + v95) & 0x3FF];
        goto LABEL_86;
      }
    }

    __int16 v61 = 0LL;
    __int16 v63 = 0LL;
    double v62 = (float **)(v59 + 8 * ((unint64_t)(*((void *)&v95 + 1) + v58) >> 10));
LABEL_86:
    float v64 = sub_100823664(v60, v61, v62, v63);
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    __int128 v90 = 0u;
    uint64_t v65 = *((void *)&v93 + 1);
    uint64_t v66 = v94;
    uint64_t v67 = (void *)(*((void *)&v93 + 1) + 8 * ((unint64_t)v95 >> 10));
    if ((void)v94 == *((void *)&v93 + 1)) {
      int v68 = 0LL;
    }
    else {
      int v68 = (float *)(*v67 + 4 * (v95 & 0x3FF));
    }
    while (1)
    {
      uint64_t v70 = v66 == v65
          ? 0LL
          : *(void *)(v65 + (((*((void *)&v95 + 1) + (void)v95) >> 7) & 0x1FFFFFFFFFFFFF8LL))
          + 4 * ((*((void *)&v95 + 1) + v95) & 0x3FF);
      LODWORD(v89[0]) = vabds_f32(*v68, v64);
      sub_10047109C(&v90, (float *)v89);
      if ((float *)((char *)++v68 - *v67) == (float *)4096)
      {
        int v69 = (float *)v67[1];
        ++v67;
        int v68 = v69;
      }

      uint64_t v65 = *((void *)&v93 + 1);
      uint64_t v66 = v94;
    }

    unint64_t v71 = (float **)(*((void *)&v90 + 1) + 8 * ((unint64_t)v92 >> 10));
    if ((void)v91 == *((void *)&v90 + 1))
    {
      unsigned int v72 = 0LL;
      uint64_t v74 = 0LL;
      int v73 = (float **)(*((void *)&v90 + 1) + 8LL * ((*((void *)&v92 + 1) + (void)v92) >> 10));
    }

    else
    {
      unsigned int v72 = &(*v71)[v92 & 0x3FF];
      int v73 = (float **)(*((void *)&v90 + 1) + 8LL * ((*((void *)&v92 + 1) + (void)v92) >> 10));
      uint64_t v74 = &(*v73)[(*((void *)&v92 + 1) + v92) & 0x3FF];
    }

    float v75 = sub_100823664(v71, v72, v73, v74);
    int v76 = (void **)*((void *)&v90 + 1);
    uint64_t v77 = (float **)(*((void *)&v90 + 1) + 8 * ((unint64_t)v92 >> 10));
    int v78 = *v77;
    uint64_t v79 = &(*v77)[v92 & 0x3FF];
    uint64_t v80 = *(void *)(*((void *)&v90 + 1) + (((*((void *)&v92 + 1) + (void)v92) >> 7) & 0x1FFFFFFFFFFFFF8LL))
        + 4 * ((*((void *)&v92 + 1) + v92) & 0x3FF);
    if (v79 != (float *)v80)
    {
      uint64_t v81 = &(*v77)[v92 & 0x3FF];
      while (1)
      {
        if ((char *)++v81 - (char *)v78 == 4096)
        {
          int v82 = v77[1];
          ++v77;
          int v78 = v82;
          uint64_t v81 = v82;
        }

        if (*v79 < *v81) {
          uint64_t v79 = v81;
        }
      }
    }

    float v83 = *v79;
    *((void *)&v92 + 1) = 0LL;
    unint64_t v84 = v91 - *((void *)&v90 + 1);
    if ((void)v91 - *((void *)&v90 + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v76);
        int v76 = (void **)(*((void *)&v90 + 1) + 8LL);
        *((void *)&v90 + 1) = v76;
        unint64_t v84 = v91 - (void)v76;
      }

      while ((void)v91 - (void)v76 > 0x10uLL);
    }

    if (v84 >> 3 == 1)
    {
      uint64_t v85 = 512LL;
    }

    else
    {
      if (v84 >> 3 != 2) {
        goto LABEL_114;
      }
      uint64_t v85 = 1024LL;
    }

    *(void *)&__int128 v92 = v85;
LABEL_114:
    uint64_t v86 = (void **)*((void *)&v93 + 1);
    *((void *)&v95 + 1) = 0LL;
    unint64_t v87 = v94 - *((void *)&v93 + 1);
    if ((void)v94 - *((void *)&v93 + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v86);
        uint64_t v86 = (void **)(*((void *)&v93 + 1) + 8LL);
        *((void *)&v93 + 1) = v86;
        unint64_t v87 = v94 - (void)v86;
      }

      while ((void)v94 - (void)v86 > 0x10uLL);
    }

    if (v87 >> 3 == 1)
    {
      uint64_t v88 = 512LL;
    }

    else
    {
      if (v87 >> 3 != 2)
      {
LABEL_121:
        *(float *)a3 = v43;
        *(float *)(a3 + 4) = v75;
        *(float *)(a3 + 8) = v83;
        *(_BYTE *)(a3 + 64) = 1;
        sub_10082131C(a1, (uint64_t)v89);
        sub_100824140((void *)(a3 + 72), (uint64_t)v89);
        sub_100210578(v89);
        sub_10046E180(&v90);
        sub_10046E180(&v93);
        sub_10046E180(buf);
        return;
      }

      uint64_t v88 = 1024LL;
    }

    *(void *)&__int128 v95 = v88;
    goto LABEL_121;
  }

  if (qword_1019345B0 != -1) {
    dispatch_once(&qword_1019345B0, &stru_101859998);
  }
  uint64_t v6 = (os_log_s *)qword_1019345B8;
  if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 72);
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "CLRobustSlopeEstimator given only %zd bins",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_101859998);
    }
    uint64_t v8 = *(void *)(a1 + 72);
    LODWORD(v93) = 134217984;
    *(void *)((char *)&v93 + 4) = v8;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  1LL,  "CLRobustSlopeEstimator given only %zd bins",  (size_t)&v93);
    __int128 v10 = (uint8_t *)v9;
    sub_10029211C("Generic", 1LL, 0, 2LL, "CLPressureStats CLRobustSlopeEstimator::computeStats(int)", "%s\n", v9);
    if (v10 != buf) {
      free(v10);
    }
  }

void sub_1008220B4(_Unwind_Exception *a1)
{
}

void sub_10082210C(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = a1 + 8;
  uint64_t v5 = &a2->n128_f32[3];
  sub_10047109C((void *)(a1 + 8), &a2->n128_f32[3]);
  unint64_t v6 = *(void *)(a1 + 48);
  if (v6 >= 0x14)
  {
    float v7 = *v5;
    int v8 = (int)*v5;
    if (*(_DWORD *)(a1 + 104) <= v8 && *(_DWORD *)(a1 + 108) >= v8)
    {
      unint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = v6 - 1;
      float v11 = *(float *)(*(void *)(*(void *)(a1 + 16) + (((v10 + v9) >> 7) & 0x1FFFFFFFFFFFFF8LL))
                     + 4 * ((v10 + v9) & 0x3FF))
          - *(float *)(*(void *)(*(void *)(a1 + 16) + ((v9 >> 7) & 0x1FFFFFFFFFFFFF8LL)) + 4 * (v9 & 0x3FF));
      if (v11 != 0.0)
      {
        LODWORD(v51) = (int)*v5;
        uint64_t v12 = *(void *)(a1 + 64);
        if (!v12) {
          goto LABEL_15;
        }
        uint64_t v13 = a1 + 64;
        do
        {
          int v14 = *(_DWORD *)(v12 + 32);
          BOOL v15 = v14 < v8;
          if (v14 >= v8) {
            BOOL v16 = (uint64_t *)v12;
          }
          else {
            BOOL v16 = (uint64_t *)(v12 + 8);
          }
          if (!v15) {
            uint64_t v13 = v12;
          }
          uint64_t v12 = *v16;
        }

        while (*v16);
        if (v13 == a1 + 64 || *(_DWORD *)(v13 + 32) > v8)
        {
LABEL_15:
          *(_OWORD *)unsigned int v72 = 0u;
          memset(buf, 0, sizeof(buf));
          *(void *)uint64_t v52 = &v51;
          unint64_t v17 = sub_100823530((uint64_t **)(a1 + 56), (int *)&v51, (uint64_t)&unk_1012CF090, (_DWORD **)v52);
          sub_1008243E8(v17 + 5, (uint64_t)buf);
          sub_100231C10(buf);
          *(void *)buf = &v51;
          int v8 = LODWORD(v51);
          float v7 = *v5;
        }

        float v18 = powf(0.2, v11 * 0.05);
        if (v11 >= 0.0)
        {
          float v19 = v18;
          ++v8;
        }

        else
        {
          float v19 = powf(0.2, v11 * -0.05);
        }

        *(void *)buf = &v51;
        if (*((_DWORD *)sub_100228E48( (uint64_t **)(a1 + 80),  (int *)&v51,  (uint64_t)&unk_1012CF090,  (unsigned int **)buf)
             + 8) == 30
          && (float)((float)(1.0 - v19) * 2147500000.0) > (float)rand())
        {
          *(void *)buf = &v51;
          __int128 v20 = sub_100228E48((uint64_t **)(a1 + 80), (int *)&v51, (uint64_t)&unk_1012CF090, (unsigned int **)buf);
          --*((_DWORD *)v20 + 8);
          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_101859998);
          }
          uint64_t v21 = (os_log_s *)qword_1019345B8;
          if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
          {
            *(void *)buf = &v51;
            unint64_t v22 = sub_100823530((uint64_t **)(a1 + 56), (int *)&v51, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
            *(void *)buf = &v51;
            int v24 = *((_DWORD *)sub_100228E48( (uint64_t **)(a1 + 80),  (int *)&v51,  (uint64_t)&unk_1012CF090,  (unsigned int **)buf)
                  + 8);
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "PopSampleTime";
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&buf[14] = v23;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&buf[24] = "CalibrationBinCount";
            *(_WORD *)unsigned int v72 = 1024;
            *(_DWORD *)&v72[2] = v24;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%d", buf, 0x26u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345B0 != -1) {
              dispatch_once(&qword_1019345B0, &stru_101859998);
            }
            uint64_t v43 = qword_1019345B8;
            *(void *)uint64_t v52 = &v51;
            __int128 v44 = sub_100823530((uint64_t **)(a1 + 56), (int *)&v51, (uint64_t)&unk_1012CF090, (_DWORD **)v52);
            *(void *)uint64_t v52 = &v51;
            int v46 = *((_DWORD *)sub_100228E48( (uint64_t **)(a1 + 80),  (int *)&v51,  (uint64_t)&unk_1012CF090,  (unsigned int **)v52)
                  + 8);
            *(_DWORD *)uint64_t v52 = 136315906;
            *(void *)&v52[4] = "PopSampleTime";
            __int16 v53 = 2048;
            unint64_t v54 = v45;
            __int16 v55 = 2080;
            __int128 v56 = "CalibrationBinCount";
            __int16 v57 = 1024;
            LODWORD(v58) = v46;
            LODWORD(v49) = 38;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v43,  2LL,  "%s,%f,%s,%d",  v52,  v49,  v50,  LODWORD(v51));
            unint64_t v48 = (uint8_t *)v47;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRobustSlopeEstimator::addPoint(const CLPressure::Sample *)",  "%s\n",  v47);
            if (v48 != buf) {
              free(v48);
            }
          }

          *(void *)buf = &v51;
          unint64_t v25 = sub_100823530((uint64_t **)(a1 + 56), (int *)&v51, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
          *(int64x2_t *)(v25 + 9) = vaddq_s64(*(int64x2_t *)(v25 + 9), (int64x2_t)xmmword_1012CE4D0);
          sub_100232D40((uint64_t)(v25 + 5), 1);
        }

        *(void *)buf = &v51;
        int v26 = *((_DWORD *)sub_100228E48( (uint64_t **)(a1 + 80),  (int *)&v51,  (uint64_t)&unk_1012CF090,  (unsigned int **)buf)
              + 8);
        double v27 = a2->n128_f64[0];
        if (v26 < 1 || v27 - *(float *)a1 > (float)((float)((float)((float)v8 - v7) / v11) / (float)(30 - v26)))
        {
          float v28 = v27;
          *(float *)a1 = v28;
          *(void *)buf = &v51;
          uint64_t v29 = sub_100823530((uint64_t **)(a1 + 56), (int *)&v51, (uint64_t)&unk_1012CF090, (_DWORD **)buf);
          sub_100822A38(v29 + 5, a2);
          *(void *)buf = &v51;
          uint64_t v30 = sub_100228E48((uint64_t **)(a1 + 80), (int *)&v51, (uint64_t)&unk_1012CF090, (unsigned int **)buf);
          ++*((_DWORD *)v30 + 8);
          if (qword_1019345B0 != -1) {
            dispatch_once(&qword_1019345B0, &stru_101859998);
          }
          unint64_t v31 = (os_log_s *)qword_1019345B8;
          if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v32 = a2->n128_u64[0];
            float v34 = a2->n128_f32[2];
            float v33 = a2->n128_f32[3];
            *(void *)buf = &v51;
            int v35 = *((_DWORD *)sub_100228E48( (uint64_t **)(a1 + 80),  (int *)&v51,  (uint64_t)&unk_1012CF090,  (unsigned int **)buf)
                  + 8);
            *(_DWORD *)buf = 136317442;
            *(void *)&uint8_t buf[4] = "CalibrationSampleTime";
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&buf[14] = v32;
            *(_WORD *)&buf[22] = 2080;
            *(void *)&buf[24] = "CalibrationSamplePressure";
            *(_WORD *)unsigned int v72 = 2048;
            *(double *)&v72[2] = v34;
            *(_WORD *)&v72[10] = 2080;
            *(void *)&v72[12] = "CalibrationSampleTemperature";
            __int16 v73 = 2048;
            double v74 = v33;
            __int16 v75 = 2080;
            int v76 = "CalibrationTemperatureRate";
            __int16 v77 = 2048;
            double v78 = v11;
            __int16 v79 = 2080;
            uint64_t v80 = "CalibrationBinCount";
            __int16 v81 = 1024;
            int v82 = v35;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "%s,%f,%s,%f,%s,%f,%s,%f,%s,%d",  buf,  0x62u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1019345B0 != -1) {
              dispatch_once(&qword_1019345B0, &stru_101859998);
            }
            uint64_t v36 = qword_1019345B8;
            unint64_t v37 = a2->n128_u64[0];
            float v39 = a2->n128_f32[2];
            float v38 = a2->n128_f32[3];
            *(void *)uint64_t v52 = &v51;
            int v40 = *((_DWORD *)sub_100228E48( (uint64_t **)(a1 + 80),  (int *)&v51,  (uint64_t)&unk_1012CF090,  (unsigned int **)v52)
                  + 8);
            *(_DWORD *)uint64_t v52 = 136317442;
            *(void *)&v52[4] = "CalibrationSampleTime";
            __int16 v53 = 2048;
            unint64_t v54 = v37;
            __int16 v55 = 2080;
            __int128 v56 = "CalibrationSamplePressure";
            __int16 v57 = 2048;
            double v58 = v39;
            __int16 v59 = 2080;
            id v60 = "CalibrationSampleTemperature";
            __int16 v61 = 2048;
            double v62 = v38;
            __int16 v63 = 2080;
            float v64 = "CalibrationTemperatureRate";
            __int16 v65 = 2048;
            double v66 = v11;
            __int16 v67 = 2080;
            int v68 = "CalibrationBinCount";
            __int16 v69 = 1024;
            int v70 = v40;
            LODWORD(v49) = 98;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v36,  2LL,  "%s,%f,%s,%f,%s,%f,%s,%f,%s,%d",  v52,  v49,  v50,  v51);
            double v42 = (uint8_t *)v41;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLRobustSlopeEstimator::addPoint(const CLPressure::Sample *)",  "%s\n",  v41);
            if (v42 != buf) {
              free(v42);
            }
          }
        }

        unint64_t v9 = *(void *)(a1 + 40);
        uint64_t v10 = *(void *)(a1 + 48) - 1LL;
      }

      *(void *)(a1 + 40) = v9 + 1;
      *(void *)(a1 + 48) = v10;
      sub_10074E0DC(v4, 1);
    }
  }

void sub_100822A1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

__n128 sub_100822A38(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100824624(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100822AC0(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  uint64_t v2 = *(void ***)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 48) = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v2 = (void **)(*(void *)(a1 + 16) + 8LL);
      *(void *)(a1 + 16) = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512LL;
    goto LABEL_7;
  }

  if (v4 >> 3 == 2)
  {
    uint64_t v6 = 1024LL;
LABEL_7:
    *(void *)(a1 + 40) = v6;
  }

  sub_100823388(a1 + 56, *(void **)(a1 + 64));
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 64) = 0LL;
  int v8 = *(void **)(a1 + 88);
  unint64_t v7 = (void *)(a1 + 88);
  *(v7 - 2) = 0LL;
  sub_100008390((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *unint64_t v7 = 0LL;
  v7[1] = 0LL;
}

uint64_t sub_100822B68(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    int v8 = 0LL;
    float v11 = 0LL;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }

  else
  {
    int v8 = (uint64_t *)(*(void *)v7 + 8 * (v4 & 0x1FF));
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 9));
    float v11 = (uint64_t *)(*(void *)v10 + 8 * (v9 & 0x1FF));
  }

  sub_100822C10((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_100822BFC(_Unwind_Exception *a1)
{
}

void *sub_100822C10(void *a1, char *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0LL;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 3) + ((a4 - a2) << 6) - (((uint64_t)a3 - *(void *)a2) >> 3);
  }
  return sub_100822C44(a1, a2, a3, v5);
}

void *sub_100822C44(void *a1, void *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = ((v9 - v8) << 6) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_100822D70(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }

  uint64_t v13 = (void *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v11 & 0x1FF);
  }
  v22[0] = v8 + 8 * (v11 >> 9);
  v22[1] = v14;
  __n128 result = sub_1008232F8((uint64_t)v22, a4);
  while (v14 != v16)
  {
    unint64_t v17 = (void *)(v13 == result ? v16 : *v13 + 4096LL);
    if ((void *)v14 == v17)
    {
      unint64_t v17 = (void *)v14;
    }

    else
    {
      float v18 = (void *)v14;
      do
      {
        uint64_t v19 = *a3++;
        *v18++ = v19;
        if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
        {
          __int128 v20 = (uint64_t *)a2[1];
          ++a2;
          a3 = v20;
        }
      }

      while (v18 != v17);
    }

    a1[5] += ((uint64_t)v17 - v14) >> 3;
    if (v13 == result) {
      break;
    }
    uint64_t v21 = v13[1];
    ++v13;
    uint64_t v14 = v21;
  }

  return result;
}

void sub_100822D70(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          uint64_t v29 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v28);
          unint64_t v31 = &v29[8 * (v28 >> 2)];
          unint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8LL];
            uint64_t v34 = 8 * (v33 >> 3);
            int v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)int v35 = v36;
              v35 += 8;
              v34 -= 8LL;
            }

            while (v34);
          }

          unint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }

        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }

          double v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }

      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8LL);
      a1[2] = v3;
    }
  }

  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000EC960(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }

        for (uint64_t i = 0LL; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1000ECA74((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8LL) {
            uint64_t v64 = 511LL;
          }
          else {
            uint64_t v64 = 512LL;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }

        unint64_t v8 = v6;
      }

      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }

      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        double v66 = (char *)a1[2];
        do
        {
          __int16 v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          int v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              __int16 v79 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v78);
              __int16 v81 = &v79[8 * (v78 >> 2)];
              int v82 = (uint64_t *)a1[1];
              double v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                double v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8LL];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8LL;
                }

                while (v84);
              }

              unint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                double v66 = (char *)a1[2];
              }
            }

            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              __int16 v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                double v66 = (char *)a1[1];
              }

              __int16 v77 = &v66[-8 * (v74 >> 1)];
              double v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }

          *(void *)double v66 = v69;
          double v66 = (char *)(a1[2] + 8LL);
          a1[2] = v66;
          --v8;
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __int128 v91 = a1 + 3;
      if (v13) {
        BOOL v15 = (char *)sub_1000071BC((uint64_t)(a1 + 3), v13);
      }
      else {
        BOOL v15 = 0LL;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&__int128 v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0x1000uLL);
        sub_1000ECB90(__p, &v88);
        --v9;
      }

      while (v9);
      if (v8)
      {
        float v39 = (void *)a1[1];
        int v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1LL;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              double v49 = (char *)sub_1000071BC((uint64_t)v91, v48);
              double v51 = (uint64_t *)__p[1];
              int v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                int v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v53 = 8 * (v52 >> 3);
                unint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)unint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8LL;
                }

                while (v53);
              }

              __int128 v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&__int128 v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                int v40 = (char *)v90;
              }
            }

            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              unint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                int v40 = (char *)__p[1];
              }

              int v47 = &v40[-8 * (v44 >> 1)];
              int v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&__int128 v90 = &v45[v46];
            }
          }

          *(void *)int v40 = *v39;
          int v40 = (char *)(v90 + 8);
          *(void *)&__int128 v90 = v90 + 8;
          float v39 = (void *)(a1[1] + 8LL);
          a1[1] = v39;
          --v8;
        }

        while (v8);
      }

      __int16 v57 = (void *)a1[2];
      uint64_t v58 = -7LL - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8LL;
        sub_1000ECCA4((uint64_t)__p, v57);
      }

      __int16 v59 = (char *)*a1;
      __int128 v60 = *(_OWORD *)__p;
      __int128 v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      __int128 v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      __int128 v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&__int128 v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8LL);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }

void sub_100823284( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1008232F8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }

  return result;
}

void sub_10082335C(id a1)
{
  qword_1019345B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_100823388(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100823388(a1, *a2);
    sub_100823388(a1, a2[1]);
    sub_100231C10(a2 + 5);
    operator delete(a2);
  }

uint64_t sub_1008233D0(uint64_t a1, unint64_t a2, void *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2) {
    sub_10082341C((void *)a1, a2, a3);
  }
  return a1;
}

void sub_100823408(_Unwind_Exception *a1)
{
}

void *sub_10082341C(void *a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = ((v7 - v6) << 6) - 1;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  BOOL v11 = a2 > v10;
  unint64_t v12 = a2 - v10;
  if (v11)
  {
    sub_100822D70(a1, v12);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }

  unint64_t v13 = (void *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = *v13 + 8 * (v9 & 0x1FF);
  }
  v20[0] = v6 + 8 * (v9 >> 9);
  v20[1] = v14;
  __n128 result = sub_1008232F8((uint64_t)v20, a2);
  while (v14 != v16)
  {
    unint64_t v17 = (void *)(v13 == result ? v16 : *v13 + 4096LL);
    if ((void *)v14 == v17)
    {
      unint64_t v17 = (void *)v14;
    }

    else
    {
      uint64_t v18 = (void *)v14;
      do
        *v18++ = *a3;
      while (v18 != v17);
    }

    a1[5] += ((uint64_t)v17 - v14) >> 3;
    if (v13 == result) {
      break;
    }
    uint64_t v19 = v13[1];
    ++v13;
    uint64_t v14 = v19;
  }

  return result;
}

uint64_t **sub_100823530(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  unint64_t v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }

      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    unint64_t v12 = (char *)operator new(0x58uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    char v15 = 1;
    sub_1000085FC(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0LL;
    sub_100823620((uint64_t)v14, 0LL);
    return (uint64_t **)v12;
  }

  return v9;
}

void sub_100823620(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100231C10(v2 + 5);
    }
    operator delete(v2);
  }

float sub_100823664(float **a1, float *a2, float **a3, float *a4)
{
  uint64_t v16 = a1;
  unint64_t v17 = a2;
  uint64_t v7 = (float **)sub_10082377C((uint64_t)&v16, (unint64_t)v6 >> 1);
  unint64_t v9 = v8;
  if (v8 != a4) {
    sub_1008237E0(v16, v17, v7, v8, a3, a4);
  }
  if ((v6 & 0x8000000000000001LL) == 1) {
    return *v9;
  }
  int v11 = v17;
  if (v17 == v9)
  {
    int v11 = v9;
  }

  else
  {
    unint64_t v12 = v16;
    unint64_t v13 = *v16;
    uint64_t v14 = v17;
    while (1)
    {
      if ((char *)++v14 - (char *)v13 == 4096)
      {
        char v15 = v12[1];
        ++v12;
        unint64_t v13 = v15;
        uint64_t v14 = v15;
      }

      if (v14 == v9) {
        break;
      }
      if (*v11 < *v14) {
        int v11 = v14;
      }
    }
  }

  return *v11 + (float)((float)(*v9 - *v11) * 0.5);
}

void *sub_10082377C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 2);
    if (v4 < 1) {
      result -= (unint64_t)(1023 - v4) >> 10;
    }
    else {
      result += (unint64_t)v4 >> 10;
    }
  }

  return result;
}

float **sub_1008237E0(float **result, float *a2, float **a3, float *a4, float **a5, float *a6)
{
  uint64_t v70 = result;
  uint64_t v71 = a2;
  if (a6 != a4)
  {
    uint64_t v6 = a6;
    int v10 = a2;
    do
    {
      if (v6 == v10) {
        break;
      }
      int v11 = *a5;
      uint64_t v12 = v6 - *a5 + (((char *)a5 - (char *)result) << 7) - (v10 - *result);
      if (v12 == 3)
      {
        uint64_t v65 = v10 + 1;
        double v66 = v70;
        if ((char *)(v10 + 1) - (char *)*v70 == 4096)
        {
          double v66 = v70 + 1;
          uint64_t v65 = v70[1];
        }

        if (v6 == v11)
        {
          uint64_t v67 = (uint64_t)*--a5;
          uint64_t v6 = (float *)(v67 + 4096);
        }

        return (float **)sub_100823CF4((uint64_t)v70, v10, (uint64_t)v66, v65, (uint64_t)a5, v6 - 1);
      }

      if (v12 == 2)
      {
        if (v6 == v11) {
          uint64_t v6 = *(a5 - 1) + 1024;
        }
        float v68 = *(v6 - 1);
        if (v68 < *v10)
        {
          float v69 = *a2;
          *a2 = v68;
          *(v6 - 1) = v69;
        }

        return result;
      }

      if (v12 <= 7) {
        return sub_100823D7C(v70, a2, a5, v6);
      }
      uint64_t v14 = sub_10082377C((uint64_t)&v70, (unint64_t)v12 >> 1);
      char v15 = v13;
      uint64_t v16 = a5;
      uint64_t v17 = (uint64_t)v6;
      if (v6 == *a5)
      {
        uint64_t v16 = a5 - 1;
        uint64_t v17 = (uint64_t)(*(a5 - 1) + 1024);
      }

      uint64_t v18 = (float *)(v17 - 4);
      int v19 = sub_100823CF4((uint64_t)v70, v71, (uint64_t)v14, v13, (uint64_t)v16, (float *)(v17 - 4));
      __n128 result = v70;
      a2 = v71;
      float v20 = *v71;
      if (*v71 < *v15)
      {
LABEL_17:
        uint64_t v23 = a2 + 1;
        uint64_t v24 = *result;
        unint64_t v25 = *result;
        int64_t v26 = result;
        if ((char *)(a2 + 1) - (char *)*result == 4096)
        {
          int64_t v26 = result + 1;
          unint64_t v25 = result[1];
          uint64_t v23 = v25;
        }

        if (v26 < v16 || v26 == v16 && v23 < v18)
        {
          while (1)
          {
            float v27 = *v15;
            while (1)
            {
              float v28 = *v23;
              if (*v23 >= v27) {
                break;
              }
              if ((char *)++v23 - (char *)v25 == 4096)
              {
                uint64_t v29 = v26[1];
                ++v26;
                unint64_t v25 = v29;
                uint64_t v23 = v29;
              }
            }

            uint64_t v30 = *v16;
            do
            {
              if (v18 == v30)
              {
                unint64_t v31 = *--v16;
                uint64_t v30 = v31;
                uint64_t v18 = v31 + 1024;
              }

              float v32 = *--v18;
              float v33 = v32;
            }

            while (v32 >= v27);
            if (v26 >= v16 && (v26 != v16 || v23 >= v18)) {
              break;
            }
            BOOL v34 = v15 == v23;
            *v23++ = v33;
            *uint64_t v18 = v28;
            ++v19;
            if (v34) {
              char v15 = v18;
            }
            if ((char *)v23 - (char *)v25 == 4096)
            {
              int v35 = v26[1];
              ++v26;
              unint64_t v25 = v35;
              uint64_t v23 = v35;
            }
          }
        }

        if (v23 != v15)
        {
          int v36 = *(_DWORD *)v23;
          if (*v15 < *v23)
          {
            *uint64_t v23 = *v15;
            *(_DWORD *)char v15 = v36;
            ++v19;
          }
        }

        if (v23 == a4) {
          return result;
        }
        if (!v19)
        {
          if (v26 > a3 || (unint64_t v37 = v25, v38 = v23, v39 = v26, v23 > a4) && (unint64_t v37 = v25, v38 = v23, v39 = v26, v26 == a3))
          {
            int v40 = a2;
            int64_t v41 = result;
            while (1)
            {
              uint64_t v42 = v40 + 1;
              if ((char *)(v40 + 1) - (char *)v24 == 4096)
              {
                uint64_t v43 = v41[1];
                ++v41;
                uint64_t v24 = v43;
                uint64_t v42 = v43;
              }

              if (v42 == v23) {
                break;
              }
              BOOL v44 = *v42 < *v40;
              int v40 = v42;
              if (v44) {
                goto LABEL_42;
              }
            }
          }

          else
          {
            while (1)
            {
              unint64_t v45 = v38 + 1;
              if ((char *)(v38 + 1) - (char *)v37 == 4096)
              {
                int64_t v46 = v39[1];
                ++v39;
                unint64_t v37 = v46;
                unint64_t v45 = v46;
              }

              if (v45 == v6) {
                break;
              }
              BOOL v44 = *v45 < *v38;
              uint64_t v38 = v45;
              if (v44) {
                goto LABEL_42;
              }
            }
          }

          return result;
        }

uint64_t sub_100823CF4(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6 = *a4;
  float v7 = *a2;
  float v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1LL;
    }

    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7) {
      return 1LL;
    }
    *a4 = *a6;
    *a6 = v7;
    return 2LL;
  }

  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    float v9 = *a2;
    if (*a4 >= *a2) {
      return 1LL;
    }
    *a2 = *a4;
    *a4 = v9;
    return 2LL;
  }

  return 0LL;
}

float **sub_100823D7C(float **result, float *a2, float **a3, float *a4)
{
  uint64_t v4 = (uint64_t)a4;
  if (*a3 == a4) {
    uint64_t v4 = (uint64_t)(*(a3 - 1) + 1024);
  }
  unint64_t v5 = (float *)(v4 - 4);
  while (a2 != v5)
  {
    if (a2 == a4)
    {
      float v7 = a4;
    }

    else
    {
      float v6 = *result;
      float v7 = a2;
      float v8 = a2;
      float v9 = result;
      while (1)
      {
        if ((char *)++v8 - (char *)v6 == 4096)
        {
          int v10 = v9[1];
          ++v9;
          float v6 = v10;
          float v8 = v10;
        }

        if (v8 == a4) {
          break;
        }
        if (*v8 < *v7) {
          float v7 = v8;
        }
      }
    }

    if (v7 != a2)
    {
      float v11 = *a2;
      *a2 = *v7;
      *float v7 = v11;
    }

    if ((char *)++a2 - (char *)*result == 4096)
    {
      uint64_t v12 = result[1];
      ++result;
      a2 = v12;
    }
  }

  return result;
}

void sub_100823E2C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    float v6 = (char *)a1[3];
    a1[4] = v4;
    float v7 = (void *)a1[1];
    float v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    float v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)float v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_1000071BC(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      float v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        float v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1008240F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100824140(void *a1, uint64_t a2)
{
  unint64_t v4 = (void **)a1[1];
  uint64_t v5 = a1[2];
  a1[5] = 0LL;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = a1[2];
      unint64_t v4 = (void **)(a1[1] + 8LL);
      a1[1] = v4;
      unint64_t v6 = v7 - (void)v4;
    }

    while (v6 > 0x10);
  }

  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 256LL;
    goto LABEL_7;
  }

  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 512LL;
LABEL_7:
    a1[4] = v8;
  }

  sub_1008241E0(a1);
  uint64_t result = sub_10082437C((uint64_t)a1, a2);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1008241E0(void *a1)
{
  if (a1[5])
  {
    sub_1002109A4((uint64_t)a1, 0);
    sub_100824250(a1, 0);
  }

  else
  {
    uint64_t v3 = a1[1];
    for (uint64_t i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = a1[1];
      uint64_t i = a1[2] - 8LL;
    }

    a1[4] = 0LL;
  }

  sub_1008242BC((uint64_t)a1);
}

uint64_t sub_100824250(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void sub_1008242BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = a1 + 24;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(void *)a1) >> 3)
  {
    if (v5 == v4)
    {
      uint64_t v10 = 0LL;
      int v7 = 0LL;
    }

    else
    {
      int v7 = (char *)sub_1000071BC(v2, v6);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v10 = &v7[8 * v9];
      uint64_t v11 = v5 - v8;
      if (v5 != v8)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 8 * (v11 >> 3);
        do
        {
          *(void *)&v7[v12] = *(void *)(v8 + v12);
          v12 += 8LL;
        }

        while (v13 != v12);
        uint64_t v5 = *(void *)(a1 + 8);
        uint64_t v14 = *(void *)(a1 + 16);
        goto LABEL_9;
      }
    }

    uint64_t v14 = v5;
LABEL_9:
    uint64_t v15 = v14 - v5;
    uint64_t v16 = *(void **)a1;
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v7[v15];
    *(void *)(a1 + 24) = v10;
    if (v16) {
      operator delete(v16);
    }
  }

uint64_t sub_10082437C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  sub_1008242BC(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t sub_1008243E8(void *a1, uint64_t a2)
{
  uint64_t v4 = (void **)a1[1];
  uint64_t v5 = a1[2];
  a1[5] = 0LL;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = a1[2];
      uint64_t v4 = (void **)(a1[1] + 8LL);
      a1[1] = v4;
      unint64_t v6 = v7 - (void)v4;
    }

    while (v6 > 0x10);
  }

  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 128LL;
    goto LABEL_7;
  }

  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 256LL;
LABEL_7:
    a1[4] = v8;
  }

  sub_100824488(a1);
  uint64_t result = sub_1008245B8((uint64_t)a1, a2);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100824488(void *a1)
{
  if (a1[5])
  {
    sub_100232D40((uint64_t)a1, 0);
    sub_100232D9C(a1, 0);
  }

  else
  {
    uint64_t v3 = a1[1];
    for (uint64_t i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = a1[1];
      uint64_t i = a1[2] - 8LL;
    }

    a1[4] = 0LL;
  }

  sub_1008244F8((uint64_t)a1);
}

void sub_1008244F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = a1 + 24;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(void *)a1) >> 3)
  {
    if (v5 == v4)
    {
      uint64_t v10 = 0LL;
      uint64_t v7 = 0LL;
    }

    else
    {
      uint64_t v7 = (char *)sub_1000071BC(v2, v6);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v10 = &v7[8 * v9];
      uint64_t v11 = v5 - v8;
      if (v5 != v8)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 8 * (v11 >> 3);
        do
        {
          *(void *)&v7[v12] = *(void *)(v8 + v12);
          v12 += 8LL;
        }

        while (v13 != v12);
        uint64_t v5 = *(void *)(a1 + 8);
        uint64_t v14 = *(void *)(a1 + 16);
        goto LABEL_9;
      }
    }

    uint64_t v14 = v5;
LABEL_9:
    uint64_t v15 = v14 - v5;
    uint64_t v16 = *(void **)a1;
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v7[v15];
    *(void *)(a1 + 24) = v10;
    if (v16) {
      operator delete(v16);
    }
  }

uint64_t sub_1008245B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  sub_1008244F8(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_100824624(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_1000071BC(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_1008248EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100824938(uint64_t a1)
{
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_1018599B8);
  }
  unint64_t v2 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
  {
    double v3 = *(float *)(a1 + 11672);
    double v4 = *(float *)(a1 + 11676);
    double v5 = *(float *)(a1 + 11680);
    double v6 = *(float *)(a1 + 11684);
    double v7 = *(float *)(a1 + 11688);
    double v8 = *(float *)(a1 + 11692);
    double v9 = *(float *)(a1 + 11696);
    double v10 = *(float *)(a1 + 11700);
    double v11 = *(float *)(a1 + 11704);
    uint64_t v12 = *(void *)(a1 + 11728);
    int v13 = *(unsigned __int8 *)(a1 + 11720);
    int v14 = *(_DWORD *)(a1 + 11708);
    double v15 = *(float *)(a1 + 11712);
    double v16 = *(float *)(a1 + 11716);
    *(_DWORD *)buf = 134221312;
    double v63 = v3;
    __int16 v64 = 2048;
    double v65 = v4;
    __int16 v66 = 2048;
    double v67 = v5;
    __int16 v68 = 2048;
    double v69 = v6;
    __int16 v70 = 2048;
    double v71 = v7;
    __int16 v72 = 2048;
    double v73 = v8;
    __int16 v74 = 2048;
    double v75 = v9;
    __int16 v76 = 2048;
    double v77 = v10;
    __int16 v78 = 2048;
    double v79 = v11;
    __int16 v80 = 2048;
    uint64_t v81 = v12;
    __int16 v82 = 1024;
    int v83 = v13;
    __int16 v84 = 1024;
    int v85 = v14;
    __int16 v86 = 2048;
    double v87 = v15;
    __int16 v88 = 2048;
    double v89 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "KickFeatures,poseRangeX,%f,poseRangeZ,%f,pose,%f,yawRange,%f,accelXYKickRange,%f,totalAccelZ,%f,rotationZKickRange ,%f,ratioAccelXYToRotZKickRange,%f,peakAccel,%f,startTime,%f,isKick,%d,gravityMedianCross,%d,powerVertToHor_2_14,% f,ratioAccelToGyroYZHighFreq,%f",  buf,  0x86u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_1018599B8);
    }
    double v17 = *(float *)(a1 + 11672);
    double v18 = *(float *)(a1 + 11676);
    double v19 = *(float *)(a1 + 11680);
    double v20 = *(float *)(a1 + 11684);
    double v21 = *(float *)(a1 + 11688);
    double v22 = *(float *)(a1 + 11692);
    double v23 = *(float *)(a1 + 11696);
    double v24 = *(float *)(a1 + 11700);
    double v25 = *(float *)(a1 + 11704);
    uint64_t v26 = *(void *)(a1 + 11728);
    int v27 = *(unsigned __int8 *)(a1 + 11720);
    int v28 = *(_DWORD *)(a1 + 11708);
    double v29 = *(float *)(a1 + 11712);
    double v30 = *(float *)(a1 + 11716);
    int v34 = 134221312;
    double v35 = v17;
    __int16 v36 = 2048;
    double v37 = v18;
    __int16 v38 = 2048;
    double v39 = v19;
    __int16 v40 = 2048;
    double v41 = v20;
    __int16 v42 = 2048;
    double v43 = v21;
    __int16 v44 = 2048;
    double v45 = v22;
    __int16 v46 = 2048;
    double v47 = v23;
    __int16 v48 = 2048;
    double v49 = v24;
    __int16 v50 = 2048;
    double v51 = v25;
    __int16 v52 = 2048;
    uint64_t v53 = v26;
    __int16 v54 = 1024;
    int v55 = v27;
    __int16 v56 = 1024;
    int v57 = v28;
    __int16 v58 = 2048;
    double v59 = v29;
    __int16 v60 = 2048;
    double v61 = v30;
    LODWORD(v33) = 134;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "KickFeatures,poseRangeX,%f,poseRangeZ,%f,pose,%f,yawRange,%f,accelXYKickRange,%f,totalAccelZ,%f,rotationZKickRange ,%f,ratioAccelXYToRotZKickRange,%f,peakAccel,%f,startTime,%f,isKick,%d,gravityMedianCross,%d,powerVertToHor_2_14,% f,ratioAccelToGyroYZHighFreq,%f",  COERCE_DOUBLE(&v34),  v33);
    __int128 v32 = (uint8_t *)v31;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSwimKickingFeatureCalculator::logFeatures() const", "%s\n", v31);
    if (v32 != buf) {
      free(v32);
    }
  }

uint64_t sub_100824C9C(uint64_t result)
{
  uint64_t v1 = 0LL;
  int64x2_t v2 = vdupq_n_s64(1uLL);
  do
  {
    uint64_t v3 = result + v1;
    *(void *)uint64_t v3 = 0x10000000000LL;
    *(_DWORD *)(v3 + 1032) = 0;
    *(void *)(result + v1 + 1036) = 1065353216LL;
    *(int64x2_t *)(result + v1 + 1048) = v2;
    v1 += 1064LL;
  }

  while (v1 != 3192);
  uint64_t v4 = 0LL;
  int64x2_t v5 = vdupq_n_s64(1uLL);
  do
  {
    double v6 = (int64x2_t *)(result + v4);
    v6[199].i64[1] = 0x10000000000LL;
    v6[264].i32[0] = 0;
    *(void *)(result + 4228 + v4) = 1065353216LL;
    v6[265] = v5;
    v4 += 1064LL;
  }

  while (v4 != 2128);
  uint64_t v7 = 0LL;
  int64x2_t v8 = vdupq_n_s64(1uLL);
  do
  {
    double v9 = (int64x2_t *)(result + v7);
    v9[332].i64[1] = 0x10000000000LL;
    v9[397].i32[0] = 0;
    *(void *)(result + 6356 + v7) = 1065353216LL;
    v9[398] = v8;
    v7 += 1064LL;
  }

  while (v7 != 2128);
  uint64_t v10 = 0LL;
  *(void *)(result + 7448) = 0x10000000000LL;
  *(_DWORD *)(result + 8480) = 0;
  *(void *)(result + 8484) = 1065353216LL;
  *(int64x2_t *)(result + 8496) = vdupq_n_s64(1uLL);
  uint64_t v11 = result + 9544;
  do
  {
    uint64_t v12 = v11 + v10;
    *(void *)(v11 + v10 - 1032) = 0x10000000000LL;
    *(_DWORD *)uint64_t v12 = 0;
    *(void *)(v12 + 4) = 1065353216LL;
    *(int64x2_t *)(v12 + 16) = vdupq_n_s64(1uLL);
    v10 += 1064LL;
  }

  while (v10 != 2128);
  uint64_t v13 = 0LL;
  *(void *)(result + 10640) = 0x10000000000LL;
  *(_OWORD *)(result + 11672) = 0u;
  *(_OWORD *)(result + 11688) = 0u;
  *(_OWORD *)(result + 11704) = 0u;
  *(_BYTE *)(result + 11720) = 0;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(result + 11728) = _Q0;
  int64x2_t v19 = vdupq_n_s64(2uLL);
  *(_DWORD *)(result + 11744) = 0;
  do
  {
    double v20 = (_DWORD *)(result + v13);
    v20[258] = 0;
    *(void *)(result + v13 + 1036) = 1061865576LL;
    *(int64x2_t *)(result + v13 + 1048) = v19;
    *double v20 = 0;
    v13 += 1064LL;
  }

  while (v13 != 3192);
  uint64_t v21 = 0LL;
  int64x2_t v22 = vdupq_n_s64(2uLL);
  do
  {
    double v23 = (int64x2_t *)(result + v21);
    v23[264].i32[0] = 0;
    *(void *)(result + 4228 + v21) = 1061865576LL;
    v23[265] = v22;
    v23[199].i32[2] = 0;
    v21 += 1064LL;
  }

  while (v21 != 2128);
  uint64_t v24 = 0LL;
  *(_DWORD *)(result + 8480) = 0;
  *(void *)(result + 8484) = 1061865576LL;
  *(int64x2_t *)(result + 8496) = vdupq_n_s64(2uLL);
  *(_DWORD *)(result + 7448) = 0;
  uint64_t v25 = result + 9544;
  do
  {
    uint64_t v26 = v25 + v24;
    *(_DWORD *)uint64_t v26 = 0;
    *(void *)(v26 + 4) = 1061865576LL;
    *(int64x2_t *)(v26 + 16) = vdupq_n_s64(2uLL);
    *(_DWORD *)(v25 + v24 - 1032) = 0;
    v24 += 1064LL;
  }

  while (v24 != 2128);
  uint64_t v27 = 0LL;
  int64x2_t v28 = vdupq_n_s64(2uLL);
  do
  {
    double v29 = (int64x2_t *)(result + v27);
    v29[397].i32[0] = 0;
    *(void *)(result + 6356 + v27) = 1061865576LL;
    v29[398] = v28;
    v29[332].i32[2] = 0;
    v27 += 1064LL;
  }

  while (v27 != 2128);
  *(_DWORD *)(result + 10640) = 0;
  return result;
}

BOOL sub_100824EC0(uint64_t a1, float *a2, double a3, double a4)
{
  int64x2_t v8 = (unsigned __int16 *)(a1 + 10640);
  sub_10082502C(a1 + 3192, a2[6], a2[8]);
  sub_10083361C(a2 + 9, v24);
  uint64_t v22 = 1065353216LL;
  int v23 = 0;
  float v9 = sub_1002B8A2C((uint64_t)v24, (float *)&v22);
  sub_10082502C(a1 + 5320, v9, v10);
  sub_10083361C(a2 + 9, v24);
  sub_1002B8A2C((uint64_t)v24, a2);
  sub_100825110((unsigned __int16 *)(a1 + 7448), v11);
  sub_10082502C(a1 + 8512, a2[1], a2[2]);
  sub_10083361C(a2 + 9, v24);
  float v12 = sub_1002B8A2C((uint64_t)v24, a2 + 3);
  float v14 = v13;
  sub_1008251AC(a1, v12, v15, v13);
  uint64_t v16 = v8[1];
  unint64_t v17 = *(unsigned int *)(a1 + 10644);
  uint64_t v18 = *v8;
  if (v18 + v16 >= v17) {
    uint64_t v19 = *(unsigned int *)(a1 + 10644);
  }
  else {
    uint64_t v19 = 0LL;
  }
  *(float *)&v8[2 * (v18 + v16 - v19) + 4] = v14;
  if (v17 <= v16)
  {
    if (v18 + 1 < v17) {
      LOWORD(v17) = 0;
    }
    unsigned __int16 *v8 = v18 + 1 - v17;
  }

  else
  {
    v8[1] = v16 + 1;
  }

  int v20 = *(_DWORD *)(a1 + 11744) + 1;
  *(_DWORD *)(a1 + 11744) = v20;
  *(double *)(a1 + 11736) = a4;
  *(double *)(a1 + 11728) = a3;
  return (v20 & 0x7F) == 0 && sub_100825270(a1);
}

uint64_t sub_10082502C(uint64_t a1, float a2, float a3)
{
  uint64_t v4 = 0LL;
  *(float *)float v14 = a2;
  *(float *)&v14[1] = a3;
  char v5 = 1;
  do
  {
    char v6 = v5;
    uint64_t v7 = (unsigned __int16 *)(a1 + 1064 * v4);
    uint64_t result = sub_100825D40((uint64_t)(v7 + 516), (float *)&v14[v4]);
    uint64_t v9 = *((void *)v7 + 132) - 1LL;
    *((void *)v7 + 132) = v9;
    if (!v9)
    {
      *((void *)v7 + 132) = *(void *)(a1 + 1064 * v4 + 1048);
      uint64_t v10 = v7[1];
      unint64_t v11 = *((unsigned int *)v7 + 1);
      uint64_t v12 = *v7;
      if (v12 + v10 >= v11) {
        uint64_t v13 = *((unsigned int *)v7 + 1);
      }
      else {
        uint64_t v13 = 0LL;
      }
      *(_DWORD *)&v7[2 * (v12 + v10 - v13) + 4] = *((_DWORD *)v7 + 260);
      if (v11 <= v10)
      {
        if (v12 + 1 < v11) {
          LOWORD(v11) = 0;
        }
        *uint64_t v7 = v12 + 1 - v11;
      }

      else
      {
        v7[1] = v10 + 1;
      }
    }

    char v5 = 0;
    uint64_t v4 = 1LL;
  }

  while ((v6 & 1) != 0);
  return result;
}

uint64_t sub_100825110(unsigned __int16 *a1, float a2)
{
  float v9 = a2;
  uint64_t result = sub_100825D40((uint64_t)(a1 + 516), &v9);
  uint64_t v4 = *((void *)a1 + 132) - 1LL;
  *((void *)a1 + 132) = v4;
  if (!v4)
  {
    *((void *)a1 + 132) = *((void *)a1 + 131);
    uint64_t v5 = a1[1];
    unint64_t v6 = *((unsigned int *)a1 + 1);
    uint64_t v7 = *a1;
    if (v7 + v5 >= v6) {
      uint64_t v8 = *((unsigned int *)a1 + 1);
    }
    else {
      uint64_t v8 = 0LL;
    }
    *(_DWORD *)&a1[2 * (v7 + v5 - v8) + 4] = *((_DWORD *)a1 + 260);
    if (v6 <= v5)
    {
      if (v7 + 1 < v6) {
        LOWORD(v6) = 0;
      }
      *a1 = v7 + 1 - v6;
    }

    else
    {
      a1[1] = v5 + 1;
    }
  }

  return result;
}

uint64_t sub_1008251AC(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v5 = 0LL;
  *(float *)float v14 = a2;
  *(float *)&v14[1] = a3;
  *(float *)&_DWORD v14[2] = a4;
  unint64_t v6 = (float *)v14;
  do
  {
    uint64_t v7 = (unsigned __int16 *)(a1 + v5);
    uint64_t result = sub_100825D40(a1 + v5 + 1032, v6);
    uint64_t v9 = *(void *)(a1 + v5 + 1056) - 1LL;
    *(void *)(a1 + v5 + 1056) = v9;
    if (!v9)
    {
      *((void *)v7 + 132) = *((void *)v7 + 131);
      uint64_t v10 = v7[1];
      unint64_t v11 = *((unsigned int *)v7 + 1);
      uint64_t v12 = *v7;
      if (v12 + v10 >= v11) {
        uint64_t v13 = *((unsigned int *)v7 + 1);
      }
      else {
        uint64_t v13 = 0LL;
      }
      *(_DWORD *)&v7[2 * (v12 + v10 - v13) + 4] = *((_DWORD *)v7 + 260);
      if (v11 <= v10)
      {
        if (v12 + 1 < v11) {
          LOWORD(v11) = 0;
        }
        *uint64_t v7 = v12 + 1 - v11;
      }

      else
      {
        v7[1] = v10 + 1;
      }
    }

    v5 += 1064LL;
    ++v6;
  }

  while (v5 != 3192);
  return result;
}

BOOL sub_100825270(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 3194);
  if (v1 >= 0x100)
  {
    *(_DWORD *)(a1 + 11720) = 0;
    *(_OWORD *)(a1 + 11688) = 0u;
    *(_OWORD *)(a1 + 11704) = 0u;
    *(_OWORD *)(a1 + 11672) = 0u;
    sub_10082550C((float32x2_t *)a1);
    sub_1008253E0(a1);
    sub_100825608(a1);
    sub_100825A90(a1);
    BOOL v3 = 0;
    float v6 = *(float *)(a1 + 11688);
    if (v6 <= 2.0 || v6 >= 25.0) {
      goto LABEL_16;
    }
    BOOL v3 = 0;
    float v9 = *(float *)(a1 + 11696);
    if (v9 <= 2.0) {
      goto LABEL_17;
    }
    if (v9 >= 50.0) {
      goto LABEL_17;
    }
    BOOL v3 = 0;
    float v10 = *(float *)(a1 + 11692);
    else {
LABEL_16:
    }
      BOOL v3 = 0;
LABEL_17:
    *(_BYTE *)(a1 + 11720) = v3;
    sub_100824938(a1);
  }

  return v1 > 0xFF;
}

void sub_1008253E0(uint64_t a1)
{
  if (!*(_WORD *)(a1 + 3194))
  {
    float v12 = -INFINITY;
    goto LABEL_15;
  }

  unint64_t v2 = 0LL;
  float v3 = 0.0;
  float v4 = 3.4028e38;
  float v5 = -3.4028e38;
  float v6 = 0.0;
  do
  {
    float v7 = v6;
    float v8 = *(float *)sub_100208A44((unsigned __int16 *)(a1 + 6384), v2);
    float v9 = (float *)sub_100208A44((unsigned __int16 *)(a1 + 5320), v2);
    float v6 = atan2f(v8, *v9) * 57.296;
    float v10 = v6 - v7;
    if ((float)(v6 - v7) <= 180.0)
    {
      if (v10 >= -180.0) {
        goto LABEL_8;
      }
      float v11 = 360.0;
    }

    else
    {
      float v11 = -360.0;
    }

    float v10 = v10 + v11;
LABEL_8:
    float v3 = v3 + v10;
    if (v3 > v5) {
      float v5 = v3;
    }
    if (v3 < v4) {
      float v4 = v3;
    }
    ++v2;
  }

  while (v2 < *(unsigned __int16 *)(a1 + 3194));
  float v12 = v5 - v4;
LABEL_15:
  *(float *)(a1 + 11684) = v12;
}

void sub_10082550C(float32x2_t *a1)
{
  if (a1[399].i16[1])
  {
    unint64_t v2 = 0LL;
    float32x2_t v3 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    float32x2_t v4 = (float32x2_t)0x80000000800000LL;
    float v5 = 0.0;
    float32x2_t v6 = (float32x2_t)vdup_n_s32(0x42652EE1u);
    do
    {
      float v7 = (float *)sub_100208A44((unsigned __int16 *)&a1[399], v2);
      float v11 = asinf(*v7);
      float v8 = (float *)sub_100208A44((unsigned __int16 *)&a1[532], v2);
      float32x2_t v9 = vmul_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(asinf(*v8)), LODWORD(v11)), v6);
      float v5 = v5 + v9.f32[0];
      float32x2_t v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v4), (int8x8_t)v9, (int8x8_t)v4);
      float32x2_t v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v3, v9), (int8x8_t)v9, (int8x8_t)v3);
      ++v2;
    }

    while (v2 < a1[399].u16[1]);
    a1[1459] = vsub_f32(v4, v3);
    float v10 = v5 / (float)v2;
  }

  else
  {
    a1[1459] = (float32x2_t)0x7F0000007FLL;
    float v10 = 0.0;
  }

  a1[1460].f32[0] = v10;
}

void sub_100825608(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_101998D28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_101998D28))
  {
    float v29 = sub_1009AF760(50, 0x80uLL, 0.5);
    dword_101998D20 = sub_1009AF58C(v29);
    __cxa_guard_release(&qword_101998D28);
  }

  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_101998D38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_101998D38))
  {
    float v30 = sub_1009AF760(50, 0x80uLL, 5.0);
    dword_101998D30 = sub_1009AF58C(v30);
    __cxa_guard_release(&qword_101998D38);
  }

  sub_100FBFFE8(&v31);
  sub_100FBFFEC((uint64_t)&v31, v37, (unsigned __int16 *)a1);
  sub_100FBFFEC((uint64_t)&v31, v36, (unsigned __int16 *)(a1 + 1064));
  sub_100FBFFEC((uint64_t)&v31, v35, (unsigned __int16 *)(a1 + 2128));
  uint64_t v4 = 0LL;
  float v5 = 0.0;
  do
  {
    float v6 = *(float *)&v37[v4] + *(float *)&v36[v4];
    v34[v4++] = v6;
  }

  while (v4 != 128);
  *(float *)(a1 + 11688) = sub_1009AF7AC(dword_101998D20, dword_101998D30, (uint64_t)v34);
  *(float *)(a1 + 11692) = sub_1009AF7AC(0, 127, (uint64_t)v35);
  *(float *)(a1 + 11704) = v5;
  float v7 = sub_1009AF760(50, 0x80uLL, 2.0);
  unsigned int v8 = sub_1009AF58C(v7);
  float v9 = sub_1009AF760(50, 0x80uLL, 14.0);
  unsigned int v10 = sub_1009AF58C(v9);
  float v11 = 0.0;
  float v12 = 0.0;
  if (v8 <= v10)
  {
    unint64_t v13 = (int)v8;
    unint64_t v14 = (int)v8;
    do
      float v11 = v11 + *(float *)&v35[v14++];
    while (v14 <= (int)v10);
    float v15 = 0.0;
    unint64_t v16 = (int)v8;
    do
      float v15 = v15 + *(float *)&v37[v16++];
    while (v16 <= (int)v10);
    float v17 = 0.0;
    do
      float v17 = v17 + *(float *)&v36[v13++];
    while (v13 <= (int)v10);
    float v12 = (float)(v15 + v17) * 0.5;
  }

  float v18 = v11 / v12;
  if (v12 <= 0.2) {
    float v18 = 1.0;
  }
  *(float *)(a1 + 11712) = v18;
  sub_100FBFFEC((uint64_t)&v31, v34, (unsigned __int16 *)(a1 + 7448));
  float v19 = sub_1009AF7AC(dword_101998D20, dword_101998D30, (uint64_t)v34);
  *(float *)(a1 + 11696) = v19;
  float v20 = 0.0;
  if (v19 > 0.0000011921) {
    float v20 = *(float *)(a1 + 11688) / v19;
  }
  *(float *)(a1 + 11700) = v20;
  sub_100FBFFEC((uint64_t)&v31, v33, (unsigned __int16 *)(a1 + 8512));
  sub_100FBFFEC((uint64_t)&v31, v32, (unsigned __int16 *)(a1 + 9576));
  for (uint64_t i = 0LL; i != 128; i += 4LL)
  {
    *(float32x4_t *)&v33[i + 128] = vaddq_f32( vaddq_f32( vmulq_f32(*(float32x4_t *)&v37[i], *(float32x4_t *)&v37[i]),  vmulq_f32(*(float32x4_t *)&v36[i], *(float32x4_t *)&v36[i])),  vmulq_f32(*(float32x4_t *)&v35[i], *(float32x4_t *)&v35[i]));
    *(float32x4_t *)&v34[i] = vaddq_f32( vmulq_f32(*(float32x4_t *)&v33[i], *(float32x4_t *)&v33[i]),  vmulq_f32(*(float32x4_t *)&v32[i], *(float32x4_t *)&v32[i]));
  }

  unsigned __int8 v22 = atomic_load((unsigned __int8 *)&qword_101998D48);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_101998D48))
  {
    qword_101998D40 = vcvtas_u32_f32(sub_1009AF760(50, 0x80uLL, 10.0));
    __cxa_guard_release(&qword_101998D48);
  }

  uint64_t v23 = qword_101998D40;
  float v24 = 0.0;
  float v25 = 0.0;
  float v26 = 0.0;
  if ((unint64_t)qword_101998D40 <= 0x7F)
  {
    uint64_t v27 = qword_101998D40;
    do
      float v25 = v25 + v34[v27++];
    while (v27 != 128);
    float v26 = 0.0;
    do
      float v26 = v26 + *(float *)&v33[v23++ + 128];
    while (v23 != 128);
  }

  float v28 = v26 / v25;
  if (v25 > 0.0) {
    float v24 = v28;
  }
  *(float *)(a1 + 11716) = v24;
}

void sub_100825A50(_Unwind_Exception *a1)
{
}

void sub_100825A90(uint64_t a1)
{
  __p = 0LL;
  uint64_t v21 = 0LL;
  unsigned __int8 v22 = 0LL;
  if (*(_WORD *)(a1 + 3194))
  {
    unint64_t v2 = 0LL;
    do
    {
      unsigned __int8 v3 = (_DWORD *)sub_100208A44((unsigned __int16 *)(a1 + 10640), v2);
      uint64_t v4 = v3;
      float v5 = v21;
      if (v21 >= v22)
      {
        float v7 = (char *)__p;
        uint64_t v8 = (v21 - (_BYTE *)__p) >> 2;
        unint64_t v9 = v8 + 1;
        uint64_t v10 = v22 - (_BYTE *)__p;
        if ((v22 - (_BYTE *)__p) >> 1 > v9) {
          unint64_t v9 = v10 >> 1;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          float v12 = (char *)sub_10000956C((uint64_t)&v22, v11);
          float v7 = (char *)__p;
          float v5 = v21;
        }

        else
        {
          float v12 = 0LL;
        }

        unint64_t v13 = &v12[4 * v8];
        *(_DWORD *)unint64_t v13 = *v4;
        float v6 = v13 + 4;
        while (v5 != v7)
        {
          int v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }

        __p = v13;
        uint64_t v21 = v6;
        unsigned __int8 v22 = &v12[4 * v11];
        if (v7) {
          operator delete(v7);
        }
      }

      else
      {
        *(_DWORD *)uint64_t v21 = *v3;
        float v6 = v5 + 4;
      }

      uint64_t v21 = v6;
      ++v2;
    }

    while (v2 < *(unsigned __int16 *)(a1 + 3194));
  }

  float v15 = sub_100825C70((uint64_t)&__p);
  unint64_t v16 = (char *)__p;
  if (*(_WORD *)(a1 + 3194) == 1LL)
  {
    *(_DWORD *)(a1 + 11708) = 0;
    if (!v16) {
      return;
    }
  }

  else
  {
    uint64_t v17 = 0LL;
    int v18 = 0;
    do
    {
      float v19 = *((float *)__p + v17);
      if (v19 > v15 && *((float *)__p + v17 + 1) <= v15)
      {
        ++v18;
        ++v17;
      }

      else
      {
        ++v17;
      }
    }

    while (v17 != *(unsigned __int16 *)(a1 + 3194) - 1LL);
    *(_DWORD *)(a1 + 11708) = v18;
  }

  uint64_t v21 = v16;
  operator delete(v16);
}

void sub_100825C4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_100825C70(uint64_t a1)
{
  float v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  sub_10001B72C(&v7, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  unint64_t v2 = v7;
  unint64_t v3 = (unint64_t)(v8 - v7) >> 1;
  uint64_t v4 = &v7[v3];
  if (v4 != v8)
  {
    sub_1002C3C90(v7, v4, v8, v1);
    unint64_t v2 = v7;
    unint64_t v3 = (unint64_t)(v8 - v7) >> 1;
  }

  float v5 = v2[v3];
  uint64_t v8 = v2;
  operator delete(v2);
  return v5;
}

void sub_100825CF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100825D14(id a1)
{
  qword_1019344E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t sub_100825D40(uint64_t result, float *a2)
{
  int v2 = *(_DWORD *)result;
  int v3 = *(_DWORD *)result + 1;
  *(_DWORD *)uint64_t result = v3;
  if (v2 > 2) {
    float v4 = *(float *)(result + 8) - (float)(*(float *)(result + 4) * (float)(*(float *)(result + 8) - *a2));
  }
  else {
    float v4 = (float)(1.0 / (float)v3) * (float)(*a2 + (float)(*(float *)(result + 8) * (float)v2));
  }
  *(float *)(result + 8) = v4;
  return result;
}

void sub_1008274BC(_Unwind_Exception *a1)
{
}

void sub_100827DF0(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100827E1C(id a1)
{
  NSFileAttributeKey v1 = NSFileProtectionKey;
  NSFileProtectionType v2 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  qword_101998D60 =  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v2,  &v1,  1LL);
}

void sub_100827EA4(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

  ;
}

BOOL sub_100827F08()
{
  return os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT);
}

BOOL sub_100827F1C()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2424), OS_LOG_TYPE_INFO);
}

BOOL sub_100827F2C()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2424));
}

void sub_100828344(id a1)
{
  qword_101934878 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void *sub_100828370(void *a1, uint64_t *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_100828BF8(a1, *a2, a2[1], 0x6DB6DB6DB6DB6DB7LL * ((a2[1] - *a2) >> 4));
  return a1;
}

void sub_1008283C0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    double v3 = 0.0;
    do
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      double v3 = v3 + sub_1006083D4(v1, &Current);
      v1 += 112LL;
    }

    while (v1 != v2);
  }

double sub_100828458(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  double v3 = -1.0;
  while (v1 != v2)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v4 = sub_1006083D4(v1, &Current);
    if (v3 < v4) {
      double v3 = v4;
    }
    v1 += 112LL;
  }

  return v3;
}

CFStringRef sub_1008284B8(int a1, uint64_t *a2)
{
  if (a1 < 1) {
    return &stru_1018A4B00;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return &stru_1018A4B00;
  }
  uint64_t v5 = v3 - v2;
  unint64_t v6 = (unint64_t)(v3 - v2) >> 3;
  else {
    int v7 = rand() % ((int)v6 - a1 + 1);
  }
  sub_1010DDBC0(&v18, "");
  if (v7 < (int)v6)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = v7;
    uint64_t v11 = 8LL * v7;
    uint64_t v12 = v10 + 1;
    do
    {
      if ((_DWORD)v9) {
        std::string::append(&v18, ", ");
      }
      sub_1007EC360(&__p);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v18, (const std::string::value_type *)p_p, size);
      ++v9;
      v11 += 8LL;
    }

    while ((int)v9 < a1);
  }

  if ((v18.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    float v15 = &v18;
  }
  else {
    float v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  uint64_t v8 = +[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", v15, 4LL);
  return (const __CFString *)v8;
}

void sub_100828628( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100828664(uint64_t *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      if (sub_1006083C4(v4, a3) > *a2)
      {
        unint64_t v9 = a4[1];
        if (v9 >= a4[2])
        {
          uint64_t v10 = sub_100828CFC(a4, v4);
        }

        else
        {
          sub_100607A34(a4[1], v4);
          uint64_t v10 = v9 + 112;
          a4[1] = v9 + 112;
        }

        a4[1] = v10;
      }

      v4 += 112LL;
    }

    while (v4 != v5);
  }

void sub_10082870C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  a10 = (void **)v10;
  sub_10068CDBC(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100828730@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t result = sub_100869780(a2);
  a3[1] = 0LL;
  a3[2] = 0LL;
  *a3 = 0LL;
  if ((_DWORD)result)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    while (v9 != v10)
    {
      uint64_t result = sub_1006088AC(v9, a2);
      if (v11 > a4)
      {
        unint64_t v12 = a3[1];
        if (v12 >= a3[2])
        {
          uint64_t result = sub_100828CFC(a3, v9);
        }

        else
        {
          sub_100607A34(a3[1], v9);
          uint64_t result = v12 + 112;
          a3[1] = v12 + 112;
        }

        a3[1] = result;
      }

      v9 += 112LL;
    }
  }

  return result;
}

void sub_1008287E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  a10 = (void **)v10;
  sub_10068CDBC(&a10);
  _Unwind_Resume(a1);
}

CFStringRef sub_10082880C(uint64_t **a1, int a2)
{
  std::string __p = 0LL;
  float v19 = 0LL;
  float v20 = 0LL;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *v3;
      if (v5 >= v20)
      {
        uint64_t v8 = (char *)__p;
        uint64_t v9 = (v5 - (_BYTE *)__p) >> 3;
        unint64_t v10 = v9 + 1;
        uint64_t v11 = v20 - (_BYTE *)__p;
        if ((v20 - (_BYTE *)__p) >> 2 > v10) {
          unint64_t v10 = v11 >> 2;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          unint64_t v13 = (char *)sub_1000071BC((uint64_t)&v20, v12);
          uint64_t v8 = (char *)__p;
          uint64_t v5 = v19;
        }

        else
        {
          unint64_t v13 = 0LL;
        }

        int v14 = &v13[8 * v9];
        *(void *)int v14 = v6;
        int v7 = v14 + 8;
        while (v5 != v8)
        {
          uint64_t v15 = *((void *)v5 - 1);
          v5 -= 8;
          *((void *)v14 - 1) = v15;
          v14 -= 8;
        }

        std::string __p = v14;
        float v19 = v7;
        float v20 = &v13[8 * v12];
        if (v8) {
          operator delete(v8);
        }
      }

      else
      {
        *(void *)uint64_t v5 = v6;
        int v7 = v5 + 8;
      }

      float v19 = v7;
      v3 += 14;
      uint64_t v5 = v7;
    }

    while (v3 != v4);
  }

  unint64_t v16 = sub_1008284B8(a2, (uint64_t *)&__p);
  if (__p)
  {
    float v19 = (char *)__p;
    operator delete(__p);
  }

  return v16;
}

void sub_100828950( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100828974@<X0>(uint64_t **a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = sub_10000CF44(&v24, (uint64_t)"count: ", 7LL);
  std::ostream::operator<<(v6, 0x6DB6DB6DB6DB6DB7LL * (((char *)v4 - (char *)v5) >> 4));
  if (v4 != v5)
  {
    int v7 = sub_10000CF44(&v24, (uint64_t)", samples: ", 11LL);
    uint64_t v8 = (char *)-[__CFString UTF8String]((id)sub_10082880C(a1, 5), "UTF8String");
    sub_1010DDBC0(__p, v8);
    if ((v22 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if ((v22 & 0x80u) == 0) {
      uint64_t v10 = v22;
    }
    else {
      uint64_t v10 = (uint64_t)__p[1];
    }
    sub_10000CF44(v7, (uint64_t)v9, v10);
    uint64_t v11 = sub_10000CF44(&v24, (uint64_t)", average age: ", 15LL);
    uint64_t v12 = *v11;
    *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + 16) = 2LL;
    *(_DWORD *)((char *)v11 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(void *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
    sub_1008283C0((uint64_t *)a1);
    int v14 = (void *)std::ostream::operator<<(v13);
    sub_10000CF44(v14, (uint64_t)"h", 1LL);
    uint64_t v15 = sub_10000CF44(&v24, (uint64_t)", oldest age: ", 14LL);
    uint64_t v16 = *v15;
    *(uint64_t *)((char *)v15 + *(void *)(*v15 - 24) + 16) = 2LL;
    *(_DWORD *)((char *)v15 + *(void *)(v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(void *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
    double v17 = sub_100828458((uint64_t *)a1);
    std::string v18 = (void *)std::ostream::operator<<(v17);
    sub_10000CF44(v18, (uint64_t)"h", 1LL);
  }

  std::stringbuf::str(a2, &v25);
  *(void *)((char *)v23
  uint64_t v24 = v19;
  std::streambuf::~streambuf(&v25);
  return std::ios::~ios(&v26);
}

void sub_100828B9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100828BD4(void *a1)
{
  return 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(a1[1] - *a1) >> 4);
}

void *sub_100828BF8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10021195C(result, a4);
    uint64_t result = (void *)sub_100828C7C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_100828C5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10068CDBC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100828C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      sub_100607A34(a4 + v7, a2 + v7);
      v7 += 112LL;
    }

    while (a2 + v7 != a3);
    a4 += v7;
  }

  return a4;
}

void sub_100828CD8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 112;
    do
    {
      sub_100607C80(v4 + v2);
      v2 -= 112LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100828CFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7LL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7LL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x124924924924924LL) {
    unint64_t v9 = 0x249249249249249LL;
  }
  else {
    unint64_t v9 = v5;
  }
  double v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10005057C(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  double v13 = v10;
  int v14 = &v10[112 * v4];
  uint64_t v16 = &v10[112 * v9];
  sub_100607A34(v14, a2);
  uint64_t v15 = v14 + 112;
  sub_100828E18(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100828E9C((uint64_t)&v13);
  return v11;
}

void sub_100828E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100828E18(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 112LL;
    uint64_t result = sub_100607B74(result - 112, v4);
  }

  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100828E9C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    sub_100607C80(i - 112);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100828EE8(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)a1 = _Q0;
  *(void *)(a1 + 16) = 0xBFF0000000000000LL;
  unsigned __int8 v10 = 0;
  sub_1012049AC((unsigned __int8 *)(a1 + 113), "CompassCalibrationLoggerEnabled", &v10, 0);
  *(void *)(a1 + 120) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  if ((sub_1004F97F4() & 0x10) != 0)
  {
    uint64_t v7 = sub_1006E27E8();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100828FA0;
    v9[3] = &unk_10181D3D0;
    v9[4] = a1;
    sub_1006E28B8(v7, (uint64_t)v9);
  }

  return a1;
}

void sub_100828F88(_Unwind_Exception *a1)
{
}

void sub_100828FA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (uint64_t *)sub_10071542C();
  uint64_t v6 = 0x10000000BLL;
  char v7 = 0;
  sub_10121B774(v2, (uint64_t)&v6, (uint64_t *)&v8);
  sub_10005F550(v1 + 120, &v8);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  if (*((void *)&v8 + 1))
  {
    uint64_t v4 = (unint64_t *)(*((void *)&v8 + 1) + 8LL);
    do
      unint64_t v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  sub_100719D78(*(uint64_t **)(v1 + 120), (uint64_t)sub_10082903C, v1);
}

void sub_10082903C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (IOHIDEventGetType(a4) == 3)
  {
    int IntegerValue = IOHIDEventGetIntegerValue(a4, 196608LL);
    int v7 = IOHIDEventGetIntegerValue(a4, 196609LL);
    if (IntegerValue == 12)
    {
      int v8 = v7;
      BOOL v9 = IOHIDEventGetIntegerValue(a4, 196610LL) == 1;
      unint64_t TimeStamp = IOHIDEventGetTimeStamp(a4);
      double v11 = sub_101171C7C(TimeStamp);
      sub_100829A78(a1, v8, v9, v11);
    }
  }

uint64_t sub_1008290F4(uint64_t a1)
{
  uint64_t v2 = a1 + 120;
  sub_1000F0D38((void *)(a1 + 120));
  sub_10000AE14(v2);
  return a1;
}

void sub_100829128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 97);
  float v6 = (float)*(char *)(a1 + 25);
  int v7 = *(_DWORD *)(a1 + 77);
  unsigned int v8 = llroundf( sqrtf( (float)((float)(*(float *)(a1 + 33) * *(float *)(a1 + 33))
                 + (float)(*(float *)(a1 + 29) * *(float *)(a1 + 29)))
         + (float)(*(float *)(a1 + 37) * *(float *)(a1 + 37)))
       - sqrtf( (float)((float)(*(float *)(a2 + 9) * *(float *)(a2 + 9)) + (float)(*(float *)(a2 + 5) * *(float *)(a2 + 5)))
         + (float)(*(float *)(a2 + 13) * *(float *)(a2 + 13))));
  unsigned int v9 = llround(CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 16));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_100829290;
  v19[3] = &unk_10183D0E8;
  v19[4] = a2;
  int v20 = v5;
  unsigned int v21 = v9;
  unsigned int v22 = v8;
  int v23 = v7;
  float v24 = v6;
  AnalyticsSendEventLazy(@"com.apple.CoreMotion.CompassCalibration", v19);
  int v10 = *(char *)(a2 + 1);
  if (v10 >= 1 && *(unsigned __int8 *)(a1 + 25) == v10)
  {
    *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent();
    __int128 v11 = *(_OWORD *)(a2 + 16);
    *uint64_t v4 = *(_OWORD *)a2;
    v4[1] = v11;
    __int128 v13 = *(_OWORD *)(a2 + 48);
    __int128 v12 = *(_OWORD *)(a2 + 64);
    __int128 v14 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)((char *)v4 + 73) = *(_OWORD *)(a2 + 73);
    v4[3] = v13;
    v4[4] = v12;
    v4[2] = v14;
  }

  else
  {
    *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent();
    __int128 v15 = *(_OWORD *)(a2 + 16);
    *uint64_t v4 = *(_OWORD *)a2;
    v4[1] = v15;
    __int128 v17 = *(_OWORD *)(a2 + 48);
    __int128 v16 = *(_OWORD *)(a2 + 64);
    __int128 v18 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)((char *)v4 + 73) = *(_OWORD *)(a2 + 73);
    v4[3] = v17;
    v4[4] = v16;
    v4[2] = v18;
    sub_1008294BC(a1, 0);
  }

NSDictionary *sub_100829290(uint64_t a1)
{
  v11[0] = @"logTimestamp";
  v12[0] = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  CFAbsoluteTimeGetCurrent() * 1000000.0);
  v11[1] = @"isAPAwake";
  v12[1] = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 4LL));
  v11[2] = @"quality";
  LODWORD(v2) = *(_DWORD *)(*(void *)(a1 + 32) + 53LL);
  v12[2] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v2);
  v11[3] = @"temperature";
  LODWORD(v3) = *(_DWORD *)(*(void *)(a1 + 32) + 73LL);
  v12[3] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v3);
  v11[4] = @"previousCalibrationTemperature";
  LODWORD(v4) = *(_DWORD *)(a1 + 40);
  v12[4] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v4);
  v11[5] = @"timeSinceLastCalibration";
  v12[5] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v11[6] = @"biasShift";
  v12[6] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v11[7] = @"isSaturation";
  v12[7] = +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 2LL));
  v11[8] = @"previousCalibrationQuality";
  LODWORD(sub_1012279C0(0LL, v4, v5) = *(_DWORD *)(a1 + 52);
  v12[8] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v5);
  v11[9] = @"previousCalibrationLevel";
  LODWORD(v6) = *(_DWORD *)(a1 + 56);
  v12[9] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v6);
  v11[10] = @"calibrationLevel";
  v12[10] = +[NSNumber numberWithChar:]( &OBJC_CLASS___NSNumber,  "numberWithChar:",  *(char *)(*(void *)(a1 + 32) + 1LL));
  v11[11] = @"minTempSinceLastCal";
  LODWORD(v7) = *(_DWORD *)(*(void *)(a1 + 32) + 77LL);
  v12[11] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v7);
  v11[12] = @"maxTempSinceLastCal";
  LODWORD(v8) = *(_DWORD *)(*(void *)(a1 + 32) + 81LL);
  v12[12] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v8);
  v11[13] = @"avgTempSinceLastCal";
  LODWORD(v9) = *(_DWORD *)(*(void *)(a1 + 32) + 85LL);
  v12[13] = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v9);
  return +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  14LL);
}

void sub_1008294BC(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 114))
  {
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101859A58);
    }
    double v4 = (os_log_s *)qword_101934588;
    if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEFAULT))
    {
      double v5 = *(float *)(a1 + 29);
      double v6 = *(float *)(a1 + 33);
      double v7 = *(float *)(a1 + 37);
      float v8 = *(float *)(a1 + 53);
      int v9 = *(char *)(a1 + 25);
      float v10 = *(float *)(a1 + 77);
      float v11 = *(float *)(a1 + 81);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134220800;
      float v12 = *(float *)(a1 + 85);
      int v13 = *(unsigned __int8 *)(a1 + 26);
      int v14 = *(unsigned __int8 *)(a1 + 27);
      int v15 = *(unsigned __int8 *)(a1 + 28);
      uint64_t v16 = *(void *)(a1 + 16);
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v6;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      double v90 = v7;
      __int16 v91 = 2048;
      double v92 = (float)(1.0 / v8);
      __int16 v93 = 1024;
      int v94 = v9;
      __int16 v95 = 2048;
      double v96 = v10;
      __int16 v97 = 2048;
      double v98 = v11;
      __int16 v99 = 2048;
      double v100 = v12;
      __int16 v101 = 1024;
      int v102 = v13;
      __int16 v103 = 1024;
      int v104 = v14;
      __int16 v105 = 1024;
      int v106 = v15;
      __int16 v107 = 2048;
      uint64_t v108 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[CLCompassCalibrationLogger] Last CompassCalibration: bias.x,%.2f,.y,%.2f,.z,%.2f,radius,%.2f,level,%d,quality,% .2f,cost,%.2f,coverage,%.2f,saturations,%d,consistency,%d,apAwake,%d,cftime,%.3f",  (uint8_t *)&buf,  0x6Au);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_101934580 != -1) {
        dispatch_once(&qword_101934580, &stru_101859A58);
      }
      double v45 = *(float *)(a1 + 29);
      double v46 = *(float *)(a1 + 33);
      double v47 = *(float *)(a1 + 37);
      float v48 = *(float *)(a1 + 53);
      int v49 = *(char *)(a1 + 25);
      float v50 = *(float *)(a1 + 77);
      float v51 = *(float *)(a1 + 81);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134220800;
      float v52 = *(float *)(a1 + 85);
      int v53 = *(unsigned __int8 *)(a1 + 26);
      int v54 = *(unsigned __int8 *)(a1 + 27);
      int v55 = *(unsigned __int8 *)(a1 + 28);
      uint64_t v56 = *(void *)(a1 + 16);
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v45;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v46;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
      double v70 = v47;
      __int16 v71 = 2048;
      double v72 = (float)(1.0 / v48);
      __int16 v73 = 1024;
      int v74 = v49;
      __int16 v75 = 2048;
      double v76 = v50;
      __int16 v77 = 2048;
      double v78 = v51;
      __int16 v79 = 2048;
      double v80 = v52;
      __int16 v81 = 1024;
      int v82 = v53;
      __int16 v83 = 1024;
      int v84 = v54;
      __int16 v85 = 1024;
      int v86 = v55;
      __int16 v87 = 2048;
      uint64_t v88 = v56;
      LODWORD(v58) = 106;
      int v57 = (std::string *)_os_log_send_and_compose_impl( 2LL,  0LL,  &buf,  1628LL,  &_mh_execute_header,  qword_101934588,  0LL,  "[CLCompassCalibrationLogger] Last CompassCalibration: bias.x,%.2f,.y,%.2f,.z,%.2f,radius,%. 2f,level,%d,quality,%.2f,cost,%.2f,coverage,%.2f,saturations,%d,consistency,%d,apAwake,%d,cftime,%.3f",  COERCE_DOUBLE(&__p),  v58,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompassCalibrationLogger::alertLastCal(BOOL)",  "%s\n",  (const char *)v57);
      if (v57 != &buf) {
        free(v57);
      }
    }

    __int128 v17 = sub_1002951C8(*(CFAbsoluteTime *)(a1 + 16));
    else {
      __int128 v18 = *(&off_101859A78 + (char)(*(_BYTE *)(a1 + 25) - 2));
    }
    int v19 = sub_1001B9A1C();
    double v20 = *(float *)(a1 + 29);
    double v21 = *(float *)(a1 + 33);
    double v22 = *(float *)(a1 + 37);
    double v23 = 1.0 / *(float *)(a1 + 53);
    double v24 = -1.0;
    if (v19)
    {
      if (!*(_BYTE *)(a1 + 26)) {
        double v24 = *(float *)(a1 + 81);
      }
      float v25 = *(float *)(a1 + 93);
      float v26 = *(float *)(a1 + 85);
      sub_1002A6C50(v18, &buf);
      int size = (char)buf.__r_.__value_.__s.__size_;
      std::string::size_type v28 = buf.__r_.__value_.__r.__words[0];
      float v29 = *(float *)(a1 + 77);
      sub_1002A6C50(v17, &__p);
      p_std::string buf = &buf;
      if (size < 0) {
        p_std::string buf = (std::string *)v28;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      CFStringRef v32 = CFStringCreateWithFormat( 0LL,  0LL,  @"B:%.0f,%.0f,%.0f\nR:%.0f Cost:%.1f\nPlan:%.2f Cov:%.1f\n%s Q:%.1f\n%s",  *(void *)&v20,  *(void *)&v21,  *(void *)&v22,  *(void *)&v23,  *(void *)&v24,  v25,  v26,  p_buf,  v29,  p_p);
    }

    else
    {
      if (!*(_BYTE *)(a1 + 26)) {
        double v24 = *(float *)(a1 + 81);
      }
      float v33 = *(float *)(a1 + 93);
      float v34 = *(float *)(a1 + 85);
      sub_1002A6C50(v18, &buf);
      int v35 = (char)buf.__r_.__value_.__s.__size_;
      std::string::size_type v36 = buf.__r_.__value_.__r.__words[0];
      float v37 = *(float *)(a1 + 77);
      uint64_t v38 = *(unsigned __int8 *)(a1 + 27);
      uint64_t v39 = *(unsigned __int8 *)(a1 + 28);
      sub_1002A6C50(v17, &__p);
      __int16 v40 = &buf;
      if (v35 < 0) {
        __int16 v40 = (std::string *)v36;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v41 = &__p;
      }
      else {
        double v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      CFStringRef v32 = CFStringCreateWithFormat( 0LL,  0LL,  @"Bias  [%.2f,%.2f,%.2f]\nRadius  %.2f\nCost  %.2f\nPlanarity  %.2f\nCoverage  %.2f\nLevel  %s\nQuality  %.2f\nConsistency  %d\nAP Awake  %d\n%s",  *(void *)&v20,  *(void *)&v21,  *(void *)&v22,  *(void *)&v23,  *(void *)&v24,  v33,  v34,  v40,  v37,  v38,  v39,  v41);
    }

    __int16 v42 = v32;
    if (a2) {
      double v43 = @"Cur Compass Cal";
    }
    else {
      double v43 = @"New Compass Cal";
    }
    else {
      __int16 v44 = @"No Compass Cal Since locationd Start";
    }
    CFUserNotificationDisplayNotice(0.0, 0LL, 0LL, 0LL, 0LL, v43, v44, 0LL);
    CFRelease(v42);
    CFRelease(v17);
  }

void sub_100829A34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

void sub_100829A78(double *a1, int a2, int a3, double a4)
{
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_101859A58);
  }
  float v8 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240448;
    int v17 = a2;
    __int16 v18 = 1026;
    int v19 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "[CLCompassCalibrationLogger] ButtonPress,type,%{public}d,down,%{public}d",  buf,  0xEu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_101859A58);
    }
    v13[0] = 67240448;
    v13[1] = a2;
    __int16 v14 = 1026;
    int v15 = a3;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "[CLCompassCalibrationLogger] ButtonPress,type,%{public}d,down,%{public}d",  v13,  14);
    float v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLCompassCalibrationLogger::onButton(int, BOOL, const CFTimeInterval)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  int v9 = a1;
  if (a2 > 232)
  {
    if (a2 != 234)
    {
      if (a2 != 233) {
        return;
      }
      goto LABEL_12;
    }
  }

  else if (a2 != 48)
  {
    if (a2 != 64) {
      return;
    }
LABEL_12:
    int v9 = a1 + 1;
  }

  *int v9 = a4;
  if (a3)
  {
    double v10 = a1[1];
    if (vabdd_f64(*a1, v10) < 0.3 && *a1 >= 0.0 && v10 >= 0.0) {
      sub_1008294BC((uint64_t)a1, 1);
    }
  }

void sub_100829CC4(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_10082AD64(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)&OBJC_IVAR___PBDataReader__error;
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    double v5 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    double v6 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    double v7 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    float v8 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    int v9 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    double v10 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    float v11 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    float v12 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    int v13 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    __int16 v14 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    int v15 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    uint64_t v16 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
    do
    {
      if (*(_BYTE *)(a2 + *v3)) {
        break;
      }
      char v17 = 0;
      unsigned int v18 = 0;
      unint64_t v19 = 0LL;
      while (1)
      {
        uint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v21 = v20 + 1;
        if (v20 == -1 || v21 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
        v19 |= (unint64_t)(v22 & 0x7F) << v17;
        if ((v22 & 0x80) == 0) {
          goto LABEL_12;
        }
        v17 += 7;
        BOOL v23 = v18++ >= 9;
        if (v23)
        {
          unint64_t v19 = 0LL;
          uint64_t v24 = *v3;
          int v25 = *(unsigned __int8 *)(a2 + v24);
          goto LABEL_14;
        }
      }

      *(_BYTE *)(a2 + *v3) = 1;
LABEL_12:
      uint64_t v24 = *v3;
      int v25 = *(unsigned __int8 *)(a2 + v24);
      if (*(_BYTE *)(a2 + v24)) {
        unint64_t v19 = 0LL;
      }
LABEL_14:
      if (v25 || (v19 & 7) == 4) {
        break;
      }
      switch((v19 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0LL;
          *(_BYTE *)(a1 + v5[342]) |= 8u;
          while (1)
          {
            uint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v32 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_75;
            }
            v27 += 7;
            BOOL v23 = v28++ >= 9;
            if (v23)
            {
              LODWORD(v29) = 0;
              goto LABEL_77;
            }
          }

          *(_BYTE *)(a2 + *v3) = 1;
LABEL_75:
          if (*(_BYTE *)(a2 + *v3)) {
            LODWORD(v29) = 0;
          }
LABEL_77:
          uint64_t v70 = v6[343];
          goto LABEL_90;
        case 2u:
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v29 = 0LL;
          while (2)
          {
            uint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + *v3) = 1;
            }

            else
            {
              char v37 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36;
              v29 |= (unint64_t)(v37 & 0x7F) << v33;
              if (v37 < 0)
              {
                v33 += 7;
                BOOL v23 = v34++ >= 9;
                if (v23)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_81;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + *v3)) {
            LODWORD(v29) = 0;
          }
LABEL_81:
          uint64_t v70 = v7[347];
          goto LABEL_90;
        case 3u:
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v40 = 0LL;
          while (2)
          {
            uint64_t v41 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v42 = v41 + 1;
            if (v41 == -1 || v42 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + *v3) = 1;
            }

            else
            {
              char v43 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42;
              v40 |= (unint64_t)(v43 & 0x7F) << v38;
              if (v43 < 0)
              {
                v38 += 7;
                BOOL v23 = v39++ >= 9;
                if (v23)
                {
                  uint64_t v40 = 0LL;
                  goto LABEL_85;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + *v3)) {
            uint64_t v40 = 0LL;
          }
LABEL_85:
          BOOL v71 = v40 != 0;
          uint64_t v72 = v8[348];
          goto LABEL_95;
        case 4u:
          unint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v44 <= 0xFFFFFFFFFFFFFFF7LL && v44 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v45 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            uint64_t v45 = 0LL;
          }

          uint64_t v73 = v9[349];
          goto LABEL_104;
        case 5u:
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v29 = 0LL;
          while (2)
          {
            uint64_t v48 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v49 = v48 + 1;
            if (v48 == -1 || v49 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + *v3) = 1;
            }

            else
            {
              char v50 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49;
              v29 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                BOOL v23 = v47++ >= 9;
                if (v23)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_89;
                }

                continue;
              }
            }

            break;
          }

          if (*(_BYTE *)(a2 + *v3)) {
            LODWORD(v29) = 0;
          }
LABEL_89:
          uint64_t v70 = v10[350];
LABEL_90:
          *(_DWORD *)(a1 + v70) = v29;
          continue;
        case 6u:
          unint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v51 <= 0xFFFFFFFFFFFFFFFBLL && v51 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 4;
          }

          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            int v52 = 0;
          }

          uint64_t v74 = v11[351];
          goto LABEL_109;
        case 7u:
          unint64_t v53 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53 + 4;
          }

          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            int v52 = 0;
          }

          uint64_t v74 = v12[352];
          goto LABEL_109;
        case 9u:
          *(_BYTE *)(a1 + v5[342]) |= 1u;
          unint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v61 <= 0xFFFFFFFFFFFFFFF7LL && v61 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v45 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61 + 8;
          }

          else
          {
            *(_BYTE *)(a2 + *v3) = 1;
            uint64_t v45 = 0LL;
          }

          uint64_t v73 = v13[344];
LABEL_104:
          *(void *)(a1 + v73) = v45;
          continue;
        case 0xAu:
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v64 = 0LL;
          break;
        case 0xBu:
          *(_BYTE *)(a1 + v5[342]) |= 2u;
          unint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v68 <= 0xFFFFFFFFFFFFFFFBLL && v68 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68 + 4;
          }

          else
          {
            *(_BYTE *)(a2 + *v3) = 1;
            int v52 = 0;
          }

          uint64_t v74 = v15[345];
          goto LABEL_109;
        case 0xCu:
          *(_BYTE *)(a1 + v5[342]) |= 4u;
          unint64_t v69 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v69 <= 0xFFFFFFFFFFFFFFFBLL && v69 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v69);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69 + 4;
          }

          else
          {
            *(_BYTE *)(a2 + *v3) = 1;
            int v52 = 0;
          }

          uint64_t v74 = v16[346];
LABEL_109:
          *(_DWORD *)(a1 + v74) = v52;
          continue;
        default:
          int v54 = v6;
          int v55 = v7;
          uint64_t v56 = v5;
          int v57 = v8;
          double v58 = v9;
          uint64_t v75 = a1;
          double v59 = v3;
          uint64_t result = PBReaderSkipValueWithTag(a2);
          uint64_t v16 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          double v3 = v59;
          float v11 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          a1 = v75;
          int v9 = v58;
          double v10 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          float v8 = v57;
          float v12 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          double v5 = v56;
          int v15 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          double v7 = v55;
          int v13 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          double v6 = v54;
          __int16 v14 = &OBJC_IVAR___CLCountryTracker__allowSimulatedLocations;
          if (!(_DWORD)result) {
            return result;
          }
          continue;
      }

      while (1)
      {
        uint64_t v65 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v66 = v65 + 1;
        if (v65 == -1 || v66 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v67 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66;
        v64 |= (unint64_t)(v67 & 0x7F) << v62;
        if ((v67 & 0x80) == 0) {
          goto LABEL_92;
        }
        v62 += 7;
        BOOL v23 = v63++ >= 9;
        if (v23)
        {
          uint64_t v64 = 0LL;
          goto LABEL_94;
        }
      }

      *(_BYTE *)(a2 + *v3) = 1;
LABEL_92:
      if (*(_BYTE *)(a2 + *v3)) {
        uint64_t v64 = 0LL;
      }
LABEL_94:
      BOOL v71 = v64 != 0;
      uint64_t v72 = v14[353];
LABEL_95:
      *(_BYTE *)(a1 + v72) = v71;
    }

    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }

  return *(_BYTE *)(a2 + *v3) == 0;
}

uint64_t sub_10082BF3C()
{
  uint64_t result = sub_1004F97F4();
  if ((result & 0x10) != 0)
  {
    uint64_t v1 = operator new(0x28uLL);
    uint64_t result = sub_10082BFCC((uint64_t)v1);
    qword_1019A1828 = (uint64_t)v1;
  }

  return result;
}

void sub_10082BF74(_Unwind_Exception *a1)
{
}

uint64_t sub_10082BF88()
{
  if (qword_101998D70 != -1) {
    dispatch_once(&qword_101998D70, &stru_101859AB8);
  }
  return qword_1019A1828;
}

uint64_t sub_10082BFCC(uint64_t a1)
{
  double v2 = (void *)sub_100506ACC(a1, 4);
  *double v2 = &off_101859AE8;
  double v3 = (unsigned __int8 *)v2 + 36;
  *(_BYTE *)(a1 + 36) = sub_1004FCBEC();
  unsigned __int8 v6 = 1;
  sub_1012049AC((unsigned __int8 *)(a1 + 37), "EnableVisualLocalization", &v6, 0);
  sub_1012049AC(v5, "AlwaysOnDeviceMotion9", v3, 0);
  *(_BYTE *)(a1 + 36) = v5[1];
  sub_100506B30((uint64_t *)a1);
  return a1;
}

void sub_10082C05C(_Unwind_Exception *a1)
{
}

void sub_10082C07C(void *a1)
{
  uint64_t v1 = sub_100506AE4(a1);
  operator delete(v1);
}

BOOL sub_10082C090(uint64_t a1)
{
  return (sub_1004F97F4() & 0x10) != 0 && *(_BYTE *)(a1 + 36) != 0;
}

BOOL sub_10082C0C8(uint64_t a1)
{
  return (sub_1004F97F4() & 0x10) != 0 && *(_BYTE *)(a1 + 38) != 0;
}

unint64_t sub_10082C100()
{
  return ((unint64_t)sub_1004F97F4() >> 4) & 1;
}

uint64_t sub_10082C118(uint64_t a1, void *a2)
{
  double v3 = sub_10060A360((const void *)a1, a2);
  *double v3 = off_101859B38;
  *(_BYTE *)(a1 + 121) = sub_10082D0C4((uint64_t)v3);
  *(void *)(a1 + 132) = 0LL;
  *(void *)(a1 + 124) = 0LL;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  (const void *)a1,  (CFNotificationCallback)sub_1005AC0F0,  @"com.apple.tcc.access.changed",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216LL))(a1);
  sub_10060AB4C(a1, v5);
  if (qword_101998D78 != -1) {
    dispatch_once(&qword_101998D78, &stru_101859C68);
  }
  if (qword_101998D80 && off_10198D560[0]())
  {
    unsigned __int8 v6 = CFNotificationCenterGetDarwinNotifyCenter();
    double v7 = (const __CFString *)off_10198D560[0]();
    CFNotificationCenterAddObserver( v6,  (const void *)a1,  (CFNotificationCallback)sub_10082C358,  v7,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  }

  if (qword_101998D90 != -1) {
    dispatch_once(&qword_101998D90, &stru_101859C88);
  }
  if (qword_101998D98 && off_10198D568[0]())
  {
    float v8 = CFNotificationCenterGetDarwinNotifyCenter();
    int v9 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", off_10198D568[0]());
    CFNotificationCenterAddObserver( v8,  (const void *)a1,  (CFNotificationCallback)sub_10082C578,  v9,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  }

  sub_1003CC884((uint64_t)sub_10082C798, a1, *(void **)(a1 + 32), &v14);
  uint64_t v10 = v14;
  uint64_t v14 = 0LL;
  uint64_t v11 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    uint64_t v12 = v14;
    uint64_t v14 = 0LL;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
  }

  [*(id *)(*(void *)(a1 + 128) + 16) register:*(void *)(*(void *)(a1 + 128) + 8) forNotification:11 registrationInfo:0];
  sub_10082C958((_DWORD *)a1);
  sub_10082CB7C((_DWORD *)a1);
  return a1;
}

void sub_10082C318(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[16];
  v1[16] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_10060A80C(v1);
  _Unwind_Resume(a1);
}

void sub_10082C358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101859C48);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLFitnessTrackingNotifierCompanion::activationStateChanged",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101859C48);
    }
    uint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      unint64_t v19 = "";
      __int16 v20 = 2082;
      unint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLFitnessTrackingNotifierCompanion::activationStateChanged, event:%{public, locatio n:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v15 = 0;
  }

  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _DWORD v13[2] = sub_10082DB84;
  v13[3] = &unk_10182D1B8;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10082C558( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10082C578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101859C48);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLFitnessTrackingNotifierCompanion::phoneFitnessModeChanged",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101859C48);
    }
    uint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      unint64_t v19 = "";
      __int16 v20 = 2082;
      unint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLFitnessTrackingNotifierCompanion::phoneFitnessModeChanged, event:%{public, locati on:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v15 = 0;
  }

  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _DWORD v13[2] = sub_10082DC84;
  v13[3] = &unk_10182D1B8;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10082C778( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10082C798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101859C48);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    char v5 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLFitnessTrackingNotifierCompanion::onDaemonStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101859C48);
    }
    unsigned __int8 v6 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      id v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLFitnessTrackingNotifierCompanion::onDaemonStatusNotification, event:%{public, loc ation:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v8 = 0;
  }

  sub_10082CB7C((_DWORD *)a4);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_10082C938( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10082C958(_DWORD *a1)
{
  uint64_t result = sub_10082D9D0();
  if (a1[31] != (_DWORD)result)
  {
    a1[31] = result;
    HIDWORD(v8) = result;
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_101859CC8);
    }
    uint64_t v3 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      if (a1[31] == 1) {
        double v4 = "Enabled";
      }
      else {
        double v4 = "Disabled";
      }
      *(_DWORD *)std::string buf = 136446210;
      id v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CM Phone Fitness Mode, %{public}s", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_101859CC8);
      }
      if (a1[31] == 1) {
        char v5 = "Enabled";
      }
      else {
        char v5 = "Disabled";
      }
      int v9 = 136446210;
      int v10 = v5;
      LODWORD(v8) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "CM Phone Fitness Mode, %{public}s",  &v9,  v8);
      double v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFitnessTrackingNotifierCompanion::updatePhoneFitnessMode()",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }

    *(_DWORD *)std::string buf = 5;
    return (*(uint64_t (**)(_DWORD *, uint8_t *, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  (char *)&v8 + 4,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  return result;
}

void sub_10082CB7C(_DWORD *a1)
{
  double v2 = (const __CFBoolean *)CFPreferencesCopyValue( @"EnableFitnessTracking",  @"com.apple.nanolifestyle.privacy",  @"mobile",  kCFPreferencesAnyHost);
  if (v2)
  {
    uint64_t v3 = v2;
    int Value = CFBooleanGetValue(v2);
    CFRelease(v3);
    if (Value) {
      int v5 = 1;
    }
    else {
      int v5 = 2;
    }
    if (v5 != a1[34])
    {
      a1[34] = v5;
      if (qword_101934720 != -1) {
        dispatch_once(&qword_101934720, &stru_101859CA8);
      }
      unsigned __int8 v6 = (os_log_s *)qword_101934728;
      if (os_log_type_enabled((os_log_t)qword_101934728, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138412802;
        unint64_t v19 = @"com.apple.nanolifestyle.privacy";
        __int16 v20 = 2112;
        unint64_t v21 = @"EnableFitnessTracking";
        __int16 v22 = 1026;
        int v23 = Value;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "WatchAppFitnessTracking: %@ %@ isEnabled=%{public}d",  buf,  0x1Cu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934720 != -1) {
          dispatch_once(&qword_101934720, &stru_101859CA8);
        }
        int v12 = 138412802;
        __int16 v13 = @"com.apple.nanolifestyle.privacy";
        __int16 v14 = 2112;
        __int16 v15 = @"EnableFitnessTracking";
        __int16 v16 = 1026;
        int v17 = Value;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934728,  0LL,  "WatchAppFitnessTracking: %@ %@ isEnabled=%{public}d",  &v12,  28);
        __int16 v11 = (uint8_t *)v10;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFitnessTrackingNotifierCompanion::updateWatchAppFitnessTracking()",  "%s\n",  v10);
        if (v11 != buf) {
          free(v11);
        }
      }

      *(_DWORD *)std::string buf = a1[34];
      int v12 = 6;
      (*(void (**)(_DWORD *, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  &v12,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
    }
  }

  else
  {
    if (qword_101934720 != -1) {
      dispatch_once(&qword_101934720, &stru_101859CA8);
    }
    double v7 = (os_log_s *)qword_101934728;
    if (os_log_type_enabled((os_log_t)qword_101934728, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138543362;
      unint64_t v19 = @"EnableFitnessTracking";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "updateWatchAppFitnessTracking: %{public}@ returned nil",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934720 != -1) {
        dispatch_once(&qword_101934720, &stru_101859CA8);
      }
      int v12 = 138543362;
      __int16 v13 = @"EnableFitnessTracking";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934728,  1LL,  "updateWatchAppFitnessTracking: %{public}@ returned nil",  &v12,  12);
      int v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLFitnessTrackingNotifierCompanion::updateWatchAppFitnessTracking()",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

uint64_t sub_10082CF44(void *a1)
{
  *a1 = off_101859B38;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.tcc.access.changed", 0LL);
  if (qword_101998D78 != -1) {
    dispatch_once(&qword_101998D78, &stru_101859C68);
  }
  if (qword_101998D80 && off_10198D560[0]())
  {
    uint64_t v3 = CFNotificationCenterGetDarwinNotifyCenter();
    double v4 = (const __CFString *)off_10198D560[0]();
    CFNotificationCenterRemoveObserver(v3, a1, v4, 0LL);
  }

  if (qword_101998D90 != -1) {
    dispatch_once(&qword_101998D90, &stru_101859C88);
  }
  if (qword_101998D98 && off_10198D568[0]())
  {
    int v5 = CFNotificationCenterGetDarwinNotifyCenter();
    unsigned __int8 v6 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", off_10198D568[0]());
    CFNotificationCenterRemoveObserver(v5, a1, v6, 0LL);
  }

  uint64_t v7 = a1[16];
  if (v7)
  {
    [*(id *)(v7 + 16) unregister:*(void *)(v7 + 8) forNotification:11];
    uint64_t v8 = a1[16];
    a1[16] = 0LL;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  else
  {
    a1[16] = 0LL;
  }

  return sub_10060A80C(a1);
}

void sub_10082D0B0(void *a1)
{
  uint64_t v1 = (void *)sub_10082CF44(a1);
  operator delete(v1);
}

BOOL sub_10082D0C4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 109))
  {
    if (qword_101934720 != -1) {
      dispatch_once(&qword_101934720, &stru_101859CA8);
    }
    uint64_t v1 = (os_log_s *)qword_101934728;
    if (os_log_type_enabled((os_log_t)qword_101934728, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "#SystemState, Overriding device activation status check.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934720 != -1) {
        dispatch_once(&qword_101934720, &stru_101859CA8);
      }
      v8[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934728,  0LL,  "#SystemState, Overriding device activation status check.",  v8,  2);
      int v5 = (uint8_t *)v4;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLFitnessTrackingNotifierCompanion::isDeviceActivated() const",  "%s\n",  v4);
      if (v5 != buf) {
        free(v5);
      }
    }

    return 1LL;
  }

  if (qword_101998D78 != -1) {
    dispatch_once(&qword_101998D78, &stru_101859C68);
  }
  if (qword_101998D80 && (off_10198D578() & 1) != 0) {
    return 1LL;
  }
  if (qword_101934720 != -1) {
    dispatch_once(&qword_101934720, &stru_101859CA8);
  }
  uint64_t v3 = (os_log_s *)qword_101934728;
  if (os_log_type_enabled((os_log_t)qword_101934728, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "#SystemState, Device is not activated, suspending activity tracking.",  buf,  2u);
  }

  BOOL result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934720 != -1) {
      dispatch_once(&qword_101934720, &stru_101859CA8);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934728,  0LL,  "#SystemState, Device is not activated, suspending activity tracking.",  v8,  2);
    uint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLFitnessTrackingNotifierCompanion::isDeviceActivated() const",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
    return 0LL;
  }

  return result;
}

BOOL sub_10082D3D0()
{
  char v9 = 0;
  if (!TCCAccessGetOverride(kTCCServiceMotion, &v9))
  {
    if (qword_101934720 != -1) {
      dispatch_once(&qword_101934720, &stru_101859CA8);
    }
    uint64_t v0 = (os_log_s *)qword_101934728;
    if (os_log_type_enabled((os_log_t)qword_101934728, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEFAULT,  "#SystemState, Failed to get TCC for motion, suspending activity tracking.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934720 != -1) {
        dispatch_once(&qword_101934720, &stru_101859CA8);
      }
      v8[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934728,  0LL,  "#SystemState, Failed to get TCC for motion, suspending activity tracking.",  v8,  2);
      unsigned __int8 v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLFitnessTrackingNotifierCompanion::isFitnessTrackingEnabled() const",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }
  }

  if (v9)
  {
    if (qword_101934720 != -1) {
      dispatch_once(&qword_101934720, &stru_101859CA8);
    }
    uint64_t v1 = (os_log_s *)qword_101934728;
    if (os_log_type_enabled((os_log_t)qword_101934728, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "#SystemState, Fitness tracking is disabled, suspending activity tracking.",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934720 != -1) {
        dispatch_once(&qword_101934720, &stru_101859CA8);
      }
      v8[0] = 0;
      LODWORD(v7) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934728,  0LL,  "#SystemState, Fitness tracking is disabled, suspending activity tracking.",  v8,  v7);
      double v4 = (uint8_t *)v3;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLFitnessTrackingNotifierCompanion::isFitnessTrackingEnabled() const",  "%s\n",  v3);
      if (v4 != buf) {
        free(v4);
      }
    }
  }

  return v9 == 0;
}

void sub_10082D6B4(uint64_t a1)
{
  int v2 = sub_10060A358(a1);
  BYTE4(v10) = v2;
  int v3 = *(unsigned __int8 *)(a1 + 121);
  *(_WORD *)((char *)&v10 + 5) = *(unsigned __int8 *)(a1 + 121);
  BOOL v4 = 0;
  HIBYTE(v10) = v4;
  if (qword_101934720 != -1) {
    dispatch_once(&qword_101934720, &stru_101859CA8);
  }
  int v5 = (os_log_s *)qword_101934728;
  if (os_log_type_enabled((os_log_t)qword_101934728, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240704;
    int v17 = v2;
    __int16 v18 = 1026;
    int v19 = v3;
    __int16 v20 = 1026;
    BOOL v21 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#SystemState, Companion, Enabled, %{public}d, DeviceActivated, %{public}d, allowed, %{public}d",  buf,  0x14u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934720 != -1) {
      dispatch_once(&qword_101934720, &stru_101859CA8);
    }
    v11[0] = 67240704;
    v11[1] = v2;
    __int16 v12 = 1026;
    int v13 = v3;
    __int16 v14 = 1026;
    BOOL v15 = v4;
    LODWORD(v10) = 20;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934728,  0LL,  "#SystemState, Companion, Enabled, %{public}d, DeviceActivated, %{public}d, allowed, %{public}d",  v11,  v10);
    char v9 = (uint8_t *)v8;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLFitnessTrackingNotifierCompanion::notifyClients()",  "%s\n",  v8);
    if (v9 != buf) {
      free(v9);
    }
  }

  *(_DWORD *)std::string buf = 0;
  if (sub_100247620(a1, (int *)buf, 1LL))
  {
    *(_DWORD *)std::string buf = 0;
    (*(void (**)(uint64_t, uint8_t *, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  buf,  (char *)&v10 + 4,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  *(_DWORD *)std::string buf = 6;
  if (sub_100247620(a1, (int *)buf, 1LL))
  {
    *(_DWORD *)std::string buf = *(_DWORD *)(a1 + 136);
    v11[0] = 6;
    (*(void (**)(uint64_t, _DWORD *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152LL))( a1,  v11,  buf,  1LL,  0xFFFFFFFFLL,  0LL);
  }

  unsigned __int8 v6 = objc_autoreleasePoolPush();
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___ALActivityLog);
  -[ALActivityLog setTimestamp:](v7, "setTimestamp:", CFAbsoluteTimeGetCurrent());
  -[ALActivityLog setFitnessTracking:]( v7,  "setFitnessTracking:",  objc_alloc_init(&OBJC_CLASS___ALCMFitnessTracking));
  -[ALCMFitnessTracking setFitnessTrackingEnabled:]( -[ALActivityLog fitnessTracking](v7, "fitnessTracking"),  "setFitnessTrackingEnabled:",  BYTE4(v10));
  objc_msgSend( -[CLServiceVendor proxyForService:]( +[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"),  "proxyForService:",  @"CLActivityLogger"),  "logData:",  v7);
  objc_autoreleasePoolPop(v6);
}

uint64_t sub_10082D9D0()
{
  if (qword_101998D90 != -1) {
    dispatch_once(&qword_101998D90, &stru_101859C88);
  }
  if (!qword_101998D98 || !off_10198D570[0]()) {
    return 2LL;
  }
  BOOL v3 = 0;
  sub_1002F1454((uint64_t)v2, @"com.apple.nanolifestyle", 1, (uint64_t)@"mobile");
  uint64_t v0 = (const char *)[(id)off_10198D570[0]() UTF8String];
  sub_1002A6F64((uint64_t)v2, v0, &v3);
  sub_1002F14C8(v2);
  if (v3) {
    return 1LL;
  }
  else {
    return 2LL;
  }
}

void sub_10082DA98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10082DAAC(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10082DAD8(id a1)
{
  qword_101998D80 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
}

uint64_t sub_10082DB00()
{
  if (qword_101998D78 != -1) {
    dispatch_once(&qword_101998D78, &stru_101859C68);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_101998D80, "kNotificationActivationStateChanged");
  if (v0)
  {
    uint64_t result = *v0;
    qword_101998D88 = result;
  }

  else
  {
    uint64_t result = qword_101998D88;
  }

  off_10198D560[0] = sub_10082DB78;
  return result;
}

uint64_t sub_10082DB78()
{
  return qword_101998D88;
}

uint64_t sub_10082DB84(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 32);
  uint64_t result = (*(uint64_t (**)(_BYTE *))(*(void *)v1 + 208LL))(v1);
  if (v1[121] != (_DWORD)result)
  {
    v1[121] = result;
    return (*(uint64_t (**)(_BYTE *))(*(void *)v1 + 224LL))(v1);
  }

  return result;
}

void sub_10082DBD8(id a1)
{
  qword_101998D98 = (uint64_t)dlopen("/System/Library/Frameworks/HealthKit.framework/HealthKit", 2);
}

uint64_t sub_10082DC00()
{
  if (qword_101998D90 != -1) {
    dispatch_once(&qword_101998D90, &stru_101859C88);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_101998D98, "HKStandalonePhoneFitnessModeDidUpdateNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_101998DA0 = result;
  }

  else
  {
    uint64_t result = qword_101998DA0;
  }

  off_10198D568[0] = sub_10082DC78;
  return result;
}

uint64_t sub_10082DC78()
{
  return qword_101998DA0;
}

uint64_t sub_10082DC84(uint64_t a1)
{
  return sub_10082C958(*(_DWORD **)(a1 + 32));
}

void sub_10082DC8C(id a1)
{
  qword_101934728 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fitness");
}

uint64_t sub_10082DCB8()
{
  if (qword_101998D78 != -1) {
    dispatch_once(&qword_101998D78, &stru_101859C68);
  }
  off_10198D578 = (uint64_t (*)())dlsym((void *)qword_101998D80, "MAGetActivationState");
  return off_10198D578();
}

uint64_t sub_10082DD0C()
{
  if (qword_101998D90 != -1) {
    dispatch_once(&qword_101998D90, &stru_101859C88);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_101998D98, "HKIsStandalonePhoneFitnessModeDefaultsKey");
  if (v0)
  {
    uint64_t result = *v0;
    qword_101998DA8 = result;
  }

  else
  {
    uint64_t result = qword_101998DA8;
  }

  off_10198D570[0] = sub_10082DD84;
  return result;
}

uint64_t sub_10082DD84()
{
  return qword_101998DA8;
}

void sub_10082DD90(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10082DDBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned __int8 v6 = operator new(0x48uLL);
  uint64_t result = sub_10082DE18((uint64_t)v6, a2, a1);
  *a3 = v6;
  return result;
}

void sub_10082DE04(_Unwind_Exception *a1)
{
}

uint64_t sub_10082DE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_101859CF8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0x40D5180000000000LL;
  BOOL v4 = (double *)(a1 + 24);
  *(_OWORD *)(a1 + 32) = 0u;
  int v5 = (uint64_t *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0LL;
  sub_1002F0B04(buf);
  sub_1002A82BC(*(uint64_t *)buf, "CleanupInterval", v4);
  unsigned __int8 v6 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v7 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  objc_opt_class(&OBJC_CLASS___SSDevice);
  if (v9)
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver( LocalCenter,  *(const void **)(a1 + 8),  (CFNotificationCallback)sub_10082E4C8,  SSDeviceStoreFrontChangedNotification,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  }

  sub_100583844((uint64_t)sub_10082E6E8, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v11 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    uint64_t v13 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    }
  }

  [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:4 registrationInfo:0];
  memset(&v34, 0, sizeof(v34));
  std::string::operator=(&v34, (const std::string *)&qword_101998DB0);
  [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:0 registrationInfo:sub_10120E548((uint64_t)&v34)];
  [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:6 registrationInfo:sub_10120E548((uint64_t)&v34)];
  sub_100ACD980((uint64_t)sub_10082E8D0, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v14 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v15 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    uint64_t v16 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }
  }

  [*(id *)(*(void *)(a1 + 56) + 16) register:*(void *)(*(void *)(a1 + 56) + 8) forNotification:0 registrationInfo:0];
  sub_100C6E054((uint64_t)sub_10082EAB8, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v17 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v18 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    uint64_t v19 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
    }
  }

  [*(id *)(*(void *)(a1 + 64) + 16) register:*(void *)(*(void *)(a1 + 64) + 8) forNotification:5 registrationInfo:0];
  sub_1003CC884((uint64_t)sub_10082ECA0, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v20 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v21 = *v5;
  *int v5 = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
    uint64_t v22 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
    }
  }

  [*(id *)(*v5 + 16) register:*(void *)(*v5 + 8) forNotification:6 registrationInfo:0];
  sub_10043AC3C((uint64_t)sub_10082EE88, *(void *)(a1 + 8), *(void **)(a1 + 16), buf);
  uint64_t v23 = *(void *)buf;
  *(void *)std::string buf = 0LL;
  uint64_t v24 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v23;
  if (v24)
  {
    (*(void (**)(uint64_t))(*(void *)v24 + 8LL))(v24);
    uint64_t v25 = *(void *)buf;
    *(void *)std::string buf = 0LL;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8LL))(v25);
    }
  }

  [*(id *)(*(void *)(a1 + 40) + 16) register:*(void *)(*(void *)(a1 + 40) + 8) forNotification:5 registrationInfo:0];
  xpc_object_t v26 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_BOOL(v26, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_BOOL(v26, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_string(v26, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_int64(v26, XPC_ACTIVITY_DELAY, (uint64_t)*v4);
  xpc_dictionary_set_int64(v26, XPC_ACTIVITY_GRACE_PERIOD, 3600LL);
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101859D88);
  }
  char v27 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    double v28 = *v4;
    *(_DWORD *)std::string buf = 134349312;
    *(double *)&uint8_t buf[4] = v28;
    *(_WORD *)&_BYTE buf[12] = 2050;
    *(void *)&buf[14] = 0x40AC200000000000LL;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "TileMgr,registering timeout,delay,%{public}.1f,gracePeriod,%{public}.1f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101859D88);
    }
    double v30 = *v4;
    int v35 = 134349312;
    double v36 = v30;
    __int16 v37 = 2050;
    uint64_t v38 = 0x40AC200000000000LL;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "TileMgr,registering timeout,delay,%{public}.1f,gracePeriod,%{public}.1f",  &v35,  22);
    char v32 = (char *)v31;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTilesManagerExternal::CLTilesManagerExternal(CLTilesManager *, id<CLIntersiloUniverse>)",  "%s\n",  v31);
    if (v32 != buf) {
      free(v32);
    }
  }

  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_10082F070;
  handler[3] = &unk_10184DDE0;
  handler[4] = a1;
  xpc_activity_register("com.apple.locationd.CLTilesManagerExternal", v26, handler);
  xpc_release(v26);
  return a1;
}

void sub_10082E3E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  uint64_t v29 = v26[8];
  v26[8] = 0LL;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }
  uint64_t v30 = v26[7];
  v26[7] = 0LL;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
  }
  uint64_t v31 = v26[6];
  v26[6] = 0LL;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
  }
  uint64_t v32 = v26[5];
  v26[5] = 0LL;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
  }
  uint64_t v33 = *v27;
  *char v27 = 0LL;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8LL))(v33);
  }
  _Unwind_Resume(exception_object);
}

void sub_10082E4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101859D68);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTilesManager::onStoreFrontDidChangeNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101859D68);
    }
    uint64_t v11 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTilesManager::onStoreFrontDidChangeNotification, event:%{public, location:escape_ only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v15 = 0;
  }

  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _DWORD v13[2] = sub_10082F8E8;
  v13[3] = &unk_10182D1B8;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10082E6C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10082E6E8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101859D68);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTilesManager::onClientNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101859D68);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTilesManager::onClientNotification, event:%{public, location:escape_only}s, thi s:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100C27780(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10082E8B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10082E8D0(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101859D68);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTilesManager::onDataProtectionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101859D68);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTilesManager::onDataProtectionNotification, event:%{public, location:escape_only} s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100C23038(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10082EA98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10082EAB8(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101859D68);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTilesManager::onCompanionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101859D68);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTilesManager::onCompanionNotification, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100C27568(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10082EC80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10082ECA0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101859D68);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTilesManager::onStatusNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101859D68);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTilesManager::onStatusNotification, event:%{public, location:escape_only}s, thi s:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100C33154(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10082EE68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10082EE88(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_101859D68);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLTilesManager::onLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_101859D68);
    }
    uint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLTilesManager::onLocationNotification, event:%{public, location:escape_only}s, t his:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100C326A0(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10082F050( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10082F070(uint64_t a1, xpc_activity_t activity)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101859D88);
    }
    BOOL v4 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "TileMgr,timer handler triggered", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101859D88);
      }
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "TileMgr,timer handler triggered",  v13,  2);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTilesManagerExternal::CLTilesManagerExternal(CLTilesManager *, id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }

    int v5 = (dispatch_queue_s *)objc_msgSend(objc_msgSend(*(id *)(v2 + 16), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10082F39C;
    block[3] = &unk_10181D3D0;
    block[4] = v2;
    dispatch_async(v5, block);
  }

  else
  {
    int v6 = state;
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101859D88);
    }
    uint64_t v7 = (os_log_s *)qword_101934858;
    if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67240192;
      int v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "TileMgr,timer handler triggered with unexpected state %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934850 != -1) {
        dispatch_once(&qword_101934850, &stru_101859D88);
      }
      v13[0] = 67240192;
      v13[1] = v6;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "TileMgr,timer handler triggered with unexpected state %{public}d",  v13,  8);
      char v11 = (uint8_t *)v10;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLTilesManagerExternal::CLTilesManagerExternal(CLTilesManager *, id<CLIntersiloUniverse>)_block_invoke",  "%s\n",  v10);
      if (v11 != buf) {
        free(v11);
      }
    }
  }

id sub_10082F39C(uint64_t a1)
{
  return sub_10082F3A4(*(void *)(a1 + 32));
}

id sub_10082F3A4(uint64_t a1)
{
  if (qword_101934850 != -1) {
    dispatch_once(&qword_101934850, &stru_101859D88);
  }
  uint64_t v2 = (os_log_s *)qword_101934858;
  if (os_log_type_enabled((os_log_t)qword_101934858, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "TileMgr,CLTilesManagerExternal onCleanupAgedTiles triggered",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934850 != -1) {
      dispatch_once(&qword_101934850, &stru_101859D88);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934858,  0LL,  "TileMgr,CLTilesManagerExternal onCleanupAgedTiles triggered",  v6,  2);
    int v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLTilesManagerExternal::onCleanupAgedTiles()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return sub_100C263DC(*(void *)(a1 + 8));
}

uint64_t sub_10082F53C(uint64_t a1)
{
  *(void *)a1 = off_101859CF8;
  objc_opt_class(&OBJC_CLASS___SSDevice);
  if (v2)
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver( LocalCenter,  *(const void **)(a1 + 8),  SSDeviceStoreFrontChangedNotification,  0LL);
  }

  if (qword_101934880 != -1) {
    dispatch_once(&qword_101934880, &stru_101859DA8);
  }
  BOOL v4 = (os_log_s *)qword_101934888;
  if (os_log_type_enabled((os_log_t)qword_101934888, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "TileMgr,unregistering xpc activity", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934880 != -1) {
      dispatch_once(&qword_101934880, &stru_101859DA8);
    }
    v13[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934888,  0LL,  "TileMgr,unregistering xpc activity",  v13,  2);
    id v12 = (uint8_t *)v11;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual CLTilesManagerExternal::~CLTilesManagerExternal()", "%s\n", v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  xpc_activity_unregister("com.apple.locationd.CLTilesManagerExternal");
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0LL;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  return a1;
}

void sub_10082F78C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_10082F79C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10082F53C(a1);
  operator delete(v1);
}

void sub_10082F7B0()
{
  *(void *)&double v0 = objc_opt_class(&OBJC_CLASS___SSDevice).n128_u64[0];
  if (v1) {
    _objc_msgSend( objc_msgSend( +[SSDevice currentDevice](SSDevice, "currentDevice", v0),  "storeFrontIdentifierPromise"),  "resultWithTimeout:error:",  0,  5.0);
  }
}

BOOL sub_10082F7F8(uint64_t a1)
{
  return objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 16), "vendor"),  "proxyForService:",  @"CLDataProtectionManager"),  "syncgetDataAvailability") != 1;
}

id sub_10082F828(uint64_t a1)
{
  return _objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 16), "vendor"),  "proxyForService:",  @"CLNetworkLocationProvider"),  "syncgetIsBroadConnection");
}

id sub_10082F84C(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "isServiceEnabled:", @"CLSuggestedActionManager");
}

BOOL sub_10082F86C()
{
  return sub_1002958AC() == 1;
}

id sub_10082F88C(uint64_t a1)
{
  id v1 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", @"CLClientManager");
  if (byte_101998DC7 >= 0) {
    uint64_t v2 = &qword_101998DB0;
  }
  else {
    uint64_t v2 = (uint64_t *)qword_101998DB0;
  }
  return objc_msgSend( v1,  "resetNotificationConsumedForIdentifier:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
}

uint64_t sub_10082F8E8(void *a1)
{
  return sub_100C34BCC(a1[4], a1[5], a1[6], a1[7], a1[8]);
}

void sub_10082F8FC(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10082F928(id a1)
{
  qword_101934858 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10082F954(id a1)
{
  qword_101934888 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10082F980()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_101338E4C;
      v1[3] = unk_101338E5C;
      v1[4] = xmmword_101338E6C;
      v1[0] = xmmword_101338E2C;
      v1[1] = unk_101338E3C;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_10082FA54(_Unwind_Exception *a1)
{
}

void sub_10082FA6C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936068))
    {
      qword_101936050 = 0LL;
      *(void *)algn_101936058 = 0LL;
      qword_101936060 = 0LL;
      __cxa_atexit((void (*)(void *))sub_1001BA3E4, &qword_101936050, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936068);
    }
  }

void sub_10082FAD0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936118))
    {
      std::__shared_mutex_base::__shared_mutex_base(&stru_101936070);
      __cxa_atexit((void (*)(void *))sub_1001BA414, &stru_101936070, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936118);
    }
  }

void sub_10082FB44(_Unwind_Exception *a1)
{
}

uint64_t sub_10082FB5C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_101998DB0, (void *)&_mh_execute_header);
}

void sub_10082FBA0(uint64_t a1)
{
  if (a1) {
    sub_10082FC10(a1 - 8);
  }
  else {
    sub_10082FC10(0LL);
  }
}

void sub_10082FBB0(uint64_t a1)
{
  if (a1) {
    sub_100830C74(a1 - 8);
  }
  else {
    sub_100830C74(0LL);
  }
}

void sub_10082FBC0(uint64_t a1)
{
  if (a1) {
    sub_100830C74(a1 - 8);
  }
  else {
    sub_100830C74(0LL);
  }
}

void sub_10082FBD0(uint64_t a1)
{
  if (a1) {
    sub_100830A00(a1 - 8);
  }
  else {
    sub_100830A00(0LL);
  }
}

void sub_10082FBE0(uint64_t a1)
{
  if (a1) {
    sub_100830CA8(a1 - 8);
  }
  else {
    sub_100830CA8(0LL);
  }
}

void sub_10082FBF0(uint64_t a1)
{
  if (a1) {
    sub_100830E3C(a1 - 8);
  }
  else {
    sub_100830E3C(0LL);
  }
}

void sub_10082FC00(uint64_t a1)
{
  if (a1) {
    sub_10082FEAC(a1 - 8);
  }
  else {
    sub_10082FEAC(0LL);
  }
}

void sub_10082FC10(uint64_t a1)
{
  if (qword_101934660 != -1) {
    dispatch_once(&qword_101934660, &stru_101859F20);
  }
  uint64_t v2 = (os_log_s *)qword_101934668;
  if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Session started", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "Session started",  v5,  2);
    BOOL v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::doStartSession(const EStartOfWorkout *)", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

  sub_10082FDB4(a1);
  *(CFAbsoluteTime *)(a1 + 112) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 128) = 0;
}

void sub_10082FDB4(uint64_t a1)
{
  uint64_t v2 = operator new(0x180uLL);
  sub_100F7207C(v2, "SkiElevation", 0LL, 10.0, 6.0, 30.0);
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v2;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  BOOL v4 = (char *)operator new(0x80uLL);
  uint64_t v5 = strdup("SkiOdometer");
  *((void *)v4 + 2) = 0x4018000000000000LL;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)BOOL v4 = off_101859F50;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 9) = 0x7FEFFFFFFFFFFFFFLL;
  v4[80] = 0;
  *(_OWORD *)(v4 + 88) = xmmword_101338EC0;
  *(_OWORD *)(v4 + 104) = xmmword_101338ED0;
  *((_WORD *)v4 + 60) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v4;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  sub_100F452CC(a1 + 504, 1);
}

void sub_10082FE98(_Unwind_Exception *a1)
{
}

void sub_10082FEAC(uint64_t a1)
{
  if (qword_101934660 != -1) {
    dispatch_once(&qword_101934660, &stru_101859F20);
  }
  id v1 = (os_log_s *)qword_101934668;
  if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Session ended", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    v4[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "Session ended",  v4,  2);
    uint64_t v3 = (uint8_t *)v2;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::doEndSession(const EEndOfWorkout *)", "%s\n", v2);
    if (v3 != buf) {
      free(v3);
    }
  }

void sub_100830034(uint64_t a1)
{
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  if (*(double *)(a1 + 1520) == 2.22507386e-308)
  {
    sub_100831224(a1);
    return;
  }

  if (qword_101934660 != -1) {
    dispatch_once(&qword_101934660, &stru_101859F20);
  }
  uint64_t v2 = (os_log_s *)qword_101934668;
  if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Run stopped", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    LOWORD(v77) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "Run stopped",  &v77,  2);
    __int16 v37 = (uint8_t *)v36;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::finalizeRun()", "%s\n", v36);
    if (v37 != buf) {
      free(v37);
    }
  }

  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    uint64_t v3 = *(void **)(a1 + 40);
  }

  __int128 v77 = 0u;
  __int128 v78 = 0u;
  memset(v66, 0, sizeof(v66));
  if (sub_10083136C(v3, (uint64_t)&v77, v66, *(double *)(a1 + 104)))
  {
    uint64_t v4 = *((void *)&v78 + 1);
    if (*((void *)&v78 + 1) == *(void *)v78) {
      uint64_t v4 = *(void *)(v78 - 8) + 4096LL;
    }
    __int128 v5 = *(_OWORD *)(v4 - 64);
    __int128 v6 = *(_OWORD *)(v4 - 48);
    __int128 v7 = *(_OWORD *)(v4 - 16);
    __int128 v64 = *(_OWORD *)(v4 - 32);
    __int128 v65 = v7;
    __int128 v62 = v5;
    __int128 v63 = v6;
  }

  else
  {
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    uint64_t v8 = (os_log_s *)qword_101934668;
    if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "last elevation entry not found", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934660 != -1) {
        dispatch_once(&qword_101934660, &stru_101859F20);
      }
      LOWORD(v48) = 0;
      LODWORD(v47) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  2LL,  "last elevation entry not found",  &v48,  *(void *)&v47);
      unint64_t v44 = (uint8_t *)v43;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::finalizeRun()", "%s\n", v43);
      if (v44 != buf) {
        free(v44);
      }
    }
  }

void sub_100830A00(uint64_t a1)
{
  if (*(double *)(a1 + 1520) == 2.22507386e-308)
  {
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    uint64_t v2 = (os_log_s *)qword_101934668;
    if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Run started", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934660 != -1) {
        dispatch_once(&qword_101934660, &stru_101859F20);
      }
      v12[0] = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "Run started",  v12,  2);
      __int128 v11 = (uint8_t *)v10;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::doRun(const EInRun *)", "%s\n", v10);
      if (v11 != buf) {
        free(v11);
      }
    }

    *(void *)(a1 + 1520) = *(void *)(a1 + 120);
  }

  if (*(double *)(a1 + 256) == 2.22507386e-308)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v3 + 24LL))(v3, a1 + 248, *(double *)(a1 + 120));
    }
  }

  if (*(double *)(a1 + 312) == 2.22507386e-308)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v4 + 24LL))(v4, a1 + 312, *(double *)(a1 + 120));
    }
  }

  int v5 = (*(uint64_t (**)(void, uint8_t *, double))(**(void **)(a1 + 48) + 24LL))( *(void *)(a1 + 48),  buf,  *(double *)(a1 + 120));
  double v6 = v14;
  if (v5) {
    BOOL v7 = v14 == -1.0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    double v8 = v15;
    double v9 = *(double *)(a1 + 1536);
    if (v15 > v9)
    {
      sub_100F45BE4(a1 + 504, v15);
      double v6 = v14;
      double v8 = v15;
      double v9 = *(double *)(a1 + 1536);
    }

    *(double *)(a1 + 1528) = v6;
    if (v8 < v9) {
      double v8 = v9;
    }
    *(double *)(a1 + 1536) = v8;
  }

void sub_100830C74(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 112) = Current;
  *(CFAbsoluteTime *)(a1 + 120) = Current;
  *(_DWORD *)(a1 + 128) = 0;
}

void sub_100830CA8(uint64_t a1)
{
  *(_DWORD *)(a1 + 128) = 3;
  if (qword_101934660 != -1) {
    dispatch_once(&qword_101934660, &stru_101859F20);
  }
  uint64_t v2 = (os_log_s *)qword_101934668;
  if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "transitioning to low power mode: start of lift",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "transitioning to low power mode: start of lift",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::doLowPower(const ELift *)", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

void sub_100830E3C(uint64_t a1)
{
  *(_DWORD *)(a1 + 128) = 4;
  if (qword_101934660 != -1) {
    dispatch_once(&qword_101934660, &stru_101859F20);
  }
  uint64_t v2 = (os_log_s *)qword_101934668;
  if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "transitioning to low power mode: sedentary",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    v5[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "transitioning to low power mode: sedentary",  v5,  2);
    uint64_t v4 = (uint8_t *)v3;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::doLowPower(const ESedentaryTimeout *)", "%s\n", v3);
    if (v4 != buf) {
      free(v4);
    }
  }

uint64_t sub_100830FD0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = &unk_101859DC8;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 10LL;
  *(_WORD *)(a1 + 24) = 512;
  *(void *)a1 = off_101859EC8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  int64x2_t v5 = vdupq_n_s64(0x10000000000000uLL);
  *(int64x2_t *)(a1 + 104) = v5;
  *(void *)(a1 + 120) = 0x10000000000000LL;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 192) = 0x10000000000000LL;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 256) = 0x10000000000000LL;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(void *)(a1 + 496) = 0LL;
  *(void *)(a1 + 312) = 0x10000000000000LL;
  *(_OWORD *)(a1 + 168) = 0u;
  sub_100F43534(a1 + 504);
  *(int64x2_t *)(a1 + 1520) = v5;
  *(void *)(a1 + 1536) = 0x10000000000000LL;
  sub_100CCCC8C(v3, 1, (uint64_t)&v6);
  return a1;
}

void sub_1008310F8(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *v4;
  *uint64_t v4 = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  _Unwind_Resume(a1);
}

void *sub_10083114C(void *a1)
{
  *a1 = off_101859EC8;
  sub_100CCCC8C((uint64_t)(a1 + 1), 2, (uint64_t)&v5);
  sub_100210578(a1 + 17);
  sub_100210578(a1 + 7);
  uint64_t v2 = a1[6];
  a1[6] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = a1[5];
  a1[5] = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return a1;
}

void sub_1008311D4(void *a1)
{
  uint64_t v1 = sub_10083114C(a1);
  operator delete(v1);
}

uint64_t sub_1008311E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    sub_100253308(v2);
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return sub_100253308(result);
  }
  return result;
}

int64x2_t sub_100831224(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 96) = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 72);
      uint64_t v2 = (void **)(*(void *)(a1 + 64) + 8LL);
      *(void *)(a1 + 64) = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256LL;
  }

  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 512LL;
  }

  *(void *)(a1 + 88) = v6;
LABEL_8:
  sub_1008314EC(a1);
  uint64_t v7 = *(void ***)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  *(void *)(a1 + 176) = 0LL;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 152);
      uint64_t v7 = (void **)(*(void *)(a1 + 144) + 8LL);
      *(void *)(a1 + 144) = v7;
      unint64_t v9 = v10 - (void)v7;
    }

    while (v9 > 0x10);
  }

  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 256LL;
    goto LABEL_14;
  }

  if (v9 >> 3 == 2)
  {
    uint64_t v11 = 512LL;
LABEL_14:
    *(void *)(a1 + 168) = v11;
  }

  *(_OWORD *)(a1 + 248) = xmmword_101338EE0;
  uint64_t v12 = a1 + 248;
  *(void *)(v12 - 128) = 0x10000000000000LL;
  *(_OWORD *)(v12 - 64) = xmmword_101338EE0;
  *(_OWORD *)(v12 - 48) = 0u;
  *(_OWORD *)(v12 - 32) = 0u;
  *(_OWORD *)(v12 - 16) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(void *)(v12 + 64) = 0x10000000000000LL;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_OWORD *)(v12 + 232) = 0u;
  *(void *)(v12 + 248) = 0LL;
  *(void *)(v12 + 1288) = 0x10000000000000LL;
  int64x2_t result = vdupq_n_s64(0x10000000000000uLL);
  *(int64x2_t *)(v12 + 1272) = result;
  *(int64x2_t *)(v12 - 144) = result;
  *(_DWORD *)(v12 - 120) = 0;
  return result;
}

BOOL sub_10083136C(void *a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)(v4 + 8LL * (a1[7] >> 6));
  if (a1[5] == v4) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = *v5 + ((a1[7] & 0x3FLL) << 6);
  }
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v5;
  a3[3] = v6;
  __int128 v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v7;
  uint64_t v8 = a1[8];
  if (!v8) {
    return 0LL;
  }
  unint64_t v9 = a1[7] + v8;
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = (void *)(v10 + 8 * (v9 >> 6));
  if (*(double *)(*(void *)(v10 + (((v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) + (((v9 - 1) & 0x3F) << 6) + 8) < a4)
  {
    if (v11 == v10) {
      unint64_t v13 = 0LL;
    }
    else {
      unint64_t v13 = *v12 + ((v9 & 0x3F) << 6);
    }
    BOOL result = 0LL;
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v13;
    return result;
  }

  if (v11 == v10) {
    unint64_t v15 = 0LL;
  }
  else {
    unint64_t v15 = *v12 + ((v9 & 0x3F) << 6);
  }
  uint64_t v16 = a3[3];
  if (v15 == v16)
  {
LABEL_22:
    unint64_t v21 = *(void *)(a2 + 24);
    return v21 != v16;
  }

  uint64_t v17 = *v12;
  unint64_t v18 = v15;
  __int128 v19 = v12;
  while (1)
  {
    uint64_t v20 = v18 - v17;
    if (v18 == v17) {
      break;
    }
LABEL_21:
    v18 -= 64LL;
    if (v18 == v16) {
      goto LABEL_22;
    }
  }

  uint64_t v17 = *(v19 - 1);
  if (*(double *)(v17 + 4040) > a4)
  {
    unint64_t v18 = v17 + 4096;
    --v19;
    goto LABEL_21;
  }

void sub_1008314EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_100F452CC(a1 + 504, 0);
}

uint64_t sub_100831540(uint64_t a1)
{
  if (qword_101934660 != -1) {
    dispatch_once(&qword_101934660, &stru_101859F20);
  }
  uint64_t v2 = (os_log_s *)qword_101934668;
  if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "resuming tracking", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    v6[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "resuming tracking",  v6,  2);
    uint64_t v5 = (uint8_t *)v4;
    sub_10029211C("Generic", 1LL, 0, 2LL, "virtual void CLSkiController::resume()", "%s\n", v4);
    if (v5 != buf) {
      free(v5);
    }
  }

  return sub_100CCCC8C(a1 + 8, 6, (uint64_t)buf);
}

uint64_t sub_1008316E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2
    && *(void *)(a1 + 40)
    && (*(unsigned int (**)(uint64_t, double))(*(void *)v2 + 48LL))(v2, *(double *)(a1 + 120)))
  {
    return (*(uint64_t (**)(void, double))(**(void **)(a1 + 40) + 48LL))( *(void *)(a1 + 40),  *(double *)(a1 + 120));
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100831740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + 56);
  *(void *)unint64_t v13 = CFAbsoluteTimeGetCurrent();
  sub_100355FA8(v4, (double *)v13);
  double Current = CFAbsoluteTimeGetCurrent();
  double v6 = Current;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, double))(*(void *)v7 + 40LL))(v7, Current);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, double))(*(void *)v8 + 40LL))(v8, v6);
  }
  uint64_t result = sub_1008311E8(a1);
  if (*(void *)(a1 + 96)
    && (*(void *)(a1 + 120) = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                      + ((*(void *)(a1 + 88) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                                          + 8 * (*(void *)(a1 + 88) & 0x1FFLL)),
        uint64_t result = sub_1008316E0(a1),
        (_DWORD)result))
  {
    char v10 = 0;
    char v11 = 0;
    do
    {
      uint64_t result = sub_100831908(a1);
      if ((result & 1) != 0) {
        break;
      }
      sub_100831CE4(a1, (uint64_t)v13, *(double *)(a1 + 120));
      char v11 = v13[0];
      __int128 v16 = *(_OWORD *)&v13[1];
      v17[0] = *(_OWORD *)v14;
      *(_OWORD *)((char *)v17 + 15) = *(_OWORD *)&v14[15];
      char v10 = v15;
      *(int64x2_t *)(a1 + 88) = vaddq_s64(*(int64x2_t *)(a1 + 88), (int64x2_t)xmmword_1012CE4D0);
      uint64_t result = sub_1002109A4((uint64_t)v4, 1);
      if (!*(void *)(a1 + 96)) {
        break;
      }
      *(void *)(a1 + 120) = *(void *)(*(void *)(*(void *)(a1 + 64)
                                                    + ((*(void *)(a1 + 88) >> 6) & 0x3FFFFFFFFFFFFF8LL))
                                        + 8 * (*(void *)(a1 + 88) & 0x1FFLL));
      uint64_t result = sub_1008316E0(a1);
    }

    while ((_DWORD)result);
  }

  else
  {
    char v10 = 0;
    char v11 = 0;
  }

  *(_DWORD *)a2 = *(_DWORD *)(a1 + 128);
  *(_BYTE *)(a2 + 8) = v11;
  __int128 v12 = v17[0];
  *(_OWORD *)(a2 + 9) = v16;
  *(_OWORD *)(a2 + 25) = v12;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)v17 + 15);
  *(_BYTE *)(a2 + 56) = v10;
  return result;
}

BOOL sub_100831908(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  if (!v2) {
    return 0LL;
  }
  double v3 = *(double *)(*(void *)(*(void *)(a1 + 144)
  if (v3 <= -39.9287987)
  {
    uint64_t v7 = *(void *)(a1 + 120);
    *(void *)(a1 + 104) = v7;
    *(void *)(a1 + 112) = v7;
    sub_100CCCC8C(a1 + 8, 0, (uint64_t)buf);
    return 0LL;
  }

  if (v3 < 39.9287987)
  {
    if (*(double *)(a1 + 120) - *(double *)(a1 + 112) >= 300.0)
    {
      int v4 = *(unsigned __int8 *)(a1 + 24);
      sub_100831DBC((void *)a1);
      sub_100CCCC8C(a1 + 8, 4, (uint64_t)&v14 + 7);
      if (qword_101934660 != -1) {
        dispatch_once(&qword_101934660, &stru_101859F20);
      }
      uint64_t v5 = (os_log_s *)qword_101934668;
      if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(a1 + 24);
        *(_DWORD *)std::string buf = 67109632;
        int v17 = v4;
        __int16 v18 = 1024;
        int v19 = 4;
        __int16 v20 = 1024;
        int v21 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "State from, %d, event, %d, to, %d",  buf,  0x14u);
      }

      if (!sub_1002921D0(115, 2)) {
        return 1LL;
      }
      bzero(buf, 0x65CuLL);
      if (qword_101934660 == -1)
      {
LABEL_23:
        LODWORD(v14) = 20;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  0LL,  "State from, %d, event, %d, to, %d",  &v15,  v14);
        unint64_t v13 = (uint8_t *)v12;
        sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLSkiController::processInputsAndTransition()", "%s\n", v12);
        if (v13 != buf) {
          free(v13);
        }
        return 1LL;
      }

void sub_100831CE4(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if ((*(unsigned int (**)(void, uint64_t *, double))(**(void **)(a1 + 48) + 24LL))( *(void *)(a1 + 48),  v6,  a3))
  {
    sub_100F44F84(a1 + 504, v6);
  }

  sub_100F43E78(a1 + 504, a2);
}

uint64_t sub_100831D78(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  }
  return result;
}

uint64_t sub_100831D90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  }
  return result;
}

void sub_100831DA8(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t sub_100831DBC(void *a1)
{
  uint64_t v2 = a1[18];
  if (a1[19] != v2)
  {
    unint64_t v3 = a1[21];
    int v4 = (void *)(v2 + 8 * (v3 >> 9));
    uint64_t v5 = (double *)(*v4 + 8 * (v3 & 0x1FF));
    uint64_t v6 = *(void *)(v2 + (((a1[22] + v3) >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * ((a1[22] + v3) & 0x1FF);
    while (v5 != (double *)v6)
    {
      sub_10000CF44(&v15, (uint64_t)", ", 2LL);
      std::ostream::operator<<(*v5++);
      if ((double *)((char *)v5 - *v4) == (double *)4096)
      {
        uint64_t v7 = (double *)v4[1];
        ++v4;
        uint64_t v5 = v7;
      }
    }
  }

  if (qword_101934660 != -1) {
    dispatch_once(&qword_101934660, &stru_101859F20);
  }
  uint64_t v8 = (os_log_s *)qword_101934668;
  if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str(&v21, &v16);
    int v9 = (v21.__r_.__value_.__s.__size_ & 0x80u) == 0
       ? &v21
       : (std::stringbuf::string_type *)v21.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ElevationBuffer%s", (uint8_t *)&buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(&v21, 0x65CuLL);
    if (qword_101934660 != -1) {
      dispatch_once(&qword_101934660, &stru_101859F20);
    }
    uint64_t v11 = qword_101934668;
    std::stringbuf::str(&buf, &v16);
    if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::stringbuf::string_type buf = &buf;
    }
    else {
      p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
    }
    int v19 = 136315138;
    __int16 v20 = p_buf;
    _os_log_send_and_compose_impl( 2LL,  0LL,  &v21,  1628LL,  &_mh_execute_header,  v11,  0LL,  "ElevationBuffer%s",  (const char *)&v19);
    uint64_t v14 = v13;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::logElevationRateBuffer()", "%s\n", (const char *)v14);
    if (v14 != &v21) {
      free(v14);
    }
  }

  std::streambuf::~streambuf(&v16);
  return std::ios::~ios(&v17);
}

void sub_1008320C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_1008320EC(uint64_t a1)
{
  if ((*(unsigned int (**)(void, __int128 *, double))(**(void **)(a1 + 40) + 24LL))( *(void *)(a1 + 40),  &v21,  *(double *)(a1 + 120)))
  {
    uint64_t v2 = (_OWORD *)(a1 + 184);
    double v3 = *(double *)(a1 + 192);
    if (v3 == 2.22507386e-308)
    {
      __int128 v4 = v22;
      *uint64_t v2 = v21;
      *(_OWORD *)(a1 + 200) = v4;
      __int128 v5 = v24;
      *(_OWORD *)(a1 + 216) = v23;
      *(_OWORD *)(a1 + 232) = v5;
      return;
    }

    double v6 = *((double *)&v21 + 1) - v3;
    if (v6 <= 6.0)
    {
      if (v6 > 4.0)
      {
        double v20 = ((double)(v22 - *(_DWORD *)(a1 + 200))
        sub_100355FA8((void *)(a1 + 136), &v20);
        __int128 v12 = v22;
        *uint64_t v2 = v21;
        *(_OWORD *)(a1 + 200) = v12;
        __int128 v13 = v24;
        *(_OWORD *)(a1 + 216) = v23;
        *(_OWORD *)(a1 + 232) = v13;
        if (qword_101934660 != -1) {
          dispatch_once(&qword_101934660, &stru_101859F20);
        }
        uint64_t v14 = (os_log_s *)qword_101934668;
        if (os_log_type_enabled((os_log_t)qword_101934668, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::stringbuf::string_type buf = 134217984;
          double v28 = v20;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "adding ElevationRate, %f", buf, 0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934660 != -1) {
            dispatch_once(&qword_101934660, &stru_101859F20);
          }
          int v25 = 134217984;
          double v26 = v20;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934668,  1LL,  "adding ElevationRate, %f",  COERCE_DOUBLE(&v25));
          std::stringbuf v16 = (uint8_t *)v15;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLSkiController::updateElevationRateBuffer()", "%s\n", v15);
          if (v16 != buf) {
            free(v16);
          }
        }
      }

      goto LABEL_23;
    }

    uint64_t v7 = *(void ***)(a1 + 144);
    uint64_t v8 = *(void *)(a1 + 152);
    *(void *)(a1 + 176) = 0LL;
    unint64_t v9 = v8 - (void)v7;
    if (v9 >= 0x11)
    {
      do
      {
        operator delete(*v7);
        uint64_t v10 = *(void *)(a1 + 152);
        uint64_t v7 = (void **)(*(void *)(a1 + 144) + 8LL);
        *(void *)(a1 + 144) = v7;
        unint64_t v9 = v10 - (void)v7;
      }

      while (v9 > 0x10);
    }

    if (v9 >> 3 == 1)
    {
      uint64_t v11 = 256LL;
    }

    else
    {
      if (v9 >> 3 != 2)
      {
LABEL_22:
        __int128 v17 = v22;
        *uint64_t v2 = v21;
        *(_OWORD *)(a1 + 200) = v17;
        __int128 v18 = v24;
        *(_OWORD *)(a1 + 216) = v23;
        *(_OWORD *)(a1 + 232) = v18;
        goto LABEL_23;
      }

      uint64_t v11 = 512LL;
    }

    *(void *)(a1 + 168) = v11;
    goto LABEL_22;
  }

BOOL sub_1008323F0(void *a1)
{
  unint64_t v1 = a1[22];
  if (v1 < 9) {
    return 0LL;
  }
  uint64_t v2 = a1[18];
  if (a1[19] == v2) {
    return 0LL;
  }
  unint64_t v3 = a1[21];
  __int128 v4 = (double **)(v2 + 8 * (v3 >> 9));
  __int128 v5 = *v4;
  double v6 = &(*v4)[v3 & 0x1FF];
  uint64_t v7 = *(void *)(v2 + (((v3 + v1) >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * ((v3 + v1) & 0x1FF);
  unsigned int v8 = 0;
  do
  {
    double v9 = *v6++;
    if (v9 >= 39.9287987) {
      ++v8;
    }
    if ((char *)v6 - (char *)v5 == 4096)
    {
      uint64_t v10 = v4[1];
      ++v4;
      __int128 v5 = v10;
      double v6 = v10;
    }
  }

  while (v6 != (double *)v7);
  return v8 > 4;
}

void sub_100832488(id a1)
{
  qword_101934668 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

uint64_t sub_1008324B4(uint64_t a1)
{
  *(void *)a1 = &off_101859FE8;
  free(*(void **)(a1 + 8));
  sub_10046D318((void *)(a1 + 24));
  return a1;
}

void sub_1008324F4(void **a1)
{
  *a1 = &off_101859FE8;
  free(a1[1]);
  sub_10046D318(a1 + 3);
  operator delete(a1);
}

BOOL sub_100832534(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  unint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = (void *)(v5 + 8 * (v4 / 0x15));
  if (*(void *)(a1 + 40) == v5) {
    unint64_t v7 = 0LL;
  }
  else {
    unint64_t v7 = *v6 + 192 * (v4 % 0x15);
  }
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v7;
  __int128 v8 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v8;
  unint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = (uint64_t *)(v10 + 8 * (v9 / 0x15));
  if (*(void *)(a1 + 40) == v10) {
    unint64_t v12 = 0LL;
  }
  else {
    unint64_t v12 = *v11 + 192 * (v9 % 0x15);
  }
  uint64_t v13 = a3[3];
  if (v12 != v13)
  {
    uint64_t v14 = *v11;
    double v15 = 1.79769313e308;
    unint64_t v16 = v12;
    __int128 v17 = v11;
    while (1)
    {
      uint64_t v18 = v16;
      if (v16 == v14) {
        uint64_t v18 = *(v17 - 1) + 4032;
      }
      double v19 = vabdd_f64(*(double *)(v18 - 192), a4);
      if (v19 < v15 && v19 < *(double *)(a1 + 16))
      {
        *(void *)a2 = v11;
        *(void *)(a2 + 8) = v12;
        *(void *)(a2 + 16) = v17;
        *(void *)(a2 + 24) = v16;
        uint64_t v14 = *v17;
        uint64_t v20 = v16;
        if (v16 == *v17) {
          uint64_t v20 = *(v17 - 1) + 4032;
        }
        double v15 = v19;
      }

      if (v16 == v14)
      {
        uint64_t v21 = *--v17;
        uint64_t v14 = v21;
        unint64_t v16 = v21 + 4032;
      }

      v16 -= 192LL;
      uint64_t v13 = a3[3];
      if (v16 == v13) {
        return v13 != *(void *)(a2 + 24);
      }
    }

    uint64_t v13 = a3[3];
  }

  return v13 != *(void *)(a2 + 24);
}

uint64_t sub_100832690(uint64_t a1, _OWORD *a2)
{
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t result = (*(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(void *)a1 + 16LL))(a1, &v16, &v14);
  if ((_DWORD)result)
  {
    uint64_t v4 = *((void *)&v17 + 1);
    if (*((void *)&v17 + 1) == *((void *)&v15 + 1))
    {
      return 0LL;
    }

    else
    {
      if (*(void *)v17 == *((void *)&v17 + 1)) {
        uint64_t v4 = *(void *)(v17 - 8) + 4032LL;
      }
      __int128 v5 = *(_OWORD *)(v4 - 192);
      __int128 v6 = *(_OWORD *)(v4 - 176);
      __int128 v7 = *(_OWORD *)(v4 - 144);
      a2[2] = *(_OWORD *)(v4 - 160);
      a2[3] = v7;
      *a2 = v5;
      a2[1] = v6;
      __int128 v8 = *(_OWORD *)(v4 - 128);
      __int128 v9 = *(_OWORD *)(v4 - 112);
      __int128 v10 = *(_OWORD *)(v4 - 80);
      a2[6] = *(_OWORD *)(v4 - 96);
      a2[7] = v10;
      a2[4] = v8;
      a2[5] = v9;
      __int128 v11 = *(_OWORD *)(v4 - 64);
      __int128 v12 = *(_OWORD *)(v4 - 48);
      __int128 v13 = *(_OWORD *)(v4 - 16);
      a2[10] = *(_OWORD *)(v4 - 32);
      a2[11] = v13;
      a2[8] = v11;
      a2[9] = v12;
      return 1LL;
    }
  }

  return result;
}

unint64_t sub_100832754(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 104);
  *(double *)(a1 + 104) = a2;
  BOOL v5 = a2 > 0.0;
  if (v4 <= a2) {
    BOOL v5 = 0;
  }
  *(_BYTE *)(a1 + 120) = v5;
  if (v5)
  {
    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10185A010);
    }
    __int128 v6 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = *(double *)(a1 + 104);
      int v8 = *(unsigned __int8 *)(a1 + 121);
      *(_DWORD *)std::stringbuf::string_type buf = 134218752;
      double v34 = v7 - v4;
      __int16 v35 = 2048;
      double v36 = v4;
      __int16 v37 = 2048;
      double v38 = v7;
      __int16 v39 = 1024;
      int v40 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.",  buf,  0x26u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10185A010);
      }
      double v20 = *(double *)(a1 + 104);
      int v21 = *(unsigned __int8 *)(a1 + 121);
      int v25 = 134218752;
      double v26 = v20 - v4;
      __int16 v27 = 2048;
      double v28 = v4;
      __int16 v29 = 2048;
      double v30 = v20;
      __int16 v31 = 1024;
      int v32 = v21;
      LODWORD(v24) = 38;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  0LL,  "#Warning Input, time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.",  COERCE_DOUBLE(&v25),  v24);
      __int128 v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLNatalieInput<CLOdometerEntry>::update(CFAbsoluteTime) [Data_T = CLOdometerEntry]",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }
  }

  if (*(_BYTE *)(a1 + 80)
    && !*(_BYTE *)(a1 + 121)
    && (*(double *)(a1 + 88) < a2 || *(_BYTE *)(a1 + 120))
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 72LL))(a1))
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0LL;
  }

  unint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  __int128 v12 = (void *)(v10 + 8 * (v9 / 0x15));
  if (v11 == v10) {
    __int128 v13 = 0LL;
  }
  else {
    __int128 v13 = (char *)(*v12 + 192 * (v9 % 0x15));
  }
  __int128 v14 = (void *)(v10 + 8 * (v9 / 0x15));
LABEL_15:
  __int128 v15 = (double *)v13;
  while (1)
  {
    unint64_t v16 = v11 == v10
        ? 0LL
        : *(void *)(v10 + 8 * ((*(void *)(a1 + 64) + v9) / 0x15)) + 192 * ((*(void *)(a1 + 64) + v9) % 0x15);
    v15 += 24;
    v13 += 192;
    if ((char *)(*v14 + 4032LL) == v13)
    {
      __int128 v17 = (char *)v14[1];
      ++v14;
      __int128 v13 = v17;
      goto LABEL_15;
    }
  }

  if (v11 == v10) {
    uint64_t v18 = 0LL;
  }
  else {
    uint64_t v18 = (char *)(*v12 + 192 * (v9 % 0x15));
  }
  return sub_10079BA14((void *)(a1 + 24), v12, v18, v14, v13);
}

BOOL sub_100832AC8(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
  else
  }
    double v5 = -1.79769313e308;
  if (v5 >= a2)
  {
    __int128 v6 = (_BYTE *)(a1 + 80);
    goto LABEL_11;
  }

  __int128 v6 = (_BYTE *)(a1 + 80);
  if (*(_BYTE *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
    }

double sub_100832C0C(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

void sub_100832C14(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

const char *sub_100832C40(unsigned int a1)
{
  if (a1 <= 0xD) {
    return (&off_10185A030)[a1];
  }
  else {
    return "<error>";
  }
}

uint64_t sub_100832C64@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_10000CF44(&v25, (uint64_t)", type, ", 8LL);
  double v5 = (void *)std::ostream::operator<<(v4, *(unsigned int *)(a1 + 96));
  __int128 v6 = sub_10000CF44(v5, (uint64_t)", ", 2LL);
  uint64_t v7 = *(unsigned int *)(a1 + 96);
  else {
    double v8 = "<error>";
  }
  size_t v9 = strlen(v8);
  sub_10000CF44(v6, (uint64_t)v8, v9);
  uint64_t v10 = sub_10000CF44(&v25, (uint64_t)", latitude, ", 12LL);
  uint64_t v11 = *v10;
  *(uint64_t *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 12LL;
  *(uint64_t *)((char *)v10 + *(void *)(v11 - 24) + 16) = 8LL;
  *(_DWORD *)((char *)v10 + *(void *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(void *)(v11 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 4));
  __int128 v12 = sub_10000CF44(&v25, (uint64_t)", longitude, ", 13LL);
  uint64_t v13 = *v12;
  *(uint64_t *)((char *)v12 + *(void *)(*v12 - 24) + 24) = 12LL;
  *(uint64_t *)((char *)v12 + *(void *)(v13 - 24) + 16) = 8LL;
  *(_DWORD *)((char *)v12 + *(void *)(v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(void *)(v13 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 12));
  sub_10000CF44(&v25, (uint64_t)", altitude, ", 12LL);
  uint64_t v14 = v24[0];
  *(void *)((char *)&v24[2] + *(void *)(v24[0] - 24LL)) = 2LL;
  *(_DWORD *)((char *)&v24[1] + *(void *)(v14 - 24)) |= 4u;
  std::ostream::operator<<(*(double *)(a1 + 28));
  sub_10000CF44(&v25, (uint64_t)", hAcc, ", 8LL);
  uint64_t v15 = v24[0];
  *(void *)((char *)&v24[2] + *(void *)(v24[0] - 24LL)) = 2LL;
  *(_DWORD *)((char *)&v24[1] + *(void *)(v15 - 24)) |= 4u;
  std::ostream::operator<<(*(double *)(a1 + 20));
  sub_10000CF44(&v25, (uint64_t)", vAcc, ", 8LL);
  uint64_t v16 = v24[0];
  *(void *)((char *)&v24[2] + *(void *)(v24[0] - 24LL)) = 2LL;
  *(_DWORD *)((char *)&v24[1] + *(void *)(v16 - 24)) |= 4u;
  std::ostream::operator<<(*(double *)(a1 + 36));
  sub_10000CF44(&v25, (uint64_t)", course, ", 10LL);
  uint64_t v17 = v24[0];
  *(void *)((char *)&v24[2] + *(void *)(v24[0] - 24LL)) = 2LL;
  *(_DWORD *)((char *)&v24[1] + *(void *)(v17 - 24)) |= 4u;
  std::ostream::operator<<(*(double *)(a1 + 60));
  sub_10000CF44(&v25, (uint64_t)", speed, ", 9LL);
  uint64_t v18 = v24[0];
  *(void *)((char *)&v24[2] + *(void *)(v24[0] - 24LL)) = 2LL;
  *(_DWORD *)((char *)&v24[1] + *(void *)(v18 - 24)) |= 4u;
  std::ostream::operator<<(*(double *)(a1 + 44));
  sub_10000CF44(&v25, (uint64_t)", timstamp, ", 12LL);
  uint64_t v19 = v24[0];
  *(void *)((char *)&v24[2] + *(void *)(v24[0] - 24LL)) = 2LL;
  *(_DWORD *)((char *)&v24[1] + *(void *)(v19 - 24)) |= 4u;
  std::ostream::operator<<(*(double *)(a1 + 76));
  sub_10000CF44(&v25, (uint64_t)", lifespan, ", 12LL);
  uint64_t v20 = v24[0];
  *(void *)((char *)&v24[2] + *(void *)(v24[0] - 24LL)) = 2LL;
  *(_DWORD *)((char *)&v24[1] + *(void *)(v20 - 24)) |= 4u;
  std::ostream::operator<<(*(double *)(a1 + 88));
  sub_10000CF44(&v25, (uint64_t)", confidence, ", 14LL);
  uint64_t v21 = v24[0];
  *(void *)((char *)&v24[2] + *(void *)(v24[0] - 24LL)) = 2LL;
  *(_DWORD *)((char *)&v24[1] + *(void *)(v21 - 24)) |= 4u;
  std::ostream::operator<<(&v25, *(unsigned int *)(a1 + 84));
  std::stringbuf::str(a2, &v26);
  *(void *)((char *)v24
  uint64_t v25 = v22;
  std::streambuf::~streambuf(&v26);
  return std::ios::~ios(&v27);
}

void sub_1008330A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008330C4@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_10000CF44(&v13, (uint64_t)", ll, ", 6LL);
  uint64_t v5 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 - 24) + 24) = 12LL;
  *(uint64_t *)((char *)v4 + *(void *)(v5 - 24) + 16) = 8LL;
  *(_DWORD *)((char *)v4 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(void *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  __int128 v6 = (void *)std::ostream::operator<<(*(double *)(a1 + 4));
  uint64_t v7 = sub_10000CF44(v6, (uint64_t)", ", 2LL);
  uint64_t v8 = *v7;
  *(uint64_t *)((char *)v7 + *(void *)(*v7 - 24) + 24) = 12LL;
  *(uint64_t *)((char *)v7 + *(void *)(v8 - 24) + 16) = 8LL;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(void *)(v8 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 12));
  sub_10000CF44(&v13, (uint64_t)", hAcc, ", 8LL);
  uint64_t v9 = v12[0];
  *(void *)((char *)&v12[2] + *(void *)(v12[0] - 24LL)) = 2LL;
  *(_DWORD *)((char *)&v12[1] + *(void *)(v9 - 24)) |= 4u;
  std::ostream::operator<<(*(double *)(a1 + 20));
  std::stringbuf::str(a2, &v14);
  *(void *)((char *)v12
  uint64_t v13 = v10;
  std::streambuf::~streambuf(&v14);
  return std::ios::~ios(&v15);
}

void sub_100833270(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100833304()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101936138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_101936138))
    {
      uint64_t v2 = 0x7FFFFFFF00000000LL;
      v1[2] = xmmword_101338F34;
      v1[3] = unk_101338F44;
      v1[4] = xmmword_101338F54;
      v1[0] = xmmword_101338F14;
      v1[1] = unk_101338F24;
      sub_1001BB3C4((uint64_t)&unk_101936120, (int *)v1, 11LL);
      __cxa_atexit((void (*)(void *))sub_1001BA444, &unk_101936120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101936138);
    }
  }

void sub_1008333D8(_Unwind_Exception *a1)
{
}

double sub_1008333F0@<D0>(uint64_t a1@<X0>, float *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q0>)
{
  float v4 = *(float *)(a1 + 8);
  a4.i32[0] = *(_DWORD *)(a1 + 12);
  float v5 = a2[1];
  float v6 = *(float *)(a1 + 4);
  float v7 = a2[2];
  float v8 = a2[3];
  float32_t v9 = (float)((float)((float)(v4 * v5) + (float)(a4.f32[0] * *a2)) - (float)(v6 * v7)) + (float)(*(float *)a1 * v8);
  float32_t v10 = (float)((float)((float)(a4.f32[0] * v5) - (float)(v4 * *a2)) + (float)(*(float *)a1 * v7)) + (float)(v6 * v8);
  float32_t v11 = (float)((float)((float)(v6 * *a2) - (float)(*(float *)a1 * v5)) + (float)(a4.f32[0] * v7)) + (float)(v4 * v8);
  float v12 = (float)((float)-(float)(v6 * v5) - (float)(*(float *)a1 * *a2)) - (float)(v4 * v7);
  a3->f32[0] = v9;
  a3->f32[1] = v10;
  a4.f32[0] = v12 + (float)(a4.f32[0] * v8);
  a3->f32[2] = v11;
  a3->i32[3] = a4.i32[0];
  *(void *)&double result = sub_100833700(a3, a4).u64[0];
  return result;
}

double sub_100833450@<D0>(float32x2_t *a1@<X0>, float32x4_t *a2@<X8>, float32x4_t a3@<Q0>)
{
  __int32 v3 = a1[1].i32[1];
  a3.f32[0] = -a1[1].f32[0];
  *(float32x2_t *)a2->f32 = vneg_f32(*a1);
  a2->i32[2] = a3.i32[0];
  a2->i32[3] = v3;
  *(void *)&double result = sub_100833700(a2, a3).u64[0];
  return result;
}

float sub_100833470(float *a1)
{
  uint64_t v1 = 0LL;
  float v2 = a1[2];
  float v3 = a1[3];
  float v4 = a1[1];
  float result = (float)((float)(v3 * v4) - (float)(*a1 * v2)) + (float)((float)(v3 * v4) - (float)(*a1 * v2));
  float v6 = (float)-(float)(v3 * *a1) - (float)(v4 * v2);
  float v7 = (float)((float)((float)(v4 * v4) + (float)(*a1 * *a1)) * 2.0) + -1.0;
  *(float *)float32_t v11 = result;
  *(float *)&v11[1] = v6 + v6;
  *(float *)&_OWORD v11[2] = v7;
  float v8 = 0.0;
  do
  {
    float v8 = v8 + (float)(*(float *)&v11[v1] * *(float *)&v11[v1]);
    ++v1;
  }

  while (v1 != 3);
  if (sqrtf(v8) > 0.00000011921)
  {
    uint64_t v9 = 0LL;
    float v10 = 0.0;
    do
    {
      float v10 = v10 + (float)(*(float *)&v11[v9] * *(float *)&v11[v9]);
      ++v9;
    }

    while (v9 != 3);
    return result / sqrtf(v10);
  }

  return result;
}

float sub_100833520(float *a1)
{
  uint64_t v1 = 0LL;
  float v2 = a1[1];
  float v4 = a1[2];
  float v3 = a1[3];
  float result = (float)((float)((float)(*a1 * *a1) + (float)(v3 * v3)) * 2.0) + -1.0;
  float v6 = (float)((float)(*a1 * v2) - (float)(v3 * v4)) + (float)((float)(*a1 * v2) - (float)(v3 * v4));
  float v7 = (float)((float)(v3 * v2) + (float)(*a1 * v4)) + (float)((float)(v3 * v2) + (float)(*a1 * v4));
  v11[0] = result;
  v11[1] = v6;
  _OWORD v11[2] = v7;
  float v8 = 0.0;
  do
  {
    float v8 = v8 + (float)(v11[v1] * v11[v1]);
    ++v1;
  }

  while (v1 != 3);
  if (sqrtf(v8) > 0.00000011921)
  {
    uint64_t v9 = 0LL;
    float v10 = 0.0;
    do
    {
      float v10 = v10 + (float)(v11[v9] * v11[v9]);
      ++v9;
    }

    while (v9 != 3);
    return result / sqrtf(v10);
  }

  return result;
}

float sub_1008335D0@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return sub_1008346D4(a1, a2, 1.0);
}

void sub_1008335D8(float *a1, uint64_t a2)
{
  *(float *)a2 = sub_1002B8A2C((uint64_t)v5, (float *)a2);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
}

float sub_10083361C@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  return sub_1008346D4(a1, a2, -1.0);
}

float sub_100833624(float *a1, float a2, float a3, float a4)
{
  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  sub_1008346D4(a1, v6, -1.0);
  return sub_1002B8A2C((uint64_t)v6, v5);
}

double sub_10083365C(float32x4_t *a1, float *a2)
{
  uint64_t v4 = 0LL;
  float v5 = 0.0;
  do
  {
    float v5 = v5 + (float)(a2[v4] * a2[v4]);
    ++v4;
  }

  while (v4 != 3);
  float v6 = sqrtf(v5);
  float v7 = 0.5;
  float v8 = v6 * 0.5;
  a1->f32[0] = v7 * *a2;
  a1->f32[1] = v7 * a2[1];
  a1->f32[2] = v7 * a2[2];
  v9.f32[0] = cosf(v8);
  a1->i32[3] = v9.i32[0];
  *(void *)&double result = sub_100833700(a1, v9).u64[0];
  return result;
}

float32x4_t sub_100833700(float32x4_t *a1, float32x4_t result)
{
  result.f32[0] = sqrtf( (float)((float)((float)(a1->f32[1] * a1->f32[1]) + (float)(a1->f32[0] * a1->f32[0]))
  float v2 = result.f32[0] + -1.0;
  if (v2 >= 0.00000011921)
  {
    if (result.f32[0] == 0.0)
    {
      a1->i64[0] = 0LL;
      a1->i64[1] = 0x3F80000000000000LL;
    }

    else
    {
      double result = vdivq_f32(*a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 0));
      *a1 = result;
    }
  }

  return result;
}

BOOL sub_100833764( float *a1, float32x4_t *a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8, float a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, float a18)
{
  float v171 = a4;
  float v172 = a5;
  float v173 = a6;
  float v168 = a7;
  float v169 = a8;
  float v170 = a9;
  unint64_t v166 = a17;
  float v167 = a18;
  unsigned __int8 v19 = atomic_load((unsigned __int8 *)&qword_101998DD0);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_101998DD0))
  {
    dword_101998DC8 = 1043452116;
    __cxa_guard_release(&qword_101998DD0);
  }

  uint64_t v20 = 0LL;
  float v21 = 0.0;
  do
  {
    float v21 = v21 + (float)(*(float *)((char *)&v171 + v20) * *(float *)((char *)&v171 + v20));
    v20 += 4LL;
  }

  while (v20 != 12);
  if (sqrtf(v21) == 0.0) {
    return 0LL;
  }
  uint64_t v22 = 0LL;
  float v23 = 0.0;
  do
  {
    float v23 = v23 + (float)(*(float *)((char *)&v168 + v22) * *(float *)((char *)&v168 + v22));
    v22 += 4LL;
  }

  while (v22 != 12);
  if (sqrtf(v23) == 0.0) {
    return 0LL;
  }
  uint64_t v24 = 0LL;
  float v25 = v171;
  float v26 = v172;
  float v27 = v173;
  *(float *)std::stringbuf::string_type buf = v171;
  *(float *)&uint8_t buf[4] = v172;
  *(float *)&uint8_t buf[8] = v173;
  float v28 = 0.0;
  do
  {
    float v28 = v28 + (float)(*(float *)&buf[v24] * *(float *)&buf[v24]);
    v24 += 4LL;
  }

  while (v24 != 12);
  if (sqrtf(v28) > 0.00000011921)
  {
    uint64_t v29 = 0LL;
    float v30 = 0.0;
    do
    {
      float v30 = v30 + (float)(*(float *)&buf[v29] * *(float *)&buf[v29]);
      v29 += 4LL;
    }

    while (v29 != 12);
    float v31 = sqrtf(v30);
    float v25 = v171 / v31;
    float v26 = v172 / v31;
    float v27 = v173 / v31;
  }

  uint64_t v32 = 0LL;
  float v171 = v25;
  float v172 = v26;
  float v173 = v27;
  float v33 = v168;
  float v34 = v169;
  float v35 = v170;
  *(float *)std::stringbuf::string_type buf = v168;
  *(float *)&uint8_t buf[4] = v169;
  *(float *)&uint8_t buf[8] = v170;
  float v36 = 0.0;
  do
  {
    float v36 = v36 + (float)(*(float *)&buf[v32] * *(float *)&buf[v32]);
    v32 += 4LL;
  }

  while (v32 != 12);
  if (sqrtf(v36) > 0.00000011921)
  {
    uint64_t v37 = 0LL;
    float v38 = 0.0;
    do
    {
      float v38 = v38 + (float)(*(float *)&buf[v37] * *(float *)&buf[v37]);
      v37 += 4LL;
    }

    while (v37 != 12);
    float v39 = sqrtf(v38);
    float v33 = v168 / v39;
    float v34 = v169 / v39;
    float v35 = v170 / v39;
  }

  uint64_t v40 = 0LL;
  float v168 = v33;
  float v169 = v34;
  float v170 = v35;
  float v41 = (float)(v26 * v35) - (float)(v27 * v34);
  float v42 = (float)(v27 * v33) - (float)(v25 * v35);
  float v43 = (float)(v25 * v34) - (float)(v26 * v33);
  float v163 = v41;
  float v164 = v42;
  float v165 = v43;
  float v44 = 0.0;
  do
  {
    float v44 = v44 + (float)(*(float *)((char *)&v163 + v40) * *(float *)((char *)&v163 + v40));
    v40 += 4LL;
  }

  while (v40 != 12);
  float v45 = sqrtf(v44);
  if (v45 < *(float *)&dword_101998DC8)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185A0C0);
    }
    char v46 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134217984;
      *(double *)&uint8_t buf[4] = v45;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "n and g are too close %f", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185A0C0);
      }
      LODWORD(v174) = 134217984;
      *(double *)((char *)&v174 + 4) = v45;
      uint64_t v108 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "n and g are too close %f",  COERCE_DOUBLE(&v174));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const flo at *, CMOQuaternion &, CMMatrix<float, 3> &)",  "%s\n",  v108);
    }

    return 0LL;
  }

  uint64_t v49 = 0LL;
  float v50 = v41 / v45;
  float v51 = v42 / v45;
  float v163 = v41 / v45;
  float v164 = v42 / v45;
  float v52 = v43 / v45;
  float v165 = v43 / v45;
  float v54 = *((float *)&v166 + 1);
  LODWORD(v53) = v166;
  float v55 = v167;
  *(void *)std::stringbuf::string_type buf = v166;
  *(float *)&uint8_t buf[8] = v167;
  float v56 = 0.0;
  do
  {
    float v56 = v56 + (float)(*(float *)&buf[v49] * *(float *)&buf[v49]);
    v49 += 4LL;
  }

  while (v49 != 12);
  if (sqrtf(v56) > 0.00000011921)
  {
    uint64_t v57 = 0LL;
    float v58 = 0.0;
    do
    {
      float v58 = v58 + (float)(*(float *)&buf[v57] * *(float *)&buf[v57]);
      v57 += 4LL;
    }

    while (v57 != 12);
    float v59 = sqrtf(v58);
    float v53 = *(float *)&v166 / v59;
    float v54 = *((float *)&v166 + 1) / v59;
    float v55 = v167 / v59;
  }

  uint64_t v60 = 0LL;
  unint64_t v166 = __PAIR64__(LODWORD(v54), LODWORD(v53));
  float v167 = v55;
  unint64_t v161 = 0LL;
  float v162 = -1.0;
  float v61 = (float)(v55 * -0.0) - v54;
  float v62 = 0.0;
  float v63 = v53 + (float)(v55 * 0.0);
  float v64 = (float)(v54 * -0.0) + (float)(v53 * 0.0);
  *(float *)std::stringbuf::string_type buf = v61;
  *(float *)&uint8_t buf[4] = v63;
  *(float *)&uint8_t buf[8] = v64;
  do
  {
    float v62 = v62 + (float)(*(float *)&buf[v60] * *(float *)&buf[v60]);
    v60 += 4LL;
  }

  while (v60 != 12);
  if (sqrtf(v62) > 0.00000011921)
  {
    uint64_t v65 = 0LL;
    float v66 = 0.0;
    do
    {
      float v66 = v66 + (float)(*(float *)&buf[v65] * *(float *)&buf[v65]);
      v65 += 4LL;
    }

    while (v65 != 12);
    float v67 = sqrtf(v66);
    float v61 = v61 / v67;
    float v63 = v63 / v67;
    float v64 = v64 / v67;
  }

  uint64_t v68 = 0LL;
  *(float *)signed int v160 = v61;
  *(float *)&v160[1] = v63;
  *(float *)&v160[2] = v64;
  float v69 = (float)(v34 * v52) - (float)(v35 * v51);
  float v70 = (float)(v35 * v50) - (float)(v33 * v52);
  float v71 = (float)(v33 * v51) - (float)(v34 * v50);
  *(float *)std::stringbuf::string_type buf = v69;
  *(float *)&uint8_t buf[4] = v70;
  *(float *)&uint8_t buf[8] = v71;
  float v72 = 0.0;
  do
  {
    float v72 = v72 + (float)(*(float *)&buf[v68] * *(float *)&buf[v68]);
    v68 += 4LL;
  }

  while (v68 != 12);
  if (sqrtf(v72) > 0.00000011921)
  {
    uint64_t v73 = 0LL;
    float v74 = 0.0;
    do
    {
      float v74 = v74 + (float)(*(float *)&buf[v73] * *(float *)&buf[v73]);
      v73 += 4LL;
    }

    while (v73 != 12);
    float v75 = sqrtf(v74);
    float v69 = v69 / v75;
    float v70 = v70 / v75;
    float v71 = v71 / v75;
  }

  float v171 = v69;
  float v172 = v70;
  float v173 = v71;
  sub_100834488((uint64_t)&v171, (uint64_t)&v166, (uint64_t)&v174);
  sub_100834488((uint64_t)&v168, (uint64_t)&v161, (uint64_t)&v157);
  sub_100834488((uint64_t)&v163, (uint64_t)v160, (uint64_t)v155);
  float v76 = (float)((float)(a1[1] * a1[1]) + (float)(*a1 * *a1)) + (float)((float)(*a1 + *a1) * a1[1]);
  if (v76 == 0.0)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185A0C0);
    }
    unint64_t v109 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_FAULT,  "Assertion failed: lambda2 != 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMOQuaternion .cpp, line 208,invalid weights.",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185A0C0);
      }
      LOWORD(v153[0]) = 0;
      unsigned int v110 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Assertion failed: lambda2 != 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Mat h/CMOQuaternion.cpp, line 208,invalid weights.",  v153,  2);
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const flo at *, CMOQuaternion &, CMMatrix<float, 3> &)",  "%s\n",  v110);
    }
  }

  v153[0] = v155[0];
  v153[1] = v155[1];
  int v154 = v156;
  float v77 = *a1;
  __int128 v147 = v174;
  __int128 v148 = v175;
  int v149 = v176;
  int v135 = 0;
  float v78 = sqrtf(v76);
  float v136 = v173;
  float v137 = -v172;
  float v138 = -v173;
  int v139 = 0;
  float v140 = v171;
  float v141 = v172;
  float v142 = -v171;
  int v143 = 0;
  sub_100809A4C((uint64_t)&v135, (uint64_t)v155, (uint64_t)v144);
  int v127 = 0;
  float v128 = v167;
  float v129 = -*((float *)&v166 + 1);
  float v130 = -v167;
  int v131 = 0;
  unint64_t v132 = v166;
  float v133 = -*(float *)&v166;
  int v134 = 0;
  sub_100809A4C((uint64_t)v144, (uint64_t)&v127, (uint64_t)v145);
  for (unint64_t i = 0LL; i != 9; ++i)
    *((float *)&v147 + i) = *((float *)&v147 + i) - sub_1005AAEAC((uint64_t)v145, i);
  uint64_t v80 = 0LL;
  float v81 = 1.0 / v78;
  __int128 v150 = v147;
  __int128 v151 = v148;
  int v152 = v149;
  do
  {
    *(float *)((char *)&v150 + v80) = (float)(v81 * v77) * *(float *)((char *)&v150 + v80);
    v80 += 4LL;
  }

  while (v80 != 36);
  unint64_t v82 = 0LL;
  *(_OWORD *)std::stringbuf::string_type buf = v150;
  __int128 v178 = v151;
  int v179 = v152;
  do
  {
    *((float *)v153 + v82) = sub_1005AAEAC((uint64_t)buf, v82) + *((float *)v153 + v82);
    ++v82;
  }

  while (v82 != 9);
  float v83 = a1[1];
  __int128 v121 = v157;
  __int128 v122 = v158;
  int v123 = v159;
  int v135 = 0;
  float v136 = v170;
  float v137 = -v169;
  float v138 = -v170;
  int v139 = 0;
  float v140 = v168;
  float v141 = v169;
  float v142 = -v168;
  int v143 = 0;
  sub_100809A4C((uint64_t)&v135, (uint64_t)v155, (uint64_t)v144);
  int v127 = 0;
  float v128 = v162;
  float v129 = -*((float *)&v161 + 1);
  float v130 = -v162;
  int v131 = 0;
  unint64_t v132 = v161;
  float v133 = -*(float *)&v161;
  int v134 = 0;
  sub_100809A4C((uint64_t)v144, (uint64_t)&v127, (uint64_t)v145);
  for (unint64_t j = 0LL; j != 9; ++j)
    *((float *)&v121 + j) = *((float *)&v121 + j) - sub_1005AAEAC((uint64_t)v145, j);
  uint64_t v85 = 0LL;
  __int128 v124 = v121;
  __int128 v125 = v122;
  int v126 = v123;
  do
  {
    *(float *)((char *)&v124 + v85) = (float)(v81 * v83) * *(float *)((char *)&v124 + v85);
    v85 += 4LL;
  }

  while (v85 != 36);
  unint64_t v86 = 0LL;
  *(_OWORD *)std::stringbuf::string_type buf = v124;
  __int128 v178 = v125;
  int v179 = v126;
  do
  {
    v87.f32[0] = sub_1005AAEAC((uint64_t)buf, v86) + *((float *)v153 + v86);
    *((_DWORD *)v153 + v86++) = v87.i32[0];
  }

  while (v86 != 9);
  sub_100834518(a2, (float *)v153, v87);
  uint64_t v88 = 0LL;
  float v89 = *a1;
  __int128 v115 = v174;
  __int128 v116 = v175;
  int v117 = v176;
  do
  {
    *(float *)((char *)&v115 + v88) = v89 * *(float *)((char *)&v115 + v88);
    v88 += 4LL;
  }

  while (v88 != 36);
  uint64_t v90 = 0LL;
  int v120 = v117;
  __int128 v118 = v115;
  __int128 v119 = v116;
  float v91 = a1[1];
  int v114 = v159;
  __int128 v112 = v157;
  __int128 v113 = v158;
  do
  {
    *(float *)((char *)&v112 + v90) = v91 * *(float *)((char *)&v112 + v90);
    v90 += 4LL;
  }

  while (v90 != 36);
  unint64_t v92 = 0LL;
  *(_OWORD *)std::stringbuf::string_type buf = v112;
  __int128 v178 = v113;
  int v179 = v114;
  do
  {
    *((float *)&v118 + v92) = sub_1005AAEAC((uint64_t)buf, v92) + *((float *)&v118 + v92);
    ++v92;
  }

  while (v92 != 9);
  uint64_t v93 = 0LL;
  v145[0] = v118;
  v145[1] = v119;
  int v146 = v120;
  float v94 = 0.0;
  do
  {
    float v94 = v94 + (float)(*(float *)((char *)v145 + v93) * *(float *)((char *)v145 + v93));
    v93 += 4LL;
  }

  while (v93 != 36);
  float v95 = sqrtf(v94);
  float v96 = (float)(v76 - (float)(v95 * v95)) * 0.5;
  BOOL v47 = v96 != 0.0;
  if (v96 == 0.0)
  {
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_10185A0C0);
    }
    int v106 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "kappa zero!", buf, 2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_10185A0C0);
      }
      v144[0] = 0;
      LODWORD(v111) = 2;
      __int16 v107 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "kappa zero!",  v144,  v111);
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const flo at *, CMOQuaternion &, CMMatrix<float, 3> &)",  "%s\n",  v107);
    }
  }

  else
  {
    unint64_t v97 = 0LL;
    float v98 = v81 * (float)(1.0 / v96);
    do
    {
      for (unint64_t k = 0LL; k != 3; ++k)
      {
        unint64_t v100 = 0LL;
        *(_DWORD *)sub_1002B9EC4(a3, v97, k) = 0;
        do
        {
          float v101 = sub_1002B9B68((uint64_t)v145, v97, v100);
          float v102 = sub_1002B9B68((uint64_t)v145, k, v100);
          __int16 v103 = (float *)sub_1002B9EC4(a3, v97, k);
          *__int16 v103 = *v103 + (float)(v101 * v102);
          ++v100;
        }

        while (v100 != 3);
        int v104 = (float *)sub_1002B9EC4(a3, v97, k);
        *int v104 = v98 * *v104;
      }

      __int16 v105 = (float *)sub_1002B9EC4(a3, v97, v97);
      *__int16 v105 = v81 + *v105;
      ++v97;
    }

    while (v97 != 3);
  }

  return v47;
}

float *sub_100834488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  for (unint64_t i = 0LL; i != 3; ++i)
  {
    for (unint64_t j = 0LL; j != 3; ++j)
    {
      float v8 = sub_1002B8AF0(a1, i);
      float v9 = v8 * sub_1002B8AF0(a2, j);
      double result = (float *)sub_1002B9EC4(a3, i, j);
      *double result = v9;
    }
  }

  return result;
}

double sub_100834518(float32x4_t *a1, float *a2, float32x4_t a3)
{
  float v3 = *a2;
  float v4 = a2[4];
  float v5 = a2[8];
  float v6 = (float)(*a2 + v4) + v5;
  if (v6 <= 0.0)
  {
    if (v3 > v4)
    {
      BOOL v8 = v3 == v5;
      BOOL v9 = v3 < v5;
    }

    else
    {
      BOOL v8 = 1;
      BOOL v9 = 0;
    }

    if (v9 || v8)
    {
      if (v4 <= v5)
      {
        float v15 = (float)((float)((float)-v3 - v4) + v5) + 1.0;
        float v16 = 0.5 / sqrtf(v15);
        a1->f32[2] = v15 * v16;
        a1->f32[3] = v16 * (float)(a2[3] - a2[1]);
        a1->f32[0] = v16 * (float)(a2[2] + a2[6]);
        a3.f32[0] = v16 * (float)(a2[7] + a2[5]);
        a1->i32[1] = a3.i32[0];
      }

      else
      {
        float v10 = (float)((float)(v4 - v3) - v5) + 1.0;
        float v11 = 0.5 / sqrtf(v10);
        a1->f32[1] = v10 * v11;
        a1->f32[0] = v11 * (float)(a2[3] + a2[1]);
        a1->f32[3] = v11 * (float)(a2[2] - a2[6]);
        a3.f32[0] = v11 * (float)(a2[7] + a2[5]);
        a1->i32[2] = a3.i32[0];
      }
    }

    else
    {
      float v13 = (float)((float)(v3 - v4) - v5) + 1.0;
      float v14 = 0.5 / sqrtf(v13);
      a1->f32[0] = v13 * v14;
      a1->f32[1] = v14 * (float)(a2[3] + a2[1]);
      a1->f32[2] = v14 * (float)(a2[2] + a2[6]);
      a3.f32[0] = v14 * (float)(a2[7] - a2[5]);
      a1->i32[3] = a3.i32[0];
    }
  }

  else
  {
    float v7 = 0.5 / sqrtf(v6 + 1.0);
    a1->f32[3] = (float)(v6 + 1.0) * v7;
    a1->f32[2] = v7 * (float)(a2[3] - a2[1]);
    a1->f32[1] = v7 * (float)(a2[2] - a2[6]);
    a3.f32[0] = v7 * (float)(a2[7] - a2[5]);
    a1->i32[0] = a3.i32[0];
  }

  *(void *)&double result = sub_100833700(a1, a3).u64[0];
  return result;
}

float sub_1008346D4@<S0>(float *a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  float v4 = a1[2];
  float v3 = a1[3];
  float v5 = v3 + v3;
  float v6 = *a1;
  float v7 = a1[1];
  float v8 = v7 + v7;
  float v9 = v3 * (float)(v3 + v3);
  float v10 = (float)((float)(v7 + v7) * v7) + -1.0;
  float v11 = (float)((float)(v4 + v4) * v4) + -1.0;
  float v12 = (float)(v6 + v6) * v7;
  float v13 = (float)(v6 + v6) * v4;
  float v14 = v3 * (float)(v6 + v6);
  float v15 = v8 * v4;
  float v16 = v3 * v8;
  float v17 = v5 * v4;
  float v18 = v9 + (float)((float)((float)(v6 + v6) * v6) + -1.0);
  float v19 = v12 - (float)(v17 * a3);
  float v20 = v13 + (float)(v16 * a3);
  float v21 = v12 + (float)(v17 * a3);
  float v22 = v9 + v10;
  float v23 = v15 - (float)(v14 * a3);
  float v24 = v13 - (float)(v16 * a3);
  float result = v15 + (float)(v14 * a3);
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v20;
  a2[3] = v21;
  a2[4] = v22;
  a2[5] = v23;
  a2[6] = v24;
  a2[7] = result;
  a2[8] = v9 + v11;
  return result;
}

void sub_100834754(float *a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_101998DE0);
  if ((v1 & 1) == 0)
  {
    float v18 = a1;
    int v17 = __cxa_guard_acquire(&qword_101998DE0);
    a1 = v18;
    if (v17)
    {
      dword_101998DD8 = 1043452116;
      __cxa_guard_release(&qword_101998DE0);
      a1 = v18;
    }
  }

  float v3 = sub_100833470(a1);
  float v5 = v4;
  uint64_t v6 = 0LL;
  float v7 = sqrtf((float)(v4 * v4) + (float)(v3 * v3));
  float v8 = 1.0;
  if (v2 <= v7) {
    float v8 = -1.0;
  }
  uint64_t v21 = 0x3F80000000000000LL;
  int v22 = 0;
  float v9 = v2 * v8;
  float v10 = (float)(v2 * -0.0) + (float)(v5 * v8);
  float v11 = -(float)(v3 * v8);
  float v12 = 0.0;
  float v13 = v11 + (float)(v2 * 0.0);
  float v14 = (float)(v5 * -0.0) + (float)(v3 * 0.0);
  *(float *)float v20 = v10;
  *(float *)&v20[1] = v13;
  *(float *)&void v20[2] = v14;
  do
  {
    float v12 = v12 + (float)(*(float *)&v20[v6] * *(float *)&v20[v6]);
    ++v6;
  }

  while (v6 != 3);
  float v15 = sqrtf(v12);
  if (v15 > *(float *)&dword_101998DD8)
  {
    float v16 = (float)-atan2f(v7, v9) / v15;
    v23[0] = v10 * v16;
    v23[1] = v16 * v13;
    void v23[2] = v16 * v14;
    sub_10083365C(&v19, v23);
    sub_1008346D4(v19.f32, v23, -1.0);
    sub_1002B8A2C((uint64_t)v23, (float *)&v21);
  }

float sub_1008348C4(float *a1)
{
  float v5 = sub_100833624(a1, v2, v3, v4);
  for (float result = atan2f(-v6, v5) * 57.296; result < 0.0; float result = result + 360.0)
    ;
  for (; result >= 360.0; float result = result + -360.0)
    ;
  return result;
}

void sub_100834950(id a1)
{
  qword_101934A78 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_10083497C(void *a1, int a2)
{
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10185A0F0;
  a1[9] = off_10185A198;
  sub_100B14CF0(a1 + 42, 0LL, 0LL);
  sub_100B14CF0(a1 + 44, 0LL, 0LL);
  (*(void (**)(void *))(*a1 + 112LL))(a1);
  return a1;
}

void sub_100834A2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100834A58(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  float v12 = (void *)(a1 + 8);
  *(void *)a1 = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 8));
  *float v12 = &off_10182BDA0;
  *(void *)a1 = off_10185A328;
  *(void *)(a1 + 72) = off_10185A3D0;
  sub_100D8A584(a1 + 72, a2, a3, a1, a6, a4, a5, 0LL);
  *(void *)a1 = off_10185A328;
  *(void *)(a1 + 72) = off_10185A3D0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0LL;
  *(int64x2_t *)(a1 + 232) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 248) = 0LL;
  *(_DWORD *)(a1 + 256) = 12000;
  *(void *)(a1 + 264) = off_10182BD58;
  sub_1001B9AC4((void *)(a1 + 272));
  *(void *)(a1 + 272) = &off_10182BDA0;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v29 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  __int16 v31 = 256;
  if (a3)
  {
    *(void *)(a1 + 232) = 0xBFF0000000000000LL;
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)v29 + 24LL))(v29);
    return a1;
  }

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a4, *(void *)(a4 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v28 = *(void *)(a4 + 16);
  }

  sub_100D8AF38(a1 + 72, (uint64_t)__p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = sub_1006E27E8();
  sub_100413284(v14, buf);
  float v15 = (int *)(a1 + 256);
  char v16 = sub_1002A7CB0(*(uint64_t *)buf, "ActivityInMemoryBufferSize", (_DWORD *)(a1 + 256));
  int v17 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if ((v16 & 1) == 0) {
    *float v15 = 12000;
  }
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10185A410);
  }
  float v20 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *v15;
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Buffer size: %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185A410);
    }
    int v24 = *v15;
    v32[0] = 67109120;
    v32[1] = v24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  2LL,  "Buffer size: %d",  v32);
    float v26 = (uint8_t *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::CLActivityRecorderDb(const char *, BOOL, float, const std: :string &, const CLSqliteDatabase::SqlitePropertyPersistence) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectio nPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v25);
    if (v26 != buf) {
      free(v26);
    }
  }

  int v22 = HIBYTE(v31);
  *(void *)(a1 + 232) = 0xBFF0000000000000LL;
  if (v22)
  {
    if ((_BYTE)v31)
    {
      pthread_mutex_unlock(v30);
      return a1;
    }

    goto LABEL_3;
  }

  return a1;
}

void sub_100834E14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
  v24[33] = off_10182BD58;
  sub_1001B9C98(v27);
  sub_1000EAA04(v26);
  sub_100D8A88C(a12);
  *int v24 = off_10182BD58;
  sub_1001B9C98(v25);
  _Unwind_Resume(a1);
}

void sub_100834EB8()
{
}

void *sub_100834EC0(void *a1)
{
  a1[9] = off_10185A3D0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  *a1 = off_10185A328;
  a1[33] = off_10182BD58;
  sub_1001B9C98(a1 + 34);
  sub_1000EAA04(a1 + 22);
  sub_100D8A88C(v2);
  *a1 = off_10182BD58;
  sub_1001B9C98(a1 + 1);
  return a1;
}

void *sub_100834F40(uint64_t a1)
{
  return sub_100834EC0((void *)(a1 - 72));
}

void sub_100834F48(void *a1)
{
  unsigned __int8 v1 = sub_100834EC0(a1);
  operator delete(v1);
}

void sub_100834F5C(uint64_t a1)
{
  unsigned __int8 v1 = sub_100834EC0((void *)(a1 - 72));
  operator delete(v1);
}

uint64_t sub_100834F74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  sub_1003C0D54( *(void *)(v3 + 80),  "INSERT INTO VO2MaxCloudKitSyncEngineMetadata (startTime, lastUpdateTime, metadata) VALUES (?, ?, ?)",  &v11);
  uint64_t v4 = v11;
  float v5 = (sqlite3_stmt *)sub_100019240(v11);
  if (!sub_1003B7480(v5, 1, *(double *)(a2 + 8))
    || (char v6 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003B7480(v6, 2, *(double *)(a2 + 16)))
    || (float v7 = (sqlite3_stmt *)sub_100019240(v4), !sub_1003C2F58(v7, 3, *(void **)(a2 + 24))))
  {
    int v9 = 1;
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  uint64_t v3 = *(void *)(v3 + 80);
  float v8 = (sqlite3_stmt *)sub_100019240(v4);
  LOBYTE(v3) = sub_1003BB2BC(v3, v8);
  int v9 = 0;
  if (v4) {
LABEL_8:
  }
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
LABEL_9:
  if (v9) {
LABEL_10:
  }
    LOBYTE(v3) = 0;
  return v3 & 1;
}

void sub_10083505C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10083507C(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t v5 = a1;
  sub_100B14CF8((uint64_t *)(v5 + 352), &v14);
  char v6 = (sqlite3_stmt *)sub_100019240(v14);
  if (sub_1003B7480(v6, 1, *(double *)(a2 + 8))
    && (float v7 = (sqlite3_stmt *)sub_100019240(v14), sub_1003B7480(v7, 2, *(double *)(a2 + 16)))
    && (float v8 = (sqlite3_stmt *)sub_100019240(v14), sub_1003C2F58(v8, 3, *(void **)(a2 + 24)))
    && (int v9 = (sqlite3_stmt *)sub_100019240(v14), sub_1003C2D24(v9, 4, a3)))
  {
    uint64_t v5 = *(void *)(v5 + 80);
    float v10 = (sqlite3_stmt *)sub_100019240(v14);
    LOBYTE(sub_1012279C0(0LL, v4, v5) = sub_1003BB2BC(v5, v10);
    int v11 = 0;
  }

  else
  {
    int v11 = 1;
  }

  uint64_t v12 = v14;
  uint64_t v14 = 0LL;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  if (v11) {
LABEL_11:
  }
    LOBYTE(sub_1012279C0(0LL, v4, v5) = 0;
  return v5 & 1;
}

void sub_100835174( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100835198(uint64_t *a1)
{
  uint64_t result = sub_1003C1048(a1[10]);
  if ((_DWORD)result)
  {
    sub_100835214((uint64_t)a1);
    sub_1003B59A0( a1[10],  "VO2MaxCloudKitSyncEngineMetadata",  (const char **)&off_10185A228,  (const std::string::value_type **)&off_10198D580,  0);
    a1[42] = sub_1003BF158(a1[10], "SELECT * FROM VO2MaxCloudKitSyncEngineMetadata ORDER BY id DESC LIMIT 1");
    a1[43] = v3;
    uint64_t result = sub_1003BF158( a1[10],  "UPDATE VO2MaxCloudKitSyncEngineMetadata SET startTime = ?, lastUpdateTime = ?, metadata = ? WHERE id = ?");
    a1[44] = result;
    a1[45] = v4;
  }

  return result;
}

uint64_t sub_100835214(uint64_t a1)
{
  uint64_t result = sub_1003B747C(*(void *)(a1 + 80), "VO2MaxCloudKitSyncEngineMetadata");
  if ((_DWORD)result)
  {
    uint64_t v3 = 0LL;
    int v4 = 0;
    float v8 = "startTime";
    do
    {
      float v38 = v8;
      int v39 = 5;
      __int16 v40 = 0;
      char v41 = 0;
      char v42 = 0;
      if ((sub_1003BC790(*(void *)(a1 + 80), "VO2MaxCloudKitSyncEngineMetadata", v8, (uint64_t)&v38) & 1) == 0)
      {
        sub_1003C0454(*(void *)(a1 + 80));
        sub_10000CE18((uint64_t)v34);
        int v9 = sub_10000CF44(&v35, (uint64_t)"ALTER TABLE VO2MaxCloudKitSyncEngineMetadata ADD COLUMN ", 56LL);
        size_t v10 = strlen(v8);
        int v11 = sub_10000CF44(v9, (uint64_t)v8, v10);
        uint64_t v12 = sub_10000CF44(v11, (uint64_t)" ", 1LL);
        uint64_t v13 = (const char *)sub_1003BCC40((int)(&off_10185A228)[v3 + 7]);
        size_t v14 = strlen(v13);
        float v15 = sub_10000CF44(v12, (uint64_t)v13, v14);
        sub_10000CF44(v15, (uint64_t)";", 1LL);
        uint64_t v16 = *(void *)(a1 + 80);
        std::stringbuf::str(&v31, &v36);
        if ((v31.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          int v17 = &v31;
        }
        else {
          int v17 = (std::stringbuf::string_type *)v31.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v16, (char *)v17, &v29);
        uint64_t v18 = v29.__r_.__value_.__r.__words[0];
        v29.__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v19 = *(void *)(a1 + 80);
        float v20 = (sqlite3_stmt *)sub_100019240(v18);
        sub_1003BB2BC(v19, v20);
        sub_10000CE18((uint64_t)&v31);
        int v21 = sub_10000CF44( &v31.__r_.__value_.__l.__cap_,  (uint64_t)"UPDATE VO2MaxCloudKitSyncEngineMetadata SET ",  44LL);
        size_t v22 = strlen(v8);
        float v23 = sub_10000CF44(v21, (uint64_t)v8, v22);
        sub_10000CF44(v23, (uint64_t)" = 0;", 5LL);
        uint64_t v24 = *(void *)(a1 + 80);
        std::stringbuf::str(&v29, &v32);
        if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          float v25 = &v29;
        }
        else {
          float v25 = (std::stringbuf::string_type *)v29.__r_.__value_.__r.__words[0];
        }
        sub_1003C0D54(v24, (char *)v25, &v30);
        uint64_t v26 = v30;
        uint64_t v30 = 0LL;
        uint64_t v27 = *(void *)(a1 + 80);
        uint64_t v28 = (sqlite3_stmt *)sub_100019240(v26);
        sub_1003BB2BC(v27, v28);
        sub_1003C05BC(*(void *)(a1 + 80));
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8LL))(v26);
        }
        v31.__r_.__value_.__r.__words[0] = v5;
        *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + *(void *)(v5 - 24)) = v7;
        v31.__r_.__value_.__l.__cap_ = v6;
        std::streambuf::~streambuf(&v32);
        std::ios::~ios(&v33);
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
        }
        v34[0] = v5;
        *(void *)((char *)v34 + *(void *)(v5 - 24)) = v7;
        std::string::size_type v35 = v6;
        std::streambuf::~streambuf(&v36);
        std::ios::~ios(&v37);
        int v4 = 1;
      }

      float v8 = (&off_10185A228)[v3 + 12];
      v3 += 6LL;
    }

    while (v3 != 18);
    uint64_t result = sub_1008358A0( a1,  "VO2MaxCloudKitSyncEngineMetadata",  (const char **)&off_10185A228,  (const std::string::value_type **)&off_10198D580);
  }

  return result;
}

void sub_1008355B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a21);
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8LL))(v59);
  }
  sub_1011F8850((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void *sub_100835650@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "VO2MaxCloudKitSyncEngineMetadata");
}

void *sub_100835660@<X0>(void *a1@<X8>)
{
  return sub_1010DDBC0(a1, "VO2MaxCloudKitSyncEngineMetadata");
}

uint64_t sub_100835670(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100D8A92C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_1003C0D54( *(void *)(a1 + 80),  "INSERT INTO VO2MaxCloudKitSyncEngineMetadata (startTime, lastUpdateTime, metadata) VALUES (?, ?, ?)",  &v11);
    uint64_t v5 = v11;
    std::string::size_type v6 = (sqlite3_stmt *)sub_100019240(v11);
    uint64_t result = sub_1003B7480(v6, 1, *(double *)(a2 + 8));
    if ((_DWORD)result)
    {
      std::string::size_type v7 = (sqlite3_stmt *)sub_100019240(v5);
      uint64_t result = sub_1003B7480(v7, 2, *(double *)(a2 + 16));
      if ((_DWORD)result)
      {
        float v8 = (sqlite3_stmt *)sub_100019240(v5);
        uint64_t result = sub_1003C2F58(v8, 3, *(void **)(a2 + 24));
        if ((_DWORD)result)
        {
          uint64_t v9 = *(void *)(a1 + 80);
          size_t v10 = (sqlite3_stmt *)sub_100019240(v5);
          uint64_t result = sub_1003BB2BC(v9, v10);
        }
      }
    }

    if (v5) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  return result;
}

void sub_100835738(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100835758(uint64_t a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_100019240(v16);
  int v5 = sqlite3_step(v4);
  if (v5 == 101)
  {
    uint64_t v13 = 1LL;
  }

  else if (v5 == 100)
  {
    std::string::size_type v6 = (sqlite3_stmt *)sub_100019240(v16);
    *(void *)a2 = sqlite3_column_int(v6, 0);
    std::string::size_type v7 = (sqlite3_stmt *)sub_100019240(v16);
    *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
    float v8 = (sqlite3_stmt *)sub_100019240(v16);
    *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
    uint64_t v9 = (sqlite3_stmt *)sub_100019240(v16);
    size_t v10 = sqlite3_column_blob(v9, 3);
    uint64_t v11 = (sqlite3_stmt *)sub_100019240(v16);
    uint64_t v12 =  -[NSData initWithBytes:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytes:length:",  v10,  sqlite3_column_bytes(v11, 3));
    uint64_t v13 = 0LL;
    *(void *)(a2 + 24) = v12;
  }

  else
  {
    uint64_t v13 = 2LL;
  }

  uint64_t v14 = v16;
  uint64_t v16 = 0LL;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  return v13;
}

void sub_10083587C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008358A0(uint64_t a1, char *a2, const char **a3, const std::string::value_type **a4)
{
  if (!sub_1003B79FC(*(void *)(a1 + 80), a2))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185A410);
    }
    float v8 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s needs autoincrement migration",  (uint8_t *)buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185A410);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s needs autoincrement migration",  &__p,  12);
      unint64_t v132 = (std::string *)v131;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::migrateDbConstraints(const char *, const CLSqliteDa tabase::ColumnInfo *, const char **) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB: :ClassCDataProtectionPolicy]",  "%s\n",  v131);
      if (v132 != buf) {
        free(v132);
      }
    }

    memset(&__p, 0, sizeof(__p));
    sub_1010DDBC0(buf, a2);
    uint64_t v9 = std::string::append(buf, "AutoIncr");
    __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t cap = v9->__r_.__value_.__l.__cap_;
    *(_OWORD *)int v143 = v10;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    sub_1010DDBC0(buf, a2);
    uint64_t v11 = std::string::append(buf, "Index");
    __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    int64_t v142 = v11->__r_.__value_.__l.__cap_;
    *(_OWORD *)float v141 = v12;
    v11->__r_.__value_.__l.__size_ = 0LL;
    v11->__r_.__value_.__l.__cap_ = 0LL;
    v11->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003C0454(*(void *)(a1 + 80));
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = buf;
    sub_1000392EC((uint64_t)buf, size + 21);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v14 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_p, size);
    }

    strcpy((char *)v14 + size, "DROP TABLE IF EXISTS ");
    if (cap >= 0) {
      uint64_t v16 = v143;
    }
    else {
      uint64_t v16 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v17 = HIBYTE(cap);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)v143[1];
    }
    uint64_t v18 = std::string::append(buf, (const std::string::value_type *)v16, v17);
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v20 = v18->__r_.__value_.__s.__size_;
    v18->__r_.__value_.__l.__size_ = 0LL;
    v18->__r_.__value_.__l.__cap_ = 0LL;
    v18->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v19;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v20;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v20 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    }

    if (v20 >= 0) {
      int v21 = &__p;
    }
    else {
      int v21 = (std::string *)v19;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v21, buf);
    size_t v22 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v23 = sqlite3_step(v22);
    std::string::size_type v24 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v24) {
      (*(void (**)(std::string::size_type))(*(void *)v24 + 8LL))(v24);
    }
    if (v23 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v25 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v25 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = &v148;
    sub_1000392EC((uint64_t)&v148, v25 + 13);
    if ((v148.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v26 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v27 = &__p;
      }
      else {
        uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v26, v27, v25);
    }

    strcpy((char *)v26 + v25, "CREATE TABLE ");
    if (cap >= 0) {
      uint64_t v28 = v143;
    }
    else {
      uint64_t v28 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v29 = HIBYTE(cap);
    }
    else {
      std::string::size_type v29 = (std::string::size_type)v143[1];
    }
    uint64_t v30 = std::string::append(&v148, (const std::string::value_type *)v28, v29);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    std::stringbuf v32 = std::string::append(&v140, " (");
    __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0LL;
    v32->__r_.__value_.__l.__cap_ = 0LL;
    v32->__r_.__value_.__r.__words[0] = 0LL;
    sub_1003BE030(a3, 1, 1, (uint64_t)&v139);
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      float v34 = &v139;
    }
    else {
      float v34 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v35 = v139.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v35 = v139.__r_.__value_.__l.__size_;
    }
    std::stringbuf v36 = std::string::append(&v149, (const std::string::value_type *)v34, v35);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    float v38 = std::string::append(buf, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    v146.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v40 = v38->__r_.__value_.__s.__size_;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v39;
    __p.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v146.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v40;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v41 = &__p;
    }
    else {
      char v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v41, buf);
    char v42 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v43 = sqlite3_step(v42);
    std::string::size_type v44 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v44) {
      (*(void (**)(std::string::size_type))(*(void *)v44 + 8LL))(v44);
    }
    if (v43 != 101) {
      goto LABEL_234;
    }
    sub_1003BE030(a3, 0, 0, (uint64_t)buf);
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v45 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v45 = __p.__r_.__value_.__l.__size_;
    }
    char v46 = &v145;
    sub_1000392EC((uint64_t)&v145, v45 + 12);
    if ((v145.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      char v46 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v47 = &__p;
      }
      else {
        BOOL v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v46, v47, v45);
    }

    strcpy((char *)v46 + v45, "INSERT INTO ");
    if (cap >= 0) {
      double v48 = v143;
    }
    else {
      double v48 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v49 = HIBYTE(cap);
    }
    else {
      std::string::size_type v49 = (std::string::size_type)v143[1];
    }
    float v50 = std::string::append(&v145, (const std::string::value_type *)v48, v49);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    float v52 = std::string::append(&v138, " (");
    __int128 v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__l.__cap_ = v52->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0LL;
    v52->__r_.__value_.__l.__cap_ = 0LL;
    v52->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      float v54 = buf;
    }
    else {
      float v54 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v55 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v55 = buf[0].__r_.__value_.__l.__size_;
    }
    float v56 = std::string::append(&v146, (const std::string::value_type *)v54, v55);
    __int128 v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__l.__cap_ = v56->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0LL;
    v56->__r_.__value_.__l.__cap_ = 0LL;
    v56->__r_.__value_.__r.__words[0] = 0LL;
    float v58 = std::string::append(&v139, ") SELECT ");
    __int128 v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__l.__cap_ = v58->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0LL;
    v58->__r_.__value_.__l.__cap_ = 0LL;
    v58->__r_.__value_.__r.__words[0] = 0LL;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v60 = buf;
    }
    else {
      uint64_t v60 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v61 = buf[0].__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v61 = buf[0].__r_.__value_.__l.__size_;
    }
    float v62 = std::string::append(&v148, (const std::string::value_type *)v60, v61);
    __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v140.__r_.__value_.__l.__cap_ = v62->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0LL;
    v62->__r_.__value_.__l.__cap_ = 0LL;
    v62->__r_.__value_.__r.__words[0] = 0LL;
    float v64 = std::string::append(&v140, " FROM ");
    __int128 v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v64->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0LL;
    v64->__r_.__value_.__l.__cap_ = 0LL;
    v64->__r_.__value_.__r.__words[0] = 0LL;
    float v66 = std::string::append(&v149, a2);
    std::string::size_type v67 = v66->__r_.__value_.__r.__words[0];
    v147[0] = v66->__r_.__value_.__l.__size_;
    *(void *)((char *)v147 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v68 = v66->__r_.__value_.__s.__size_;
    v66->__r_.__value_.__l.__size_ = 0LL;
    v66->__r_.__value_.__l.__cap_ = 0LL;
    v66->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v67;
    __p.__r_.__value_.__l.__size_ = v147[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v147 + 7);
    __p.__r_.__value_.__s.__size_ = v68;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      float v69 = &__p;
    }
    else {
      float v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v69, &v149);
    float v70 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
    int v71 = sqlite3_step(v70);
    std::string::size_type v72 = v149.__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = 0LL;
    if (v72) {
      (*(void (**)(std::string::size_type))(*(void *)v72 + 8LL))(v72);
    }
    if (v71 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v73 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v73 = __p.__r_.__value_.__l.__size_;
    }
    float v74 = buf;
    sub_1000392EC((uint64_t)buf, v73 + 11);
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      float v74 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v73)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        float v75 = &__p;
      }
      else {
        float v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v74, v75, v73);
    }

    strcpy((char *)v74 + v73, "DROP TABLE ");
    float v76 = std::string::append(buf, a2);
    std::string::size_type v77 = v76->__r_.__value_.__r.__words[0];
    v149.__r_.__value_.__r.__words[0] = v76->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
    signed __int8 v78 = v76->__r_.__value_.__s.__size_;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v149.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v78;
    if ((char)buf[0].__r_.__value_.__s.__size_ < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      signed __int8 v78 = __p.__r_.__value_.__s.__size_;
      std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
    }

    if (v78 >= 0) {
      uint64_t v79 = &__p;
    }
    else {
      uint64_t v79 = (std::string *)v77;
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v79, buf);
    uint64_t v80 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v81 = sqlite3_step(v80);
    std::string::size_type v82 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v82) {
      (*(void (**)(std::string::size_type))(*(void *)v82 + 8LL))(v82);
    }
    if (v81 != 101) {
      goto LABEL_234;
    }
    std::string::assign(&__p, "");
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t v83 = __p.__r_.__value_.__s.__size_;
    }
    else {
      size_t v83 = __p.__r_.__value_.__l.__size_;
    }
    double v84 = &v140;
    sub_1000392EC((uint64_t)&v140, v83 + 12);
    if ((v140.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      double v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v83)
    {
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v85 = &__p;
      }
      else {
        uint64_t v85 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v84, v85, v83);
    }

    strcpy((char *)v84 + v83, "ALTER TABLE ");
    if (cap >= 0) {
      unint64_t v86 = v143;
    }
    else {
      unint64_t v86 = (void **)v143[0];
    }
    if (cap >= 0) {
      std::string::size_type v87 = HIBYTE(cap);
    }
    else {
      std::string::size_type v87 = (std::string::size_type)v143[1];
    }
    uint64_t v88 = std::string::append(&v140, (const std::string::value_type *)v86, v87);
    __int128 v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__l.__cap_ = v88->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0LL;
    v88->__r_.__value_.__l.__cap_ = 0LL;
    v88->__r_.__value_.__r.__words[0] = 0LL;
    uint64_t v90 = std::string::append(&v149, " RENAME TO ");
    __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    buf[0].__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0LL;
    v90->__r_.__value_.__l.__cap_ = 0LL;
    v90->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v92 = std::string::append(buf, a2);
    std::string::size_type v93 = v92->__r_.__value_.__r.__words[0];
    v148.__r_.__value_.__r.__words[0] = v92->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v94 = v92->__r_.__value_.__s.__size_;
    v92->__r_.__value_.__l.__size_ = 0LL;
    v92->__r_.__value_.__l.__cap_ = 0LL;
    v92->__r_.__value_.__r.__words[0] = 0LL;
    __p.__r_.__value_.__r.__words[0] = v93;
    __p.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v148.__r_.__value_.__r.__words + 7);
    __p.__r_.__value_.__s.__size_ = v94;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      float v95 = &__p;
    }
    else {
      float v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(*(void *)(a1 + 80), (char *)v95, buf);
    float v96 = (sqlite3_stmt *)sub_100019240((uint64_t)buf[0].__r_.__value_.__l.__data_);
    int v97 = sqlite3_step(v96);
    std::string::size_type v98 = buf[0].__r_.__value_.__r.__words[0];
    buf[0].__r_.__value_.__r.__words[0] = 0LL;
    if (v98) {
      (*(void (**)(std::string::size_type))(*(void *)v98 + 8LL))(v98);
    }
    if (v97 != 101) {
      goto LABEL_234;
    }
    sub_1003BAFA4(a4, buf);
    std::string::size_type v99 = buf[0].__r_.__value_.__s.__size_;
    unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type v99 = buf[0].__r_.__value_.__l.__size_;
    }
    if (v99)
    {
      std::string::assign(&__p, "");
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        size_t v101 = __p.__r_.__value_.__s.__size_;
      }
      else {
        size_t v101 = __p.__r_.__value_.__l.__size_;
      }
      float v102 = &v138;
      sub_1000392EC((uint64_t)&v138, v101 + 13);
      if ((v138.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        float v102 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v101)
      {
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          __int16 v103 = &__p;
        }
        else {
          __int16 v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v102, v103, v101);
      }

      strcpy((char *)v102 + v101, "CREATE INDEX ");
      if (v142 >= 0) {
        int v104 = v141;
      }
      else {
        int v104 = (void **)v141[0];
      }
      if (v142 >= 0) {
        std::string::size_type v105 = HIBYTE(v142);
      }
      else {
        std::string::size_type v105 = (std::string::size_type)v141[1];
      }
      int v106 = std::string::append(&v138, (const std::string::value_type *)v104, v105);
      __int128 v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__l.__cap_ = v106->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0LL;
      v106->__r_.__value_.__l.__cap_ = 0LL;
      v106->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v108 = std::string::append(&v146, " ON ");
      __int128 v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__l.__cap_ = v108->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0LL;
      v108->__r_.__value_.__l.__cap_ = 0LL;
      v108->__r_.__value_.__r.__words[0] = 0LL;
      unsigned int v110 = std::string::append(&v139, a2);
      __int128 v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__l.__cap_ = v110->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0LL;
      v110->__r_.__value_.__l.__cap_ = 0LL;
      v110->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v112 = std::string::append(&v148, " (");
      __int128 v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__l.__cap_ = v112->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0LL;
      v112->__r_.__value_.__l.__cap_ = 0LL;
      v112->__r_.__value_.__r.__words[0] = 0LL;
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v114 = buf;
      }
      else {
        int v114 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
      }
      if ((buf[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v115 = buf[0].__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v115 = buf[0].__r_.__value_.__l.__size_;
      }
      __int128 v116 = std::string::append(&v140, (const std::string::value_type *)v114, v115);
      __int128 v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      v149.__r_.__value_.__l.__cap_ = v116->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v117;
      v116->__r_.__value_.__l.__size_ = 0LL;
      v116->__r_.__value_.__l.__cap_ = 0LL;
      v116->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v118 = std::string::append(&v149, ")");
      std::string::size_type v119 = v118->__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[0] = v118->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v120 = v118->__r_.__value_.__s.__size_;
      v118->__r_.__value_.__l.__size_ = 0LL;
      v118->__r_.__value_.__l.__cap_ = 0LL;
      v118->__r_.__value_.__r.__words[0] = 0LL;
      __p.__r_.__value_.__r.__words[0] = v119;
      __p.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      __p.__r_.__value_.__s.__size_ = v120;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int128 v121 = &__p;
      }
      else {
        __int128 v121 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1003C0D54(*(void *)(a1 + 80), (char *)v121, &v149);
      __int128 v122 = (sqlite3_stmt *)sub_100019240((uint64_t)v149.__r_.__value_.__l.__data_);
      int v123 = sqlite3_step(v122);
      std::string::size_type v124 = v149.__r_.__value_.__r.__words[0];
      v149.__r_.__value_.__r.__words[0] = 0LL;
      if (v124) {
        (*(void (**)(std::string::size_type))(*(void *)v124 + 8LL))(v124);
      }
      unsigned __int8 v100 = buf[0].__r_.__value_.__s.__size_;
    }

    else
    {
      int v123 = 101;
    }

    if ((v100 & 0x80) != 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    if (v123 == 101)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185A410);
      }
      __int128 v125 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "#Notice %{public}s autoincrement migration succeeded",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185A410);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice %{public}s autoincrement migration succeeded",  &v149,  v137);
        float v136 = (std::string *)v135;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::migrateDbConstraints(const char *, const CLSqlite Database::ColumnInfo *, const char **) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivit yDB::ClassCDataProtectionPolicy]",  "%s\n",  v135);
        if (v136 != buf) {
          free(v136);
        }
      }

      sub_1003C05BC(*(void *)(a1 + 80));
      char v126 = 0;
    }

    else
    {
LABEL_234:
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185A410);
      }
      int v127 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_FAULT,  "%{public}s autoincrement migration failed",  (uint8_t *)buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185A410);
        }
        LODWORD(v149.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v149.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
        LODWORD(v137) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "%{public}s autoincrement migration failed",  &v149,  v137);
        int v134 = (std::string *)v133;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::migrateDbConstraints(const char *, const CLSqlite Database::ColumnInfo *, const char **) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivit yDB::ClassCDataProtectionPolicy]",  "%s\n",  v133);
        if (v134 != buf) {
          free(v134);
        }
      }

      sub_1003C0E18(*(void *)(a1 + 80));
      char v126 = 1;
    }

    if (SHIBYTE(v142) < 0) {
      operator delete(v141[0]);
    }
    if (SHIBYTE(cap) < 0) {
      operator delete(v143[0]);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v126 & 1) != 0) {
        goto LABEL_246;
      }
    }

    else if ((v126 & 1) != 0)
    {
      goto LABEL_246;
    }

    return 1LL;
  }

void sub_100836A38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100836D58(uint64_t *a1, char **a2)
{
  int v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v34);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    if (HIBYTE(v35)) {
      goto LABEL_3;
    }
LABEL_43:
    sub_10124BD2C(v4);
LABEL_44:
    sub_100007008();
  }

  uint64_t v30 = v34[1];
  operator delete(v34[0]);
  if (!v30) {
    goto LABEL_43;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_10000CE18((uint64_t)v34);
    std::string::size_type v6 = sub_10000CF44(&v35, (uint64_t)"SELECT * from ", 14LL);
    (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 64))(__p, a1);
    if (__p[23] >= 0) {
      std::string::size_type v7 = __p;
    }
    else {
      std::string::size_type v7 = *(_BYTE **)__p;
    }
    if (__p[23] >= 0) {
      uint64_t v8 = __p[23];
    }
    else {
      uint64_t v8 = *(void *)&__p[8];
    }
    uint64_t v9 = sub_10000CF44(v6, (uint64_t)v7, v8);
    sub_10000CF44(v9, (uint64_t)" ORDER BY id ASC", 16LL);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str((std::stringbuf::string_type *)__p, &v36);
    if (__p[23] >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = *(char **)__p;
    }
    sub_1003C0D54(v10, v11, &v32);
    uint64_t v12 = v32;
    uint64_t v32 = 0LL;
    uint64_t v33 = v12;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_1003C0454(a1[10]);
    *(void *)std::string __p = 0LL;
    *(int64x2_t *)&__p[8] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(void *)&__p[24] = 0LL;
    while (!sub_1001BA11C((uint64_t)a1, &v33, (uint64_t)__p))
    {
      uint64_t v13 = a2[1];
      unint64_t v14 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v14)
      {
        uint64_t v17 = (v13 - *a2) >> 5;
        unint64_t v18 = v17 + 1;
        uint64_t v19 = v14 - (void)*a2;
        if (v19 >> 4 > v18) {
          unint64_t v18 = v19 >> 4;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20) {
          int v21 = (char *)sub_10000835C((uint64_t)(a2 + 2), v20);
        }
        else {
          int v21 = 0LL;
        }
        size_t v22 = &v21[32 * v17];
        __int128 v23 = *(_OWORD *)&__p[16];
        *(_OWORD *)size_t v22 = *(_OWORD *)__p;
        *((_OWORD *)v22 + 1) = v23;
        size_t v25 = *a2;
        std::string::size_type v24 = a2[1];
        uint64_t v26 = v22;
        if (v24 != *a2)
        {
          do
          {
            __int128 v27 = *((_OWORD *)v24 - 1);
            *((_OWORD *)v26 - 2) = *((_OWORD *)v24 - 2);
            *((_OWORD *)v26 - 1) = v27;
            v26 -= 32;
            v24 -= 32;
          }

          while (v24 != v25);
          std::string::size_type v24 = *a2;
        }

        uint64_t v16 = v22 + 32;
        *a2 = v26;
        a2[1] = v22 + 32;
        a2[2] = &v21[32 * v20];
        if (v24) {
          operator delete(v24);
        }
      }

      else
      {
        __int128 v15 = *(_OWORD *)&__p[16];
        *(_OWORD *)uint64_t v13 = *(_OWORD *)__p;
        *((_OWORD *)v13 + 1) = v15;
        uint64_t v16 = v13 + 32;
      }

      a2[1] = v16;
    }

    sub_1003C05BC(a1[10]);
    uint64_t v28 = v33;
    uint64_t v33 = 0LL;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
    }
    *(void **)((char *)v34
    uint64_t v35 = v29;
    std::streambuf::~streambuf(&v36);
    return std::ios::~ios(&v37);
  }

  return result;
}

void sub_10083702C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  sub_1011F8850((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100837094(void *a1, void **a2, double a3, double a4)
{
  uint64_t v10 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v40);
  if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    if (HIBYTE(v41)) {
      goto LABEL_3;
    }
LABEL_40:
    sub_10124BE98(v10);
    goto LABEL_41;
  }

  int v4 = (std::stringbuf *)v40[1];
  operator delete(v40[0]);
  if (!v4) {
    goto LABEL_40;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v40);
  uint64_t v11 = sub_10000CF44(&v41, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 64LL))(__p, a1);
  if (__p[23] >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = *(_BYTE **)__p;
  }
  if (__p[23] >= 0) {
    uint64_t v13 = __p[23];
  }
  else {
    uint64_t v13 = *(void *)&__p[8];
  }
  unint64_t v14 = sub_10000CF44(v11, (uint64_t)v12, v13);
  sub_10000CF44(v14, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58LL);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v15 = a1[10];
  int v4 = &v42;
  std::stringbuf::str((std::stringbuf::string_type *)__p, &v42);
  if (__p[23] >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = *(char **)__p;
  }
  sub_1003C0D54(v15, v16, &v38);
  uint64_t v5 = v38;
  uint64_t v38 = 0LL;
  uint64_t v39 = v5;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v17 = (sqlite3_stmt *)sub_100019240(v5);
  if (sub_1003B7480(v17, 1, a3))
  {
    unint64_t v18 = (sqlite3_stmt *)sub_100019240(v5);
    if (sub_1003B7480(v18, 2, a4))
    {
      *(void *)std::string __p = 0LL;
      *(int64x2_t *)&__p[8] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      *(void *)&__p[24] = 0LL;
      while (1)
      {
        uint64_t v19 = sub_1001BA11C((uint64_t)a1, &v39, (uint64_t)__p);
        if ((_DWORD)v19) {
          break;
        }
        unint64_t v20 = a2[1];
        unint64_t v21 = (unint64_t)a2[2];
        if ((unint64_t)v20 >= v21)
        {
          uint64_t v24 = ((char *)v20 - (_BYTE *)*a2) >> 5;
          unint64_t v25 = v24 + 1;
          uint64_t v26 = v21 - (void)*a2;
          if (v26 >> 4 > v25) {
            unint64_t v25 = v26 >> 4;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27) {
            uint64_t v28 = (char *)sub_10000835C((uint64_t)(a2 + 2), v27);
          }
          else {
            uint64_t v28 = 0LL;
          }
          uint64_t v29 = &v28[32 * v24];
          __int128 v30 = *(_OWORD *)&__p[16];
          *(_OWORD *)uint64_t v29 = *(_OWORD *)__p;
          *((_OWORD *)v29 + 1) = v30;
          uint64_t v32 = (char *)*a2;
          __int128 v31 = (char *)a2[1];
          uint64_t v33 = v29;
          if (v31 != *a2)
          {
            do
            {
              __int128 v34 = *((_OWORD *)v31 - 1);
              *((_OWORD *)v33 - 2) = *((_OWORD *)v31 - 2);
              *((_OWORD *)v33 - 1) = v34;
              v33 -= 32;
              v31 -= 32;
            }

            while (v31 != v32);
            __int128 v31 = (char *)*a2;
          }

          __int128 v23 = v29 + 32;
          *a2 = v33;
          a2[1] = v29 + 32;
          a2[2] = &v28[32 * v27];
          if (v31) {
            operator delete(v31);
          }
        }

        else
        {
          __int128 v22 = *(_OWORD *)&__p[16];
          *unint64_t v20 = *(_OWORD *)__p;
          v20[1] = v22;
          __int128 v23 = v20 + 2;
        }

        a2[1] = v23;
      }

      uint64_t v5 = v39;
      goto LABEL_43;
    }
  }

void sub_1008373AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100837414(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v38 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100D8A92C(v4))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185A410);
    }
    uint64_t v5 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v6 = (void *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Database is already opened., name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    if (*(void *)(a1 + 216))
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185A410);
      }
      std::string::size_type v7 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = *(void *)(a1 + 216);
        *(_DWORD *)std::stringbuf::string_type buf = 134349056;
        *(void *)std::stringbuf v42 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_FAULT,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185A410);
        }
        uint64_t v34 = *(void *)(a1 + 216);
        int v39 = 134349056;
        uint64_t v40 = v34;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "In memory buffer should have been empty! Instead it had a size of %{public}lu.",  &v39,  12);
        std::stringbuf v36 = (uint8_t *)v35;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual BOOL CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::setDatabaseAccessible() [T = VO2MaxCloudK itSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v35);
        if (v36 != buf) {
          free(v36);
        }
      }
    }

    uint64_t v9 = 1LL;
    goto LABEL_63;
  }

  sub_1001BA070(a1);
  uint64_t v9 = sub_100D8A92C(v4);
  if ((_DWORD)v9)
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185A410);
    }
    uint64_t v10 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = (void *)(a1 + 88);
      uint64_t v12 = *(void *)(a1 + 216);
      *(_DWORD *)std::stringbuf::string_type buf = 68289539;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v11;
      __int16 v45 = 2049;
      uint64_t v46 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Inserting entries into database, name:%{public, location:escape_only}s, size:%{private}llu}",  buf,  0x26u);
    }

    sub_1003C0454(*(void *)(a1 + 80));
    uint64_t v13 = *(void *)(a1 + 184);
    uint64_t v14 = *(void *)(a1 + 192);
    uint64_t v15 = (void *)(v13 + 8LL * (*(void *)(a1 + 208) >> 7));
    if (v14 == v13) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = *v15 + 32 * (*(void *)(a1 + 208) & 0x7FLL);
    }
    while (1)
    {
      if (v14 == v13)
      {
        uint64_t v22 = 0LL;
      }

      else
      {
        unint64_t v21 = *(void *)(a1 + 216) + *(void *)(a1 + 208);
        uint64_t v22 = *(void *)(v13 + ((v21 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v21 & 0x7F);
      }

      if (v16 == v22) {
        break;
      }
      if (qword_101934510 != -1) {
        dispatch_once(&qword_101934510, &stru_10185A430);
      }
      __int128 v23 = (os_log_s *)qword_101934518;
      if (os_log_type_enabled((os_log_t)qword_101934518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Adding from buffer to db.", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934510 != -1) {
          dispatch_once(&qword_101934510, &stru_10185A430);
        }
        LOWORD(v39) = 0;
        LODWORD(v37) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934518,  2LL,  "Adding from buffer to db.",  &v39,  v37);
        uint64_t v26 = (uint8_t *)v25;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::setDatabaseAccessible() [T = VO2MaxCloudK itSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v16, 1LL);
      v16 += 32LL;
      if (v16 - *v15 == 4096)
      {
        uint64_t v24 = v15[1];
        ++v15;
        uint64_t v16 = v24;
      }

      uint64_t v13 = *(void *)(a1 + 184);
      uint64_t v14 = *(void *)(a1 + 192);
    }

    sub_1003C05BC(*(void *)(a1 + 80));
  }

  else
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185A410);
    }
    uint64_t v17 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
    {
      unint64_t v18 = (void *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185A410);
      }
    }

    uint64_t v19 = (os_log_s *)qword_1019344B8;
    if (os_signpost_enabled((os_log_t)qword_1019344B8))
    {
      unint64_t v20 = (void *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)std::stringbuf v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      __int16 v43 = 2082;
      std::string::size_type v44 = v20;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Unexpected error condition! Device has been unlocked but database remains unreadable!",  "{msg%{public}.0s:Unexpected error condition! Device has been unlocked but database remains unreadable!, name:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    *(_BYTE *)(a1 + 128) = 1;
  }

  unint64_t v27 = *(void ***)(a1 + 184);
  uint64_t v28 = *(void *)(a1 + 192);
  *(void *)(a1 + 216) = 0LL;
  unint64_t v29 = v28 - (void)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      uint64_t v30 = *(void *)(a1 + 192);
      unint64_t v27 = (void **)(*(void *)(a1 + 184) + 8LL);
      *(void *)(a1 + 184) = v27;
      unint64_t v29 = v30 - (void)v27;
    }

    while (v29 > 0x10);
  }

  if (v29 >> 3 == 1)
  {
    uint64_t v31 = 64LL;
  }

  else
  {
    if (v29 >> 3 != 2) {
      goto LABEL_61;
    }
    uint64_t v31 = 128LL;
  }

  *(void *)(a1 + 208) = v31;
LABEL_61:
  uint64_t v32 = *(void **)(a1 + 144);
  if (v32)
  {

    *(void *)(a1 + 144) = 0LL;
  }

void sub_100837B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

id *sub_100837B50(uint64_t a1, uint64_t a2, char a3)
{
  v35[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v35[1] = 0LL;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72LL))(a1, a1 + 224, a2);
    return sub_1001BA1BC(v35);
  }

  if ((a3 & 1) == 0) {
    sub_1003C0454(*(void *)(a1 + 80));
  }
  uint64_t v32 = 0LL;
  int64x2_t v33 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  uint64_t v34 = 0LL;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104LL))(a1, &v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

  else
  {
    if (v6)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185A410);
      }
      uint64_t v14 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "Failed to insert record due to failure from reading the most recent entry.",  buf,  2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185A410);
        }
        LOWORD(v36) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  17LL,  "Failed to insert record due to failure from reading the most recent entry.",  &v36,  2);
        uint64_t v16 = (uint8_t *)v15;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v15);
        if (v16 != buf) {
          free(v16);
        }
      }

      goto LABEL_43;
    }

    double v7 = *(double *)(a2 + 8);
    double v8 = *(double *)v33.i64;
    double v9 = v7 - *(double *)v33.i64;
    if (v9 > 604800.0)
    {
      if (qword_1019344B0 != -1) {
        dispatch_once(&qword_1019344B0, &stru_10185A410);
      }
      uint64_t v10 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)std::stringbuf::string_type buf = 134349312;
        double v41 = *(double *)v33.i64;
        __int16 v42 = 2050;
        uint64_t v43 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  buf,  0x16u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185A410);
        }
        uint64_t v23 = *(void *)(a2 + 8);
        int v36 = 134349312;
        double v37 = *(double *)v33.i64;
        __int16 v38 = 2050;
        uint64_t v39 = v23;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf",  &v36,  22);
        unint64_t v25 = (uint8_t *)v24;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v24);
        if (v25 != buf) {
          free(v25);
        }
      }

      CLWriteStackshot("Potential CM database inconsistency, time jump", 0LL);
      double v7 = *(double *)(a2 + 8);
      double v8 = *(double *)v33.i64;
    }

    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185A410);
        }
        uint64_t v12 = (os_log_s *)qword_1019344B8;
        if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)std::stringbuf::string_type buf = 134217984;
          double v41 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  buf,  0xCu);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1019344B0 != -1) {
            dispatch_once(&qword_1019344B0, &stru_10185A410);
          }
          double v26 = *(double *)(a2 + 8);
          int v36 = 134217984;
          double v37 = v26;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the recent past.  Deleting records after %f.",  COERCE_DOUBLE(&v36));
          uint64_t v28 = (uint8_t *)v27;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, boo l) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v27);
          if (v28 != buf) {
            free(v28);
          }
        }

        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, a2);
        goto LABEL_42;
      }

      double v17 = v7 - v8;
      double v18 = *(float *)(a1 + 136);
      if (qword_1019344B0 != -1)
      {
        double v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_1019344B0, &stru_10185A410);
        double v18 = v31;
      }

      double v19 = v17 - v18;
      unint64_t v20 = (os_log_s *)qword_1019344B8;
      if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 134217984;
        double v41 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344B0 != -1) {
          dispatch_once(&qword_1019344B0, &stru_10185A410);
        }
        int v36 = 134217984;
        double v37 = v19;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  1LL,  "Entry being recorded has a startTime in the substantial past.  Shift records by %f.",  COERCE_DOUBLE(&v36));
        uint64_t v30 = (uint8_t *)v29;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual void CLActivityRecorderDb<VO2MaxCloudKitSyncEngineMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxCloudKitSyncEngineMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]",  "%s\n",  v29);
        if (v30 != buf) {
          free(v30);
        }
      }

      (*(void (**)(uint64_t, double))(*(void *)a1 + 96LL))(a1, v19);
    }

    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 144LL))(a1, &v32, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1LL);
  }

void sub_1008382A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1008382CC(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v23);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if (HIBYTE(v24)) {
      goto LABEL_3;
    }
LABEL_29:
    unint64_t v20 = (_Unwind_Exception *)sub_10124C004(v4);
    sub_1011F8850((uint64_t)v23);
    _Unwind_Resume(v20);
  }

  double v19 = v23[1];
  operator delete(v23[0]);
  if (!v19) {
    goto LABEL_29;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120LL))(a1, a2, 1LL);
    sub_10000CE18((uint64_t)v23);
    int v6 = sub_10000CF44(&v24, (uint64_t)"DELETE FROM ", 12LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" WHERE startTime > ?", 20LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v25);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v21);
    uint64_t v12 = v21;
    uint64_t v21 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, *(double *)(a2 + 8)))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    uint64_t v16 = a1[10];
    else {
      uint64_t v17 = *(void *)(v16 + 88);
    }
    sub_1003C1EC0(v16, v17);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v23
    uint64_t v24 = v18;
    std::streambuf::~streambuf(&v25);
    return std::ios::~ios(&v26);
  }

  return result;
}

uint64_t sub_10083852C(void *a1, double a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v21);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (HIBYTE(v22)) {
      goto LABEL_3;
    }
LABEL_26:
    uint64_t v18 = (_Unwind_Exception *)sub_10124C170(v4);
    sub_1011F8850((uint64_t)v21);
    _Unwind_Resume(v18);
  }

  uint64_t v17 = v21[1];
  operator delete(v21[0]);
  if (!v17) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t result = sub_100D8A92C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_10000CE18((uint64_t)v21);
    int v6 = sub_10000CF44(&v22, (uint64_t)"UPDATE ", 7LL);
    (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t size = __p.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t size = __p.__r_.__value_.__l.__size_;
    }
    double v9 = sub_10000CF44(v6, (uint64_t)p_p, size);
    sub_10000CF44(v9, (uint64_t)" SET startTime = startTime + ?", 30LL);
    uint64_t v10 = a1[10];
    std::stringbuf::str(&__p, &v23);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1003C0D54(v10, (char *)v11, &v19);
    uint64_t v12 = v19;
    uint64_t v19 = 0LL;
    double v13 = (sqlite3_stmt *)sub_100019240(v12);
    if (sub_1003B7480(v13, 1, a2))
    {
      uint64_t v14 = a1[10];
      uint64_t v15 = (sqlite3_stmt *)sub_100019240(v12);
      sub_1003BB2BC(v14, v15);
    }

    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
    }
    *(void **)((char *)v21
    uint64_t v22 = v16;
    std::streambuf::~streambuf(&v23);
    return std::ios::~ios(&v24);
  }

  return result;
}

uint64_t sub_100838764(uint64_t a1)
{
  return sub_100837414(a1 - 72);
}

uint64_t sub_10083876C(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64LL))(v22);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (HIBYTE(v23)) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v17 = (_Unwind_Exception *)sub_10124C2DC(v4);
    uint64_t v18 = v20;
    uint64_t v20 = 0LL;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
    }
    sub_1011F8850((uint64_t)v22);
    _Unwind_Resume(v17);
  }

  uint64_t v16 = v22[1];
  operator delete(v22[0]);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_3:
  sub_10000CE18((uint64_t)v22);
  uint64_t v5 = sub_10000CF44(&v23, (uint64_t)"SELECT * FROM ", 14LL);
  (*(void (**)(std::stringbuf::string_type *__return_ptr, void *))(*a1 + 64LL))(&__p, a1);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = __p.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = __p.__r_.__value_.__l.__size_;
  }
  double v8 = sub_10000CF44(v5, (uint64_t)p_p, size);
  sub_10000CF44(v8, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28LL);
  uint64_t v9 = a1[10];
  std::stringbuf::str(&__p, &v24);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1003C0D54(v9, (char *)v10, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0LL;
  uint64_t v20 = v11;
  uint64_t v12 = sub_1001BA11C((uint64_t)a1, &v20, a2);
  uint64_t v13 = v20;
  uint64_t v20 = 0LL;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void **)((char *)v22
  uint64_t v23 = v14;
  std::streambuf::~streambuf(&v24);
  std::ios::~ios(&v25);
  return v12;
}

void sub_100838994(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1008389C0(id a1)
{
  qword_101934518 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100838ED4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v4 = 0;
        unsigned int v5 = 0;
        uint64_t v6 = 0LL;
        while (1)
        {
          uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v8 = v7 + 1;
          if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
          v6 |= (unint64_t)(v9 & 0x7F) << v4;
          if ((v9 & 0x80) == 0) {
            goto LABEL_11;
          }
          v4 += 7;
          BOOL v10 = v5++ >= 9;
          if (v10)
          {
            LODWORD(v6) = 0;
            uint64_t v11 = OBJC_IVAR___PBDataReader__error;
            int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v6) = 0;
        }
LABEL_13:
        int v13 = v6 & 7;
        if (!v12 && v13 != 4)
        {
          switch((unsigned __int16)(v6 >> 3))
          {
            case 1u:
              char v15 = 0;
              unsigned int v16 = 0;
              uint64_t v17 = 0LL;
              *(_BYTE *)(a1 + 80) |= 2u;
              while (1)
              {
                uint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                unint64_t v19 = v18 + 1;
                if (v18 == -1 || v19 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                  break;
                }
                char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19;
                v17 |= (unint64_t)(v20 & 0x7F) << v15;
                if ((v20 & 0x80) == 0) {
                  goto LABEL_60;
                }
                v15 += 7;
                BOOL v10 = v16++ >= 9;
                if (v10)
                {
                  uint64_t v17 = 0LL;
                  goto LABEL_62;
                }
              }

              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_60:
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v17 = 0LL;
              }
LABEL_62:
              *(void *)(a1 + 64) = v17;
              goto LABEL_85;
            case 2u:
              *(_BYTE *)(a1 + 80) |= 1u;
              unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v21 <= 0xFFFFFFFFFFFFFFF7LL && v21 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v22 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 8;
              }

              else
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                uint64_t v22 = 0LL;
              }

              uint64_t v45 = 56LL;
              goto LABEL_82;
            case 3u:
              *(_BYTE *)(a1 + 80) |= 4u;
              unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v23 <= 0xFFFFFFFFFFFFFFF7LL && v23 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                uint64_t v22 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
              }

              else
              {
                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                uint64_t v22 = 0LL;
              }

              uint64_t v45 = 72LL;
LABEL_82:
              *(void *)(a1 + v45) = v22;
              goto LABEL_85;
            case 4u:
              if (v13 != 2)
              {
                char v36 = 0;
                unsigned int v37 = 0;
                uint64_t v38 = 0LL;
                while (1)
                {
                  uint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  unint64_t v40 = v39 + 1;
                  if (v39 == -1 || v40 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                    break;
                  }
                  char v41 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40;
                  v38 |= (unint64_t)(v41 & 0x7F) << v36;
                  if ((v41 & 0x80) == 0) {
                    goto LABEL_74;
                  }
                  v36 += 7;
                  BOOL v10 = v37++ >= 9;
                  if (v10)
                  {
                    uint64_t v42 = 0LL;
                    goto LABEL_77;
                  }
                }

                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_74:
                if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                  uint64_t v42 = 0LL;
                }
                else {
                  uint64_t v42 = v38;
                }
LABEL_77:
                PBRepeatedUInt64Add(a1 + 8, v42);
                goto LABEL_85;
              }

              uint64_t result = PBReaderPlaceMark(a2, v47);
              if (!(_DWORD)result) {
                return result;
              }
              while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length)
                   && !*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
              {
                char v24 = 0;
                unsigned int v25 = 0;
                uint64_t v26 = 0LL;
                while (1)
                {
                  uint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  unint64_t v28 = v27 + 1;
                  if (v27 == -1 || v28 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                    break;
                  }
                  char v29 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
                  v26 |= (unint64_t)(v29 & 0x7F) << v24;
                  if ((v29 & 0x80) == 0) {
                    goto LABEL_45;
                  }
                  v24 += 7;
                  BOOL v10 = v25++ >= 9;
                  if (v10)
                  {
                    uint64_t v30 = 0LL;
                    goto LABEL_48;
                  }
                }

                *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
                if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                  uint64_t v30 = 0LL;
                }
                else {
                  uint64_t v30 = v26;
                }
LABEL_48:
                PBRepeatedUInt64Add(a1 + 8, v30);
              }

              goto LABEL_58;
            case 5u:
              if (v13 == 2)
              {
                uint64_t result = PBReaderPlaceMark(a2, v47);
                if (!(_DWORD)result) {
                  return result;
                }
                while (1)
                {
                  uint64_t v32 = (unint64_t *)(a2 + OBJC_IVAR___PBDataReader__pos);
                  unint64_t v33 = *v32;
                  unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__length);
                  if (*v32 >= v34 || *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                    break;
                  }
                  if (v33 > 0xFFFFFFFFFFFFFFF7LL || v33 + 8 > v34)
                  {
                    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                    double v35 = 0.0;
                  }

                  else
                  {
                    double v35 = *(double *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
                    *uint64_t v32 = v33 + 8;
                  }

                  PBRepeatedDoubleAdd(a1 + 32, v31, v35);
                }

void *sub_100839EB0(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = v9;
  if (v9 == v8)
  {
    uint64_t v6 = 4LL;
    unsigned int v5 = v8;
    goto LABEL_5;
  }

  if (v9)
  {
    uint64_t v6 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }

  *a1 = &off_10185A460;
  return a1;
}

void sub_100839F68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    char v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100839FAC(uint64_t result, double a2)
{
  double v2 = a2 + -300.0 + 60.0;
  *(double *)(result + 40) = v2;
  return result;
}

void *sub_100839FD8(uint64_t a1)
{
  char v22 = 0;
  double v20 = 0.0;
  double v21 = 0.0;
  uint64_t v18 = 0LL;
  double v19 = 0.0;
  double v2 = (double *)(a1 + 40);
  uint64_t v3 = operator new(0x28uLL);
  *uint64_t v3 = &off_10185A4B0;
  v3[1] = &v21;
  v3[2] = &v20;
  v3[3] = &v19;
  v3[4] = &v22;
  char v24 = v3;
  v4.n128_u64[0] = 0x4072C00000000000LL;
  char v5 = sub_1004CA418(a1, v2, &v18, (uint64_t)v23, v4);
  uint64_t result = v24;
  if (v24 == v23)
  {
    uint64_t v7 = 4LL;
    uint64_t result = v23;
  }

  else
  {
    if (!v24) {
      goto LABEL_6;
    }
    uint64_t v7 = 5LL;
  }

  uint64_t result = (void *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_6:
  if ((v5 & 1) != 0)
  {
    if (v19 < 270.0 || (double v8 = v21, v21 / 300.0 < 0.800000012))
    {
      *double v2 = *(double *)(v18 + 8);
    }

    else
    {
      double v9 = v20;
      double v10 = *v2;
      double v11 = *v2 + 300.0;
      *double v2 = *v2 + 60.0;
      if (v10 < v11)
      {
        double v12 = v9 / v8;
        do
        {
          *(double *)uint64_t v14 = v10;
          double v10 = v10 + 60.0;
          *(double *)&v14[1] = v10;
          *(double *)&_DWORD v14[2] = v12;
          __int16 v15 = 8;
          char v16 = 1;
          char v17 = v22;
          uint64_t v13 = *(void *)(a1 + 32);
          if (!v13) {
            sub_100008BDC();
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 48LL))(v13, v14);
        }

        while (v10 < v11);
      }
    }
  }

  return result;
}

void sub_10083A190( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, char *a21)
{
  unint64_t v23 = a21;
  if (a21 == v21)
  {
    uint64_t v24 = 4LL;
    unint64_t v23 = &a18;
  }

  else
  {
    if (!a21) {
      goto LABEL_6;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*(void *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__n128 sub_10083A1D8(uint64_t a1)
{
  double v2 = (char *)operator new(0x28uLL);
  *(void *)double v2 = &off_10185A4B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10083A218(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185A4B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_10083A240(uint64_t a1, uint64_t a2, double *a3)
{
  double v3 = *a3;
  float v4 = *(float *)(a2 + 24) * 2.2;
  if (v4 < 3.5) {
    float v4 = 3.5;
  }
  if (*(double *)(a2 + 16) >= v4)
  {
    char v5 = *(double **)(a1 + 16);
    **(double **)(a1 + 8) = v3 + **(double **)(a1 + 8);
    *char v5 = *v5 + *(double *)(a2 + 16) * v3;
    **(_BYTE **)(a1 + 32) = (**(unsigned __int8 **)(a1 + 32) | *(unsigned __int8 *)(a2 + 29)) != 0;
  }

  if (!*(_BYTE *)(a2 + 28)) {
    double v3 = 0.0;
  }
  uint64_t v6 = *(double **)(a1 + 24);
  double result = *v6 + v3;
  *uint64_t v6 = result;
  return result;
}

uint64_t sub_10083A2D0(uint64_t a1, uint64_t a2)
{
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_10083A30C()
{
}

uint64_t sub_10083A318(uint64_t a1)
{
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 56) = 0xBFF0000000000000LL;
  sub_101024DF8(a1 + 64, 0LL);
  sub_10083A394(a1);
  return a1;
}

void sub_10083A370(_Unwind_Exception *a1)
{
}

void sub_10083A394(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0LL;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8LL);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = v5 - (void)v2;
    }

    while (v4 > 0x10);
  }

  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 64LL;
    goto LABEL_7;
  }

  if (v4 >> 3 == 2)
  {
    uint64_t v6 = 128LL;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }

  *(void *)(a1 + 784) = 0LL;
  *(_BYTE *)(a1 + 808) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 792));
  *(_BYTE *)(a1 + 49) = 0;
  *(void *)(a1 + 56) = 0xBFF0000000000000LL;
}

void sub_10083A428(int64x2_t *a1, int *a2)
{
  unint64_t v4 = a1[2].u64[1];
  if (v4 >= 0x79)
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10185A520);
    }
    uint64_t v5 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = a1[2].i64[1];
      uint64_t v7 = *(void *)(*(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 4) & 0xFFFFFFFFFFFFFF8LL))
                     + 32 * (a1[2].i64[0] & 0x7F)
                     + 8);
      *(_DWORD *)std::stringbuf::string_type buf = 67240448;
      *(_DWORD *)uint64_t v38 = v6;
      *(_WORD *)&v38[4] = 2050;
      *(void *)&v38[6] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "HRBuffer full (size %{public}d), dropping sample from %{public}lf",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_10185A520);
      }
      uint64_t v23 = a1[2].i64[1];
      uint64_t v24 = *(void *)(*(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 4) & 0xFFFFFFFFFFFFFF8LL))
                      + 32 * (a1[2].i64[0] & 0x7F)
                      + 8);
      int v33 = 67240448;
      *(_DWORD *)unint64_t v34 = v23;
      *(_WORD *)&v34[4] = 2050;
      *(void *)&v34[6] = v24;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  1LL,  "HRBuffer full (size %{public}d), dropping sample from %{public}lf",  &v33,  18);
      uint64_t v26 = (uint8_t *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxInputCollector::feedRawHeartRate(const CLCatherineData &)",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }

    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1012CE4D0);
    sub_1000ECDBC((uint64_t)a1, 1);
    a1[3].i8[0] = 0;
    unint64_t v4 = a1[2].u64[1];
  }

  if (v4
    && *(double *)(*(void *)(a1->i64[1] + (((v4 + a1[2].i64[0] - 1) >> 4) & 0xFFFFFFFFFFFFFF8LL))
                 + 32 * ((v4 + a1[2].i64[0] - 1) & 0x7F)
                 + 8) > *((double *)a2 + 5))
  {
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10185A520);
    }
    double v8 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *((void *)a2 + 5);
      unint64_t v10 = a1[2].i64[1] + a1[2].i64[0] - 1;
      uint64_t v11 = *(void *)(*(void *)(a1->i64[1] + ((v10 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v10 & 0x7F) + 8);
      *(_DWORD *)std::stringbuf::string_type buf = 134349312;
      *(void *)uint64_t v38 = v9;
      *(_WORD *)&v38[8] = 2050;
      *(void *)&v38[10] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning, received out of order HR, new time %{public}lf, previous time %{public}lf",  buf,  0x16u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_10185A520);
      }
      uint64_t v27 = *((void *)a2 + 5);
      unint64_t v28 = a1[2].i64[1] + a1[2].i64[0] - 1;
      uint64_t v29 = *(void *)(*(void *)(a1->i64[1] + ((v28 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v28 & 0x7F) + 8);
      int v33 = 134349312;
      *(void *)unint64_t v34 = v27;
      *(_WORD *)&v34[8] = 2050;
      *(void *)&v34[10] = v29;
      LODWORD(v32) = 22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  0LL,  "Warning, received out of order HR, new time %{public}lf, previous time %{public}lf",  &v33,  v32);
      uint64_t v31 = (uint8_t *)v30;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxInputCollector::feedRawHeartRate(const CLCatherineData &)",  "%s\n",  v30);
      if (v31 != buf) {
        free(v31);
      }
    }
  }

  *(_DWORD *)std::stringbuf::string_type buf = *a2;
  *(void *)&v38[4] = *((void *)a2 + 5);
  *(int8x16_t *)&v38[12] = vextq_s8(*(int8x16_t *)(a2 + 2), *(int8x16_t *)(a2 + 2), 8uLL);
  sub_10083AA18(a1, (uint64_t)buf);
  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_10185A520);
  }
  double v12 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *a2;
    uint64_t v14 = *((void *)a2 + 1);
    uint64_t v15 = *((void *)a2 + 2);
    uint64_t v16 = *((void *)a2 + 5);
    *(_DWORD *)std::stringbuf::string_type buf = 134284289;
    *(void *)uint64_t v38 = v14;
    *(_WORD *)&v38[8] = 1026;
    *(_DWORD *)&v38[10] = v13;
    *(_WORD *)&v38[14] = 2049;
    *(void *)&v38[16] = v15;
    *(_WORD *)&v38[24] = 2050;
    *(void *)&v38[26] = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "HRCollected,hr,%{private}f,source,%{public}d,conf,%{private}f,startTime,%{public}lf\n",  buf,  0x26u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10185A520);
    }
    int v17 = *a2;
    uint64_t v18 = *((void *)a2 + 1);
    uint64_t v19 = *((void *)a2 + 2);
    uint64_t v20 = *((void *)a2 + 5);
    int v33 = 134284289;
    *(void *)unint64_t v34 = v18;
    *(_WORD *)&v34[8] = 1026;
    *(_DWORD *)&v34[10] = v17;
    *(_WORD *)&v34[14] = 2049;
    *(void *)&v34[16] = v19;
    __int16 v35 = 2050;
    uint64_t v36 = v20;
    LODWORD(v32) = 38;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "HRCollected,hr,%{private}f,source,%{public}d,conf,%{private}f,startTime,%{public}lf\n",  &v33,  v32);
    char v22 = (uint8_t *)v21;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLVO2MaxInputCollector::feedRawHeartRate(const CLCatherineData &)",  "%s\n",  v21);
    if (v22 != buf) {
      free(v22);
    }
  }

__n128 sub_10083AA18(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10083B56C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  double v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8LL)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  _OWORD *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_10083AAA4( int64x2_t *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>, double a10@<D4>)
{
  int v20 = sub_10083AE5C(a1, &v37, a6);
  *(void *)(a5 + 32) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a5 + 48) = 0xFFEFFFFFFFFFFFFFLL;
  if (v20)
  {
    float v21 = a7;
    *(float *)(a5 + 24) = v21;
    *(double *)(a5 + 32) = a6;
    uint64_t v22 = v38;
    float v23 = v39;
    if (v37 == 4) {
      float v23 = 1.0;
    }
    float v24 = v40;
    *(float *)(a5 + 40) = v24;
    *(float *)(a5 + 44) = v23;
    *(void *)(a5 + 48) = v22;
    *(double *)(a5 + 64) = a8;
    *(_DWORD *)(a5 + 56) = a2;
    *(_DWORD *)(a5 + 76) = 0;
    *(_BYTE *)(a5 + 72) = a3;
    *(_BYTE *)(a5 + 73) = sub_10083B3DC((uint64_t)a1, a6);
    *(void *)(a5 + 80) = a1[49].i64[0];
    *(double *)(a5 + 88) = a9;
    *(double *)(a5 + 96) = a10;
    *(_BYTE *)(a5 + 104) = a4;
    uuid_copy((unsigned __int8 *)(a5 + 8), &a1[49].u8[8]);
  }

  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_10185A520);
  }
  unsigned int v25 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
  {
    double v26 = v39;
    double v27 = v40;
    uint64_t v28 = v38;
    BOOL v29 = sub_10083B3DC((uint64_t)a1, a6);
    *(_DWORD *)std::stringbuf::string_type buf = 134286849;
    double v70 = a7;
    __int16 v71 = 1024;
    int v72 = 0;
    __int16 v73 = 2048;
    double v74 = a6;
    __int16 v75 = 2049;
    double v76 = v27;
    __int16 v77 = 2050;
    double v78 = v26;
    __int16 v79 = 2050;
    uint64_t v80 = v28;
    __int16 v81 = 2049;
    double v82 = a8;
    __int16 v83 = 1025;
    int v84 = a2;
    __int16 v85 = 1025;
    int v86 = a3;
    __int16 v87 = 1025;
    BOOL v88 = v29;
    __int16 v89 = 1026;
    int v90 = v20;
    __int16 v91 = 2049;
    double v92 = a9;
    __int16 v93 = 2049;
    double v94 = a10;
    __int16 v95 = 1025;
    int v96 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "MetsCollected,mets,%{private}f,source,%d,metComputeTime,%f,hr,%{private}f,hrConfidence,%{public}f,hrTime,%{public} f,grade,%{private}f,gradeType,%{private}d,gps,%{private}d,stride,%{private}d,valid,%{public}d,cadence,%{private}f, pace,%{private}f,stroller,%{private}d",  buf,  0x76u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10185A520);
    }
    uint64_t v30 = qword_1019346E8;
    double v32 = v39;
    double v31 = v40;
    uint64_t v33 = v38;
    BOOL v34 = sub_10083B3DC((uint64_t)a1, a6);
    int v41 = 134286849;
    double v42 = a7;
    __int16 v43 = 1024;
    int v44 = 0;
    __int16 v45 = 2048;
    double v46 = a6;
    __int16 v47 = 2049;
    double v48 = v31;
    __int16 v49 = 2050;
    double v50 = v32;
    __int16 v51 = 2050;
    uint64_t v52 = v33;
    __int16 v53 = 2049;
    double v54 = a8;
    __int16 v55 = 1025;
    int v56 = a2;
    __int16 v57 = 1025;
    int v58 = a3;
    __int16 v59 = 1025;
    BOOL v60 = v34;
    __int16 v61 = 1026;
    int v62 = v20;
    __int16 v63 = 2049;
    double v64 = a9;
    __int16 v65 = 2049;
    double v66 = a10;
    __int16 v67 = 1025;
    int v68 = a4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v30,  2LL,  "MetsCollected,mets,%{private}f,source,%d,metComputeTime,%f,hr,%{private}f,hrConfidence,%{public}f,hrTime,%{public} f,grade,%{private}f,gradeType,%{private}d,gps,%{private}d,stride,%{private}d,valid,%{public}d,cadence,%{private}f, pace,%{private}f,stroller,%{private}d",  &v41,  118);
    uint64_t v36 = (uint8_t *)v35;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "VO2MaxInput CLVO2MaxInputCollector::feedCalorieUpdate(CFAbsoluteTime, double, GradeType, double, BOOL, double, double, BOOL)",  "%s\n",  v35);
    if (v36 != buf) {
      free(v36);
    }
  }

uint64_t sub_10083AE5C(int64x2_t *a1, int *a2, double a3)
{
  uint64_t v3 = a1[2].i64[1];
  if (!v3) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v6 = a1->i64[1];
    unint64_t v7 = a1[2].u64[0];
    uint64_t v8 = *(void *)(v6 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8LL));
    unint64_t v9 = v7 & 0x7F;
    __int128 v10 = (int *)(v8 + 32 * v9);
    uint64_t v11 = (uint64_t *)(v10 + 2);
    double v12 = *((double *)v10 + 1);
    if (v3 != 1)
    {
      double v13 = vabdd_f64(a3, v12);
      if (v13 < 5.0) {
        break;
      }
    }

    if (v3 == 1) {
      goto LABEL_20;
    }
LABEL_8:
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10185A520);
    }
    uint64_t v14 = (os_log_s *)qword_1019346E8;
    if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *v10;
      uint64_t v16 = *(void *)(v8 + 32 * v9 + 16);
      uint64_t v17 = *(void *)(v8 + 32 * v9 + 24);
      uint64_t v18 = *v11;
      uint64_t v19 = a1[2].i64[1];
      *(_DWORD *)std::stringbuf::string_type buf = 134284545;
      uint64_t v67 = v17;
      __int16 v68 = 1026;
      int v69 = v15;
      __int16 v70 = 2050;
      uint64_t v71 = v16;
      __int16 v72 = 2050;
      uint64_t v73 = v18;
      __int16 v74 = 1026;
      LODWORD(v75) = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "HRRejected,hr,%{private}f,source,%{public}d,conf,%{public}f,startTime,%{public}f,bufSize,%{public}d\n",  buf,  0x2Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346E0 != -1) {
        dispatch_once(&qword_1019346E0, &stru_10185A520);
      }
      int v20 = *v10;
      uint64_t v21 = *(void *)(v8 + 32 * v9 + 16);
      uint64_t v22 = *(void *)(v8 + 32 * v9 + 24);
      uint64_t v23 = *v11;
      uint64_t v24 = a1[2].i64[1];
      int v48 = 134284545;
      uint64_t v49 = v22;
      __int16 v50 = 1026;
      int v51 = v20;
      __int16 v52 = 2050;
      uint64_t v53 = v21;
      __int16 v54 = 2050;
      uint64_t v55 = v23;
      __int16 v56 = 1026;
      LODWORD(v57) = v24;
      LODWORD(v46) = 44;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "HRRejected,hr,%{private}f,source,%{public}d,conf,%{public}f,startTime,%{public}f,bufSize,%{public}d\n",  &v48,  v46);
      double v26 = (uint8_t *)v25;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLVO2MaxInputCollector::getMostRecentHRSample(CFAbsoluteTime, HRSample &)",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }

    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1012CE4D0);
    sub_1000ECDBC((uint64_t)a1, 1);
    a1[3].i8[0] = 0;
    uint64_t v3 = a1[2].i64[1];
    if (!v3) {
      return 0LL;
    }
  }

  if (a1[3].i8[0]
    && v13 >= vabdd_f64( a3,  *(double *)(*(void *)(v6 + (((v7 + 1) >> 4) & 0xFFFFFFFFFFFFFF8LL))
                          + 32LL * (((_BYTE)v7 + 1) & 0x7F)
                          + 8)))
  {
    goto LABEL_8;
  }

BOOL sub_10083B3DC(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 808)) {
    return 0LL;
  }
  if (vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 56)) > 30.0)
  {
    sub_100222B94(v7, (uint64_t)"CLVO2MaxInputCollector::strideCalConverged", 0);
    sub_101026CBC(a1 + 64, 0, (uint64_t)v5, a2 + -30.0, a2);
    *(_BYTE *)(a1 + 49) = objc_msgSend( -[CLServiceVendor proxyForService:]( +[CLServiceVendor sharedInstance]( CLServiceVendor,  "sharedInstance"),  "proxyForService:",  @"CLStepCountNotifier"),  "syncgetIsStrideCalibrationConvergedMedianForSpeed:",  v6 / (a2 - (a2 + -30.0)));
    *(CFAbsoluteTime *)(a1 + 56) = CFAbsoluteTimeGetCurrent();
    sub_1001BA1BC(v7);
  }

  return *(_BYTE *)(a1 + 49) != 0;
}

void sub_10083B4B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10083B4D0(uint64_t a1, uint64_t a2)
{
  id v4 = +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:]( &OBJC_CLASS___CMWorkout,  "CLMotionActivityTypeFromCMWorkoutType:",  *(void *)(a2 + 112));
  if ((CLMotionActivity::isTypePedestrian(v4) & 1) != 0) {
    char isTypeIndoorPedestrian = 1;
  }
  else {
    char isTypeIndoorPedestrian = CLMotionActivity::isTypeIndoorPedestrian(v4);
  }
  *(_BYTE *)(a1 + 808) = isTypeIndoorPedestrian;
  uuid_copy((unsigned __int8 *)(a1 + 792), (const unsigned __int8 *)(a2 + 64));
  uint64_t result = sub_100BEF6EC(*(void *)(a2 + 112), *(void *)(a2 + 120));
  *(void *)(a1 + 784) = result;
  return result;
}

void sub_10083B540(id a1)
{
  qword_1019346E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_10083B56C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    double v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000071BC(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_10083B834( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10083B880()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_101998DE8, (void *)&_mh_execute_header);
}

uint64_t sub_10083B8C4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)a1 = a1 + 8;
  *(_BYTE *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 32) = a1 + 40;
  BOOL v3 = (uint64_t **)(a1 + 32);
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = a2;
  *(_BYTE *)(a1 + 64) = 0;
  if (qword_101934710 != -1) {
    dispatch_once(&qword_101934710, &stru_10185A540);
  }
  unint64_t v4 = (os_log_s *)qword_101934718;
  if (os_log_type_enabled((os_log_t)qword_101934718, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLExerciseMinuteController::CLExerciseMinuteController called",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934710 != -1) {
      dispatch_once(&qword_101934710, &stru_10185A540);
    }
    LOWORD(v23) = 0;
    LODWORD(v22) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934718,  2LL,  "CLExerciseMinuteController::CLExerciseMinuteController called",  &v23,  v22);
    uint64_t v21 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLExerciseMinuteController::CLExerciseMinuteController(CLGenericFitnessEstimatorProtocol *)",  "%s\n",  v20);
    if (v21 != buf) {
      free(v21);
    }
  }

  if (sub_1001B9A1C())
  {
    uint64_t v5 = (uint64_t *)operator new(0x90uLL);
    uint64_t v26 = 0LL;
    double v6 = (uint8_t *)operator new(0x20uLL);
    *(void *)double v6 = &off_10185A570;
    *((void *)v6 + 1) = sub_10083BCE4;
    *((void *)v6 + 2) = 0LL;
    *((void *)v6 + 3) = a1;
    uint64_t v26 = v6;
    sub_1004C9558((uint64_t)v5, (uint64_t)buf);
    uint64_t v23 = v5;
    unint64_t v7 = v26;
    if (v26 == buf)
    {
      uint64_t v8 = 4LL;
      unint64_t v7 = buf;
    }

    else
    {
      if (!v26)
      {
LABEL_12:
        HIBYTE(v22) = 0;
        *(void *)std::stringbuf::string_type buf = (char *)&v22 + 7;
        unint64_t v9 = sub_10083C864(v3, (unsigned __int8 *)&v22 + 7, (uint64_t)&unk_1012CF090, (_BYTE **)buf);
        uint64_t v10 = v23;
        uint64_t v23 = 0LL;
        uint64_t v11 = v9[5];
        void v9[5] = v10;
        if (v11)
        {
          (*(void (**)(uint64_t *))(*v11 + 8))(v11);
          uint64_t v12 = (uint64_t)v23;
          uint64_t v23 = 0LL;
          if (v12) {
            sub_10083C9F8((uint64_t)&v23, v12);
          }
        }

        uint64_t v13 = (uint64_t *)operator new(0xC8uLL);
        uint64_t v26 = 0LL;
        BOOL v14 = (uint8_t *)operator new(0x20uLL);
        *(void *)BOOL v14 = &off_10185A570;
        *((void *)v14 + 1) = sub_10083BCE4;
        *((void *)v14 + 2) = 0LL;
        *((void *)v14 + 3) = a1;
        uint64_t v26 = v14;
        sub_100B6B4B0(v13, buf);
        uint64_t v15 = v26;
        if (v26 == buf)
        {
          uint64_t v16 = 4LL;
          uint64_t v15 = buf;
        }

        else
        {
          if (!v26) {
            goto LABEL_20;
          }
          uint64_t v16 = 5LL;
        }

        (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_20:
        unsigned __int8 v24 = 1;
        *(void *)std::stringbuf::string_type buf = &v24;
        uint64_t v17 = sub_10083C864(v3, &v24, (uint64_t)&unk_1012CF090, (_BYTE **)buf);
        uint64_t v18 = v17[5];
        v17[5] = v13;
        if (v18) {
          (*(void (**)(uint64_t *))(*v18 + 8))(v18);
        }
        goto LABEL_22;
      }

      uint64_t v8 = 5LL;
    }

    (*(void (**)(void))(*(void *)v7 + 8 * v8))();
    goto LABEL_12;
  }

void sub_10083BC24(_Unwind_Exception *a1)
{
}

void sub_10083BCE4(uint64_t a1, uint64_t *a2)
{
  int v4 = sub_10083C4AC(a1, (__int128 *)a2);
  if (qword_101934710 != -1) {
    dispatch_once(&qword_101934710, &stru_10185A540);
  }
  uint64_t v5 = (os_log_s *)qword_101934718;
  if (os_log_type_enabled((os_log_t)qword_101934718, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *a2;
    int v7 = (int)(*(double *)a2 / 60.0);
    *(_DWORD *)std::stringbuf::string_type buf = 134350593;
    double v8 = (double)v7;
    uint64_t v9 = a2[2];
    int v10 = *((unsigned __int16 *)a2 + 12);
    int v11 = *((unsigned __int8 *)a2 + 26);
    int v12 = *((unsigned __int8 *)a2 + 27);
    *(double *)&uint8_t buf[4] = v8 * 60.0;
    __int16 v41 = 2050;
    uint64_t v42 = v6;
    __int16 v43 = 2049;
    uint64_t v44 = v9;
    __int16 v45 = 1026;
    int v46 = v10;
    __int16 v47 = 1026;
    int v48 = v11;
    __int16 v49 = 1026;
    int v50 = v12;
    __int16 v51 = 1026;
    int v52 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "ExerciseMinute, adjustedStartTime, %{public}.3f, startTime, %{public}.3f, averageIntensity, %{private}f, awardMode , %{public}d, inWorkoutSession, %{public}d, hasElevationCredit, %{public}d, duplicate, %{public}d",  buf,  0x38u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934710 != -1) {
      dispatch_once(&qword_101934710, &stru_10185A540);
    }
    uint64_t v17 = *a2;
    int v18 = (int)(*(double *)a2 / 60.0);
    int v26 = 134350593;
    double v19 = (double)v18;
    uint64_t v20 = a2[2];
    int v21 = *((unsigned __int16 *)a2 + 12);
    int v22 = *((unsigned __int8 *)a2 + 26);
    int v23 = *((unsigned __int8 *)a2 + 27);
    double v27 = v19 * 60.0;
    __int16 v28 = 2050;
    uint64_t v29 = v17;
    __int16 v30 = 2049;
    uint64_t v31 = v20;
    __int16 v32 = 1026;
    int v33 = v21;
    __int16 v34 = 1026;
    int v35 = v22;
    __int16 v36 = 1026;
    int v37 = v23;
    __int16 v38 = 1026;
    int v39 = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934718,  0LL,  "ExerciseMinute, adjustedStartTime, %{public}.3f, startTime, %{public}.3f, averageIntensity, %{private}f, awardMode , %{public}d, inWorkoutSession, %{public}d, hasElevationCredit, %{public}d, duplicate, %{public}d",  &v26,  56);
    unint64_t v25 = (char *)v24;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLExerciseMinuteController::recordExerciseMinute(const ExerciseMinute &)",  "%s\n",  v24);
    if (v25 != buf) {
      free(v25);
    }
  }

  if (*(_BYTE *)(a1 + 64)) {
    char v13 = v4;
  }
  else {
    char v13 = 1;
  }
  if ((v13 & 1) == 0)
  {
    BOOL v14 = *(void (****)(void, _BYTE *))(a1 + 56);
    if (v14)
    {
      *(double *)std::stringbuf::string_type buf = (double)(int)(*(double *)a2 / 60.0) * 60.0;
      (**v14)(v14, buf);
    }

    if (*((_BYTE *)a2 + 26))
    {
      uint64_t v15 = sub_1008D9630();
      sub_1008D9918(v15, *((unsigned __int8 *)a2 + 27));
    }

    uint64_t v16 = (dispatch_queue_t *)sub_100B354EC();
    sub_100B36608(v16, *((_BYTE *)a2 + 26));
  }

uint64_t sub_10083BFDC(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  BOOL v3 = (void *)(a1 + 40);
  sub_10043B178(a1 + 32, *(void **)(a1 + 40));
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 48) = 0LL;
  *BOOL v3 = 0LL;
  sub_10043B178(v2, 0LL);
  sub_100008390(a1, *(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10083C040(uint64_t a1, uint64_t a2, double a3)
{
  if (qword_101934710 != -1) {
    dispatch_once(&qword_101934710, &stru_10185A540);
  }
  uint64_t v6 = (os_log_s *)qword_101934718;
  if (os_log_type_enabled((os_log_t)qword_101934718, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 134217984;
    double v18 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "CLExerciseMinuteController::feedNatalie called, rawMets, %f",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934710 != -1) {
      dispatch_once(&qword_101934710, &stru_10185A540);
    }
    int v15 = 134217984;
    double v16 = a3;
    BOOL v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934718,  2LL,  "CLExerciseMinuteController::feedNatalie called, rawMets, %f",  COERCE_DOUBLE(&v15));
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLExerciseMinuteController::feedNatalie(double, const CLNatalieModelInput &)",  "%s\n",  v14);
  }

  uint64_t result = sub_10083C260(a1, a2);
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + 24);
    uint64_t v10 = a1 + 40;
    do
    {
      unsigned int v11 = *(unsigned __int8 *)(v8 + 32);
      BOOL v12 = v11 >= v9;
      if (v11 >= v9) {
        char v13 = (uint64_t *)v8;
      }
      else {
        char v13 = (uint64_t *)(v8 + 8);
      }
      if (v12) {
        uint64_t v10 = v8;
      }
      uint64_t v8 = *v13;
    }

    while (*v13);
    if (v10 != a1 + 40 && v9 >= *(unsigned __int8 *)(v10 + 32)) {
      return (*(uint64_t (**)(void, uint64_t, double))(**(void **)(v10 + 40) + 16LL))( *(void *)(v10 + 40),  a2,  a3);
    }
  }

  return result;
}

uint64_t sub_10083C260(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 1392);
  sub_1004F2598();
  uint64_t result = sub_1001B9A1C();
  char v6 = 0;
  if ((_DWORD)result && v4)
  {
    if (*(_BYTE *)(a2 + 352)) {
      BOOL v7 = *(_DWORD *)(a2 + 152) == 90603;
    }
    else {
      BOOL v7 = 1;
    }
    char v6 = v7;
  }

  *(_BYTE *)(a1 + 24) = v6;
  return result;
}

void sub_10083C2C0(uint64_t a1, uint64_t a2)
{
  if (qword_101934710 != -1) {
    dispatch_once(&qword_101934710, &stru_10185A540);
  }
  int v4 = (os_log_s *)qword_101934718;
  if (os_log_type_enabled((os_log_t)qword_101934718, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "CLExerciseMinuteController::feedBodyMetrics called",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934710 != -1) {
      dispatch_once(&qword_101934710, &stru_10185A540);
    }
    v12[0] = 0;
    unsigned int v11 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934718,  2LL,  "CLExerciseMinuteController::feedBodyMetrics called",  v12,  2);
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLExerciseMinuteController::feedBodyMetrics(const CLBodyMetrics &)",  "%s\n",  v11);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 24);
    uint64_t v7 = a1 + 40;
    do
    {
      unsigned int v8 = *(unsigned __int8 *)(v5 + 32);
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        uint64_t v10 = (uint64_t *)v5;
      }
      else {
        uint64_t v10 = (uint64_t *)(v5 + 8);
      }
      if (v9) {
        uint64_t v7 = v5;
      }
      uint64_t v5 = *v10;
    }

    while (*v10);
  }

uint64_t sub_10083C4AC(uint64_t a1, __int128 *a2)
{
  double v4 = (double)(int)(*(double *)a2 / 60.0) * 60.0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v6 = a1 + 8;
  do
  {
    uint64_t v7 = (uint64_t *)(v5 + 8);
    if (*(double *)(v5 + 32) >= v4)
    {
      uint64_t v7 = (uint64_t *)v5;
      uint64_t v6 = v5;
    }

    uint64_t v5 = *v7;
  }

  while (*v7);
  if (v6 == a1 + 8 || v4 < *(double *)(v6 + 32))
  {
LABEL_13:
    *(double *)int v23 = (double)(int)(*(double *)a2 / 60.0) * 60.0;
    *(void *)std::stringbuf::string_type buf = v23;
    uint64_t v10 = sub_10083CA40((uint64_t **)a1, (double *)v23, (uint64_t)&unk_1012CF090, (void **)buf);
    HIDWORD(v22) = 0;
    __int128 v11 = *a2;
    *(_OWORD *)(v10 + 7) = a2[1];
    *(_OWORD *)(v10 + 5) = v11;
  }

  else
  {
    *(_WORD *)(v6 + 64) |= *((_WORD *)a2 + 12);
    char v8 = *(_BYTE *)(v6 + 66);
    if (!v8) {
      char v8 = *((_BYTE *)a2 + 26);
    }
    *(_BYTE *)(v6 + 66) = v8;
    char v9 = *(_BYTE *)(v6 + 67);
    if (!v9) {
      char v9 = *((_BYTE *)a2 + 27);
    }
    *(_BYTE *)(v6 + 67) = v9;
    HIDWORD(v22) = 1;
  }

  if (*(void *)(a1 + 16) >= 8uLL)
  {
    do
    {
      double v12 = *(double *)(*(void *)a1 + 40LL);
      uint64_t v13 = *(void *)(*(void *)a1 + 56LL);
      int v14 = *(unsigned __int16 *)(*(void *)a1 + 64LL);
      int v15 = *(unsigned __int8 *)(*(void *)a1 + 66LL);
      int v16 = *(unsigned __int8 *)(*(void *)a1 + 67LL);
      if (qword_101934710 != -1) {
        dispatch_once(&qword_101934710, &stru_10185A540);
      }
      uint64_t v17 = (os_log_s *)qword_101934718;
      if (os_log_type_enabled((os_log_t)qword_101934718, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 134350337;
        *(double *)&uint8_t buf[4] = (double)(int)(v12 / 60.0) * 60.0;
        __int16 v35 = 2050;
        double v36 = v12;
        __int16 v37 = 2049;
        uint64_t v38 = v13;
        __int16 v39 = 1026;
        int v40 = v14;
        __int16 v41 = 1026;
        int v42 = v15;
        __int16 v43 = 1026;
        int v44 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Purging ExerciseMinute, adjustedStartTime, %{public}.3f, startTime, %{public}.3f, averageIntensity, %{private} f, awardMode, %{public}d, inWorkoutSession, %{public}d, hasElevationCredit, %{public}d",  buf,  0x32u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934710 != -1) {
          dispatch_once(&qword_101934710, &stru_10185A540);
        }
        *(_DWORD *)int v23 = 134350337;
        *(double *)&v23[4] = (double)(int)(v12 / 60.0) * 60.0;
        __int16 v24 = 2050;
        double v25 = v12;
        __int16 v26 = 2049;
        uint64_t v27 = v13;
        __int16 v28 = 1026;
        int v29 = v14;
        __int16 v30 = 1026;
        int v31 = v15;
        __int16 v32 = 1026;
        int v33 = v16;
        LODWORD(v22) = 50;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934718,  2LL,  "Purging ExerciseMinute, adjustedStartTime, %{public}.3f, startTime, %{public}.3f, averageIntensity, %{private} f, awardMode, %{public}d, inWorkoutSession, %{public}d, hasElevationCredit, %{public}d",  v23,  v22);
        uint64_t v20 = (char *)v19;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLExerciseMinuteController::updateExerciseMinuteMap(const ExerciseMinute &)",  "%s\n",  v19);
        if (v20 != buf) {
          free(v20);
        }
      }

      double v18 = *(uint64_t **)a1;
      sub_1000087E8((uint64_t **)a1, *(uint64_t **)a1);
      operator delete(v18);
    }

    while (*(void *)(a1 + 16) > 7uLL);
  }

  return HIDWORD(v22);
}

void sub_10083C838(id a1)
{
  qword_101934718 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ExerciseMinutes");
}

uint64_t **sub_10083C864(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    char v9 = a1 + 1;
LABEL_10:
    __int128 v11 = operator new(0x30uLL);
    v11[32] = **a4;
    *((void *)v11 + 5) = 0LL;
    sub_1000085FC(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

__n128 sub_10083C924(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_10185A570;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10083C968(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185A570;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10083C994(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  BOOL v3 = (void *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v3 + v2);
  }
  return v2(v3);
}

uint64_t sub_10083C9B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10083C9EC()
{
}

void sub_10083C9F8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    BOOL v3 = (void **)(a2 + 56);
    sub_1004CADB0(&v3);
    sub_1000EAA04((void *)(a2 + 8));
    operator delete((void *)a2);
  }

uint64_t **sub_10083CA40(uint64_t **a1, double *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    double v8 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        double v10 = *((double *)v6 + 4);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = (uint64_t *)*v6;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    char v9 = a1 + 1;
LABEL_10:
    __int128 v11 = (char *)operator new(0x48uLL);
    *((void *)v11 + 4) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_1000085FC(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t sub_10083CB08()
{
  dword_101998E18 = 800;
  __cxa_atexit((void (*)(void *))sub_100355650, qword_101998E00, (void *)&_mh_execute_header);
  sub_1010DDBC0(qword_101998E20, "DmFp");
  dword_101998E38 = 200;
  return __cxa_atexit((void (*)(void *))sub_100355650, qword_101998E20, (void *)&_mh_execute_header);
}

uint64_t sub_10083CB94(unsigned int a1)
{
  if (a1 > 0xE) {
    return 102LL;
  }
  else {
    return dword_1013393B4[a1];
  }
}

CFStringRef sub_10083CBB4(unsigned int a1)
{
  if (a1 > 0xE) {
    return @"CLSubHarvesterApp";
  }
  else {
    return *(&off_10185A640 + (int)a1);
  }
}

void sub_10083CBD8(int a1)
{
  __asm { BR              X10 }

void *sub_10083CC20()
{
  return sub_1010DDBC0(v0, "CLSubHarvesterCellLegacy");
}

void sub_10083CFE0(id a1)
{
  qword_1019349B8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_10083D00C(uint64_t a1, void *a2, int a3, double a4, double a5)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v6;
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(v6 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 32) = a3;
  sub_100CFC0DC(a3, (std::string *)(a1 + 40));
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 108) = xmmword_1013393F0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 124) = unk_101339400;
  *(_OWORD *)(a1 + 140) = xmmword_101339410;
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)&xmmword_101339410 + 12);
  return a1;
}

void sub_10083D098(_Unwind_Exception *a1)
{
}

void sub_10083D0AC(uint64_t a1, __int128 *a2)
{
  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_10185A6D8);
  }
  double v4 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 63) < 0)
    {
      sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }

    else
    {
      *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 40);
      uint64_t v21 = *(void *)(a1 + 56);
    }

    uint64_t v5 = __p;
    if (v21 < 0) {
      uint64_t v5 = (void **)__p[0];
    }
    uint64_t v6 = "update";
    if (!*(_BYTE *)(a1 + 104)) {
      uint64_t v6 = "init";
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136446466;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&buf[14] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "BoutDetector (%{public}s): Received user info (%s)",  buf,  0x16u);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10185A6D8);
    }
    uint64_t v10 = qword_1019346B8;
    if (*(char *)(a1 + 63) < 0)
    {
      sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }

    else
    {
      *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
      *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
    }

    __int128 v11 = buf;
    if (buf[23] < 0) {
      __int128 v11 = *(_BYTE **)buf;
    }
    double v12 = "update";
    if (!*(_BYTE *)(a1 + 104)) {
      double v12 = "init";
    }
    int v16 = 136446466;
    uint64_t v17 = v11;
    __int16 v18 = 2080;
    double v19 = v12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v10,  2LL,  "BoutDetector (%{public}s): Received user info (%s)",  &v16,  22);
    int v14 = v13;
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::BoutDetector::handleUserInfoUpdate(const CLBodyMetrics &)",  "%s\n",  v14);
  }

  __int128 v7 = *a2;
  __int128 v8 = a2[1];
  __int128 v9 = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 140) = a2[2];
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 124) = v8;
  *(_OWORD *)(a1 + 108) = v7;
  *(_BYTE *)(a1 + 104) = 1;
  if (*(_DWORD *)(a1 + 148))
  {
  }

void sub_10083D394(uint64_t a1, int a2)
{
  double v3 = *(double *)(a1 + 80);
  if (v3 != 0.0)
  {
    double v4 = (uint64_t *)(a1 + 72);
    double v5 = *(double *)(a1 + 72);
    uint64_t v6 = (_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 96) = a2;
    double v7 = v3 - v5;
    if (v7 >= 0.0001 && v7 <= *(double *)(a1 + 16))
    {
      (*(void (**)(void))(**(void **)a1 + 16LL))();
      if (*(_DWORD *)(a1 + 64)) {
        goto LABEL_79;
      }
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10185A6D8);
      }
      __int128 v11 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 40);
          *(void *)&__p[16] = *(void *)(a1 + 56);
        }

        uint64_t v22 = __p;
        if (__p[23] < 0) {
          uint64_t v22 = *(_BYTE **)__p;
        }
        uint64_t v23 = *v4;
        *(_DWORD *)std::stringbuf::string_type buf = 136446466;
        *(void *)&uint8_t buf[4] = v22;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&buf[14] = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "BoutDetector (%{public}s): Failed to write new bout %{public}.2f",  buf,  0x16u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_79;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10185A6D8);
      }
      uint64_t v24 = qword_1019346B8;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
      }

      int v40 = buf;
      if (buf[23] < 0) {
        int v40 = *(_BYTE **)buf;
      }
      uint64_t v41 = *v4;
      *(_DWORD *)__dst = 136446466;
      *(void *)&__dst[4] = v40;
      *(_WORD *)&__dst[12] = 2050;
      *(void *)&__dst[14] = v41;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v24,  16LL,  "BoutDetector (%{public}s): Failed to write new bout %{public}.2f",  __dst,  22);
      __int16 v34 = v42;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    else if (fabs(v7) >= 0.0001)
    {
      if (v7 >= 0.0)
      {
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10185A6D8);
        }
        double v12 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_FAULT))
        {
          if (*(char *)(a1 + 63) < 0)
          {
            sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
          }

          else
          {
            *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
            *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
          }

          double v25 = buf;
          if (buf[23] < 0) {
            double v25 = *(_BYTE **)buf;
          }
          uint64_t v26 = *(void *)(a1 + 72);
          uint64_t v27 = *(void *)(a1 + 80);
          *(_DWORD *)std::stringbuf::string_type __p = 136446723;
          *(void *)&__p[4] = v25;
          *(_WORD *)&__p[12] = 2049;
          *(void *)&__p[14] = v26;
          *(_WORD *)&__p[22] = 2049;
          uint64_t v51 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_FAULT,  "BoutDetector (%{public}s): exceeded max duration. Should not be possible. startTime,%{private}.3f,endTime,%{private}.3f",  __p,  0x20u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_79;
        }
        bzero(__p, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10185A6D8);
        }
        uint64_t v35 = qword_1019346B8;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          *(void *)&__dst[16] = *(void *)(a1 + 56);
        }

        __int16 v43 = __dst;
        if (__dst[23] < 0) {
          __int16 v43 = *(_BYTE **)__dst;
        }
        uint64_t v44 = *(void *)(a1 + 72);
        uint64_t v45 = *(void *)(a1 + 80);
        *(_DWORD *)std::stringbuf::string_type buf = 136446723;
        *(void *)&uint8_t buf[4] = v43;
        *(_WORD *)&_BYTE buf[12] = 2049;
        *(void *)&buf[14] = v44;
        *(_WORD *)&buf[22] = 2049;
        uint64_t v49 = v45;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v35,  17LL,  "BoutDetector (%{public}s): exceeded max duration. Should not be possible. startTime,%{private}.3f,endTime,%{private}.3f",  buf,  32);
        __int16 v34 = v46;
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
      }

      else
      {
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10185A6D8);
        }
        uint64_t v10 = (os_log_s *)qword_1019346B8;
        if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 63) < 0)
          {
            sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
          }

          else
          {
            *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
            *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
          }

          __int16 v18 = buf;
          if (buf[23] < 0) {
            __int16 v18 = *(_BYTE **)buf;
          }
          uint64_t v19 = *(void *)(a1 + 72);
          uint64_t v20 = *(void *)(a1 + 80);
          *(_DWORD *)std::stringbuf::string_type __p = 136446722;
          *(void *)&__p[4] = v18;
          *(_WORD *)&__p[12] = 2050;
          *(void *)&__p[14] = v19;
          *(_WORD *)&__p[22] = 2050;
          uint64_t v51 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "BoutDetector (%{public}s): duration is negative. Time likely rolled back. startTime,%{public}.2f,endTime,%{public}.2f",  __p,  0x20u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        if (!sub_1002921D0(115, 0)) {
          goto LABEL_79;
        }
        bzero(__p, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10185A6D8);
        }
        uint64_t v21 = qword_1019346B8;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          *(void *)&__dst[16] = *(void *)(a1 + 56);
        }

        double v36 = __dst;
        if (__dst[23] < 0) {
          double v36 = *(_BYTE **)__dst;
        }
        uint64_t v37 = *(void *)(a1 + 72);
        uint64_t v38 = *(void *)(a1 + 80);
        *(_DWORD *)std::stringbuf::string_type buf = 136446722;
        *(void *)&uint8_t buf[4] = v36;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&buf[14] = v37;
        *(_WORD *)&buf[22] = 2050;
        uint64_t v49 = v38;
        _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v21,  16LL,  "BoutDetector (%{public}s): duration is negative. Time likely rolled back. startTime,%{public}.2f,endTime,%{public}.2f",  buf,  32);
        __int16 v34 = v39;
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
      }
    }

    else
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10185A6D8);
      }
      __int128 v8 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 40);
          *(void *)&__p[16] = *(void *)(a1 + 56);
        }

        int v15 = __p;
        if (__p[23] < 0) {
          int v15 = *(_BYTE **)__p;
        }
        uint64_t v16 = *v4;
        *(_DWORD *)std::stringbuf::string_type buf = 136446466;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&_BYTE buf[12] = 2050;
        *(void *)&buf[14] = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "BoutDetector (%{public}s): zero-length bout (%{public}.2f). Ignoring.",  buf,  0x16u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      if (!sub_1002921D0(115, 0)) {
        goto LABEL_79;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10185A6D8);
      }
      uint64_t v17 = qword_1019346B8;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
      }

      int v31 = buf;
      if (buf[23] < 0) {
        int v31 = *(_BYTE **)buf;
      }
      uint64_t v32 = *v4;
      *(_DWORD *)__dst = 136446466;
      *(void *)&__dst[4] = v31;
      *(_WORD *)&__dst[12] = 2050;
      *(void *)&__dst[14] = v32;
      _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v17,  16LL,  "BoutDetector (%{public}s): zero-length bout (%{public}.2f). Ignoring.",  __dst,  22);
      __int16 v34 = v33;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMobility::BoutDetector::stopBout(BoutTerminationReason)", "%s\n", v34);
    if (v34 != __p) {
      free(v34);
    }
LABEL_79:
    *uint64_t v6 = 0;
    *(_OWORD *)double v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    return;
  }

  if (qword_1019346B0 != -1) {
    dispatch_once(&qword_1019346B0, &stru_10185A6D8);
  }
  __int128 v9 = (os_log_s *)qword_1019346B8;
  if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a1 + 63) < 0)
    {
      sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }

    else
    {
      *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 40);
      *(void *)&__p[16] = *(void *)(a1 + 56);
    }

    uint64_t v13 = __p;
    if (__p[23] < 0) {
      uint64_t v13 = *(_BYTE **)__p;
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "BoutDetector (%{public}s): Cannot stop bout, no bout in progress",  buf,  0xCu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10185A6D8);
    }
    uint64_t v14 = qword_1019346B8;
    if (*(char *)(a1 + 63) < 0)
    {
      sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }

    else
    {
      *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
      *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
    }

    __int16 v28 = buf;
    if (buf[23] < 0) {
      __int16 v28 = *(_BYTE **)buf;
    }
    *(_DWORD *)__dst = 136446210;
    *(void *)&__dst[4] = v28;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v14,  16LL,  "BoutDetector (%{public}s): Cannot stop bout, no bout in progress",  __dst,  12);
    __int16 v30 = v29;
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMobility::BoutDetector::stopBout(BoutTerminationReason)", "%s\n", v30);
    if (v30 != __p) {
      free(v30);
    }
  }

void sub_10083DE84(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 80) == 0.0)
  {
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 32);
    *(double *)(a1 + 72) = a2;
    *(double *)(a1 + 80) = a2;
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10185A6D8);
    }
    double v5 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
      }

      __int128 v9 = buf;
      if (buf[23] < 0) {
        __int128 v9 = *(_BYTE **)buf;
      }
      uint64_t v10 = *(void *)(a1 + 72);
      *(_DWORD *)std::stringbuf::string_type __p = 136446466;
      *(void *)&__p[4] = v9;
      *(_WORD *)&__p[12] = 2050;
      *(void *)&__p[14] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "BoutDetector (%{public}s): Identified potential walking bout... marking as in progress (start: %{public}.2f)",  __p,  0x16u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10185A6D8);
      }
      uint64_t v11 = qword_1019346B8;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }

      uint64_t v16 = __p;
      if (__p[23] < 0) {
        uint64_t v16 = *(_BYTE **)__p;
      }
      uint64_t v17 = *(void *)(a1 + 72);
      *(_DWORD *)__dst = 136446466;
      *(void *)&__dst[4] = v16;
      *(_WORD *)&__dst[12] = 2050;
      *(void *)&__dst[14] = v17;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  1LL,  "BoutDetector (%{public}s): Identified potential walking bout... marking as in progress (start: %{public}.2f)",  __dst,  22);
      int v15 = v18;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMobility::BoutDetector::startBout(CFAbsoluteTime)", "%s\n", v15);
      goto LABEL_45;
    }
  }

  else
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10185A6D8);
    }
    double v4 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }

      uint64_t v6 = __p;
      if (__p[23] < 0) {
        uint64_t v6 = *(_BYTE **)__p;
      }
      uint64_t v7 = *(void *)(a1 + 72);
      *(_DWORD *)std::stringbuf::string_type buf = 136446722;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 2050;
      double v23 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "BoutDetector (%{public}s): bout already in progress (%{public}.2f), cannot start bout at startTime %{public}.2f",  buf,  0x20u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10185A6D8);
      }
      uint64_t v8 = qword_1019346B8;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
        *(void *)&__dst[16] = *(void *)(a1 + 56);
      }

      double v12 = __dst;
      if (__dst[23] < 0) {
        double v12 = *(_BYTE **)__dst;
      }
      uint64_t v13 = *(void *)(a1 + 72);
      *(_DWORD *)std::stringbuf::string_type __p = 136446722;
      *(void *)&__p[4] = v12;
      *(_WORD *)&__p[12] = 2050;
      *(void *)&__p[14] = v13;
      *(_WORD *)&__p[22] = 2050;
      double v21 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v8,  16LL,  "BoutDetector (%{public}s): bout already in progress (%{public}.2f), cannot start bout at startTime %{public}.2f",  __p,  32);
      int v15 = v14;
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMobility::BoutDetector::startBout(CFAbsoluteTime)", "%s\n", v15);
LABEL_45:
      if (v15 != buf) {
        free(v15);
      }
    }
  }

void sub_10083E320(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 80) == 0.0)
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10185A6D8);
    }
    uint64_t v7 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(buf, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)std::stringbuf::string_type buf = *(_OWORD *)(a1 + 40);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 56);
      }

      uint64_t v11 = buf;
      if (buf[23] < 0) {
        uint64_t v11 = *(_BYTE **)buf;
      }
      *(_DWORD *)std::stringbuf::string_type __p = 136446210;
      *(void *)&__p[4] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "BoutDetector (%{public}s): Cannot extend bout, no bout in progress",  __p,  0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10185A6D8);
      }
      uint64_t v12 = qword_1019346B8;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }

      uint64_t v17 = __p;
      if (__p[23] < 0) {
        uint64_t v17 = *(_BYTE **)__p;
      }
      LODWORD(__dst[0]) = 136446210;
      *(void **)((char *)__dst + 4) = v17;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  16LL,  "BoutDetector (%{public}s): Cannot extend bout, no bout in progress",  __dst,  12);
      uint64_t v16 = v18;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLMobility::BoutDetector::extendBout(CFAbsoluteTime)", "%s\n", v16);
      goto LABEL_45;
    }
  }

  else
  {
    *(double *)(a1 + 80) = a2;
    double v4 = *(double *)(a1 + 72);
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10185A6D8);
    }
    double v5 = a2 - v4;
    uint64_t v6 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }

      uint64_t v8 = __p;
      if (__p[23] < 0) {
        uint64_t v8 = *(_BYTE **)__p;
      }
      uint64_t v9 = *(void *)(a1 + 72);
      *(_DWORD *)std::stringbuf::string_type buf = 136446722;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&_BYTE buf[12] = 2050;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      double v24 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "BoutDetector (%{public}s): ExtendingBout,startTime,%{public}.2f,duration,%{public}.2f",  buf,  0x20u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10185A6D8);
      }
      uint64_t v10 = qword_1019346B8;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
        uint64_t v20 = *(void *)(a1 + 56);
      }

      uint64_t v13 = __dst;
      if (v20 < 0) {
        uint64_t v13 = (void **)__dst[0];
      }
      uint64_t v14 = *(void *)(a1 + 72);
      *(_DWORD *)std::stringbuf::string_type __p = 136446722;
      *(void *)&__p[4] = v13;
      *(_WORD *)&__p[12] = 2050;
      *(void *)&__p[14] = v14;
      *(_WORD *)&__p[22] = 2050;
      double v22 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v10,  2LL,  "BoutDetector (%{public}s): ExtendingBout,startTime,%{public}.2f,duration,%{public}.2f",  __p,  32);
      uint64_t v16 = v15;
      if (SHIBYTE(v20) < 0) {
        operator delete(__dst[0]);
      }
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLMobility::BoutDetector::extendBout(CFAbsoluteTime)", "%s\n", v16);
LABEL_45:
      if (v16 != buf) {
        free(v16);
      }
    }
  }

void sub_10083E79C(uint64_t a1, unsigned int a2, double a3)
{
  double v3 = *(double *)(a1 + 80);
  if (v3 != 0.0)
  {
    if (*(_DWORD *)(a1 + 32)) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = a2 == 2;
    }
    if (v7) {
      double v8 = a3;
    }
    else {
      double v8 = a3 + -7.0;
    }
    sub_1010DDBC0(&v21, "unknown");
    if (a2 < 3) {
      std::string::assign(&v21, off_10185A6F8[a2]);
    }
    if (v8 - v3 >= *(double *)(a1 + 24))
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10185A6D8);
      }
      uint64_t v9 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 40);
          *(void *)&__p[16] = *(void *)(a1 + 56);
        }

        uint64_t v10 = __p;
        if (__p[23] < 0) {
          uint64_t v10 = *(_BYTE **)__p;
        }
        uint64_t v11 = *(void *)(a1 + 72);
        uint64_t v12 = &v21;
        if ((v21.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::stringbuf::string_type buf = 136446978;
        uint64_t v27 = v10;
        __int16 v28 = 2050;
        uint64_t v29 = v11;
        __int16 v30 = 2082;
        int v31 = v12;
        __int16 v32 = 2050;
        double v33 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to maxTimeSinceEndOfBout from %{public}s time (%{public}.2f)",  buf,  0x2Au);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10185A6D8);
        }
        uint64_t v13 = qword_1019346B8;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          uint64_t v20 = *(void *)(a1 + 56);
        }

        uint64_t v14 = __dst;
        if (v20 < 0) {
          uint64_t v14 = (void **)__dst[0];
        }
        uint64_t v15 = *(void *)(a1 + 72);
        uint64_t v16 = &v21;
        if ((v21.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::stringbuf::string_type __p = 136446978;
        *(void *)&__p[4] = v14;
        *(_WORD *)&__p[12] = 2050;
        *(void *)&__p[14] = v15;
        *(_WORD *)&__p[22] = 2082;
        double v23 = v16;
        __int16 v24 = 2050;
        double v25 = a3;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v13,  1LL,  "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to maxTimeSinceEndOfBout from %{public}s time (%{public}.2f)",  __p,  42);
        __int16 v18 = v17;
        if (SHIBYTE(v20) < 0) {
          operator delete(__dst[0]);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::BoutDetector::checkBoutEndWithPacketTime(CFAbsoluteTime, PacketType)",  "%s\n",  v18);
      }

      sub_10083D394(a1, 1);
    }
  }

void sub_10083EAEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10083EB1C(uint64_t a1, double a2)
{
  double v3 = *(double *)(a1 + 80);
  if (v3 != 0.0 && v3 > a2)
  {
    if (qword_1019346B0 != -1) {
      dispatch_once(&qword_1019346B0, &stru_10185A6D8);
    }
    uint64_t v6 = (os_log_s *)qword_1019346B8;
    if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 40);
        *(void *)&__p[16] = *(void *)(a1 + 56);
      }

      BOOL v7 = __p;
      if (__p[23] < 0) {
        BOOL v7 = *(_BYTE **)__p;
      }
      uint64_t v8 = *(void *)(a1 + 72);
      *(_DWORD *)std::stringbuf::string_type buf = 136446722;
      uint64_t v19 = v7;
      __int16 v20 = 2050;
      uint64_t v21 = v8;
      __int16 v22 = 2050;
      double v23 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to timeRollback time (%{public}.2f)",  buf,  0x20u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10185A6D8);
      }
      uint64_t v9 = qword_1019346B8;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1010DD48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
        uint64_t v15 = *(void *)(a1 + 56);
      }

      uint64_t v10 = __dst;
      if (v15 < 0) {
        uint64_t v10 = (void **)__dst[0];
      }
      uint64_t v11 = *(void *)(a1 + 72);
      *(_DWORD *)std::stringbuf::string_type __p = 136446722;
      *(void *)&__p[4] = v10;
      *(_WORD *)&__p[12] = 2050;
      *(void *)&__p[14] = v11;
      *(_WORD *)&__p[22] = 2050;
      double v17 = a2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v9,  1LL,  "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to timeRollback time (%{public}.2f)",  __p,  32);
      uint64_t v13 = v12;
      if (SHIBYTE(v15) < 0) {
        operator delete(__dst[0]);
      }
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::BoutDetector::checkTimeRollback(CFAbsoluteTime)",  "%s\n",  v13);
    }

    sub_10083D394(a1, 4);
  }

void sub_10083EDC4(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 80) != 0.0)
  {
    double v3 = a2 - *(double *)(a1 + 72);
    if (v3 > *(double *)(a1 + 16))
    {
      if (qword_1019346B0 != -1) {
        dispatch_once(&qword_1019346B0, &stru_10185A6D8);
      }
      double v4 = (os_log_s *)qword_1019346B8;
      if (os_log_type_enabled((os_log_t)qword_1019346B8, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)std::stringbuf::string_type __p = *(_OWORD *)(a1 + 40);
          *(void *)&__p[16] = *(void *)(a1 + 56);
        }

        double v5 = __p;
        if (__p[23] < 0) {
          double v5 = *(_BYTE **)__p;
        }
        uint64_t v6 = *(void *)(a1 + 72);
        *(_DWORD *)std::stringbuf::string_type buf = 136446722;
        double v17 = v5;
        __int16 v18 = 2050;
        uint64_t v19 = v6;
        __int16 v20 = 2050;
        double v21 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to maxBoutDuration (%{public}.2f)",  buf,  0x20u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019346B0 != -1) {
          dispatch_once(&qword_1019346B0, &stru_10185A6D8);
        }
        uint64_t v7 = qword_1019346B8;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_1010DD48C(__dst, *(void **)(a1 + 40), *(void *)(a1 + 48));
        }

        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          uint64_t v13 = *(void *)(a1 + 56);
        }

        uint64_t v8 = __dst;
        if (v13 < 0) {
          uint64_t v8 = (void **)__dst[0];
        }
        uint64_t v9 = *(void *)(a1 + 72);
        *(_DWORD *)std::stringbuf::string_type __p = 136446722;
        *(void *)&__p[4] = v8;
        *(_WORD *)&__p[12] = 2050;
        *(void *)&__p[14] = v9;
        *(_WORD *)&__p[22] = 2050;
        double v15 = v3;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v7,  1LL,  "BoutDetector (%{public}s): Ending bout (%{public}.2f) due to maxBoutDuration (%{public}.2f)",  __p,  32);
        uint64_t v11 = v10;
        if (SHIBYTE(v13) < 0) {
          operator delete(__dst[0]);
        }
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLMobility::BoutDetector::checkMaxBoutDuration(CFAbsoluteTime)",  "%s\n",  v11);
      }

      sub_10083D394(a1, 2);
    }
  }

void sub_10083F078(id a1)
{
  qword_1019346B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_10083F0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 166096;
  uint64_t v4 = sub_1006AABA8(a1, a2);
  *(void *)uint64_t v4 = &off_10185A720;
  *(_OWORD *)(v4 + 166080) = 0u;
  *(_OWORD *)uint64_t v3 = xmmword_101339430;
  *(void *)(v3 + 16) = 0x800000001LL;
  *(_BYTE *)(v3 + 24) = 0;
  if (qword_1019344E0 != -1) {
    dispatch_once(&qword_1019344E0, &stru_10185A758);
  }
  double v5 = (os_log_s *)qword_1019344E8;
  if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLSwimAlgSimulator Instantiated", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344E0 != -1) {
      dispatch_once(&qword_1019344E0, &stru_10185A758);
    }
    LOWORD(v20[0]) = 0;
    LODWORD(v19) = 2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "CLSwimAlgSimulator Instantiated",  v20,  v19);
    __int16 v18 = (uint8_t *)v17;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "CLSwimAlgSimulator::CLSwimAlgSimulator(CLSwimDataStore *, float)",  "%s\n",  v17);
    if (v18 != buf) {
      free(v18);
    }
  }

  HIDWORD(v19) = *(_DWORD *)(v3 + 16);
  uint64_t v6 = sub_1006E27E8();
  sub_100413284(v6, buf);
  sub_1002A7CB0(*(uint64_t *)buf, "SimulateSwimmingStyle", (_DWORD *)&v19 + 1);
  uint64_t v7 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

  *(_DWORD *)(v3 + 16) = HIDWORD(v19);
  uint64_t v10 = sub_1006E27E8();
  sub_100413284(v10, buf);
  sub_1002A6F64(*(uint64_t *)buf, "SimulateSwimmingLapInsertion", (BOOL *)(v3 + 24));
  uint64_t v11 = v22;
  if (v22)
  {
    uint64_t v12 = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  double v14 = *(double *)v3;
  (*(void (**)(uint8_t *__return_ptr, void, void))(**(void **)(a1 + 8) + 40LL))( buf,  *(void *)(a1 + 8),  *(unsigned int *)(v3 + 16));
  double v15 = v23;
  (*(void (**)(void *__return_ptr, void, void))(**(void **)(a1 + 8) + 40LL))( v20,  *(void *)(a1 + 8),  *(unsigned int *)(v3 + 16));
  *(double *)(v3 + 8) = v14 * (v15 / *(double *)&v20[4]);
  return a1;
}

void sub_10083F3A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
  *double v25 = &off_101849000;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10083F3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_10020EBD8(*(void *)(a1 + 8)))
  {
    double v6 = *(double *)(a2 + 56);
    if (vabdd_f64(v6, *(double *)(a1 + 166080)) > *(double *)(a1 + 166096))
    {
      sub_10020D6B8(*(void *)(a1 + 8), *(_DWORD *)(a1 + 166112), 1, v6);
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10185A758);
      }
      uint64_t v7 = (os_log_s *)qword_1019344E8;
      if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Simulated stroke", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_10185A758);
        }
        v23[0] = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "Simulated stroke",  v23,  2);
        uint64_t v19 = (uint8_t *)v18;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLSwimAlgResultFlags CLSwimAlgSimulator::processFusion(const CLSwimFusionInput &, CLSwimEntry &)",  "%s\n",  v18);
        if (v19 != buf) {
          free(v19);
        }
      }

      double v6 = *(double *)(a2 + 56);
      *(double *)(a1 + 166080) = v6;
    }

    double v8 = vabdd_f64(v6, *(double *)(a1 + 720));
    if (v8 > sub_1006AC0C0(a1) && sub_1006AC0F4(a1, a3))
    {
      *(void *)(a1 + 720) = *(void *)(a2 + 56);
      uint64_t v9 = 1LL;
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    double v10 = (*(float (**)(void))(**(void **)(a1 + 8) + 32LL))(*(void *)(a1 + 8)) <= 0.00000011921
        ? 33.3300018
        : (*(float (**)(void))(**(void **)(a1 + 8) + 32LL))(*(void *)(a1 + 8));
    double v11 = v10 * *(double *)(a1 + 166104);
    double v12 = *(double *)(a2 + 56);
    if (*(_BYTE *)(a1 + 166120) && (*(_DWORD *)(a1 + 166116) & 0x80000000) != 0)
    {
      *(double *)(a1 + 166088) = v12;
    }

    else
    {
      if (qword_1019344E0 != -1) {
        dispatch_once(&qword_1019344E0, &stru_10185A758);
      }
      unint64_t v13 = (os_log_s *)qword_1019344E8;
      if (os_log_type_enabled((os_log_t)qword_1019344E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Simulated turn", buf, 2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344E0 != -1) {
          dispatch_once(&qword_1019344E0, &stru_10185A758);
        }
        v23[0] = 0;
        LODWORD(v22) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344E8,  2LL,  "Simulated turn",  v23,  v22);
        double v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual CLSwimAlgResultFlags CLSwimAlgSimulator::processFusion(const CLSwimFusionInput &, CLSwimEntry &)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }

      else {
        int v14 = 0;
      }
      uint64_t v9 = v14 | v9;
      int v15 = *(unsigned __int8 *)(a1 + 166120);
      *(void *)(a1 + 166088) = *(void *)(a2 + 56);
      if (!v15) {
        goto LABEL_35;
      }
    }

    int v16 = *(_DWORD *)(a1 + 166116) - 1;
    if (*(_DWORD *)(a1 + 166116) == -2) {
      int v16 = 8;
    }
    *(_DWORD *)(a1 + 166116) = v16;
LABEL_35:
    sub_10020FB80(*(void *)(a1 + 8), *(double *)(a2 + 64), *(double *)(a2 + 56));
    return v9;
  }

  return 0LL;
}

uint64_t sub_10083F82C(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0LL;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v5 = 0u;
  memset(v4, 0, sizeof(v4));
  uint64_t result = (*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 8) + 120LL))(*(void *)(a1 + 8), v4);
  if (((BYTE12(v5) + 1) & 3) == 0) {
    *(_BYTE *)(a2 + 20) = 1;
  }
  return result;
}

void *sub_10083F8C4(void *result)
{
  *uint64_t result = &off_101849000;
  return result;
}

void sub_10083F8D8(id a1)
{
  qword_1019344E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

std::string *sub_10083F904@<X0>(char a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::string::reserve(a2, 6uLL);
  if ((a1 & 1) != 0) {
    uint64_t v4 = "L";
  }
  else {
    uint64_t v4 = ".";
  }
  std::string::append(a2, v4);
  if ((a1 & 2) != 0) {
    __int128 v5 = "C";
  }
  else {
    __int128 v5 = ".";
  }
  std::string::append(a2, v5);
  if ((a1 & 4) != 0) {
    __int128 v6 = "W";
  }
  else {
    __int128 v6 = ".";
  }
  std::string::append(a2, v6);
  if ((a1 & 8) != 0) {
    __int128 v7 = "P";
  }
  else {
    __int128 v7 = ".";
  }
  std::string::append(a2, v7);
  if ((a1 & 0x10) != 0) {
    uint64_t v8 = "S";
  }
  else {
    uint64_t v8 = ".";
  }
  return std::string::append(a2, v8);
}

void sub_10083F9C0(_Unwind_Exception *exception_object)
{
}

double sub_10083F9DC(uint64_t a1)
{
  *(_DWORD *)a1 = -1;
  *(_WORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 16) = xmmword_101339480;
  *(_OWORD *)(a1 + 32) = _Q1;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xBFF0000000000000LL;
  double result = 0.0;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0xBFF0000000000000LL;
  *(void *)(a1 + 80) = 0LL;
  return result;
}

uint64_t sub_10083FA1C@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_10000CF44(&v23, (uint64_t)"lastStatus, ", 12LL);
  unsigned int v5 = *(_DWORD *)a1 + 1;
  if (v5 > 4) {
    __int128 v6 = "---";
  }
  else {
    __int128 v6 = off_10185A8E8[v5];
  }
  size_t v7 = strlen(v6);
  sub_10000CF44(v4, (uint64_t)v6, v7);
  uint64_t v8 = sub_10000CF44(&v23, (uint64_t)", started, ", 11LL);
  std::ostream::operator<<(v8, *(unsigned __int8 *)(a1 + 4));
  uint64_t v9 = sub_10000CF44(&v23, (uint64_t)", monitoring settled, ", 22LL);
  std::ostream::operator<<(v9, *(unsigned __int8 *)(a1 + 5));
  double v10 = sub_10000CF44(&v23, (uint64_t)", activeTech, ", 14LL);
  p_p = &__p;
  sub_10083F904(*(_DWORD *)(a1 + 8), &__p);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v12 = strlen((const char *)p_p);
  sub_10000CF44(v10, (uint64_t)p_p, v12);
  sub_10000CF44(&v23, (uint64_t)", lastDistance, ", 16LL);
  uint64_t v13 = v22[0];
  *(void *)((char *)&v22[2] + *(void *)(v22[0] - 24LL)) = 1LL;
  *(_DWORD *)((char *)&v22[1] + *(void *)(v13 - 24)) |= 4u;
  std::ostream::operator<<(*(double *)(a1 + 16));
  sub_10000CF44(&v23, (uint64_t)", lastTechCheckDis, ", 20LL);
  uint64_t v14 = v22[0];
  *(void *)((char *)&v22[2] + *(void *)(v22[0] - 24LL)) = 1LL;
  *(_DWORD *)((char *)&v22[1] + *(void *)(v14 - 24)) |= 4u;
  std::ostream::operator<<(*(double *)(a1 + 24));
  sub_10000CF44(&v23, (uint64_t)", lastLocCheck, ", 16LL);
  uint64_t v15 = v22[0];
  *(void *)((char *)&v22[2] + *(void *)(v22[0] - 24LL)) = 1LL;
  *(_DWORD *)((char *)&v22[1] + *(void *)(v15 - 24)) |= 4u;
  std::ostream::operator<<(*(double *)(a1 + 40));
  int v16 = sub_10000CF44(&v23, (uint64_t)", settledInsideStatus, ", 23LL);
  std::ostream::operator<<(v16, *(unsigned int *)(a1 + 68));
  sub_10000CF44(&v23, (uint64_t)", lastProximityStateTimestamp, ", 31LL);
  std::ostream::operator<<(*(double *)(a1 + 72));
  double v17 = sub_10000CF44(&v23, (uint64_t)", lastProximityState, ", 22LL);
  std::ostream::operator<<(v17, *(unsigned int *)(a1 + 80));
  __int16 v18 = sub_10000CF44(&v23, (uint64_t)", lastApproachingState, ", 24LL);
  std::ostream::operator<<(v18, *(unsigned int *)(a1 + 84));
  std::stringbuf::str(a2, &v24);
  *(void *)((char *)v22
  uint64_t v23 = v19;
  std::streambuf::~streambuf(&v24);
  return std::ios::~ios(&v25);
}

void sub_10083FD18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1011F8850((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10083FD48( uint64_t a1, _DWORD *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a2[17] != 2 && *a2 == 0 && (~*(_DWORD *)(a1 + 160) & 5LL) == 0) {
    uint64_t v16 = 16LL;
  }
  else {
    uint64_t v16 = 0LL;
  }
  if ((a4 & 1) != 0)
  {
    uint64_t v18 = *(void *)(a5 + 24);
    if (!v18) {
      goto LABEL_36;
    }
    uint64_t v16 = v16 | 1;
  }

  if ((a4 & 2) != 0)
  {
    uint64_t v19 = *(void *)(a6 + 24);
    if (!v19) {
      goto LABEL_36;
    }
    uint64_t v16 = v16 | 2;
  }

  BOOL v21 = *(double *)(a1 + 96) > 400.0 || *(_BYTE *)(a1 + 188) != 0 || *(_DWORD *)(a1 + 180) == 2;
  if (!v21
    && *(void *)(a1 + 232) == *(void *)(a1 + 224)
    && (a4 & 4) != 0
    && (*(void *)(a1 + 160) & 0x20) == 0
    && (a8 & 1) == 0)
  {
    uint64_t v22 = *(void *)(a7 + 24);
    if (v22)
    {
      uint64_t v16 = v16 | 4;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22 + 48LL))(v22, a1, a3);
      return v16;
    }

#error "10084009C: call analysis failed (funcsize=126)"
BOOL sub_1008400A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v6;
  os_log_s *v7;
  uint64_t v8;
  BOOL result;
  uint64_t v10;
  const char *v11;
  os_log_s *v12;
  int v13;
  void *v14;
  int v15;
  os_log_s *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  double v23;
  os_log_s *v24;
  uint64_t v25;
  os_log_s *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  _BYTE v32[24];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint8_t buf[4];
  _BYTE v39[10];
  uint64_t v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  if ((*(_DWORD *)(a1 + 96) & 0xFFFFFFF7) != 1)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10185A798);
    }
    size_t v12 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(_DWORD *)(a1 + 96);
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      *(_DWORD *)__int16 v39 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Location type %d is not a GNSS type.", buf, 8u);
    }

    double result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10185A798);
      }
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Location type %d is not a GNSS type.",  v32);
      goto LABEL_60;
    }

    return result;
  }

  __int128 v6 = *(double *)(a1 + 20);
  if (v6 > *((double *)sub_100D0ABCC() + 3))
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10185A798);
    }
    size_t v7 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 20);
      *(_DWORD *)std::stringbuf::string_type buf = 134283521;
      *(void *)__int16 v39 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Location uncertainty %{private}.2f above threshold, no reason to inflate uncertainty",  buf,  0xCu);
    }

    double result = sub_1002921D0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10185A798);
      }
      double v10 = *(void *)(a1 + 20);
      *(_DWORD *)__int16 v32 = 134283521;
      *(void *)&_DWORD v32[4] = v10;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Location uncertainty %{private}.2f above threshold, no reason to inflate uncertainty",  v32,  12,  *(_OWORD *)v32,  *(void *)&v32[16]);
LABEL_60:
      __int16 v28 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLFenceMonitorLogic::inflateGpsUncertaintyForSignalStrength(const CLDaemonLocation &, const CLDaemon LocationPrivate &, double &)",  "%s\n",  v11);
      if (v28 != buf) {
        free(v28);
      }
      return 0LL;
    }

    return result;
  }

  uint64_t v14 = *(void **)(a2 + 520);
  if (v14) {
    uint64_t v15 = *v14 != v14[1];
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(_BYTE *)sub_100D0ABCC() || (v15 & 1) != 0)
  {
    if (v15)
    {
      double v17 = *(uint64_t **)(a2 + 520);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      if (*v17 != v19)
      {
        __int16 v20 = 0;
        uint64_t v15 = 0;
        BOOL v21 = 0;
        do
        {
          uint64_t v22 = *(unsigned __int8 *)(v18 + 24);
          if (*(_BYTE *)(v18 + 24))
          {
            uint64_t v23 = *(float *)(v18 + 16);
          }

          v15 += v22;
          v18 += 28LL;
          ++v20;
        }

        while (v18 != v19);
LABEL_41:
        if (v15 <= *((_DWORD *)sub_100D0ABCC() + 1) || v21 <= *((_DWORD *)sub_100D0ABCC() + 2))
        {
          uint64_t v25 = *(void *)(a1 + 20);
          *a3 = *((void *)sub_100D0ABCC() + 3);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_10185A798);
          }
          uint64_t v26 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = *a3;
            *(_DWORD *)std::stringbuf::string_type buf = 134284545;
            *(void *)__int16 v39 = v25;
            *(_WORD *)&v39[8] = 2049;
            int v40 = v27;
            uint64_t v41 = 1025;
            int v42 = v20;
            __int16 v43 = 1025;
            uint64_t v44 = v15;
            uint64_t v45 = 1025;
            int v46 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Inflating GNSS uncertainty for bad signal condition %{private}.2f -> %{private}.2f: %{private}d total sign als (%{private}d tracked, %{private}d strong)",  buf,  0x28u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_10185A798);
            }
            uint64_t v29 = *a3;
            *(_DWORD *)__int16 v32 = 134284545;
            *(void *)&_DWORD v32[4] = v25;
            *(_WORD *)&v32[12] = 2049;
            *(void *)&v32[14] = v29;
            *(_WORD *)&v32[22] = 1025;
            double v33 = v20;
            __int16 v34 = 1025;
            uint64_t v35 = v15;
            double v36 = 1025;
            uint64_t v37 = v21;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Inflating GNSS uncertainty for bad signal condition %{private}.2f -> %{private}.2f: %{private}d total sign als (%{private}d tracked, %{private}d strong)",  v32,  40);
            int v31 = (uint8_t *)v30;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLFenceMonitorLogic::inflateGpsUncertaintyForSignalStrength(const CLDaemonLocation &, const CL DaemonLocationPrivate &, double &)",  "%s\n",  v30);
            if (v31 != buf) {
              free(v31);
            }
          }

          return 1LL;
        }

        else
        {
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_10185A798);
          }
          std::stringbuf v24 = (os_log_s *)qword_101934878;
          if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::stringbuf::string_type buf = 67175169;
            *(_DWORD *)__int16 v39 = v20;
            *(_WORD *)&v39[4] = 1025;
            *(_DWORD *)&v39[6] = v15;
            LOWORD(v40) = 1025;
            *(_DWORD *)((char *)&v40 + 2) = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "GNSS uncertainty unchanged based on signal strength: %{private}d total signals (%{private}d tracked, %{private}d strong)",  buf,  0x14u);
          }

          double result = sub_1002921D0(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_10185A798);
            }
            *(_DWORD *)__int16 v32 = 67175169;
            *(_DWORD *)&_DWORD v32[4] = v20;
            *(_WORD *)&v32[8] = 1025;
            *(_DWORD *)&v32[10] = v15;
            *(_WORD *)&v32[14] = 1025;
            *(_DWORD *)&v32[16] = v21;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "GNSS uncertainty unchanged based on signal strength: %{private}d total signals (%{private}d tracked, %{private}d strong)",  v32,  20,  *(_OWORD *)v32,  *(void *)&v32[16]);
            goto LABEL_60;
          }
        }

        return result;
      }

      BOOL v21 = 0;
      uint64_t v15 = 0;
    }

    else
    {
      BOOL v21 = 0;
    }

    __int16 v20 = 0;
    goto LABEL_41;
  }

  if (qword_101934870 != -1) {
    dispatch_once(&qword_101934870, &stru_10185A798);
  }
  uint64_t v16 = (os_log_s *)qword_101934878;
  if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Unable to inflate GNSS uncertainty, signal strength not available.",  buf,  2u);
  }

  double result = sub_1002921D0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10185A798);
    }
    *(_WORD *)__int16 v32 = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Unable to inflate GNSS uncertainty, signal strength not available.",  v32,  2,  *(_OWORD *)v32,  *(void *)&v32[16]);
    goto LABEL_60;
  }

  return result;
}

BOOL sub_1008407E4(uint64_t **a1)
{
  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v21 = 0LL;
  if ((sub_100846E9C((uint64_t)&v22, (uint64_t)__p) & 1) == 0)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10185A798);
    }
    uint64_t v13 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = __p;
      if (v21 < 0) {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Input is not valid: %{public}s", buf, 0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10185A798);
      }
      double v17 = __p;
      if (v21 < 0) {
        double v17 = (void **)__p[0];
      }
      int v25 = 136446210;
      uint64_t v26 = v17;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  0LL,  "Input is not valid: %{public}s",  &v25,  12);
      uint64_t v19 = (char *)v18;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLFenceMonitorLogic::isSimplePolygon(const std::vector<CLClientLocationCoordinate> &)",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
    }

    goto LABEL_32;
  }

  uint64_t v1 = (double *)v22;
  uint64_t v2 = v23;
  if (v22 == v23) {
    goto LABEL_32;
  }
  if ((unint64_t)((char *)v23 - (_BYTE *)v22) >= 0x20 && (char *)v22 + 16 != (char *)v23)
  {
    do
    {
      int v4 = sub_100847EC0(v1, v1 + 2);
      if (v1 + 4 == v2) {
        int v5 = 1;
      }
      else {
        int v5 = v4;
      }
      v1 += 2;
    }

    while (v5 != 1);
    if ((v4 & 1) != 0)
    {
LABEL_32:
      BOOL v15 = 0LL;
      goto LABEL_35;
    }
  }

  size_t v7 = (double **)v24[0];
  __int128 v6 = (double **)v24[1];
  while (v7 != v6)
  {
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (*v7 == v9) {
      goto LABEL_34;
    }
    if ((unint64_t)((char *)v9 - (char *)v8) >= 0x20 && v8 + 2 != v9)
    {
      do
      {
        int v11 = sub_100847EC0(v8, v8 + 2);
        if (v8 + 4 == v9) {
          int v12 = 1;
        }
        else {
          int v12 = v11;
        }
        v8 += 2;
      }

      while (v12 != 1);
      if ((v11 & 1) != 0) {
        goto LABEL_34;
      }
    }

    v7 += 3;
  }

  size_t v7 = v6;
LABEL_34:
  BOOL v15 = v7 == v6;
LABEL_35:
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  *(void *)std::stringbuf::string_type buf = v24;
  sub_100006BC8((void ***)buf);
  if (v22)
  {
    uint64_t v23 = (double *)v22;
    operator delete(v22);
  }

  return v15;
}

void sub_100840ACC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_100840C90((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_100840B04(uint64_t **a1@<X0>, char **a2@<X8>)
{
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v3 = *a1;
  int v4 = a1[1];
  if (*a1 != v4)
  {
    int v5 = 0LL;
    __int128 v6 = a2 + 2;
    do
    {
      uint64_t v7 = *v3;
      uint64_t v8 = v3[1];
      if ((unint64_t)v5 >= *v6)
      {
        uint64_t v9 = (v5 - *a2) >> 4;
        uint64_t v10 = *v6 - (void)*a2;
        uint64_t v11 = v10 >> 3;
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          uint64_t v13 = (char *)sub_100037038((uint64_t)(a2 + 2), v12);
        }
        else {
          uint64_t v13 = 0LL;
        }
        uint64_t v14 = &v13[16 * v9];
        *(void *)uint64_t v14 = v8;
        *((void *)v14 + 1) = v7;
        uint64_t v16 = *a2;
        BOOL v15 = a2[1];
        double v17 = v14;
        if (v15 != *a2)
        {
          do
          {
            *((_OWORD *)v17 - 1) = *((_OWORD *)v15 - 1);
            v17 -= 16;
            v15 -= 16;
          }

          while (v15 != v16);
          BOOL v15 = *a2;
        }

        int v5 = v14 + 16;
        *a2 = v17;
        a2[1] = v14 + 16;
        a2[2] = &v13[16 * v12];
        if (v15) {
          operator delete(v15);
        }
      }

      else
      {
        *(void *)int v5 = v8;
        *((void *)v5 + 1) = v7;
        v5 += 16;
      }

      a2[1] = v5;
      v3 += 2;
    }

    while (v3 != v4);
  }

  uint64_t v20 = 0x3FF0000000000000LL;
  sub_100843744((double **)a2, (double *)&v20);
  uint64_t v18 = (double **)a2[3];
  uint64_t v19 = (double **)a2[4];
  while (v18 != v19)
  {
    sub_10084390C(v18, (double *)&v20);
    v18 += 3;
  }

void sub_100840C70(_Unwind_Exception *a1)
{
}

uint64_t sub_100840C90(uint64_t a1)
{
  int v4 = (void **)(a1 + 24);
  sub_100006BC8(&v4);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  return a1;
}

BOOL sub_100840CD8(uint64_t a1)
{
  uint64_t v3 = *(double **)(a1 + 224);
  int v4 = *(double **)(a1 + 232);
  uint64_t v2 = (uint64_t **)(a1 + 224);
  if (v4 == v3)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10185A798);
    }
    __int128 v6 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      uint64_t v7 = (uint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 224)) >> 4;
      *(_DWORD *)std::stringbuf::string_type buf = 134283521;
      uint64_t v14 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Only check polygonal fences, %{private}lu",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10185A798);
      }
      uint64_t v8 = (uint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 224)) >> 4;
      int v11 = 134283521;
      uint64_t v12 = v8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Only check polygonal fences, %{private}lu",  &v11,  12);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLFenceMonitorLogic::isCompliant(const CLFenceManager_Type::Fence &)",  "%s\n",  v9);
      if (v10 != buf) {
        free(v10);
      }
    }
  }

  else if (*v3 == *(v4 - 2) && v3[1] == *(v4 - 1))
  {
    return sub_1008407E4(v2);
  }

  return 0LL;
}

BOOL sub_100840EF8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  unsigned int v2 = v1 & 0xFFFFFFF7;
  unsigned int v3 = v1 & 0xFFFFFFFE;
  return v2 == 1 || v3 == 2;
}

BOOL sub_100840F14(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 96) & 0xFFFFFFFE) == 6;
}

uint64_t sub_100840F28(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 96) > 0xEu) | (0x2C1Eu >> *(_DWORD *)(a1 + 96)) & 1;
}

uint64_t sub_100840F48(int8x16_t *a1, uint64_t **a2)
{
  int8x16_t v6 = vextq_s8(*a1, *a1, 8uLL);
  sub_100840B04(a2, (char **)__p);
  unsigned int v2 = sub_100865418((double *)v6.i64, (uint64_t)__p);
  uint64_t v7 = (void **)&v5;
  sub_100006BC8(&v7);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return v2 >> 31;
}

void sub_100840FBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100840FD0(int8x16_t *a1, uint64_t **a2, double a3)
{
  if (sub_100840F48(a1, a2))
  {
    return 0xFFFFFFFFLL;
  }

  return 0LL;
}

double sub_100841048(int8x16_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4;
  if ((unint64_t)(v3 - 102) > 0xFFFFFFFFFFFFFF9DLL)
  {
    sub_100840B04((uint64_t **)a2, (char **)&__p);
    int8x16_t v19 = vextq_s8(*a1, *a1, 8uLL);
    double v18 = 1.79769313e308;
    if (a3)
    {
      *(void *)std::stringbuf::string_type buf = &v18;
      *(void *)&uint8_t buf[8] = &v19;
      *(void *)uint64_t v20 = buf;
      sub_10084443C((uint64_t)&__p, (double ***)v20);
      uint64_t v8 = (uint64_t)v24;
      uint64_t v9 = v25;
      while ((void *)v8 != v9)
      {
        sub_10084443C(v8, (double ***)v20);
        v8 += 24LL;
      }
    }

    else
    {
      if ((void)__p == *((void *)&__p + 1))
      {
        for (unint64_t i = v24; ; i += 3)
        {
          if (i == v25)
          {
            *(void *)uint64_t v20 = &off_10185A8D0;
            *(void *)std::stringbuf::string_type buf = "/AppleInternal/Library/BuildRoots/9fd3fc02-a7db-11ef-98ff-a6e88e557b55/Applications/Xcode.a"
                             "pp/Contents/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS18.2.Internal.sd"
                             "k/usr/local/include/boost/geometry/algorithms/detail/throw_on_empty_input.hpp";
            *(void *)&uint8_t buf[8] = "void boost::geometry::detail::throw_on_empty_input(const Geometry &) [Geometry = boost:"
                                 ":geometry::model::polygon<boost::geometry::model::point<double, 2, boost::geometry::cs:"
                                 ":spherical_equatorial<boost::geometry::degree>>>]";
            *(void *)&uint8_t buf[16] = 54LL;
            sub_1008445A4((uint64_t)v20, (int8x16_t *)buf);
          }

          if (*i != i[1]) {
            break;
          }
        }
      }

      *(void *)std::stringbuf::string_type buf = 0x3FF0000000000000LL;
      sub_1008450EC((double *)v19.i64, (uint64_t)&__p, (double *)buf);
      double v18 = v10 * 6378135.0;
    }

    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10185A798);
    }
    int v11 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134283777;
      *(double *)&uint8_t buf[4] = v18;
      *(_WORD *)&_BYTE buf[12] = 1025;
      *(_DWORD *)&buf[14] = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Fence: distance to nearest point %{private}.02lf (%{private}d)",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10185A798);
      }
      *(_DWORD *)uint64_t v20 = 134283777;
      *(double *)&v20[4] = v18;
      __int16 v21 = 1025;
      int v22 = a3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: distance to nearest point %{private}.02lf (%{private}d)",  v20,  18);
      double v17 = (char *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "double distanceToNearestPointOnPolygon(const CLClientLocationCoordinate &, const std::vector<CLClientLocationCoo rdinate> &, BOOL)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    double v5 = v18;
    *(void *)std::stringbuf::string_type buf = &v24;
    sub_100006BC8((void ***)buf);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }

  else
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10185A798);
    }
    int v4 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 134349056;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Attempting to calculate distance to an invalid polygon, %{public}lu",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10185A798);
      }
      LODWORD(__p) = 134349056;
      *(void *)((char *)&__p + 4) = v3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  17LL,  "Attempting to calculate distance to an invalid polygon, %{public}lu",  &__p,  12);
      BOOL v15 = (char *)v14;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "double distanceToNearestPointOnPolygon(const CLClientLocationCoordinate &, const std::vector<CLClientLocationCoo rdinate> &, BOOL)",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    return 1.79769313e308;
  }

  return v5;
}

void sub_1008414AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

double sub_1008414E0(double *a1, uint64_t a2, double *a3)
{
  if (*(void *)(a2 + 232) == *(void *)(a2 + 224)) {
    return sub_100D2DBDC(a3, *a1, a1[1], *(double *)(a2 + 72), *(double *)(a2 + 80), 0.0);
  }
  else {
    return sub_100841048((int8x16_t *)a1, a2 + 224, 0);
  }
}

double sub_100841510(double *a1, uint64_t a2, double *a3)
{
  double v4 = sub_1008414E0(a1, a2, a3);
  if (*(void *)(a2 + 232) == *(void *)(a2 + 224)) {
    return v4 - sub_1009232CC(a2);
  }
  return v4;
}

double sub_100841558(uint64_t a1, uint64_t a2, double *a3)
{
  double v4 = sub_1008414E0((double *)(a1 + 4), a2, a3) - *(double *)(a1 + 20);
  if (*(void *)(a2 + 232) == *(void *)(a2 + 224)) {
    return v4 - sub_1009232CC(a2);
  }
  return v4;
}

uint64_t sub_1008415AC(uint64_t a1, double a2, uint64_t a3, uint64_t a4, int *a5, int a6, uint64_t a7)
{
  uint64_t v10 = *(unsigned int *)(a1 + 96);
  if (!(_DWORD)v10)
  {
    if (qword_101934870 != -1) {
      dispatch_once(&qword_101934870, &stru_10185A798);
    }
    double v17 = (os_log_s *)qword_101934878;
    if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_ERROR))
    {
      sub_100832C64(a1, &v202);
      double v18 = (v202.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &v202
          : (std::stringbuf::string_type *)v202.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Fence: location, why are you unknown?, %{private}s",  (uint8_t *)&buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(&v202, 0x65CuLL);
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10185A798);
      }
      uint64_t v19 = qword_101934878;
      sub_100832C64(a1, &buf);
      if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_std::stringbuf::string_type buf = &buf;
      }
      else {
        p_std::stringbuf::string_type buf = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v201.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v201.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
      _os_log_send_and_compose_impl( 2LL,  0LL,  &v202,  1628LL,  &_mh_execute_header,  v19,  16LL,  "Fence: location, why are you unknown?, %{private}s",  &v201,  12);
      int v22 = v21;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate & , const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, const double, const bo ol, CLFenceMonitorLogic::FenceMonitorAnalytics &)",  "%s\n",  (const char *)v22);
      if (v22 != &v202) {
        free(v22);
      }
    }

    goto LABEL_30;
  }

  int v14 = *a5;
  switch((int)v10)
  {
    case 1:
    case 2:
    case 3:
    case 9:
      int v15 = 0;
      int v16 = 0;
      int v169 = 46;
      int v167 = 71;
      int v168 = 46;
      break;
    case 4:
    case 11:
    case 13:
      int v15 = 0;
      int v16 = 0;
      int v168 = 46;
      int v169 = 87;
      goto LABEL_25;
    case 5:
    case 14:
      uint64_t result = sub_10124C900(*(unsigned int *)(a1 + 96));
LABEL_324:
      __break(1u);
      return result;
    case 6:
      int v15 = 0;
      int v169 = 46;
      int v16 = 1;
      goto LABEL_28;
    case 7:
      int v16 = 0;
      int v169 = 46;
      int v15 = 1;
      goto LABEL_28;
    case 8:
    case 12:
      goto LABEL_31;
    case 10:
      int v15 = 0;
      int v16 = 0;
      int v168 = 80;
      int v169 = 46;
LABEL_25:
      int v167 = 46;
      break;
    default:
      int v15 = 0;
      int v16 = 0;
      int v169 = 46;
LABEL_28:
      int v167 = 46;
      int v168 = 46;
      break;
  }

  sub_10083FEA4(a1);
  if (v23 >= 0.0)
  {
    int v165 = v16;
    int v166 = v15;
    if (*(void *)(a4 + 232) != *(void *)(a4 + 224))
    {
      if ((*(_BYTE *)(a4 + 160) & 0x10) != 0)
      {
        int v26 = sub_100840FD0((int8x16_t *)(a1 + 4), (uint64_t **)(a4 + 224), *(double *)(a1 + 20));
      }

      else
      {
        *(_OWORD *)&v202.__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 4);
        double v25 = *(double *)(a1 + 20);
        if (v25 >= *((double *)sub_100D0ABB4() + 43)
          || (int v26 = sub_100840F48((int8x16_t *)&v202, (uint64_t **)(a4 + 224))) != 0)
        {
          double v27 = *(double *)(a1 + 20);
          if (v27 >= *((double *)sub_100D0ABB4() + 43)
            || (double v28 = sub_100841048((int8x16_t *)&v202, a4 + 224, 0),
                v28 >= *((double *)sub_100D0ABB4() + 44) * *(double *)(a1 + 20)))
          {
            double v36 = *((double *)sub_100D0ABB4() + 45);
            double v37 = *(double *)(a1 + 20);
            uint64_t v38 = (double *)sub_100D0ABB4();
            else {
              int v26 = -1;
            }
          }

          else
          {
            int v26 = 0;
          }
        }
      }

      if (v26 == -1) {
        int v39 = *a5;
      }
      else {
        int v39 = v26;
      }
      if (!v14) {
        goto LABEL_211;
      }
      goto LABEL_183;
    }

    double v29 = v23;
    double v30 = sub_1009232CC(a4);
    double v31 = sub_1009232CC(a4);
    if ((*(_BYTE *)(a4 + 160) & 0x10) != 0)
    {
      double v30 = v30 + *((double *)sub_100D0ABB4() + 41) - v29;
      double v31 = v29 + v31 + *((double *)sub_100D0ABB4() + 41);
      goto LABEL_67;
    }

    unsigned int v32 = *a5;
    if (*(double *)(a4 + 96) >= 7000.0)
    {
      if (v32 == 1)
      {
        double v30 = v30 - (v29 + *((double *)sub_100D0ABB4() + 8));
        double v31 = v31 - (v29 + *((double *)sub_100D0ABB4() + 7));
      }

      else
      {
        if (!v32)
        {
          double v30 = v30 + v29 + *((double *)sub_100D0ABB4() + 8);
          double v40 = *((double *)sub_100D0ABB4() + 7);
LABEL_59:
          double v35 = v29 + v40;
LABEL_60:
          double v31 = v31 + v35;
          goto LABEL_67;
        }

        double v30 = v30 - v29;
        double v31 = v31 - v29;
      }
    }

    else
    {
      if (v32 < 2)
      {
        switch((int)v10)
        {
          case 1:
          case 2:
          case 3:
          case 10:
          case 11:
            int v33 = *(unsigned __int8 *)sub_100D0ABB4();
            __int16 v34 = (double *)sub_100D0ABB4();
            if (v33)
            {
              if (a6) {
                double v35 = v34[19];
              }
              else {
                double v35 = v34[20];
              }
            }

            else if (a6)
            {
              double v35 = v34[17];
            }

            else
            {
              double v35 = v34[18];
            }

            goto LABEL_60;
          case 4:
          case 13:
            double v35 = *((double *)sub_100D0ABB4() + 16);
            goto LABEL_60;
          case 5:
          case 12:
          case 14:
            uint64_t result = sub_10124C784(v10);
            goto LABEL_324;
          case 6:
            std::string v139 = (double *)sub_100D0ABB4();
            if (a6)
            {
              double v40 = v139[10];
              goto LABEL_59;
            }

            double v35 = v139[11];
            break;
          case 7:
            std::string v138 = (double *)sub_100D0ABB4();
            if (a6) {
              double v40 = v138[12];
            }
            else {
              double v40 = v138[13];
            }
            goto LABEL_59;
          case 9:
            double v30 = v30 * *((double *)sub_100D0ABB4() + 15);
            double v35 = *((double *)sub_100D0ABB4() + 14);
            goto LABEL_60;
          default:
            goto LABEL_67;
        }

        goto LABEL_60;
      }

      if (a6 && v10 <= 9 && ((1 << v10) & 0x2C0) != 0)
      {
        double v31 = v31 + v29 + *((double *)sub_100D0ABB4() + 9);
LABEL_68:
        double v30 = 0.0;
LABEL_69:
        if (v31 <= 0.0) {
          double v31 = 0.0;
        }
        BOOL v41 = *(double *)(a4 + 96) < 7000.0 && (*(void *)(a4 + 160) & 0x10LL) == 0;
        double v42 = a2;
        if (v41)
        {
          double v43 = 1.0;
          BOOL v44 = 0;
          switch((int)v10)
          {
            case 0:
            case 5:
            case 12:
            case 14:
              uint64_t result = sub_10124C608(v10);
              goto LABEL_324;
            case 1:
            case 2:
            case 3:
            case 4:
            case 10:
            case 11:
            case 13:
              BOOL v44 = *((double *)sub_100D0ABB4() + 30) >= v29;
              goto LABEL_78;
            case 6:
            case 7:
              double v42 = a2;
              if ((a6 & 1) != 0) {
                break;
              }
              goto LABEL_85;
            case 9:
LABEL_78:
              if (*a5 == 1)
              {
                uint64_t v45 = (char *)sub_100D0ABB4();
                BOOL v46 = !v44;
                uint64_t v47 = 192LL;
                uint64_t v48 = 176LL;
              }

              else
              {
                if (*a5) {
                  goto LABEL_85;
                }
                uint64_t v45 = (char *)sub_100D0ABB4();
                BOOL v46 = !v44;
                uint64_t v47 = 184LL;
                uint64_t v48 = 168LL;
              }

              if (!v46) {
                uint64_t v47 = v48;
              }
              double v43 = *(double *)&v45[v47];
LABEL_85:
              if (v29 * v43 <= a2) {
                double v42 = a2 - v43 * v29;
              }
              else {
                double v42 = 0.0;
              }
              break;
            default:
              goto LABEL_85;
          }
        }

        if (v14 && v42 < v30)
        {
          int v49 = 0;
        }

        else
        {
          if (v14 == 1 || v42 <= v31)
          {
            int v164 = *a5;
            if (qword_101934870 != -1) {
              dispatch_once(&qword_101934870, &stru_10185A798);
            }
            uint64_t v83 = (os_log_s *)qword_101934878;
            if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
            {
              else {
                size_t v84 = *(void *)(a4 + 8);
              }
              __int16 v85 = &buf;
              sub_1000392EC((uint64_t)&buf, v84 + 1);
              if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                __int16 v85 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
              }
              if (v84)
              {
                else {
                  int v86 = *(const void **)a4;
                }
                memmove(v85, v86, v84);
              }

              *(_WORD *)((char *)&v85->__r_.__value_.__l.__data_ + v84) = 47;
              int v87 = *(char *)(a4 + 47);
              if (v87 >= 0) {
                BOOL v88 = (const std::string::value_type *)(a4 + 24);
              }
              else {
                BOOL v88 = *(const std::string::value_type **)(a4 + 24);
              }
              if (v87 >= 0) {
                std::string::size_type v89 = *(unsigned __int8 *)(a4 + 47);
              }
              else {
                std::string::size_type v89 = *(void *)(a4 + 32);
              }
              int v90 = std::string::append(&buf, v88, v89);
              __int128 v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
              v201.__r_.__value_.__l.__cap_ = v90->__r_.__value_.__l.__cap_;
              *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v91;
              v90->__r_.__value_.__l.__size_ = 0LL;
              v90->__r_.__value_.__l.__cap_ = 0LL;
              v90->__r_.__value_.__r.__words[0] = 0LL;
              int size = (char)v201.__r_.__value_.__s.__size_;
              std::string::size_type v93 = v201.__r_.__value_.__r.__words[0];
              double v94 = sub_1009232CC(a4);
              uint64_t v95 = *(void *)(a1 + 20);
              int v96 = &v201;
              if (size < 0) {
                int v96 = (std::string *)v93;
              }
              uint64_t v97 = *(void *)(a4 + 72);
              uint64_t v98 = *(void *)(a4 + 80);
              if (v166) {
                int v99 = 76;
              }
              else {
                int v99 = 46;
              }
              uint64_t v100 = *(void *)(a1 + 4);
              uint64_t v101 = *(void *)(a1 + 12);
              if (v165) {
                int v102 = 67;
              }
              else {
                int v102 = 46;
              }
              LODWORD(v202.__r_.__value_.__l.__data_) = 136385027;
              *(std::string::size_type *)((char *)v202.__r_.__value_.__r.__words + 4) = (std::string::size_type)v96;
              WORD2(v202.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v202.__r_.__value_.__r.__words[1] + 6) = v167;
              WORD1(v202.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(v202.__r_.__value_.__r.__words[2]) = v168;
              __int16 v203 = 1024;
              int v204 = v169;
              __int16 v205 = 1024;
              int v206 = v102;
              __int16 v207 = 1024;
              int v208 = v99;
              __int16 v209 = 1026;
              int v210 = a6;
              __int16 v211 = 2050;
              double v212 = v94;
              __int16 v213 = 2050;
              double v214 = a2;
              __int16 v215 = 2049;
              double v216 = v30;
              __int16 v217 = 2049;
              double v218 = v31;
              __int16 v219 = 2049;
              double v220 = v42;
              __int16 v221 = 2049;
              double v222 = v29;
              __int16 v223 = 2050;
              uint64_t v224 = v95;
              __int16 v225 = 2049;
              uint64_t v226 = v97;
              __int16 v227 = 2049;
              uint64_t v228 = v98;
              __int16 v229 = 2049;
              uint64_t v230 = v100;
              __int16 v231 = 2049;
              uint64_t v232 = v101;
              _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEBUG,  "getStatusFromLocation, %{private}s, fix, %c%c%c%c%c, isWifiPowered, %{public}d,  effectiveDistance, %{pu blic}.2lf, distance, %{public}.1f, entryRadius, %{private}.1f, exitRadius, %{private}.1f, adjDist, %{pri vate}.1lf, adjHorAcc, %{private}.1lf, origHorAcc, %{public}.1lf, fenceCenter, %{private}f, %{private}f, currentLocation, %{private}f, %{private}f,",  (uint8_t *)&v202,  0x9Eu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(&v202, 0x65CuLL);
              if (qword_101934870 != -1) {
                dispatch_once(&qword_101934870, &stru_10185A798);
              }
              os_log_t logb = (os_log_t)qword_101934878;
              sub_10065EF44((const void **)a4, &v201);
              int v148 = (char)v201.__r_.__value_.__s.__size_;
              std::string::size_type v149 = v201.__r_.__value_.__r.__words[0];
              double v150 = sub_1009232CC(a4);
              uint64_t v151 = *(void *)(a1 + 20);
              int v152 = &v201;
              if (v148 < 0) {
                int v152 = (std::string *)v149;
              }
              uint64_t v153 = *(void *)(a4 + 72);
              uint64_t v154 = *(void *)(a4 + 80);
              if (v166) {
                int v155 = 76;
              }
              else {
                int v155 = 46;
              }
              uint64_t v156 = *(void *)(a1 + 4);
              uint64_t v157 = *(void *)(a1 + 12);
              if (v165) {
                int v158 = 67;
              }
              else {
                int v158 = 46;
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136385027;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v152;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v167;
              WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(buf.__r_.__value_.__r.__words[2]) = v168;
              __int16 v171 = 1024;
              int v172 = v169;
              __int16 v173 = 1024;
              int v174 = v158;
              __int16 v175 = 1024;
              int v176 = v155;
              __int16 v177 = 1026;
              int v178 = a6;
              __int16 v179 = 2050;
              double v180 = v150;
              __int16 v181 = 2050;
              double v182 = a2;
              __int16 v183 = 2049;
              double v184 = v30;
              __int16 v185 = 2049;
              double v186 = v31;
              __int16 v187 = 2049;
              double v188 = v42;
              __int16 v189 = 2049;
              double v190 = v29;
              __int16 v191 = 2050;
              uint64_t v192 = v151;
              __int16 v193 = 2049;
              uint64_t v194 = v153;
              __int16 v195 = 2049;
              uint64_t v196 = v154;
              __int16 v197 = 2049;
              uint64_t v198 = v156;
              __int16 v199 = 2049;
              uint64_t v200 = v157;
              _os_log_send_and_compose_impl( 2LL,  0LL,  &v202,  1628LL,  &_mh_execute_header,  logb,  2LL,  "getStatusFromLocation, %{private}s, fix, %c%c%c%c%c, isWifiPowered, %{public}d,  effectiveDistance, %{pu blic}.2lf, distance, %{public}.1f, entryRadius, %{private}.1f, exitRadius, %{private}.1f, adjDist, %{pri vate}.1lf, adjHorAcc, %{private}.1lf, origHorAcc, %{public}.1lf, fenceCenter, %{private}f, %{private}f, currentLocation, %{private}f, %{private}f,",  &buf,  158);
              __int16 v82 = v159;
              goto LABEL_319;
            }

LABEL_182:
            *(double *)(a7 + 624) = v42;
            *(double *)(a7 + 632) = v29;
            *(double *)(a7 + 640) = v30;
            *(double *)(a7 + 648) = v31;
            *(_DWORD *)(a7 + 608) = *a5;
            *(_DWORD *)(a7 + 604) = v39;
            if (!v14)
            {
LABEL_211:
              if (v14 == 1 || v39 != 1)
              {
                int v14 = v39;
                if (qword_101934870 != -1) {
                  dispatch_once(&qword_101934870, &stru_10185A798);
                }
                std::string::size_type v124 = (os_log_s *)qword_101934878;
                if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
                {
                  else {
                    size_t v125 = *(void *)(a4 + 8);
                  }
                  char v126 = &v202;
                  sub_1000392EC((uint64_t)&v202, v125 + 1);
                  if ((v202.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    char v126 = (std::stringbuf::string_type *)v202.__r_.__value_.__r.__words[0];
                  }
                  if (v125)
                  {
                    else {
                      int v127 = *(const void **)a4;
                    }
                    memmove(v126, v127, v125);
                  }

                  *(_WORD *)((char *)&v126->__r_.__value_.__l.__data_ + v125) = 47;
                  int v128 = *(char *)(a4 + 47);
                  if (v128 >= 0) {
                    uint64_t v129 = (const std::string::value_type *)(a4 + 24);
                  }
                  else {
                    uint64_t v129 = *(const std::string::value_type **)(a4 + 24);
                  }
                  if (v128 >= 0) {
                    std::string::size_type v130 = *(unsigned __int8 *)(a4 + 47);
                  }
                  else {
                    std::string::size_type v130 = *(void *)(a4 + 32);
                  }
                  int v131 = std::string::append(&v202, v129, v130);
                  __int128 v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
                  buf.__r_.__value_.__l.__cap_ = v131->__r_.__value_.__l.__cap_;
                  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v132;
                  v131->__r_.__value_.__l.__size_ = 0LL;
                  v131->__r_.__value_.__l.__cap_ = 0LL;
                  v131->__r_.__value_.__r.__words[0] = 0LL;
                  float v133 = &buf;
                  if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    float v133 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(v202.__r_.__value_.__l.__data_) = 134283779;
                  *(double *)((char *)v202.__r_.__value_.__r.__words + 4) = a2;
                  WORD2(v202.__r_.__value_.__r.__words[1]) = 2081;
                  *(std::string::size_type *)((char *)&v202.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v133;
                  _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEBUG,  "Fence status remained unchanged, distToCenter, %{private}.1lf, %{private}s",  (uint8_t *)&v202,  0x16u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(&v202, 0x65CuLL);
                  if (qword_101934870 != -1) {
                    dispatch_once(&qword_101934870, &stru_10185A798);
                  }
                  uint64_t v134 = qword_101934878;
                  sub_10065EF44((const void **)a4, &buf);
                  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    int v135 = &buf;
                  }
                  else {
                    int v135 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(v201.__r_.__value_.__l.__data_) = 134283779;
                  *(double *)((char *)v201.__r_.__value_.__r.__words + 4) = a2;
                  WORD2(v201.__r_.__value_.__r.__words[1]) = 2081;
                  *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v135;
                  LODWORD(v160) = 22;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  &v202,  1628LL,  &_mh_execute_header,  v134,  2LL,  "Fence status remained unchanged, distToCenter, %{private}.1lf, %{private}s",  &v201,  v160);
                  uint64_t v137 = v136;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocat ionPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus & , const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)",  "%s\n",  (const char *)v137);
                  if (v137 != &v202) {
                    free(v137);
                  }
                }
              }

              else
              {
                if (qword_101934870 != -1) {
                  dispatch_once(&qword_101934870, &stru_10185A798);
                }
                int v114 = (os_log_s *)qword_101934878;
                if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
                {
                  else {
                    size_t v115 = *(void *)(a4 + 8);
                  }
                  __int128 v116 = &v202;
                  sub_1000392EC((uint64_t)&v202, v115 + 1);
                  if ((v202.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    __int128 v116 = (std::stringbuf::string_type *)v202.__r_.__value_.__r.__words[0];
                  }
                  if (v115)
                  {
                    else {
                      __int128 v117 = *(const void **)a4;
                    }
                    memmove(v116, v117, v115);
                  }

                  *(_WORD *)((char *)&v116->__r_.__value_.__l.__data_ + v115) = 47;
                  int v118 = *(char *)(a4 + 47);
                  if (v118 >= 0) {
                    std::string::size_type v119 = (const std::string::value_type *)(a4 + 24);
                  }
                  else {
                    std::string::size_type v119 = *(const std::string::value_type **)(a4 + 24);
                  }
                  if (v118 >= 0) {
                    std::string::size_type v120 = *(unsigned __int8 *)(a4 + 47);
                  }
                  else {
                    std::string::size_type v120 = *(void *)(a4 + 32);
                  }
                  __int128 v121 = std::string::append(&v202, v119, v120);
                  __int128 v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
                  buf.__r_.__value_.__l.__cap_ = v121->__r_.__value_.__l.__cap_;
                  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v122;
                  v121->__r_.__value_.__l.__size_ = 0LL;
                  v121->__r_.__value_.__l.__cap_ = 0LL;
                  v121->__r_.__value_.__r.__words[0] = 0LL;
                  int v123 = &buf;
                  if ((buf.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    int v123 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(v202.__r_.__value_.__l.__data_) = 134283779;
                  *(double *)((char *)v202.__r_.__value_.__r.__words + 4) = a2;
                  WORD2(v202.__r_.__value_.__r.__words[1]) = 2081;
                  *(std::string::size_type *)((char *)&v202.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v123;
                  _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEBUG,  "Fence status changed to Outside, distToCenter, %{private}.1lf, %{private}s",  (uint8_t *)&v202,  0x16u);
                }

                if (sub_1002921D0(115, 2))
                {
                  bzero(&v202, 0x65CuLL);
                  if (qword_101934870 != -1) {
                    dispatch_once(&qword_101934870, &stru_10185A798);
                  }
                  uint64_t v144 = qword_101934878;
                  sub_10065EF44((const void **)a4, &buf);
                  if ((buf.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                    std::string v145 = &buf;
                  }
                  else {
                    std::string v145 = (std::stringbuf::string_type *)buf.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(v201.__r_.__value_.__l.__data_) = 134283779;
                  *(double *)((char *)v201.__r_.__value_.__r.__words + 4) = a2;
                  WORD2(v201.__r_.__value_.__r.__words[1]) = 2081;
                  *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v145;
                  LODWORD(v160) = 22;
                  _os_log_send_and_compose_impl( 2LL,  0LL,  &v202,  1628LL,  &_mh_execute_header,  v144,  2LL,  "Fence status changed to Outside, distToCenter, %{private}.1lf, %{private}s",  &v201,  v160);
                  __int128 v147 = v146;
                  sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const CLDaemonLocat ionPrivate &, const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus & , const double, const BOOL, CLFenceMonitorLogic::FenceMonitorAnalytics &)",  "%s\n",  (const char *)v147);
                  if (v147 != &v202) {
                    free(v147);
                  }
                }

                int v14 = 1;
              }

              goto LABEL_31;
            }

  uint64_t v67 = *(_DWORD *)(a2 + 216);
  v5 |= 0x100000000000uLL;
  *unsigned int v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 216) = v67;
  double v4 = *v3;
  uint64_t v7 = *(void *)(a2 + 364);
  if ((*v3 & 0x100000000000000LL) == 0)
  {
LABEL_77:
    if ((v4 & 0x40) == 0) {
      goto LABEL_78;
    }
    goto LABEL_184;
  }

  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfMovingCondition", *(_BYTE *)(a1 + 344));
  uint64_t v7 = *v5;
  int8x16_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x400000000LL) == 0)
  {
LABEL_81:
    if ((v6 & 0x800000000LL) == 0) {
      goto LABEL_82;
    }
    goto LABEL_184;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 216), 0x25Cu);
  double v5 = *v4;
  int8x16_t v6 = v4[1];
  if ((*v4 & 0x100000000000000LL) == 0)
  {
LABEL_77:
    if ((v5 & 0x40) == 0) {
      goto LABEL_78;
    }
    goto LABEL_184;
  }

            PB::Reader::recallMark(this, v153);
          }

          else
          {
            __int128 v116 = *(char **)(a1 + 64);
            size_t v115 = *(void *)(a1 + 72);
            if ((unint64_t)v116 >= v115)
            {
              uint64_t v137 = (char *)*v10;
              std::string v138 = (v116 - (_BYTE *)*v10) >> 3;
              std::string v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 61) {
LABEL_257:
              }
                sub_100007008();
              uint64_t v140 = v115 - (void)v137;
              if (v140 >> 2 > v139) {
                std::string v139 = v140 >> 2;
              }
              else {
                float v141 = v139;
              }
              if (v141)
              {
                int64_t v142 = (char *)sub_1000071BC(v152, v141);
                uint64_t v137 = *(char **)(a1 + 56);
                __int128 v116 = *(char **)(a1 + 64);
              }

              else
              {
                int64_t v142 = 0LL;
              }

              __int128 v147 = &v142[8 * v138];
              *(void *)__int128 v147 = 0LL;
              __int128 v112 = v147 + 8;
              while (v116 != v137)
              {
                int v148 = *((void *)v116 - 1);
                v116 -= 8;
                *((void *)v147 - 1) = v148;
                v147 -= 8;
              }

              *(void *)(a1 + 56) = v147;
              *(void *)(a1 + 64) = v112;
              *(void *)(a1 + 72) = &v142[8 * v141];
              if (v137) {
                operator delete(v137);
              }
            }

            else
            {
              *(void *)__int128 v116 = 0LL;
              __int128 v112 = v116 + 8;
            }

            *(void *)(a1 + 64) = v112;
LABEL_240:
            std::string::size_type v149 = *((void *)this + 1);
            if (v149 <= 0xFFFFFFFFFFFFFFF7LL && v149 + 8 <= *((void *)this + 2))
            {
              *(v112 - 1) = *(void *)(*(void *)this + v149);
LABEL_244:
              *((void *)this + 1) += 8LL;
            }

            else
            {
LABEL_242:
              *((_BYTE *)this + 24) = 1;
            }
          }

void sub_100842CF0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
  if (a45 < 0) {
    operator delete(a40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100842E18( double *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, double a9, char a10)
{
  uint64_t v19 = "type";
  switch(*(_DWORD *)(a5 + 96))
  {
    case 0:
    case 2:
    case 5:
    case 0xC:
    case 0xE:
      uint64_t v19 = "other type";
      if (!a8 || !a10) {
        goto LABEL_38;
      }
      std::string::assign(&v74, "other leashed");
      *a1 = 0.0;
      *a2 = 0;
      goto LABEL_5;
    case 1:
    case 3:
    case 9:
      unsigned int v28 = *(_DWORD *)(a3 + 96);
      BOOL v29 = v28 > 9;
      int v30 = (1 << v28) & 0x20E;
      BOOL v31 = v29 || v30 == 0;
      if (v31
        || vabdd_f64(a9, *a1) > *((double *)sub_100D0ABB4() + 35)
        && vabdd_f64(a9, *(double *)(a3 + 76)) > *((double *)sub_100D0ABB4() + 36))
      {
        goto LABEL_19;
      }

      int v33 = *a2 + 1;
      goto LABEL_29;
    case 4:
    case 0xD:
      if (*(_DWORD *)(a5 + 84) > 0x42u)
      {
        double v38 = *(double *)(a5 + 20);
        if (v38 >= *((double *)sub_100D0ABB4() + 30))
        {
          std::string::assign(&v74, "accuracy");
          *a1 = 0.0;
          *a2 = 0;
          if (a6 <= 1) {
            goto LABEL_5;
          }
        }

        else
        {
          uint64_t v19 = "2+AP";
LABEL_38:
          std::string::assign(&v74, v19);
          *a1 = 0.0;
          *a2 = 0;
        }
      }

      else
      {
        std::string::assign(&v74, "one-AP");
        *a1 = 0.0;
        *a2 = 0;
        if (a6 < 2) {
          goto LABEL_5;
        }
      }

      goto LABEL_51;
    case 6:
    case 7:
    case 8:
    case 0xA:
      goto LABEL_38;
    case 0xB:
LABEL_19:
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10185A798);
      }
      unsigned int v32 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::stringbuf::string_type buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "Fence: location treated as new continuous session",  buf,  2u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_10185A798);
        }
        LOWORD(v75) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: location treated as new continuous session",  &v75,  2);
        double v72 = (uint8_t *)v71;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLFenceMonitorLogic::shouldIgnoreLocation(const CFAbsoluteTime, CFAbsoluteTime &, int &, CLDaemonL ocation &, const CLDaemonLocation &, const CLDaemonLocation &, const int, const BOOL, const BOOL, const BOOL)",  "%s\n",  v71);
        if (v72 != buf) {
          free(v72);
        }
      }

      int v33 = 0;
      *a1 = a9;
LABEL_29:
      *a2 = v33;
      int v34 = *((_DWORD *)sub_100D0ABB4() + 105);
      int v35 = *((_DWORD *)sub_100D0ABB4() + 106);
      int v36 = *a2;
      if (a6 >= 2 && a7 && v36 >= v34)
      {
        double v37 = "requested";
        goto LABEL_50;
      }

      if ((a8 & 1) == 0 && v36 >= v34)
      {
        double v37 = "wifi off";
        goto LABEL_50;
      }

      if (*(int *)(a5 + 84) >= 51 && v36 > v35)
      {
        double v37 = "good";
        goto LABEL_50;
      }

      if (a8 && (a10 & 1) != 0)
      {
        int v39 = "leashed";
        goto LABEL_64;
      }

      int v39 = "other";
      if (vabdd_f64(a9, *(double *)(a4 + 76)) <= 120.0 || v36 < v34)
      {
LABEL_64:
        std::string::assign(&v74, v39);
LABEL_5:
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_10185A798);
        }
        uint64_t v20 = (os_log_s *)qword_101934878;
        if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
        {
          __int16 v21 = &v74;
          if ((v74.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            __int16 v21 = (std::string *)v74.__r_.__value_.__r.__words[0];
          }
          int v22 = *(_DWORD *)(a5 + 96);
          uint64_t v23 = *(void *)(a5 + 20);
          int v24 = *(_DWORD *)(a5 + 84);
          int v25 = *(_DWORD *)(a5 + 128);
          int v26 = *a2;
          *(_DWORD *)std::stringbuf::string_type buf = 136382211;
          int v90 = v21;
          __int16 v91 = 1026;
          int v92 = v22;
          __int16 v93 = 2050;
          uint64_t v94 = v23;
          __int16 v95 = 1026;
          int v96 = v24;
          __int16 v97 = 1026;
          int v98 = v25;
          __int16 v99 = 1025;
          int v100 = v26;
          __int16 v101 = 1025;
          int v102 = a6;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "Fence: Ignoring location, %{private}s, type, %{public}d, hacc, %{public}.1f, conf, %{public}d, integ, %{publ ic}d, fixCnt, %{private}d, counter, %{private}d",  buf,  0x34u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934870 != -1) {
            dispatch_once(&qword_101934870, &stru_10185A798);
          }
          int v63 = &v74;
          if ((v74.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            int v63 = (std::string *)v74.__r_.__value_.__r.__words[0];
          }
          int v64 = *(_DWORD *)(a5 + 96);
          uint64_t v65 = *(void *)(a5 + 20);
          int v66 = *(_DWORD *)(a5 + 84);
          int v67 = *(_DWORD *)(a5 + 128);
          int v68 = *a2;
          int v75 = 136382211;
          uint64_t v76 = v63;
          __int16 v77 = 1026;
          int v78 = v64;
          __int16 v79 = 2050;
          uint64_t v80 = v65;
          __int16 v81 = 1026;
          int v82 = v66;
          __int16 v83 = 1026;
          int v84 = v67;
          __int16 v85 = 1025;
          int v86 = v68;
          __int16 v87 = 1025;
          int v88 = a6;
          LODWORD(v73) = 52;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Ignoring location, %{private}s, type, %{public}d, hacc, %{public}.1f, conf, %{public}d, integ, %{publ ic}d, fixCnt, %{private}d, counter, %{private}d",  &v75,  v73);
          int v70 = (uint8_t *)v69;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLFenceMonitorLogic::shouldIgnoreLocation(const CFAbsoluteTime, CFAbsoluteTime &, int &, CLDaemo nLocation &, const CLDaemonLocation &, const CLDaemonLocation &, const int, const BOOL, const BOOL, const BOOL)",  "%s\n",  v69);
          if (v70 != buf) {
            free(v70);
          }
        }

        uint64_t v27 = 1LL;
        goto LABEL_59;
      }

      double v37 = "last location old";
LABEL_50:
      std::string::assign(&v74, v37);
LABEL_51:
      if (qword_101934870 != -1) {
        dispatch_once(&qword_101934870, &stru_10185A798);
      }
      double v40 = (os_log_s *)qword_101934878;
      if (os_log_type_enabled((os_log_t)qword_101934878, OS_LOG_TYPE_DEBUG))
      {
        BOOL v41 = &v74;
        if ((v74.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          BOOL v41 = (std::string *)v74.__r_.__value_.__r.__words[0];
        }
        int v42 = *(_DWORD *)(a5 + 96);
        uint64_t v43 = *(void *)(a5 + 20);
        int v44 = *(_DWORD *)(a5 + 84);
        int v45 = *(_DWORD *)(a5 + 128);
        int v46 = *a2;
        *(_DWORD *)std::stringbuf::string_type buf = 136382211;
        int v90 = v41;
        __int16 v91 = 1026;
        int v92 = v42;
        __int16 v93 = 2050;
        uint64_t v94 = v43;
        __int16 v95 = 1026;
        int v96 = v44;
        __int16 v97 = 1026;
        int v98 = v45;
        __int16 v99 = 1025;
        int v100 = v46;
        __int16 v101 = 1025;
        int v102 = a6;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "Fence: Accepting location, %{private}s, type, %{public}d, hacc, %{public}.1f, conf, %{public}d, integ, %{publi c}d, fixCnt, %{private}d, counter, %{private}d",  buf,  0x34u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934870 != -1) {
          dispatch_once(&qword_101934870, &stru_10185A798);
        }
        __int128 v55 = &v74;
        if ((v74.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          __int128 v55 = (std::string *)v74.__r_.__value_.__r.__words[0];
        }
        int v56 = *(_DWORD *)(a5 + 96);
        uint64_t v57 = *(void *)(a5 + 20);
        int v58 = *(_DWORD *)(a5 + 84);
        int v59 = *(_DWORD *)(a5 + 128);
        int v60 = *a2;
        int v75 = 136382211;
        uint64_t v76 = v55;
        __int16 v77 = 1026;
        int v78 = v56;
        __int16 v79 = 2050;
        uint64_t v80 = v57;
        __int16 v81 = 1026;
        int v82 = v58;
        __int16 v83 = 1026;
        int v84 = v59;
        __int16 v85 = 1025;
        int v86 = v60;
        __int16 v87 = 1025;
        int v88 = a6;
        LODWORD(v73) = 52;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934878,  2LL,  "Fence: Accepting location, %{private}s, type, %{public}d, hacc, %{public}.1f, conf, %{public}d, integ, %{publi c}d, fixCnt, %{private}d, counter, %{private}d",  &v75,  v73);
        uint64_t v62 = (uint8_t *)v61;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "static BOOL CLFenceMonitorLogic::shouldIgnoreLocation(const CFAbsoluteTime, CFAbsoluteTime &, int &, CLDaemonL ocation &, const CLDaemonLocation &, const CLDaemonLocation &, const int, const BOOL, const BOOL, const BOOL)",  "%s\n",  v61);
        if (v62 != buf) {
          free(v62);
        }
      }

      uint64_t v27 = 0LL;
LABEL_59:
      if (*(double *)(a5 + 20) > 0.0)
      {
        __int128 v47 = *(_OWORD *)(a5 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a5;
        *(_OWORD *)(a3 + 16) = v47;
        __int128 v48 = *(_OWORD *)(a5 + 32);
        __int128 v49 = *(_OWORD *)(a5 + 48);
        __int128 v50 = *(_OWORD *)(a5 + 80);
        *(_OWORD *)(a3 + 64) = *(_OWORD *)(a5 + 64);
        *(_OWORD *)(a3 + 80) = v50;
        *(_OWORD *)(a3 + 32) = v48;
        *(_OWORD *)(a3 + 48) = v49;
        __int128 v51 = *(_OWORD *)(a5 + 96);
        __int128 v52 = *(_OWORD *)(a5 + 112);
        __int128 v53 = *(_OWORD *)(a5 + 128);
        *(_OWORD *)(a3 + 140) = *(_OWORD *)(a5 + 140);
        *(_OWORD *)(a3 + 112) = v52;
        *(_OWORD *)(a3 + 128) = v53;
        *(_OWORD *)(a3 + 96) = v51;
      }

      return v27;
    default:
      goto LABEL_51;
  }

void sub_100843680( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008436EC(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100843718(id a1)
{
  qword_101934878 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100843744(double **a1, double *a2)
{
  double v4 = *a1;
  double v5 = a1[1];
  if ((unint64_t)((char *)v5 - (char *)*a1) >= 0x40)
  {
    double v6 = *a2;
    uint64_t v7 = v4 + 2;
    if (v4 + 2 == v5)
    {
      double v9 = 0.0;
    }

    else
    {
      unint64_t v8 = 0LL;
      double v9 = 0.0;
      do
      {
        double v10 = *(v7 - 2);
        double v11 = *v7;
        if (v10 != *v7)
        {
          if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_9;
          }

          double v13 = vabdd_f64(v10, v11);
          double v14 = fabs(v10);
          double v15 = fabs(v11);
          if (v14 < v15) {
            double v14 = v15;
          }
          double v16 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
          if (v13 > v16)
          {
LABEL_9:
            double v9 = v9 + sub_100843F40(v7 - 2, v7);
            v8 += sub_100844190(v7 - 2, v7);
          }
        }

        v7 += 2;
      }

      while (v7 != v5);
      if ((v8 & 1) != 0)
      {
        double v17 = (double)((v8 >> 1) + 1);
        double v18 = fabs(v9);
        double v19 = -v18;
        double v20 = -(v18 - v17 * 6.28318531);
        double v21 = -(v19 + v17 * 6.28318531);
        if (v9 <= 0.0) {
          double v9 = v20;
        }
        else {
          double v9 = v21;
        }
      }
    }

    if (v6 * v6 * v9 < 0.0)
    {
      uint64_t v23 = *a1;
      int v22 = a1[1];
      if (*a1 != v22)
      {
        int v24 = v22 - 2;
        if (v24 > v23)
        {
          int v25 = v23 + 2;
          do
          {
            __int128 v26 = *((_OWORD *)v25 - 1);
            *((_OWORD *)v25 - 1) = *(_OWORD *)v24;
            *(_OWORD *)int v24 = v26;
            v24 -= 2;
            BOOL v27 = v25 >= v24;
            v25 += 2;
          }

          while (!v27);
        }
      }
    }
  }

void sub_10084390C(double **a1, double *a2)
{
  double v4 = *a1;
  double v5 = a1[1];
  if ((unint64_t)((char *)v5 - (char *)*a1) >= 0x40)
  {
    double v6 = *a2;
    uint64_t v7 = v4 + 2;
    if (v4 + 2 == v5)
    {
      double v9 = 0.0;
    }

    else
    {
      unint64_t v8 = 0LL;
      double v9 = 0.0;
      do
      {
        double v10 = *(v7 - 2);
        double v11 = *v7;
        if (v10 != *v7)
        {
          if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_9;
          }

          double v13 = vabdd_f64(v10, v11);
          double v14 = fabs(v10);
          double v15 = fabs(v11);
          if (v14 < v15) {
            double v14 = v15;
          }
          double v16 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
          if (v13 > v16)
          {
LABEL_9:
            double v9 = v9 + sub_100843F40(v7 - 2, v7);
            v8 += sub_100844190(v7 - 2, v7);
          }
        }

        v7 += 2;
      }

      while (v7 != v5);
      if ((v8 & 1) != 0)
      {
        double v17 = (double)((v8 >> 1) + 1);
        double v18 = fabs(v9);
        double v19 = -v18;
        double v20 = -(v18 - v17 * 6.28318531);
        double v21 = -(v19 + v17 * 6.28318531);
        if (v9 <= 0.0) {
          double v9 = v20;
        }
        else {
          double v9 = v21;
        }
      }
    }

    if (v6 * v6 * v9 > 0.0)
    {
      uint64_t v23 = *a1;
      int v22 = a1[1];
      if (*a1 != v22)
      {
        int v24 = v22 - 2;
        if (v24 > v23)
        {
          int v25 = v23 + 2;
          do
          {
            __int128 v26 = *((_OWORD *)v25 - 1);
            *((_OWORD *)v25 - 1) = *(_OWORD *)v24;
            *(_OWORD *)int v24 = v26;
            v24 -= 2;
            BOOL v27 = v25 >= v24;
            v25 += 2;
          }

          while (!v27);
        }
      }
    }
  }

void sub_100843AD4(double **a1)
{
  int v1 = *a1;
  unsigned int v2 = a1[1];
  if ((unint64_t)((char *)v2 - (char *)*a1) >= 0x30)
  {
    double v4 = *v1;
    double v30 = v1[1];
    double v31 = v4;
    sub_100843CD4(&v31, &v30, 1);
    double v5 = v30;
    double v6 = v31;
    double v31 = *(v2 - 2);
    double v30 = *(v2 - 1);
    sub_100843CD4(&v31, &v30, 1);
    if (v6 != v31)
    {
      if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_21;
      }

      double v11 = vabdd_f64(v6, v31);
      double v12 = fabs(v6);
      double v13 = fabs(v31);
      if (v12 >= v13) {
        double v13 = v12;
      }
      double v14 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
      if (v11 > v14) {
        goto LABEL_21;
      }
    }

    if (v5 != v30)
    {
      if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_21;
      }

      double v7 = vabdd_f64(v5, v30);
      double v8 = fabs(v5);
      double v9 = fabs(v30);
      if (v8 >= v9) {
        double v9 = v8;
      }
      double v10 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
      if (v7 > v10)
      {
LABEL_21:
        double v15 = *a1;
        double v16 = a1[1];
        uint64_t v18 = *(void *)*a1;
        uint64_t v17 = *((void *)*a1 + 1);
        unint64_t v19 = (unint64_t)a1[2];
        if ((unint64_t)v16 >= v19)
        {
          uint64_t v21 = ((char *)v16 - (char *)v15) >> 4;
          uint64_t v22 = v19 - (void)v15;
          uint64_t v23 = v22 >> 3;
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            int v25 = (char *)sub_100037038((uint64_t)(a1 + 2), v24);
          }
          else {
            int v25 = 0LL;
          }
          __int128 v26 = &v25[16 * v21];
          BOOL v27 = &v25[16 * v24];
          *(void *)__int128 v26 = v18;
          *((void *)v26 + 1) = v17;
          double v20 = (double *)(v26 + 16);
          BOOL v29 = *a1;
          unsigned int v28 = a1[1];
          if (v28 != *a1)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v28 - 1);
              v26 -= 16;
              v28 -= 2;
            }

            while (v28 != v29);
            unsigned int v28 = *a1;
          }

          *a1 = (double *)v26;
          a1[1] = v20;
          a1[2] = (double *)v27;
          if (v28) {
            operator delete(v28);
          }
        }

        else
        {
          *(void *)double v16 = v18;
          *((void *)v16 + 1) = v17;
          double v20 = v16 + 2;
        }

        a1[1] = v20;
      }
    }
  }

void sub_100843CD4(double *a1, double *a2, int a3)
{
  double v6 = *a1;
  double v7 = fabs(*a1);
  double v8 = 180.0;
  if (v7 == 180.0) {
    goto LABEL_2;
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v10 = fabs(v7 + -180.0);
    double v8 = 180.0;
    if (v7 < 180.0) {
      double v7 = 180.0;
    }
    double v11 = v7 >= 1.0 ? v7 * 2.22044605e-16 : 2.22044605e-16;
    if (v10 <= v11) {
      goto LABEL_2;
    }
  }

  double v8 = 180.0;
  if (v6 <= 180.0)
  {
    if (v6 >= -180.0) {
      goto LABEL_3;
    }
    double v8 = fmod(v6 + -180.0, 360.0) + 180.0;
    goto LABEL_2;
  }

  double v6 = fmod(v6 + 180.0, 360.0) + -180.0;
  *a1 = v6;
  if (v6 == -180.0) {
    goto LABEL_2;
  }
  BOOL v12 = ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
     && (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v12 || *(void *)&v6 == 0LL)
  {
    double v8 = 180.0;
    double v14 = fabs(v6 + 180.0);
    double v15 = fabs(v6);
    if (v15 < 180.0) {
      double v15 = 180.0;
    }
    double v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 <= v16)
    {
LABEL_2:
      *a1 = v8;
      double v6 = v8;
    }
  }

  if (!a3) {
    goto LABEL_37;
  }
LABEL_3:
  double v9 = fabs(*a2);
  if (v9 == 90.0) {
    goto LABEL_5;
  }
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_37;
  }
  double v17 = fabs(v9 + -90.0);
  if (v9 < 90.0) {
    double v9 = 90.0;
  }
  double v18 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
  if (v17 <= v18)
  {
LABEL_5:
    *a1 = 0.0;
    double v6 = 0.0;
  }

  else
  {
LABEL_37:
    if (v6 <= -180.0) {
      goto LABEL_52;
    }
    if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
    {
      if (v6 <= 180.0) {
        return;
      }
LABEL_49:
      sub_10124CA7C();
    }
  }

  double v19 = fabs(v6 + 180.0);
  double v20 = fabs(v6);
  if (v20 < 180.0) {
    double v20 = 180.0;
  }
  if (v20 >= 1.0) {
    double v21 = v20 * 2.22044605e-16;
  }
  else {
    double v21 = 2.22044605e-16;
  }
  if (v19 <= v21) {
LABEL_52:
  }
    sub_10124CAA4();
  if (v6 > 180.0 && fabs(v6 + -180.0) > v21) {
    goto LABEL_49;
  }
}

double sub_100843F40(double *a1, double *a2)
{
  double v2 = a1[1];
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v3 & 1) == 0)
  {
    BOOL v29 = a2;
    int v33 = a1;
    int v20 = __cxa_guard_acquire(&qword_10198D598);
    a2 = v29;
    a1 = v33;
    if (v20)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      a2 = v29;
      a1 = v33;
    }
  }

  double v4 = *(double *)&qword_10198D590;
  double v5 = a2[1];
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v6 & 1) == 0)
  {
    double v30 = a2;
    int v34 = a1;
    uint64_t v21 = qword_10198D590;
    int v22 = __cxa_guard_acquire(&qword_10198D598);
    double v4 = *(double *)&v21;
    int v23 = v22;
    a2 = v30;
    a1 = v34;
    if (v23)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v4 = *(double *)&v21;
      a2 = v30;
      a1 = v34;
    }
  }

  double v7 = *(double *)&qword_10198D590;
  double v8 = *a2;
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v9 & 1) == 0)
  {
    int v35 = a1;
    double v24 = v4;
    double v31 = *a2;
    int v25 = __cxa_guard_acquire(&qword_10198D598);
    double v8 = v31;
    double v4 = v24;
    int v26 = v25;
    a1 = v35;
    if (v26)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v8 = v31;
      double v4 = v24;
      a1 = v35;
    }
  }

  double v10 = *(double *)&qword_10198D590;
  double v11 = *a1;
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v12 & 1) == 0)
  {
    double v28 = v4;
    double v32 = v8;
    uint64_t v36 = qword_10198D590;
    int v27 = __cxa_guard_acquire(&qword_10198D598);
    double v8 = v32;
    double v10 = *(double *)&v36;
    double v4 = v28;
    if (v27)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v8 = v32;
      double v10 = *(double *)&v36;
      double v4 = v28;
    }
  }

  double v13 = v8 * v10;
  double v14 = tan(v2 * v4 * 0.5);
  double v15 = tan(v5 * v7 * 0.5);
  double v16 = (v14 + v15) / (v14 * v15 + 1.0);
  double v17 = tan((v13 - v11 * *(double *)&qword_10198D590) * 0.5);
  double v18 = atan(v16 * v17);
  return v18 + v18;
}

BOOL sub_100844190(double *a1, double *a2)
{
  double v2 = *a1;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v3 & 1) == 0)
  {
    int v27 = a1;
    int v33 = a2;
    double v31 = *a1;
    int v18 = __cxa_guard_acquire(&qword_10198D598);
    double v2 = v31;
    a2 = v33;
    int v19 = v18;
    a1 = v27;
    if (v19)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v2 = v31;
      a1 = v27;
      a2 = v33;
    }
  }

  double v4 = *(double *)&qword_10198D590;
  double v5 = *a1;
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v6 & 1) == 0)
  {
    int v34 = a2;
    double v32 = v2;
    uint64_t v24 = qword_10198D590;
    double v28 = *a1;
    int v20 = __cxa_guard_acquire(&qword_10198D598);
    double v4 = *(double *)&v24;
    double v5 = v28;
    double v2 = v32;
    a2 = v34;
    if (v20)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v4 = *(double *)&v24;
      double v5 = v28;
      double v2 = v32;
      a2 = v34;
    }
  }

  double v7 = v2 * v4;
  double v8 = floor(v5 * *(double *)&qword_10198D590 / 6.28318531);
  double v9 = *a2;
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v10 & 1) == 0)
  {
    int v35 = a2;
    double v23 = *a2;
    double v25 = v7;
    double v29 = v8;
    int v21 = __cxa_guard_acquire(&qword_10198D598);
    double v7 = v25;
    double v8 = v29;
    double v9 = v23;
    a2 = v35;
    if (v21)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v7 = v25;
      double v8 = v29;
      double v9 = v23;
      a2 = v35;
    }
  }

  double v11 = v7 - v8 * 6.28318531;
  double v12 = v9 * *(double *)&qword_10198D590;
  double v13 = *a2;
  unsigned __int8 v14 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v14 & 1) == 0)
  {
    double v26 = v12;
    double v30 = v11;
    double v36 = *a2;
    int v22 = __cxa_guard_acquire(&qword_10198D598);
    double v13 = v36;
    double v12 = v26;
    double v11 = v30;
    if (v22)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v13 = v36;
      double v12 = v26;
      double v11 = v30;
    }
  }

  BOOL result = 0LL;
  double v16 = v12 - floor(v13 * *(double *)&qword_10198D590 / 6.28318531) * 6.28318531;
  if (v11 >= v16) {
    double v17 = v11;
  }
  else {
    double v17 = v16;
  }
  if (v16 < v11) {
    double v11 = v16;
  }
  if (v17 > 3.14159265 && v11 < 3.14159265) {
    return v17 - v11 > 3.14159265;
  }
  return result;
}

void sub_10084443C(uint64_t a1, double ***a2)
{
  double v2 = *(void **)a1;
  unsigned __int8 v3 = *(void **)(a1 + 8);
  if (*(void **)a1 != v3)
  {
    if (v2 + 2 == v3)
    {
      double v12 = *a2;
      unsigned __int8 v14 = **a2;
      double v13 = (*a2)[1];
      uint64_t v15 = v2[1];
      *(void *)&__int128 v20 = *v2;
      *((void *)&v20 + 1) = v15;
      uint64_t v21 = v20;
      uint64_t v22 = v15;
      uint64_t v19 = 0x3FF0000000000000LL;
      double v16 = sub_1008449C8((uint64_t)&v19, v13, (double *)&v20, (double *)&v21);
      double v17 = asin(sqrt(v16));
      double v18 = (v17 + v17) * 6378135.0;
      if (v18 >= *v14) {
        double v18 = *v14;
      }
      **double v12 = v18;
    }

    else
    {
      do
      {
        double v5 = *a2;
        double v7 = **a2;
        unsigned __int8 v6 = (*a2)[1];
        __int128 v20 = *(_OWORD *)v2;
        uint64_t v21 = v2[2];
        uint64_t v22 = v2[3];
        uint64_t v19 = 0x3FF0000000000000LL;
        double v8 = sub_1008449C8((uint64_t)&v19, v6, (double *)&v20, (double *)&v21);
        double v9 = asin(sqrt(v8));
        double v10 = (v9 + v9) * 6378135.0;
        if (v10 >= *v7) {
          double v10 = *v7;
        }
        **double v5 = v10;
        double v11 = v2 + 4;
        v2 += 2;
      }

      while (v11 != v3);
    }
  }

void sub_1008445A4(uint64_t a1, int8x16_t *a2)
{
  exception = __cxa_allocate_exception(0x38uLL);
  sub_100844604((uint64_t)exception, a1, a2);
}

void sub_1008445EC(_Unwind_Exception *a1)
{
}

int8x16_t sub_100844604(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)a1 = &off_10185A858;
  *(void *)(a1 + 8) = off_10185A888;
  *(void *)(a1 + 16) = off_10185A8B0;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 48) = a3[1].i32[0];
  int8x16_t result = vextq_s8(*a3, *a3, 8uLL);
  *(int8x16_t *)(a1 + 32) = result;
  return result;
}

uint64_t sub_10084463C(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void *sub_10084467C(uint64_t a1)
{
  double v2 = operator new(0x38uLL);
  *double v2 = &off_101818AB8;
  v2[1] = &off_10185A8D0;
  v2[2] = &off_101818AE8;
  uint64_t v3 = *(void *)(a1 + 24);
  v2[3] = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(v3);
  }
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_DWORD *)v2 + 12) = *(_DWORD *)(a1 + 48);
  *double v2 = &off_10185A858;
  v2[1] = off_10185A888;
  v2[2] = off_10185A8B0;
  sub_10001242C((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_100844738(_Unwind_Exception *a1)
{
}

void sub_10084476C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  sub_100844914((uint64_t)exception, a1);
}

void sub_1008447A8(_Unwind_Exception *a1)
{
}

void sub_1008447BC(uint64_t a1)
{
  *(void *)(a1 + 16) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  operator delete((void *)a1);
}

void sub_1008447FC(uint64_t a1)
{
  *(void *)(a1 + 8) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

void sub_100844834(uint64_t a1)
{
  double v2 = (void *)(a1 - 8);
  *(void *)(a1 + 8) = &off_101818AE8;
  sub_10001233C((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  operator delete(v2);
}

const char *sub_100844878()
{
  return "Boost.Geometry Empty-Input exception";
}

void sub_100844884(void *a1)
{
  *a1 = &off_101818AE8;
  sub_10001233C(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
}

void sub_1008448BC(void *a1)
{
  double v2 = a1 - 2;
  *a1 = &off_101818AE8;
  sub_10001233C(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
  operator delete(v2);
}

void sub_100844900(std::exception *a1)
{
}

uint64_t sub_100844914(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_101818AB8;
  *(void *)(a1 + 8) = &off_10185A8D0;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_101818AE8;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
  __int128 v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &off_10185A858;
  *(void *)(a1 + 8) = off_10185A888;
  *(void *)(a1 + 16) = off_10185A8B0;
  return a1;
}

void sub_1008449B4(_Unwind_Exception *a1)
{
}

double sub_1008449C8(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v7 = sub_100844E68(a3, a2);
  double v8 = sub_100844E68(a3, a4);
  if (v8 != 0.0)
  {
    double v10 = v8;
    if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_7;
    }
    double v11 = fabs(v8);
    double v12 = 2.22044605e-16;
    if (v11 >= 1.0) {
      double v12 = v11 * 2.22044605e-16;
    }
    if (v11 > v12)
    {
LABEL_7:
      double v59 = v7;
      double v57 = sub_100844E68(a4, a2);
      double v13 = *a3;
      unsigned __int8 v14 = atomic_load((unsigned __int8 *)&qword_10198D598);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_10198D598))
      {
        qword_10198D590 = 0x3F91DF46A2529D39LL;
        __cxa_guard_release(&qword_10198D598);
      }

      double v58 = v10;
      double v15 = *(double *)&qword_10198D590;
      double v16 = a3[1];
      unsigned __int8 v17 = atomic_load((unsigned __int8 *)&qword_10198D598);
      if ((v17 & 1) == 0)
      {
        double v44 = a3[1];
        int v45 = __cxa_guard_acquire(&qword_10198D598);
        double v16 = v44;
        if (v45)
        {
          qword_10198D590 = 0x3F91DF46A2529D39LL;
          __cxa_guard_release(&qword_10198D598);
          double v16 = v44;
        }
      }

      double v18 = *(double *)&qword_10198D590;
      double v19 = *a4;
      unsigned __int8 v20 = atomic_load((unsigned __int8 *)&qword_10198D598);
      if ((v20 & 1) == 0)
      {
        double v46 = v16;
        int v47 = __cxa_guard_acquire(&qword_10198D598);
        double v16 = v46;
        if (v47)
        {
          qword_10198D590 = 0x3F91DF46A2529D39LL;
          __cxa_guard_release(&qword_10198D598);
          double v16 = v46;
        }
      }

      double v21 = *(double *)&qword_10198D590;
      double v22 = a4[1];
      unsigned __int8 v23 = atomic_load((unsigned __int8 *)&qword_10198D598);
      if ((v23 & 1) == 0)
      {
        double v48 = v16;
        int v49 = __cxa_guard_acquire(&qword_10198D598);
        double v16 = v48;
        if (v49)
        {
          qword_10198D590 = 0x3F91DF46A2529D39LL;
          __cxa_guard_release(&qword_10198D598);
          double v16 = v48;
        }
      }

      double v24 = *(double *)&qword_10198D590;
      double v25 = *a2;
      unsigned __int8 v26 = atomic_load((unsigned __int8 *)&qword_10198D598);
      if ((v26 & 1) == 0)
      {
        double v56 = v16;
        int v50 = __cxa_guard_acquire(&qword_10198D598);
        double v16 = v56;
        if (v50)
        {
          qword_10198D590 = 0x3F91DF46A2529D39LL;
          __cxa_guard_release(&qword_10198D598);
          double v16 = v56;
        }
      }

      double v27 = v13 * v15;
      double v28 = v16 * v18;
      double v53 = v22 * v24;
      double v55 = v19 * v21;
      double v29 = v25 * *(double *)&qword_10198D590;
      double v30 = a2[1];
      unsigned __int8 v31 = atomic_load((unsigned __int8 *)&qword_10198D598);
      if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_10198D598))
      {
        qword_10198D590 = 0x3F91DF46A2529D39LL;
        __cxa_guard_release(&qword_10198D598);
      }

      double v32 = v30 * *(double *)&qword_10198D590;
      __double2 v33 = __sincos_stret(v29 - v27);
      __double2 v34 = __sincos_stret(v28);
      double v51 = v29;
      __double2 v35 = __sincos_stret(v32);
      double v52 = atan2( v33.__sinval * v35.__cosval,  v33.__cosval * -(v34.__sinval * v35.__cosval) + v34.__cosval * v35.__sinval);
      __double2 v36 = __sincos_stret(v55 - v27);
      __double2 v37 = __sincos_stret(v53);
      double v54 = atan2( v36.__sinval * v37.__cosval,  v36.__cosval * -(v34.__sinval * v37.__cosval) + v34.__cosval * v37.__sinval);
      double v38 = atan2(v34.__cosval * v36.__sinval, v34.__cosval * v37.__sinval * v36.__cosval - v34.__sinval * v37.__cosval)
          + -3.14159265;
      __double2 v39 = __sincos_stret(v51 - v55);
      double v40 = atan2( v39.__sinval * v35.__cosval,  v39.__cosval * -(v37.__sinval * v35.__cosval) + v37.__cosval * v35.__sinval)
          - v38;
      double v7 = v59;
      double v41 = v59 * cos(v52 - v54) / v58;
      double v42 = cos(v40);
      if (v41 <= 0.0 || v57 * v42 / v58 <= 0.0)
      {
        if (v57 < v59) {
          return v57;
        }
      }

      else
      {
        double v43 = sin(v52 - v54);
        return v59 * v43 * (v43 - v59 * v43) / (sqrt(0.25 - v59 * v43 * (v43 - v59 * v43)) + 0.5);
      }
    }
  }

  return v7;
}

double sub_100844E68(double *a1, double *a2)
{
  double v2 = *a1;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v3 & 1) == 0)
  {
    double v32 = a2;
    __double2 v36 = a1;
    int v23 = __cxa_guard_acquire(&qword_10198D598);
    a2 = v32;
    a1 = v36;
    if (v23)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      a2 = v32;
      a1 = v36;
    }
  }

  double v4 = *(double *)&qword_10198D590;
  double v5 = a1[1];
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v6 & 1) == 0)
  {
    __double2 v33 = a2;
    uint64_t v37 = qword_10198D590;
    int v24 = __cxa_guard_acquire(&qword_10198D598);
    double v4 = *(double *)&v37;
    a2 = v33;
    if (v24)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v4 = *(double *)&v37;
      a2 = v33;
    }
  }

  double v7 = *(double *)&qword_10198D590;
  double v8 = *a2;
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v9 & 1) == 0)
  {
    __double2 v34 = a2;
    double v38 = v4;
    double v28 = *a2;
    uint64_t v30 = qword_10198D590;
    int v25 = __cxa_guard_acquire(&qword_10198D598);
    double v8 = v28;
    double v7 = *(double *)&v30;
    double v4 = v38;
    a2 = v34;
    if (v25)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v8 = v28;
      double v7 = *(double *)&v30;
      double v4 = v38;
      a2 = v34;
    }
  }

  double v10 = *(double *)&qword_10198D590;
  double v11 = a2[1];
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v12 & 1) == 0)
  {
    double v35 = a2[1];
    double v39 = v4;
    double v29 = v8;
    double v31 = v7;
    uint64_t v27 = qword_10198D590;
    int v26 = __cxa_guard_acquire(&qword_10198D598);
    double v10 = *(double *)&v27;
    double v8 = v29;
    double v7 = v31;
    double v11 = v35;
    double v4 = v39;
    if (v26)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v10 = *(double *)&v27;
      double v8 = v29;
      double v7 = v31;
      double v11 = v35;
      double v4 = v39;
    }
  }

  double v13 = v8 * v10;
  double v14 = v5 * v7;
  double v15 = v2 * v4;
  double v16 = v11 * *(double *)&qword_10198D590;
  double v17 = sin((v11 * *(double *)&qword_10198D590 - v14) * 0.5);
  double v18 = v17 * v17;
  double v19 = cos(v14);
  double v20 = v19 * cos(v16);
  double v21 = sin((v13 - v15) * 0.5);
  return v18 + v20 * (v21 * v21);
}

void sub_1008450EC(double *a1, uint64_t a2, double *a3)
{
  double v5 = *(double **)a2;
  unsigned __int8 v6 = *(double **)(a2 + 8);
  if ((unint64_t)v6 - *(void *)a2 >= 0x40)
  {
    char v16 = 0;
    double v17 = 0.0;
    uint64_t v18 = 0LL;
    char v19 = 0;
    if (v5 + 2 != v6)
    {
      do
      {
        double v8 = v5 + 4;
        v5 += 2;
      }

      while (v8 != v6);
      if (v19) {
        goto LABEL_6;
      }
      if ((_DWORD)v18 && HIDWORD(v18) && (int)v18 >= 1)
      {
        if (!(LODWORD(v17) + HIDWORD(v17))) {
          goto LABEL_13;
        }
LABEL_6:
        sub_100846CD4(a1, *(double ***)(a2 + 24), *(double ***)(a2 + 32), a3);
        return;
      }

      if (LODWORD(v17)) {
        goto LABEL_6;
      }
    }

BOOL sub_1008452A4(uint64_t a1, double *a2, double *a3, double *a4, uint64_t a5)
{
  __int16 v18 = 0;
  BOOL v17 = 0;
  unint64_t v11 = sub_100846540(a2, a3, a4, HIBYTE(v18), v18, v17);
  unint64_t v16 = v11;
  if (!(_DWORD)v11) {
    return *(_BYTE *)(a5 + 16) == 0;
  }
  if ((v11 & 0xFF00000000LL) == 0)
  {
    if ((_DWORD)v11 == 1 || (_DWORD)v11 == -1)
    {
      if (HIBYTE(v18)) {
        double v13 = a3;
      }
      else {
        double v13 = a4;
      }
      int v14 = sub_100845424(a1, a2, v13, (int *)&v16);
    }

    else
    {
      if (v17)
      {
        else {
          int v15 = 1;
        }
        if (180.0 - a3[1] - a4[1] <= 180.0) {
          int v15 = -v15;
        }
LABEL_24:
        *(_DWORD *)(a5 + 8) += v11;
        return *(_BYTE *)(a5 + 16) == 0;
      }

      int v14 = sub_100845638(a3, a4, a2);
    }

    int v15 = v14;
    if (!v14)
    {
      BOOL result = 0LL;
      *(_BYTE *)(a5 + 16) = 1;
      *(_DWORD *)a5 = 0;
      return result;
    }

    LODWORD(v11) = v16;
    goto LABEL_24;
  }

  *(_DWORD *)(a5 + 4) -= v11;
  *(_DWORD *)(a5 + 12) -= v11;
  return *(_BYTE *)(a5 + 16) == 0;
}

uint64_t sub_100845424(uint64_t a1, double *a2, double *a3, int *a4)
{
  double v4 = a2[1];
  double v5 = a3[1];
  if (v4 == v5) {
    return 0LL;
  }
  if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v23 = vabdd_f64(v4, v5);
    double v24 = fabs(v4);
    double v25 = fabs(v5);
    if (v24 < v25) {
      double v24 = v25;
    }
    double v26 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
    if (v23 <= v26) {
      return 0LL;
    }
  }

  double v9 = *a3;
  v28[0] = *a3;
  v28[1] = v5;
  v27[1] = v5;
  double v10 = -1.0;
  if (*a4 > 0) {
    double v10 = 1.0;
  }
  double v11 = v9 + v10;
  double v12 = fabs(v11);
  double v13 = 180.0;
  if (v12 != 180.0)
  {
    BOOL v14 = ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
       && (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
    if (v14 && *(void *)&v11 != 0LL) {
      goto LABEL_26;
    }
    double v16 = fabs(v12 + -180.0);
    double v13 = 180.0;
    if (v12 < 180.0) {
      double v12 = 180.0;
    }
    double v17 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 > v17)
    {
LABEL_26:
      double v13 = 180.0;
      if (v11 <= 180.0)
      {
        if (v11 >= -180.0) {
          goto LABEL_11;
        }
        double v13 = fmod(v11 + -180.0, 360.0) + 180.0;
      }

      else
      {
        double v11 = fmod(v11 + 180.0, 360.0) + -180.0;
        if (v11 != -180.0)
        {
          BOOL v18 = ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
             && (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
          if (v18 && *(void *)&v11 != 0LL) {
            goto LABEL_11;
          }
          double v13 = 180.0;
          double v20 = fabs(v11 + 180.0);
          double v21 = fabs(v11);
          if (v21 < 180.0) {
            double v21 = 180.0;
          }
          double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v20 > v22) {
            goto LABEL_11;
          }
        }
      }
    }
  }

  double v11 = v13;
LABEL_11:
  v27[0] = v11;
  return sub_100845638(v28, v27, a2);
}

uint64_t sub_100845638(double *a1, double *a2, double *a3)
{
  double v3 = *a1;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v4 & 1) == 0)
  {
    double v24 = a1;
    uint64_t v27 = a2;
    double v32 = a3;
    double v23 = *a1;
    int v16 = __cxa_guard_acquire(&qword_10198D598);
    double v3 = v23;
    a2 = v27;
    a3 = v32;
    int v17 = v16;
    a1 = v24;
    if (v17)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v3 = v23;
      a1 = v24;
      a2 = v27;
      a3 = v32;
    }
  }

  double v43 = v3 * *(double *)&qword_10198D590;
  double v5 = a1[1];
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v6 & 1) == 0)
  {
    double v28 = a2;
    __double2 v33 = a3;
    double v25 = a1[1];
    int v18 = __cxa_guard_acquire(&qword_10198D598);
    double v5 = v25;
    a2 = v28;
    a3 = v33;
    if (v18)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v5 = v25;
      a2 = v28;
      a3 = v33;
    }
  }

  double v42 = v5 * *(double *)&qword_10198D590;
  double v7 = *a2;
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v8 & 1) == 0)
  {
    double v29 = a2;
    __double2 v34 = a3;
    double v26 = *a2;
    int v19 = __cxa_guard_acquire(&qword_10198D598);
    double v7 = v26;
    a2 = v29;
    a3 = v34;
    if (v19)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v7 = v26;
      a2 = v29;
      a3 = v34;
    }
  }

  double v41 = v7 * *(double *)&qword_10198D590;
  double v9 = a2[1];
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v10 & 1) == 0)
  {
    double v35 = a3;
    double v30 = a2[1];
    int v20 = __cxa_guard_acquire(&qword_10198D598);
    double v9 = v30;
    a3 = v35;
    if (v20)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v9 = v30;
      a3 = v35;
    }
  }

  double v40 = v9 * *(double *)&qword_10198D590;
  double v11 = *a3;
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v12 & 1) == 0)
  {
    __double2 v36 = a3;
    double v31 = *a3;
    int v21 = __cxa_guard_acquire(&qword_10198D598);
    double v11 = v31;
    a3 = v36;
    if (v21)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v11 = v31;
      a3 = v36;
    }
  }

  double v39 = v11 * *(double *)&qword_10198D590;
  double v13 = a3[1];
  unsigned __int8 v14 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v14 & 1) == 0)
  {
    double v37 = a3[1];
    int v22 = __cxa_guard_acquire(&qword_10198D598);
    double v13 = v37;
    if (v22)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v13 = v37;
    }
  }

  double v38 = v13 * *(double *)&qword_10198D590;
  return sub_100846B80(&v43, &v42, &v41, &v40, &v39, &v38);
}

uint64_t sub_10084598C(double *a1, double *a2, double *a3, uint64_t a4, BOOL *a5, BOOL *a6, BOOL *a7)
{
  double v12 = *a1;
  double v11 = a1[1];
  double v14 = *a2;
  double v13 = a2[1];
  double v16 = *a3;
  double v15 = a3[1];
  double v17 = vabdd_f64(*a1, *a2);
  double v18 = 180.0;
  if (v17 == 180.0) {
    goto LABEL_2;
  }
  double v19 = v12 - v14;
  if (COERCE__INT64(fabs(v12 - v14)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v47 = fabs(v17 + -180.0);
    double v18 = 180.0;
    if (v17 < 180.0) {
      double v17 = 180.0;
    }
    double v48 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
    if (v47 <= v48) {
      goto LABEL_2;
    }
  }

  double v18 = 180.0;
  if (v19 <= 180.0)
  {
    if (v19 >= -180.0) {
      goto LABEL_3;
    }
    double v18 = fmod(v19 + -180.0, 360.0) + 180.0;
LABEL_2:
    double v19 = v18;
    goto LABEL_3;
  }

  double v19 = fmod(v19 + 180.0, 360.0) + -180.0;
  if (v19 == -180.0) {
    goto LABEL_2;
  }
  BOOL v49 = ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
     && (*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v49 || *(void *)&v19 == 0LL)
  {
    double v18 = 180.0;
    double v51 = fabs(v19 + 180.0);
    double v52 = fabs(v19);
    if (v52 < 180.0) {
      double v52 = 180.0;
    }
    double v53 = v52 >= 1.0 ? v52 * 2.22044605e-16 : 2.22044605e-16;
    if (v51 <= v53) {
      goto LABEL_2;
    }
  }

unint64_t sub_100846540(double *a1, double *a2, double *a3, int a4, int a5, int a6)
{
  double v9 = *a1;
  double v10 = *a2;
  double v11 = *a3;
  double v12 = vabdd_f64(*a1, *a2);
  double v13 = 180.0;
  if (v12 != 180.0)
  {
    double v14 = v9 - v10;
    if (COERCE__INT64(fabs(v9 - v10)) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_51;
    }
    double v37 = fabs(v12 + -180.0);
    double v13 = 180.0;
    if (v12 < 180.0) {
      double v12 = 180.0;
    }
    double v38 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
    if (v37 > v38)
    {
LABEL_51:
      double v13 = 180.0;
      if (v14 <= 180.0)
      {
        if (v14 >= -180.0) {
          goto LABEL_3;
        }
        double v13 = fmod(v14 + -180.0, 360.0) + 180.0;
      }

      else
      {
        double v39 = fmod(v14 + 180.0, 360.0);
        double v14 = v39 + -180.0;
        if (v39 + -180.0 != -180.0)
        {
          unint64_t v40 = COERCE__INT64(fabs(v39 + -180.0)) - 1;
          BOOL v41 = (unint64_t)(COERCE__INT64(fabs(v39 + -180.0)) - 0x10000000000000LL) >> 53 > 0x3FE
             && v40 > 0xFFFFFFFFFFFFELL;
          if (v41 && *(void *)&v14 != 0LL) {
            goto LABEL_3;
          }
          double v13 = 180.0;
          double v43 = fabs(v14 + 180.0);
          double v44 = fabs(v14);
          if (v44 < 180.0) {
            double v44 = 180.0;
          }
          double v45 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
          if (v43 > v45) {
            goto LABEL_3;
          }
        }
      }
    }
  }

  double v14 = v13;
LABEL_3:
  if (a6)
  {
    unint64_t v15 = 0LL;
    BOOL v16 = v14 < 0.0;
    goto LABEL_5;
  }

  double v18 = vabdd_f64(v11, v10);
  double v19 = 180.0;
  if (v18 == 180.0) {
    goto LABEL_9;
  }
  double v20 = v11 - v10;
  if (COERCE__INT64(fabs(v11 - v10)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v51 = fabs(v18 + -180.0);
    double v19 = 180.0;
    if (v18 < 180.0) {
      double v18 = 180.0;
    }
    double v52 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
    if (v51 <= v52) {
      goto LABEL_9;
    }
  }

  double v19 = 180.0;
  if (v20 <= 180.0)
  {
    if (v20 >= -180.0) {
      goto LABEL_10;
    }
    double v19 = fmod(v20 + -180.0, 360.0) + 180.0;
    goto LABEL_9;
  }

  double v53 = fmod(v20 + 180.0, 360.0);
  double v20 = v53 + -180.0;
  if (v53 + -180.0 == -180.0) {
    goto LABEL_9;
  }
  unint64_t v54 = COERCE__INT64(fabs(v53 + -180.0)) - 1;
  BOOL v55 = (unint64_t)(COERCE__INT64(fabs(v53 + -180.0)) - 0x10000000000000LL) >> 53 > 0x3FE
     && v54 > 0xFFFFFFFFFFFFELL;
  if (!v55 || *(void *)&v20 == 0LL)
  {
    double v19 = 180.0;
    double v57 = fabs(v20 + 180.0);
    double v58 = fabs(v20);
    if (v58 < 180.0) {
      double v58 = 180.0;
    }
    double v59 = v58 >= 1.0 ? v58 * 2.22044605e-16 : 2.22044605e-16;
    if (v57 <= v59) {
LABEL_9:
    }
      double v20 = v19;
  }

uint64_t sub_100846B80(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  __double2 v11 = __sincos_stret(*a2);
  __double2 v12 = __sincos_stret(*a1);
  __double2 v13 = __sincos_stret(*a4);
  __double2 v14 = __sincos_stret(*a3);
  __double2 v15 = __sincos_stret(*a6);
  __double2 v16 = __sincos_stret(*a5);
  double v17 = v16.__sinval
      * (v15.__cosval
       * (v11.__sinval * (v13.__cosval * v14.__cosval) - v11.__cosval * v12.__cosval * v13.__sinval))
      + v15.__cosval
      * (v11.__cosval * v12.__sinval * v13.__sinval - v11.__sinval * (v13.__cosval * v14.__sinval))
      * v16.__cosval
      + (v11.__cosval * v12.__cosval * (v13.__cosval * v14.__sinval)
       - v11.__cosval * v12.__sinval * (v13.__cosval * v14.__cosval))
      * v15.__sinval;
  if (v17 == 0.0) {
    return 0LL;
  }
  if (COERCE_UNSIGNED_INT64( fabs( v16.__sinval * (v15.__cosval * (v11.__sinval * (v13.__cosval * v14.__cosval) - v11.__cosval * v12.__cosval * v13.__sinval))
         + v15.__cosval
         * (v11.__cosval * v12.__sinval * v13.__sinval - v11.__sinval * (v13.__cosval * v14.__sinval))
         * v16.__cosval
         + (v11.__cosval * v12.__cosval * (v13.__cosval * v14.__sinval)
          - v11.__cosval * v12.__sinval * (v13.__cosval * v14.__cosval))
         * v15.__sinval)) >= 0x7FF0000000000000LL)
  {
    if (v17 > 0.0) {
      return 1LL;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    double v19 = fabs(v17);
    double v20 = 2.22044605e-16;
    if (v19 >= 1.0) {
      double v20 = v19 * 2.22044605e-16;
    }
    if (v17 > 0.0) {
      uint64_t result = 1LL;
    }
    else {
      uint64_t result = 0xFFFFFFFFLL;
    }
    if (v19 <= v20) {
      return 0LL;
    }
  }

  return result;
}

double sub_100846CD4(double *a1, double **a2, double **a3, double *a4)
{
  double v4 = 0.0;
  if (a2 == a3) {
    return v4;
  }
  double v7 = a2;
  while (1)
  {
    double v9 = *v7;
    double v10 = v7[1];
    char v24 = 0;
    double v25 = 0.0;
    uint64_t v26 = 0LL;
    char v27 = 0;
    if (v9 + 2 == v10) {
      goto LABEL_14;
    }
    do
    {
      __double2 v11 = v9 + 4;
      v9 += 2;
    }

    while (v11 != v10);
    if (v27) {
      goto LABEL_14;
    }
    if (LODWORD(v25) + HIDWORD(v25)) {
      goto LABEL_16;
    }
LABEL_14:
    v7 += 3;
    if (v7 == a3) {
      return v4;
    }
  }

  if (!LODWORD(v25)) {
    goto LABEL_14;
  }
LABEL_16:
  __double2 v13 = *v7;
  __double2 v14 = v7[1];
  if (v14 != *v7)
  {
    double v25 = *a4;
    __double2 v15 = v13 + 2;
    if (v13 + 2 == v14)
    {
      sub_1008449C8((uint64_t)&v25, a1, v13, v13);
      double v18 = v13;
    }

    else
    {
      double v16 = sub_1008449C8((uint64_t)&v25, a1, v13, v13 + 2);
      if (v13 + 4 == v14)
      {
LABEL_24:
        double v18 = v13 + 2;
      }

      else
      {
        double v17 = v16;
        while (1)
        {
          double v18 = v15 + 2;
          double v19 = sub_1008449C8((uint64_t)&v25, a1, v15, v15 + 2);
          if (v19 == 0.0) {
            break;
          }
          if (v19 < v17)
          {
            double v17 = v19;
            __double2 v13 = v15;
          }

          double v20 = v15 + 4;
          v15 += 2;
          if (v20 == v14) {
            goto LABEL_24;
          }
        }

        __double2 v13 = v15;
      }
    }

    double v25 = *a4;
    double v21 = v25;
    double v22 = sub_1008449C8((uint64_t)&v25, a1, v13, v18);
    double v23 = asin(sqrt(v22));
    return v21 * (v23 + v23);
  }

  return v4;
}

uint64_t sub_100846E9C(uint64_t a1, uint64_t a2)
{
  double v7 = (std::string *)&v8;
  uint64_t v4 = sub_100846FA0(a1, &v7, (uint64_t)&v6);
  std::stringbuf::str(&v6, &v9);
  *(std::stringbuf::string_type *)a2 = v6;
  std::streambuf::~streambuf(&v9);
  std::ios::~ios(&v10);
  return v4;
}

void sub_100846F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_100846FA0(uint64_t a1, std::string **a2, uint64_t a3)
{
  if (sub_100847518((double **)a1, a2, a3))
  {
    std::stringbuf::string_type v6 = *(double ***)(a1 + 24);
    double v7 = *(double ***)(a1 + 32);
    while (v6 != v7)
    {
      if ((sub_1008496B0(v6, a2, a3) & 1) == 0) {
        return 0LL;
      }
      v6 += 3;
    }

    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v17 = 0u;
    BOOL v9 = sub_100847190(a1, &v17, a2, a3);
    if ((void)v18 == *((void *)&v17 + 1))
    {
      if (!v9) {
        goto LABEL_15;
      }
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      uint64_t v10 = (void *)(*((void *)&v17 + 1) + 8 * ((*((void *)&v19 + 1) + (void)v19) / 0x14uLL));
    }

    else
    {
      if (!v9) {
        goto LABEL_15;
      }
      uint64_t v10 = (void *)(*((void *)&v17 + 1) + 8 * ((*((void *)&v19 + 1) + (void)v19) / 0x14uLL));
      uint64_t v12 = *v10 + 200 * ((*((void *)&v19 + 1) + (void)v19) % 0x14uLL);
    }

    if (sub_100855374( *(void *)(a1 + 24),  *(void *)(a1 + 32),  (double **)a1,  (void *)(*((void *)&v17 + 1) + 8 * ((unint64_t)v19 / 0x14)),  v11,  (uint64_t)v10,  v12,  a2,  a3))
    {
      if ((void)v18 == *((void *)&v17 + 1))
      {
        uint64_t v13 = 0LL;
        uint64_t v15 = 0LL;
        __double2 v14 = (void *)(*((void *)&v17 + 1) + 8 * ((*((void *)&v19 + 1) + (void)v19) / 0x14uLL));
      }

      else
      {
        __double2 v14 = (void *)(*((void *)&v17 + 1) + 8 * ((*((void *)&v19 + 1) + (void)v19) / 0x14uLL));
        uint64_t v15 = *v14 + 200 * ((*((void *)&v19 + 1) + (void)v19) % 0x14uLL);
      }

      uint64_t v8 = sub_1008472EC( a1,  (void *)(*((void *)&v17 + 1) + 8 * ((unint64_t)v19 / 0x14)),  v13,  (uint64_t)v14,  v15,  a2);
      goto LABEL_18;
    }

void sub_10084717C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_100847190(uint64_t a1, void *a2, std::string **a3, uint64_t a4)
{
  unsigned __int8 v12 = 0;
  __int128 __p = 0LL;
  double v20 = 0LL;
  uint64_t v21 = 0LL;
  sub_100849970(a1, (uint64_t)&v13, (float64x2_t **)&__p, a4, 0, 0xAuLL);
  v16[0] = a1;
  v16[1] = a4;
  v16[2] = &v13;
  v16[3] = a2;
  v16[4] = &v12;
  int v17 = 0;
  char v18 = 1;
  uint64_t v14 = a4;
  uint64_t v15 = a4;
  sub_10084C4D8((uint64_t *)&__p, (uint64_t)v16, (uint64_t)&v15, (uint64_t)&v14, 0x10uLL);
  if (__p)
  {
    double v20 = __p;
    operator delete(__p);
  }

  int v8 = v12;
  if (v12)
  {
    uint64_t v9 = a2[1];
    if (a2[2] == v9
      || *(void *)(v9 + 8 * (a2[4] / 0x14uLL)) + 200 * (a2[4] % 0x14uLL) == *(void *)(v9
                                                                                        + 8
                                                                                        * ((a2[5] + a2[4])
                                                                                         / 0x14uLL))
                                                                            + 200 * ((a2[5] + a2[4]) % 0x14uLL))
    {
      sub_10124CACC();
    }

    sub_100847D10(a3, 21);
    sub_100854E4C(*a3, a2, v10);
  }

  else
  {
    sub_100847D10(a3, 0);
  }

  return v8 == 0;
}

void sub_1008472CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008472EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, std::string **a6)
{
  if (a3 != a5)
  {
    while (1)
    {
      __int128 v24 = (unint64_t)(*(void *)(a3 + 64) + 1LL);
      uint64_t v10 = sub_10086450C(&v21, &v24, &v24);
      __int128 v24 = (unint64_t)(*(void *)(a3 + 144) + 1LL);
      uint64_t v11 = sub_10086450C(&v21, &v24, &v24);
      unsigned __int8 v12 = sub_100864094((uint64_t)v20, a3);
      uint64_t v13 = (uint64_t)v12;
      *(void *)&__int128 v24 = v10;
      uint64_t v25 = (uint64_t)v12;
      if (v22 == (void **)v10) {
        break;
      }
      if (v22 == (void **)v12)
      {
        int v18 = 203;
        __int128 v19 = "v2 != m_vertices.end()";
LABEL_14:
        __assert_rtn("add_edge", "complement_graph.hpp", v18, v19);
      }

      sub_100864AF4((uint64_t **)(v23 + 24 * v10[4]), (uint64_t)&v25, &v25);
      sub_100864AF4((uint64_t **)(v23 + 24LL * *(void *)(v25 + 32)), (uint64_t)&v24, (uint64_t *)&v24);
      *(void *)&__int128 v24 = v11;
      uint64_t v25 = v13;
      if (v22 == (void **)v11) {
        break;
      }
      sub_100864AF4((uint64_t **)(v23 + 24 * v11[4]), (uint64_t)&v25, &v25);
      sub_100864AF4((uint64_t **)(v23 + 24LL * *(void *)(v25 + 32)), (uint64_t)&v24, (uint64_t *)&v24);
      a3 += 200LL;
      if (a3 - *a2 == 4000)
      {
        uint64_t v14 = a2[1];
        ++a2;
        a3 = v14;
      }

      if (a3 == a5) {
        goto LABEL_8;
      }
    }

    int v18 = 202;
    __int128 v19 = "v1 != m_vertices.end()";
    goto LABEL_14;
  }

void sub_1008474F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100847518(double **a1, std::string **a2, uint64_t a3)
{
  std::stringbuf::string_type v6 = *a1;
  double v7 = a1[1];
  if (*a1 == v7)
  {
    sub_100847D10(a2, 0);
  }

  else
  {
    do
    {
      BOOL v8 = (*(void *)v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((void)v6[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      int v9 = !v8;
      if (!v8) {
        break;
      }
      v6 += 2;
    }

    while (v6 != v7);
    if (v9) {
      int v10 = 60;
    }
    else {
      int v10 = 0;
    }
    sub_100847D10(a2, v10);
    uint64_t result = 0LL;
    if ((v9 & 1) != 0) {
      return result;
    }
  }

  unsigned __int8 v12 = a1[1];
  if ((unint64_t)((char *)v12 - (char *)*a1) <= 0x3F)
  {
    uint64_t v13 = a2;
    int v14 = 10;
LABEL_21:
    sub_100847D10(v13, v14);
    return 0LL;
  }

  v19[0] = *a1;
  v19[1] = v12;
  if (sub_100847688(v19) <= 3)
  {
    uint64_t v13 = a2;
    int v14 = 11;
    goto LABEL_21;
  }

  uint64_t result = sub_100847814(a1, a2, a3);
  if ((_DWORD)result)
  {
    int v15 = *a1;
    int v16 = a1[1];
    if ((unint64_t)((char *)v16 - (char *)*a1) >= 0x20)
    {
      int v17 = v15 + 2;
      while (v17 != v16 && (sub_100847EC0(v15, v15 + 2) & 1) == 0)
      {
        int v17 = v15 + 4;
        v15 += 2;
      }
    }

    sub_100847D10(a2, 0);
    char v18 = sub_100847974(a1, a2, a3);
    uint64_t result = 0LL;
    if ((v18 & 1) == 0) {
      return sub_100847BC0(a1, a2);
    }
  }

  return result;
}

unint64_t sub_100847688(double **a1)
{
  double v2 = *a1;
  int v1 = a1[1];
  unint64_t v3 = (char *)v1 - (char *)*a1;
  if (v3 < 0x20) {
    return v3 >> 4;
  }
  unint64_t v6 = 0LL;
  do
  {
    unint64_t v4 = v6 + 1;
    if (v2 == v1) {
      break;
    }
    double v7 = v2;
    while (1)
    {
      double v23 = *v7;
      double v22 = v7[1];
      sub_100843CD4(&v23, &v22, 1);
      double v8 = v22;
      double v9 = v23;
      double v10 = *v2;
      double v22 = v2[1];
      double v23 = v10;
      sub_100843CD4(&v23, &v22, 1);
      if (v9 != v23)
      {
        if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }

        double v12 = vabdd_f64(v9, v23);
        double v13 = fabs(v9);
        double v14 = fabs(v23);
        if (v13 >= v14) {
          double v14 = v13;
        }
        double v15 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
        if (v12 > v15) {
          break;
        }
      }

      if (v8 != v22)
      {
        if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }

        double v17 = vabdd_f64(v8, v22);
        double v18 = fabs(v8);
        double v19 = fabs(v22);
        if (v18 >= v19) {
          double v19 = v18;
        }
        double v20 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
        if (v17 > v20) {
          break;
        }
      }

      v7 += 2;
      if (v7 == v1) {
        return v4;
      }
    }

    if (v7 == v1) {
      break;
    }
    double v2 = v7;
  }

  while (v6++ < 4);
  return v4;
}

uint64_t sub_100847814(double **a1, std::string **a2, uint64_t a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 == v4) {
    sub_10124CAF4((uint64_t)a1, (uint64_t)a2, a3);
  }
  double v6 = *v3;
  double v20 = v3[1];
  double v21 = v6;
  sub_100843CD4(&v21, &v20, 1);
  double v7 = v20;
  double v8 = v21;
  double v21 = *(v4 - 2);
  double v20 = *(v4 - 1);
  sub_100843CD4(&v21, &v20, 1);
  if (v8 != v21)
  {
    if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_22;
    }

    double v11 = vabdd_f64(v8, v21);
    double v12 = fabs(v8);
    double v13 = fabs(v21);
    if (v12 >= v13) {
      double v13 = v12;
    }
    double v14 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
    if (v11 > v14) {
      goto LABEL_22;
    }
  }

  if (v7 == v20) {
    goto LABEL_4;
  }
  if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_22;
  }

  double v15 = vabdd_f64(v7, v20);
  double v16 = fabs(v7);
  double v17 = fabs(v20);
  if (v16 >= v17) {
    double v17 = v16;
  }
  double v18 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
  if (v15 <= v18)
  {
LABEL_4:
    int v9 = 0;
    uint64_t v10 = 1LL;
  }

  else
  {
LABEL_22:
    uint64_t v10 = 0LL;
    int v9 = 20;
  }

  sub_100847D10(a2, v9);
  return v10;
}

uint64_t sub_100847974(double **a1, std::string **a2, uint64_t a3)
{
  double v6 = *a1;
  double v5 = a1[1];
  char v27 = v6;
  double v28 = v5;
  double v7 = sub_100848130(v6, v5);
  if (v5 != v7)
  {
    double v8 = v7;
    int v9 = sub_100848130(v7, v5);
    if (v5 != v9)
    {
      do
      {
        uint64_t v10 = v9;
        if (!sub_100845638(v9, v8, v6))
        {
          __int128 v11 = *(_OWORD *)v10;
          __int128 v12 = *(_OWORD *)v6;
          __int128 v30 = *(_OWORD *)v8;
          __int128 v31 = v11;
          __int128 v29 = v12;
          if ((int)sub_100848370((double *)&v31, (double *)&v30, (double *)&v29) <= 0)
          {
            sub_100847D10(a2, 12);
            sub_100848C6C(*a2, 0, (uint64_t)v8);
            return 1LL;
          }
        }

        int v9 = sub_100848130(v10, v28);
        double v6 = v8;
        double v8 = v10;
      }

      while (v5 != v9);
      if (v27 == v28) {
        sub_10124CAF4((uint64_t)v9, v13, v14);
      }
      uint64_t v15 = *((void *)v27 + 1);
      *(double *)&__int128 v31 = *v27;
      *(void *)&__int128 v30 = v15;
      sub_100843CD4((double *)&v31, (double *)&v30, 1);
      double v16 = *(double *)&v31;
      double v17 = *(double *)&v30;
      *(double *)&__int128 v31 = *(v28 - 2);
      *(double *)&__int128 v30 = *(v28 - 1);
      sub_100843CD4((double *)&v31, (double *)&v30, 1);
      if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((unint64_t)v31 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v19 = vabdd_f64(v16, *(double *)&v31);
        double v20 = fabs(v16);
        double v21 = fabs(*(double *)&v31);
        if (v20 >= v21) {
          double v21 = v20;
        }
        double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 <= v22)
        {
LABEL_27:
          if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && ((unint64_t)v30 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            double v23 = vabdd_f64(v17, *(double *)&v30);
            double v24 = fabs(v17);
            double v25 = fabs(*(double *)&v30);
            if (v24 >= v25) {
              double v25 = v24;
            }
            double v26 = v25 >= 1.0 ? v25 * 2.22044605e-16 : 2.22044605e-16;
            if (v23 <= v26) {
              return sub_100848290((uint64_t *)&v27, a2, a3, 0);
            }
          }
        }
      }
    }
  }

  sub_100847D10(a2, 0);
  return 0LL;
}

uint64_t sub_100847BC0(void *a1, std::string **a2)
{
  unint64_t v3 = (double *)a1[1];
  unint64_t v4 = (double *)(*a1 + 16LL);
  unint64_t v6 = 0LL;
  double v7 = 0.0;
  do
  {
    double v8 = *(v4 - 2);
    double v9 = *v4;
    if (v8 != *v4)
    {
      if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_11;
      }

      double v11 = vabdd_f64(v8, v9);
      double v12 = fabs(v8);
      double v13 = fabs(v9);
      if (v12 < v13) {
        double v12 = v13;
      }
      double v14 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
      if (v11 > v14)
      {
LABEL_11:
        double v7 = v7 + sub_100843F40(v4 - 2, v4);
        v6 += sub_100844190(v4 - 2, v4);
      }
    }

    v4 += 2;
  }

  while (v4 != v3);
  if ((v6 & 1) != 0)
  {
    double v15 = (double)((v6 >> 1) + 1);
    double v16 = fabs(v7);
    double v17 = -v16;
    double v18 = -(v16 - v15 * 6.28318531);
    double v19 = -(v17 + v15 * 6.28318531);
    if (v7 <= 0.0) {
      double v7 = v18;
    }
    else {
      double v7 = v19;
    }
  }

  if (v7 <= 0.0)
  {
LABEL_27:
    uint64_t v21 = 0LL;
    int v20 = 22;
  }

  else
  {
    int v20 = 0;
    uint64_t v21 = 1LL;
  }

  sub_100847D10(a2, v20);
  return v21;
}

void *sub_100847D10(std::string **a1, int a2)
{
  unint64_t v4 = *a1;
  sub_1010DDBC0(&__str, "");
  std::string::operator=(v4 + 3, &__str);
  sub_10023BE94((uint64_t)&v4->__r_.__value_.__l.__size_);
  std::ios_base::clear((std::ios_base *)((char *)*a1 + *(void *)((*a1)->__r_.__value_.__r.__words[0] - 24)), 0);
  double v5 = *a1;
  if (a2 > 39)
  {
    switch(a2)
    {
      case '(':
        unint64_t v6 = "Multi-polygon has intersecting interiors";
        break;
      case '2':
        unint64_t v6 = "Box has corners in wrong order";
        break;
      case '<':
        unint64_t v6 = "Geometry has point(s) with invalid coordinate(s)";
        break;
      default:
LABEL_12:
        unint64_t v6 = "";
        break;
    }
  }

  else
  {
    switch(a2)
    {
      case 10:
        unint64_t v6 = "Geometry has too few points";
        break;
      case 11:
        unint64_t v6 = "Geometry has wrong topological dimension";
        break;
      case 12:
        unint64_t v6 = "Geometry has spikes";
        break;
      case 13:
        unint64_t v6 = "Geometry has duplicate (consecutive) points";
        break;
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
        goto LABEL_12;
      case 20:
        unint64_t v6 = "Geometry is defined as closed but is open";
        break;
      case 21:
        unint64_t v6 = "Geometry has invalid self-intersections";
        break;
      case 22:
        unint64_t v6 = "Geometry has wrong orientation";
        break;
      case 30:
        unint64_t v6 = "Geometry has interior rings defined outside the outer boundary";
        break;
      case 31:
        unint64_t v6 = "Geometry has nested interior rings";
        break;
      case 32:
        unint64_t v6 = "Geometry has disconnected interior";
        break;
      default:
        if (a2) {
          goto LABEL_12;
        }
        unint64_t v6 = "Geometry is valid";
        break;
    }
  }

  size_t v7 = strlen(v6);
  return sub_10000CF44(v5, (uint64_t)v6, v7);
}

void sub_100847EA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100847EC0(double *a1, double *a2)
{
  double v3 = *a1;
  double v2 = a1[1];
  double v5 = *a2;
  double v4 = a2[1];
  if (*a1 == *a2) {
    goto LABEL_2;
  }
  double v7 = fabs(v5);
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    BOOL v12 = fabs(v3) == 180.0;
  }

  else
  {
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v8 = vabdd_f64(v3, v5);
      double v9 = fabs(v3);
      if (v9 < v7) {
        double v9 = v7;
      }
      double v10 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
      if (v8 <= v10) {
        goto LABEL_2;
      }
    }

    double v11 = fabs(v3);
    BOOL v12 = v11 == 180.0;
    if (v11 != 180.0)
    {
      double v13 = fabs(v11 + -180.0);
      if (v11 < 180.0) {
        double v11 = 180.0;
      }
      if (v11 >= 1.0) {
        double v14 = v11 * 2.22044605e-16;
      }
      else {
        double v14 = 2.22044605e-16;
      }
      BOOL v12 = v13 <= v14;
    }
  }

  if (v7 == 180.0)
  {
    BOOL v16 = 1;
  }

  else
  {
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_35;
    }
    double v17 = fabs(v7 + -180.0);
    if (v7 < 180.0) {
      double v7 = 180.0;
    }
    if (v7 >= 1.0) {
      double v18 = v7 * 2.22044605e-16;
    }
    else {
      double v18 = 2.22044605e-16;
    }
    BOOL v16 = v17 <= v18;
  }

  if (v12 && v16)
  {
LABEL_2:
    if (v2 == v4) {
      return 1LL;
    }
    if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v22 = vabdd_f64(v2, v4);
      double v23 = fabs(v2);
      double v24 = fabs(v4);
      if (v23 < v24) {
        double v23 = v24;
      }
      double v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
      if (v22 <= v25) {
        return 1LL;
      }
    }

    return 0LL;
  }

double *sub_100848130(double *a1, double *a2)
{
  double v2 = a2;
  if (a1 != a2)
  {
    double v4 = a1 + 2;
    if (a1 + 2 == a2) {
      return v2;
    }
    while (1)
    {
      double v20 = *v4;
      double v19 = v4[1];
      sub_100843CD4(&v20, &v19, 1);
      double v5 = v19;
      double v6 = v20;
      double v7 = *a1;
      double v19 = a1[1];
      double v20 = v7;
      sub_100843CD4(&v20, &v19, 1);
      if (v6 != v20)
      {
        if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }

        double v9 = vabdd_f64(v6, v20);
        double v10 = fabs(v6);
        double v11 = fabs(v20);
        if (v10 >= v11) {
          double v11 = v10;
        }
        double v12 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
        if (v9 > v12) {
          break;
        }
      }

      if (v5 != v19)
      {
        if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }

        double v14 = vabdd_f64(v5, v19);
        double v15 = fabs(v5);
        double v16 = fabs(v19);
        if (v15 >= v16) {
          double v16 = v15;
        }
        double v17 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
        if (v14 > v17) {
          break;
        }
      }

      v4 += 2;
      if (v4 == v2) {
        return v2;
      }
    }

    return v4;
  }

  return v2;
}

uint64_t sub_100848290(uint64_t *a1, std::string **a2, uint64_t a3, int a4)
{
  double v7 = (double *)*a1;
  uint64_t v8 = sub_100849544(a1[1], *a1);
  double v9 = sub_100848130(v7, (double *)a1[1]);
  if (sub_100845638(v9, v7, (double *)(v8 - 16))
    || (__int128 v10 = *(_OWORD *)v9,
        __int128 v11 = *(_OWORD *)(v8 - 16),
        __int128 v15 = *(_OWORD *)v7,
        __int128 v16 = v10,
        __int128 v14 = v11,
        (int)sub_100848370((double *)&v16, (double *)&v15, (double *)&v14) > 0))
  {
    sub_100847D10(a2, 0);
    return 0LL;
  }

  else
  {
    if (a4) {
      int v13 = 0;
    }
    else {
      int v13 = 12;
    }
    sub_100847D10(a2, v13);
    sub_100848C6C(*a2, a4, (uint64_t)v7);
    return a4 ^ 1u;
  }

uint64_t sub_100848370(double *a1, double *a2, double *a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_10198D5A8);
  if ((v3 & 1) == 0)
  {
    double v89 = a1;
    double v90 = a3;
    unint64_t v91 = a2;
    int v92 = __cxa_guard_acquire(&qword_10198D5A8);
    a2 = v91;
    a3 = v90;
    int v93 = v92;
    a1 = v89;
    if (v93)
    {
      qword_10198D5A0 = 0x4056800000000000LL;
      __cxa_guard_release(&qword_10198D5A8);
      a1 = v89;
      a2 = v91;
      a3 = v90;
    }
  }

  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_10198D5B8);
  if ((v4 & 1) == 0)
  {
    uint64_t v94 = a1;
    double v95 = a3;
    double v96 = a2;
    int v97 = __cxa_guard_acquire(&qword_10198D5B8);
    a2 = v96;
    a3 = v95;
    int v98 = v97;
    a1 = v94;
    if (v98)
    {
      qword_10198D5B0 = 0x4056800000000000LL;
      __cxa_guard_release(&qword_10198D5B8);
      a1 = v94;
      a2 = v96;
      a3 = v95;
    }
  }

  double v5 = *a1;
  double v6 = a1[1];
  double v8 = *a2;
  double v7 = a2[1];
  double v10 = *a3;
  double v9 = a3[1];
  if (*a2 == *a1) {
    goto LABEL_15;
  }
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v31 = vabdd_f64(v8, v5);
    double v32 = fabs(v8);
    double v33 = fabs(v5);
    if (v32 < v33) {
      double v32 = v33;
    }
    double v34 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
    if (v31 <= v34)
    {
LABEL_15:
      if (v7 == v6) {
        return 0LL;
      }
      if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v12 = vabdd_f64(v7, v6);
        double v13 = fabs(v7);
        double v14 = fabs(v6);
        if (v13 < v14) {
          double v13 = v14;
        }
        double v15 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
        if (v12 <= v15) {
          return 0LL;
        }
      }
    }
  }

  if (v8 == v10) {
    goto LABEL_40;
  }
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v18 = vabdd_f64(v8, v10);
    double v19 = fabs(v8);
    double v20 = fabs(v10);
    if (v19 < v20) {
      double v19 = v20;
    }
    double v21 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
    if (v18 <= v21)
    {
LABEL_40:
      if (v7 == v9) {
        return 0LL;
      }
      if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v22 = vabdd_f64(v7, v9);
        double v23 = fabs(v7);
        double v24 = fabs(v9);
        if (v23 < v24) {
          double v23 = v24;
        }
        double v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
        if (v22 <= v25) {
          return 0LL;
        }
      }
    }
  }

  double v26 = fabs(v6);
  if (*(double *)&qword_10198D5A0 == v26)
  {
    BOOL v27 = 1;
  }

  else if ((qword_10198D5A0 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
         || (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  }
  {
    BOOL v27 = 0;
  }

  else
  {
    double v28 = vabdd_f64(*(double *)&qword_10198D5A0, v26);
    double v29 = fabs(*(double *)&qword_10198D5A0);
    if (v29 >= v26) {
      double v26 = v29;
    }
    if (v26 >= 1.0) {
      double v30 = v26 * 2.22044605e-16;
    }
    else {
      double v30 = 2.22044605e-16;
    }
    BOOL v27 = v28 <= v30;
  }

  double v35 = fabs(v7);
  if (*(double *)&qword_10198D5A0 == v35)
  {
    BOOL v36 = 1;
  }

  else if ((qword_10198D5A0 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
         || (*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  }
  {
    BOOL v36 = 0;
  }

  else
  {
    double v37 = vabdd_f64(*(double *)&qword_10198D5A0, v35);
    double v38 = fabs(*(double *)&qword_10198D5A0);
    if (v38 < v35) {
      double v38 = v35;
    }
    if (v38 >= 1.0) {
      double v39 = v38 * 2.22044605e-16;
    }
    else {
      double v39 = 2.22044605e-16;
    }
    BOOL v36 = v37 <= v39;
  }

  double v40 = fabs(v9);
  if (*(double *)&qword_10198D5B0 != v40)
  {
    if ((qword_10198D5B0 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      BOOL v41 = 0;
      if (!v36) {
        goto LABEL_95;
      }
    }

    else
    {
      double v42 = vabdd_f64(*(double *)&qword_10198D5B0, v40);
      double v43 = fabs(*(double *)&qword_10198D5B0);
      if (v43 >= v40) {
        double v40 = v43;
      }
      if (v40 >= 1.0) {
        double v44 = v40 * 2.22044605e-16;
      }
      else {
        double v44 = 2.22044605e-16;
      }
      BOOL v41 = v42 <= v44;
      if (!v36) {
        goto LABEL_95;
      }
    }

    goto LABEL_83;
  }

  BOOL v41 = 1;
  if (v36)
  {
LABEL_83:
    if (!v27) {
      goto LABEL_94;
    }
    char v45 = (v6 >= 0.0) ^ (v7 < 0.0);
    if (v6 > 0.0) {
      char v45 = 0;
    }
    if (v7 > 0.0) {
      char v45 = v6 > 0.0;
    }
    if ((v45 & 1) == 0)
    {
LABEL_94:
      if (!v41) {
        goto LABEL_95;
      }
      char v46 = (v7 < 0.0) ^ (v9 >= 0.0);
      if (v9 > 0.0) {
        char v46 = 0;
      }
      if (v7 > 0.0) {
        char v46 = v9 > 0.0;
      }
      if ((v46 & 1) == 0) {
        goto LABEL_95;
      }
    }

    return 0LL;
  }

void sub_100848C6C(void *a1, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0)
  {
    unsigned __int8 v4 = sub_10000CF44(a1, (uint64_t)". A spike point was found with apex at ", 39LL);
    sub_1010DDBC0(v22, ", ");
    sub_1010DDBC0(v20, "(");
    sub_1010DDBC0(v18, ")");
    sub_1010DDBC0(v16, ", ");
    sub_1010DDBC0(v14, "(");
    sub_1010DDBC0(v12, ")");
    sub_1010DDBC0(v10, ", ");
    sub_100848F54( a3,  (__int128 *)v22,  (__int128 *)v20,  (__int128 *)v18,  (__int128 *)v16,  (__int128 *)v14,  (__int128 *)v12,  (__int128 *)v10,  (uint64_t)&v24);
    double v5 = v24;
    if ((v28 & 0x80u) == 0) {
      double v6 = v27;
    }
    else {
      double v6 = (void **)v27[0];
    }
    if ((v28 & 0x80u) == 0) {
      uint64_t v7 = v28;
    }
    else {
      uint64_t v7 = (uint64_t)v27[1];
    }
    sub_10000CF44(v4, (uint64_t)v6, v7);
    sub_100849018(v4, v5, (uint64_t)&v25);
    if ((v30 & 0x80u) == 0) {
      double v8 = v29;
    }
    else {
      double v8 = (void **)v29[0];
    }
    if ((v30 & 0x80u) == 0) {
      uint64_t v9 = v30;
    }
    else {
      uint64_t v9 = (uint64_t)v29[1];
    }
    sub_10000CF44(v4, (uint64_t)v8, v9);
    std::ostream::flush(v4);
    if (v38 < 0) {
      operator delete(__p);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v26 < 0) {
      operator delete(v25);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
  }

void sub_100848E98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(exception_object);
}

void sub_100848F54( uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, __int128 *a6@<X5>, __int128 *a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>)
{
  *(void *)a9 = a1;
  sub_100849330((char *)(a9 + 8), (__int128 *)__dst);
  if (v24 < 0) {
    operator delete(__p);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_100849004(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100849018(void *a1, double *a2, uint64_t a3)
{
  if (v11 >= 0) {
    double v6 = __p;
  }
  else {
    double v6 = (void **)__p[0];
  }
  if (v11 >= 0) {
    uint64_t v7 = HIBYTE(v11);
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_10000CF44(a1, (uint64_t)v6, v7);
  std::ostream::operator<<(*a2);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a3 + 16);
  }

  if (v11 >= 0) {
    double v8 = __p;
  }
  else {
    double v8 = (void **)__p[0];
  }
  if (v11 >= 0) {
    uint64_t v9 = HIBYTE(v11);
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  sub_10000CF44(a1, (uint64_t)v8, v9);
  std::ostream::operator<<(a2[1]);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1008490FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10084911C( char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 *a7, __int128 *a8)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v15 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v15;
  }

  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v16 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v16;
  }

  if (*((char *)a4 + 23) < 0)
  {
    sub_1010DD48C(__dst + 48, *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v17 = *a4;
    *((void *)__dst + 8) = *((void *)a4 + 2);
    *((_OWORD *)__dst + 3) = v17;
  }

  if (*((char *)a5 + 23) < 0)
  {
    sub_1010DD48C(__dst + 72, *(void **)a5, *((void *)a5 + 1));
  }

  else
  {
    __int128 v18 = *a5;
    *((void *)__dst + 11) = *((void *)a5 + 2);
    *(_OWORD *)(__dst + 72) = v18;
  }

  if (*((char *)a6 + 23) < 0)
  {
    sub_1010DD48C(__dst + 96, *(void **)a6, *((void *)a6 + 1));
  }

  else
  {
    __int128 v19 = *a6;
    *((void *)__dst + 14) = *((void *)a6 + 2);
    *((_OWORD *)__dst + 6) = v19;
  }

  if (*((char *)a7 + 23) < 0)
  {
    sub_1010DD48C(__dst + 120, *(void **)a7, *((void *)a7 + 1));
  }

  else
  {
    __int128 v20 = *a7;
    *((void *)__dst + 17) = *((void *)a7 + 2);
    *(_OWORD *)(__dst + 120) = v20;
  }

  char v21 = __dst + 144;
  if (*((char *)a8 + 23) < 0)
  {
    sub_1010DD48C(v21, *(void **)a8, *((void *)a8 + 1));
  }

  else
  {
    __int128 v22 = *a8;
    *((void *)__dst + 20) = *((void *)a8 + 2);
    *(_OWORD *)char v21 = v22;
  }

  return __dst;
}

void sub_10084929C(_Unwind_Exception *exception_object)
{
}

char *sub_100849330(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1010DD48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }

  if (*((char *)a2 + 47) < 0)
  {
    sub_1010DD48C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }

  if (*((char *)a2 + 71) < 0)
  {
    sub_1010DD48C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }

  if (*((char *)a2 + 95) < 0)
  {
    sub_1010DD48C(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }

  else
  {
    __int128 v7 = *(__int128 *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }

  if (*((char *)a2 + 119) < 0)
  {
    sub_1010DD48C(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }

  else
  {
    __int128 v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }

  if (*((char *)a2 + 143) < 0)
  {
    sub_1010DD48C(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }

  else
  {
    __int128 v9 = *(__int128 *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }

  double v10 = __dst + 144;
  if (*((char *)a2 + 167) < 0)
  {
    sub_1010DD48C(v10, *((void **)a2 + 18), *((void *)a2 + 19));
  }

  else
  {
    __int128 v11 = a2[9];
    *((void *)__dst + 20) = *((void *)a2 + 20);
    *(_OWORD *)double v10 = v11;
  }

  return __dst;
}

void sub_1008494B0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100849544(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 - 16;
    if (a1 - 16 == a2) {
      return v2;
    }
    uint64_t v5 = a1 - 16;
    while (1)
    {
      double v6 = *(double *)(v5 - 16);
      v5 -= 16LL;
      double v21 = v6;
      double v20 = *(double *)(v5 + 8);
      sub_100843CD4(&v21, &v20, 1);
      double v7 = v20;
      double v8 = v21;
      double v21 = *(double *)(a1 - 16);
      double v20 = *(double *)(a1 - 8);
      sub_100843CD4(&v21, &v20, 1);
      if (v8 != v21)
      {
        if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }

        double v10 = vabdd_f64(v8, v21);
        double v11 = fabs(v8);
        double v12 = fabs(v21);
        if (v11 >= v12) {
          double v12 = v11;
        }
        double v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
        if (v10 > v13) {
          break;
        }
      }

      if (v7 != v20)
      {
        if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          break;
        }

        double v15 = vabdd_f64(v7, v20);
        double v16 = fabs(v7);
        double v17 = fabs(v20);
        if (v16 >= v17) {
          double v17 = v16;
        }
        double v18 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
        if (v15 > v18) {
          break;
        }
      }

      uint64_t v4 = v5;
      if (v5 == v2) {
        return v2;
      }
    }

    return v4;
  }

  return v2;
}

uint64_t sub_1008496B0(double **a1, std::string **a2, uint64_t a3)
{
  double v6 = *a1;
  double v7 = a1[1];
  if (*a1 == v7)
  {
    sub_100847D10(a2, 0);
  }

  else
  {
    do
    {
      BOOL v8 = (*(void *)v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((void)v6[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
      int v9 = !v8;
      if (!v8) {
        break;
      }
      v6 += 2;
    }

    while (v6 != v7);
    if (v9) {
      int v10 = 60;
    }
    else {
      int v10 = 0;
    }
    sub_100847D10(a2, v10);
    uint64_t result = 0LL;
    if ((v9 & 1) != 0) {
      return result;
    }
  }

  double v12 = a1[1];
  if ((unint64_t)((char *)v12 - (char *)*a1) <= 0x3F)
  {
    double v13 = a2;
    int v14 = 10;
LABEL_21:
    sub_100847D10(v13, v14);
    return 0LL;
  }

  v19[0] = *a1;
  v19[1] = v12;
  if (sub_100847688(v19) <= 3)
  {
    double v13 = a2;
    int v14 = 11;
    goto LABEL_21;
  }

  uint64_t result = sub_100847814(a1, a2, a3);
  if ((_DWORD)result)
  {
    double v15 = *a1;
    double v16 = a1[1];
    if ((unint64_t)((char *)v16 - (char *)*a1) >= 0x20)
    {
      double v17 = v15 + 2;
      while (v17 != v16 && (sub_100847EC0(v15, v15 + 2) & 1) == 0)
      {
        double v17 = v15 + 4;
        v15 += 2;
      }
    }

    sub_100847D10(a2, 0);
    char v18 = sub_100847974(a1, a2, a3);
    uint64_t result = 0LL;
    if ((v18 & 1) == 0) {
      return sub_100849820(a1, a2);
    }
  }

  return result;
}

uint64_t sub_100849820(void *a1, std::string **a2)
{
  unsigned __int8 v3 = (double *)a1[1];
  uint64_t v4 = (double *)(*a1 + 16LL);
  unint64_t v6 = 0LL;
  double v7 = 0.0;
  do
  {
    double v8 = *(v4 - 2);
    double v9 = *v4;
    if (v8 != *v4)
    {
      if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_11;
      }

      double v11 = vabdd_f64(v8, v9);
      double v12 = fabs(v8);
      double v13 = fabs(v9);
      if (v12 < v13) {
        double v12 = v13;
      }
      double v14 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
      if (v11 > v14)
      {
LABEL_11:
        double v7 = v7 + sub_100843F40(v4 - 2, v4);
        v6 += sub_100844190(v4 - 2, v4);
      }
    }

    v4 += 2;
  }

  while (v4 != v3);
  if ((v6 & 1) != 0)
  {
    double v15 = (double)((v6 >> 1) + 1);
    double v16 = fabs(v7);
    double v17 = -v16;
    double v18 = -(v16 - v15 * 6.28318531);
    double v19 = -(v17 + v15 * 6.28318531);
    if (v7 <= 0.0) {
      double v7 = v18;
    }
    else {
      double v7 = v19;
    }
  }

  if (v7 >= 0.0)
  {
LABEL_27:
    uint64_t v21 = 0LL;
    int v20 = 22;
  }

  else
  {
    int v20 = 0;
    uint64_t v21 = 1LL;
  }

  sub_100847D10(a2, v20);
  return v21;
}

void sub_100849970(uint64_t a1, uint64_t a2, float64x2_t **a3, uint64_t a4, int a5, unint64_t a6)
{
  a3[1] = *a3;
  uint64_t v11 = a5;
  double v12 = *(double **)a1;
  double v13 = *(double **)(a1 + 8);
  if ((unint64_t)v13 - *(void *)a1 >= 0x20)
  {
    uint64_t v31 = a5;
    uint64_t v32 = -1LL;
    uint64_t v33 = -1LL;
    sub_100849AB0(a3, v12, v13, a2, a4, (uint64_t)&v31, a6);
  }

  double v15 = *(double ***)(a1 + 24);
  double v14 = *(double ***)(a1 + 32);
  if (v15 != v14)
  {
    uint64_t v16 = 0LL;
    do
    {
      double v17 = *v15;
      double v18 = v15[1];
      if ((unint64_t)((char *)v18 - (char *)*v15) >= 0x20)
      {
        uint64_t v31 = v11;
        uint64_t v32 = -1LL;
        uint64_t v33 = v16;
        sub_100849AB0(a3, v17, v18, a2, a4, (uint64_t)&v31, a6);
        double v14 = *(double ***)(a1 + 32);
      }

      ++v16;
      v15 += 3;
    }

    while (v15 != v14);
  }

  double v19 = *a3;
  int v20 = a3[1];
  if (*a3 != v20)
  {
    __asm { FMOV            V0.2D, #1.0 }

    do
    {
      float64x2_t v26 = v19[2];
      float64x2_t v27 = v19[3];
      float64x2_t v28 = vabsq_f64(v26);
      float64x2_t v29 = vsubq_f64( v26,  (float64x2_t)vbslq_s8( (int8x16_t)vcgtq_f64(_Q0, v28),  (int8x16_t)xmmword_101339490,  (int8x16_t)vmulq_f64(v28, (float64x2_t)xmmword_101339490)));
      float64x2_t v30 = vabsq_f64(v27);
      v19[2] = v29;
      v19[3] = vaddq_f64( v27,  (float64x2_t)vbslq_s8( (int8x16_t)vcgtq_f64(_Q0, v30),  (int8x16_t)xmmword_101339490,  (int8x16_t)vmulq_f64(v30, (float64x2_t)xmmword_101339490)));
      double v19 = (float64x2_t *)((char *)v19 + 120);
    }

    while (v19 != v20);
  }

void sub_100849AB0( void *a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a3 == a2) {
    return;
  }
  double v7 = a2;
  v116.i64[0] = -1LL;
  v116.i64[1] = -1LL;
  int64x2_t v117 = 0uLL;
  v118.i8[0] = 0;
  v118.i64[1] = -1LL;
  LOWORD(v119) = 0;
  int64x2_t v104 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int64x2_t v105 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v114 = v105;
  int64x2_t v115 = v104;
  *(void *)double v113 = 0LL;
  memset(&v113[8], 255, 24);
  double v9 = (char *)a1[1];
  unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v9[-*a1] >> 3);
  __int128 v112 = *(_OWORD *)a2;
  uint64_t v11 = a2 + 2;
  if (a2 + 2 == a3) {
    goto LABEL_121;
  }
  unint64_t v102 = v10;
  unint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v106 = ((char *)a3 - (char *)a2) >> 4;
  char v108 = a1 + 2;
  char v109 = 1;
  do
  {
    double v15 = v7[3];
    double v7 = v11;
    *((double *)&v111 + 1) = v15;
    double v16 = *v11;
    *(double *)&__int128 v111 = v16;
    double v17 = *(double *)&v112;
    double v18 = vabdd_f64(v16, *(double *)&v112);
    double v19 = 180.0;
    if (v18 == 180.0) {
      goto LABEL_5;
    }
    double v20 = v16 - *(double *)&v112;
    if (COERCE__INT64(fabs(v16 - *(double *)&v112)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v26 = fabs(v18 + -180.0);
      if (v18 < 180.0) {
        double v18 = 180.0;
      }
      double v27 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
      BOOL v28 = v26 > v27;
      double v19 = 180.0;
      if (!v28) {
        goto LABEL_5;
      }
    }

    if (v20 <= 180.0)
    {
      if (v20 < -180.0)
      {
        double v19 = fmod(v20 + -180.0, 360.0) + 180.0;
LABEL_5:
        double v20 = v19;
      }
    }

    else
    {
      double v20 = fmod(v20 + 180.0, 360.0) + -180.0;
      double v19 = 180.0;
      if (v20 == -180.0) {
        goto LABEL_5;
      }
      BOOL v28 = ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
         && (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (!v28 || *(void *)&v20 == 0LL)
      {
        double v30 = fabs(v20 + 180.0);
        double v31 = fabs(v20);
        if (v31 < 180.0) {
          double v31 = 180.0;
        }
        double v32 = v31 >= 1.0 ? v31 * 2.22044605e-16 : 2.22044605e-16;
        BOOL v28 = v30 > v32;
        double v19 = 180.0;
        if (!v28) {
          goto LABEL_5;
        }
      }
    }

    if (v20 >= 0.0) {
      int v21 = 0;
    }
    else {
      int v21 = -1;
    }
    if (v20 > 0.0) {
      int v22 = 1;
    }
    else {
      int v22 = v21;
    }
    else {
      int v23 = -1;
    }
    else {
      int v24 = v23;
    }
    if (v22) {
      goto LABEL_72;
    }
    if (v17 != v16)
    {
      if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_71;
      }

      double v34 = vabdd_f64(v17, v16);
      double v35 = fabs(v17);
      double v36 = fabs(v16);
      if (v35 < v36) {
        double v35 = v36;
      }
      double v37 = v35 >= 1.0 ? v35 * 2.22044605e-16 : 2.22044605e-16;
      if (v34 > v37) {
        goto LABEL_71;
      }
    }

    if (*((double *)&v112 + 1) != v15)
    {
      if ((*((void *)&v112 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_71;
      }

      double v38 = vabdd_f64(*((double *)&v112 + 1), v15);
      double v39 = fabs(*((double *)&v112 + 1));
      double v40 = fabs(v15);
      if (v39 < v40) {
        double v39 = v40;
      }
      double v41 = v39 >= 1.0 ? v39 * 2.22044605e-16 : 2.22044605e-16;
      if (v38 > v41)
      {
LABEL_71:
        int v22 = 0;
LABEL_72:
        int v25 = 0;
        if (!v12) {
          goto LABEL_96;
        }
        goto LABEL_73;
      }
    }

    int v25 = 1;
    int v22 = -99;
    int v24 = -99;
    if (!v12) {
      goto LABEL_96;
    }
LABEL_73:
    if (v22 == *(_DWORD *)v113 && v12 <= a7 && v24 == *(_DWORD *)&v113[4])
    {
      v123[0] = (double *)&v112;
      v123[1] = (double *)&v111;
      sub_10084AB30((double *)v114.i64, v123);
      goto LABEL_99;
    }

    unint64_t v42 = a1[1];
    if (!v118.i8[0]) {
      unint64_t v102 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v42 - *a1) >> 3);
    }
    if (v42 >= *v108)
    {
      unint64_t v50 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v42 - *a1) >> 3);
      unint64_t v51 = v50 + 1;
      if (v50 + 1 > 0x222222222222222LL) {
        goto LABEL_125;
      }
      else {
        unint64_t v52 = v51;
      }
      if (v52) {
        unsigned __int8 v53 = (char *)sub_1000BAE04((uint64_t)v108, v52);
      }
      else {
        unsigned __int8 v53 = 0LL;
      }
      double v54 = (int64x2_t *)&v53[120 * v50];
      int64x2_t v55 = *(int64x2_t *)v113;
      int64x2_t v56 = *(int64x2_t *)&v113[16];
      int64x2_t v57 = v115;
      v54[2] = v114;
      v54[3] = v57;
      *double v54 = v55;
      v54[1] = v56;
      int64x2_t v58 = v116;
      int64x2_t v59 = v117;
      int64x2_t v60 = v118;
      v54[7].i64[0] = v119;
      v54[5] = v59;
      v54[6] = v60;
      v54[4] = v58;
      BOOL v62 = (char *)*a1;
      unint64_t v61 = (char *)a1[1];
      BOOL v63 = v54;
      if (v61 != (char *)*a1)
      {
        do
        {
          int64x2_t v64 = *(int64x2_t *)(v61 - 120);
          int64x2_t v65 = *(int64x2_t *)(v61 - 104);
          int64x2_t v66 = *(int64x2_t *)(v61 - 88);
          *(int64x2_t *)((char *)v63 - 72) = *(int64x2_t *)(v61 - 72);
          *(int64x2_t *)((char *)v63 - 88) = v66;
          *(int64x2_t *)((char *)v63 - 104) = v65;
          *(int64x2_t *)((char *)v63 - 120) = v64;
          int64x2_t v67 = *(int64x2_t *)(v61 - 56);
          int64x2_t v68 = *(int64x2_t *)(v61 - 40);
          int64x2_t v69 = *(int64x2_t *)(v61 - 24);
          v63[-1].i16[4] = *((_WORD *)v61 - 4);
          *(int64x2_t *)((char *)v63 - 24) = v69;
          *(int64x2_t *)((char *)v63 - 40) = v68;
          *(int64x2_t *)((char *)v63 - 56) = v67;
          BOOL v63 = (int64x2_t *)((char *)v63 - 120);
          v61 -= 120;
        }

        while (v61 != v62);
        unint64_t v61 = (char *)*a1;
      }

      double v49 = &v54[7].i8[8];
      *a1 = v63;
      a1[1] = (char *)v54 + 120;
      a1[2] = &v53[120 * v52];
      if (v61) {
        operator delete(v61);
      }
    }

    else
    {
      __int128 v43 = *(_OWORD *)v113;
      __int128 v44 = *(_OWORD *)&v113[16];
      int64x2_t v45 = v115;
      *(int64x2_t *)(v42 + 32) = v114;
      *(int64x2_t *)(v42 + 48) = v45;
      *(_OWORD *)unint64_t v42 = v43;
      *(_OWORD *)(v42 + 16) = v44;
      int64x2_t v46 = v116;
      int64x2_t v47 = v117;
      int64x2_t v48 = v118;
      *(void *)(v42 + 112) = v119;
      *(int64x2_t *)(v42 + 80) = v47;
      *(int64x2_t *)(v42 + 96) = v48;
      *(int64x2_t *)(v42 + 64) = v46;
      double v49 = (char *)(v42 + 120);
    }

    a1[1] = v49;
    memset(&v113[8], 255, 24);
    v116.i64[0] = -1LL;
    v116.i64[1] = -1LL;
    int64x2_t v117 = 0uLL;
    v118.i8[0] = 0;
    *(void *)double v113 = 0LL;
    int64x2_t v114 = v105;
    int64x2_t v115 = v104;
    v118.i64[1] = -1LL;
    LOWORD(v119) = 0;
LABEL_96:
    *(_OWORD *)&v113[8] = *(_OWORD *)a6;
    *(void *)&v113[24] = *(void *)(a6 + 16);
    v118.i8[0] = v25;
    v118.i64[1] = v13;
    v116.i64[0] = v14;
    v117.i64[1] = v106;
    if (!(v25 & 1 | ((v109 & 1) == 0)))
    {
      char v109 = 0;
      LOBYTE(v119) = 1;
    }

    *(_DWORD *)double v113 = v22;
    *(_DWORD *)&v113[4] = v24;
    __int128 v70 = v111;
    uint64_t v122 = *((void *)&v112 + 1);
    v123[0] = (double *)v112;
    sub_100843CD4((double *)v123, (double *)&v122, 1);
    uint64_t v72 = v122;
    BOOL v71 = v123[0];
    uint64_t v122 = *((void *)&v70 + 1);
    v123[0] = (double *)v70;
    sub_100843CD4((double *)v123, (double *)&v122, 1);
    uint64_t v74 = v122;
    double v73 = v123[0];
    uint64_t v122 = v72;
    v123[0] = v71;
    uint64_t v120 = v74;
    double v121 = v73;
    sub_10084A318((double *)v123, (double *)&v122, (double *)&v121, (double *)&v120);
    v114.i64[0] = (uint64_t)v123[0];
    v114.i64[1] = v122;
    v115.i64[0] = (uint64_t)v121;
    v115.i64[1] = v120;
LABEL_99:
    ++v14;
    unint64_t v12 = v117.i64[0] + 1;
    v116.i64[1] = v14;
    ++v117.i64[0];
    v13 += v25 ^ 1u;
    __int128 v112 = v111;
    uint64_t v11 = v7 + 2;
  }

  while (v7 + 2 != a3);
  double v9 = (char *)a1[1];
  if (v12)
  {
    unint64_t v10 = v102;
    if (!v118.i8[0]) {
      unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v9[-*a1] >> 3);
    }
    if ((unint64_t)v9 >= *v108)
    {
      unint64_t v81 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v9[-*a1] >> 3);
      if (v81 + 1 > 0x222222222222222LL) {
LABEL_125:
      }
        sub_100007008();
      unint64_t v82 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*v108 - *a1) >> 3);
      if (v82 <= v81 + 1) {
        unint64_t v82 = v81 + 1;
      }
      else {
        unint64_t v83 = v82;
      }
      if (v83) {
        double v84 = (char *)sub_1000BAE04((uint64_t)v108, v83);
      }
      else {
        double v84 = 0LL;
      }
      double v85 = (int64x2_t *)&v84[120 * v81];
      double v86 = &v84[120 * v83];
      int64x2_t v87 = *(int64x2_t *)v113;
      int64x2_t v88 = *(int64x2_t *)&v113[16];
      int64x2_t v89 = v115;
      v85[2] = v114;
      v85[3] = v89;
      *double v85 = v87;
      v85[1] = v88;
      int64x2_t v90 = v116;
      int64x2_t v91 = v117;
      int64x2_t v92 = v118;
      v85[7].i64[0] = v119;
      v85[5] = v91;
      v85[6] = v92;
      v85[4] = v90;
      double v9 = &v85[7].i8[8];
      uint64_t v94 = (char *)*a1;
      int v93 = (char *)a1[1];
      if (v93 != (char *)*a1)
      {
        do
        {
          int64x2_t v95 = *(int64x2_t *)(v93 - 120);
          int64x2_t v96 = *(int64x2_t *)(v93 - 104);
          int64x2_t v97 = *(int64x2_t *)(v93 - 88);
          *(int64x2_t *)((char *)v85 - 72) = *(int64x2_t *)(v93 - 72);
          *(int64x2_t *)((char *)v85 - 88) = v97;
          *(int64x2_t *)((char *)v85 - 104) = v96;
          *(int64x2_t *)((char *)v85 - 120) = v95;
          int64x2_t v98 = *(int64x2_t *)(v93 - 56);
          int64x2_t v99 = *(int64x2_t *)(v93 - 40);
          int64x2_t v100 = *(int64x2_t *)(v93 - 24);
          v85[-1].i16[4] = *((_WORD *)v93 - 4);
          *(int64x2_t *)((char *)v85 - 24) = v100;
          *(int64x2_t *)((char *)v85 - 40) = v99;
          *(int64x2_t *)((char *)v85 - 56) = v98;
          double v85 = (int64x2_t *)((char *)v85 - 120);
          v93 -= 120;
        }

        while (v93 != v94);
        int v93 = (char *)*a1;
      }

      *a1 = v85;
      a1[1] = v9;
      a1[2] = v86;
      if (v93) {
        operator delete(v93);
      }
    }

    else
    {
      __int128 v75 = *(_OWORD *)v113;
      __int128 v76 = *(_OWORD *)&v113[16];
      int64x2_t v77 = v115;
      *((int64x2_t *)v9 + 2) = v114;
      *((int64x2_t *)v9 + 3) = v77;
      *(_OWORD *)double v9 = v75;
      *((_OWORD *)v9 + 1) = v76;
      int64x2_t v78 = v116;
      int64x2_t v79 = v117;
      int64x2_t v80 = v118;
      *((void *)v9 + 14) = v119;
      *((int64x2_t *)v9 + 5) = v79;
      *((int64x2_t *)v9 + 6) = v80;
      *((int64x2_t *)v9 + 4) = v78;
      v9 += 120;
    }

    a1[1] = v9;
  }

  else
  {
    unint64_t v10 = v102;
  }

void sub_10084A318(double *a1, double *a2, double *a3, double *a4)
{
  double v8 = *a1;
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_10198D598))
  {
    qword_10198D590 = 0x3F91DF46A2529D39LL;
    __cxa_guard_release(&qword_10198D598);
  }

  double v10 = *(double *)&qword_10198D590;
  double v11 = *a2;
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_10198D598))
  {
    qword_10198D590 = 0x3F91DF46A2529D39LL;
    __cxa_guard_release(&qword_10198D598);
  }

  double v13 = *(double *)&qword_10198D590;
  double v14 = *a3;
  unsigned __int8 v15 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_10198D598))
  {
    qword_10198D590 = 0x3F91DF46A2529D39LL;
    __cxa_guard_release(&qword_10198D598);
  }

  double v16 = *(double *)&qword_10198D590;
  double v17 = *a4;
  unsigned __int8 v18 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v18 & 1) == 0)
  {
    double v27 = *a4;
    uint64_t v28 = qword_10198D590;
    int v26 = __cxa_guard_acquire(&qword_10198D598);
    double v17 = v27;
    double v16 = *(double *)&v28;
    if (v26)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v17 = v27;
      double v16 = *(double *)&v28;
    }
  }

  double v19 = v8 * v10;
  double v20 = v17 * *(double *)&qword_10198D590;
  __double2 v21 = __sincos_stret(v14 * v16 - v19);
  __double2 v22 = __sincos_stret(v11 * v13);
  __double2 v23 = __sincos_stret(v20);
  double v24 = atan2(v21.__sinval * v23.__cosval, v21.__cosval * -(v22.__sinval * v23.__cosval) + v22.__cosval * v23.__sinval);
  double v25 = atan2(v22.__cosval * v21.__sinval, v22.__cosval * v23.__sinval * v21.__cosval - v22.__sinval * v23.__cosval);
  sub_10084A768(a1, a2, a3, a4, v24, v25);
}

void *sub_10084A594(void *result, double *a2, void *a3, double *a4)
{
  double v4 = fabs(*a2);
  double v5 = 90.0;
  if (v4 == 90.0)
  {
    BOOL v6 = 1;
  }

  else if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    BOOL v6 = 0;
  }

  else
  {
    double v7 = fabs(v4 + -90.0);
    if (v4 < 90.0) {
      double v4 = 90.0;
    }
    if (v4 >= 1.0) {
      double v8 = v4 * 2.22044605e-16;
    }
    else {
      double v8 = 2.22044605e-16;
    }
    BOOL v6 = v7 <= v8;
  }

  double v9 = fabs(*a4);
  if (v9 == 90.0)
  {
    BOOL v10 = 1;
  }

  else
  {
    if ((*(void *)a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
    {
      BOOL v10 = 0;
      BOOL v13 = !v6;
      int v14 = 1;
      goto LABEL_24;
    }

    double v11 = fabs(v9 + -90.0);
    if (v9 >= 90.0) {
      double v5 = v9;
    }
    if (v5 >= 1.0) {
      double v12 = v5 * 2.22044605e-16;
    }
    else {
      double v12 = 2.22044605e-16;
    }
    BOOL v10 = v11 <= v12;
  }

  BOOL v13 = !v6;
  int v14 = !v10;
  if (v6 && (v14 & 1) == 0)
  {
    *uint64_t result = 0LL;
    *a3 = 0LL;
    goto LABEL_29;
  }

void sub_10084A768(double *a1, double *a2, double *a3, double *a4, double a5, double a6)
{
  if (*a1 > *a3) {
    sub_10124CB40();
  }
  double v9 = *a2;
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v10 & 1) == 0)
  {
    double v39 = a6;
    int v34 = __cxa_guard_acquire(&qword_10198D598);
    a6 = v39;
    if (v34)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      a6 = v39;
    }
  }

  double v11 = *(double *)&qword_10198D590;
  double v12 = *a4;
  unsigned __int8 v13 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v13 & 1) == 0)
  {
    double v38 = *a4;
    double v40 = a6;
    uint64_t v37 = qword_10198D590;
    int v35 = __cxa_guard_acquire(&qword_10198D598);
    double v11 = *(double *)&v37;
    double v12 = v38;
    a6 = v40;
    if (v35)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      double v11 = *(double *)&v37;
      double v12 = v38;
      a6 = v40;
    }
  }

  if (a5 != a6)
  {
    if ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_14;
    }

    double v14 = vabdd_f64(a5, a6);
    double v15 = fabs(a5);
    double v16 = fabs(a6);
    if (v15 < v16) {
      double v15 = v16;
    }
    double v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_14:
      double v18 = *a2;
      if (*a2 <= *a4)
      {
        double v19 = v9 * v11;
        double v20 = a6;
      }

      else
      {
        double v19 = v12 * *(double *)&qword_10198D590;
        *a2 = *a4;
        *a4 = v18;
        double v20 = a5;
        a5 = a6;
      }

      if (a5 == v20) {
        goto LABEL_46;
      }
      if ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v21 = vabdd_f64(a5, v20);
        double v22 = fabs(a5);
        double v23 = fabs(v20);
        if (v22 < v23) {
          double v22 = v23;
        }
        double v24 = v22 >= 1.0 ? v22 * 2.22044605e-16 : 2.22044605e-16;
        if (v21 <= v24) {
LABEL_46:
        }
          sub_10124CB68();
      }

      unsigned __int8 v25 = atomic_load((unsigned __int8 *)&qword_10198D5D8);
      if ((v25 & 1) == 0)
      {
        double v41 = v19;
        int v36 = __cxa_guard_acquire(&qword_10198D5D8);
        double v19 = v41;
        if (v36)
        {
          qword_10198D5D0 = 0x3FF921FB54442D18LL;
          __cxa_guard_release(&qword_10198D5D8);
          double v19 = v41;
        }
      }

      if (a5 >= v20)
      {
      }

      else if (a5 >= *(double *)&qword_10198D5D0 || *(double *)&qword_10198D5D0 >= v20)
      {
        return;
      }

      double v28 = cos(v19);
      double v29 = sin(a5);
      double v30 = acos(fabs(v28 * v29));
      if (*a2 + *a4 >= 0.0)
      {
        unsigned __int8 v33 = atomic_load((unsigned __int8 *)&qword_10198D5E8);
        if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_10198D5E8))
        {
          qword_10198D5E0 = 0x404CA5DC1A63C1F8LL;
          __cxa_guard_release(&qword_10198D5E8);
        }
      }

      else
      {
        double v31 = -v30;
        unsigned __int8 v32 = atomic_load((unsigned __int8 *)&qword_10198D5E8);
        if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_10198D5E8))
        {
          qword_10198D5E0 = 0x404CA5DC1A63C1F8LL;
          __cxa_guard_release(&qword_10198D5E8);
        }
      }
    }
  }

void sub_10084AB30(double *a1, double **a2)
{
  unsigned __int8 v3 = a2[1];
  double v4 = **a2;
  double v5 = *v3;
  double v6 = v3[1];
  double v25 = (*a2)[1];
  v26[0] = v4;
  sub_100843CD4(v26, &v25, 1);
  double v8 = v25;
  double v7 = v26[0];
  double v25 = v6;
  v26[0] = v5;
  sub_100843CD4(v26, &v25, 1);
  double v9 = v25;
  double v24 = v8;
  double v25 = v7;
  double v22 = v9;
  double v23 = v26[0];
  sub_10084A318(&v25, &v24, &v23, &v22);
  v26[0] = v25;
  v26[1] = v24;
  v26[2] = v23;
  v26[3] = v22;
  double v10 = *a1;
  double v11 = 1.79769313e308;
  double v12 = a1[2];
  double v13 = a1[3];
  if (*a1 == 1.79769313e308 && a1[1] == 1.79769313e308 && v12 == -1.79769313e308 && v13 == -1.79769313e308)
  {
    double v14 = -1.79769313e308;
    double v15 = -1.79769313e308;
    double v16 = 1.79769313e308;
  }

  else
  {
    double v24 = a1[1];
    double v25 = v10;
    double v22 = v13;
    double v23 = v12;
    double v17 = vabdd_f64(v10, v12);
    if (v17 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v10 - v12)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        BOOL v18 = 0;
      }

      else
      {
        double v19 = vabdd_f64(360.0, v17);
        double v20 = fmax(v17, 360.0);
        if (v20 >= 1.0) {
          double v21 = v20 * 2.22044605e-16;
        }
        else {
          double v21 = 2.22044605e-16;
        }
        BOOL v18 = v19 <= v21;
      }
    }

    else
    {
      BOOL v18 = 1;
    }

    sub_10084B23C(&v25, &v24, &v23, &v22, v18);
    double v11 = v24;
    double v16 = v25;
    double v14 = v22;
    double v15 = v23;
  }

  v26[4] = v16;
  v26[5] = v11;
  v26[6] = v15;
  v26[7] = v14;
  sub_10084ACE8((uint64_t)v26, a1);
}

void sub_10084ACE8(uint64_t a1, void *a2)
{
  uint64_t v46 = sub_10084B9E8(a1, a1 + 64);
  double v4 = *(double *)(a1 + 24);
  double v5 = *(double *)(a1 + 56);
  uint64_t v6 = a1;
  if (v4 < v5)
  {
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_6;
    }

    double v42 = vabdd_f64(v5, v4);
    double v43 = fabs(v5);
    double v44 = fabs(v4);
    if (v43 >= v44) {
      double v44 = v43;
    }
    double v45 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
    uint64_t v6 = a1;
    if (v42 > v45) {
LABEL_6:
    }
      uint64_t v6 = a1 + 32;
  }

  double v8 = 0LL;
  uint64_t v9 = 0LL;
  __int128 __p = 0LL;
  double v54 = 0LL;
  v55[0] = 0LL;
  float64x2_t v49 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  do
  {
    double v10 = (float64x2_t *)(a1 + 32 * v9);
    float64x2_t v11 = *v10;
    float64x2_t v50 = v10[1];
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32( (int32x4_t)vceqq_f64(*v10, v48),  (int32x4_t)vceqq_f64(v50, v49))))) & 1) != 0)
    {
      float64x2_t v47 = *v10;
      if (v11.f64[1] != 90.0)
      {
        if ((*(void *)&v11.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_17;
        }
        v11.f64[0] = fabs(v11.f64[1] + -90.0);
        double v12 = fabs(v11.f64[1]);
        if (v12 < 90.0) {
          double v12 = 90.0;
        }
        double v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
        if (v11.f64[0] > v13)
        {
LABEL_17:
          if (v50.f64[1] != -90.0)
          {
            if ((*(void *)&v50.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
              goto LABEL_34;
            }
            double v14 = fabs(v50.f64[1] + 90.0);
            double v15 = fabs(v50.f64[1]);
            if (v15 < 90.0) {
              double v15 = 90.0;
            }
            double v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
            if (v14 > v16)
            {
LABEL_34:
              if (v50.f64[0] <= 180.0) {
                goto LABEL_26;
              }
              if ((*(void *)&v50.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                goto LABEL_35;
              }
              double v17 = fabs(v50.f64[0] + -180.0);
              double v18 = fabs(v50.f64[0]);
              if (v18 < 180.0) {
                double v18 = 180.0;
              }
              double v19 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
              if (v17 <= v19)
              {
LABEL_26:
                if ((unint64_t)v8 < v55[0])
                {
                  void *v8 = *(void *)&v47.f64[0];
                  v8[1] = *(void *)&v50.f64[0];
                  v8 += 2;
LABEL_79:
                  double v54 = (char *)v8;
                  goto LABEL_80;
                }

                uint64_t v21 = ((char *)v8 - (_BYTE *)__p) >> 4;
                unint64_t v22 = (uint64_t)(v55[0] - (void)__p) >> 3;
                if (v22 <= v21 + 1) {
                  unint64_t v22 = v21 + 1;
                }
                if (v55[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
                  unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v23 = v22;
                }
                if (v23) {
                  double v24 = (char *)sub_100037038((uint64_t)v55, v23);
                }
                else {
                  double v24 = 0LL;
                }
                double v29 = &v24[16 * v21];
                *(float64_t *)double v29 = v47.f64[0];
                *((void *)v29 + 1) = *(void *)&v50.f64[0];
                double v31 = (char *)__p;
                double v30 = v54;
                unsigned __int8 v32 = v29;
                if (v54 != __p)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }

                  while (v30 != v31);
LABEL_76:
                  double v30 = (char *)__p;
                }
              }

              else
              {
LABEL_35:
                if ((unint64_t)v8 >= v55[0])
                {
                  uint64_t v25 = ((char *)v8 - (_BYTE *)__p) >> 4;
                  unint64_t v26 = (uint64_t)(v55[0] - (void)__p) >> 3;
                  if (v26 <= v25 + 1) {
                    unint64_t v26 = v25 + 1;
                  }
                  if (v55[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
                    unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v27 = v26;
                  }
                  if (v27) {
                    double v28 = (char *)sub_100037038((uint64_t)v55, v27);
                  }
                  else {
                    double v28 = 0LL;
                  }
                  unsigned __int8 v33 = &v28[16 * v25];
                  *(float64_t *)unsigned __int8 v33 = v47.f64[0];
                  *((void *)v33 + 1) = 0x4066800000000000LL;
                  int v35 = (char *)__p;
                  int v34 = v54;
                  int v36 = v33;
                  if (v54 != __p)
                  {
                    do
                    {
                      *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
                      v36 -= 16;
                      v34 -= 16;
                    }

                    while (v34 != v35);
                    int v34 = (char *)__p;
                  }

                  double v20 = v33 + 16;
                  __int128 __p = v36;
                  double v54 = v33 + 16;
                  v55[0] = &v28[16 * v27];
                  if (v34) {
                    operator delete(v34);
                  }
                }

                else
                {
                  void *v8 = *(void *)&v47.f64[0];
                  v8[1] = 0x4066800000000000LL;
                  double v20 = v8 + 2;
                }

                double v54 = (char *)v20;
                double v37 = v50.f64[0] + -360.0;
                if ((unint64_t)v20 < v55[0])
                {
                  *double v20 = 0xC066800000000000LL;
                  *((double *)v20 + 1) = v37;
                  double v8 = v20 + 2;
                  goto LABEL_79;
                }

                uint64_t v38 = ((char *)v20 - (_BYTE *)__p) >> 4;
                unint64_t v39 = (uint64_t)(v55[0] - (void)__p) >> 3;
                if (v39 <= v38 + 1) {
                  unint64_t v39 = v38 + 1;
                }
                if (v55[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
                  unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v23 = v39;
                }
                if (v23) {
                  double v24 = (char *)sub_100037038((uint64_t)v55, v23);
                }
                else {
                  double v24 = 0LL;
                }
                double v29 = &v24[16 * v38];
                *(void *)double v29 = 0xC066800000000000LL;
                *((double *)v29 + 1) = v37;
                double v40 = (char *)__p;
                double v30 = v54;
                unsigned __int8 v32 = v29;
                if (v54 != __p)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }

                  while (v30 != v40);
                  goto LABEL_76;
                }
              }

              double v8 = v29 + 16;
              __int128 __p = v32;
              double v54 = v29 + 16;
              v55[0] = &v24[16 * v23];
              if (v30) {
                operator delete(v30);
              }
              goto LABEL_79;
            }
          }
        }
      }
    }

void sub_10084B208( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10084B23C(double *a1, double *a2, double *a3, double *a4, int a5)
{
  double v10 = *a2;
  if (*a2 == -90.0) {
    goto LABEL_9;
  }
  if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v15 = 90.0;
    double v16 = fabs(v10 + 90.0);
    double v17 = fabs(v10);
    if (v17 >= 90.0) {
      double v15 = v17;
    }
    double v18 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 <= v18)
    {
LABEL_9:
      double v11 = *a4;
      if (*a4 == -90.0) {
        goto LABEL_20;
      }
      if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v12 = fabs(v11 + 90.0);
        double v13 = fabs(v11);
        if (v13 < 90.0) {
          double v13 = 90.0;
        }
        double v14 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
        if (v12 <= v14) {
          goto LABEL_20;
        }
      }
    }
  }

  if (v10 != 90.0)
  {
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_60;
    }
    double v33 = fabs(v10 + -90.0);
    double v34 = fabs(v10);
    if (v34 < 90.0) {
      double v34 = 90.0;
    }
    double v35 = v34 >= 1.0 ? v34 * 2.22044605e-16 : 2.22044605e-16;
    if (v33 > v35) {
      goto LABEL_60;
    }
  }

  double v19 = *a4;
  if (*a4 == 90.0) {
    goto LABEL_20;
  }
  if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_60;
  }
  double v36 = fabs(v19 + -90.0);
  double v37 = fabs(v19);
  if (v37 < 90.0) {
    double v37 = 90.0;
  }
  double v38 = v37 >= 1.0 ? v37 * 2.22044605e-16 : 2.22044605e-16;
  if (v36 <= v38)
  {
LABEL_20:
    *a3 = 0.0;
    *a1 = 0.0;
    double v20 = 0.0;
  }

  else
  {
LABEL_60:
    if (a5)
    {
      *a1 = -180.0;
      double v39 = 180.0;
LABEL_64:
      *a3 = v39;
      double v20 = *a1;
      goto LABEL_21;
    }

    double v20 = *a1;
    if (*a1 > *a3)
    {
      double v39 = *a3 + 360.0;
      goto LABEL_64;
    }
  }

void sub_10084B574(uint64_t *a1, double *a2, double *a3)
{
  *a3 = 0.0;
  *a2 = 0.0;
  double v5 = (void *)*a1;
  uint64_t v6 = (void *)a1[1];
  if (v5 != v6)
  {
    *a2 = *(double *)sub_10084BBC0(v5, v6);
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    uint64_t v10 = *a1 + 16;
    if (*a1 != v9 && v10 != v9)
    {
      do
      {
        double v49 = *(double *)(v8 + 8);
        double v50 = *(double *)(v10 + 8);
        if (v49 < v50)
        {
          if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_87;
          }

          double v52 = vabdd_f64(v50, v49);
          double v53 = fabs(v50);
          double v54 = fabs(v49);
          if (v53 >= v54) {
            double v54 = v53;
          }
          double v55 = v54 >= 1.0 ? v54 * 2.22044605e-16 : 2.22044605e-16;
          if (v52 > v55) {
LABEL_87:
          }
            uint64_t v8 = v10;
        }

        v10 += 16LL;
      }

      while (v10 != v9);
    }

    double v12 = *(double *)(v8 + 8);
    *a3 = v12;
    double v13 = v12 - *a2;
    if (v13 > 180.0)
    {
      if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_61;
      }
      double v14 = fabs(v13 + -180.0);
      double v15 = fabs(v13);
      if (v15 < 180.0) {
        double v15 = 180.0;
      }
      double v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
      if (v14 > v16)
      {
LABEL_61:
        double v17 = sub_10084BA7C(a1, &v57, &v56);
        double v18 = *a3;
        double v19 = *a2;
        if (*a3 < *a2)
        {
          if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_100;
          }

          double v20 = vabdd_f64(v19, v18);
          double v21 = fabs(v19);
          double v22 = fabs(v18);
          if (v21 < v22) {
            double v21 = v22;
          }
          double v23 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v20 > v23) {
LABEL_100:
          }
            sub_10124CCD0();
        }

        if (v18 > 180.0)
        {
          if ((*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
            goto LABEL_102;
          }
          double v24 = fabs(v18 + -180.0);
          double v25 = fabs(v18);
          if (v25 < 180.0) {
            double v25 = 180.0;
          }
          double v26 = v25 >= 1.0 ? v25 * 2.22044605e-16 : 2.22044605e-16;
          if (v24 > v26) {
LABEL_102:
          }
            sub_10124CCA8();
        }

        if (v19 < -180.0)
        {
          if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((double v27 = vabdd_f64(-180.0, v19), v28 = fmax(fabs(v19), 180.0), v28 >= 1.0)
              ? (double v29 = v28 * 2.22044605e-16)
              : (double v29 = 2.22044605e-16),
                v27 > v29))
          {
            sub_10124CC80();
          }
        }

        double v30 = v57;
        if (v56 < v57)
        {
          if ((*(void *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_101;
          }

          double v31 = vabdd_f64(v57, v56);
          double v32 = fabs(v57);
          double v33 = fabs(v56);
          if (v32 < v33) {
            double v32 = v33;
          }
          double v34 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
          if (v31 > v34) {
LABEL_101:
          }
            sub_10124CC58();
        }

        if (v56 > 180.0)
        {
          if ((*(void *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
            goto LABEL_104;
          }
          double v35 = fabs(v56 + -180.0);
          double v36 = fabs(v56);
          if (v36 < 180.0) {
            double v36 = 180.0;
          }
          double v37 = v36 >= 1.0 ? v36 * 2.22044605e-16 : 2.22044605e-16;
          if (v35 > v37) {
LABEL_104:
          }
            sub_10124CC30();
        }

        if (v57 < -180.0)
        {
          if ((*(void *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((double v38 = vabdd_f64(-180.0, v57), v39 = fmax(fabs(v57), 180.0), v39 >= 1.0)
              ? (double v40 = v39 * 2.22044605e-16)
              : (double v40 = 2.22044605e-16),
                v38 > v40))
          {
            sub_10124CC08();
          }
        }

        if (v17 > 0.0)
        {
          if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            if (v19 + 360.0 - v18 >= v17) {
              return;
            }
          }

          else
          {
            double v41 = fabs(v17);
            double v42 = 2.22044605e-16;
            if (v41 >= 1.0) {
              double v42 = v41 * 2.22044605e-16;
            }
            if (v41 <= v42) {
              return;
            }
            double v43 = v19 + 360.0 - v18;
            if (v43 >= v17) {
              return;
            }
            BOOL v44 = ((*(void *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
               && (*(void *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (!v44 || *(void *)&v43 == 0LL)
            {
              double v46 = vabdd_f64(v17, v43);
              double v47 = fabs(v43);
              if (v41 >= v47) {
                double v47 = v41;
              }
              double v48 = v47 >= 1.0 ? v47 * 2.22044605e-16 : 2.22044605e-16;
              if (v46 <= v48) {
                return;
              }
            }
          }

          *a2 = v56;
          *a3 = v30 + 360.0;
        }
      }
    }
  }

uint64_t sub_10084B9E8(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    for (uint64_t i = result + 32; i != a2; i += 32LL)
    {
      double v3 = *(double *)(i + 8);
      double v4 = *(double *)(result + 8);
      if (v3 < v4)
      {
        if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_8;
        }

        double v6 = vabdd_f64(v4, v3);
        double v7 = fabs(v4);
        double v8 = fabs(v3);
        if (v7 >= v8) {
          double v8 = v7;
        }
        double v9 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
        if (v6 > v9) {
LABEL_8:
        }
          double result = i;
      }
    }
  }

  return result;
}

double sub_10084BA7C(uint64_t *a1, double *a2, double *a3)
{
  double v16 = 0LL;
  double v17 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v13 = 0LL;
  double v14 = 0.0;
  double v15 = 0.0;
  sub_10084BC54(a1, (uint64_t *)&v16);
  while (1)
  {
    double v5 = v16;
    double v6 = v17;
    if (v16 == v17) {
      break;
    }
    __int128 v19 = *(_OWORD *)v16;
    if ((char *)v17 - (char *)v16 >= 17)
    {
      __int128 v21 = *(_OWORD *)v16;
      double v7 = sub_10084C240(v16, (uint64_t)&v20, (unint64_t)((char *)v17 - (char *)v16) >> 4);
      double v8 = v6 - 2;
      if (v6 - 2 == v7)
      {
        *double v7 = v21;
        *((_BYTE *)v7 + 8) = BYTE8(v21);
      }

      else
      {
        uint64_t v9 = *v8;
        *((_BYTE *)v7 + 8) = *((_BYTE *)v6 - 8);
        *double v7 = v9;
        uint64_t *v8 = v21;
        *((_BYTE *)v6 - 8) = BYTE8(v21);
        sub_10084C348((uint64_t)v5, (uint64_t)(v7 + 2), (uint64_t)&v20, ((char *)(v7 + 2) - (char *)v5) >> 4);
      }

      double v6 = v17;
    }

    double v17 = v6 - 2;
    sub_10084BD40((uint64_t)&v13, &v19, (uint64_t *)&v16);
  }

  double v10 = v14;
  double v11 = v15;
  *a2 = v14;
  *a3 = v11;
  if (v5)
  {
    double v17 = v5;
    operator delete(v5);
  }

  return v11 - v10;
}

void sub_10084BBA0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10084BBC0(void *result, void *a2)
{
  if (result != a2)
  {
    for (uint64_t i = result + 2; i != a2; i += 2)
    {
      double v3 = *(double *)i;
      double v4 = *(double *)result;
      if (*(double *)i < *(double *)result)
      {
        if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_8;
        }

        double v6 = vabdd_f64(v4, v3);
        double v7 = fabs(v4);
        double v8 = fabs(v3);
        if (v7 >= v8) {
          double v8 = v7;
        }
        double v9 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
        if (v6 > v9) {
LABEL_8:
        }
          double result = i;
      }
    }
  }

  return result;
}

void sub_10084BC54(uint64_t *a1, uint64_t *a2)
{
  if (*a2 != a2[1]) {
    sub_10124CCF8();
  }
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  double v17 = 0LL;
  uint64_t v18 = 0LL;
  double v16 = 0LL;
  sub_10084BEB0((char *)&v16, v3, v4, v5);
  uint64_t v7 = (uint64_t)v16;
  double v6 = v17;
  uint64_t v8 = v17 - v16;
  if (v17 - v16 >= 17)
  {
    uint64_t v9 = v8 >> 4;
    unint64_t v10 = (unint64_t)((v8 >> 4) - 2) >> 1;
    unint64_t v11 = v10 + 1;
    double v12 = (uint64_t *)&v16[16 * v10];
    do
    {
      sub_10084BF30(v7, (uint64_t)&v19, v9, v12);
      v12 -= 2;
      --v11;
    }

    while (v11);
    uint64_t v7 = (uint64_t)v16;
    double v6 = v17;
  }

  uint64_t v13 = (_BYTE *)*a2;
  *a2 = v7;
  a2[1] = (uint64_t)v6;
  uint64_t v14 = v18;
  uint64_t v15 = a2[2];
  double v16 = v13;
  uint64_t v18 = v15;
  a2[2] = v14;
  if (v13)
  {
    double v17 = v13;
    operator delete(v13);
  }

void sub_10084BD24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10084BD40(uint64_t result, _BYTE *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  if (a2[8])
  {
    *(void *)double result = v4 + 1;
    uint64_t v5 = *(void *)a2;
    unint64_t v6 = a3[2];
    unint64_t v7 = a3[1];
    if (v7 >= v6)
    {
      uint64_t v13 = (uint64_t)(v7 - *a3) >> 4;
      unint64_t v14 = v13 + 1;
      uint64_t v15 = v6 - *a3;
      if (v15 >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        double v17 = (char *)sub_100037038((uint64_t)(a3 + 2), v16);
      }
      else {
        double v17 = 0LL;
      }
      uint64_t v18 = &v17[16 * v13];
      char v19 = &v17[16 * v16];
      *(void *)uint64_t v18 = v5;
      v18[8] = 0;
      uint64_t v8 = (uint64_t)(v18 + 16);
      __int128 v21 = (_BYTE *)*a3;
      char v20 = (_BYTE *)a3[1];
      if (v20 != (_BYTE *)*a3)
      {
        do
        {
          uint64_t v22 = *((void *)v20 - 2);
          v20 -= 16;
          char v23 = v20[8];
          *((void *)v18 - 2) = v22;
          v18 -= 16;
          v18[8] = v23;
        }

        while (v20 != v21);
        char v20 = (_BYTE *)*a3;
      }

      *a3 = (uint64_t)v18;
      a3[1] = v8;
      a3[2] = (uint64_t)v19;
      if (v20) {
        operator delete(v20);
      }
    }

    else
    {
      *(void *)unint64_t v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      uint64_t v8 = v7 + 16;
    }

    a3[1] = v8;
    return sub_10084C348(*a3, v8, (uint64_t)&v24, (v8 - *a3) >> 4);
  }

  else
  {
    uint64_t v9 = v4 - 1;
    *(void *)double result = v9;
    if (!v9)
    {
      uint64_t v10 = *a3;
      if (*a3 != a3[1])
      {
        if (!*(_BYTE *)(v10 + 8)) {
          sub_10124CD20();
        }
        double v11 = **(double **)v10;
        double v12 = *(double *)(*(void *)a2 + 8LL);
        if (v11 - v12 > *(double *)(result + 16) - *(double *)(result + 8))
        {
          *(double *)(result + 8) = v12;
          *(double *)(result + 16) = v11;
        }
      }
    }
  }

  return result;
}

char *sub_10084BEB0(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = sub_10005782C(result, a4);
    for (uint64_t i = *((void *)v6 + 1); a2 != a3; i += 16LL)
    {
      *(void *)uint64_t i = a2;
      *(_BYTE *)(i + 8) = 1;
      a2 += 16LL;
    }

    *((void *)v6 + 1) = i;
  }

  return result;
}

void sub_10084BF14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10084BF30(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 < 2) {
    return result;
  }
  uint64_t v4 = (uint64_t)a4 - result;
  int64_t v5 = (unint64_t)(a3 - 2) >> 1;
  uint64_t v6 = v4 >> 3;
  uint64_t v7 = (v4 >> 3) | 1;
  uint64_t v8 = (uint64_t *)(result + 16 * v7);
  uint64_t v9 = v6 + 2;
  if (v9 >= a3) {
    goto LABEL_11;
  }
  double v10 = *(double *)(v8[2] + 8LL * (*((_BYTE *)v8 + 24) == 0));
  double v11 = *(double *)(*v8 + 8LL * (*((_BYTE *)v8 + 8) == 0));
  if (v10 != v11)
  {
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_65;
    }

    double v45 = vabdd_f64(v10, v11);
    double v46 = fabs(v10);
    double v47 = fabs(v11);
    if (v46 < v47) {
      double v46 = v47;
    }
    double v48 = v46 >= 1.0 ? v46 * 2.22044605e-16 : 2.22044605e-16;
    if (v45 > v48)
    {
LABEL_65:
      if (v10 >= v11) {
        goto LABEL_11;
      }
LABEL_10:
      v8 += 2;
      uint64_t v7 = v9;
      goto LABEL_11;
    }
  }

  if (*((_BYTE *)v8 + 24)) {
    BOOL v12 = *((_BYTE *)v8 + 8) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12) {
    goto LABEL_10;
  }
LABEL_11:
  int v13 = *((unsigned __int8 *)a4 + 8);
  BOOL v14 = *((_BYTE *)a4 + 8) == 0;
  uint64_t v15 = *a4;
  double v16 = *(double *)(*a4 + 8LL * (*((_BYTE *)a4 + 8) == 0));
  double v17 = *(double *)(*v8 + 8LL * (*((_BYTE *)v8 + 8) == 0));
  if (v16 == v17) {
    goto LABEL_85;
  }
  if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_19;
  }

  double v41 = vabdd_f64(v16, v17);
  double v42 = fabs(v16);
  double v43 = fabs(v17);
  if (v42 < v43) {
    double v42 = v43;
  }
  double v44 = v42 >= 1.0 ? v42 * 2.22044605e-16 : 2.22044605e-16;
  if (v41 <= v44)
  {
LABEL_85:
    if (*((_BYTE *)a4 + 8) && !*((_BYTE *)v8 + 8)) {
      return result;
    }
  }

  else
  {
LABEL_19:
    if (v16 < v17) {
      return result;
    }
  }

  uint64_t v19 = *v8;
  *((_BYTE *)a4 + 8) = *((_BYTE *)v8 + 8);
  *a4 = v19;
  if (v5 < v7) {
    goto LABEL_68;
  }
  uint64_t v20 = 8LL * v14;
  while (1)
  {
    __int128 v21 = v8;
    uint64_t v22 = 2 * v7;
    uint64_t v7 = (2 * v7) | 1;
    uint64_t v8 = (uint64_t *)(result + 16 * v7);
    uint64_t v23 = v22 + 2;
    if (v23 < a3)
    {
      double v24 = *(double *)(v8[2] + 8LL * (*((_BYTE *)v8 + 24) == 0));
      double v25 = *(double *)(*v8 + 8LL * (*((_BYTE *)v8 + 8) == 0));
      if (v24 == v25) {
        goto LABEL_86;
      }
      if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_45;
      }

      double v36 = vabdd_f64(v24, v25);
      double v37 = fabs(v24);
      double v38 = fabs(v25);
      if (v37 < v38) {
        double v37 = v38;
      }
      double v39 = v37 >= 1.0 ? v37 * 2.22044605e-16 : 2.22044605e-16;
      if (v36 <= v39)
      {
LABEL_86:
        if (*((_BYTE *)v8 + 24)) {
          BOOL v26 = *((_BYTE *)v8 + 8) == 0;
        }
        else {
          BOOL v26 = 0;
        }
        if (!v26) {
          goto LABEL_30;
        }
      }

      else
      {
LABEL_45:
        if (v24 >= v25) {
          goto LABEL_30;
        }
      }

      v8 += 2;
      uint64_t v7 = v23;
    }

uint64_t *sub_10084C240(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    result += 2 * v3 + 2;
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 >= a3) {
      goto LABEL_12;
    }
    double v9 = *(double *)(result[2] + 8LL * (*((_BYTE *)result + 24) == 0));
    double v10 = *(double *)(*result + 8LL * (*((_BYTE *)result + 8) == 0));
    if (v9 == v10) {
      goto LABEL_29;
    }
    if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_18;
    }

    double v14 = vabdd_f64(v9, v10);
    double v15 = fabs(v9);
    double v16 = fabs(v10);
    if (v15 < v16) {
      double v15 = v16;
    }
    double v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 <= v17)
    {
LABEL_29:
      if (*((_BYTE *)result + 24)) {
        BOOL v11 = *((_BYTE *)result + 8) == 0;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11)
      {
LABEL_11:
        result += 2;
        uint64_t v3 = v8;
      }
    }

    else
    {
LABEL_18:
      if (v9 < v10) {
        goto LABEL_11;
      }
    }

uint64_t sub_10084C348(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (uint64_t *)(result + 16 * (v4 >> 1));
    uint64_t v9 = *(void *)(a2 - 16);
    uint64_t v7 = a2 - 16;
    uint64_t v8 = v9;
    int v10 = *(unsigned __int8 *)(v7 + 8);
    BOOL v11 = *(_BYTE *)(v7 + 8) == 0;
    double v12 = *(double *)(v9 + 8LL * (*(_BYTE *)(v7 + 8) == 0));
    double v13 = *(double *)(*v6 + 8LL * (*((_BYTE *)v6 + 8) == 0));
    if (v12 == v13) {
      goto LABEL_42;
    }
    if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_10;
    }

    double v27 = vabdd_f64(v12, v13);
    double v28 = fabs(v12);
    double v29 = fabs(v13);
    if (v28 < v29) {
      double v28 = v29;
    }
    double v30 = v28 >= 1.0 ? v28 * 2.22044605e-16 : 2.22044605e-16;
    if (v27 <= v30)
    {
LABEL_42:
      if (!*(_BYTE *)(v7 + 8) || *((_BYTE *)v6 + 8)) {
        return result;
      }
    }

    else
    {
LABEL_10:
      if (v12 >= v13) {
        return result;
      }
    }

    uint64_t v15 = *v6;
    *(_BYTE *)(v7 + 8) = *((_BYTE *)v6 + 8);
    *(void *)uint64_t v7 = v15;
    if (v4 >= 2)
    {
      uint64_t v17 = 8LL * v11;
      while (1)
      {
        unint64_t v18 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        double v16 = (uint64_t *)(result + 16 * v5);
        double v19 = *(double *)(v8 + v17);
        double v20 = *(double *)(*v16 + 8LL * (*((_BYTE *)v16 + 8) == 0));
        if (v19 == v20) {
          goto LABEL_43;
        }
        if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_23;
        }

        double v23 = vabdd_f64(v19, v20);
        double v24 = fabs(v19);
        double v25 = fabs(v20);
        if (v24 < v25) {
          double v24 = v25;
        }
        double v26 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
        if (v23 <= v26)
        {
LABEL_43:
          if (!v10 || *((_BYTE *)v16 + 8)) {
            break;
          }
        }

        else
        {
LABEL_23:
          if (v19 >= v20) {
            break;
          }
        }

        uint64_t v22 = *v16;
        *((_BYTE *)v6 + 8) = *((_BYTE *)v16 + 8);
        *uint64_t v6 = v22;
        uint64_t v6 = (uint64_t *)(result + 16 * v5);
        if (v18 <= 1) {
          goto LABEL_13;
        }
      }
    }

    double v16 = v6;
LABEL_13:
    *double v16 = v8;
    *((_BYTE *)v16 + 8) = v10;
  }

  return result;
}

uint64_t sub_10084C4D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v7 - *a1) >> 3) <= a5)
  {
    if (v8 == v7)
    {
      return 1LL;
    }

    else
    {
      while (1)
      {
        uint64_t v23 = v8;
        v8 += 120LL;
        uint64_t v24 = v8;
        if (v8 != v7) {
          break;
        }
LABEL_26:
        uint64_t v22 = 1LL;
        if (v8 == v7) {
          return v22;
        }
      }

      while ((sub_10084CBD8(a2, v23, v24) & 1) != 0)
      {
        uint64_t v7 = v24 + 120;
        uint64_t v24 = v7;
        if (v7 == a1[1]) {
          goto LABEL_26;
        }
      }

      return 0LL;
    }
  }

  else
  {
    __int128 __p = 0LL;
    double v28 = 0LL;
    double v29 = 0LL;
    v26[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v26[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    if (v8 != v7)
    {
      do
      {
        sub_10084CE24((double *)v26, (double *)(v8 + 32));
        double v12 = v28;
        if (v28 >= v29)
        {
          uint64_t v14 = (v28 - (_BYTE *)__p) >> 3;
          unint64_t v15 = (v29 - (_BYTE *)__p) >> 2;
          if (v15 <= v14 + 1) {
            unint64_t v15 = v14 + 1;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            uint64_t v17 = (char *)sub_1000071BC((uint64_t)&v29, v16);
          }
          else {
            uint64_t v17 = 0LL;
          }
          unint64_t v18 = (uint64_t *)&v17[8 * v14];
          *unint64_t v18 = v8;
          double v13 = (char *)(v18 + 1);
          double v20 = (char *)__p;
          double v19 = v28;
          if (v28 != __p)
          {
            do
            {
              uint64_t v21 = *((void *)v19 - 1);
              v19 -= 8;
              *--unint64_t v18 = v21;
            }

            while (v19 != v20);
            double v19 = (char *)__p;
          }

          __int128 __p = v18;
          double v28 = v13;
          double v29 = &v17[8 * v16];
          if (v19) {
            operator delete(v19);
          }
        }

        else
        {
          *(void *)double v28 = v8;
          double v13 = v12 + 8;
        }

        double v28 = v13;
        v8 += 120LL;
      }

      while (v8 != a1[1]);
    }

    uint64_t v22 = sub_10084C708((double *)v26, (uint64_t **)&__p, 0LL, a5, a2, a3, a4, (uint64_t)&v30);
    if (__p)
    {
      double v28 = (char *)__p;
      operator delete(__p);
    }
  }

  return v22;
}

void sub_10084C6E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10084C708( double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v14 = (*a1 + a1[2]) * 0.5;
  __int128 v15 = *((_OWORD *)a1 + 1);
  __int128 v49 = *(_OWORD *)a1;
  uint64_t v51 = *((void *)&v15 + 1);
  v47[1] = *((double *)&v49 + 1);
  __int128 v48 = v15;
  double v50 = v14;
  v47[0] = v14;
  double v44 = 0LL;
  double v45 = 0LL;
  uint64_t v46 = 0LL;
  double v41 = 0LL;
  double v42 = 0LL;
  uint64_t v43 = 0LL;
  __int128 __p = 0LL;
  double v39 = 0LL;
  uint64_t v40 = 0LL;
  sub_10084D01C((double *)&v49, v47, a2, &v44, &v41, &__p);
  unint64_t v16 = (uint64_t *)__p;
  if (__p == v39) {
    goto LABEL_37;
  }
  int64x2_t v52 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v53 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  uint64_t v17 = -(uint64_t)__p;
  do
  {
    sub_10084CE24((double *)v52.i64, (double *)(*v16++ + 32));
    v17 -= 8LL;
  }

  while (v16 != v39);
  v37[0] = v52;
  v37[1] = v53;
  unint64_t v18 = (uint64_t *)__p;
  if (a3 > 0x63 || (-v17 - (uint64_t)__p) >> 3 < a4)
  {
    if (v16 != __p)
    {
      while (1)
      {
        double v19 = v18++;
        double v20 = v18;
        if (v18 != v16) {
          break;
        }
LABEL_12:
        if (v18 == v16) {
          goto LABEL_13;
        }
      }

      while ((sub_10084CBD8(a5, *v19, *v20) & 1) != 0)
      {
        unint64_t v16 = v20 + 1;
        double v20 = v16;
        if (v16 == v39) {
          goto LABEL_12;
        }
      }

      goto LABEL_40;
    }
  }

  else
  {
    unint64_t v16 = v39;
  }

void sub_10084CB80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10084CBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = *(double *)(a2 + 32);
  double v7 = *(double *)(a2 + 48);
  if (v7 - v6 < 360.0)
  {
    double v8 = *(double *)(a3 + 32);
    double v9 = *(double *)(a3 + 48);
    double v10 = v9 - v8;
    if (v9 - v8 < 360.0)
    {
      double v11 = vabdd_f64(v8, v6);
      double v12 = 180.0;
      if (v11 != 180.0)
      {
        double v13 = v8 - v6;
        if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_23;
        }
        double v17 = fabs(v11 + -180.0);
        double v12 = 180.0;
        if (v11 < 180.0) {
          double v11 = 180.0;
        }
        double v18 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
        if (v17 > v18)
        {
LABEL_23:
          double v12 = 180.0;
          if (v13 <= 180.0)
          {
            if (v13 >= -180.0) {
              goto LABEL_5;
            }
            double v12 = fmod(v13 + -180.0, 360.0) + 180.0;
          }

          else
          {
            double v13 = fmod(v13 + 180.0, 360.0) + -180.0;
            if (v13 != -180.0)
            {
              BOOL v19 = ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
                 && (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
              if (v19 && *(void *)&v13 != 0LL) {
                goto LABEL_5;
              }
              double v12 = 180.0;
              double v21 = fabs(v13 + 180.0);
              double v22 = fabs(v13);
              if (v22 < 180.0) {
                double v22 = 180.0;
              }
              double v23 = v22 >= 1.0 ? v22 * 2.22044605e-16 : 2.22044605e-16;
              if (v21 > v23)
              {
LABEL_5:
                if (v13 < 0.0) {
                  double v13 = v13 + 360.0;
                }
                double v14 = v6 + v13;
                double v15 = v10 + v6 + v13 + -360.0;
                if (vabdd_f64(v15, v9) < 180.0) {
                  double v15 = v9;
                }
                if (v14 > v7 && v15 < v6) {
                  return 1LL;
                }
                goto LABEL_11;
              }
            }
          }
        }
      }

      double v13 = v12;
      goto LABEL_5;
    }
  }

void sub_10084CE24(double *a1, double *a2)
{
  double v3 = *a2;
  double v4 = a2[2];
  double v5 = a2[3];
  double v6 = 1.79769313e308;
  if (*a2 == 1.79769313e308 && a2[1] == 1.79769313e308 && v4 == -1.79769313e308 && v5 == -1.79769313e308)
  {
    double v12 = -1.79769313e308;
    double v13 = -1.79769313e308;
    double v14 = 1.79769313e308;
  }

  else
  {
    double v36 = a2[1];
    v37[0] = v3;
    double v34 = v5;
    double v35 = v4;
    double v10 = vabdd_f64(v3, v4);
    if (v10 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v3 - v4)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        BOOL v11 = 0;
      }

      else
      {
        double v15 = vabdd_f64(360.0, v10);
        double v16 = fmax(v10, 360.0);
        if (v16 >= 1.0) {
          double v17 = v16 * 2.22044605e-16;
        }
        else {
          double v17 = 2.22044605e-16;
        }
        BOOL v11 = v15 <= v17;
      }
    }

    else
    {
      BOOL v11 = 1;
    }

    sub_10084B23C(v37, &v36, &v35, &v34, v11);
    double v6 = v36;
    double v14 = v37[0];
    double v12 = v34;
    double v13 = v35;
  }

  v37[0] = v14;
  v37[1] = v6;
  _OWORD v37[2] = v13;
  v37[3] = v12;
  double v18 = *a1;
  double v19 = a1[2];
  double v20 = a1[3];
  double v21 = 1.79769313e308;
  if (*a1 == 1.79769313e308 && a1[1] == 1.79769313e308 && v19 == -1.79769313e308 && v20 == -1.79769313e308)
  {
    double v27 = -1.79769313e308;
    double v28 = -1.79769313e308;
    double v29 = 1.79769313e308;
  }

  else
  {
    double v35 = a1[1];
    double v36 = v18;
    double v33 = v20;
    double v34 = v19;
    double v25 = vabdd_f64(v18, v19);
    if (v25 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v18 - v19)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        BOOL v26 = 0;
      }

      else
      {
        double v30 = vabdd_f64(360.0, v25);
        double v31 = fmax(v25, 360.0);
        if (v31 >= 1.0) {
          double v32 = v31 * 2.22044605e-16;
        }
        else {
          double v32 = 2.22044605e-16;
        }
        BOOL v26 = v30 <= v32;
      }
    }

    else
    {
      BOOL v26 = 1;
    }

    sub_10084B23C(&v36, &v35, &v34, &v33, v26);
    double v21 = v35;
    double v29 = v36;
    double v27 = v33;
    double v28 = v34;
  }

  v37[4] = v29;
  v37[5] = v21;
  v37[6] = v28;
  v37[7] = v27;
  sub_10084ACE8((uint64_t)v37, a1);
}

void sub_10084D01C(double *a1, double *a2, uint64_t **a3, void **a4, void **a5, void **a6)
{
  double v6 = *a3;
  if (*a3 != a3[1])
  {
    uint64_t v82 = (uint64_t)(a6 + 2);
    uint64_t v83 = (uint64_t)(a5 + 2);
    uint64_t v84 = (uint64_t)(a4 + 2);
    while (1)
    {
      uint64_t v13 = *v6;
      double v14 = *a1;
      double v15 = a1[2];
      double v16 = *(double *)(*v6 + 32);
      double v17 = *(double *)(*v6 + 48);
      double v18 = v17 - v16;
      if (v15 - *a1 < 360.0 && v18 < 360.0) {
        break;
      }
LABEL_13:
      if (a1[3] >= *(double *)(v13 + 40))
      {
        BOOL v24 = a1[1] <= *(double *)(v13 + 56);
        goto LABEL_16;
      }

uint64_t sub_10084D640( double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v14 = a1[1];
  double v15 = a1[3];
  __int128 v51 = *(_OWORD *)a1;
  double v16 = (v14 + v15) * 0.5;
  uint64_t v52 = *((void *)a1 + 2);
  __int128 v17 = *((_OWORD *)a1 + 1);
  *(void *)&v49[0] = v51;
  __int128 v50 = v17;
  double v53 = v16;
  v49[1] = v16;
  double v46 = 0LL;
  double v47 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v43 = 0LL;
  double v44 = 0LL;
  uint64_t v45 = 0LL;
  __int128 __p = 0LL;
  double v41 = 0LL;
  uint64_t v42 = 0LL;
  sub_10084D01C((double *)&v51, v49, a2, &v46, &v43, &__p);
  double v18 = (uint64_t *)__p;
  if (__p == v41) {
    goto LABEL_37;
  }
  int64x2_t v54 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v55 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  uint64_t v19 = -(uint64_t)__p;
  do
  {
    sub_10084CE24((double *)v54.i64, (double *)(*v18++ + 32));
    v19 -= 8LL;
  }

  while (v18 != v41);
  v39[0] = v54;
  v39[1] = v55;
  double v20 = (uint64_t *)__p;
  if (a3 > 0x63 || (-v19 - (uint64_t)__p) >> 3 < a4)
  {
    if (v18 != __p)
    {
      while (1)
      {
        double v21 = v20++;
        double v22 = v20;
        if (v20 != v18) {
          break;
        }
LABEL_12:
        if (v20 == v18) {
          goto LABEL_13;
        }
      }

      while ((sub_10084CBD8(a5, *v21, *v22) & 1) != 0)
      {
        double v18 = v22 + 1;
        double v22 = v18;
        if (v18 == v41) {
          goto LABEL_12;
        }
      }

      goto LABEL_40;
    }
  }

  else
  {
    double v18 = v41;
  }

void sub_10084DAC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10084DB1C( double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v17 = (*a1 + a1[2]) * 0.5;
  __int128 v18 = *((_OWORD *)a1 + 1);
  __int128 v77 = *(_OWORD *)a1;
  uint64_t v79 = *((void *)&v18 + 1);
  v75[1] = *((double *)&v77 + 1);
  __int128 v76 = v18;
  double v78 = v17;
  v75[0] = v17;
  unint64_t v72 = 0LL;
  double v73 = 0LL;
  uint64_t v74 = 0LL;
  uint64_t v69 = 0LL;
  uint64_t v70 = 0LL;
  uint64_t v71 = 0LL;
  uint64_t v66 = 0LL;
  unint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  uint64_t v65 = 0LL;
  int64x2_t v60 = 0LL;
  unint64_t v61 = 0LL;
  uint64_t v62 = 0LL;
  __int128 __p = 0LL;
  int64x2_t v58 = 0LL;
  uint64_t v59 = 0LL;
  sub_10084D01C((double *)&v77, v75, a2, &v72, &v69, &v66);
  sub_10084D01C((double *)&v77, v75, a3, &v63, &v60, &__p);
  double v20 = (uint64_t *)v66;
  uint64_t v19 = v67;
  if (v66 != v67)
  {
    double v21 = v58;
    if (a5 > ((char *)v67 - (_BYTE *)v66) >> 3 || a4 > 0x63 || ((char *)v58 - (_BYTE *)__p) >> 3 < a5)
    {
      if (__p != v58)
      {
        while (1)
        {
          double v22 = (uint64_t *)__p;
          if (__p != v21) {
            break;
          }
LABEL_8:
          if (++v20 == v19) {
            goto LABEL_18;
          }
        }

        while ((sub_10084CBD8(a6, *v20, *v22) & 1) != 0)
        {
          if (++v22 == v58)
          {
            uint64_t v19 = v67;
            double v21 = v22;
            goto LABEL_8;
          }
        }

        goto LABEL_95;
      }
    }

    else
    {
      int64x2_t v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_10084CE24((double *)v80.i64, (double *)(*v20++ + 32));
      while (v20 != v67);
      uint64_t v24 = v80.i64[1];
      uint64_t v23 = v80.i64[0];
      uint64_t v26 = v81.i64[1];
      uint64_t v25 = v81.i64[0];
      double v27 = (uint64_t *)__p;
      if (__p != v58)
      {
        do
          sub_10084CE24((double *)v80.i64, (double *)(*v27++ + 32));
        while (v27 != v58);
        uint64_t v24 = v80.i64[1];
        uint64_t v23 = v80.i64[0];
        uint64_t v26 = v81.i64[1];
        uint64_t v25 = v81.i64[0];
      }

      v55.i64[0] = v23;
      v55.i64[1] = v24;
      v56.i64[0] = v25;
      v56.i64[1] = v26;
    }

void sub_10084E254( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10084E2F8( double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v17 = *(_OWORD *)a1;
  double v18 = (a1[1] + a1[3]) * 0.5;
  uint64_t v79 = *((void *)a1 + 2);
  __int128 v19 = *((_OWORD *)a1 + 1);
  *(void *)&v76[0] = v17;
  __int128 v77 = v19;
  __int128 v78 = v17;
  double v80 = v18;
  v76[1] = v18;
  double v73 = 0LL;
  uint64_t v74 = 0LL;
  uint64_t v75 = 0LL;
  uint64_t v70 = 0LL;
  uint64_t v71 = 0LL;
  uint64_t v72 = 0LL;
  unint64_t v67 = 0LL;
  uint64_t v68 = 0LL;
  uint64_t v69 = 0LL;
  uint64_t v64 = 0LL;
  uint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  unint64_t v61 = 0LL;
  uint64_t v62 = 0LL;
  uint64_t v63 = 0LL;
  __int128 __p = 0LL;
  uint64_t v59 = 0LL;
  uint64_t v60 = 0LL;
  sub_10084D01C((double *)&v78, v76, a2, &v73, &v70, &v67);
  sub_10084D01C((double *)&v78, v76, a3, &v64, &v61, &__p);
  double v21 = (uint64_t *)v67;
  double v20 = v68;
  if (v67 != v68)
  {
    double v22 = v59;
    if (a5 > ((char *)v68 - (_BYTE *)v67) >> 3 || a4 > 0x63 || ((char *)v59 - (_BYTE *)__p) >> 3 < a5)
    {
      if (__p != v59)
      {
        while (1)
        {
          uint64_t v23 = (uint64_t *)__p;
          if (__p != v22) {
            break;
          }
LABEL_8:
          if (++v21 == v20) {
            goto LABEL_18;
          }
        }

        while ((sub_10084CBD8(a6, *v21, *v23) & 1) != 0)
        {
          if (++v23 == v59)
          {
            double v20 = v68;
            double v22 = v23;
            goto LABEL_8;
          }
        }

        goto LABEL_95;
      }
    }

    else
    {
      int64x2_t v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_10084CE24((double *)v81.i64, (double *)(*v21++ + 32));
      while (v21 != v68);
      uint64_t v25 = v81.i64[1];
      uint64_t v24 = v81.i64[0];
      uint64_t v27 = v82.i64[1];
      uint64_t v26 = v82.i64[0];
      double v28 = (uint64_t *)__p;
      if (__p != v59)
      {
        do
          sub_10084CE24((double *)v81.i64, (double *)(*v28++ + 32));
        while (v28 != v59);
        uint64_t v25 = v81.i64[1];
        uint64_t v24 = v81.i64[0];
        uint64_t v27 = v82.i64[1];
        uint64_t v26 = v82.i64[0];
      }

      v56.i64[0] = v24;
      v56.i64[1] = v25;
      v57.i64[0] = v26;
      v57.i64[1] = v27;
      if ((sub_10084DB1C(&v56, &v67, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
        goto LABEL_95;
      }
    }

void sub_10084EA3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10084EAE0( uint64_t a1, void *a2, uint64_t a3, int a4, __int128 **a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, _BYTE *a12)
{
  double v12 = (void *)a6;
  int v13 = a4;
  uint64_t v14 = a3;
  int v88 = a1;
  if ((!*(_BYTE *)(a3 + 96) || (unint64_t)(*(void *)(a3 + 80) + 1LL) >= *(void *)(a3 + 88))
    && (!*(_BYTE *)(a6 + 96) || (unint64_t)(*(void *)(a6 + 80) + 1LL) >= *(void *)(a6 + 88)))
  {
    unint64_t v15 = *(void *)(a3 + 24);
    if ((v15 & 0x8000000000000000LL) == 0)
    {
      uint64_t v16 = a2[3];
      if (0xAAAAAAAAAAAAAAABLL * ((a2[4] - v16) >> 3) < v15) {
        sub_10124CD48(a1, (uint64_t)a2, a3);
      }
      a2 = (void *)(v16 + 24 * v15);
    }

    __int128 v17 = (_OWORD *)*a2;
    unint64_t v18 = *(void *)(a6 + 24);
    int64x2_t v81 = (_OWORD *)a2[1];
    if ((v18 & 0x8000000000000000LL) == 0)
    {
      __int128 v19 = a5[3];
      a5 = (__int128 **)v19 + 3 * v18;
    }

    int64x2_t v89 = *a5;
    double v86 = a5[1];
    double v20 = (double *)(a6 + 32);
    int v90 = *(_DWORD *)a6;
    int v21 = *(_DWORD *)a3;
    uint64_t v22 = *(void *)(a3 + 104);
    uint64_t v23 = *(void *)(a3 + 64);
    uint64_t v24 = *(void *)(a3 + 72);
    uint64_t v25 = &v17[v23];
    double v80 = (_OWORD *)*a2;
    if (v23 != v24)
    {
      uint64_t v27 = (double *)(a3 + 32);
      uint64_t v28 = 16 * v24 - 16 * v23;
      double v29 = v25;
      while (1)
      {
        __int128 v30 = v29[1];
        ++v29;
        __int128 v92 = v30;
        ++v23;
        ++v22;
        uint64_t v25 = v29;
        v28 -= 16LL;
        if (!v28) {
          return 1LL;
        }
      }

      double v12 = (void *)a6;
      int v13 = a4;
      uint64_t v14 = a3;
      __int128 v17 = v80;
    }

    __int128 v77 = &v17[v24];
    if (v25 != v77)
    {
      uint64_t v31 = &v17[v25 != v17];
      unint64_t v32 = v81;
      double v85 = v25 + 1;
      if (v25 + 1 != v81) {
        uint64_t v31 = v25 + 1;
      }
      double v33 = v31 + 1;
      int64x2_t v34 = &v17[v31 != v17];
      if (v33 != v81) {
        int64x2_t v34 = v33;
      }
      uint64_t v84 = v34;
      int64x2_t v35 = (double *)(v14 + 32);
      int v36 = -v21;
      uint64_t v78 = v13;
      uint64_t v79 = v12;
      int64x2_t v91 = (double *)(v14 + 32);
      int v73 = -v21;
      while (1)
      {
        __int128 v92 = *v25;
        v108[0] = v14;
        v108[1] = v23;
        v108[2] = v25;
        v108[3] = v85;
        v108[4] = v84;
        v108[5] = v17;
        v108[6] = v32;
        char v109 = 1;
        char v110 = 0;
        uint64_t v38 = v12[8];
        uint64_t v37 = v12[9];
        double v39 = &v89[v38];
        uint64_t v40 = v12[13];
        if (v38 != v37)
        {
          uint64_t v67 = 16 * v37 - 16 * v38;
          uint64_t v68 = &v89[v38];
          while (1)
          {
            __int128 v69 = v68[1];
            ++v68;
            __int128 v92 = v69;
            ++v38;
            ++v40;
            double v39 = v68;
            v67 -= 16LL;
            if (!v67) {
              goto LABEL_78;
            }
          }
        }

        __int128 v76 = &v89[v37];
        if (v39 != v76) {
          break;
        }
LABEL_78:
        ++v22;
        double v12 = v79;
LABEL_79:
        ++v25;
        uint64_t v70 = v85;
        ++v23;
        uint64_t v71 = v84 + 1;
        __int128 v17 = v80;
        unint64_t v32 = v81;
        if (v84 + 1 == v81) {
          uint64_t v71 = &v80[v84 != v80];
        }
        uint64_t v84 = v71;
        ++v85;
        uint64_t result = 1LL;
        uint64_t v14 = a3;
        int64x2_t v35 = v91;
        int v36 = v73;
        if (v70 == v77) {
          return result;
        }
      }

      double v41 = &v89[v39 != v89];
      uint64_t v42 = v39 + 1;
      if (v39 + 1 != v86) {
        double v41 = v39 + 1;
      }
      uint64_t v43 = v41 + 1;
      double v44 = &v89[v41 != v89];
      if (v43 != v86) {
        double v44 = v43;
      }
      uint64_t v83 = v44;
      ++v22;
      double v12 = v79;
      while (1)
      {
        __int128 v92 = *v39;
        *(void *)&__int128 v45 = -1LL;
        *((void *)&v45 + 1) = -1LL;
        if (v88 == a4 && *(void *)(a3 + 16) == v79[2] && *(void *)(a3 + 24) == v79[3])
        {
          if (a7)
          {
            if (v23 >= v38 || (a8 & 1) == 0)
            {
              if (v23 >= v38) {
                goto LABEL_70;
              }
              goto LABEL_44;
            }

void *sub_10084F158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  double v6 = a6;
  unint64_t v48 = a6;
  v32[0] = a1;
  v32[1] = a2;
  v33[1] = a1;
  v33[2] = a2;
  v34[1] = a2;
  void v34[2] = a1;
  sub_100850D28(a1, a2, (uint64_t)&v35);
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  if (v41 == 100) {
    return v6;
  }
  __int128 v15 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)__int128 v30 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)&v30[16] = v15;
  uint64_t v31 = *(void *)(a3 + 192);
  __int128 v16 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)&v26[16] = *(_OWORD *)(a3 + 96);
  __int128 v27 = v16;
  __int128 v17 = *(_OWORD *)(a3 + 144);
  __int128 v28 = *(_OWORD *)(a3 + 128);
  __int128 v29 = v17;
  __int128 v18 = *(_OWORD *)(a3 + 48);
  v25[0] = *(_OWORD *)(a3 + 32);
  v25[1] = v18;
  __int128 v19 = *(_OWORD *)(a3 + 80);
  v25[2] = *(_OWORD *)(a3 + 64);
  *(_OWORD *)uint64_t v26 = v19;
  __int128 v20 = *(_OWORD *)(a3 + 16);
  __int128 v23 = *(_OWORD *)a3;
  __int128 v24 = v20;
  if (v41 > 0x6Cu)
  {
    if (v41 == 116)
    {
      sub_1008500AC(a1, a2, (uint64_t)&v23, (__int128 *)&v35, (uint64_t)&v41, (uint64_t)v33);
LABEL_21:
      sub_1008549B8(v6, (uint64_t)&v23);
      return v6;
    }

    if (v41 == 109)
    {
      if (v45 == 1) {
        sub_10084FA5C(a1, a2, (uint64_t)&v23, (__int128 *)&v35, (uint64_t)&v41, (uint64_t)v33);
      }
      else {
        sub_10084FD84(a2, a1, (uint64_t)&v23, (__int128 *)&v35, (uint64_t)&v41, (uint64_t)v34);
      }
      goto LABEL_21;
    }
  }

  else
  {
    if (v41 == 99)
    {
      if (!v42)
      {
        if (v44)
        {
          sub_10085059C(a1, a2, (uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v41, (uint64_t)v33);
        }

        else
        {
          sub_100850A90(a1, a2, (uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v41, (uint64_t)v33);
          LODWORD(v24) = 5;
        }

        goto LABEL_21;
      }

      sub_100850880(a1, a2, &v23, &v48, (uint64_t)v32, (uint64_t)v33);
      return v48;
    }

    if (v41 == 105)
    {
      LODWORD(v24) = 2;
      if (!v35) {
        sub_10124CD6C(v12, v13, v14);
      }
      __int128 v23 = v36;
      *(_OWORD *)&double v26[8] = v37;
      *(void *)&v26[24] = v38;
      *(_OWORD *)&v30[8] = v39;
      *(void *)&v30[24] = v40;
      BOOL v21 = v43 == 1;
      DWORD2(v25[5 * (v43 != 1)]) = 1;
      DWORD2(v25[5 * v21]) = 2;
      goto LABEL_21;
    }
  }

  if (v41 == 101 && !v42)
  {
    sub_100850A90(a1, a2, (uint64_t)&v23, (uint64_t)&v35, (uint64_t)&v41, (uint64_t)v33);
    goto LABEL_21;
  }

  return v6;
}

BOOL sub_10084F3DC(int a1, double *a2, double *a3, double *a4)
{
  BOOL result = 0LL;
  double v6 = *a2;
  double v7 = *a4;
  double v8 = a4[2];
  BOOL v9 = *a2 > v8 || v6 < v7;
  if (v9 && v8 - v7 < 360.0)
  {
    double v11 = v6 - v7;
    double v12 = vabdd_f64(v6, v7);
    double v13 = 180.0;
    if (v12 != 180.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v6 - v7)) > 0x7FEFFFFFFFFFFFFFLL
        || ((v21 = fabs(v12 + -180.0), double v13 = 180.0, v12 >= 180.0) ? (v22 = v12) : (v22 = 180.0),
            v22 >= 1.0 ? (double v23 = v22 * 2.22044605e-16) : (double v23 = 2.22044605e-16),
            v21 > v23))
      {
        double v13 = 180.0;
        if (v11 <= 180.0)
        {
          double v14 = v6 - v7;
          if (v11 >= -180.0) {
            goto LABEL_9;
          }
          double v13 = fmod(v11 + -180.0, 360.0) + 180.0;
        }

        else
        {
          double v14 = fmod(v11 + 180.0, 360.0) + -180.0;
          if (v14 != -180.0)
          {
            BOOL v24 = ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
               && (*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (v24 && *(void *)&v14 != 0LL) {
              goto LABEL_9;
            }
            double v13 = 180.0;
            double v26 = fabs(v14 + 180.0);
            double v27 = fabs(v14);
            if (v27 < 180.0) {
              double v27 = 180.0;
            }
            double v28 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
            if (v26 > v28)
            {
LABEL_9:
              if (v14 < 0.0) {
                double v14 = v14 + 360.0;
              }
              if (v7 + v14 <= v8) {
                return 0LL;
              }
              if (a1 != -1)
              {
                if (a1 == 1)
                {
                  double v15 = 180.0;
                  if (v12 != 180.0)
                  {
                    if (COERCE_UNSIGNED_INT64(fabs(v6 - v7)) > 0x7FEFFFFFFFFFFFFFLL
                      || ((v36 = fabs(v12 + -180.0), double v15 = 180.0, v12 >= 180.0) ? (v37 = v12) : (v37 = 180.0),
                          v37 >= 1.0 ? (double v38 = v37 * 2.22044605e-16) : (double v38 = 2.22044605e-16),
                          v36 > v38))
                    {
                      double v15 = 180.0;
                      if (v11 <= 180.0)
                      {
                        if (v11 >= -180.0) {
                          goto LABEL_16;
                        }
                        double v15 = fmod(v11 + -180.0, 360.0) + 180.0;
                      }

                      else
                      {
                        double v39 = fmod(v11 + 180.0, 360.0);
                        double v11 = v39 + -180.0;
                        if (v39 + -180.0 != -180.0)
                        {
                          unint64_t v40 = COERCE__INT64(fabs(v39 + -180.0)) - 1;
                          BOOL v41 = (unint64_t)(COERCE__INT64(fabs(v39 + -180.0)) - 0x10000000000000LL) >> 53 > 0x3FE
                             && v40 > 0xFFFFFFFFFFFFELL;
                          if (v41 && *(void *)&v11 != 0LL) {
                            goto LABEL_16;
                          }
                          double v15 = 180.0;
                          double v43 = fabs(v11 + 180.0);
                          double v44 = fabs(v11);
                          if (v44 < 180.0) {
                            double v44 = 180.0;
                          }
                          double v45 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
                          if (v43 > v45)
                          {
LABEL_16:
                            double v16 = vabdd_f64(*a3, v7);
                            double v17 = 180.0;
                            if (v16 != 180.0)
                            {
                              double v18 = *a3 - v7;
                              if (COERCE_UNSIGNED_INT64(fabs(v18)) > 0x7FEFFFFFFFFFFFFFLL) {
                                goto LABEL_92;
                              }
                              double v46 = fabs(v16 + -180.0);
                              double v17 = 180.0;
                              if (v16 < 180.0) {
                                double v16 = 180.0;
                              }
                              double v47 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
                              if (v46 > v47)
                              {
LABEL_92:
                                double v17 = 180.0;
                                if (v18 <= 180.0)
                                {
                                  if (v18 >= -180.0) {
                                    goto LABEL_18;
                                  }
                                  double v17 = fmod(v18 + -180.0, 360.0) + 180.0;
                                }

                                else
                                {
                                  double v18 = fmod(v18 + 180.0, 360.0) + -180.0;
                                  if (v18 != -180.0)
                                  {
                                    BOOL v48 = ((*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
                                       && (*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
                                    if (v48 && *(void *)&v18 != 0LL) {
                                      goto LABEL_18;
                                    }
                                    double v17 = 180.0;
                                    double v50 = fabs(v18 + 180.0);
                                    double v51 = fabs(v18);
                                    if (v51 < 180.0) {
                                      double v51 = 180.0;
                                    }
                                    double v52 = v51 >= 1.0 ? v51 * 2.22044605e-16 : 2.22044605e-16;
                                    if (v50 > v52) {
                                      goto LABEL_18;
                                    }
                                  }
                                }
                              }
                            }

                            double v18 = v17;
LABEL_18:
                            BOOL v19 = v11 < 0.0;
                            if (v18 > 0.0) {
                              BOOL v19 = 0;
                            }
                            BOOL v20 = v18 > v11;
                            return !v20 && v19;
                          }
                        }
                      }
                    }
                  }

                  double v11 = v15;
                  goto LABEL_16;
                }

                return 0LL;
              }

              double v29 = vabdd_f64(v6, v8);
              double v30 = 180.0;
              if (v29 != 180.0)
              {
                double v31 = v6 - v8;
                if (COERCE__INT64(fabs(v6 - v8)) > 0x7FEFFFFFFFFFFFFFLL) {
                  goto LABEL_116;
                }
                double v53 = fabs(v29 + -180.0);
                double v30 = 180.0;
                if (v29 < 180.0) {
                  double v29 = 180.0;
                }
                double v54 = v29 >= 1.0 ? v29 * 2.22044605e-16 : 2.22044605e-16;
                if (v53 > v54)
                {
LABEL_116:
                  double v30 = 180.0;
                  if (v31 <= 180.0)
                  {
                    if (v31 >= -180.0) {
                      goto LABEL_49;
                    }
                    double v30 = fmod(v31 + -180.0, 360.0) + 180.0;
                  }

                  else
                  {
                    double v55 = fmod(v31 + 180.0, 360.0);
                    double v31 = v55 + -180.0;
                    if (v55 + -180.0 != -180.0)
                    {
                      unint64_t v56 = COERCE__INT64(fabs(v55 + -180.0)) - 1;
                      BOOL v57 = (unint64_t)(COERCE__INT64(fabs(v55 + -180.0)) - 0x10000000000000LL) >> 53 > 0x3FE
                         && v56 > 0xFFFFFFFFFFFFELL;
                      if (v57 && *(void *)&v31 != 0LL) {
                        goto LABEL_49;
                      }
                      double v30 = 180.0;
                      double v59 = fabs(v31 + 180.0);
                      double v60 = fabs(v31);
                      if (v60 < 180.0) {
                        double v60 = 180.0;
                      }
                      double v61 = v60 >= 1.0 ? v60 * 2.22044605e-16 : 2.22044605e-16;
                      if (v59 > v61)
                      {
LABEL_49:
                        double v32 = a3[2];
                        double v33 = vabdd_f64(v32, v8);
                        double v34 = 180.0;
                        if (v33 != 180.0)
                        {
                          double v35 = v32 - v8;
                          if ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                            goto LABEL_140;
                          }
                          double v62 = fabs(v33 + -180.0);
                          double v34 = 180.0;
                          if (v33 < 180.0) {
                            double v33 = 180.0;
                          }
                          double v63 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
                          if (v62 > v63)
                          {
LABEL_140:
                            double v34 = 180.0;
                            if (v35 <= 180.0)
                            {
                              if (v35 >= -180.0) {
                                goto LABEL_51;
                              }
                              double v34 = fmod(v35 + -180.0, 360.0) + 180.0;
                            }

                            else
                            {
                              double v35 = fmod(v35 + 180.0, 360.0) + -180.0;
                              if (v35 != -180.0)
                              {
                                BOOL v64 = ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
                                   && (*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
                                if (v64 && *(void *)&v35 != 0LL) {
                                  goto LABEL_51;
                                }
                                double v34 = 180.0;
                                double v66 = fabs(v35 + 180.0);
                                double v67 = fabs(v35);
                                if (v67 < 180.0) {
                                  double v67 = 180.0;
                                }
                                double v68 = v67 >= 1.0 ? v67 * 2.22044605e-16 : 2.22044605e-16;
                                if (v66 > v68) {
                                  goto LABEL_51;
                                }
                              }
                            }
                          }
                        }

                        double v35 = v34;
LABEL_51:
                        BOOL v19 = v31 > 0.0;
                        if (v35 < 0.0) {
                          BOOL v19 = 0;
                        }
                        BOOL v20 = v31 > v35;
                        return !v20 && v19;
                      }
                    }
                  }
                }
              }

              double v31 = v30;
              goto LABEL_49;
            }
          }
        }
      }
    }

    double v14 = v13;
    goto LABEL_9;
  }

  return result;
}

uint64_t sub_10084FA5C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = 0LL;
  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(__int128 *)((char *)a4 + 8);
  uint64_t v9 = a3 + 40;
  char v10 = 1;
  __asm { FMOV            V1.2D, #1.0 }

  do
  {
    char v15 = v10;
    int v16 = *(_DWORD *)(a5 + 4 * v8 + 36);
    if (v16 == -1)
    {
      uint64_t v18 = v9 + 80 * v8;
      *(_OWORD *)(v18 + 48) = xmmword_1013394A0;
      *(void *)(v18 + 64) = 0LL;
    }

    else if (v16 == 1)
    {
      uint64_t v17 = v9 + 80 * v8;
      *(_OWORD *)(v17 + 48) = _Q1;
      *(void *)(v17 + 64) = 0x412E848000000000LL;
    }

    else
    {
      if ((v15 & 1) != 0) {
        BOOL v19 = (__int128 *)((char *)a4 + 40);
      }
      else {
        BOOL v19 = a4 + 4;
      }
      __int128 v20 = *v19;
      uint64_t v21 = v9 + 80 * v8;
      *(void *)(v21 + 64) = *((void *)v19 + 2);
      *(_OWORD *)(v21 + 48) = v20;
    }

    char v10 = 0;
    uint64_t v8 = 1LL;
  }

  while ((v15 & 1) != 0);
  int v22 = *(_DWORD *)(a5 + 28);
  uint64_t v23 = *(void *)(a6 + 8);
  uint64_t v24 = *(void *)(a6 + 16);
  double v26 = *(double **)(v23 + 16);
  uint64_t v25 = *(double **)(v23 + 24);
  if (!*(_BYTE *)(v24 + 80))
  {
    sub_100853948(*(void *)(a6 + 16), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(void *)(v24 + 32);
    *(_BYTE *)(v24 + 80) = 1;
  }

  uint64_t result = sub_100845638(v26, v25, (double *)(v24 + 64));
  int v28 = result;
  if (v22 + (_DWORD)result)
  {
    uint64_t v29 = *(void *)(a6 + 16);
    double v30 = *(double **)(v29 + 16);
    double v31 = *(double **)(v29 + 24);
    if (!*(_BYTE *)(v29 + 80))
    {
      sub_100853948(*(void *)(a6 + 16), *(double **)(v29 + 24), v29 + 32);
      *(_OWORD *)(v29 + 64) = *(_OWORD *)*(void *)(v29 + 32);
      *(_BYTE *)(v29 + 80) = 1;
    }

    int v32 = sub_100845638(v30, v31, (double *)(v29 + 64));
    uint64_t v33 = *(void *)(a6 + 16);
    double v34 = *(double **)(v33 + 24);
    if (!*(_BYTE *)(v33 + 80))
    {
      sub_100853948(*(void *)(a6 + 16), *(double **)(v33 + 24), v33 + 32);
      *(_OWORD *)(v33 + 64) = *(_OWORD *)*(void *)(v33 + 32);
      *(_BYTE *)(v33 + 80) = 1;
    }

    uint64_t result = sub_100845638(v34, (double *)(v33 + 64), *(double **)(*(void *)(a6 + 8) + 24LL));
    if ((v28 & v22) == 0xFFFFFFFF && v32 == 1)
    {
      *(_DWORD *)(a3 + 40) = 2;
      *(_DWORD *)(a3 + 120) = 2;
      *(_BYTE *)(a3 + 20) = 1;
    }

    else
    {
      int v36 = result;
      if (v22 == 1 && v28 == 1 && v32 == -1)
      {
        *(_DWORD *)(a3 + 40) = 1;
        if ((_DWORD)result == -1) {
          int v37 = 1;
        }
        else {
          int v37 = 3;
        }
        *(_DWORD *)(a3 + 120) = v37;
        *(_BYTE *)(a3 + 20) = 1;
      }

      else if (v22 == v28 && v22 == v32)
      {
        unsigned int v38 = (v32 == 1) ^ ((_DWORD)result == 0);
        if ((_DWORD)result * v22 == -1)
        {
          int v39 = sub_100845638( *(double **)(*(void *)(a6 + 8) + 16LL),  *(double **)(*(void *)(a6 + 8) + 24LL),  *(double **)(*(void *)(a6 + 16) + 24LL));
          uint64_t result = sub_100854950(a6);
          if ((_DWORD)result * v39 == 1)
          {
            uint64_t result = sub_100845638( *(double **)(*(void *)(a6 + 16) + 16LL),  *(double **)(*(void *)(a6 + 16) + 24LL),  *(double **)(*(void *)(a6 + 8) + 24LL));
            if ((_DWORD)result * v36 == -1) {
              v38 ^= 1u;
            }
          }
        }

        *(_DWORD *)(v9 + 80LL * v38) = 1;
        *(_DWORD *)(v9 + 80LL * (v38 ^ 1)) = 2;
        *(_BYTE *)(a3 + 20) = 1;
      }

      else if (v28)
      {
        *(_DWORD *)(a3 + 16) = 8;
      }

      else
      {
        if (v22 == v32)
        {
          int v40 = 4;
          *(_DWORD *)(a3 + 40) = 4;
        }

        else
        {
          if (v32 == 1) {
            int v41 = 2;
          }
          else {
            int v41 = 1;
          }
          *(_DWORD *)(a3 + 40) = v41;
          int v40 = 3;
        }

        *(_DWORD *)(a3 + 120) = v40;
      }
    }
  }

  else
  {
    *(_DWORD *)(v9 + 80LL * ((_DWORD)result != -1)) = 1;
    *(_DWORD *)(v9 + 80LL * ((_DWORD)result == -1)) = 2;
  }

  return result;
}

uint64_t sub_10084FD84(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = 0LL;
  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(__int128 *)((char *)a4 + 8);
  uint64_t v9 = a3 + 40;
  char v10 = 1;
  __asm { FMOV            V1.2D, #1.0 }

  do
  {
    char v15 = v10;
    int v16 = *(_DWORD *)(a5 + 4 * v8 + 36);
    if (v16 == -1)
    {
      uint64_t v18 = v9 + 80 * v8;
      *(_OWORD *)(v18 + 48) = xmmword_1013394A0;
      *(void *)(v18 + 64) = 0LL;
    }

    else if (v16 == 1)
    {
      uint64_t v17 = v9 + 80 * v8;
      *(_OWORD *)(v17 + 48) = _Q1;
      *(void *)(v17 + 64) = 0x412E848000000000LL;
    }

    else
    {
      if ((v15 & 1) != 0) {
        BOOL v19 = (__int128 *)((char *)a4 + 40);
      }
      else {
        BOOL v19 = a4 + 4;
      }
      __int128 v20 = *v19;
      uint64_t v21 = v9 + 80 * v8;
      *(void *)(v21 + 64) = *((void *)v19 + 2);
      *(_OWORD *)(v21 + 48) = v20;
    }

    char v10 = 0;
    uint64_t v8 = 1LL;
  }

  while ((v15 & 1) != 0);
  int v22 = *(_DWORD *)(a5 + 20);
  uint64_t v23 = *(void *)(a6 + 8);
  uint64_t v24 = *(void *)(a6 + 16);
  double v26 = *(double **)(v23 + 16);
  uint64_t v25 = *(double **)(v23 + 24);
  if (!*(_BYTE *)(v24 + 80))
  {
    sub_100853948(*(void *)(a6 + 16), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(void *)(v24 + 32);
    *(_BYTE *)(v24 + 80) = 1;
  }

  uint64_t result = sub_100845638(v26, v25, (double *)(v24 + 64));
  int v28 = result;
  if (!(v22 + (_DWORD)result))
  {
    *(_DWORD *)(v9 + 80LL * ((_DWORD)result == -1)) = 1;
    *(_DWORD *)(v9 + 80LL * ((_DWORD)result != -1)) = 2;
    return result;
  }

  uint64_t v29 = *(void *)(a6 + 16);
  double v30 = *(double **)(v29 + 16);
  double v31 = *(double **)(v29 + 24);
  if (!*(_BYTE *)(v29 + 80))
  {
    sub_100853948(*(void *)(a6 + 16), *(double **)(v29 + 24), v29 + 32);
    *(_OWORD *)(v29 + 64) = *(_OWORD *)*(void *)(v29 + 32);
    *(_BYTE *)(v29 + 80) = 1;
  }

  int v32 = sub_100845638(v30, v31, (double *)(v29 + 64));
  uint64_t v33 = *(void *)(a6 + 16);
  double v34 = *(double **)(v33 + 24);
  if (!*(_BYTE *)(v33 + 80))
  {
    sub_100853948(*(void *)(a6 + 16), *(double **)(v33 + 24), v33 + 32);
    *(_OWORD *)(v33 + 64) = *(_OWORD *)*(void *)(v33 + 32);
    *(_BYTE *)(v33 + 80) = 1;
  }

  uint64_t result = sub_100845638(v34, (double *)(v33 + 64), *(double **)(*(void *)(a6 + 8) + 24LL));
  if ((v28 & v22) == 0xFFFFFFFF && v32 == 1)
  {
    *(_DWORD *)(a3 + 40) = 2;
    *(_DWORD *)(a3 + 120) = 2;
LABEL_31:
    *(_BYTE *)(a3 + 20) = 1;
    return result;
  }

  int v36 = result;
  if (v22 == 1 && v28 == 1 && v32 == -1)
  {
    if ((_DWORD)result == -1) {
      int v37 = 1;
    }
    else {
      int v37 = 3;
    }
    *(_DWORD *)(a3 + 40) = v37;
    *(_DWORD *)(a3 + 120) = 1;
    goto LABEL_31;
  }

  if (v22 == v28 && v22 == v32)
  {
    unsigned int v38 = (v32 == 1) ^ ((_DWORD)result != 0);
    if ((_DWORD)result * v22 == -1)
    {
      int v39 = sub_100845638( *(double **)(*(void *)(a6 + 8) + 16LL),  *(double **)(*(void *)(a6 + 8) + 24LL),  *(double **)(*(void *)(a6 + 16) + 24LL));
      uint64_t result = sub_100854950(a6);
      if ((_DWORD)result * v39 == 1)
      {
        uint64_t result = sub_100845638( *(double **)(*(void *)(a6 + 16) + 16LL),  *(double **)(*(void *)(a6 + 16) + 24LL),  *(double **)(*(void *)(a6 + 8) + 24LL));
        if ((_DWORD)result * v36 == -1) {
          v38 ^= 1u;
        }
      }
    }

    *(_DWORD *)(v9 + 80LL * v38) = 1;
    *(_DWORD *)(v9 + 80LL * (v38 ^ 1)) = 2;
    *(_BYTE *)(a3 + 20) = 1;
  }

  else if (v28)
  {
    *(_DWORD *)(a3 + 16) = 8;
  }

  else if (v22 == v32)
  {
    *(_DWORD *)(a3 + 40) = 4;
    *(_DWORD *)(a3 + 120) = 4;
  }

  else
  {
    if (v32 == 1) {
      int v40 = 2;
    }
    else {
      int v40 = 1;
    }
    *(_DWORD *)(a3 + 120) = v40;
    *(_DWORD *)(a3 + 40) = 3;
  }

  return result;
}

uint64_t sub_1008500AC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0LL;
  *(_DWORD *)(a3 + 16) = 3;
  *(_OWORD *)a3 = *(__int128 *)((char *)a4 + 8);
  uint64_t v10 = a3 + 40;
  char v11 = 1;
  __asm { FMOV            V1.2D, #1.0 }

  do
  {
    char v16 = v11;
    int v17 = *(_DWORD *)(a5 + 4 * v9 + 36);
    if (v17 == -1)
    {
      uint64_t v19 = v10 + 80 * v9;
      *(_OWORD *)(v19 + 48) = xmmword_1013394A0;
      *(void *)(v19 + 64) = 0LL;
    }

    else if (v17 == 1)
    {
      uint64_t v18 = v10 + 80 * v9;
      *(_OWORD *)(v18 + 48) = _Q1;
      *(void *)(v18 + 64) = 0x412E848000000000LL;
    }

    else
    {
      if ((v16 & 1) != 0) {
        __int128 v20 = (__int128 *)((char *)a4 + 40);
      }
      else {
        __int128 v20 = a4 + 4;
      }
      __int128 v21 = *v20;
      uint64_t v22 = v10 + 80 * v9;
      *(void *)(v22 + 64) = *((void *)v20 + 2);
      *(_OWORD *)(v22 + 48) = v21;
    }

    char v11 = 0;
    uint64_t v9 = 1LL;
  }

  while ((v16 & 1) != 0);
  uint64_t v24 = *(void *)(a6 + 8);
  uint64_t v23 = *(void *)(a6 + 16);
  double v26 = *(double **)(v23 + 16);
  uint64_t v25 = *(double **)(v23 + 24);
  if (!*(_BYTE *)(v24 + 80))
  {
    sub_100853948(*(void *)(a6 + 8), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(void *)(v24 + 32);
    *(_BYTE *)(v24 + 80) = 1;
  }

  int v27 = sub_100845638(v26, v25, (double *)(v24 + 64));
  int v28 = *(_DWORD *)(a5 + 28);
  uint64_t v29 = *(void *)(a6 + 8);
  uint64_t v30 = *(void *)(a6 + 16);
  int v32 = *(double **)(v29 + 16);
  double v31 = *(double **)(v29 + 24);
  if (!*(_BYTE *)(v30 + 80))
  {
    sub_100853948(*(void *)(a6 + 16), *(double **)(v30 + 24), v30 + 32);
    *(_OWORD *)(v30 + 64) = *(_OWORD *)*(void *)(v30 + 32);
    *(_BYTE *)(v30 + 80) = 1;
  }

  int v33 = sub_100845638(v32, v31, (double *)(v30 + 64));
  if (v33 * v28 == -1)
  {
    uint64_t v52 = *(void *)(a6 + 8);
    double v53 = *(double **)(v52 + 16);
    double v54 = *(double **)(v52 + 24);
    if (!*(_BYTE *)(v52 + 80))
    {
      sub_100853948(*(void *)(a6 + 8), *(double **)(v52 + 24), v52 + 32);
      *(_OWORD *)(v52 + 64) = *(_OWORD *)*(void *)(v52 + 32);
      *(_BYTE *)(v52 + 80) = 1;
    }

    uint64_t result = sub_100845638(v53, v54, (double *)(v52 + 64));
    if ((_DWORD)result == v28)
    {
      if (!v27)
      {
        *(_DWORD *)(a3 + 40) = 3;
        BOOL v60 = v33 == 1;
        goto LABEL_105;
      }

      if (v27 == v33)
      {
        if (v33 == 1) {
          int v55 = 1;
        }
        else {
          int v55 = 2;
        }
        *(_DWORD *)(a3 + 40) = v55;
        goto LABEL_103;
      }
    }

    if ((_DWORD)result == v33)
    {
      uint64_t v56 = *(void *)(a6 + 16);
      BOOL v57 = *(double **)(v56 + 24);
      if (!*(_BYTE *)(v56 + 80))
      {
        sub_100853948(*(void *)(a6 + 16), *(double **)(v56 + 24), v56 + 32);
        *(_OWORD *)(v56 + 64) = *(_OWORD *)*(void *)(v56 + 32);
        *(_BYTE *)(v56 + 80) = 1;
      }

      uint64_t v58 = *(void *)(a6 + 8);
      if (!*(_BYTE *)(v58 + 80))
      {
        sub_100853948(v58, *(double **)(v58 + 24), v58 + 32);
        *(_OWORD *)(v58 + 64) = *(_OWORD *)*(void *)(v58 + 32);
        *(_BYTE *)(v58 + 80) = 1;
      }

      uint64_t result = sub_100845638(v57, (double *)(v56 + 64), (double *)(v58 + 64));
      if (!(_DWORD)result) {
        goto LABEL_72;
      }
      if ((_DWORD)result == v33)
      {
        if (v33 == 1) {
          int v59 = 1;
        }
        else {
          int v59 = 2;
        }
        *(_DWORD *)(a3 + 40) = v59;
        if (v33 == 1) {
          int v55 = 2;
        }
        else {
          int v55 = 1;
        }
        goto LABEL_103;
      }
    }

    BOOL v60 = v33 == 1;
    if (v33 == 1) {
      int v61 = 2;
    }
    else {
      int v61 = 1;
    }
    *(_DWORD *)(a3 + 40) = v61;
LABEL_105:
    if (v60) {
      int v51 = 1;
    }
    else {
      int v51 = 2;
    }
    goto LABEL_108;
  }

  uint64_t v34 = *(void *)(a6 + 16);
  double v35 = *(double **)(v34 + 24);
  if (!*(_BYTE *)(v34 + 80))
  {
    sub_100853948(*(void *)(a6 + 16), *(double **)(v34 + 24), v34 + 32);
    *(_OWORD *)(v34 + 64) = *(_OWORD *)*(void *)(v34 + 32);
    *(_BYTE *)(v34 + 80) = 1;
  }

  uint64_t v36 = *(void *)(a6 + 8);
  if (!*(_BYTE *)(v36 + 80))
  {
    sub_100853948(*(void *)(a6 + 8), *(double **)(v36 + 24), v36 + 32);
    *(_OWORD *)(v36 + 64) = *(_OWORD *)*(void *)(v36 + 32);
    *(_BYTE *)(v36 + 80) = 1;
  }

  int v37 = sub_100845638(v35, (double *)(v34 + 64), (double *)(v36 + 64));
  uint64_t v38 = *(void *)(a6 + 8);
  int v39 = *(double **)(v38 + 16);
  int v40 = *(double **)(v38 + 24);
  if (!*(_BYTE *)(v38 + 80))
  {
    sub_100853948(*(void *)(a6 + 8), *(double **)(v38 + 24), v38 + 32);
    *(_OWORD *)(v38 + 64) = *(_OWORD *)*(void *)(v38 + 32);
    *(_BYTE *)(v38 + 80) = 1;
  }

  int v41 = sub_100845638(v39, v40, (double *)(v38 + 64));
  uint64_t v42 = *(void *)(a6 + 16);
  double v43 = *(double **)(v42 + 16);
  double v44 = *(double **)(v42 + 24);
  if (!*(_BYTE *)(v42 + 80))
  {
    sub_100853948(v42, *(double **)(v42 + 24), v42 + 32);
    *(_OWORD *)(v42 + 64) = *(_OWORD *)*(void *)(v42 + 32);
    *(_BYTE *)(v42 + 80) = 1;
  }

  uint64_t result = sub_100845638(v43, v44, (double *)(v42 + 64));
  if (v33) {
    _ZF = 1;
  }
  else {
    _ZF = (_DWORD)result * v28 == 1;
  }
  int v47 = !_ZF;
  if (v41 != v28 && v41 != v33 && (v33 | v28 || v41 == -1))
  {
    if ((_DWORD)result == 1) {
      int v62 = 2;
    }
    else {
      int v62 = 1;
    }
    *(_DWORD *)(a3 + 40) = v62;
    if (v33 == 1 || v28 == 1) {
      int v64 = 1;
    }
    else {
      int v64 = 2;
    }
    if (v47) {
      int v64 = 3;
    }
    *(_DWORD *)(a3 + 120) = v64;
    if ((v47 & 1) == 0) {
      goto LABEL_89;
    }
    return result;
  }

  if (v37) {
    char v48 = 1;
  }
  else {
    char v48 = v47;
  }
  if ((v48 & 1) == 0)
  {
LABEL_72:
    int v51 = 4;
    *(_DWORD *)(a3 + 40) = 4;
LABEL_108:
    *(_DWORD *)(a3 + 120) = v51;
    return result;
  }

  if (!v27)
  {
    *(_DWORD *)(a3 + 40) = 3;
    if ((_DWORD)result == 1) {
      int v65 = 2;
    }
    else {
      int v65 = 1;
    }
    if (v47) {
      int v51 = 3;
    }
    else {
      int v51 = v65;
    }
    goto LABEL_108;
  }

  if (v27 == v37 && (_DWORD)result * v27 != -1)
  {
    if ((_DWORD)result == 1) {
      int v49 = 1;
    }
    else {
      int v49 = 2;
    }
    *(_DWORD *)(a3 + 40) = v49;
    if ((_DWORD)result == 1) {
      int v50 = 2;
    }
    else {
      int v50 = 1;
    }
    if (v47) {
      int v51 = 3;
    }
    else {
      int v51 = v50;
    }
    goto LABEL_108;
  }

  if (!(v37 + (_DWORD)result))
  {
    if ((_DWORD)result == 1) {
      int v66 = 2;
    }
    else {
      int v66 = 1;
    }
    *(_DWORD *)(a3 + 40) = v66;
    if ((_DWORD)result == 1) {
      int v55 = 1;
    }
    else {
      int v55 = 2;
    }
LABEL_103:
    *(_DWORD *)(a3 + 120) = v55;
    *(_BYTE *)(a3 + 20) = 1;
    return result;
  }

  if (v27 == -(int)result)
  {
    if ((_DWORD)result == 1) {
      int v67 = 2;
    }
    else {
      int v67 = 1;
    }
    *(_DWORD *)(a3 + 40) = v67;
    *(_DWORD *)(a3 + 120) = v67;
    if (v47)
    {
      int v51 = 3;
      goto LABEL_108;
    }

double sub_10085059C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v10 = *(double *)(a4 + 80);
  double v11 = *(double *)(a4 + 136);
  if (vabdd_f64(v10, v11) >= 50.0)
  {
    BOOL v16 = v10 < v11;
  }

  else
  {
    double v12 = *(double *)(a4 + 72);
    if (v12 == 0.0) {
      sub_10124CD90(a1, a2, a3);
    }
    double v13 = *(double *)(a4 + 128);
    if (v13 == 0.0) {
      sub_10124CDB4(a1, a2, a3);
    }
    double v14 = *(double *)(a4 + 64) / v12;
    double v15 = *(double *)(a4 + 120) / v13;
    if (v14 == v15)
    {
      BOOL v16 = 0;
    }

    else if ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
           || (*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    }
    {
      BOOL v16 = 1;
    }

    else
    {
      double v17 = vabdd_f64(v14, v15);
      double v18 = fabs(v14);
      double v19 = fabs(v15);
      if (v18 < v19) {
        double v18 = v19;
      }
      if (v18 >= 1.0) {
        double v20 = v18 * 2.22044605e-16;
      }
      else {
        double v20 = 2.22044605e-16;
      }
      BOOL v16 = v17 > v20;
    }

    if (v14 >= v15) {
      BOOL v16 = 0;
    }
  }

  *(_DWORD *)(a3 + 16) = 5;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16LL * v16 + 8);
  uint64_t v21 = a4 + 56LL * v16;
  __int128 v22 = *(_OWORD *)(v21 + 40);
  *(void *)(a3 + 104) = *(void *)(v21 + 56);
  *(_OWORD *)(a3 + 88) = v22;
  __int128 v23 = *(_OWORD *)(v21 + 64);
  *(void *)(a3 + 184) = *(void *)(v21 + 80);
  *(_OWORD *)(a3 + 168) = v23;
  int v24 = *(_DWORD *)(a5 + 36);
  if (!v24) {
    sub_10124CDD8();
  }
  uint64_t v25 = *(void *)(a6 + 8);
  double v26 = *(double **)(v25 + 16);
  int v27 = *(double **)(v25 + 24);
  if (!*(_BYTE *)(v25 + 80))
  {
    sub_100853948(*(void *)(a6 + 8), *(double **)(v25 + 24), v25 + 32);
    *(_OWORD *)(v25 + 64) = *(_OWORD *)*(void *)(v25 + 32);
    *(_BYTE *)(v25 + 80) = 1;
  }

  int v28 = sub_100845638(v26, v27, (double *)(v25 + 64));
  uint64_t v29 = *(void *)(a6 + 16);
  uint64_t v30 = *(double **)(v29 + 16);
  double v31 = *(double **)(v29 + 24);
  if (!*(_BYTE *)(v29 + 80))
  {
    sub_100853948(v29, *(double **)(v29 + 24), v29 + 32);
    *(_OWORD *)(v29 + 64) = *(_OWORD *)*(void *)(v29 + 32);
    *(_BYTE *)(v29 + 80) = 1;
  }

  int v32 = sub_100845638(v30, v31, (double *)(v29 + 64));
  int v33 = v32;
  if (v24 == 1) {
    int v34 = v28;
  }
  else {
    int v34 = v32;
  }
  if (v34 * v24 == 1) {
    int v35 = 1;
  }
  else {
    int v35 = 2;
  }
  if (v34 * v24 == 1) {
    int v36 = 2;
  }
  else {
    int v36 = 1;
  }
  if (v34)
  {
    int v37 = v36;
  }

  else
  {
    int v35 = 4;
    int v37 = 4;
  }

  *(_DWORD *)(a3 + 40) = v35;
  *(_DWORD *)(a3 + 120) = v37;
  if (v28)
  {
    uint64_t v38 = *(double **)(a1 + 24);
    double v39 = *(double *)a3;
    double v40 = *(double *)(a3 + 8);
    double v41 = *v38;
    double v42 = v38[1];
  }

  else
  {
    if (!*(_BYTE *)(a1 + 80))
    {
      sub_100853948(a1, *(double **)(a1 + 24), a1 + 32);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)*(void *)(a1 + 32);
      *(_BYTE *)(a1 + 80) = 1;
    }

    double v39 = *(double *)a3;
    double v40 = *(double *)(a3 + 8);
    double v41 = *(double *)(a1 + 64);
    double v42 = *(double *)(a1 + 72);
  }

  *(double *)(a3 + 112) = (v40 - v42) * (v40 - v42) + (v39 - v41) * (v39 - v41);
  if (v33)
  {
    double v43 = *(double **)(a2 + 24);
    double v44 = *v43;
    double v45 = v43[1];
  }

  else
  {
    if (!*(_BYTE *)(a2 + 80))
    {
      sub_100853948(a2, *(double **)(a2 + 24), a2 + 32);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)*(void *)(a2 + 32);
      *(_BYTE *)(a2 + 80) = 1;
      double v39 = *(double *)a3;
      double v40 = *(double *)(a3 + 8);
    }

    double v44 = *(double *)(a2 + 64);
    double v45 = *(double *)(a2 + 72);
  }

  double result = (v40 - v45) * (v40 - v45) + (v39 - v44) * (v39 - v44);
  *(double *)(a3 + 192) = result;
  return result;
}

double sub_100850880(uint64_t a1, uint64_t a2, __int128 *a3, void **a4, uint64_t a5, uint64_t a6)
{
  __int128 v9 = a3[11];
  *(_OWORD *)double v44 = a3[10];
  *(_OWORD *)&v44[16] = v9;
  uint64_t v45 = *((void *)a3 + 24);
  __int128 v10 = a3[7];
  *(_OWORD *)&v40[16] = a3[6];
  __int128 v41 = v10;
  __int128 v11 = a3[9];
  __int128 v42 = a3[8];
  __int128 v43 = v11;
  __int128 v12 = a3[3];
  __int128 v37 = a3[2];
  __int128 v38 = v12;
  __int128 v13 = a3[5];
  __int128 v39 = a3[4];
  *(_OWORD *)double v40 = v13;
  __int128 v14 = a3[1];
  __int128 v35 = *a3;
  __int128 v36 = v14;
  int v15 = *(_DWORD *)(a5 + 256);
  if (*(_DWORD *)(a5 + 252) != 1) {
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(a6 + 8);
  double v17 = *(double **)(v16 + 16);
  double v18 = *(double **)(v16 + 24);
  if (!*(_BYTE *)(v16 + 80))
  {
    sub_100853948(*(void *)(a6 + 8), *(double **)(v16 + 24), v16 + 32);
    *(_OWORD *)(v16 + 64) = *(_OWORD *)*(void *)(v16 + 32);
    *(_BYTE *)(v16 + 80) = 1;
  }

  uint64_t v19 = sub_100845638(v17, v18, (double *)(v16 + 64));
  switch((_DWORD)v19)
  {
    case 1:
      int v22 = 2;
      break;
    case 0:
      goto LABEL_12;
    case 0xFFFFFFFF:
      int v22 = 1;
      break;
    default:
      goto LABEL_10;
  }

  DWORD2(v37) = v22;
LABEL_10:
  DWORD2(v41) = 3;
  LODWORD(v36) = 5;
  if (*(void *)(a5 + 64) <= 1uLL) {
    sub_10124CD6C(v19, v20, v21);
  }
  __int128 v35 = *(_OWORD *)(a5 + 88);
  *(_OWORD *)&v40[8] = *(_OWORD *)(a5 + 160);
  uint64_t v23 = *(void *)(a5 + 176);
  *(_OWORD *)&v44[8] = *(_OWORD *)(a5 + 184);
  uint64_t v24 = *(void *)(a5 + 200);
  *(void *)&v40[24] = v23;
  *(void *)&v44[24] = v24;
  *(void *)&__int128 v14 = sub_1008549B8(*a4, (uint64_t)&v35).n128_u64[0];
LABEL_12:
  if (v15 != 1) {
    return *(double *)&v14;
  }
  uint64_t v25 = *(void *)(a6 + 16);
  double v26 = *(double **)(v25 + 16);
  int v27 = *(double **)(v25 + 24);
  if (!*(_BYTE *)(v25 + 80))
  {
    sub_100853948(v25, *(double **)(v25 + 24), v25 + 32);
    *(_OWORD *)(v25 + 64) = *(_OWORD *)*(void *)(v25 + 32);
    *(_BYTE *)(v25 + 80) = 1;
  }

  uint64_t v28 = sub_100845638(v26, v27, (double *)(v25 + 64));
  switch((_DWORD)v28)
  {
    case 1:
      int v31 = 2;
      break;
    case 0:
      return *(double *)&v14;
    case 0xFFFFFFFF:
      int v31 = 1;
      break;
    default:
      goto LABEL_21;
  }

  DWORD2(v41) = v31;
LABEL_21:
  DWORD2(v37) = 3;
  LODWORD(v36) = 5;
  if (!*(void *)(a5 + 64)) {
    sub_10124CD6C(v28, v29, v30);
  }
  __int128 v35 = *(_OWORD *)(a5 + 72);
  *(_OWORD *)&v40[8] = *(_OWORD *)(a5 + 104);
  uint64_t v32 = *(void *)(a5 + 120);
  *(_OWORD *)&v44[8] = *(_OWORD *)(a5 + 128);
  uint64_t v33 = *(void *)(a5 + 144);
  *(void *)&v40[24] = v32;
  *(void *)&v44[24] = v33;
  *(void *)&__int128 v14 = sub_1008549B8(*a4, (uint64_t)&v35).n128_u64[0];
  return *(double *)&v14;
}

uint64_t sub_100850A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v8 = *(double *)(a4 + 80);
  double v9 = *(double *)(a4 + 136);
  if (vabdd_f64(v8, v9) >= 50.0)
  {
    BOOL v14 = v8 < v9;
  }

  else
  {
    double v10 = *(double *)(a4 + 72);
    if (v10 == 0.0) {
      sub_10124CD90(a1, a2, a3);
    }
    double v11 = *(double *)(a4 + 128);
    if (v11 == 0.0) {
      sub_10124CDB4(a1, a2, a3);
    }
    double v12 = *(double *)(a4 + 64) / v10;
    double v13 = *(double *)(a4 + 120) / v11;
    if (v12 == v13)
    {
      BOOL v14 = 0;
    }

    else if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
           || (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    }
    {
      BOOL v14 = 1;
    }

    else
    {
      double v15 = vabdd_f64(v12, v13);
      double v16 = fabs(v12);
      double v17 = fabs(v13);
      if (v16 < v17) {
        double v16 = v17;
      }
      if (v16 >= 1.0) {
        double v18 = v16 * 2.22044605e-16;
      }
      else {
        double v18 = 2.22044605e-16;
      }
      BOOL v14 = v15 > v18;
    }

    if (v12 >= v13) {
      BOOL v14 = 0;
    }
  }

  *(_DWORD *)(a3 + 16) = 6;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16LL * v14 + 8);
  uint64_t v19 = a4 + 56LL * v14;
  __int128 v20 = *(_OWORD *)(v19 + 40);
  *(void *)(a3 + 104) = *(void *)(v19 + 56);
  *(_OWORD *)(a3 + 88) = v20;
  __int128 v21 = *(_OWORD *)(v19 + 64);
  *(void *)(a3 + 184) = *(void *)(v19 + 80);
  *(_OWORD *)(a3 + 168) = v21;
  uint64_t v22 = *(void *)(a6 + 16);
  uint64_t v23 = *(double **)(v22 + 24);
  if (!*(_BYTE *)(v22 + 80))
  {
    sub_100853948(*(void *)(a6 + 16), *(double **)(v22 + 24), v22 + 32);
    *(_OWORD *)(v22 + 64) = *(_OWORD *)*(void *)(v22 + 32);
    *(_BYTE *)(v22 + 80) = 1;
  }

  uint64_t v24 = *(void *)(a6 + 8);
  if (!*(_BYTE *)(v24 + 80))
  {
    sub_100853948(*(void *)(a6 + 8), *(double **)(v24 + 24), v24 + 32);
    *(_OWORD *)(v24 + 64) = *(_OWORD *)*(void *)(v24 + 32);
    *(_BYTE *)(v24 + 80) = 1;
  }

  int v25 = sub_100845638(v23, (double *)(v22 + 64), (double *)(v24 + 64));
  uint64_t v26 = *(void *)(a6 + 8);
  int v27 = *(double **)(v26 + 16);
  uint64_t v28 = *(double **)(v26 + 24);
  if (!*(_BYTE *)(v26 + 80))
  {
    sub_100853948(*(void *)(a6 + 8), *(double **)(v26 + 24), v26 + 32);
    *(_OWORD *)(v26 + 64) = *(_OWORD *)*(void *)(v26 + 32);
    *(_BYTE *)(v26 + 80) = 1;
  }

  int v29 = sub_100845638(v27, v28, (double *)(v26 + 64));
  uint64_t v30 = *(void *)(a6 + 8);
  uint64_t v31 = *(void *)(a6 + 16);
  uint64_t v33 = *(double **)(v30 + 16);
  uint64_t v32 = *(double **)(v30 + 24);
  if (!*(_BYTE *)(v31 + 80))
  {
    sub_100853948(v31, *(double **)(v31 + 24), v31 + 32);
    *(_OWORD *)(v31 + 64) = *(_OWORD *)*(void *)(v31 + 32);
    *(_BYTE *)(v31 + 80) = 1;
  }

  uint64_t result = sub_100845638(v33, v32, (double *)(v31 + 64));
  if (v25 || v29 != (_DWORD)result)
  {
    if ((_DWORD)result * v29 == -1) {
      BOOL v36 = v29 == -1;
    }
    else {
      BOOL v36 = v25 == -1;
    }
    if (v36) {
      int v37 = 2;
    }
    else {
      int v37 = 1;
    }
    *(_DWORD *)(a3 + 40) = v37;
    if (v36) {
      int v35 = 1;
    }
    else {
      int v35 = 2;
    }
  }

  else
  {
    int v35 = 4;
    *(_DWORD *)(a3 + 40) = 4;
  }

  *(_DWORD *)(a3 + 120) = v35;
  return result;
}

void sub_100850D28(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  double v7 = *(void **)(a2 + 16);
  double v6 = *(void **)(a2 + 24);
  v277[0] = v5;
  v277[1] = v4;
  v276[0] = v7;
  v276[1] = v6;
  uint64_t v8 = *(void *)(v5 + 8);
  *(void *)&__int128 v282 = *(void *)v5;
  char v278 = 0;
  *(void *)&v291[0] = v8;
  sub_100843CD4((double *)&v282, (double *)v291, 1);
  double v9 = *(double *)&v282;
  double v10 = *(double *)v291;
  uint64_t v11 = *(void *)(v4 + 8);
  *(void *)&__int128 v282 = *(void *)v4;
  *(void *)&v291[0] = v11;
  sub_100843CD4((double *)&v282, (double *)v291, 1);
  if (v9 != *(double *)&v282)
  {
    if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((unint64_t)v282 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_21;
    }

    double v13 = vabdd_f64(v9, *(double *)&v282);
    double v14 = fabs(v9);
    double v15 = fabs(*(double *)&v282);
    if (v14 >= v15) {
      double v15 = v14;
    }
    double v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v13 > v16) {
      goto LABEL_21;
    }
  }

  if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v291[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_21;
  }

  double v17 = vabdd_f64(v10, *(double *)v291);
  double v18 = fabs(v10);
  double v19 = fabs(*(double *)v291);
  if (v18 >= v19) {
    double v19 = v18;
  }
  double v20 = v19 >= 1.0 ? v19 * 2.22044605e-16 : 2.22044605e-16;
  if (v17 <= v20) {
LABEL_3:
  }
    int v12 = 1;
  else {
LABEL_21:
  }
    int v12 = 0;
  uint64_t v21 = v7[1];
  *(void *)&__int128 v282 = *v7;
  *(void *)&v291[0] = v21;
  sub_100843CD4((double *)&v282, (double *)v291, 1);
  double v22 = *(double *)&v282;
  double v23 = *(double *)v291;
  uint64_t v24 = v6[1];
  *(void *)&__int128 v282 = *v6;
  *(void *)&v291[0] = v24;
  sub_100843CD4((double *)&v282, (double *)v291, 1);
  if (v22 != *(double *)&v282)
  {
    if ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((unint64_t)v282 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_51;
    }

    double v31 = vabdd_f64(v22, *(double *)&v282);
    double v32 = fabs(v22);
    double v33 = fabs(*(double *)&v282);
    if (v32 >= v33) {
      double v33 = v32;
    }
    double v34 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
    if (v31 > v34) {
      goto LABEL_51;
    }
  }

  if (v23 == *(double *)v291)
  {
    if (v12) {
      goto LABEL_25;
    }
    BOOL v39 = 1;
  }

  else
  {
    if ((*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v291[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
LABEL_51:
      BOOL v39 = 0;
      goto LABEL_53;
    }

    double v35 = vabdd_f64(v23, *(double *)v291);
    double v36 = fabs(v23);
    double v37 = fabs(*(double *)v291);
    if (v36 >= v37) {
      double v37 = v36;
    }
    if (v37 >= 1.0) {
      double v38 = v37 * 2.22044605e-16;
    }
    else {
      double v38 = 2.22044605e-16;
    }
    BOOL v39 = v35 <= v38;
    if (v35 <= v38) {
      char v40 = v12;
    }
    else {
      char v40 = 0;
    }
    if ((v40 & 1) != 0)
    {
LABEL_25:
      uint64_t v25 = *(void *)(v5 + 8);
      *(void *)&__int128 v282 = *(void *)v5;
      *(void *)&v291[0] = v25;
      sub_100843CD4((double *)&v282, (double *)v291, 1);
      double v26 = *(double *)&v282;
      double v27 = *(double *)v291;
      uint64_t v28 = v6[1];
      *(void *)&__int128 v282 = *v6;
      *(void *)&v291[0] = v28;
      sub_100843CD4((double *)&v282, (double *)v291, 1);
      if (v26 != *(double *)&v282)
      {
        if ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || ((unint64_t)v282 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_181;
        }

        double v110 = vabdd_f64(v26, *(double *)&v282);
        double v111 = fabs(v26);
        double v112 = fabs(*(double *)&v282);
        if (v111 >= v112) {
          double v112 = v111;
        }
        double v113 = v112 >= 1.0 ? v112 * 2.22044605e-16 : 2.22044605e-16;
        if (v110 > v113) {
          goto LABEL_181;
        }
      }

      if (v27 != *(double *)v291)
      {
        if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v291[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_181;
        }

        double v133 = vabdd_f64(v27, *(double *)v291);
        double v134 = fabs(v27);
        double v135 = fabs(*(double *)v291);
        if (v134 >= v135) {
          double v135 = v134;
        }
        double v136 = v135 >= 1.0 ? v135 * 2.22044605e-16 : 2.22044605e-16;
        if (v133 > v136)
        {
LABEL_181:
          *(void *)&__int128 v282 = 0LL;
          uint64_t v137 = 40LL;
          do
          {
            std::string v138 = (char *)&v282 + v137;
            *(_OWORD *)std::string v138 = xmmword_1013394A0;
            *((void *)v138 + 2) = 0LL;
            *((void *)v138 + 3) = 0LL;
            *((_OWORD *)v138 + 2) = xmmword_1012E0180;
            v138[48] = 0;
            v137 += 56LL;
          }

          while (v138 + 56 != (char *)v291);
          goto LABEL_458;
        }
      }

      uint64_t v29 = 40LL;
      do
      {
        uint64_t v30 = (char *)&v282 + v29;
        *(_OWORD *)uint64_t v30 = xmmword_1013394A0;
        *((void *)v30 + 2) = 0LL;
        *((void *)v30 + 3) = 0LL;
        *((_OWORD *)v30 + 2) = xmmword_1012E0180;
        v30[48] = 0;
        v29 += 56LL;
      }

      while (v30 + 56 != (char *)v291);
      goto LABEL_72;
    }
  }

double sub_1008528D0@<D0>(uint64_t a1@<X8>)
{
  *(void *)&v9[0] = 0LL;
  uint64_t v1 = 40LL;
  do
  {
    uint64_t v2 = (char *)v9 + v1;
    *(_OWORD *)uint64_t v2 = xmmword_1013394A0;
    *((void *)v2 + 2) = 0LL;
    *((void *)v2 + 3) = 0LL;
    *((_OWORD *)v2 + 2) = xmmword_1012E0180;
    v2[48] = 0;
    v1 += 56LL;
  }

  while (v2 + 56 != v11);
  memset(&v11[8], 0, 32);
  __int128 v3 = v9[7];
  *(_OWORD *)(a1 + 96) = v9[6];
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 128) = v9[8];
  __int128 v4 = v9[3];
  *(_OWORD *)(a1 + 32) = v9[2];
  *(_OWORD *)(a1 + 48) = v4;
  __int128 v5 = v9[5];
  *(_OWORD *)(a1 + 64) = v9[4];
  *(_OWORD *)(a1 + 80) = v5;
  __int128 v6 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v6;
  __int128 v7 = *(_OWORD *)&v11[22];
  *(_OWORD *)(a1 + 154) = *(_OWORD *)&v11[6];
  *(void *)&v11[40] = 0LL;
  *(void *)(a1 + 144) = v10;
  *(_WORD *)(a1 + 152) = 100;
  *(_OWORD *)(a1 + 170) = v7;
  double result = *(double *)&v11[32];
  *(_OWORD *)(a1 + 180) = *(_OWORD *)&v11[32];
  return result;
}

double sub_1008529B8(double *a1)
{
  double v1 = *a1;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v2 & 1) == 0)
  {
    uint64_t v10 = a1;
    int v9 = __cxa_guard_acquire(&qword_10198D598);
    a1 = v10;
    if (v9)
    {
      qword_10198D590 = 0x3F91DF46A2529D39LL;
      __cxa_guard_release(&qword_10198D598);
      a1 = v10;
    }
  }

  double v3 = *(double *)&qword_10198D590;
  double v4 = a1[1];
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_10198D598);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_10198D598))
  {
    qword_10198D590 = 0x3F91DF46A2529D39LL;
    __cxa_guard_release(&qword_10198D598);
  }

  double v6 = v1 * v3;
  double cosval = __sincos_stret(v4 * *(double *)&qword_10198D590).__cosval;
  return __sincos_stret(v6).__cosval * cosval;
}

BOOL sub_100852AE8( double *a1, double *a2, double *a3, uint64_t a4, double *a5, uint64_t a6, double *a7, double *a8, double *a9, double *a10, double *a11, char a12)
{
  char v29 = 1;
  double v17 = 1.0 - sub_100853F28(a7, a5, a8, (BOOL *)&v29);
  *a11 = v17;
  if (!v29)
  {
    double v17 = -v17;
    *a11 = v17;
  }

  if (v17 <= -2.0) {
    *a11 = v17 + 4.0;
  }
  if (sub_100853D9C(a11, a1, a3)) {
    goto LABEL_6;
  }
  double v28 = *a10 - *a11;
  if (sub_100853D9C(&v28, a2, a3))
  {
    double v18 = *a10;
    goto LABEL_9;
  }

  if ((a12 & 1) != 0)
  {
    char v30 = 1;
    double v20 = 1.0 - sub_100853F28(a7, a5, a9, (BOOL *)&v30);
    if (!v30) {
      double v20 = -v20;
    }
    double v21 = v20 + 4.0;
    if (v20 > -2.0) {
      double v21 = v20;
    }
    if (v21 == 0.0) {
      goto LABEL_6;
    }
    if ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v22 = fabs(v21);
      double v23 = 2.22044605e-16;
      if (v22 >= 1.0) {
        double v23 = v22 * 2.22044605e-16;
      }
      if (v22 <= v23)
      {
LABEL_6:
        *a11 = 0.0;
        return 1LL;
      }
    }

    double v18 = *a10;
    double v24 = *a10 - v21;
    if (v24 == 0.0) {
      goto LABEL_9;
    }
    if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v25 = fabs(v24);
      double v26 = 2.22044605e-16;
      if (v25 >= 1.0) {
        double v26 = v25 * 2.22044605e-16;
      }
      if (v25 <= v26)
      {
LABEL_9:
        *a11 = v18;
        return 1LL;
      }
    }
  }

  else
  {
    double v18 = *a10;
  }

  double v27 = *a11;
  if (v18 < 0.0) {
    double v27 = -*a11;
  }
  if (v27 < 0.0) {
    return 0LL;
  }
  if (v18 < 0.0) {
    double v18 = -v18;
  }
  return v27 <= v18;
}

void sub_100852CE4( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 *a11, __int128 *a12)
{
  int v14 = a3;
  if ((a5 & 0xFFFFFFFD) == 1) {
    int v16 = 0;
  }
  else {
    int v16 = -1;
  }
  BOOL v17 = (a4 - 4) < 0xFFFFFFFD;
  BOOL v18 = (a4 & 0xFFFFFFFD) != 1;
  BOOL v19 = (a4 & 0xFFFFFFFD) != 1 || (a4 - 4) < 0xFFFFFFFD;
  if (a5 == 2) {
    int v20 = 1;
  }
  else {
    int v20 = v16;
  }
  if (a5 == 2) {
    BOOL v21 = v18;
  }
  else {
    BOOL v21 = (a4 - 4) < 0xFFFFFFFD;
  }
  unsigned int v22 = a5 - 1;
  if ((a5 & 0xFFFFFFFD) == 1) {
    int v23 = !v19;
  }
  else {
    int v23 = v21;
  }
  if ((a5 & 0xFFFFFFFD) != 1 || v22 >= 3) {
    int v25 = !v19;
  }
  else {
    int v25 = v23 + 1;
  }
  sub_100853F80(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v43, a10, a11, a12);
  memset(&v45[2], 0, 32);
  unsigned int v26 = a7 & 0xFFFFFFFD;
  BOOL v27 = (a6 - 4) < 0xFFFFFFFD;
  BOOL v28 = (a6 & 0xFFFFFFFD) != 1;
  BOOL v29 = (a6 & 0xFFFFFFFD) != 1 || (a6 - 4) < 0xFFFFFFFD;
  int v30 = !v29;
  if (a7 != 2) {
    BOOL v28 = (a6 - 4) < 0xFFFFFFFD;
  }
  unsigned int v31 = a7 - 1;
  if (v26 == 1) {
    int v32 = v30;
  }
  else {
    int v32 = v28;
  }
  if (v26 == 1 && v31 < 3) {
    int v30 = v32 + 1;
  }
  BOOL v34 = v23 == 0;
  if (v22 < 3) {
    BOOL v34 = v17;
  }
  BOOL v35 = v32 == 0;
  if (v31 >= 3) {
    BOOL v27 = v35;
  }
  if (v25 == 1 && v30 == 1 && v34 && v27)
  {
    if (v14)
    {
      if (v20) {
        char v36 = 102;
      }
      else {
        char v36 = 116;
      }
    }

    else
    {
      char v36 = 97;
    }
  }

  else
  {
    char v36 = 99;
    if (v25 == 2 && v30 == 2) {
      char v36 = 101;
    }
  }

  __int128 v37 = v43[7];
  *(_OWORD *)(a9 + 96) = v43[6];
  *(_OWORD *)(a9 + 112) = v37;
  *(_OWORD *)(a9 + 128) = v43[8];
  __int128 v38 = v43[3];
  *(_OWORD *)(a9 + 32) = v43[2];
  *(_OWORD *)(a9 + 48) = v38;
  __int128 v39 = v43[5];
  *(_OWORD *)(a9 + 64) = v43[4];
  *(_OWORD *)(a9 + 80) = v39;
  __int128 v40 = v43[1];
  *(_OWORD *)a9 = v43[0];
  *(_OWORD *)(a9 + 16) = v40;
  __int128 v41 = *(_OWORD *)&v45[16];
  *(_OWORD *)(a9 + 154) = *(_OWORD *)v45;
  if (v26 == 1) {
    int v42 = 0;
  }
  else {
    int v42 = -1;
  }
  if (a7 == 2) {
    int v42 = 1;
  }
  *(void *)(a9 + 144) = v44;
  *(_BYTE *)(a9 + 152) = v36;
  *(_BYTE *)(a9 + 153) = v14;
  *(_OWORD *)(a9 + 170) = v41;
  *(_WORD *)(a9 + 186) = *(_WORD *)&v45[32];
  *(_DWORD *)(a9 + 188) = v20;
  *(_DWORD *)(a9 + 192) = v42;
}

uint64_t sub_100852EF4( double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, uint64_t a11, _DWORD *a12, double *a13, double *a14, double *a15, double *a16, double *a17, int *a18)
{
  double v24 = a5[1];
  double v23 = a5[2];
  double v25 = (*a5 * *((double *)&v99 + 1) - v24 * *(double *)&v99) * a9[2]
  double v26 = 1.0 - (v100 * v23 + v24 * *((double *)&v99 + 1) + *a5 * *(double *)&v99);
  if (v25 < 0.0) {
    double v26 = -v26;
  }
  if (v26 <= -2.0) {
    double v26 = v26 + 4.0;
  }
  *a16 = v26;
  *(_OWORD *)a15 = v99;
  a15[2] = v100;
  double v27 = *a16;
  int v93 = a6;
  if (*a16 >= 0.0)
  {
    if (v27 <= *a13) {
      goto LABEL_19;
    }
    double v28 = v27 - *a13;
  }

  else
  {
    double v28 = -v27;
  }

  if (v28 > 0.0)
  {
    if (v27 + -2.0 <= -2.0) {
      double v29 = v27 + -2.0 + 4.0;
    }
    else {
      double v29 = v27 + -2.0;
    }
    if (v29 >= 0.0)
    {
      double v30 = 0.0;
      if (v29 > *a13) {
        double v30 = v29 - *a13;
      }
    }

    else
    {
      double v30 = -v29;
    }

    if (v30 < v28)
    {
      *a16 = v29;
      *(_OWORD *)a15 = v97;
      *((void *)a15 + 2) = v98;
      double v27 = *a16;
    }
  }

__n128 sub_100853720@<Q0>( int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = 40LL;
  do
  {
    int v9 = (char *)v23 + v8;
    *(_OWORD *)int v9 = xmmword_1013394A0;
    *((void *)v9 + 2) = 0LL;
    *((void *)v9 + 3) = 0LL;
    *((_OWORD *)v9 + 2) = xmmword_1012E0180;
    v9[48] = 0;
    v8 += 56LL;
  }

  while (v9 + 56 != (char *)&v31);
  *(void *)&v23[0] = 1LL;
  sub_1008547B8(a2, (uint64_t)v23 + 8, a3, a4);
  BYTE8(v26) = 1;
  *(_OWORD *)&v24[8] = *(_OWORD *)(a2 + 24);
  *(void *)&v24[24] = *(void *)(a2 + 40);
  __int128 v25 = *(_OWORD *)(a2 + 48);
  *(void *)&__int128 v26 = *(void *)(a2 + 64);
  int v10 = *a1;
  int v11 = a1[2];
  int v12 = a1[3];
  if (!(*a1 | v11))
  {
    int v11 = -1;
    if (v12 == 1) {
      int v14 = -1;
    }
    else {
      int v14 = 1;
    }
    if (v12 == 1) {
      int v15 = 1;
    }
    else {
      int v15 = -1;
    }
    char v16 = 102;
    goto LABEL_25;
  }

  int v13 = a1[1];
  if (!(v13 | v12))
  {
    if (v11 == 1) {
      int v14 = -1;
    }
    else {
      int v14 = 1;
    }
    if (v11 == 1) {
      int v15 = 1;
    }
    else {
      int v15 = -1;
    }
    int v11 = 1;
    char v16 = 116;
    int v10 = 1;
    goto LABEL_43;
  }

  if (!(v13 | v11))
  {
    if (v12 == 1) {
      int v14 = 1;
    }
    else {
      int v14 = -1;
    }
    int v10 = -1;
    int v11 = 1;
    goto LABEL_41;
  }

  if (!(v10 | v12))
  {
    if (v11 == 1) {
      int v14 = 1;
    }
    else {
      int v14 = -1;
    }
    int v10 = 1;
    int v11 = -1;
LABEL_41:
    char v16 = 97;
    goto LABEL_42;
  }

  if (v11)
  {
    if (v10)
    {
      if (v12)
      {
        if (v13)
        {
          int v11 = -1;
          if (v12 == 1) {
            int v14 = -1;
          }
          else {
            int v14 = 1;
          }
          if (v12 == 1) {
            int v15 = 1;
          }
          else {
            int v15 = -1;
          }
          char v16 = 105;
LABEL_25:
          int v10 = -1;
          goto LABEL_43;
        }

        int v10 = 0;
        if (v12 == 1) {
          int v14 = 1;
        }
        else {
          int v14 = -1;
        }
        int v11 = 1;
      }

      else
      {
        int v11 = 0;
        if (v13 == 1) {
          int v14 = 1;
        }
        else {
          int v14 = -1;
        }
        int v10 = 1;
      }

      char v16 = 109;
LABEL_42:
      int v15 = v14;
      goto LABEL_43;
    }

    BOOL v22 = v12 == 1;
    int v11 = -1;
    if (v12 == 1) {
      int v14 = -1;
    }
    else {
      int v14 = 1;
    }
  }

  else
  {
    BOOL v22 = v12 == 1;
    int v10 = -1;
    if (v12 == 1) {
      int v14 = -1;
    }
    else {
      int v14 = 1;
    }
  }

  if (v22) {
    int v15 = a1[3];
  }
  else {
    int v15 = -1;
  }
  char v16 = 115;
LABEL_43:
  __int128 v17 = v28;
  *(_OWORD *)(a5 + 96) = v27;
  *(_OWORD *)(a5 + 112) = v17;
  *(_OWORD *)(a5 + 128) = v29;
  *(void *)(a5 + 144) = v30;
  __int128 v18 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a5 + 32) = *(_OWORD *)v24;
  *(_OWORD *)(a5 + 48) = v18;
  __int128 v19 = v26;
  *(_OWORD *)(a5 + 64) = v25;
  *(_OWORD *)(a5 + 80) = v19;
  __int128 v20 = v23[1];
  *(_OWORD *)a5 = v23[0];
  *(_OWORD *)(a5 + 16) = v20;
  *(_BYTE *)(a5 + 152) = v16;
  *(_BYTE *)(a5 + 153) = 0;
  *(_DWORD *)(a5 + 156) = v11;
  *(_DWORD *)(a5 + 160) = v10;
  *(_DWORD *)(a5 + 164) = v14;
  *(_DWORD *)(a5 + 168) = v15;
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)(a5 + 172) = *(_OWORD *)a1;
  *(_DWORD *)(a5 + 188) = v11;
  *(_DWORD *)(a5 + 192) = v10;
  return result;
}

void sub_100853948(uint64_t a1, double *a2, uint64_t a3)
{
  unint64_t v5 = 0LL;
  double v7 = *a2;
  double v6 = a2[1];
  uint64_t v8 = *(double **)a3;
  while (1)
  {
    double v9 = *v8;
    double v10 = v8[1];
    double v25 = v6;
    double v26 = v7;
    sub_100843CD4(&v26, &v25, 1);
    double v11 = v25;
    double v12 = v26;
    double v25 = v10;
    double v26 = v9;
    sub_100843CD4(&v26, &v25, 1);
    if (v12 != v26)
    {
      if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        break;
      }

      double v14 = vabdd_f64(v12, v26);
      double v15 = fabs(v12);
      double v16 = fabs(v26);
      if (v15 >= v16) {
        double v16 = v15;
      }
      double v17 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
      if (v14 > v17) {
        break;
      }
    }

    if (v11 != v25)
    {
      if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        break;
      }

      double v19 = vabdd_f64(v11, v25);
      double v20 = fabs(v11);
      double v21 = fabs(v25);
      if (v20 >= v21) {
        double v21 = v20;
      }
      double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
      if (v19 > v22) {
        break;
      }
    }

    if (v5 >= *(void *)(*(void *)a1 + 88LL)) {
      break;
    }
    double v23 = *(double **)a3;
    uint64_t v8 = (double *)(*(void *)a3 + 16LL);
    *(void *)a3 = v8;
    if (v8 == *(double **)(a3 + 16))
    {
      double v24 = *(double **)(a3 + 8);
      *(void *)a3 = v24;
      if (*(_BYTE *)(a3 + 24))
      {
        uint64_t v8 = v24 + 2;
        *(void *)a3 = v24 + 2;
        if (v23 == v24)
        {
          *(void *)a3 = v24;
          uint64_t v8 = v23;
        }
      }

      else
      {
        uint64_t v8 = v24;
      }
    }

    ++v5;
  }

__n128 sub_100853AF0@<Q0>(void **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = 40LL;
  do
  {
    unint64_t v5 = (char *)&v20 + v4;
    *(_OWORD *)unint64_t v5 = xmmword_1013394A0;
    *((void *)v5 + 2) = 0LL;
    *((void *)v5 + 3) = 0LL;
    *((_OWORD *)v5 + 2) = xmmword_1012E0180;
    v5[48] = 0;
    v4 += 56LL;
  }

  while (v5 + 56 != v29);
  *(void *)&__int128 v20 = 1LL;
  double v6 = *a1;
  *((void *)&v20 + 1) = **a1;
  *(void *)&__int128 v21 = v6[1];
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_10198D608);
  if (a3)
  {
    if ((v7 & 1) == 0)
    {
      uint64_t v16 = a2;
      uint64_t v18 = a4;
      int v14 = __cxa_guard_acquire(&qword_10198D608);
      a2 = v16;
      a4 = v18;
      if (v14)
      {
        xmmword_10198D5F0 = xmmword_1013394A0;
        qword_10198D600 = 0LL;
        __cxa_guard_release(&qword_10198D608);
        a2 = v16;
        a4 = v18;
      }
    }

    BYTE8(v24) = 1;
    *(_OWORD *)&v22[8] = xmmword_10198D5F0;
    *(void *)&v22[24] = qword_10198D600;
    __int128 v23 = *(_OWORD *)a2;
    *(void *)&__int128 v24 = *(void *)(a2 + 16);
  }

  else
  {
    if ((v7 & 1) == 0)
    {
      uint64_t v17 = a2;
      uint64_t v19 = a4;
      int v15 = __cxa_guard_acquire(&qword_10198D608);
      a2 = v17;
      a4 = v19;
      if (v15)
      {
        xmmword_10198D5F0 = xmmword_1013394A0;
        qword_10198D600 = 0LL;
        __cxa_guard_release(&qword_10198D608);
        a2 = v17;
        a4 = v19;
      }
    }

    BYTE8(v24) = 1;
    *(_OWORD *)&v22[8] = *(_OWORD *)a2;
    *(void *)&v22[24] = *(void *)(a2 + 16);
    __int128 v23 = xmmword_10198D5F0;
    *(void *)&__int128 v24 = qword_10198D600;
  }

  memset(&v29[8], 0, 32);
  __int128 v8 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v8;
  *(_OWORD *)(a4 + 128) = v27;
  __int128 v9 = *(_OWORD *)&v22[16];
  *(_OWORD *)(a4 + 32) = *(_OWORD *)v22;
  *(_OWORD *)(a4 + 48) = v9;
  __int128 v10 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v10;
  __int128 v11 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v11;
  __int128 v12 = *(_OWORD *)&v29[22];
  *(_OWORD *)(a4 + 154) = *(_OWORD *)&v29[6];
  *(void *)&v29[40] = 0LL;
  *(void *)(a4 + 144) = v28;
  *(_WORD *)(a4 + 152) = 48;
  *(_OWORD *)(a4 + 170) = v12;
  __n128 result = *(__n128 *)&v29[32];
  *(_OWORD *)(a4 + 180) = *(_OWORD *)&v29[32];
  return result;
}

double sub_100853D24(double *a1, uint64_t a2, double *a3, double *a4, double *a5)
{
  char v7 = 1;
  double result = 1.0 - sub_100853F28(a3, a1, a4, (BOOL *)&v7);
  *a5 = result;
  if (!v7)
  {
    double result = -result;
    *a5 = result;
  }

  if (result <= -2.0)
  {
    double result = result + 4.0;
    *a5 = result;
  }

  return result;
}

BOOL sub_100853D9C(double *a1, double *a2, double *a3)
{
  double v3 = *a1;
  double v4 = fabs(*a1);
  if (v4 > 0.00000001) {
    return 0LL;
  }
  if (v3 == 0.0) {
    return 1LL;
  }
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v7 = 2.22044605e-16;
    if (v4 >= 1.0) {
      double v7 = v4 * 2.22044605e-16;
    }
    if (v4 <= v7) {
      return 1LL;
    }
  }

  double v8 = *a2;
  double v20 = a2[1];
  double v21 = v8;
  sub_100843CD4(&v21, &v20, 1);
  double v9 = v20;
  double v10 = v21;
  double v11 = *a3;
  double v20 = a3[1];
  double v21 = v11;
  sub_100843CD4(&v21, &v20, 1);
  if (v10 != v21)
  {
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 0LL;
    }

    double v16 = vabdd_f64(v10, v21);
    double v17 = fabs(v10);
    double v18 = fabs(v21);
    if (v17 >= v18) {
      double v18 = v17;
    }
    double v19 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 > v19) {
      return 0LL;
    }
  }

  if (v9 == v20) {
    return 1LL;
  }
  if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0LL;
  }

  double v12 = vabdd_f64(v9, v20);
  double v13 = fabs(v9);
  double v14 = fabs(v20);
  if (v13 >= v14) {
    double v14 = v13;
  }
  double v15 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
  return v12 <= v15;
}

double sub_100853F28(double *a1, double *a2, double *a3, BOOL *a4)
{
  double v5 = a3[1];
  double v4 = a3[2];
  double v7 = a2[1];
  double v6 = a2[2];
  double v8 = *a3;
  double v9 = *a2;
  *a4 = (*a2 * v5 - v7 * *a3) * a1[2] + a1[1] * (v6 * *a3 - *a2 * v4) + *a1 * (v7 * v4 - v6 * v5) >= 0.0;
  return v4 * v6 + v7 * v5 + v9 * v8;
}

void sub_100853F80( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 *a11, __int128 *a12)
{
  double v13 = a11;
  double v12 = a12;
  uint64_t v14 = a10;
  *(void *)a9 = 0LL;
  double v15 = (__int128 *)(a9 + 40);
  uint64_t v16 = 40LL;
  __int128 v17 = xmmword_1013394A0;
  do
  {
    uint64_t v18 = a9 + v16;
    *(_OWORD *)uint64_t v18 = xmmword_1013394A0;
    *(void *)(v18 + 16) = 0LL;
    *(void *)(v18 + 24) = 0LL;
    *(_OWORD *)(v18 + 32) = xmmword_1012E0180;
    *(_BYTE *)(v18 + 48) = 0;
    v16 += 56LL;
  }

  while (v18 + 56 != a9 + 152);
  double v134 = 0.0;
  double v135 = 0.0;
  __int128 v136 = xmmword_1012E0180;
  __int128 v133 = xmmword_1013394A0;
  if ((a4 - 1) > 2)
  {
    unsigned int v22 = 0;
  }

  else
  {
    double v19 = *(void **)a1;
    *(void *)(a9 + 8) = **(void **)a1;
    *(void *)(a9 + 16) = v19[1];
    LOBYTE(v19) = atomic_load((unsigned __int8 *)&qword_10198D608);
    if ((v19 & 1) == 0)
    {
      uint64_t v87 = a1;
      double v116 = (__int128 *)(a9 + 40);
      uint64_t v122 = a9;
      uint64_t v104 = a2;
      int v110 = a7;
      int v84 = a5;
      int v95 = a6;
      uint64_t v80 = a8;
      int v65 = __cxa_guard_acquire(&qword_10198D608);
      __int128 v17 = xmmword_1013394A0;
      uint64_t v14 = a10;
      a2 = v104;
      a9 = v122;
      double v12 = a12;
      double v15 = v116;
      a8 = v80;
      a6 = v95;
      a5 = v84;
      a7 = v110;
      int v66 = v65;
      a1 = v87;
      double v13 = a11;
      if (v66)
      {
        xmmword_10198D5F0 = xmmword_1013394A0;
        qword_10198D600 = 0LL;
        __cxa_guard_release(&qword_10198D608);
        __int128 v17 = xmmword_1013394A0;
        a1 = v87;
        double v13 = a11;
        uint64_t v14 = a10;
        a2 = v104;
        a9 = v122;
        double v12 = a12;
        double v15 = v116;
        a8 = v80;
        a6 = v95;
        a5 = v84;
        a7 = v110;
      }
    }

    uint64_t v20 = qword_10198D600;
    *(_BYTE *)(a9 + 88) = 1;
    *(_OWORD *)(a9 + 40) = xmmword_10198D5F0;
    *(void *)(a9 + 56) = v20;
    *(_OWORD *)(a9 + 64) = *(_OWORD *)a8;
    *(void *)(a9 + 80) = *(void *)(a8 + 16);
    unsigned __int8 v21 = atomic_load((unsigned __int8 *)&qword_10198D608);
    if ((v21 & 1) == 0)
    {
      uint64_t v88 = a1;
      double v91 = v13;
      uint64_t v117 = v15;
      uint64_t v123 = a9;
      uint64_t v101 = v14;
      uint64_t v105 = a2;
      int v111 = a7;
      int v85 = a5;
      int v96 = a6;
      double v128 = v12;
      __int128 v82 = v17;
      int v67 = __cxa_guard_acquire(&qword_10198D608);
      __int128 v17 = v82;
      uint64_t v14 = v101;
      a2 = v105;
      a9 = v123;
      double v12 = v128;
      double v15 = v117;
      a6 = v96;
      a5 = v85;
      a7 = v111;
      int v68 = v67;
      a1 = v88;
      double v13 = v91;
      if (v68)
      {
        xmmword_10198D5F0 = v82;
        qword_10198D600 = 0LL;
        __cxa_guard_release(&qword_10198D608);
        __int128 v17 = v82;
        a1 = v88;
        double v13 = v91;
        uint64_t v14 = v101;
        a2 = v105;
        a9 = v123;
        double v12 = v128;
        double v15 = v117;
        a6 = v96;
        a5 = v85;
        a7 = v111;
      }
    }

    __int128 v133 = xmmword_10198D5F0;
    double v134 = *(double *)&qword_10198D600;
    unsigned int v22 = 1;
  }

  if (a6 == 2)
  {
    unsigned int v23 = v22;
    uint64_t v24 = a9 + 16LL * v22;
    __int128 v25 = *(void **)a2;
    *(void *)(v24 + 8) = **(void **)a2;
    *(void *)(v24 + 16) = v25[1];
    a3 = a9 + 56LL * v22 + 40;
    LOBYTE(v24) = atomic_load((unsigned __int8 *)&qword_10198D608);
    if ((v24 & 1) == 0)
    {
      uint64_t v89 = a1;
      int v92 = v13;
      int64x2_t v118 = v15;
      uint64_t v124 = a9;
      uint64_t v102 = v14;
      uint64_t v106 = a2;
      int v112 = a7;
      int v86 = a5;
      unsigned int v97 = v22;
      double v129 = v12;
      unsigned int v79 = v22;
      uint64_t v81 = a9 + 56LL * v22 + 40;
      __int128 v83 = v17;
      int v69 = __cxa_guard_acquire(&qword_10198D608);
      unsigned int v23 = v79;
      a3 = v81;
      uint64_t v14 = v102;
      a2 = v106;
      a9 = v124;
      double v12 = v129;
      unsigned int v22 = v97;
      double v15 = v118;
      a5 = v86;
      a7 = v112;
      int v70 = v69;
      a1 = v89;
      double v13 = v92;
      if (v70)
      {
        xmmword_10198D5F0 = v83;
        qword_10198D600 = 0LL;
        __cxa_guard_release(&qword_10198D608);
        unsigned int v23 = v79;
        a3 = v81;
        a1 = v89;
        double v13 = v92;
        uint64_t v14 = v102;
        a2 = v106;
        a9 = v124;
        double v12 = v129;
        unsigned int v22 = v97;
        double v15 = v118;
        a5 = v86;
        a7 = v112;
      }
    }

    uint64_t v26 = qword_10198D600;
    uint64_t v27 = a9 + 56LL * v23;
    *(_BYTE *)(v27 + 88) = 1;
    __int128 v28 = xmmword_10198D5F0;
    __int128 v29 = *v13;
    *(_OWORD *)a3 = *v13;
    uint64_t v30 = *((void *)v13 + 2);
    *(void *)(a3 + 16) = v30;
    *(_OWORD *)(v27 + 64) = v28;
    *(void *)(v27 + 80) = v26;
    uint64_t v31 = (char *)&v133 + 24 * v23;
    *(_OWORD *)uint64_t v31 = v29;
    *((void *)v31 + 2) = v30;
    ++v22;
  }

  if ((a5 - 1) <= 2 && v22 <= 1)
  {
    unsigned int v32 = v22;
    uint64_t v33 = a9 + 16LL * v22;
    double v34 = *(void **)(a1 + 8);
    *(void *)(v33 + 8) = *v34;
    *(void *)(v33 + 16) = v34[1];
    uint64_t v35 = a9 + 56LL * v22 + 40;
    LOBYTE(v33) = atomic_load((unsigned __int8 *)&qword_10198D628);
    if ((v33 & 1) == 0)
    {
      unsigned __int8 v119 = v15;
      uint64_t v125 = a9;
      uint64_t v103 = v14;
      uint64_t v107 = a2;
      int v113 = a7;
      unsigned int v98 = v22;
      double v130 = v12;
      uint64_t v90 = a9 + 56LL * v22 + 40;
      unsigned int v93 = v22;
      int v71 = __cxa_guard_acquire(&qword_10198D628);
      uint64_t v35 = v90;
      unsigned int v32 = v93;
      uint64_t v14 = v103;
      a2 = v107;
      a9 = v125;
      double v12 = v130;
      unsigned int v22 = v98;
      double v15 = v119;
      a7 = v113;
      if (v71)
      {
        __asm { FMOV            V0.2D, #1.0 }

        xmmword_10198D610 = _Q0;
        qword_10198D620 = 0x412E848000000000LL;
        __cxa_guard_release(&qword_10198D628);
        uint64_t v35 = v90;
        unsigned int v32 = v93;
        uint64_t v14 = v103;
        a2 = v107;
        a9 = v125;
        double v12 = v130;
        unsigned int v22 = v98;
        double v15 = v119;
        a7 = v113;
      }
    }

    uint64_t v36 = qword_10198D620;
    uint64_t v37 = a9 + 56LL * v32;
    a1 = 1LL;
    *(_BYTE *)(v37 + 88) = 1;
    *(_OWORD *)uint64_t v35 = xmmword_10198D610;
    *(void *)(v35 + 16) = v36;
    *(_OWORD *)(v37 + 64) = *(_OWORD *)v14;
    *(void *)(v37 + 80) = *(void *)(v14 + 16);
    unsigned __int8 v38 = atomic_load((unsigned __int8 *)&qword_10198D628);
    if ((v38 & 1) == 0)
    {
      __int128 v120 = v15;
      uint64_t v126 = a9;
      uint64_t v108 = a2;
      int v114 = a7;
      unsigned int v99 = v22;
      uint64_t v131 = v12;
      unsigned int v94 = v32;
      a1 = __cxa_guard_acquire(&qword_10198D628);
      unsigned int v32 = v94;
      a9 = v126;
      double v12 = v131;
      unsigned int v22 = v99;
      double v15 = v120;
      a7 = v114;
      a2 = v108;
      if ((_DWORD)a1)
      {
        __asm { FMOV            V0.2D, #1.0 }

        xmmword_10198D610 = _Q0;
        qword_10198D620 = 0x412E848000000000LL;
        __cxa_guard_release(&qword_10198D628);
        unsigned int v32 = v94;
        a9 = v126;
        double v12 = v131;
        unsigned int v22 = v99;
        double v15 = v120;
        a7 = v114;
        a2 = v108;
      }
    }

    uint64_t v39 = qword_10198D620;
    BOOL v40 = (char *)&v133 + 24 * v32;
    *(_OWORD *)BOOL v40 = xmmword_10198D610;
    *((void *)v40 + 2) = v39;
    ++v22;
  }

  if (a7 == 2 && v22 <= 1)
  {
    unsigned int v41 = v22;
    uint64_t v42 = a9 + 16LL * v22;
    double v43 = *(void **)(a2 + 8);
    *(void *)(v42 + 8) = *v43;
    *(void *)(v42 + 16) = v43[1];
    uint64_t v44 = a9 + 56LL * v22 + 40;
    unsigned __int8 v45 = atomic_load((unsigned __int8 *)&qword_10198D628);
    if ((v45 & 1) == 0)
    {
      __int128 v121 = v15;
      uint64_t v127 = a9;
      unsigned int v100 = v22;
      __int128 v132 = v12;
      uint64_t v109 = a9 + 56LL * v22 + 40;
      unsigned int v115 = v22;
      a1 = __cxa_guard_acquire(&qword_10198D628);
      uint64_t v44 = v109;
      unsigned int v41 = v115;
      a9 = v127;
      double v12 = v132;
      unsigned int v22 = v100;
      double v15 = v121;
      if ((_DWORD)a1)
      {
        __asm { FMOV            V0.2D, #1.0 }

        xmmword_10198D610 = _Q0;
        qword_10198D620 = 0x412E848000000000LL;
        __cxa_guard_release(&qword_10198D628);
        uint64_t v44 = v109;
        unsigned int v41 = v115;
        a9 = v127;
        double v12 = v132;
        unsigned int v22 = v100;
        double v15 = v121;
      }
    }

    uint64_t v46 = qword_10198D620;
    uint64_t v47 = a9 + 56LL * v41;
    *(_BYTE *)(v47 + 88) = 1;
    __int128 v48 = xmmword_10198D610;
    __int128 v49 = *v12;
    *(_OWORD *)uint64_t v44 = *v12;
    uint64_t v50 = *((void *)v12 + 2);
    *(void *)(v44 + 16) = v50;
    *(_OWORD *)(v47 + 64) = v48;
    *(void *)(v47 + 80) = v46;
    double v51 = (char *)&v133 + 24 * v41;
    *(_OWORD *)double v51 = v49;
    *((void *)v51 + 2) = v50;
    ++v22;
  }

  if (v22 == 2)
  {
    if (vabdd_f64(*((double *)&v136 + 1), v134) >= 50.0)
    {
      goto LABEL_38;
    }

    double v52 = v135 / *(double *)&v136;
    double v53 = *(double *)&v133 / *((double *)&v133 + 1);
    if (v135 / *(double *)&v136 != *(double *)&v133 / *((double *)&v133 + 1))
    {
      if (COERCE_UNSIGNED_INT64(fabs(v135 / *(double *)&v136)) > 0x7FEFFFFFFFFFFFFFLL
        || COERCE_UNSIGNED_INT64(fabs(*(double *)&v133 / *((double *)&v133 + 1))) > 0x7FEFFFFFFFFFFFFFLL)
      {
        BOOL v58 = 1;
      }

      else
      {
        double v54 = vabdd_f64(v52, v53);
        double v55 = fabs(v52);
        double v56 = fabs(v53);
        if (v55 < v56) {
          double v55 = v56;
        }
        double v57 = v55 >= 1.0 ? v55 * 2.22044605e-16 : 2.22044605e-16;
        BOOL v58 = v54 > v57;
      }

      if (v52 < v53 && v58)
      {
LABEL_38:
        uint64_t v59 = *((void *)v15 + 6);
        __int128 v61 = v15[1];
        __int128 v60 = v15[2];
        __int128 v62 = *v15;
        __int128 v63 = *(_OWORD *)(a9 + 112);
        *double v15 = *(_OWORD *)(a9 + 96);
        v15[1] = v63;
        v15[2] = *(_OWORD *)(a9 + 128);
        *((_BYTE *)v15 + 48) = *(_BYTE *)(a9 + 144);
        *(_OWORD *)(a9 + 96) = v62;
        *(_OWORD *)(a9 + 112) = v61;
        *(_OWORD *)(a9 + 128) = v60;
        *(_BYTE *)(a9 + 144) = v59;
        __int128 v64 = *(_OWORD *)(a9 + 8);
        *(_OWORD *)(a9 + 8) = *(_OWORD *)(a9 + 24);
        *(_OWORD *)(a9 + 24) = v64;
      }
    }
  }

uint64_t sub_10085473C(double *a1, double *a2, double *a3, double *a4)
{
  double v5 = a2[1];
  double v4 = a2[2];
  double v7 = a1[1];
  double v6 = a1[2];
  double v8 = v7 * v4 - v6 * v5;
  double v9 = v6 * *a2 - *a1 * v4;
  double v10 = *a1 * v5 - v7 * *a2;
  a3[1] = v9;
  a3[2] = v10;
  double v11 = sqrt(v10 * v10 + v9 * v9 + v8 * v8);
  *a3 = v8 / v11;
  *a4 = -(v8 / v11);
  double v12 = a3[1] / v11;
  a3[1] = v12;
  a4[1] = -v12;
  double v13 = a3[2] / v11;
  a3[2] = v13;
  a4[2] = -v13;
  return 1LL;
}

double sub_1008547B8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  switch(*(_DWORD *)(a1 + 72))
  {
    case 0:
      double result = sub_100854830((double *)a1);
      *(double *)a2 = result;
      *(void *)(a2 + 8) = v6;
      return result;
    case 1:
      uint64_t v7 = *a3;
      goto LABEL_7;
    case 2:
      uint64_t v7 = a3[1];
      goto LABEL_7;
    case 3:
      uint64_t v7 = *a4;
      goto LABEL_7;
    default:
      uint64_t v7 = a4[1];
LABEL_7:
      *(void *)a2 = *(void *)v7;
      double result = *(double *)(v7 + 8);
      *(double *)(a2 + 8) = result;
      return result;
  }

double sub_100854830(double *a1)
{
  double v2 = *a1;
  double v1 = a1[1];
  double v3 = a1[2];
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_10198D5E8);
  if ((v4 & 1) == 0)
  {
    double v13 = *a1;
    double v9 = a1[1];
    int v10 = __cxa_guard_acquire(&qword_10198D5E8);
    double v1 = v9;
    double v2 = v13;
    if (v10)
    {
      qword_10198D5E0 = 0x404CA5DC1A63C1F8LL;
      __cxa_guard_release(&qword_10198D5E8);
      double v1 = v9;
      double v2 = v13;
    }
  }

  double v5 = *(double *)&qword_10198D5E0;
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_10198D5E8);
  if ((v6 & 1) == 0)
  {
    double v12 = v1;
    double v14 = v2;
    int v11 = __cxa_guard_acquire(&qword_10198D5E8);
    double v1 = v12;
    double v2 = v14;
    if (v11)
    {
      qword_10198D5E0 = 0x404CA5DC1A63C1F8LL;
      __cxa_guard_release(&qword_10198D5E8);
      double v1 = v12;
      double v2 = v14;
    }
  }

  double v7 = v5 * atan2(v1, v2);
  double v15 = asin(v3) * *(double *)&qword_10198D5E0;
  double v16 = v7;
  sub_100843CD4(&v16, &v15, 1);
  return v16;
}

uint64_t sub_100854950(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  double v3 = *(double **)(v2 + 24);
  if (!*(_BYTE *)(v2 + 80))
  {
    sub_100853948(*(void *)(a1 + 8), *(double **)(v2 + 24), v2 + 32);
    *(_OWORD *)(v2 + 64) = *(_OWORD *)*(void *)(v2 + 32);
    *(_BYTE *)(v2 + 80) = 1;
  }

  return sub_100845638(v3, (double *)(v2 + 64), *(double **)(*(void *)(a1 + 16) + 24LL));
}

__n128 sub_1008549B8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 20 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100854A94(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }

  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x14)) + 200 * (v7 % 0x14);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  __int128 v9 = *(_OWORD *)(a2 + 16);
  __int128 v10 = *(_OWORD *)(a2 + 32);
  __int128 v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = v10;
  __int128 v12 = *(_OWORD *)(a2 + 80);
  __int128 v13 = *(_OWORD *)(a2 + 96);
  __int128 v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 96) = v13;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v16 = *(_OWORD *)(a2 + 160);
  __int128 v17 = *(_OWORD *)(a2 + 176);
  *(void *)(v8 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 176) = v17;
  *(__n128 *)(v8 + 144) = result;
  ++a1[5];
  return result;
}

void sub_100854A94(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x14;
  unint64_t v4 = v2 - 20;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int128 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_1000071BC(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned __int8 v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        unsigned int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unsigned int v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100854D5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100854DA8(void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x70A3D70A3D70A3D7LL * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 19 - v3;
      uint64_t v6 = &v2[-(v5 / 0x14)];
      *__n128 result = v6;
      unint64_t v4 = *v6 + 200 * (20 * (v5 / 0x14) - v5) + 3800;
    }

    else
    {
      *__n128 result = &v2[v3 / 0x14];
      unint64_t v4 = v2[v3 / 0x14] + 200 * (v3 % 0x14);
    }

    result[1] = v4;
  }

  return result;
}

void *sub_100854E4C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  if (a2[2] == v3
    || (unint64_t v4 = a2[4],
        uint64_t v5 = *(void *)(v3 + 8 * (v4 / 0x14)),
        unint64_t v6 = v4 % 0x14,
        uint64_t v7 = v5 + 200 * (v4 % 0x14),
        v7 == *(void *)(v3 + 8 * ((a2[5] + v4) / 0x14)) + 200 * ((a2[5] + v4) % 0x14)))
  {
    sub_10124CAF4((uint64_t)a1, (uint64_t)a2, a3);
  }

  __int128 v9 = sub_10000CF44(a1, (uint64_t)". A self-intersection point was found at ", 41LL);
  sub_1010DDBC0(v65, ", ");
  sub_1010DDBC0(v63, "(");
  sub_1010DDBC0(v61, ")");
  sub_1010DDBC0(v59, ", ");
  sub_1010DDBC0(v57, "(");
  sub_1010DDBC0(v55, ")");
  sub_1010DDBC0(v53, ", ");
  sub_100848F54( v7,  (__int128 *)v65,  (__int128 *)v63,  (__int128 *)v61,  (__int128 *)v59,  (__int128 *)v57,  (__int128 *)v55,  (__int128 *)v53,  (uint64_t)&v67);
  uint64_t v10 = v67;
  if ((v71 & 0x80u) == 0) {
    uint64_t v11 = v70;
  }
  else {
    uint64_t v11 = (void **)v70[0];
  }
  if ((v71 & 0x80u) == 0) {
    uint64_t v12 = v71;
  }
  else {
    uint64_t v12 = (uint64_t)v70[1];
  }
  sub_10000CF44(v9, (uint64_t)v11, v12);
  sub_100849018(v9, v10, (uint64_t)&v68);
  if ((v73 & 0x80u) == 0) {
    uint64_t v13 = v72;
  }
  else {
    uint64_t v13 = (void **)v72[0];
  }
  if ((v73 & 0x80u) == 0) {
    uint64_t v14 = v73;
  }
  else {
    uint64_t v14 = (uint64_t)v72[1];
  }
  sub_10000CF44(v9, (uint64_t)v13, v14);
  std::ostream::flush(v9);
  if (v81 < 0) {
    operator delete(__p);
  }
  if (v79 < 0) {
    operator delete(v78);
  }
  if (v77 < 0) {
    operator delete(v76);
  }
  if (v75 < 0) {
    operator delete(v74);
  }
  if (v69 < 0) {
    operator delete(v68);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  uint64_t v15 = sub_10000CF44(a1, (uint64_t)"; method: ", 10LL);
  uint64_t v16 = *(int *)(v5 + 200 * v6 + 16);
  char v17 = 63;
  LOBYTE(v67) = v17;
  uint64_t v18 = sub_10000CF44(v15, (uint64_t)&v67, 1LL);
  double v19 = sub_10000CF44(v18, (uint64_t)"; operations: ", 14LL);
  uint64_t v20 = v5 + 200 * v6;
  unint64_t v21 = *(unsigned int *)(v20 + 40);
  if (v21 >= 6) {
    char v22 = 63;
  }
  else {
    char v22 = 0x6F637869752DuLL >> (8 * v21);
  }
  LOBYTE(v67) = v22;
  uint64_t v23 = sub_10000CF44(v19, (uint64_t)&v67, 1LL);
  uint64_t v24 = sub_10000CF44(v23, (uint64_t)"/", 1LL);
  unint64_t v25 = *(unsigned int *)(v20 + 120);
  if (v25 >= 6) {
    char v26 = 63;
  }
  else {
    char v26 = 0x6F637869752DuLL >> (8 * v25);
  }
  LOBYTE(v67) = v26;
  uint64_t v27 = sub_10000CF44(v24, (uint64_t)&v67, 1LL);
  sub_10000CF44(v27, (uint64_t)"; segment IDs {source, multi, ring, segment}: ", 46LL);
  uint64_t v28 = *(void *)(v20 + 48);
  uint64_t v29 = *(void *)(v20 + 56);
  uint64_t v30 = *(void *)(v20 + 64);
  uint64_t v31 = *(void *)(v20 + 72);
  __int128 v32 = sub_10000CF44(a1, (uint64_t)"{", 1LL);
  unint64_t v33 = (void *)std::ostream::operator<<(v32, v28);
  double v34 = sub_10000CF44(v33, (uint64_t)", ", 2LL);
  uint64_t v35 = (void *)std::ostream::operator<<(v34, v29);
  uint64_t v36 = sub_10000CF44(v35, (uint64_t)", ", 2LL);
  uint64_t v37 = (void *)std::ostream::operator<<(v36, v30);
  unsigned __int8 v38 = sub_10000CF44(v37, (uint64_t)", ", 2LL);
  uint64_t v39 = (void *)std::ostream::operator<<(v38, v31);
  sub_10000CF44(v39, (uint64_t)"}", 1LL);
  sub_10000CF44(a1, (uint64_t)"/", 1LL);
  uint64_t v40 = *(void *)(v20 + 128);
  uint64_t v41 = *(void *)(v20 + 136);
  uint64_t v42 = *(void *)(v20 + 144);
  uint64_t v43 = *(void *)(v20 + 152);
  uint64_t v44 = sub_10000CF44(a1, (uint64_t)"{", 1LL);
  uint64_t v45 = (void *)std::ostream::operator<<(v44, v40);
  unint64_t v46 = sub_10000CF44(v45, (uint64_t)", ", 2LL);
  uint64_t v47 = (void *)std::ostream::operator<<(v46, v41);
  __int128 v48 = sub_10000CF44(v47, (uint64_t)", ", 2LL);
  uint64_t v49 = (void *)std::ostream::operator<<(v48, v42);
  uint64_t v50 = sub_10000CF44(v49, (uint64_t)", ", 2LL);
  double v51 = (void *)std::ostream::operator<<(v50, v43);
  return sub_10000CF44(v51, (uint64_t)"}", 1LL);
}

void sub_1008552B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100855374( uint64_t a1, uint64_t a2, double **a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, std::string **a8, uint64_t a9)
{
  uint64_t v10 = a5;
  v69[0] = 0LL;
  v69[1] = 0LL;
  uint64_t v13 = v69;
  int v68 = (uint64_t *)v69;
  if (a5 != a7)
  {
    uint64_t v14 = a5;
    uint64_t v15 = a4;
    while (1)
    {
      uint64_t v16 = (uint64_t *)(v14 + 144);
      uint64_t v17 = *(void *)(v14 + 144);
      if (*(void *)(v14 + 64) == -1LL) {
        break;
      }
      if (v17 == -1)
      {
        uint64_t v16 = (uint64_t *)(v14 + 64);
LABEL_7:
        sub_1003CF0F0(&v68, v16, v16);
      }

      v14 += 200LL;
      if (v14 - *v15 == 4000)
      {
        uint64_t v18 = v15[1];
        ++v15;
        uint64_t v14 = v18;
      }

      if (v14 == a7) {
        goto LABEL_11;
      }
    }

    if (v17 == -1) {
      __assert_rtn("are_holes_inside", "polygon.hpp", 284, "tit->operations[1].seg_id.ring_index != -1");
    }
    goto LABEL_7;
  }

void sub_1008557EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char a22, void *a23)
{
}

uint64_t sub_10085583C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = *a1;
  uint64_t v7 = (double ***)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 4) <= a5)
  {
    if ((double ***)v8 == v7)
    {
      return 1LL;
    }

    else
    {
      while (1)
      {
        uint64_t v13 = (double ***)v8;
        v8 += 48LL;
LABEL_19:
      }

      uint64_t v7 = (double ***)v8;
      while (1)
      {
        if (!*(_BYTE *)a2)
        {
          uint64_t v14 = *v13;
          uint64_t v15 = *v7;
          uint64_t v16 = *(unsigned __int8 **)(a2 + 8);
          strcpy((char *)v23, "FFFFFFFFF");
          sub_100858868(v14, v15, (unsigned __int8 *)v23, v16);
          if (!BYTE9(v23[0]))
          {
            BOOL v17 = LOBYTE(v23[0]) != 84 && LOBYTE(v23[0]) - 48 >= 0xA;
            if (!v17
              || BYTE1(v23[0]) == 84
              || BYTE1(v23[0]) - 48 <= 9
              || BYTE3(v23[0]) == 84
              || BYTE3(v23[0]) - 48 < 0xA)
            {
              break;
            }
          }
        }

        v7 += 6;
      }

      uint64_t v12 = 0LL;
      *(_BYTE *)a2 = 1;
    }
  }

  else
  {
    __int128 __p = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    v23[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v23[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    sub_100855A34(a1, (double *)v23, &__p);
    uint64_t v12 = sub_100855B64((double *)v23, (uint64_t **)&__p, 0LL, a5, a2, a3, a4, (uint64_t)&v22);
    if (__p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }
  }

  return v12;
}

void sub_100855A10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100855A34(uint64_t *a1, double *a2, void **a3)
{
  uint64_t v3 = *a1;
  if (*a1 != a1[1])
  {
    uint64_t v7 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t v8 = (double *)sub_1008560B0(v3);
      sub_10084CE24(a2, v8);
      uint64_t v10 = (uint64_t *)a3[1];
      unint64_t v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = ((char *)v10 - (_BYTE *)*a3) >> 3;
        uint64_t v13 = v9 - (void)*a3;
        uint64_t v14 = v13 >> 2;
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          uint64_t v16 = (char *)sub_1000071BC(v7, v15);
        }
        else {
          uint64_t v16 = 0LL;
        }
        BOOL v17 = (uint64_t *)&v16[8 * v12];
        *BOOL v17 = v3;
        uint64_t v11 = v17 + 1;
        uint64_t v19 = (char *)*a3;
        uint64_t v18 = (char *)a3[1];
        if (v18 != *a3)
        {
          do
          {
            uint64_t v20 = *((void *)v18 - 1);
            v18 -= 8;
            *--BOOL v17 = v20;
          }

          while (v18 != v19);
          uint64_t v18 = (char *)*a3;
        }

        *a3 = v17;
        a3[1] = v11;
        a3[2] = &v16[8 * v15];
        if (v18) {
          operator delete(v18);
        }
      }

      else
      {
        *uint64_t v10 = v3;
        uint64_t v11 = v10 + 1;
      }

      a3[1] = v11;
      v3 += 48LL;
    }

    while (v3 != a1[1]);
  }

uint64_t sub_100855B64( double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v13 = (*a1 + a1[2]) * 0.5;
  __int128 v14 = *((_OWORD *)a1 + 1);
  __int128 v53 = *(_OWORD *)a1;
  uint64_t v55 = *((void *)&v14 + 1);
  v51[1] = *((double *)&v53 + 1);
  __int128 v52 = v14;
  double v54 = v13;
  v51[0] = v13;
  __int128 v48 = 0LL;
  uint64_t v49 = 0LL;
  uint64_t v50 = 0LL;
  unint64_t v45 = 0LL;
  unint64_t v46 = 0LL;
  uint64_t v47 = 0LL;
  __int128 __p = 0LL;
  __int128 v43 = 0LL;
  uint64_t v44 = 0LL;
  sub_1008563AC((double *)&v53, v51, a2, &v48, &v45, &__p, a7);
  unint64_t v15 = (uint64_t *)__p;
  if (__p != v43)
  {
    int64x2_t v56 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v57 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    uint64_t v16 = -(uint64_t)__p;
    do
    {
      BOOL v17 = (double *)sub_1008560B0(*v15);
      sub_10084CE24((double *)v56.i64, v17);
      ++v15;
      v16 -= 8LL;
    }

    while (v15 != v43);
    v41[0] = v56;
    v41[1] = v57;
    uint64_t v18 = (double ****)__p;
    if (a3 > 0x63 || -((uint64_t)__p + v16) >> 3 < a4)
    {
      if (v15 != __p)
      {
        while (1)
        {
          uint64_t v19 = v18++;
LABEL_23:
        }

        unint64_t v15 = (uint64_t *)v18;
        while (1)
        {
          if (!*(_BYTE *)a5)
          {
            uint64_t v20 = **v19;
            uint64_t v21 = *(double ***)*v15;
            char v22 = *(unsigned __int8 **)(a5 + 8);
            strcpy(v56.i8, "FFFFFFFFF");
            sub_100858868(v20, v21, (unsigned __int8 *)&v56, v22);
            if (!v56.i8[9])
            {
              BOOL v23 = v56.u8[0] != 84 && v56.u8[0] - 48 >= 0xA;
              if (!v23
                || v56.u8[1] == 84
                || v56.u8[1] - 48 <= 9
                || v56.u8[3] == 84
                || v56.u8[3] - 48 < 0xA)
              {
                break;
              }
            }
          }

          if (++v15 == v43) {
            goto LABEL_23;
          }
        }

        *(_BYTE *)a5 = 1;
        goto LABEL_50;
      }
    }

    else if (!sub_100856A40((double *)v41, (uint64_t **)&__p, a3 + 1, a4, a5, a6, a7, a8))
    {
LABEL_50:
      uint64_t v33 = 0LL;
      goto LABEL_69;
    }

void sub_100856060( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008560B0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40))
  {
    unint64_t v2 = **(double ***)a1;
    uint64_t v3 = *(void *)(*(void *)a1 + 8LL);
    else {
      uint64_t v4 = -1LL;
    }
    sub_100856124( v2,  (unint64_t)(v3 - (void)v2) < 0x20,  (double *)(v3 + 16 * v4),  (unint64_t)(v3 - (void)v2) < 0x20,  (uint64_t)v7);
    __int128 v5 = v7[1];
    *(_OWORD *)(a1 + 8) = v7[0];
    *(_OWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 40) = 1;
  }

  return a1 + 8;
}

void sub_100856124(double *a1, unsigned __int8 a2, double *a3, uint64_t a4, uint64_t a5)
{
  *(int64x2_t *)a5 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a5 + 16) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a1 != a3)
  {
    uint64_t v7 = a2;
    uint64_t v8 = a1 + 2;
    unint64_t v9 = a2 ? a1 : a1 + 2;
    v32[0] = a1;
    v32[1] = v9;
    sub_1008562F8(v32, (double *)a5);
    if (v8 != a3)
    {
      uint64_t v10 = v8;
      do
      {
        if (v7) {
          uint64_t v11 = v8;
        }
        else {
          uint64_t v11 = v8 + 2;
        }
        v27[0] = v8;
        v27[1] = v11;
        sub_1008562F8(v27, (double *)v32);
        double v12 = *(double *)a5;
        double v13 = *(double *)(a5 + 16);
        double v14 = *(double *)(a5 + 24);
        uint64_t v15 = 0x7FEFFFFFFFFFFFFFLL;
        if (*(double *)a5 == 1.79769313e308
          && *(double *)(a5 + 8) == 1.79769313e308
          && v13 == -1.79769313e308
          && v14 == -1.79769313e308)
        {
          uint64_t v21 = (double *)0xFFEFFFFFFFFFFFFFLL;
          char v22 = (double *)0xFFEFFFFFFFFFFFFFLL;
          uint64_t v23 = 0x7FEFFFFFFFFFFFFFLL;
        }

        else
        {
          uint64_t v30 = *(void *)(a5 + 8);
          uint64_t v31 = *(void *)&v12;
          double v28 = v14;
          double v29 = v13;
          double v19 = vabdd_f64(v12, v13);
          if (v19 < 360.0)
          {
            if (COERCE_UNSIGNED_INT64(fabs(v12 - v13)) > 0x7FEFFFFFFFFFFFFFLL)
            {
              BOOL v20 = 0;
            }

            else
            {
              double v24 = vabdd_f64(360.0, v19);
              double v25 = fmax(v19, 360.0);
              if (v25 >= 1.0) {
                double v26 = v25 * 2.22044605e-16;
              }
              else {
                double v26 = 2.22044605e-16;
              }
              BOOL v20 = v24 <= v26;
            }
          }

          else
          {
            BOOL v20 = 1;
          }

          sub_10084B23C((double *)&v31, (double *)&v30, &v29, &v28, v20);
          uint64_t v15 = v30;
          uint64_t v23 = v31;
          uint64_t v21 = *(double **)&v28;
          char v22 = *(double **)&v29;
        }

        v10 += 2;
        _DWORD v32[4] = (double *)v23;
        v32[5] = (double *)v15;
        v32[6] = v22;
        v32[7] = v21;
        sub_10084ACE8((uint64_t)v32, (void *)a5);
        v8 += 2;
      }

      while (v10 != a3);
    }
  }

double sub_1008562F8(double **a1, double *a2)
{
  unint64_t v2 = *a1;
  if (!*a1) {
    sub_10124CE00();
  }
  uint64_t v3 = a1[1];
  if (!v3) {
    sub_10124CE28();
  }
  double v5 = *v2;
  double v6 = *v3;
  uint64_t v7 = *((void *)v3 + 1);
  uint64_t v18 = *((void *)v2 + 1);
  double v19 = v5;
  sub_100843CD4(&v19, (double *)&v18, 1);
  uint64_t v9 = v18;
  double v8 = v19;
  uint64_t v18 = v7;
  double v19 = v6;
  sub_100843CD4(&v19, (double *)&v18, 1);
  uint64_t v11 = v18;
  double v10 = v19;
  uint64_t v18 = v9;
  double v19 = v8;
  uint64_t v16 = v11;
  double v17 = v10;
  sub_10084A318(&v19, (double *)&v18, &v17, (double *)&v16);
  uint64_t v13 = v18;
  double result = v19;
  uint64_t v15 = v16;
  double v14 = v17;
  *a2 = v19;
  *((void *)a2 + 1) = v13;
  a2[2] = v14;
  *((void *)a2 + 3) = v15;
  return result;
}

void sub_1008563AC(double *a1, double *a2, uint64_t **a3, void **a4, void **a5, void **a6, uint64_t a7)
{
  uint64_t v7 = *a3;
  if (*a3 != a3[1])
  {
    uint64_t v54 = (uint64_t)(a5 + 2);
    uint64_t v55 = (uint64_t)(a4 + 2);
    uint64_t v56 = (uint64_t)(a6 + 2);
    do
    {
      BOOL v15 = sub_100856834(a7, a1, *v7);
      BOOL v16 = sub_100856834(a7, a2, *v7);
      if (!v15 || !v16)
      {
        if (v15)
        {
          double v19 = (uint64_t *)a4[1];
          unint64_t v18 = (unint64_t)a4[2];
          if ((unint64_t)v19 >= v18)
          {
            uint64_t v32 = ((char *)v19 - (_BYTE *)*a4) >> 3;
            uint64_t v33 = v18 - (void)*a4;
            uint64_t v34 = v33 >> 2;
            else {
              unint64_t v35 = v34;
            }
            if (v35) {
              uint64_t v36 = (char *)sub_1000071BC(v55, v35);
            }
            else {
              uint64_t v36 = 0LL;
            }
            unint64_t v46 = (uint64_t *)&v36[8 * v32];
            *unint64_t v46 = *v7;
            BOOL v20 = v46 + 1;
            __int128 v48 = (char *)*a4;
            uint64_t v47 = (char *)a4[1];
            if (v47 != *a4)
            {
              do
              {
                uint64_t v49 = *((void *)v47 - 1);
                v47 -= 8;
                *--unint64_t v46 = v49;
              }

              while (v47 != v48);
              uint64_t v47 = (char *)*a4;
            }

            *a4 = v46;
            a4[1] = v20;
            a4[2] = &v36[8 * v35];
            if (v47) {
              operator delete(v47);
            }
          }

          else
          {
            uint64_t *v19 = *v7;
            BOOL v20 = v19 + 1;
          }

          a4[1] = v20;
        }

        else if (v16)
        {
          double v25 = (uint64_t *)a5[1];
          unint64_t v24 = (unint64_t)a5[2];
          if ((unint64_t)v25 >= v24)
          {
            uint64_t v41 = ((char *)v25 - (_BYTE *)*a5) >> 3;
            uint64_t v42 = v24 - (void)*a5;
            uint64_t v43 = v42 >> 2;
            else {
              unint64_t v44 = v43;
            }
            if (v44) {
              unint64_t v45 = (char *)sub_1000071BC(v54, v44);
            }
            else {
              unint64_t v45 = 0LL;
            }
            uint64_t v50 = (uint64_t *)&v45[8 * v41];
            *uint64_t v50 = *v7;
            double v26 = v50 + 1;
            __int128 v52 = (char *)*a5;
            double v51 = (char *)a5[1];
            if (v51 != *a5)
            {
              do
              {
                uint64_t v53 = *((void *)v51 - 1);
                v51 -= 8;
                *--uint64_t v50 = v53;
              }

              while (v51 != v52);
              double v51 = (char *)*a5;
            }

            *a5 = v50;
            a5[1] = v26;
            a5[2] = &v45[8 * v44];
            if (v51) {
              operator delete(v51);
            }
          }

          else
          {
            *double v25 = *v7;
            double v26 = v25 + 1;
          }

          a5[1] = v26;
        }
      }

      else
      {
        char v22 = (uint64_t *)a6[1];
        unint64_t v21 = (unint64_t)a6[2];
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v27 = ((char *)v22 - (_BYTE *)*a6) >> 3;
          uint64_t v28 = v21 - (void)*a6;
          uint64_t v29 = v28 >> 2;
          else {
            unint64_t v30 = v29;
          }
          if (v30) {
            uint64_t v31 = (char *)sub_1000071BC(v56, v30);
          }
          else {
            uint64_t v31 = 0LL;
          }
          uint64_t v37 = (uint64_t *)&v31[8 * v27];
          *uint64_t v37 = *v7;
          uint64_t v23 = v37 + 1;
          uint64_t v39 = (char *)*a6;
          BOOL v38 = (char *)a6[1];
          if (v38 != *a6)
          {
            do
            {
              uint64_t v40 = *((void *)v38 - 1);
              v38 -= 8;
              *--uint64_t v37 = v40;
            }

            while (v38 != v39);
            BOOL v38 = (char *)*a6;
          }

          *a6 = v37;
          a6[1] = v23;
          a6[2] = &v31[8 * v30];
          if (v38) {
            operator delete(v38);
          }
        }

        else
        {
          uint64_t *v22 = *v7;
          uint64_t v23 = v22 + 1;
        }

        a6[1] = v23;
      }

      ++v7;
    }

    while (v7 != a3[1]);
  }

uint64_t sub_100856698( double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *a2;
  double v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_100857CC8(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 == v12) {
    return 1LL;
  }
  double v14 = a3[1];
  if (*a3 == v14) {
    return 1LL;
  }
  while (*a3 == v14)
  {
LABEL_19:
    if (++v13 == v12) {
      return 1LL;
    }
  }

  double v14 = *a3;
  while (1)
  {
    if (!*(_BYTE *)a6)
    {
      BOOL v15 = *(double ***)*v13;
      BOOL v16 = *(double ***)*v14;
      double v17 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v20, "FFFFFFFFF");
      sub_100858868(v15, v16, (unsigned __int8 *)v20, v17);
      if (!v20[9])
      {
        BOOL v18 = v20[0] != 84 && v20[0] - 48 >= 0xA;
        if (!v18
          || v20[1] == 84
          || v20[1] - 48 <= 9
          || v20[3] == 84
          || v20[3] - 48 <= 9)
        {
          break;
        }
      }
    }

    if (++v14 == a3[1])
    {
      double v12 = a2[1];
      goto LABEL_19;
    }
  }

  uint64_t result = 0LL;
  *(_BYTE *)a6 = 1;
  return result;
}

BOOL sub_100856834(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v4 = (double *)sub_1008560B0(a3);
  double v5 = *v4;
  double v6 = v4[2];
  if (v6 - *v4 >= 360.0) {
    return v4[3] >= a2[1] && v4[1] <= a2[3];
  }
  double v7 = *a2;
  double v8 = a2[2];
  double v9 = v8 - *a2;
  if (v9 >= 360.0) {
    return v4[3] >= a2[1] && v4[1] <= a2[3];
  }
  double v10 = vabdd_f64(v7, v5);
  double v11 = 180.0;
  if (v10 == 180.0) {
    goto LABEL_4;
  }
  double v12 = v7 - v5;
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v16 = fabs(v10 + -180.0);
    double v11 = 180.0;
    if (v10 < 180.0) {
      double v10 = 180.0;
    }
    double v17 = v10 >= 1.0 ? v10 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 <= v17) {
      goto LABEL_4;
    }
  }

  double v11 = 180.0;
  if (v12 <= 180.0)
  {
    if (v12 >= -180.0) {
      goto LABEL_5;
    }
    double v11 = fmod(v12 + -180.0, 360.0) + 180.0;
LABEL_4:
    double v12 = v11;
    goto LABEL_5;
  }

  double v12 = fmod(v12 + 180.0, 360.0) + -180.0;
  if (v12 == -180.0) {
    goto LABEL_4;
  }
  BOOL v18 = ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
     && (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v18 || *(void *)&v12 == 0LL)
  {
    double v11 = 180.0;
    double v20 = fabs(v12 + 180.0);
    double v21 = fabs(v12);
    if (v21 < 180.0) {
      double v21 = 180.0;
    }
    double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
    if (v20 <= v22) {
      goto LABEL_4;
    }
  }

uint64_t sub_100856A40( double *a1, uint64_t **a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v13 = *(_OWORD *)a1;
  double v14 = (a1[1] + a1[3]) * 0.5;
  uint64_t v55 = *((void *)a1 + 2);
  __int128 v15 = *((_OWORD *)a1 + 1);
  *(void *)&v52[0] = v13;
  __int128 v53 = v15;
  __int128 v54 = v13;
  double v56 = v14;
  v52[1] = v14;
  uint64_t v49 = 0LL;
  uint64_t v50 = 0LL;
  uint64_t v51 = 0LL;
  unint64_t v46 = 0LL;
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  __int128 __p = 0LL;
  unint64_t v44 = 0LL;
  uint64_t v45 = 0LL;
  sub_1008563AC((double *)&v54, v52, a2, &v49, &v46, &__p, a7);
  double v16 = (uint64_t *)__p;
  if (__p != v44)
  {
    int64x2_t v57 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v58 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    uint64_t v17 = -(uint64_t)__p;
    do
    {
      BOOL v18 = (double *)sub_1008560B0(*v16);
      sub_10084CE24((double *)v57.i64, v18);
      ++v16;
      v17 -= 8LL;
    }

    while (v16 != v44);
    v42[0] = v57;
    v42[1] = v58;
    double v19 = (double ****)__p;
    if (a3 > 0x63 || -((uint64_t)__p + v17) >> 3 < a4)
    {
      if (v16 != __p)
      {
        while (1)
        {
          double v20 = v19++;
LABEL_23:
        }

        double v16 = (uint64_t *)v19;
        while (1)
        {
          if (!*(_BYTE *)a5)
          {
            double v21 = **v20;
            double v22 = *(double ***)*v16;
            uint64_t v23 = *(unsigned __int8 **)(a5 + 8);
            strcpy(v57.i8, "FFFFFFFFF");
            sub_100858868(v21, v22, (unsigned __int8 *)&v57, v23);
            if (!v57.i8[9])
            {
              BOOL v24 = v57.u8[0] != 84 && v57.u8[0] - 48 >= 0xA;
              if (!v24
                || v57.u8[1] == 84
                || v57.u8[1] - 48 <= 9
                || v57.u8[3] == 84
                || v57.u8[3] - 48 < 0xA)
              {
                break;
              }
            }
          }

          if (++v16 == v44) {
            goto LABEL_23;
          }
        }

        *(_BYTE *)a5 = 1;
        goto LABEL_50;
      }
    }

    else if (!sub_100855B64(v42, &__p, a3 + 1, a4, a5, a6, a7, a8))
    {
LABEL_50:
      uint64_t v34 = 0LL;
      goto LABEL_69;
    }

void sub_100856F48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100856F98( double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int128 v13 = *a2;
  double v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_100857134(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 == v12) {
    return 1LL;
  }
  double v14 = a3[1];
  if (*a3 == v14) {
    return 1LL;
  }
  while (*a3 == v14)
  {
LABEL_19:
    if (++v13 == v12) {
      return 1LL;
    }
  }

  double v14 = *a3;
  while (1)
  {
    if (!*(_BYTE *)a6)
    {
      __int128 v15 = *(double ***)*v13;
      double v16 = *(double ***)*v14;
      uint64_t v17 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v20, "FFFFFFFFF");
      sub_100858868(v15, v16, (unsigned __int8 *)v20, v17);
      if (!v20[9])
      {
        BOOL v18 = v20[0] != 84 && v20[0] - 48 >= 0xA;
        if (!v18
          || v20[1] == 84
          || v20[1] - 48 <= 9
          || v20[3] == 84
          || v20[3] - 48 <= 9)
        {
          break;
        }
      }
    }

    if (++v14 == a3[1])
    {
      double v12 = a2[1];
      goto LABEL_19;
    }
  }

  uint64_t result = 0LL;
  *(_BYTE *)a6 = 1;
  return result;
}

uint64_t sub_100857134( double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v16 = (*a1 + a1[2]) * 0.5;
  __int128 v17 = *((_OWORD *)a1 + 1);
  __int128 v102 = *(_OWORD *)a1;
  uint64_t v104 = *((void *)&v17 + 1);
  v100[1] = *((double *)&v102 + 1);
  __int128 v101 = v17;
  double v103 = v16;
  v100[0] = v16;
  unsigned int v97 = 0LL;
  unsigned int v98 = 0LL;
  uint64_t v99 = 0LL;
  unsigned int v94 = 0LL;
  int v95 = 0LL;
  uint64_t v96 = 0LL;
  double v91 = 0LL;
  int v92 = 0LL;
  uint64_t v93 = 0LL;
  uint64_t v88 = 0LL;
  uint64_t v89 = 0LL;
  uint64_t v90 = 0LL;
  int v85 = 0LL;
  int v86 = 0LL;
  uint64_t v87 = 0LL;
  __int128 __p = 0LL;
  __int128 v83 = 0LL;
  uint64_t v84 = 0LL;
  sub_1008563AC((double *)&v102, v100, a2, &v97, &v94, &v91, a8);
  sub_1008563AC((double *)&v102, v100, a3, &v88, &v85, &__p, a10);
  double v19 = (uint64_t *)v91;
  BOOL v18 = v92;
  if (v91 == v92) {
    goto LABEL_77;
  }
  double v20 = v83;
  if (a5 > ((char *)v92 - (_BYTE *)v91) >> 3 || a4 > 0x63 || ((char *)v83 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v83)
    {
      while (__p == v20)
      {
LABEL_28:
        if (++v19 == v18) {
          goto LABEL_29;
        }
      }

      double v20 = (double ****)__p;
      while (1)
      {
        if (!*(_BYTE *)a6)
        {
          uint64_t v28 = *(double ***)*v19;
          uint64_t v29 = **v20;
          unint64_t v30 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v105.i8, "FFFFFFFFF");
          sub_100858868(v28, v29, (unsigned __int8 *)&v105, v30);
          if (!v105.i8[9])
          {
            BOOL v31 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
            if (!v31
              || v105.u8[1] == 84
              || v105.u8[1] - 48 <= 9
              || v105.u8[3] == 84
              || v105.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }

        if (++v20 == v83)
        {
          BOOL v18 = v92;
          goto LABEL_28;
        }
      }
    }
  }

  else
  {
    int64x2_t v105 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v106 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      double v21 = (double *)sub_1008560B0(*v19);
      sub_10084CE24((double *)v105.i64, v21);
      ++v19;
    }

    while (v19 != v92);
    uint64_t v23 = v105.i64[1];
    uint64_t v22 = v105.i64[0];
    uint64_t v25 = v106.i64[1];
    uint64_t v24 = v106.i64[0];
    double v26 = (uint64_t *)__p;
    if (__p != v83)
    {
      do
      {
        uint64_t v27 = (double *)sub_1008560B0(*v26);
        sub_10084CE24((double *)v105.i64, v27);
        ++v26;
      }

      while (v26 != (uint64_t *)v83);
      uint64_t v23 = v105.i64[1];
      uint64_t v22 = v105.i64[0];
      uint64_t v25 = v106.i64[1];
      uint64_t v24 = v106.i64[0];
    }

    v80.i64[0] = v22;
    v80.i64[1] = v23;
    v81.i64[0] = v24;
    v81.i64[1] = v25;
    if ((sub_100857CC8(&v80, &v91, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
      goto LABEL_155;
    }
  }

LABEL_155:
    uint64_t v72 = 0LL;
    goto LABEL_174;
  }

  if (v94 == v95) {
    goto LABEL_148;
  }
  int v67 = v86;
  if (v85 == v86) {
    goto LABEL_148;
  }
  while (v85 == v67)
  {
LABEL_143:
    if (++v66 == v65) {
      goto LABEL_148;
    }
  }

  int v67 = (double ****)v85;
  while (1)
  {
    if (!*(_BYTE *)a6)
    {
      int v68 = **v66;
      char v69 = **v67;
      int v70 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v105.i8, "FFFFFFFFF");
      sub_100858868(v68, v69, (unsigned __int8 *)&v105, v70);
      if (!v105.i8[9])
      {
        BOOL v71 = v105.u8[0] != 84 && v105.u8[0] - 48 >= 0xA;
        if (!v71
          || v105.u8[1] == 84
          || v105.u8[1] - 48 <= 9
          || v105.u8[3] == 84
          || v105.u8[3] - 48 < 0xA)
        {
          break;
        }
      }
    }

    if (++v67 == v86)
    {
      int v65 = v95;
      goto LABEL_143;
    }
  }

    unsigned __int8 v73 = 0LL;
    goto LABEL_174;
  }

  if (v95 == v96) {
    goto LABEL_148;
  }
  int v68 = v87;
  if (v86 == v87) {
    goto LABEL_148;
  }
  while (v86 == v68)
  {
LABEL_143:
    if (++v67 == v66) {
      goto LABEL_148;
    }
  }

  int v68 = (double ****)v86;
  while (1)
  {
    if (!*(_BYTE *)a6)
    {
      char v69 = **v67;
      int v70 = **v68;
      BOOL v71 = *(unsigned __int8 **)(a6 + 8);
      strcpy(v106.i8, "FFFFFFFFF");
      sub_100858868(v69, v70, (unsigned __int8 *)&v106, v71);
      if (!v106.i8[9])
      {
        uint64_t v72 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
        if (!v72
          || v106.u8[1] == 84
          || v106.u8[1] - 48 <= 9
          || v106.u8[3] == 84
          || v106.u8[3] - 48 < 0xA)
        {
          break;
        }
      }
    }

    if (++v68 == v87)
    {
      char v66 = v96;
      goto LABEL_143;
    }
  }

          *(_DWORD *)(a1 + 92) = v67;
          goto LABEL_176;
        case 0xAu:
          if ((_DWORD)v26 == 2)
          {
            if ((PB::Reader::placeMark(this, v118, v26, a4) & 1) != 0) {
              return 0LL;
            }
            int v70 = *((void *)this + 1);
            BOOL v71 = *((void *)this + 2);
            while (v70 < v71 && !*((_BYTE *)this + 24))
            {
              unsigned __int8 v73 = *(char **)(a1 + 40);
              uint64_t v72 = *(void *)(a1 + 48);
              if ((unint64_t)v73 >= v72)
              {
                char v75 = (char *)*v10;
                double v76 = (v73 - (_BYTE *)*v10) >> 2;
                BOOL v77 = v76 + 1;
                double v78 = v72 - (void)v75;
                if (v78 >> 1 > v77) {
                  BOOL v77 = v78 >> 1;
                }
                else {
                  char v79 = v77;
                }
                if (v79)
                {
                  int64x2_t v80 = (char *)sub_10000956C(v11, v79);
                  char v75 = *(char **)(a1 + 32);
                  unsigned __int8 v73 = *(char **)(a1 + 40);
                }

                else
                {
                  int64x2_t v80 = 0LL;
                }

                int64x2_t v81 = &v80[4 * v76];
                *(_DWORD *)int64x2_t v81 = 0;
                double v74 = v81 + 4;
                while (v73 != v75)
                {
                  __int128 v82 = *((_DWORD *)v73 - 1);
                  v73 -= 4;
                  *((_DWORD *)v81 - 1) = v82;
                  v81 -= 4;
                }

                *(void *)(a1 + 32) = v81;
                *(void *)(a1 + 40) = v74;
                *(void *)(a1 + 48) = &v80[4 * v79];
                if (v75) {
                  operator delete(v75);
                }
              }

              else
              {
                *(_DWORD *)unsigned __int8 v73 = 0;
                double v74 = v73 + 4;
              }

              *(void *)(a1 + 40) = v74;
              __int128 v83 = *((void *)this + 1);
              if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2))
              {
LABEL_131:
                *((_BYTE *)this + 24) = 1;
                break;
              }

              *(v74 - 1) = *(_DWORD *)(*(void *)this + v83);
              BOOL v71 = *((void *)this + 2);
              int v70 = *((void *)this + 1) + 4LL;
              *((void *)this + 1) = v70;
            }

  uint64_t result = *(float *)(a2 + 200);
  v5 |= 0x800000000000uLL;
  *unint64_t v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 200) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000000000LL) == 0)
  {
LABEL_75:
    if ((v4 & 0x200000000000LL) == 0) {
      goto LABEL_76;
    }
    goto LABEL_157;
  }

  PB::TextFormatter::format(this, "maxAccelNormThresholdWithAudio", *(float *)(a1 + 256));
  double v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  double v6 = *v5;
  if ((*v5 & 0x4000000000000000LL) == 0)
  {
LABEL_74:
    if ((v6 & 0x8000000000000000LL) == 0) {
      goto LABEL_75;
    }
    goto LABEL_157;
  }

  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 200), 0x109u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  double v5 = *v4;
  if ((*v4 & 0x400000000000LL) == 0)
  {
LABEL_75:
    if ((v5 & 0x200000000000LL) == 0) {
      goto LABEL_76;
    }
    goto LABEL_157;
  }

  int64x2_t v44 = *(_DWORD *)(a2 + 108);
  v5 |= 0x20000uLL;
  *unint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_DWORD *)(a1 + 108) = v44;
  uint64_t v4 = *v3;
  double v7 = *(void *)(a2 + 364);
  if ((v7 & 0x20000) == 0)
  {
LABEL_50:
    if ((v7 & 0x40000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_157;
  }

  PB::TextFormatter::format(this, "movingGpsCountTotal", *(_DWORD *)(a1 + 148));
  double v7 = *v5;
  double v6 = *(void *)(a1 + 364);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x20000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_157;
  }

  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 0x139u);
  double v5 = *v4;
  double v6 = v4[1];
  if ((v6 & 0x20000) == 0)
  {
LABEL_50:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_157;
  }

  double v91 = *(_BYTE *)(a2 + 160);
  v3 |= 0x2000000000uLL;
  *(void *)(result + 204) = v3;
  *(_WORD *)(result + 212) = v4;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 160) = v91;
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(a2 + 212);
  unint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x20000000000LL) == 0)
  {
LABEL_77:
    if ((v2 & 0x200) == 0) {
      goto LABEL_78;
    }
    goto LABEL_157;
  }

  PB::TextFormatter::format(this, "passthru0", *(_BYTE *)(a1 + 197));
  double v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  double v5 = *(void *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x800) == 0)
  {
LABEL_76:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_157;
  }

  uint64_t result = PB::Writer::write(this, *(_BYTE *)(v3 + 199), 0x4BDu);
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(v3 + 212);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x1000) == 0)
  {
LABEL_77:
    if ((v4 & 0x100) == 0) {
      goto LABEL_78;
    }
    goto LABEL_157;
  }

void sub_100857C24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100857CC8( double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16 = *(_OWORD *)a1;
  double v17 = (a1[1] + a1[3]) * 0.5;
  uint64_t v104 = *((void *)a1 + 2);
  __int128 v18 = *((_OWORD *)a1 + 1);
  *(void *)&v101[0] = v16;
  __int128 v102 = v18;
  __int128 v103 = v16;
  double v105 = v17;
  v101[1] = v17;
  unsigned int v98 = 0LL;
  uint64_t v99 = 0LL;
  uint64_t v100 = 0LL;
  int v95 = 0LL;
  uint64_t v96 = 0LL;
  uint64_t v97 = 0LL;
  int v92 = 0LL;
  uint64_t v93 = 0LL;
  uint64_t v94 = 0LL;
  uint64_t v89 = 0LL;
  uint64_t v90 = 0LL;
  uint64_t v91 = 0LL;
  int v86 = 0LL;
  uint64_t v87 = 0LL;
  uint64_t v88 = 0LL;
  __int128 __p = 0LL;
  uint64_t v84 = 0LL;
  uint64_t v85 = 0LL;
  sub_1008563AC((double *)&v103, v101, a2, &v98, &v95, &v92, a8);
  sub_1008563AC((double *)&v103, v101, a3, &v89, &v86, &__p, a10);
  double v20 = (uint64_t *)v92;
  double v19 = v93;
  if (v92 == v93) {
    goto LABEL_77;
  }
  double v21 = v84;
  if (a5 > ((char *)v93 - (_BYTE *)v92) >> 3 || a4 > 0x63 || ((char *)v84 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v84)
    {
      while (__p == v21)
      {
LABEL_28:
        if (++v20 == v19) {
          goto LABEL_29;
        }
      }

      double v21 = (double ****)__p;
      while (1)
      {
        if (!*(_BYTE *)a6)
        {
          uint64_t v29 = *(double ***)*v20;
          unint64_t v30 = **v21;
          BOOL v31 = *(unsigned __int8 **)(a6 + 8);
          strcpy(v106.i8, "FFFFFFFFF");
          sub_100858868(v29, v30, (unsigned __int8 *)&v106, v31);
          if (!v106.i8[9])
          {
            BOOL v32 = v106.u8[0] != 84 && v106.u8[0] - 48 >= 0xA;
            if (!v32
              || v106.u8[1] == 84
              || v106.u8[1] - 48 <= 9
              || v106.u8[3] == 84
              || v106.u8[3] - 48 < 0xA)
            {
              goto LABEL_173;
            }
          }
        }

        if (++v21 == v84)
        {
          double v19 = v93;
          goto LABEL_28;
        }
      }
    }
  }

  else
  {
    int64x2_t v106 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v107 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      uint64_t v22 = (double *)sub_1008560B0(*v20);
      sub_10084CE24((double *)v106.i64, v22);
      ++v20;
    }

    while (v20 != v93);
    uint64_t v24 = v106.i64[1];
    uint64_t v23 = v106.i64[0];
    uint64_t v26 = v107.i64[1];
    uint64_t v25 = v107.i64[0];
    uint64_t v27 = (uint64_t *)__p;
    if (__p != v84)
    {
      do
      {
        uint64_t v28 = (double *)sub_1008560B0(*v27);
        sub_10084CE24((double *)v106.i64, v28);
        ++v27;
      }

      while (v27 != (uint64_t *)v84);
      uint64_t v24 = v106.i64[1];
      uint64_t v23 = v106.i64[0];
      uint64_t v26 = v107.i64[1];
      uint64_t v25 = v107.i64[0];
    }

    v81.i64[0] = v23;
    v81.i64[1] = v24;
    v82.i64[0] = v25;
    v82.i64[1] = v26;
  }

void sub_1008587C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_100858868(double **a1, double **a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  if (!a3[9])
  {
    BOOL v31 = 0LL;
    BOOL v32 = 0LL;
    uint64_t v33 = 0LL;
    v30[0] = a3;
    v30[1] = a1;
    v30[2] = a2;
    sub_100859684(0, a1, 1, a2, (uint64_t)a4, (uint64_t)&v21, (uint64_t)&v31, (uint64_t)v30);
    double v8 = v31;
    if (a3[9]) {
      goto LABEL_34;
    }
    v28[0] = a3;
    v28[1] = a4;
    double v28[2] = (unsigned __int8 *)a2;
    BOOL v9 = *a3 == 70 || a3[3] == 70;
    BOOL v10 = !v9;
    int v29 = v10 | 2;
    if (v31 == v32)
    {
      sub_10085BA7C(v28, (uint64_t)a1);
      double v8 = v31;
      if (a3[9]) {
        goto LABEL_34;
      }
    }

    v26[0] = a3;
    v26[1] = a4;
    _OWORD v26[2] = (unsigned __int8 *)a1;
    BOOL v12 = *a3 != 70 && a3[1] != 70;
    int v27 = v12 | 2;
    if (v8 != v32 || (sub_10085BBD4(v26, (uint64_t)a2), !a3[9]))
    {
      if (v31 != v32)
      {
        if (*a3 == 70 || a3[3] == 70)
        {
          sub_100858B0C((uint64_t)v31, v32);
          double v21 = 0LL;
          memset(v22, 0, 14);
          sub_100858B60((uint64_t)a3, (uint64_t)&v21, (uint64_t)v31, (uint64_t)v32);
          if (a3[9]) {
            goto LABEL_33;
          }
          int v17 = *a3;
          int v18 = a3[3];
          if (v17 == 70 || v18 == 70)
          {
            double v21 = a1;
            v22[0] = a2;
            LOBYTE(v22[1]) = 0;
            uint64_t v23 = a3;
            uint64_t v24 = a4;
            BOOL v19 = v17 != 70;
            if (v18 == 70) {
              int v20 = 2;
            }
            else {
              int v20 = 6;
            }
            int v25 = v20 | v19;
            sub_100858BF0((uint64_t)&v21, v31, v32);
            if (a3[9]) {
              goto LABEL_33;
            }
            if (*a3 == 70) {
              goto LABEL_21;
            }
          }
        }

        if (a3[1] == 70)
        {
LABEL_21:
          sub_1008590CC((uint64_t)v31, v32);
          double v21 = 0LL;
          memset(v22, 0, 14);
          sub_100859120((uint64_t)a3, (uint64_t)&v21, (uint64_t)v31, (uint64_t)v32);
          if (!a3[9])
          {
            int v13 = *a3;
            int v14 = a3[1];
            if (v13 == 70 || v14 == 70)
            {
              double v21 = a2;
              v22[0] = a1;
              LOBYTE(v22[1]) = 0;
              uint64_t v23 = a3;
              uint64_t v24 = a4;
              BOOL v15 = v13 != 70;
              if (v14 == 70) {
                int v16 = 2;
              }
              else {
                int v16 = 6;
              }
              int v25 = v16 | v15;
              sub_1008591B0((uint64_t)&v21, v31, v32);
            }
          }
        }
      }
    }

void sub_100858AD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

double sub_100858B0C(uint64_t a1, void *a2)
{
  unint64_t v2 = 126 - 2 * __clz(0x8F5C28F5C28F5C29LL * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (void *)a1) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = v2;
  }
  return sub_10085BD2C(a1, a2, (uint64_t)&v5, v3, 1);
}

uint64_t sub_100858B60(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v5 = a3;
    double v7 = (unsigned __int8 *)result;
    uint64_t v8 = a3;
    while (1)
    {
      uint64_t result = sub_10085FA34(a2, v7, v5);
      if (v7[9]) {
        break;
      }
      v8 += 200LL;
      v5 += 200LL;
      if (v8 == a4) {
        return sub_10085FB7C(a2, v7);
      }
    }
  }

  return result;
}

uint64_t sub_100858BF0(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = a2[8];
    uint64_t v42 = -1LL;
    if ((v6 & 0x8000000000000000LL) == 0)
    {
      do
      {
        uint64_t result = sub_10085FD88(v5);
        ++v42;
      }

      while (v42 < v6);
    }

    double v7 = v4 + 25;
    if (v4 + 25 == a3)
    {
      uint64_t v8 = v4;
LABEL_65:
      int v32 = *(_DWORD *)(v5 + 40);
      if ((~v32 & 6) != 0)
      {
        if (v8 != a3)
        {
          LOBYTE(v33) = 0;
          char v34 = 0;
          unint64_t v35 = v8;
          do
          {
            while (1)
            {
              int v36 = *((_DWORD *)v35 + 10);
              if (v36 != 2) {
                break;
              }
              if (*((_DWORD *)v35 + 30) != 2) {
                goto LABEL_89;
              }
              char v34 = 1;
              BOOL v16 = v35 == v4;
              v35 += 25;
              if (v16) {
                goto LABEL_79;
              }
            }

            if (v36 != 1) {
              goto LABEL_89;
            }
            int v33 = *((_DWORD *)v35 + 30);
            if (v33 != 1) {
              goto LABEL_89;
            }
            BOOL v16 = v35 == v4;
            v35 += 25;
          }

          while (!v16);
          if ((v34 & 1) == 0) {
            goto LABEL_84;
          }
          LOBYTE(v33) = 1;
LABEL_79:
          uint64_t v37 = *(unsigned __int8 **)(v5 + 24);
          if (*v37 - 58 <= 0xFFFFFFF7)
          {
            *uint64_t v37 = 50;
            int v32 = *(_DWORD *)(v5 + 40);
            uint64_t v37 = *(unsigned __int8 **)(v5 + 24);
          }

          int v38 = v32 | 1;
          *(_DWORD *)(v5 + 40) = v38;
          if (v37[3] - 58 <= 0xFFFFFFF6)
          {
            v37[3] = 49;
            int v38 = *(_DWORD *)(v5 + 40);
          }

          int v32 = v38 | 4;
          *(_DWORD *)(v5 + 40) = v32;
          if ((v33 & 1) != 0)
          {
LABEL_84:
            v32 |= 2u;
            *(_DWORD *)(v5 + 40) = v32;
          }
        }

        BOOL v39 = v32 == 7 || *(_BYTE *)(*(void *)(v5 + 24) + 9LL) != 0;
        *(_BYTE *)(v5 + 16) = v39;
      }

double sub_1008590CC(uint64_t a1, void *a2)
{
  unint64_t v2 = 126 - 2 * __clz(0x8F5C28F5C28F5C29LL * (((uint64_t)a2 - a1) >> 3));
  if (a2 == (void *)a1) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = v2;
  }
  return sub_10085FEEC(a1, a2, (uint64_t)&v5, v3, 1);
}

uint64_t sub_100859120(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v5 = a3;
    double v7 = (unsigned __int8 *)result;
    uint64_t v8 = a3;
    while (1)
    {
      uint64_t result = sub_100863BDC(a2, v7, v5);
      if (v7[9]) {
        break;
      }
      v8 += 200LL;
      v5 += 200LL;
      if (v8 == a4) {
        return sub_100863D24(a2, v7);
      }
    }
  }

  return result;
}

uint64_t sub_1008591B0(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = a2[18];
    uint64_t v42 = -1LL;
    if ((v6 & 0x8000000000000000LL) == 0)
    {
      do
      {
        uint64_t result = sub_100863F30(v5);
        ++v42;
      }

      while (v42 < v6);
    }

    double v7 = v4 + 25;
    if (v4 + 25 == a3)
    {
      uint64_t v8 = v4;
LABEL_65:
      int v32 = *(_DWORD *)(v5 + 40);
      if ((~v32 & 6) != 0)
      {
        if (v8 != a3)
        {
          LOBYTE(v33) = 0;
          char v34 = 0;
          unint64_t v35 = v8;
          do
          {
            while (1)
            {
              int v36 = *((_DWORD *)v35 + 10);
              if (v36 != 2) {
                break;
              }
              if (*((_DWORD *)v35 + 30) != 2) {
                goto LABEL_89;
              }
              char v34 = 1;
              BOOL v16 = v35 == v4;
              v35 += 25;
              if (v16) {
                goto LABEL_79;
              }
            }

            if (v36 != 1) {
              goto LABEL_89;
            }
            int v33 = *((_DWORD *)v35 + 30);
            if (v33 != 1) {
              goto LABEL_89;
            }
            BOOL v16 = v35 == v4;
            v35 += 25;
          }

          while (!v16);
          if ((v34 & 1) == 0) {
            goto LABEL_84;
          }
          LOBYTE(v33) = 1;
LABEL_79:
          uint64_t v37 = *(unsigned __int8 **)(v5 + 24);
          if (*v37 - 58 <= 0xFFFFFFF7)
          {
            *uint64_t v37 = 50;
            int v32 = *(_DWORD *)(v5 + 40);
            uint64_t v37 = *(unsigned __int8 **)(v5 + 24);
          }

          int v38 = v32 | 1;
          *(_DWORD *)(v5 + 40) = v38;
          if (v37[1] - 58 <= 0xFFFFFFF6)
          {
            v37[1] = 49;
            int v38 = *(_DWORD *)(v5 + 40);
          }

          int v32 = v38 | 4;
          *(_DWORD *)(v5 + 40) = v32;
          if ((v33 & 1) != 0)
          {
LABEL_84:
            v32 |= 2u;
            *(_DWORD *)(v5 + 40) = v32;
          }
        }

        BOOL v39 = v32 == 7 || *(_BYTE *)(*(void *)(v5 + 24) + 9LL) != 0;
        *(_BYTE *)(v5 + 16) = v39;
      }

void sub_100859684(int a1, double **a2, int a3, double **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v53 = 0LL;
  BOOL v54 = 0LL;
  uint64_t v55 = 0LL;
  __int128 __p = 0LL;
  uint64_t v51 = 0LL;
  uint64_t v52 = 0LL;
  BOOL v16 = *a2;
  int v17 = a2[1];
  if ((unint64_t)((char *)v17 - (char *)v16) > 0x1F)
  {
    uint64_t v42 = 0LL;
    uint64_t v43 = -1LL;
    uint64_t v44 = -1LL;
    sub_100849AB0(&v53, v16, v17, a6, a5, (uint64_t)&v42, 0xAuLL);
    int v18 = v53;
    BOOL v19 = v54;
    if (v53 != v54)
    {
      __asm { FMOV            V0.2D, #1.0 }

      do
      {
        float64x2_t v25 = *(float64x2_t *)(v18 + 4);
        float64x2_t v26 = *(float64x2_t *)(v18 + 6);
        float64x2_t v27 = vabsq_f64(v25);
        float64x2_t v28 = vsubq_f64( v25,  (float64x2_t)vbslq_s8( (int8x16_t)vcgtq_f64(_Q0, v27),  (int8x16_t)xmmword_101339490,  (int8x16_t)vmulq_f64(v27, (float64x2_t)xmmword_101339490)));
        float64x2_t v29 = vabsq_f64(v26);
        *((float64x2_t *)v18 + 2) = v28;
        *((float64x2_t *)v18 + 3) = vaddq_f64( v26,  (float64x2_t)vbslq_s8( (int8x16_t)vcgtq_f64(_Q0, v29),  (int8x16_t)xmmword_101339490,  (int8x16_t)vmulq_f64(v29, (float64x2_t)xmmword_101339490)));
        v18 += 15;
      }

      while (v18 != v19);
    }
  }

  uint64_t v51 = 0LL;
  uint64_t v30 = *a4;
  BOOL v31 = a4[1];
  if ((unint64_t)((char *)v31 - (char *)*a4) > 0x1F)
  {
    uint64_t v42 = 1LL;
    uint64_t v43 = -1LL;
    uint64_t v44 = -1LL;
    sub_100849AB0(&__p, v30, v31, a6, a5, (uint64_t)&v42, 0xAuLL);
    int v32 = (float64x2_t *)__p;
    int v33 = v51;
    if (__p != v51)
    {
      __asm { FMOV            V0.2D, #1.0 }

      do
      {
        float64x2_t v35 = v32[2];
        float64x2_t v36 = v32[3];
        float64x2_t v37 = vabsq_f64(v35);
        float64x2_t v38 = vsubq_f64( v35,  (float64x2_t)vbslq_s8( (int8x16_t)vcgtq_f64(_Q0, v37),  (int8x16_t)xmmword_101339490,  (int8x16_t)vmulq_f64(v37, (float64x2_t)xmmword_101339490)));
        float64x2_t v39 = vabsq_f64(v36);
        void v32[2] = v38;
        v32[3] = vaddq_f64( v36,  (float64x2_t)vbslq_s8( (int8x16_t)vcgtq_f64(_Q0, v39),  (int8x16_t)xmmword_101339490,  (int8x16_t)vmulq_f64(v39, (float64x2_t)xmmword_101339490)));
        int v32 = (float64x2_t *)((char *)v32 + 120);
      }

      while (v32 != v33);
    }
  }

  LODWORD(v42) = a1;
  uint64_t v43 = (uint64_t)a2;
  LODWORD(v44) = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v48 = a7;
  uint64_t v49 = a8;
  uint64_t v40 = a5;
  uint64_t v41 = a5;
  sub_100859898( &v53,  (double **)&__p,  (uint64_t)&v42,  (uint64_t)&v41,  (uint64_t)&v40,  (uint64_t)&v41,  (uint64_t)&v40,  0x10uLL);
  if (__p)
  {
    uint64_t v51 = (float64x2_t *)__p;
    operator delete(__p);
  }

  if (v53)
  {
    BOOL v54 = v53;
    operator delete(v53);
  }

void sub_100859868( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  char v22 = *(void **)(v20 - 88);
  if (v22)
  {
    *(void *)(v20 - 80) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100859898( double **a1, double **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  int v12 = *a1;
  int v11 = a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * (v11 - *a1) <= a8 || (v15 = *a2, int v14 = a2[1], 0xEEEEEEEEEEEEEEEFLL * (v14 - *a2) <= a8))
  {
    if (v12 == v11)
    {
      return 1LL;
    }

    else
    {
      float64x2_t v38 = a2[1];
      while (1)
      {
        float64x2_t v39 = *a2;
        if (*a2 != v38) {
          break;
        }
LABEL_50:
        v12 += 15;
        if (v12 == v11) {
          return 1LL;
        }
      }

      while ((sub_10085A3D8(a3, v12, v39) & 1) != 0)
      {
        v39 += 15;
        if (v39 == a2[1])
        {
          int v11 = a1[1];
          float64x2_t v38 = v39;
          goto LABEL_50;
        }
      }

      return 0LL;
    }
  }

  else
  {
    uint64_t v48 = 0LL;
    uint64_t v49 = 0LL;
    uint64_t v50 = 0LL;
    __int128 __p = 0LL;
    uint64_t v46 = 0LL;
    uint64_t v47 = 0LL;
    v44[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v44[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    if (v12 != v11)
    {
      do
      {
        sub_10084CE24((double *)v44, v12 + 4);
        int v17 = v49;
        if (v49 >= v50)
        {
          uint64_t v19 = (v49 - (_BYTE *)v48) >> 3;
          if ((unint64_t)(v19 + 1) >> 61) {
LABEL_54:
          }
            sub_100007008();
          unint64_t v20 = (v50 - (_BYTE *)v48) >> 2;
          if (v20 <= v19 + 1) {
            unint64_t v20 = v19 + 1;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            char v22 = (char *)sub_1000071BC((uint64_t)&v50, v21);
          }
          else {
            char v22 = 0LL;
          }
          uint64_t v23 = (double **)&v22[8 * v19];
          *uint64_t v23 = v12;
          int v18 = (char *)(v23 + 1);
          float64x2_t v25 = (char *)v48;
          int v24 = v49;
          if (v49 != v48)
          {
            do
            {
              float64x2_t v26 = (double *)*((void *)v24 - 1);
              v24 -= 8;
              *--uint64_t v23 = v26;
            }

            while (v24 != v25);
            int v24 = (char *)v48;
          }

          uint64_t v48 = v23;
          uint64_t v49 = v18;
          uint64_t v50 = &v22[8 * v21];
          if (v24) {
            operator delete(v24);
          }
        }

        else
        {
          *(void *)uint64_t v49 = v12;
          int v18 = v17 + 8;
        }

        uint64_t v49 = v18;
        v12 += 15;
      }

      while (v12 != a1[1]);
      int v15 = *a2;
      int v14 = a2[1];
    }

    if (v15 != v14)
    {
      do
      {
        sub_10084CE24((double *)v44, v15 + 4);
        float64x2_t v27 = v46;
        if (v46 >= v47)
        {
          uint64_t v29 = (v46 - (_BYTE *)__p) >> 3;
          unint64_t v30 = (v47 - (_BYTE *)__p) >> 2;
          if (v30 <= v29 + 1) {
            unint64_t v30 = v29 + 1;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31) {
            int v32 = (char *)sub_1000071BC((uint64_t)&v47, v31);
          }
          else {
            int v32 = 0LL;
          }
          int v33 = (double **)&v32[8 * v29];
          *int v33 = v15;
          float64x2_t v28 = (char *)(v33 + 1);
          float64x2_t v35 = (char *)__p;
          char v34 = v46;
          if (v46 != __p)
          {
            do
            {
              float64x2_t v36 = (double *)*((void *)v34 - 1);
              v34 -= 8;
              *--int v33 = v36;
            }

            while (v34 != v35);
            char v34 = (char *)__p;
          }

          __int128 __p = v33;
          uint64_t v46 = v28;
          uint64_t v47 = &v32[8 * v31];
          if (v34) {
            operator delete(v34);
          }
        }

        else
        {
          *(void *)uint64_t v46 = v15;
          float64x2_t v28 = v27 + 8;
        }

        uint64_t v46 = v28;
        v15 += 15;
      }

      while (v15 != a2[1]);
    }

    uint64_t v37 = sub_100859BFC((double *)v44, (uint64_t **)&v48, (uint64_t **)&__p, 0LL, a8, a3, a4, a5, a6, a7, (uint64_t)&v51);
    if (__p)
    {
      uint64_t v46 = (char *)__p;
      operator delete(__p);
    }

    if (v48)
    {
      uint64_t v49 = (char *)v48;
      operator delete(v48);
    }
  }

  return v37;
}

void sub_100859BC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, uint64_t a22, void *a23, uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100859BFC( double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v17 = (*a1 + a1[2]) * 0.5;
  __int128 v18 = *((_OWORD *)a1 + 1);
  __int128 v77 = *(_OWORD *)a1;
  uint64_t v79 = *((void *)&v18 + 1);
  v75[1] = *((double *)&v77 + 1);
  __int128 v76 = v18;
  double v78 = v17;
  v75[0] = v17;
  BOOL v72 = 0LL;
  uint64_t v73 = 0LL;
  uint64_t v74 = 0LL;
  char v69 = 0LL;
  int v70 = 0LL;
  uint64_t v71 = 0LL;
  char v66 = 0LL;
  int v67 = 0LL;
  uint64_t v68 = 0LL;
  __int128 v63 = 0LL;
  BOOL v64 = 0LL;
  uint64_t v65 = 0LL;
  char v60 = 0LL;
  uint64_t v61 = 0LL;
  uint64_t v62 = 0LL;
  __int128 __p = 0LL;
  int64x2_t v58 = 0LL;
  uint64_t v59 = 0LL;
  sub_10084D01C((double *)&v77, v75, a2, &v72, &v69, &v66);
  sub_10084D01C((double *)&v77, v75, a3, &v63, &v60, &__p);
  unint64_t v20 = (double **)v66;
  uint64_t v19 = v67;
  if (v66 != v67)
  {
    unint64_t v21 = v58;
    if (a5 > ((char *)v67 - (_BYTE *)v66) >> 3 || a4 > 0x63 || ((char *)v58 - (_BYTE *)__p) >> 3 < a5)
    {
      if (__p != v58)
      {
        while (1)
        {
          char v22 = (double **)__p;
          if (__p != v21) {
            break;
          }
LABEL_8:
          if (++v20 == v19) {
            goto LABEL_18;
          }
        }

        while ((sub_10085A3D8(a6, *v20, *v22) & 1) != 0)
        {
          if (++v22 == v58)
          {
            uint64_t v19 = v67;
            unint64_t v21 = v22;
            goto LABEL_8;
          }
        }

        goto LABEL_95;
      }
    }

    else
    {
      int64x2_t v80 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v81 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_10084CE24((double *)v80.i64, *v20++ + 4);
      while (v20 != v67);
      uint64_t v24 = v80.i64[1];
      uint64_t v23 = v80.i64[0];
      uint64_t v26 = v81.i64[1];
      uint64_t v25 = v81.i64[0];
      float64x2_t v27 = (double **)__p;
      if (__p != v58)
      {
        do
          sub_10084CE24((double *)v80.i64, *v27++ + 4);
        while (v27 != v58);
        uint64_t v24 = v80.i64[1];
        uint64_t v23 = v80.i64[0];
        uint64_t v26 = v81.i64[1];
        uint64_t v25 = v81.i64[0];
      }

      v55.i64[0] = v23;
      v55.i64[1] = v24;
      v56.i64[0] = v25;
      v56.i64[1] = v26;
    }

void sub_10085A334( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085A3D8(uint64_t a1, double *a2, double *a3)
{
  double v6 = a2[4];
  double v7 = a2[6];
  if (v7 - v6 >= 360.0) {
    goto LABEL_11;
  }
  double v8 = a3[4];
  double v9 = a3[6];
  double v10 = v9 - v8;
  if (v9 - v8 >= 360.0) {
    goto LABEL_11;
  }
  double v11 = vabdd_f64(v8, v6);
  double v12 = 180.0;
  if (v11 == 180.0) {
    goto LABEL_4;
  }
  double v13 = v8 - v6;
  if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v17 = fabs(v11 + -180.0);
    double v12 = 180.0;
    if (v11 < 180.0) {
      double v11 = 180.0;
    }
    double v18 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
    if (v17 <= v18) {
      goto LABEL_4;
    }
  }

  double v12 = 180.0;
  if (v13 <= 180.0)
  {
    if (v13 >= -180.0) {
      goto LABEL_5;
    }
    double v12 = fmod(v13 + -180.0, 360.0) + 180.0;
LABEL_4:
    double v13 = v12;
    goto LABEL_5;
  }

  double v13 = fmod(v13 + 180.0, 360.0) + -180.0;
  if (v13 == -180.0) {
    goto LABEL_4;
  }
  BOOL v19 = ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 > 0x3FE
     && (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v19 || *(void *)&v13 == 0LL)
  {
    double v12 = 180.0;
    double v21 = fabs(v13 + 180.0);
    double v22 = fabs(v13);
    if (v22 < 180.0) {
      double v22 = 180.0;
    }
    double v23 = v22 >= 1.0 ? v22 * 2.22044605e-16 : 2.22044605e-16;
    if (v21 <= v23) {
      goto LABEL_4;
    }
  }

uint64_t sub_10085A614( double *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v17 = *(_OWORD *)a1;
  double v18 = (a1[1] + a1[3]) * 0.5;
  uint64_t v79 = *((void *)a1 + 2);
  __int128 v19 = *((_OWORD *)a1 + 1);
  *(void *)&v76[0] = v17;
  __int128 v77 = v19;
  __int128 v78 = v17;
  double v80 = v18;
  v76[1] = v18;
  uint64_t v73 = 0LL;
  uint64_t v74 = 0LL;
  uint64_t v75 = 0LL;
  int v70 = 0LL;
  uint64_t v71 = 0LL;
  uint64_t v72 = 0LL;
  int v67 = 0LL;
  uint64_t v68 = 0LL;
  uint64_t v69 = 0LL;
  BOOL v64 = 0LL;
  uint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  uint64_t v61 = 0LL;
  uint64_t v62 = 0LL;
  uint64_t v63 = 0LL;
  __int128 __p = 0LL;
  uint64_t v59 = 0LL;
  uint64_t v60 = 0LL;
  sub_10084D01C((double *)&v78, v76, a2, &v73, &v70, &v67);
  sub_10084D01C((double *)&v78, v76, a3, &v64, &v61, &__p);
  double v21 = (double **)v67;
  unint64_t v20 = v68;
  if (v67 != v68)
  {
    double v22 = v59;
    if (a5 > ((char *)v68 - (_BYTE *)v67) >> 3 || a4 > 0x63 || ((char *)v59 - (_BYTE *)__p) >> 3 < a5)
    {
      if (__p != v59)
      {
        while (1)
        {
          double v23 = (double **)__p;
          if (__p != v22) {
            break;
          }
LABEL_8:
          if (++v21 == v20) {
            goto LABEL_18;
          }
        }

        while ((sub_10085A3D8(a6, *v21, *v23) & 1) != 0)
        {
          if (++v23 == v59)
          {
            unint64_t v20 = v68;
            double v22 = v23;
            goto LABEL_8;
          }
        }

        goto LABEL_95;
      }
    }

    else
    {
      int64x2_t v81 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v82 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
        sub_10084CE24((double *)v81.i64, *v21++ + 4);
      while (v21 != v68);
      uint64_t v25 = v81.i64[1];
      uint64_t v24 = v81.i64[0];
      uint64_t v27 = v82.i64[1];
      uint64_t v26 = v82.i64[0];
      float64x2_t v28 = (double **)__p;
      if (__p != v59)
      {
        do
          sub_10084CE24((double *)v81.i64, *v28++ + 4);
        while (v28 != v59);
        uint64_t v25 = v81.i64[1];
        uint64_t v24 = v81.i64[0];
        uint64_t v27 = v82.i64[1];
        uint64_t v26 = v82.i64[0];
      }

      v56.i64[0] = v24;
      v56.i64[1] = v25;
      v57.i64[0] = v26;
      v57.i64[1] = v27;
      if ((sub_100859BFC(&v56, &v67, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
        goto LABEL_95;
      }
    }

void sub_10085AD58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085ADFC( int a1, void *a2, uint64_t a3, int a4, __int128 **a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 **a12)
{
  uint64_t i = (void *)a6;
  double v13 = (double *)a3;
  if (*(_BYTE *)(a3 + 96) && (unint64_t)(*(void *)(a3 + 80) + 1LL) < *(void *)(a3 + 88)
    || *(_BYTE *)(a6 + 96) && (unint64_t)(*(void *)(a6 + 80) + 1LL) < *(void *)(a6 + 88))
  {
    return 1LL;
  }

  double v14 = (_OWORD *)*a2;
  double v15 = (_OWORD *)a2[1];
  uint64_t v69 = a5[1];
  int v70 = *a5;
  int v67 = *(_DWORD *)a6;
  uint64_t v73 = (double *)(a6 + 32);
  int v16 = *(_DWORD *)a3;
  uint64_t v17 = *(void *)(a3 + 104);
  uint64_t v19 = *(void *)(a3 + 64);
  uint64_t v18 = *(void *)(a3 + 72);
  unint64_t v20 = (_OWORD *)(*a2 + 16 * v19);
  if (v19 != v18)
  {
    uint64_t v71 = *(void *)(a3 + 72);
    double v21 = &v14[v19];
    uint64_t v22 = 16 * v18 - 16 * v19;
    double v23 = v21;
    while (1)
    {
      __int128 v24 = v21[1];
      ++v21;
      __int128 v74 = v24;
      ++v19;
      ++v17;
      double v23 = v21;
      v22 -= 16LL;
      if (!v22) {
        return 1LL;
      }
    }

    uint64_t i = (void *)a6;
    unint64_t v20 = v23;
    uint64_t v18 = v71;
  }

  uint64_t result = 1LL;
  int64x2_t v55 = &v14[v18];
  if (v20 != v55)
  {
    uint64_t v26 = &v14[v20 != v14];
    uint64_t v60 = v20 + 1;
    if (v20 + 1 != v15) {
      uint64_t v26 = v20 + 1;
    }
    uint64_t v27 = v26 + 1;
    float64x2_t v28 = &v14[v26 != v14];
    if (v27 != v15) {
      float64x2_t v28 = v27;
    }
    uint64_t v59 = v28;
    uint64_t v72 = v13 + 4;
    uint64_t v68 = v13;
    uint64_t v53 = v15;
    uint64_t v54 = v14;
    while (1)
    {
      __int128 v74 = *v20;
      v90[0] = v13;
      v90[1] = v19;
      int64x2_t v58 = v20;
      v90[2] = v20;
      v90[3] = v60;
      v90[4] = v59;
      v90[5] = v14;
      v90[6] = v15;
      char v91 = 1;
      char v92 = 0;
      uint64_t v29 = i[8];
      uint64_t v30 = i[9];
      unint64_t v31 = &v70[v29];
      uint64_t v32 = i[13];
      uint64_t v61 = v17;
      if (v29 != v30)
      {
        uint64_t v48 = 16 * v30 - 16 * v29;
        uint64_t v49 = &v70[v29];
        while (1)
        {
          __int128 v50 = v49[1];
          ++v49;
          __int128 v74 = v50;
          ++v29;
          ++v32;
          unint64_t v31 = v49;
          v48 -= 16LL;
          if (!v48) {
            goto LABEL_61;
          }
        }
      }

      uint64_t v63 = &v70[v30];
      if (v31 != v63) {
        break;
      }
LABEL_61:
      uint64_t v17 = v61 + 1;
      uint64_t i = (void *)a6;
      double v13 = v68;
      double v15 = v53;
      double v14 = v54;
LABEL_62:
      unint64_t v20 = v58 + 1;
      char v51 = v60;
      ++v19;
      uint64_t v52 = v59 + 1;
      if (v59 + 1 == v15) {
        uint64_t v52 = &v14[v59 != v14];
      }
      uint64_t v59 = v52;
      ++v60;
      if (v51 == v55) {
        return 1LL;
      }
    }

    int v33 = v31 + 1;
    int64x2_t v34 = &v70[v31 != v70];
    if (v31 + 1 != v69) {
      int64x2_t v34 = v31 + 1;
    }
    int64x2_t v35 = v34 + 1;
    int64x2_t v36 = &v70[v34 != v70];
    if (v35 == v69) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = v35;
    }
    uint64_t v62 = v61 + 1;
    uint64_t i = (void *)a6;
    while (1)
    {
      __int128 v74 = *v31;
      if (sub_10084F3DC(-v67, (double *)&v74, v73, v72))
      {
LABEL_57:
        double v13 = v68;
        double v15 = v53;
        double v14 = v54;
        uint64_t v17 = v62;
        goto LABEL_62;
      }

      *(void *)&__int128 v38 = -1LL;
      *((void *)&v38 + 1) = -1LL;
      if (a1 == a4 && *((void *)v68 + 2) == i[2] && *((void *)v68 + 3) == i[3])
      {
        if (a7)
        {
          if (v19 < v29 && (a8 & 1) != 0)
          {
LABEL_37:
            if (v32 == v62 || !v19 && *((void *)v68 + 11) - 2LL <= v29) {
              goto LABEL_52;
            }
            goto LABEL_40;
          }

          if (v19 >= v29) {
            goto LABEL_52;
          }
        }

        else if (a8)
        {
          goto LABEL_37;
        }
      }

void **sub_10085B388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  double v6 = a6;
  uint64_t v49 = a6;
  v33[0] = a1;
  v33[1] = a2;
  v34[1] = a1;
  void v34[2] = a2;
  v35[1] = a2;
  id v35[2] = a1;
  sub_100850D28(a1, a2, (uint64_t)&v36);
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  if (v42 == 100) {
    return v6;
  }
  __int128 v15 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)unint64_t v31 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)&v31[16] = v15;
  uint64_t v32 = *(void *)(a3 + 192);
  __int128 v16 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)&v27[16] = *(_OWORD *)(a3 + 96);
  __int128 v28 = v16;
  __int128 v17 = *(_OWORD *)(a3 + 144);
  __int128 v29 = *(_OWORD *)(a3 + 128);
  __int128 v30 = v17;
  __int128 v18 = *(_OWORD *)(a3 + 48);
  v26[0] = *(_OWORD *)(a3 + 32);
  v26[1] = v18;
  __int128 v19 = *(_OWORD *)(a3 + 80);
  _OWORD v26[2] = *(_OWORD *)(a3 + 64);
  *(_OWORD *)uint64_t v27 = v19;
  __int128 v20 = *(_OWORD *)(a3 + 16);
  __int128 v24 = *(_OWORD *)a3;
  __int128 v25 = v20;
  if (v42 > 0x6Cu)
  {
    if (v42 == 116)
    {
      sub_1008500AC(a1, a2, (uint64_t)&v24, (__int128 *)&v36, (uint64_t)&v42, (uint64_t)v34);
LABEL_21:
      double v23 = v6;
      sub_10085B614(&v23, (uint64_t)&v24);
      return v6;
    }

    if (v42 == 109)
    {
      if (v46 == 1) {
        sub_10084FA5C(a1, a2, (uint64_t)&v24, (__int128 *)&v36, (uint64_t)&v42, (uint64_t)v34);
      }
      else {
        sub_10084FD84(a2, a1, (uint64_t)&v24, (__int128 *)&v36, (uint64_t)&v42, (uint64_t)v35);
      }
      goto LABEL_21;
    }
  }

  else
  {
    if (v42 == 99)
    {
      if (!v43)
      {
        if (v45)
        {
          sub_10085059C(a1, a2, (uint64_t)&v24, (uint64_t)&v36, (uint64_t)&v42, (uint64_t)v34);
        }

        else
        {
          sub_100850A90(a1, a2, (uint64_t)&v24, (uint64_t)&v36, (uint64_t)&v42, (uint64_t)v34);
          LODWORD(v25) = 5;
        }

        goto LABEL_21;
      }

      sub_10085B814(a1, a2, &v24, &v49, (uint64_t)v33, (uint64_t)v34);
      return v49;
    }

    if (v42 == 105)
    {
      LODWORD(v25) = 2;
      if (!v36) {
        sub_10124CD6C(v12, v13, v14);
      }
      __int128 v24 = v37;
      *(_OWORD *)&v27[8] = v38;
      *(_OWORD *)&v31[8] = v40;
      *(void *)&v27[24] = v39;
      *(void *)&v31[24] = v41;
      BOOL v21 = v44 == 1;
      DWORD2(v26[5 * (v44 != 1)]) = 1;
      DWORD2(v26[5 * v21]) = 2;
      goto LABEL_21;
    }
  }

  if (v42 == 101 && !v43)
  {
    sub_100850A90(a1, a2, (uint64_t)&v24, (uint64_t)&v36, (uint64_t)&v42, (uint64_t)v34);
    goto LABEL_21;
  }

  return v6;
}

void ***sub_10085B614(void ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (char *)(*a1)[1];
  double v6 = *a1;
  double v9 = (char *)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  double v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v20 = 0x8F5C28F5C28F5C29LL * ((v5 - (_BYTE *)*v4) >> 3);
    unint64_t v21 = v20 + 1;
    if (v20 + 1 > 0x147AE147AE147AELL) {
      sub_100007008();
    }
    unint64_t v22 = 0x8F5C28F5C28F5C29LL * ((v8 - (_BYTE *)*v4) >> 3);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0xA3D70A3D70A3D7LL) {
      unint64_t v23 = 0x147AE147AE147AELL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23) {
      __int128 v24 = (char *)sub_10085BA34(v7, v23);
    }
    else {
      __int128 v24 = 0LL;
    }
    __int128 v25 = &v24[200 * v20];
    uint64_t v26 = &v24[200 * v23];
    *(_OWORD *)__int128 v25 = *(_OWORD *)a2;
    __int128 v27 = *(_OWORD *)(a2 + 16);
    __int128 v28 = *(_OWORD *)(a2 + 32);
    __int128 v29 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v25 + 3) = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v25 + 4) = v29;
    *((_OWORD *)v25 + 1) = v27;
    *((_OWORD *)v25 + 2) = v28;
    __int128 v30 = *(_OWORD *)(a2 + 80);
    __int128 v31 = *(_OWORD *)(a2 + 96);
    __int128 v32 = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v25 + 7) = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v25 + 8) = v32;
    *((_OWORD *)v25 + 5) = v30;
    *((_OWORD *)v25 + 6) = v31;
    __int128 v33 = *(_OWORD *)(a2 + 144);
    __int128 v34 = *(_OWORD *)(a2 + 160);
    __int128 v35 = *(_OWORD *)(a2 + 176);
    *((void *)v25 + 24) = *(void *)(a2 + 192);
    *((_OWORD *)v25 + 10) = v34;
    *((_OWORD *)v25 + 11) = v35;
    *((_OWORD *)v25 + 9) = v33;
    __int128 v19 = v25 + 200;
    __int128 v37 = (char *)*v4;
    uint64_t v36 = (char *)v4[1];
    if (v36 != *v4)
    {
      do
      {
        *(_OWORD *)(v25 - 200) = *(_OWORD *)(v36 - 200);
        __int128 v38 = *(_OWORD *)(v36 - 184);
        __int128 v39 = *(_OWORD *)(v36 - 168);
        __int128 v40 = *(_OWORD *)(v36 - 152);
        *(_OWORD *)(v25 - 136) = *(_OWORD *)(v36 - 136);
        *(_OWORD *)(v25 - 152) = v40;
        *(_OWORD *)(v25 - 168) = v39;
        *(_OWORD *)(v25 - 184) = v38;
        __int128 v41 = *(_OWORD *)(v36 - 120);
        __int128 v42 = *(_OWORD *)(v36 - 104);
        __int128 v43 = *(_OWORD *)(v36 - 88);
        *(_OWORD *)(v25 - 72) = *(_OWORD *)(v36 - 72);
        *(_OWORD *)(v25 - 88) = v43;
        *(_OWORD *)(v25 - 104) = v42;
        *(_OWORD *)(v25 - 120) = v41;
        __int128 v44 = *(_OWORD *)(v36 - 56);
        __int128 v45 = *(_OWORD *)(v36 - 40);
        __int128 v46 = *(_OWORD *)(v36 - 24);
        *((void *)v25 - 1) = *((void *)v36 - 1);
        *(_OWORD *)(v25 - 24) = v46;
        *(_OWORD *)(v25 - 40) = v45;
        *(_OWORD *)(v25 - 56) = v44;
        v25 -= 200;
        v36 -= 200;
      }

      while (v36 != v37);
      uint64_t v36 = (char *)*v4;
    }

    *uint64_t v4 = v25;
    v4[1] = v19;
    v4[2] = v26;
    if (v36) {
      operator delete(v36);
    }
  }

  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    __int128 v10 = *(_OWORD *)(a2 + 16);
    __int128 v11 = *(_OWORD *)(a2 + 32);
    __int128 v12 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v5 + 3) = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v5 + 4) = v12;
    *((_OWORD *)v5 + 1) = v10;
    *((_OWORD *)v5 + 2) = v11;
    __int128 v13 = *(_OWORD *)(a2 + 80);
    __int128 v14 = *(_OWORD *)(a2 + 96);
    __int128 v15 = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v5 + 7) = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v5 + 8) = v15;
    *((_OWORD *)v5 + 5) = v13;
    *((_OWORD *)v5 + 6) = v14;
    __int128 v16 = *(_OWORD *)(a2 + 144);
    __int128 v17 = *(_OWORD *)(a2 + 160);
    __int128 v18 = *(_OWORD *)(a2 + 176);
    *((void *)v5 + 24) = *(void *)(a2 + 192);
    *((_OWORD *)v5 + 10) = v17;
    *((_OWORD *)v5 + 11) = v18;
    *((_OWORD *)v5 + 9) = v16;
    __int128 v19 = v5 + 200;
  }

  v4[1] = v19;
  return a1;
}

void sub_10085B814(uint64_t a1, uint64_t a2, __int128 *a3, void ***a4, uint64_t a5, uint64_t a6)
{
  __int128 v9 = a3[11];
  *(_OWORD *)__int128 v44 = a3[10];
  *(_OWORD *)&v44[16] = v9;
  uint64_t v45 = *((void *)a3 + 24);
  __int128 v10 = a3[7];
  *(_OWORD *)&v40[16] = a3[6];
  __int128 v41 = v10;
  __int128 v11 = a3[9];
  __int128 v42 = a3[8];
  __int128 v43 = v11;
  __int128 v12 = a3[3];
  __int128 v37 = a3[2];
  __int128 v38 = v12;
  __int128 v13 = a3[5];
  __int128 v39 = a3[4];
  *(_OWORD *)__int128 v40 = v13;
  __int128 v14 = a3[1];
  __int128 v35 = *a3;
  __int128 v36 = v14;
  int v15 = *(_DWORD *)(a5 + 256);
  if (*(_DWORD *)(a5 + 252) != 1) {
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(a6 + 8);
  __int128 v17 = *(double **)(v16 + 16);
  __int128 v18 = *(double **)(v16 + 24);
  if (!*(_BYTE *)(v16 + 80))
  {
    sub_100853948(*(void *)(a6 + 8), *(double **)(v16 + 24), v16 + 32);
    *(_OWORD *)(v16 + 64) = *(_OWORD *)*(void *)(v16 + 32);
    *(_BYTE *)(v16 + 80) = 1;
  }

  uint64_t v19 = sub_100845638(v17, v18, (double *)(v16 + 64));
  switch((_DWORD)v19)
  {
    case 1:
      int v22 = 2;
      break;
    case 0:
      goto LABEL_12;
    case 0xFFFFFFFF:
      int v22 = 1;
      break;
    default:
      goto LABEL_10;
  }

  DWORD2(v37) = v22;
LABEL_10:
  DWORD2(v41) = 3;
  LODWORD(v36) = 5;
  if (*(void *)(a5 + 64) <= 1uLL) {
    sub_10124CD6C(v19, v20, v21);
  }
  __int128 v35 = *(_OWORD *)(a5 + 88);
  *(_OWORD *)&v40[8] = *(_OWORD *)(a5 + 160);
  uint64_t v23 = *(void *)(a5 + 176);
  *(_OWORD *)&v44[8] = *(_OWORD *)(a5 + 184);
  uint64_t v24 = *(void *)(a5 + 200);
  *(void *)&v40[24] = v23;
  *(void *)&v44[24] = v24;
  __int128 v34 = *a4;
  sub_10085B614(&v34, (uint64_t)&v35);
LABEL_12:
  if (v15 != 1) {
    return;
  }
  uint64_t v25 = *(void *)(a6 + 16);
  uint64_t v26 = *(double **)(v25 + 16);
  __int128 v27 = *(double **)(v25 + 24);
  if (!*(_BYTE *)(v25 + 80))
  {
    sub_100853948(v25, *(double **)(v25 + 24), v25 + 32);
    *(_OWORD *)(v25 + 64) = *(_OWORD *)*(void *)(v25 + 32);
    *(_BYTE *)(v25 + 80) = 1;
  }

  uint64_t v28 = sub_100845638(v26, v27, (double *)(v25 + 64));
  switch((_DWORD)v28)
  {
    case 1:
      int v31 = 2;
      goto LABEL_20;
    case 0:
      return;
    case 0xFFFFFFFF:
      int v31 = 1;
LABEL_20:
      DWORD2(v41) = v31;
      break;
  }

  DWORD2(v37) = 3;
  LODWORD(v36) = 5;
  if (!*(void *)(a5 + 64)) {
    sub_10124CD6C(v28, v29, v30);
  }
  __int128 v35 = *(_OWORD *)(a5 + 72);
  *(_OWORD *)&v40[8] = *(_OWORD *)(a5 + 104);
  uint64_t v32 = *(void *)(a5 + 120);
  *(_OWORD *)&v44[8] = *(_OWORD *)(a5 + 128);
  uint64_t v33 = *(void *)(a5 + 144);
  *(void *)&v40[24] = v32;
  *(void *)&v44[24] = v33;
  __int128 v34 = *a4;
  sub_10085B614(&v34, (uint64_t)&v35);
}

void *sub_10085BA34(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL) {
    sub_1000070D4();
  }
  return operator new(200 * a2);
}

BOOL sub_10085BA7C(unsigned __int8 **a1, uint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 6);
  if (v2 == 3) {
    return 0LL;
  }
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    return 1LL;
  }
  *(_OWORD *)__int128 v11 = *(_OWORD *)*(void *)a2;
  uint64_t v4 = a1[2];
  uint64_t v5 = *(double **)v4;
  double v6 = (double *)*((void *)v4 + 1);
  char v12 = 0;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  char v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      uint64_t v7 = v5 + 4;
      v5 += 2;
    }

    while (v7 != v6);
    if (!v15)
    {
      if ((_DWORD)v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!((_DWORD)v13 + HIDWORD(v13))) {
          goto LABEL_8;
        }
      }

      else if (!(_DWORD)v13)
      {
        goto LABEL_8;
      }

      __int128 v10 = *a1;
      if (**a1 - 58 <= 0xFFFFFFF7)
      {
        *__int128 v10 = 50;
        __int128 v10 = *a1;
      }

      int v8 = *((_DWORD *)a1 + 6) | 1;
      goto LABEL_10;
    }
  }

BOOL sub_10085BBD4(unsigned __int8 **a1, uint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 6);
  if (v2 == 3) {
    return 0LL;
  }
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    return 1LL;
  }
  *(_OWORD *)__int128 v11 = *(_OWORD *)*(void *)a2;
  uint64_t v4 = a1[2];
  uint64_t v5 = *(double **)v4;
  double v6 = (double *)*((void *)v4 + 1);
  char v12 = 0;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  char v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      uint64_t v7 = v5 + 4;
      v5 += 2;
    }

    while (v7 != v6);
    if (!v15)
    {
      if ((_DWORD)v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!((_DWORD)v13 + HIDWORD(v13))) {
          goto LABEL_8;
        }
      }

      else if (!(_DWORD)v13)
      {
        goto LABEL_8;
      }

      __int128 v10 = *a1;
      if (**a1 - 58 <= 0xFFFFFFF7)
      {
        *__int128 v10 = 50;
        __int128 v10 = *a1;
      }

      int v8 = *((_DWORD *)a1 + 6) | 1;
      goto LABEL_10;
    }
  }

double sub_10085BD2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  __int128 v9 = a2 - 25;
  unint64_t v10 = a1;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    uint64_t v12 = v11;
    uint64_t v13 = (uint64_t)a2 - v10;
    unint64_t v14 = 0x8F5C28F5C28F5C29LL * ((uint64_t)((uint64_t)a2 - v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v42 = *(a2 - 19);
        uint64_t v43 = *(void *)(v10 + 48);
        if (v42 == v43)
        {
          uint64_t v44 = *(a2 - 18);
          uint64_t v45 = *(void *)(v10 + 56);
          BOOL v46 = v44 < v45;
          if (v44 == v45)
          {
            uint64_t v47 = *(a2 - 17);
            uint64_t v48 = *(void *)(v10 + 64);
            BOOL v46 = v47 < v48;
            if (v47 == v48) {
              BOOL v46 = *((_OWORD *)a2 - 8) < *(_OWORD *)(v10 + 72);
            }
          }

          if (!v46
            && (*(a2 - 16) != *(void *)(v10 + 72)
             || *(a2 - 17) != *(void *)(v10 + 64)
             || v44 != v45
             || *(a2 - 15) != *(void *)(v10 + 80)
             || !sub_10085DFAC((uint64_t)(a2 - 25), v10, a3)))
          {
            return result;
          }
        }

        else if (v42 >= v43)
        {
          return result;
        }

        __int128 v59 = *(_OWORD *)v10;
        __int128 v65 = *(_OWORD *)(v10 + 48);
        __int128 v67 = *(_OWORD *)(v10 + 64);
        __int128 v61 = *(_OWORD *)(v10 + 16);
        __int128 v63 = *(_OWORD *)(v10 + 32);
        __int128 v73 = *(_OWORD *)(v10 + 112);
        __int128 v75 = *(_OWORD *)(v10 + 128);
        __int128 v69 = *(_OWORD *)(v10 + 80);
        __int128 v71 = *(_OWORD *)(v10 + 96);
        uint64_t v83 = *(void *)(v10 + 192);
        __int128 v79 = *(_OWORD *)(v10 + 160);
        __int128 v81 = *(_OWORD *)(v10 + 176);
        __int128 v77 = *(_OWORD *)(v10 + 144);
        *(_OWORD *)unint64_t v10 = *v9;
        __int128 v49 = *(_OWORD *)(a2 - 23);
        __int128 v50 = *(_OWORD *)(a2 - 21);
        __int128 v51 = *(_OWORD *)(a2 - 17);
        *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(v10 + 64) = v51;
        *(_OWORD *)(v10 + 16) = v49;
        *(_OWORD *)(v10 + 32) = v50;
        __int128 v52 = *(_OWORD *)(a2 - 15);
        __int128 v53 = *(_OWORD *)(a2 - 13);
        __int128 v54 = *(_OWORD *)(a2 - 9);
        *(_OWORD *)(v10 + 112) = *(_OWORD *)(a2 - 11);
        *(_OWORD *)(v10 + 128) = v54;
        *(_OWORD *)(v10 + 80) = v52;
        *(_OWORD *)(v10 + 96) = v53;
        __int128 v55 = *(_OWORD *)(a2 - 7);
        __int128 v56 = *(_OWORD *)(a2 - 5);
        __int128 v57 = *(_OWORD *)(a2 - 3);
        *(void *)(v10 + 192) = *(a2 - 1);
        *(_OWORD *)(v10 + 160) = v56;
        *(_OWORD *)(v10 + 176) = v57;
        *(_OWORD *)(v10 + 144) = v55;
        *(_OWORD *)(a2 - 5) = v79;
        *(_OWORD *)(a2 - 3) = v81;
        *(a2 - 1) = v83;
        *(_OWORD *)(a2 - 13) = v71;
        *(_OWORD *)(a2 - 11) = v73;
        *(_OWORD *)(a2 - 9) = v75;
        *(_OWORD *)(a2 - 7) = v77;
        *(_OWORD *)(a2 - 21) = v63;
        *(_OWORD *)(a2 - 19) = v65;
        *(_OWORD *)(a2 - 17) = v67;
        *(_OWORD *)(a2 - 15) = v69;
        double result = *(double *)&v61;
        *__int128 v9 = v59;
        *(_OWORD *)(a2 - 23) = v61;
        return result;
      case 3uLL:
        sub_10085C8A0(v10, v10 + 200, (uint64_t)(a2 - 25));
        return result;
      case 4uLL:
        *(void *)&double result = sub_10085E374(v10, v10 + 200, v10 + 400, (uint64_t)(a2 - 25)).n128_u64[0];
        return result;
      case 5uLL:
        *(void *)&double result = sub_10085E7AC(v10, v10 + 200, v10 + 400, v10 + 600, (uint64_t)(a2 - 25)).n128_u64[0];
        return result;
      default:
        if (v13 <= 4799)
        {
          if ((a5 & 1) == 0) {
            return sub_10085C608(v10, (uint64_t)a2, a3);
          }
          sub_10085C318(v10, (uint64_t)a2, a3);
          return result;
        }

        if (v12 != 1)
        {
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = v10 + 200 * (v14 >> 1);
          if ((unint64_t)v13 < 0x6401)
          {
            sub_10085C8A0(v16, v10, (uint64_t)(a2 - 25));
            if ((a5 & 1) != 0) {
              goto LABEL_22;
            }
          }

          else
          {
            sub_10085C8A0(v10, v16, (uint64_t)(a2 - 25));
            uint64_t v17 = 200 * v15;
            uint64_t v18 = 200 * v15 + v10 - 200;
            sub_10085C8A0(v10 + 200, v17 + v10 - 200, (uint64_t)(a2 - 50));
            uint64_t v19 = v10 + 400;
            uint64_t v20 = v10 + 200 + v17;
            sub_10085C8A0(v19, v20, (uint64_t)(a2 - 75));
            sub_10085C8A0(v18, v16, v20);
            __int128 v58 = *(_OWORD *)a1;
            __int128 v64 = *(_OWORD *)(a1 + 48);
            __int128 v66 = *(_OWORD *)(a1 + 64);
            __int128 v60 = *(_OWORD *)(a1 + 16);
            __int128 v62 = *(_OWORD *)(a1 + 32);
            __int128 v72 = *(_OWORD *)(a1 + 112);
            __int128 v74 = *(_OWORD *)(a1 + 128);
            __int128 v68 = *(_OWORD *)(a1 + 80);
            __int128 v70 = *(_OWORD *)(a1 + 96);
            uint64_t v82 = *(void *)(a1 + 192);
            __int128 v78 = *(_OWORD *)(a1 + 160);
            __int128 v80 = *(_OWORD *)(a1 + 176);
            __int128 v76 = *(_OWORD *)(a1 + 144);
            *(_OWORD *)a1 = *(_OWORD *)v16;
            __int128 v22 = *(_OWORD *)(v16 + 16);
            __int128 v23 = *(_OWORD *)(v16 + 32);
            __int128 v24 = *(_OWORD *)(v16 + 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v16 + 48);
            *(_OWORD *)(a1 + 64) = v24;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 32) = v23;
            __int128 v25 = *(_OWORD *)(v16 + 80);
            __int128 v26 = *(_OWORD *)(v16 + 96);
            __int128 v27 = *(_OWORD *)(v16 + 128);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v16 + 112);
            *(_OWORD *)(a1 + 128) = v27;
            *(_OWORD *)(a1 + 80) = v25;
            *(_OWORD *)(a1 + 96) = v26;
            __int128 v28 = *(_OWORD *)(v16 + 144);
            __int128 v29 = *(_OWORD *)(v16 + 160);
            __int128 v30 = *(_OWORD *)(v16 + 176);
            *(void *)(a1 + 192) = *(void *)(v16 + 192);
            *(_OWORD *)(a1 + 160) = v29;
            *(_OWORD *)(a1 + 176) = v30;
            *(_OWORD *)(a1 + 144) = v28;
            *(_OWORD *)uint64_t v16 = v58;
            *(_OWORD *)(v16 + 48) = v64;
            *(_OWORD *)(v16 + 64) = v66;
            *(_OWORD *)(v16 + 16) = v60;
            *(_OWORD *)(v16 + 32) = v62;
            *(_OWORD *)(v16 + 112) = v72;
            *(_OWORD *)(v16 + 128) = v74;
            *(_OWORD *)(v16 + 80) = v68;
            *(_OWORD *)(v16 + 96) = v70;
            *(void *)(v16 + 192) = v82;
            *(_OWORD *)(v16 + 160) = v78;
            *(_OWORD *)(v16 + 176) = v80;
            *(_OWORD *)(v16 + 144) = v76;
            if ((a5 & 1) != 0) {
              goto LABEL_22;
            }
          }

          uint64_t v31 = *(void *)(a1 - 152);
          uint64_t v32 = *(void *)(a1 + 48);
          if (v31 == v32)
          {
            uint64_t v33 = *(void *)(a1 - 144);
            uint64_t v34 = *(void *)(a1 + 56);
            BOOL v35 = v33 < v34;
            if (v33 == v34)
            {
              uint64_t v36 = *(void *)(a1 - 136);
              uint64_t v37 = *(void *)(a1 + 64);
              BOOL v35 = v36 < v37;
              if (v36 == v37) {
                BOOL v35 = *(_OWORD *)(a1 - 128) < *(_OWORD *)(a1 + 72);
              }
            }

            if (!v35
              && (*(void *)(a1 - 128) != *(void *)(a1 + 72)
               || *(void *)(a1 - 136) != *(void *)(a1 + 64)
               || v33 != v34
               || *(void *)(a1 - 120) != *(void *)(a1 + 80)
               || (sub_10085DFAC(a1 - 200, a1, v21) & 1) == 0))
            {
LABEL_26:
              unint64_t v10 = sub_10085CF84((__int128 *)a1, (unint64_t)a2, a3);
              goto LABEL_27;
            }
          }

          else if (v31 >= v32)
          {
            goto LABEL_26;
          }

uint64_t sub_10085C318(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result == a2) {
    return result;
  }
  uint64_t v64 = v3;
  uint64_t v65 = v4;
  uint64_t v6 = result;
  uint64_t v7 = result + 200;
  if (result + 200 == a2) {
    return result;
  }
  uint64_t v8 = 0LL;
  uint64_t v9 = result;
  do
  {
    uint64_t v10 = v9;
    uint64_t v9 = v7;
    uint64_t v11 = *(void *)(v10 + 248);
    uint64_t v12 = *(void *)(v10 + 48);
    if (v11 == v12)
    {
      uint64_t v13 = *(void *)(v10 + 256);
      uint64_t v14 = *(void *)(v10 + 56);
      BOOL v15 = v13 < v14;
      if (v13 == v14)
      {
        uint64_t v16 = *(void *)(v10 + 264);
        uint64_t v17 = *(void *)(v10 + 64);
        BOOL v15 = v16 < v17;
        if (v16 == v17) {
          BOOL v15 = *(_OWORD *)(v10 + 272) < *(_OWORD *)(v10 + 72);
        }
      }

      if (!v15)
      {
        if (*(void *)(v10 + 272) != *(void *)(v10 + 72)) {
          goto LABEL_33;
        }
        if (*(void *)(v10 + 264) != *(void *)(v10 + 64)) {
          goto LABEL_33;
        }
        if (v13 != v14) {
          goto LABEL_33;
        }
        if (*(void *)(v10 + 280) != *(void *)(v10 + 80)) {
          goto LABEL_33;
        }
        double result = sub_10085DFAC(v9, v10, a3);
        if (!(_DWORD)result) {
          goto LABEL_33;
        }
      }
    }

    else if (v11 >= v12)
    {
      goto LABEL_33;
    }

    __int128 v18 = *(_OWORD *)(v9 + 48);
    __int128 v54 = *(_OWORD *)(v9 + 32);
    __int128 v55 = v18;
    __int128 v19 = *(_OWORD *)(v9 + 112);
    __int128 v57 = *(_OWORD *)(v9 + 96);
    __int128 v58 = v19;
    __int128 v20 = *(_OWORD *)(v9 + 80);
    *(_OWORD *)__int128 v56 = *(_OWORD *)(v9 + 64);
    *(_OWORD *)&v56[16] = v20;
    uint64_t v63 = *(void *)(v9 + 192);
    __int128 v21 = *(_OWORD *)(v9 + 176);
    __int128 v61 = *(_OWORD *)(v9 + 160);
    __int128 v62 = v21;
    __int128 v22 = *(_OWORD *)(v9 + 144);
    __int128 v59 = *(_OWORD *)(v9 + 128);
    __int128 v60 = v22;
    __int128 v23 = *(_OWORD *)(v9 + 16);
    __int128 v52 = *(_OWORD *)v9;
    __int128 v53 = v23;
    __int128 v24 = *(_OWORD *)(v10 + 176);
    *(_OWORD *)(v9 + 160) = *(_OWORD *)(v10 + 160);
    *(_OWORD *)(v9 + 176) = v24;
    *(void *)(v9 + 192) = *(void *)(v10 + 192);
    __int128 v25 = *(_OWORD *)(v10 + 112);
    *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
    *(_OWORD *)(v9 + 112) = v25;
    __int128 v26 = *(_OWORD *)(v10 + 144);
    *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
    *(_OWORD *)(v9 + 144) = v26;
    __int128 v27 = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
    *(_OWORD *)(v9 + 48) = v27;
    __int128 v28 = *(_OWORD *)(v10 + 80);
    *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v9 + 80) = v28;
    __int128 v29 = *(_OWORD *)(v10 + 16);
    uint64_t v30 = v6;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v29;
    if (v10 == v6) {
      goto LABEL_32;
    }
    uint64_t v31 = v8;
    while (1)
    {
      uint64_t v32 = v6 + v31;
      uint64_t v33 = *(void *)(v6 + v31 - 152);
      if ((void)v55 == v33) {
        break;
      }
LABEL_29:
      v10 -= 200LL;
      __int128 v37 = *(_OWORD *)(v6 + v31 - 24);
      *(_OWORD *)(v32 + 160) = *(_OWORD *)(v6 + v31 - 40);
      *(_OWORD *)(v32 + 176) = v37;
      *(void *)(v32 + 192) = *(void *)(v6 + v31 - 8);
      __int128 v38 = *(_OWORD *)(v6 + v31 - 88);
      *(_OWORD *)(v32 + 96) = *(_OWORD *)(v6 + v31 - 104);
      *(_OWORD *)(v32 + 112) = v38;
      __int128 v39 = *(_OWORD *)(v6 + v31 - 56);
      *(_OWORD *)(v32 + 128) = *(_OWORD *)(v6 + v31 - 72);
      *(_OWORD *)(v32 + 144) = v39;
      __int128 v40 = *(_OWORD *)(v6 + v31 - 152);
      *(_OWORD *)(v32 + 32) = *(_OWORD *)(v6 + v31 - 168);
      *(_OWORD *)(v32 + 48) = v40;
      __int128 v41 = *(_OWORD *)(v6 + v31 - 120);
      *(_OWORD *)(v32 + 64) = *(_OWORD *)(v6 + v31 - 136);
      *(_OWORD *)(v32 + 80) = v41;
      __int128 v42 = *(_OWORD *)(v6 + v31 - 184);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)(v6 + v31 - 200);
      *(_OWORD *)(v32 + 16) = v42;
      v31 -= 200LL;
      if (!v31)
      {
        uint64_t v30 = v6;
        goto LABEL_32;
      }
    }

    uint64_t v34 = *(void *)(v32 - 144);
    BOOL v35 = *((void *)&v55 + 1) < v34;
    if (*((void *)&v55 + 1) == v34)
    {
      uint64_t v36 = *(void *)(v6 + v31 - 136);
      BOOL v35 = *(void *)v56 < v36;
      if (*(void *)v56 == v36) {
        BOOL v35 = *(_OWORD *)&v56[8] < *(_OWORD *)(v6 + v31 - 128);
      }
    }

    if (v35) {
      goto LABEL_29;
    }
    if (*(_OWORD *)v56 == *(_OWORD *)(v6 + v31 - 136)
      && *((void *)&v55 + 1) == v34
      && *(void *)&v56[16] == *(void *)(v6 + v31 - 120))
    {
      double result = sub_10085DFAC((uint64_t)&v52, v6 + v31 - 200, a3);
      if (!(_DWORD)result)
      {
        uint64_t v30 = v6 + v31;
        goto LABEL_32;
      }

      goto LABEL_29;
    }

double sub_10085C608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v59 = v3;
    uint64_t v60 = v4;
    uint64_t v6 = a1;
    while (1)
    {
      while (1)
      {
        if (v6 + 200 == a2) {
          return result;
        }
        uint64_t v7 = (void *)v6;
        v6 += 200LL;
        uint64_t v8 = v7[31];
        uint64_t v9 = v7[6];
        if (v8 != v9) {
          break;
        }
        uint64_t v10 = v7[32];
        uint64_t v11 = v7[7];
        BOOL v13 = __OFSUB__(v10, v11);
        BOOL v12 = v10 - v11 < 0;
        if (v10 == v11)
        {
          uint64_t v14 = v7[33];
          uint64_t v15 = v7[8];
          BOOL v13 = __OFSUB__(v14, v15);
          BOOL v12 = v14 - v15 < 0;
          if (v14 == v15)
          {
            uint64_t v16 = v7[35];
            uint64_t v17 = v7[10];
            BOOL v13 = __OFSUB__(v16, v17);
            BOOL v12 = v16 - v17 < 0;
            if (v16 == v17)
            {
              uint64_t v18 = v7[34];
              uint64_t v19 = v7[9];
              BOOL v13 = __OFSUB__(v18, v19);
              BOOL v12 = v18 - v19 < 0;
            }
          }
        }

        if (v12 != v13
          || v7[34] == v7[9]
          && v7[33] == v7[8]
          && v10 == v11
          && v7[35] == v7[10]
          && sub_10085DFAC(v6, (uint64_t)v7, a3))
        {
          goto LABEL_17;
        }
      }

      if (v8 < v9)
      {
LABEL_17:
        __int128 v21 = *(_OWORD *)(v6 + 176);
        __int128 v56 = *(_OWORD *)(v6 + 160);
        __int128 v57 = v21;
        uint64_t v58 = *(void *)(v6 + 192);
        __int128 v22 = *(_OWORD *)(v6 + 112);
        __int128 v52 = *(_OWORD *)(v6 + 96);
        __int128 v53 = v22;
        __int128 v23 = *(_OWORD *)(v6 + 144);
        __int128 v54 = *(_OWORD *)(v6 + 128);
        __int128 v55 = v23;
        __int128 v24 = *(_OWORD *)(v6 + 48);
        __int128 v48 = *(_OWORD *)(v6 + 32);
        __int128 v49 = v24;
        __int128 v25 = *(_OWORD *)(v6 + 80);
        __int128 v50 = *(_OWORD *)(v6 + 64);
        __int128 v51 = v25;
        __int128 v26 = *(_OWORD *)(v6 + 16);
        uint64_t v27 = v6;
        __int128 v46 = *(_OWORD *)v6;
        __int128 v47 = v26;
        while (1)
        {
          __int128 v28 = *(_OWORD *)(v27 - 56);
          __int128 v29 = *(_OWORD *)(v27 - 24);
          *(_OWORD *)(v27 + 160) = *(_OWORD *)(v27 - 40);
          *(_OWORD *)(v27 + 176) = v29;
          *(void *)(v27 + 192) = *(void *)(v27 - 8);
          __int128 v30 = *(_OWORD *)(v27 - 120);
          __int128 v31 = *(_OWORD *)(v27 - 88);
          *(_OWORD *)(v27 + 96) = *(_OWORD *)(v27 - 104);
          *(_OWORD *)(v27 + 112) = v31;
          *(_OWORD *)(v27 + 128) = *(_OWORD *)(v27 - 72);
          *(_OWORD *)(v27 + 144) = v28;
          __int128 v32 = *(_OWORD *)(v27 - 184);
          __int128 v33 = *(_OWORD *)(v27 - 152);
          *(_OWORD *)(v27 + 32) = *(_OWORD *)(v27 - 168);
          *(_OWORD *)(v27 + 48) = v33;
          *(_OWORD *)(v27 + 64) = *(_OWORD *)(v27 - 136);
          *(_OWORD *)(v27 + 80) = v30;
          *(_OWORD *)uint64_t v27 = *(_OWORD *)(v27 - 200);
          *(_OWORD *)(v27 + 16) = v32;
          uint64_t v34 = *(void *)(v27 - 352);
          if ((void)v49 != v34)
          {
            goto LABEL_29;
          }

          uint64_t v35 = *(void *)(v27 - 344);
          BOOL v37 = __OFSUB__(*((void *)&v49 + 1), v35);
          BOOL v36 = *((void *)&v49 + 1) - v35 < 0;
          if (*((void *)&v49 + 1) != v35) {
            goto LABEL_22;
          }
          uint64_t v38 = *(void *)(v27 - 336);
          BOOL v37 = __OFSUB__((void)v50, v38);
          BOOL v36 = (uint64_t)v50 - v38 < 0;
          if ((void)v50 == v38
            && (uint64_t v39 = *(void *)(v27 - 320),
                BOOL v37 = __OFSUB__((void)v51, v39),
                BOOL v36 = (uint64_t)v51 - v39 < 0,
                (void)v51 == v39))
          {
          }

          else
          {
LABEL_22:
            if (v36 != v37) {
              goto LABEL_29;
            }
          }

          if (v50 != *(_OWORD *)(v27 - 336)
            || *((void *)&v49 + 1) != v35
            || (void)v51 != *(void *)(v27 - 320)
            || (sub_10085DFAC((uint64_t)&v46, v27 - 400, a3) & 1) == 0)
          {
            break;
          }

uint64_t sub_10085C8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v6 == v7)
  {
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = *(void *)(a1 + 56);
    BOOL v10 = v8 < v9;
    if (v8 == v9)
    {
      uint64_t v11 = *(void *)(a2 + 64);
      uint64_t v12 = *(void *)(a1 + 64);
      BOOL v10 = v11 < v12;
      if (v11 == v12) {
        BOOL v10 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
      }
    }

    if (!v10)
    {
      if (*(void *)(a2 + 72) != *(void *)(a1 + 72)
        || *(void *)(a2 + 64) != *(void *)(a1 + 64)
        || v8 != v9
        || *(void *)(a2 + 80) != *(void *)(a1 + 80)
        || (v13 = sub_10085DFAC(a2, a1, a3), uint64_t v6 = *(void *)(a2 + 48), (v13 & 1) == 0))
      {
LABEL_11:
        uint64_t v14 = *(void *)(a3 + 48);
        if (v14 == v6)
        {
          uint64_t v15 = *(void *)(a3 + 56);
          uint64_t v16 = *(void *)(a2 + 56);
          BOOL v17 = v15 < v16;
          if (v15 == v16)
          {
            uint64_t v18 = *(void *)(a3 + 64);
            uint64_t v19 = *(void *)(a2 + 64);
            BOOL v17 = v18 < v19;
            if (v18 == v19) {
              BOOL v17 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
            }
          }

          if (v17) {
            goto LABEL_47;
          }
          if (*(void *)(a3 + 72) == *(void *)(a2 + 72) && *(void *)(a3 + 64) == *(void *)(a2 + 64))
          {
            uint64_t result = 0LL;
            if (v15 != v16) {
              return result;
            }
            if (*(void *)(a3 + 80) != *(void *)(a2 + 80)) {
              return result;
            }
            uint64_t result = sub_10085DFAC(a3, a2, a3);
            if (!(_DWORD)result) {
              return result;
            }
LABEL_47:
            __int128 v140 = *(_OWORD *)(a2 + 160);
            __int128 v145 = *(_OWORD *)(a2 + 176);
            uint64_t v150 = *(void *)(a2 + 192);
            __int128 v120 = *(_OWORD *)(a2 + 96);
            __int128 v125 = *(_OWORD *)(a2 + 112);
            __int128 v130 = *(_OWORD *)(a2 + 128);
            __int128 v135 = *(_OWORD *)(a2 + 144);
            __int128 v100 = *(_OWORD *)(a2 + 32);
            __int128 v105 = *(_OWORD *)(a2 + 48);
            __int128 v110 = *(_OWORD *)(a2 + 64);
            __int128 v115 = *(_OWORD *)(a2 + 80);
            __int128 v90 = *(_OWORD *)a2;
            __int128 v95 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a2 = *(_OWORD *)a3;
            __int128 v54 = *(_OWORD *)(a3 + 16);
            __int128 v55 = *(_OWORD *)(a3 + 32);
            __int128 v56 = *(_OWORD *)(a3 + 64);
            *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
            *(_OWORD *)(a2 + 64) = v56;
            *(_OWORD *)(a2 + 16) = v54;
            *(_OWORD *)(a2 + 32) = v55;
            __int128 v57 = *(_OWORD *)(a3 + 80);
            __int128 v58 = *(_OWORD *)(a3 + 96);
            __int128 v59 = *(_OWORD *)(a3 + 128);
            *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
            *(_OWORD *)(a2 + 128) = v59;
            *(_OWORD *)(a2 + 80) = v57;
            *(_OWORD *)(a2 + 96) = v58;
            __int128 v60 = *(_OWORD *)(a3 + 144);
            __int128 v61 = *(_OWORD *)(a3 + 160);
            __int128 v62 = *(_OWORD *)(a3 + 176);
            *(void *)(a2 + 192) = *(void *)(a3 + 192);
            *(_OWORD *)(a2 + 160) = v61;
            *(_OWORD *)(a2 + 176) = v62;
            *(_OWORD *)(a2 + 144) = v60;
            *(_OWORD *)(a3 + 160) = v140;
            *(_OWORD *)(a3 + 176) = v145;
            *(void *)(a3 + 192) = v150;
            *(_OWORD *)(a3 + 96) = v120;
            *(_OWORD *)(a3 + 112) = v125;
            *(_OWORD *)(a3 + 128) = v130;
            *(_OWORD *)(a3 + 144) = v135;
            *(_OWORD *)(a3 + 32) = v100;
            *(_OWORD *)(a3 + 48) = v105;
            *(_OWORD *)(a3 + 64) = v110;
            *(_OWORD *)(a3 + 80) = v115;
            *(_OWORD *)a3 = v90;
            *(_OWORD *)(a3 + 16) = v95;
            uint64_t v63 = *(void *)(a2 + 48);
            uint64_t v64 = *(void *)(a1 + 48);
            if (v63 == v64)
            {
              uint64_t v65 = *(void *)(a2 + 56);
              uint64_t v66 = *(void *)(a1 + 56);
              BOOL v67 = v65 < v66;
              if (v65 == v66)
              {
                uint64_t v68 = *(void *)(a2 + 64);
                uint64_t v69 = *(void *)(a1 + 64);
                BOOL v67 = v68 < v69;
                if (v68 == v69) {
                  BOOL v67 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
                }
              }

              if (!v67)
              {
                if (*(void *)(a2 + 72) != *(void *)(a1 + 72) || *(void *)(a2 + 64) != *(void *)(a1 + 64)) {
                  return 1LL;
                }
                uint64_t result = 1LL;
                if (v65 != v66 || *(void *)(a2 + 80) != *(void *)(a1 + 80)) {
                  return result;
                }
              }
            }

            else if (v63 >= v64)
            {
              return 1LL;
            }

            __int128 v142 = *(_OWORD *)(a1 + 160);
            __int128 v147 = *(_OWORD *)(a1 + 176);
            uint64_t v152 = *(void *)(a1 + 192);
            __int128 v122 = *(_OWORD *)(a1 + 96);
            __int128 v127 = *(_OWORD *)(a1 + 112);
            __int128 v132 = *(_OWORD *)(a1 + 128);
            __int128 v137 = *(_OWORD *)(a1 + 144);
            __int128 v102 = *(_OWORD *)(a1 + 32);
            __int128 v107 = *(_OWORD *)(a1 + 48);
            __int128 v112 = *(_OWORD *)(a1 + 64);
            __int128 v117 = *(_OWORD *)(a1 + 80);
            __int128 v92 = *(_OWORD *)a1;
            __int128 v97 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            __int128 v79 = *(_OWORD *)(a2 + 16);
            __int128 v80 = *(_OWORD *)(a2 + 32);
            __int128 v81 = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 64) = v81;
            *(_OWORD *)(a1 + 16) = v79;
            *(_OWORD *)(a1 + 32) = v80;
            __int128 v82 = *(_OWORD *)(a2 + 80);
            __int128 v83 = *(_OWORD *)(a2 + 96);
            __int128 v84 = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a1 + 128) = v84;
            *(_OWORD *)(a1 + 80) = v82;
            *(_OWORD *)(a1 + 96) = v83;
            __int128 v85 = *(_OWORD *)(a2 + 144);
            __int128 v86 = *(_OWORD *)(a2 + 160);
            __int128 v87 = *(_OWORD *)(a2 + 176);
            *(void *)(a1 + 192) = *(void *)(a2 + 192);
            *(_OWORD *)(a1 + 160) = v86;
            *(_OWORD *)(a1 + 176) = v87;
            *(_OWORD *)(a1 + 144) = v85;
            *(_OWORD *)(a2 + 160) = v142;
            *(_OWORD *)(a2 + 176) = v147;
            *(void *)(a2 + 192) = v152;
            *(_OWORD *)(a2 + 96) = v122;
            *(_OWORD *)(a2 + 112) = v127;
            *(_OWORD *)(a2 + 128) = v132;
            *(_OWORD *)(a2 + 144) = v137;
            *(_OWORD *)(a2 + 32) = v102;
            *(_OWORD *)(a2 + 48) = v107;
            *(_OWORD *)(a2 + 64) = v112;
            *(_OWORD *)(a2 + 80) = v117;
            uint64_t result = 2LL;
            *(_OWORD *)a2 = v92;
            *(_OWORD *)(a2 + 16) = v97;
            return result;
          }
        }

        else if (v14 < v6)
        {
          goto LABEL_47;
        }

        return 0LL;
      }
    }
  }

  else if (v6 >= v7)
  {
    goto LABEL_11;
  }

  uint64_t v21 = *(void *)(a3 + 48);
  if (v21 != v6)
  {
    if (v21 >= v6) {
      goto LABEL_33;
    }
LABEL_45:
    __int128 v139 = *(_OWORD *)(a1 + 160);
    __int128 v144 = *(_OWORD *)(a1 + 176);
    uint64_t v149 = *(void *)(a1 + 192);
    __int128 v119 = *(_OWORD *)(a1 + 96);
    __int128 v124 = *(_OWORD *)(a1 + 112);
    __int128 v129 = *(_OWORD *)(a1 + 128);
    __int128 v134 = *(_OWORD *)(a1 + 144);
    __int128 v99 = *(_OWORD *)(a1 + 32);
    __int128 v104 = *(_OWORD *)(a1 + 48);
    __int128 v109 = *(_OWORD *)(a1 + 64);
    __int128 v114 = *(_OWORD *)(a1 + 80);
    __int128 v89 = *(_OWORD *)a1;
    __int128 v94 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    __int128 v43 = *(_OWORD *)(a3 + 16);
    __int128 v44 = *(_OWORD *)(a3 + 32);
    __int128 v45 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 64) = v45;
    *(_OWORD *)(a1 + 16) = v43;
    *(_OWORD *)(a1 + 32) = v44;
    __int128 v46 = *(_OWORD *)(a3 + 80);
    __int128 v47 = *(_OWORD *)(a3 + 96);
    __int128 v48 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a1 + 128) = v48;
    *(_OWORD *)(a1 + 80) = v46;
    *(_OWORD *)(a1 + 96) = v47;
    __int128 v49 = *(_OWORD *)(a3 + 144);
    __int128 v50 = *(_OWORD *)(a3 + 160);
    __int128 v51 = *(_OWORD *)(a3 + 176);
    *(void *)(a1 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a1 + 160) = v50;
    *(_OWORD *)(a1 + 176) = v51;
    *(_OWORD *)(a1 + 144) = v49;
    *(_OWORD *)(a3 + 160) = v139;
    *(_OWORD *)(a3 + 176) = v144;
    *(void *)(a3 + 192) = v149;
    *(_OWORD *)(a3 + 96) = v119;
    *(_OWORD *)(a3 + 112) = v124;
    *(_OWORD *)(a3 + 128) = v129;
    *(_OWORD *)(a3 + 144) = v134;
    *(_OWORD *)(a3 + 32) = v99;
    *(_OWORD *)(a3 + 48) = v104;
    *(_OWORD *)(a3 + 64) = v109;
    *(_OWORD *)(a3 + 80) = v114;
    __int128 v53 = v89;
    __int128 v52 = v94;
    uint64_t result = 1LL;
LABEL_61:
    *(_OWORD *)a3 = v53;
    *(_OWORD *)(a3 + 16) = v52;
    return result;
  }

  uint64_t v22 = *(void *)(a3 + 56);
  uint64_t v23 = *(void *)(a2 + 56);
  BOOL v24 = v22 < v23;
  if (v22 == v23)
  {
    uint64_t v25 = *(void *)(a3 + 64);
    uint64_t v26 = *(void *)(a2 + 64);
    BOOL v24 = v25 < v26;
    if (v25 == v26) {
      BOOL v24 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
    }
  }

  if (v24
    || *(void *)(a3 + 72) == *(void *)(a2 + 72)
    && *(void *)(a3 + 64) == *(void *)(a2 + 64)
    && v22 == v23
    && *(void *)(a3 + 80) == *(void *)(a2 + 80)
    && sub_10085DFAC(a3, a2, a3))
  {
    goto LABEL_45;
  }

unint64_t sub_10085CF84(__int128 *a1, unint64_t a2, uint64_t a3)
{
  unint64_t j = a2;
  __int128 v5 = a1[11];
  __int128 v112 = a1[10];
  __int128 v113 = v5;
  uint64_t v114 = *((void *)a1 + 24);
  __int128 v6 = a1[7];
  __int128 v108 = a1[6];
  __int128 v109 = v6;
  __int128 v7 = a1[9];
  __int128 v110 = a1[8];
  __int128 v111 = v7;
  __int128 v8 = a1[3];
  __int128 v104 = a1[2];
  __int128 v105 = v8;
  __int128 v9 = a1[5];
  __int128 v106 = a1[4];
  __int128 v107 = v9;
  __int128 v10 = a1[1];
  __int128 v102 = *a1;
  __int128 v103 = v10;
  unint64_t v11 = a2 - 200;
  uint64_t v12 = *(void *)(a2 - 152);
  if ((void)v8 != v12)
  {
LABEL_27:
    for (unint64_t i = (unint64_t)a1 + 200; ; i += 200LL)
    {
      uint64_t v27 = *(void *)(i + 48);
      if ((void)v105 == v27)
      {
        uint64_t v28 = *(void *)(i + 56);
        BOOL v30 = __OFSUB__(*((void *)&v105 + 1), v28);
        BOOL v29 = *((void *)&v105 + 1) - v28 < 0;
        if (*((void *)&v105 + 1) == v28)
        {
          uint64_t v31 = *(void *)(i + 64);
          BOOL v30 = __OFSUB__((void)v106, v31);
          BOOL v29 = (uint64_t)v106 - v31 < 0;
          if ((void)v106 == v31)
          {
            uint64_t v32 = *(void *)(i + 80);
            BOOL v30 = __OFSUB__((void)v107, v32);
            BOOL v29 = (uint64_t)v107 - v32 < 0;
            if ((void)v107 == v32)
            {
              uint64_t v33 = *(void *)(i + 72);
              BOOL v30 = __OFSUB__(*((void *)&v106 + 1), v33);
              BOOL v29 = *((void *)&v106 + 1) - v33 < 0;
            }
          }
        }

        if (v29 != v30
          || v106 == *(_OWORD *)(i + 64)
          && *((void *)&v105 + 1) == v28
          && (void)v107 == *(void *)(i + 80)
          && (sub_10085DFAC((uint64_t)&v102, i, a3) & 1) != 0)
        {
          goto LABEL_41;
        }
      }

      else if ((uint64_t)v105 < v27)
      {
        goto LABEL_41;
      }
    }
  }

  uint64_t v13 = *(void *)(a2 - 144);
  BOOL v15 = __OFSUB__(*((void *)&v105 + 1), v13);
  BOOL v14 = *((void *)&v105 + 1) - v13 < 0;
  if (*((void *)&v105 + 1) == v13)
  {
    uint64_t v16 = *(void *)(a2 - 136);
    BOOL v15 = __OFSUB__((void)v106, v16);
    BOOL v14 = (uint64_t)v106 - v16 < 0;
    if ((void)v106 == v16)
    {
      uint64_t v17 = *(void *)(a2 - 120);
      BOOL v15 = __OFSUB__((void)v107, v17);
      BOOL v14 = (uint64_t)v107 - v17 < 0;
      if ((void)v107 == v17)
      {
        uint64_t v18 = *(void *)(a2 - 128);
        BOOL v15 = __OFSUB__(*((void *)&v106 + 1), v18);
        BOOL v14 = *((void *)&v106 + 1) - v18 < 0;
      }
    }
  }

  if (v14 != v15
    || v106 == *(_OWORD *)(a2 - 136)
    && (void)v107 == *(void *)(a2 - 120)
    && *((void *)&v105 + 1) == v13
    && sub_10085DFAC((uint64_t)&v102, a2 - 200, a3))
  {
    goto LABEL_27;
  }

unint64_t sub_10085D548(__int128 *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  uint64_t v111 = *((void *)a1 + 24);
  __int128 v6 = a1[11];
  __int128 v109 = a1[10];
  __int128 v110 = v6;
  __int128 v7 = a1[7];
  __int128 v105 = a1[6];
  __int128 v106 = v7;
  __int128 v8 = a1[9];
  __int128 v107 = a1[8];
  __int128 v108 = v8;
  __int128 v9 = a1[3];
  __int128 v101 = a1[2];
  __int128 v102 = v9;
  __int128 v10 = a1[5];
  __int128 v103 = a1[4];
  __int128 v104 = v10;
  __int128 v11 = a1[1];
  __int128 v99 = *a1;
  __int128 v100 = v11;
  while (1)
  {
    uint64_t v12 = (uint64_t)a1 + v5;
    uint64_t v13 = *(void *)((char *)a1 + v5 + 248);
    if (v13 == (void)v102) {
      break;
    }
LABEL_14:
    v5 += 200LL;
  }

  uint64_t v14 = *(void *)(v12 + 256);
  BOOL v16 = __OFSUB__(v14, *((void *)&v102 + 1));
  BOOL v15 = v14 - *((void *)&v102 + 1) < 0;
  if (v14 == *((void *)&v102 + 1))
  {
    uint64_t v17 = *(void *)((char *)a1 + v5 + 264);
    BOOL v16 = __OFSUB__(v17, (void)v103);
    BOOL v15 = v17 - (uint64_t)v103 < 0;
    if (v17 == (void)v103)
    {
      uint64_t v18 = *(void *)((char *)a1 + v5 + 280);
      BOOL v16 = __OFSUB__(v18, (void)v104);
      BOOL v15 = v18 - (uint64_t)v104 < 0;
      if (v18 == (void)v104)
      {
        uint64_t v19 = *(void *)((char *)a1 + v5 + 272);
        BOOL v16 = __OFSUB__(v19, *((void *)&v103 + 1));
        BOOL v15 = v19 - *((void *)&v103 + 1) < 0;
      }
    }
  }

  if (v15 != v16
    || *(__int128 *)((char *)a1 + v5 + 264) == v103
    && v14 == *((void *)&v102 + 1)
    && *(void *)((char *)a1 + v5 + 280) == (void)v104
    && (sub_10085DFAC(v12 + 200, (uint64_t)&v99, a3) & 1) != 0)
  {
    goto LABEL_14;
  }

BOOL sub_10085DA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = 0x8F5C28F5C28F5C29LL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      __int128 v7 = (_OWORD *)(a2 - 200);
      uint64_t v8 = *(void *)(a2 - 152);
      uint64_t v9 = *(void *)(a1 + 48);
      if (v8 != v9)
      {
        if (v8 >= v9) {
          return result;
        }
        goto LABEL_52;
      }

      uint64_t v10 = *(void *)(a2 - 144);
      uint64_t v11 = *(void *)(a1 + 56);
      BOOL v12 = v10 < v11;
      if (v10 == v11)
      {
        uint64_t v13 = *(void *)(a2 - 136);
        uint64_t v14 = *(void *)(a1 + 64);
        BOOL v12 = v13 < v14;
        if (v13 == v14) {
          BOOL v12 = *(_OWORD *)(a2 - 128) < *(_OWORD *)(a1 + 72);
        }
      }

      if (v12) {
        goto LABEL_52;
      }
      if (*(void *)(a2 - 128) == *(void *)(a1 + 72)
        && *(void *)(a2 - 136) == *(void *)(a1 + 64)
        && v10 == v11
        && *(void *)(a2 - 120) == *(void *)(a1 + 80))
      {
LABEL_52:
        __int128 v62 = *(_OWORD *)(a1 + 176);
        __int128 v93 = *(_OWORD *)(a1 + 160);
        __int128 v94 = v62;
        uint64_t v95 = *(void *)(a1 + 192);
        __int128 v63 = *(_OWORD *)(a1 + 112);
        __int128 v89 = *(_OWORD *)(a1 + 96);
        __int128 v90 = v63;
        __int128 v64 = *(_OWORD *)(a1 + 144);
        __int128 v91 = *(_OWORD *)(a1 + 128);
        __int128 v92 = v64;
        __int128 v65 = *(_OWORD *)(a1 + 48);
        __int128 v85 = *(_OWORD *)(a1 + 32);
        __int128 v86 = v65;
        __int128 v66 = *(_OWORD *)(a1 + 80);
        __int128 v87 = *(_OWORD *)(a1 + 64);
        __int128 v88 = v66;
        __int128 v67 = *(_OWORD *)(a1 + 16);
        __int128 v83 = *(_OWORD *)a1;
        __int128 v84 = v67;
        *(_OWORD *)a1 = *v7;
        __int128 v68 = *(_OWORD *)(a2 - 184);
        __int128 v69 = *(_OWORD *)(a2 - 168);
        __int128 v70 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 64) = v70;
        *(_OWORD *)(a1 + 16) = v68;
        *(_OWORD *)(a1 + 32) = v69;
        __int128 v71 = *(_OWORD *)(a2 - 120);
        __int128 v72 = *(_OWORD *)(a2 - 104);
        __int128 v73 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 128) = v73;
        *(_OWORD *)(a1 + 80) = v71;
        *(_OWORD *)(a1 + 96) = v72;
        __int128 v74 = *(_OWORD *)(a2 - 56);
        __int128 v75 = *(_OWORD *)(a2 - 40);
        __int128 v76 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 192) = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 160) = v75;
        *(_OWORD *)(a1 + 176) = v76;
        *(_OWORD *)(a1 + 144) = v74;
        __int128 v77 = v94;
        *(_OWORD *)(a2 - 40) = v93;
        *(_OWORD *)(a2 - 24) = v77;
        *(void *)(a2 - 8) = v95;
        __int128 v78 = v90;
        *(_OWORD *)(a2 - 104) = v89;
        *(_OWORD *)(a2 - 88) = v78;
        __int128 v79 = v92;
        *(_OWORD *)(a2 - 72) = v91;
        *(_OWORD *)(a2 - 56) = v79;
        __int128 v80 = v86;
        *(_OWORD *)(a2 - 168) = v85;
        *(_OWORD *)(a2 - 152) = v80;
        __int128 v81 = v88;
        *(_OWORD *)(a2 - 136) = v87;
        *(_OWORD *)(a2 - 120) = v81;
        __int128 v82 = v84;
        BOOL result = 1LL;
        *__int128 v7 = v83;
        *(_OWORD *)(a2 - 184) = v82;
      }

      return result;
    case 3uLL:
      sub_10085C8A0(a1, a1 + 200, a2 - 200);
      return 1LL;
    case 4uLL:
      sub_10085E374(a1, a1 + 200, a1 + 400, a2 - 200);
      return 1LL;
    case 5uLL:
      sub_10085E7AC(a1, a1 + 200, a1 + 400, a1 + 600, a2 - 200);
      return 1LL;
    default:
      uint64_t v15 = a1 + 400;
      sub_10085C8A0(a1, a1 + 200, a1 + 400);
      uint64_t v17 = a1 + 600;
      if (a1 + 600 == a2) {
        return 1LL;
      }
      uint64_t v18 = 0LL;
      int v19 = 0;
      break;
  }

uint64_t sub_10085DFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (vabdd_f64(*(double *)(a1 + 104), *(double *)(a2 + 104)) < 50.0)
  {
    double v5 = *(double *)(a1 + 96);
    if (v5 == 0.0) {
      sub_10124CE50();
    }
    double v6 = *(double *)(a2 + 96);
    if (v6 == 0.0) {
      sub_10124CE78();
    }
    double v7 = *(double *)(a1 + 88) / v5;
    double v8 = *(double *)(a2 + 88) / v6;
    if (v7 == v8) {
      goto LABEL_36;
    }
    if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v15 = vabdd_f64(v7, v8);
      double v16 = fabs(v7);
      double v17 = fabs(v8);
      if (v16 < v17) {
        double v16 = v17;
      }
      double v18 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
      if (v15 <= v18)
      {
LABEL_36:
        double v9 = *(double *)a1;
        double v38 = *(double *)(a1 + 8);
        double v39 = v9;
        sub_100843CD4(&v39, &v38, 1);
        double v10 = v38;
        double v11 = v39;
        double v12 = *(double *)a2;
        double v38 = *(double *)(a2 + 8);
        double v39 = v12;
        sub_100843CD4(&v39, &v38, 1);
        if (v11 == v39) {
          goto LABEL_61;
        }
        if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(void *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          double v19 = vabdd_f64(v11, v39);
          double v20 = fabs(v11);
          double v21 = fabs(v39);
          if (v20 >= v21) {
            double v21 = v20;
          }
          double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v19 <= v22)
          {
LABEL_61:
            if (v10 == v38) {
              return sub_10085E26C((uint64_t)&unk_10198D630, a1, a2);
            }
            if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              double v23 = vabdd_f64(v10, v38);
              double v24 = fabs(v10);
              double v25 = fabs(v38);
              if (v24 >= v25) {
                double v25 = v24;
              }
              double v26 = v25 >= 1.0 ? v25 * 2.22044605e-16 : 2.22044605e-16;
              if (v23 <= v26) {
                return sub_10085E26C((uint64_t)&unk_10198D630, a1, a2);
              }
            }
          }
        }
      }
    }
  }

  double v27 = *(double *)(a1 + 104);
  double v28 = *(double *)(a2 + 104);
  if (vabdd_f64(v27, v28) >= 50.0) {
    return v27 < v28;
  }
  double v29 = *(double *)(a1 + 96);
  if (v29 == 0.0) {
    sub_10124CD90(a1, a2, a3);
  }
  double v30 = *(double *)(a2 + 96);
  if (v30 == 0.0) {
    sub_10124CDB4(a1, a2, a3);
  }
  double v31 = *(double *)(a1 + 88) / v29;
  double v32 = *(double *)(a2 + 88) / v30;
  if (v31 == v32)
  {
    BOOL v33 = 0;
  }

  else if ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
         || (*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  }
  {
    BOOL v33 = 1;
  }

  else
  {
    double v34 = vabdd_f64(v31, v32);
    double v35 = fabs(v31);
    double v36 = fabs(v32);
    if (v35 < v36) {
      double v35 = v36;
    }
    if (v35 >= 1.0) {
      double v37 = v35 * 2.22044605e-16;
    }
    else {
      double v37 = 2.22044605e-16;
    }
    BOOL v33 = v34 > v37;
  }

  return v31 < v32 && v33;
}

uint64_t sub_10085E26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 136) != *(void *)(a3 + 136))
  {
    uint64_t v7 = *(int *)(a2 + 40);
    double v8 = (char *)dword_1013395D4;
    if (v7 <= 5)
    {
      int v6 = dword_1013395D4[v7];
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v3 = *(void *)(a2 + 144);
  uint64_t v4 = *(void *)(a3 + 144);
  if (v3 == v4)
  {
    uint64_t v5 = *(int *)(a2 + 40);
    else {
      int v6 = dword_1013395D4[v5];
    }
    uint64_t v12 = *(int *)(a3 + 40);
    if (v12 <= 5)
    {
      int v11 = dword_1013395D4[v12];
      return v6 < v11;
    }

    goto LABEL_18;
  }

  if (v3 == -1)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 40);
    if (v9 == 1) {
      return 0LL;
    }
    if (v9 != 2)
    {
LABEL_10:
      double v8 = "";
      if (v9 <= 5)
      {
        int v6 = *(_DWORD *)&aDitmces[4 * v9 + 9];
        goto LABEL_13;
      }

__n128 sub_10085E374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(void *)(a4 + 48);
  uint64_t v11 = *(void *)(a3 + 48);
  if (v10 != v11)
  {
    if (v10 >= v11) {
      return result;
    }
LABEL_13:
    __int128 v88 = *(_OWORD *)(a3 + 160);
    __int128 v91 = *(_OWORD *)(a3 + 176);
    uint64_t v94 = *(void *)(a3 + 192);
    __int128 v76 = *(_OWORD *)(a3 + 96);
    __int128 v79 = *(_OWORD *)(a3 + 112);
    __int128 v82 = *(_OWORD *)(a3 + 128);
    __int128 v85 = *(_OWORD *)(a3 + 144);
    __int128 v64 = *(_OWORD *)(a3 + 32);
    __int128 v67 = *(_OWORD *)(a3 + 48);
    __int128 v70 = *(_OWORD *)(a3 + 64);
    __int128 v73 = *(_OWORD *)(a3 + 80);
    __int128 v58 = *(_OWORD *)a3;
    __n128 v61 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    __int128 v17 = *(_OWORD *)(a4 + 16);
    __int128 v18 = *(_OWORD *)(a4 + 32);
    __int128 v19 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v19;
    *(_OWORD *)(a3 + 16) = v17;
    *(_OWORD *)(a3 + 32) = v18;
    __int128 v20 = *(_OWORD *)(a4 + 80);
    __int128 v21 = *(_OWORD *)(a4 + 96);
    __int128 v22 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v22;
    *(_OWORD *)(a3 + 80) = v20;
    *(_OWORD *)(a3 + 96) = v21;
    __int128 v23 = *(_OWORD *)(a4 + 144);
    __int128 v24 = *(_OWORD *)(a4 + 160);
    __int128 v25 = *(_OWORD *)(a4 + 176);
    *(void *)(a3 + 192) = *(void *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v24;
    *(_OWORD *)(a3 + 176) = v25;
    *(_OWORD *)(a3 + 144) = v23;
    *(_OWORD *)(a4 + 160) = v88;
    *(_OWORD *)(a4 + 176) = v91;
    *(void *)(a4 + 192) = v94;
    *(_OWORD *)(a4 + 96) = v76;
    *(_OWORD *)(a4 + 112) = v79;
    *(_OWORD *)(a4 + 128) = v82;
    *(_OWORD *)(a4 + 144) = v85;
    *(_OWORD *)(a4 + 32) = v64;
    *(_OWORD *)(a4 + 48) = v67;
    *(_OWORD *)(a4 + 64) = v70;
    *(_OWORD *)(a4 + 80) = v73;
    __n128 result = v61;
    *(_OWORD *)a4 = v58;
    *(__n128 *)(a4 + 16) = v61;
    uint64_t v26 = *(void *)(a3 + 48);
    uint64_t v27 = *(void *)(a2 + 48);
    if (v26 == v27)
    {
      uint64_t v28 = *(void *)(a3 + 56);
      uint64_t v29 = *(void *)(a2 + 56);
      BOOL v30 = v28 < v29;
      if (v28 == v29)
      {
        uint64_t v31 = *(void *)(a3 + 64);
        uint64_t v32 = *(void *)(a2 + 64);
        BOOL v30 = v31 < v32;
        if (v31 == v32) {
          BOOL v30 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
        }
      }

      if (!v30
        && (*(void *)(a3 + 72) != *(void *)(a2 + 72)
         || *(void *)(a3 + 64) != *(void *)(a2 + 64)
         || v28 != v29
         || *(void *)(a3 + 80) != *(void *)(a2 + 80)
         || !sub_10085DFAC(a3, a2, v8)))
      {
        return result;
      }
    }

    else if (v26 >= v27)
    {
      return result;
    }

    __int128 v89 = *(_OWORD *)(a2 + 160);
    __int128 v92 = *(_OWORD *)(a2 + 176);
    uint64_t v95 = *(void *)(a2 + 192);
    __int128 v77 = *(_OWORD *)(a2 + 96);
    __int128 v80 = *(_OWORD *)(a2 + 112);
    __int128 v83 = *(_OWORD *)(a2 + 128);
    __int128 v86 = *(_OWORD *)(a2 + 144);
    __int128 v65 = *(_OWORD *)(a2 + 32);
    __int128 v68 = *(_OWORD *)(a2 + 48);
    __int128 v71 = *(_OWORD *)(a2 + 64);
    __int128 v74 = *(_OWORD *)(a2 + 80);
    __int128 v59 = *(_OWORD *)a2;
    __n128 v62 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    __int128 v33 = *(_OWORD *)(a3 + 16);
    __int128 v34 = *(_OWORD *)(a3 + 32);
    __int128 v35 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v35;
    *(_OWORD *)(a2 + 16) = v33;
    *(_OWORD *)(a2 + 32) = v34;
    __int128 v36 = *(_OWORD *)(a3 + 80);
    __int128 v37 = *(_OWORD *)(a3 + 96);
    __int128 v38 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v38;
    *(_OWORD *)(a2 + 80) = v36;
    *(_OWORD *)(a2 + 96) = v37;
    __int128 v39 = *(_OWORD *)(a3 + 144);
    __int128 v40 = *(_OWORD *)(a3 + 160);
    __int128 v41 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v40;
    *(_OWORD *)(a2 + 176) = v41;
    *(_OWORD *)(a2 + 144) = v39;
    *(_OWORD *)(a3 + 160) = v89;
    *(_OWORD *)(a3 + 176) = v92;
    *(void *)(a3 + 192) = v95;
    *(_OWORD *)(a3 + 96) = v77;
    *(_OWORD *)(a3 + 112) = v80;
    *(_OWORD *)(a3 + 128) = v83;
    *(_OWORD *)(a3 + 144) = v86;
    *(_OWORD *)(a3 + 32) = v65;
    *(_OWORD *)(a3 + 48) = v68;
    *(_OWORD *)(a3 + 64) = v71;
    *(_OWORD *)(a3 + 80) = v74;
    __n128 result = v62;
    *(_OWORD *)a3 = v59;
    *(__n128 *)(a3 + 16) = v62;
    uint64_t v42 = *(void *)(a2 + 48);
    uint64_t v43 = *(void *)(a1 + 48);
    if (v42 == v43)
    {
      uint64_t v44 = *(void *)(a2 + 56);
      uint64_t v45 = *(void *)(a1 + 56);
      BOOL v46 = v44 < v45;
      if (v44 == v45)
      {
        uint64_t v47 = *(void *)(a2 + 64);
        uint64_t v48 = *(void *)(a1 + 64);
        BOOL v46 = v47 < v48;
        if (v47 == v48) {
          BOOL v46 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
        }
      }

      if (!v46
        && (*(void *)(a2 + 72) != *(void *)(a1 + 72)
         || *(void *)(a2 + 64) != *(void *)(a1 + 64)
         || v44 != v45
         || *(void *)(a2 + 80) != *(void *)(a1 + 80)
         || !sub_10085DFAC(a2, a1, v8)))
      {
        return result;
      }
    }

    else if (v42 >= v43)
    {
      return result;
    }

    __int128 v90 = *(_OWORD *)(a1 + 160);
    __int128 v93 = *(_OWORD *)(a1 + 176);
    uint64_t v96 = *(void *)(a1 + 192);
    __int128 v78 = *(_OWORD *)(a1 + 96);
    __int128 v81 = *(_OWORD *)(a1 + 112);
    __int128 v84 = *(_OWORD *)(a1 + 128);
    __int128 v87 = *(_OWORD *)(a1 + 144);
    __int128 v66 = *(_OWORD *)(a1 + 32);
    __int128 v69 = *(_OWORD *)(a1 + 48);
    __int128 v72 = *(_OWORD *)(a1 + 64);
    __int128 v75 = *(_OWORD *)(a1 + 80);
    __int128 v60 = *(_OWORD *)a1;
    __n128 v63 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    __int128 v49 = *(_OWORD *)(a2 + 16);
    __int128 v50 = *(_OWORD *)(a2 + 32);
    __int128 v51 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v51;
    *(_OWORD *)(a1 + 16) = v49;
    *(_OWORD *)(a1 + 32) = v50;
    __int128 v52 = *(_OWORD *)(a2 + 80);
    __int128 v53 = *(_OWORD *)(a2 + 96);
    __int128 v54 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v54;
    *(_OWORD *)(a1 + 80) = v52;
    *(_OWORD *)(a1 + 96) = v53;
    __int128 v55 = *(_OWORD *)(a2 + 144);
    __int128 v56 = *(_OWORD *)(a2 + 160);
    __int128 v57 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v56;
    *(_OWORD *)(a1 + 176) = v57;
    *(_OWORD *)(a1 + 144) = v55;
    *(_OWORD *)(a2 + 160) = v90;
    *(_OWORD *)(a2 + 176) = v93;
    *(void *)(a2 + 192) = v96;
    *(_OWORD *)(a2 + 96) = v78;
    *(_OWORD *)(a2 + 112) = v81;
    *(_OWORD *)(a2 + 128) = v84;
    *(_OWORD *)(a2 + 144) = v87;
    *(_OWORD *)(a2 + 32) = v66;
    *(_OWORD *)(a2 + 48) = v69;
    *(_OWORD *)(a2 + 64) = v72;
    *(_OWORD *)(a2 + 80) = v75;
    __n128 result = v63;
    *(_OWORD *)a2 = v60;
    *(__n128 *)(a2 + 16) = v63;
    return result;
  }

  uint64_t v12 = *(void *)(a4 + 56);
  uint64_t v13 = *(void *)(a3 + 56);
  BOOL v14 = v12 < v13;
  if (v12 == v13)
  {
    uint64_t v15 = *(void *)(a4 + 64);
    uint64_t v16 = *(void *)(a3 + 64);
    BOOL v14 = v15 < v16;
    if (v15 == v16) {
      BOOL v14 = *(_OWORD *)(a4 + 72) < *(_OWORD *)(a3 + 72);
    }
  }

  if (v14
    || *(void *)(a4 + 72) == *(void *)(a3 + 72)
    && *(void *)(a4 + 64) == *(void *)(a3 + 64)
    && v12 == v13
    && *(void *)(a4 + 80) == *(void *)(a3 + 80)
    && sub_10085DFAC(a4, a3, v8))
  {
    goto LABEL_13;
  }

  return result;
}

__n128 sub_10085E7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_10085E374(a1, a2, a3, a4).n128_u64[0];
  uint64_t v12 = *(void *)(a5 + 48);
  uint64_t v13 = *(void *)(a4 + 48);
  if (v12 != v13)
  {
    if (v12 >= v13) {
      return result;
    }
LABEL_13:
    __int128 v116 = *(_OWORD *)(a4 + 160);
    __int128 v120 = *(_OWORD *)(a4 + 176);
    uint64_t v124 = *(void *)(a4 + 192);
    __int128 v100 = *(_OWORD *)(a4 + 96);
    __int128 v104 = *(_OWORD *)(a4 + 112);
    __int128 v108 = *(_OWORD *)(a4 + 128);
    __int128 v112 = *(_OWORD *)(a4 + 144);
    __int128 v84 = *(_OWORD *)(a4 + 32);
    __int128 v88 = *(_OWORD *)(a4 + 48);
    __int128 v92 = *(_OWORD *)(a4 + 64);
    __int128 v96 = *(_OWORD *)(a4 + 80);
    __int128 v76 = *(_OWORD *)a4;
    __n128 v80 = *(__n128 *)(a4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    __int128 v19 = *(_OWORD *)(a5 + 16);
    __int128 v20 = *(_OWORD *)(a5 + 32);
    __int128 v21 = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = v21;
    *(_OWORD *)(a4 + 16) = v19;
    *(_OWORD *)(a4 + 32) = v20;
    __int128 v22 = *(_OWORD *)(a5 + 80);
    __int128 v23 = *(_OWORD *)(a5 + 96);
    __int128 v24 = *(_OWORD *)(a5 + 128);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(a4 + 128) = v24;
    *(_OWORD *)(a4 + 80) = v22;
    *(_OWORD *)(a4 + 96) = v23;
    __int128 v25 = *(_OWORD *)(a5 + 144);
    __int128 v26 = *(_OWORD *)(a5 + 160);
    __int128 v27 = *(_OWORD *)(a5 + 176);
    *(void *)(a4 + 192) = *(void *)(a5 + 192);
    *(_OWORD *)(a4 + 160) = v26;
    *(_OWORD *)(a4 + 176) = v27;
    *(_OWORD *)(a4 + 144) = v25;
    *(_OWORD *)(a5 + 160) = v116;
    *(_OWORD *)(a5 + 176) = v120;
    *(void *)(a5 + 192) = v124;
    *(_OWORD *)(a5 + 96) = v100;
    *(_OWORD *)(a5 + 112) = v104;
    *(_OWORD *)(a5 + 128) = v108;
    *(_OWORD *)(a5 + 144) = v112;
    *(_OWORD *)(a5 + 32) = v84;
    *(_OWORD *)(a5 + 48) = v88;
    *(_OWORD *)(a5 + 64) = v92;
    *(_OWORD *)(a5 + 80) = v96;
    __n128 result = v80;
    *(_OWORD *)a5 = v76;
    *(__n128 *)(a5 + 16) = v80;
    uint64_t v28 = *(void *)(a4 + 48);
    uint64_t v29 = *(void *)(a3 + 48);
    if (v28 == v29)
    {
      uint64_t v30 = *(void *)(a4 + 56);
      uint64_t v31 = *(void *)(a3 + 56);
      BOOL v32 = v30 < v31;
      if (v30 == v31)
      {
        uint64_t v33 = *(void *)(a4 + 64);
        uint64_t v34 = *(void *)(a3 + 64);
        BOOL v32 = v33 < v34;
        if (v33 == v34) {
          BOOL v32 = *(_OWORD *)(a4 + 72) < *(_OWORD *)(a3 + 72);
        }
      }

      if (!v32
        && (*(void *)(a4 + 72) != *(void *)(a3 + 72)
         || *(void *)(a4 + 64) != *(void *)(a3 + 64)
         || v30 != v31
         || *(void *)(a4 + 80) != *(void *)(a3 + 80)
         || !sub_10085DFAC(a4, a3, v10)))
      {
        return result;
      }
    }

    else if (v28 >= v29)
    {
      return result;
    }

    __int128 v117 = *(_OWORD *)(a3 + 160);
    __int128 v121 = *(_OWORD *)(a3 + 176);
    uint64_t v125 = *(void *)(a3 + 192);
    __int128 v101 = *(_OWORD *)(a3 + 96);
    __int128 v105 = *(_OWORD *)(a3 + 112);
    __int128 v109 = *(_OWORD *)(a3 + 128);
    __int128 v113 = *(_OWORD *)(a3 + 144);
    __int128 v85 = *(_OWORD *)(a3 + 32);
    __int128 v89 = *(_OWORD *)(a3 + 48);
    __int128 v93 = *(_OWORD *)(a3 + 64);
    __int128 v97 = *(_OWORD *)(a3 + 80);
    __int128 v77 = *(_OWORD *)a3;
    __n128 v81 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    __int128 v35 = *(_OWORD *)(a4 + 16);
    __int128 v36 = *(_OWORD *)(a4 + 32);
    __int128 v37 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v37;
    *(_OWORD *)(a3 + 16) = v35;
    *(_OWORD *)(a3 + 32) = v36;
    __int128 v38 = *(_OWORD *)(a4 + 80);
    __int128 v39 = *(_OWORD *)(a4 + 96);
    __int128 v40 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v40;
    *(_OWORD *)(a3 + 80) = v38;
    *(_OWORD *)(a3 + 96) = v39;
    __int128 v41 = *(_OWORD *)(a4 + 144);
    __int128 v42 = *(_OWORD *)(a4 + 160);
    __int128 v43 = *(_OWORD *)(a4 + 176);
    *(void *)(a3 + 192) = *(void *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v42;
    *(_OWORD *)(a3 + 176) = v43;
    *(_OWORD *)(a3 + 144) = v41;
    *(_OWORD *)(a4 + 160) = v117;
    *(_OWORD *)(a4 + 176) = v121;
    *(void *)(a4 + 192) = v125;
    *(_OWORD *)(a4 + 96) = v101;
    *(_OWORD *)(a4 + 112) = v105;
    *(_OWORD *)(a4 + 128) = v109;
    *(_OWORD *)(a4 + 144) = v113;
    *(_OWORD *)(a4 + 32) = v85;
    *(_OWORD *)(a4 + 48) = v89;
    *(_OWORD *)(a4 + 64) = v93;
    *(_OWORD *)(a4 + 80) = v97;
    __n128 result = v81;
    *(_OWORD *)a4 = v77;
    *(__n128 *)(a4 + 16) = v81;
    uint64_t v44 = *(void *)(a3 + 48);
    uint64_t v45 = *(void *)(a2 + 48);
    if (v44 == v45)
    {
      uint64_t v46 = *(void *)(a3 + 56);
      uint64_t v47 = *(void *)(a2 + 56);
      BOOL v48 = v46 < v47;
      if (v46 == v47)
      {
        uint64_t v49 = *(void *)(a3 + 64);
        uint64_t v50 = *(void *)(a2 + 64);
        BOOL v48 = v49 < v50;
        if (v49 == v50) {
          BOOL v48 = *(_OWORD *)(a3 + 72) < *(_OWORD *)(a2 + 72);
        }
      }

      if (!v48
        && (*(void *)(a3 + 72) != *(void *)(a2 + 72)
         || *(void *)(a3 + 64) != *(void *)(a2 + 64)
         || v46 != v47
         || *(void *)(a3 + 80) != *(void *)(a2 + 80)
         || !sub_10085DFAC(a3, a2, v10)))
      {
        return result;
      }
    }

    else if (v44 >= v45)
    {
      return result;
    }

    __int128 v118 = *(_OWORD *)(a2 + 160);
    __int128 v122 = *(_OWORD *)(a2 + 176);
    uint64_t v126 = *(void *)(a2 + 192);
    __int128 v102 = *(_OWORD *)(a2 + 96);
    __int128 v106 = *(_OWORD *)(a2 + 112);
    __int128 v110 = *(_OWORD *)(a2 + 128);
    __int128 v114 = *(_OWORD *)(a2 + 144);
    __int128 v86 = *(_OWORD *)(a2 + 32);
    __int128 v90 = *(_OWORD *)(a2 + 48);
    __int128 v94 = *(_OWORD *)(a2 + 64);
    __int128 v98 = *(_OWORD *)(a2 + 80);
    __int128 v78 = *(_OWORD *)a2;
    __n128 v82 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    __int128 v51 = *(_OWORD *)(a3 + 16);
    __int128 v52 = *(_OWORD *)(a3 + 32);
    __int128 v53 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v53;
    *(_OWORD *)(a2 + 16) = v51;
    *(_OWORD *)(a2 + 32) = v52;
    __int128 v54 = *(_OWORD *)(a3 + 80);
    __int128 v55 = *(_OWORD *)(a3 + 96);
    __int128 v56 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v56;
    *(_OWORD *)(a2 + 80) = v54;
    *(_OWORD *)(a2 + 96) = v55;
    __int128 v57 = *(_OWORD *)(a3 + 144);
    __int128 v58 = *(_OWORD *)(a3 + 160);
    __int128 v59 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v58;
    *(_OWORD *)(a2 + 176) = v59;
    *(_OWORD *)(a2 + 144) = v57;
    *(_OWORD *)(a3 + 160) = v118;
    *(_OWORD *)(a3 + 176) = v122;
    *(void *)(a3 + 192) = v126;
    *(_OWORD *)(a3 + 96) = v102;
    *(_OWORD *)(a3 + 112) = v106;
    *(_OWORD *)(a3 + 128) = v110;
    *(_OWORD *)(a3 + 144) = v114;
    *(_OWORD *)(a3 + 32) = v86;
    *(_OWORD *)(a3 + 48) = v90;
    *(_OWORD *)(a3 + 64) = v94;
    *(_OWORD *)(a3 + 80) = v98;
    __n128 result = v82;
    *(_OWORD *)a3 = v78;
    *(__n128 *)(a3 + 16) = v82;
    uint64_t v60 = *(void *)(a2 + 48);
    uint64_t v61 = *(void *)(a1 + 48);
    if (v60 == v61)
    {
      uint64_t v62 = *(void *)(a2 + 56);
      uint64_t v63 = *(void *)(a1 + 56);
      BOOL v64 = v62 < v63;
      if (v62 == v63)
      {
        uint64_t v65 = *(void *)(a2 + 64);
        uint64_t v66 = *(void *)(a1 + 64);
        BOOL v64 = v65 < v66;
        if (v65 == v66) {
          BOOL v64 = *(_OWORD *)(a2 + 72) < *(_OWORD *)(a1 + 72);
        }
      }

      if (!v64
        && (*(void *)(a2 + 72) != *(void *)(a1 + 72)
         || *(void *)(a2 + 64) != *(void *)(a1 + 64)
         || v62 != v63
         || *(void *)(a2 + 80) != *(void *)(a1 + 80)
         || !sub_10085DFAC(a2, a1, v10)))
      {
        return result;
      }
    }

    else if (v60 >= v61)
    {
      return result;
    }

    __int128 v119 = *(_OWORD *)(a1 + 160);
    __int128 v123 = *(_OWORD *)(a1 + 176);
    uint64_t v127 = *(void *)(a1 + 192);
    __int128 v103 = *(_OWORD *)(a1 + 96);
    __int128 v107 = *(_OWORD *)(a1 + 112);
    __int128 v111 = *(_OWORD *)(a1 + 128);
    __int128 v115 = *(_OWORD *)(a1 + 144);
    __int128 v87 = *(_OWORD *)(a1 + 32);
    __int128 v91 = *(_OWORD *)(a1 + 48);
    __int128 v95 = *(_OWORD *)(a1 + 64);
    __int128 v99 = *(_OWORD *)(a1 + 80);
    __int128 v79 = *(_OWORD *)a1;
    __n128 v83 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    __int128 v67 = *(_OWORD *)(a2 + 16);
    __int128 v68 = *(_OWORD *)(a2 + 32);
    __int128 v69 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v69;
    *(_OWORD *)(a1 + 16) = v67;
    *(_OWORD *)(a1 + 32) = v68;
    __int128 v70 = *(_OWORD *)(a2 + 80);
    __int128 v71 = *(_OWORD *)(a2 + 96);
    __int128 v72 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v72;
    *(_OWORD *)(a1 + 80) = v70;
    *(_OWORD *)(a1 + 96) = v71;
    __int128 v73 = *(_OWORD *)(a2 + 144);
    __int128 v74 = *(_OWORD *)(a2 + 160);
    __int128 v75 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v74;
    *(_OWORD *)(a1 + 176) = v75;
    *(_OWORD *)(a1 + 144) = v73;
    *(_OWORD *)(a2 + 160) = v119;
    *(_OWORD *)(a2 + 176) = v123;
    *(void *)(a2 + 192) = v127;
    *(_OWORD *)(a2 + 96) = v103;
    *(_OWORD *)(a2 + 112) = v107;
    *(_OWORD *)(a2 + 128) = v111;
    *(_OWORD *)(a2 + 144) = v115;
    *(_OWORD *)(a2 + 32) = v87;
    *(_OWORD *)(a2 + 48) = v91;
    *(_OWORD *)(a2 + 64) = v95;
    *(_OWORD *)(a2 + 80) = v99;
    __n128 result = v83;
    *(_OWORD *)a2 = v79;
    *(__n128 *)(a2 + 16) = v83;
    return result;
  }

  uint64_t v14 = *(void *)(a5 + 56);
  uint64_t v15 = *(void *)(a4 + 56);
  BOOL v16 = v14 < v15;
  if (v14 == v15)
  {
    uint64_t v17 = *(void *)(a5 + 64);
    uint64_t v18 = *(void *)(a4 + 64);
    BOOL v16 = v17 < v18;
    if (v17 == v18) {
      BOOL v16 = *(_OWORD *)(a5 + 72) < *(_OWORD *)(a4 + 72);
    }
  }

  if (v16
    || *(void *)(a5 + 72) == *(void *)(a4 + 72)
    && *(void *)(a5 + 64) == *(void *)(a4 + 64)
    && v14 == v15
    && *(void *)(a5 + 80) == *(void *)(a4 + 80)
    && sub_10085DFAC(a5, a4, v10))
  {
    goto LABEL_13;
  }

  return result;
}

uint64_t sub_10085ED38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 200;
    if (a2 - a1 >= 201)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 200 * v10;
      do
      {
        sub_10085F0E8(a1, a4, v9, v12);
        v12 -= 200LL;
        --v11;
      }

      while (v11);
    }

    uint64_t v13 = a2;
    if (a2 != v4)
    {
      uint64_t v14 = a2;
      while (1)
      {
        uint64_t v15 = *(void *)(v14 + 48);
        uint64_t v16 = *(void *)(a1 + 48);
        if (v15 == v16) {
          break;
        }
        if (v15 < v16) {
          goto LABEL_19;
        }
LABEL_20:
        v14 += 200LL;
        if (v14 == v4)
        {
          uint64_t v13 = v4;
          goto LABEL_22;
        }
      }

      uint64_t v17 = *(void *)(v14 + 56);
      uint64_t v18 = *(void *)(a1 + 56);
      BOOL v19 = v17 < v18;
      if (v17 == v18)
      {
        uint64_t v20 = *(void *)(v14 + 64);
        uint64_t v21 = *(void *)(a1 + 64);
        BOOL v19 = v20 < v21;
        if (v20 == v21) {
          BOOL v19 = *(_OWORD *)(v14 + 72) < *(_OWORD *)(a1 + 72);
        }
      }

      if (!v19
        && (*(void *)(v14 + 72) != *(void *)(a1 + 72)
         || *(void *)(v14 + 64) != *(void *)(a1 + 64)
         || v17 != v18
         || *(void *)(v14 + 80) != *(void *)(a1 + 80)
         || !sub_10085DFAC(v14, a1, a3)))
      {
        goto LABEL_20;
      }

__n128 sub_10085F0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v92 = v4;
  uint64_t v93 = v5;
  uint64_t v9 = v6 >> 1;
  uint64_t v11 = (0x1EB851EB851EB852LL * ((a4 - a1) >> 3)) | 1;
  uint64_t v12 = a1 + 200 * v11;
  uint64_t v13 = 0x1EB851EB851EB852LL * ((a4 - a1) >> 3) + 2;
  if (v13 >= a3) {
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)(a1 + 200 * v11 + 48);
  uint64_t v15 = *(void *)(v12 + 248);
  if (v14 == v15)
  {
    uint64_t v16 = *(void *)(a1 + 200 * v11 + 56);
    uint64_t v17 = *(void *)(v12 + 256);
    BOOL v18 = v16 < v17;
    if (v16 == v17)
    {
      uint64_t v19 = *(void *)(a1 + 200 * v11 + 64);
      uint64_t v20 = *(void *)(v12 + 264);
      BOOL v18 = v19 < v20;
      if (v19 == v20) {
        BOOL v18 = *(_OWORD *)(a1 + 200 * v11 + 72) < *(_OWORD *)(v12 + 272);
      }
    }

    if (!v18)
    {
      if (*(void *)(a1 + 200 * v11 + 72) != *(void *)(v12 + 272)
        || *(void *)(a1 + 200 * v11 + 64) != *(void *)(v12 + 264))
      {
        goto LABEL_20;
      }

      BOOL v21 = v16 == v17 && *(void *)(a1 + 200 * v11 + 80) == *(void *)(v12 + 280);
    }

    goto LABEL_19;
  }

  if (v14 < v15)
  {
LABEL_19:
    v12 += 200LL;
    uint64_t v11 = v13;
  }

uint64_t sub_10085F5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    uint64_t v9 = v5 + 1;
    a1 += 200 * (v5 + 1);
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 >= a3) {
      goto LABEL_21;
    }
    uint64_t v12 = *(void *)(v8 + 200 * v9 + 48);
    uint64_t v13 = *(void *)(a1 + 248);
    if (v12 != v13)
    {
      if (v12 >= v13) {
        goto LABEL_21;
      }
LABEL_20:
      a1 += 200LL;
      uint64_t v5 = v11;
      goto LABEL_21;
    }

    uint64_t v14 = *(void *)(v8 + 200 * v9 + 56);
    uint64_t v15 = *(void *)(a1 + 256);
    BOOL v16 = v14 < v15;
    if (v14 == v15)
    {
      uint64_t v17 = *(void *)(v8 + 200 * v9 + 64);
      uint64_t v18 = *(void *)(a1 + 264);
      BOOL v16 = v17 < v18;
      if (v17 == v18) {
        BOOL v16 = *(_OWORD *)(v8 + 200 * v9 + 72) < *(_OWORD *)(a1 + 272);
      }
    }

    if (v16) {
      goto LABEL_20;
    }
    if (*(void *)(v8 + 200 * v9 + 72) == *(void *)(a1 + 272)
      && *(void *)(v8 + 200 * v9 + 64) == *(void *)(a1 + 264))
    {
      uint64_t v19 = *(void *)(v8 + 200 * v9 + 80);
      BOOL v20 = v14 == v15 && v19 == *(void *)(a1 + 280);
    }

__n128 sub_10085F730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  unint64_t v6 = v4 >> 1;
  uint64_t v7 = (__int128 *)(a1 + 200 * (v4 >> 1));
  uint64_t v8 = (__int128 *)(a2 - 200);
  uint64_t v9 = *((void *)v7 + 6);
  uint64_t v10 = *(void *)(a2 - 152);
  if (v9 == v10)
  {
    uint64_t v11 = *(void *)(a1 + 200 * v6 + 56);
    uint64_t v12 = *(void *)(a2 - 144);
    BOOL v13 = v11 < v12;
    if (v11 == v12)
    {
      uint64_t v14 = *(void *)(a1 + 200 * v6 + 64);
      uint64_t v15 = *(void *)(a2 - 136);
      BOOL v13 = v14 < v15;
      if (v14 == v15) {
        BOOL v13 = *(_OWORD *)(a1 + 200 * v6 + 72) < *(_OWORD *)(a2 - 128);
      }
    }

    if (!v13)
    {
      if (*(void *)(a1 + 200 * v6 + 72) != *(void *)(a2 - 128)
        || *(void *)(a1 + 200 * v6 + 64) != *(void *)(a2 - 136))
      {
        return result;
      }

      BOOL v16 = v11 == v12 && *(void *)(a1 + 200 * v6 + 80) == *(void *)(a2 - 120);
    }
  }

  else if (v9 >= v10)
  {
    return result;
  }

  __int128 v18 = v8[11];
  __int128 v67 = v8[10];
  __int128 v68 = v18;
  uint64_t v69 = *((void *)v8 + 24);
  __int128 v19 = v8[7];
  __int128 v63 = v8[6];
  __int128 v64 = v19;
  __n128 v20 = (__n128)v8[9];
  __int128 v65 = v8[8];
  __n128 v66 = v20;
  __int128 v21 = v8[3];
  __int128 v59 = v8[2];
  __int128 v60 = v21;
  __int128 v22 = v8[5];
  __int128 v61 = v8[4];
  __int128 v62 = v22;
  __int128 v23 = v8[1];
  __int128 v57 = *v8;
  __int128 v58 = v23;
  __int128 *v8 = *v7;
  __int128 v24 = v7[1];
  __int128 v25 = v7[2];
  __int128 v26 = v7[4];
  void v8[3] = v7[3];
  v8[4] = v26;
  v8[1] = v24;
  v8[2] = v25;
  __int128 v27 = v7[5];
  __int128 v28 = v7[6];
  __int128 v29 = v7[8];
  _WORD v8[7] = v7[7];
  _WORD v8[8] = v29;
  v8[5] = v27;
  v8[6] = v28;
  __int128 v30 = v7[9];
  __int128 v31 = v7[10];
  __int128 v32 = v7[11];
  *((void *)v8 + 24) = *((void *)v7 + 24);
  v8[10] = v31;
  v8[11] = v32;
  v8[9] = v30;
  if (v4 < 2) {
    goto LABEL_35;
  }
  while (1)
  {
    __n128 v33 = v7;
    unint64_t v34 = v6 - 1;
    unint64_t v6 = (v6 - 1) >> 1;
    uint64_t v7 = (__int128 *)(a1 + 200 * v6);
    uint64_t v35 = *((void *)v7 + 6);
    if (v35 == (void)v60) {
      break;
    }
LABEL_32:
    *__n128 v33 = *v7;
    __int128 v40 = v7[1];
    __int128 v41 = v7[2];
    __int128 v42 = v7[4];
    void v33[3] = v7[3];
    v33[4] = v42;
    v33[1] = v40;
    void v33[2] = v41;
    __int128 v43 = v7[5];
    __int128 v44 = v7[6];
    __int128 v45 = v7[8];
    v33[7] = v7[7];
    v33[8] = v45;
    v33[5] = v43;
    v33[6] = v44;
    __int128 v46 = v7[9];
    __int128 v47 = v7[10];
    __int128 v48 = v7[11];
    *((void *)v33 + 24) = *((void *)v7 + 24);
    v33[10] = v47;
    v33[11] = v48;
    v33[9] = v46;
    if (v34 <= 1) {
      goto LABEL_35;
    }
  }

  uint64_t v36 = *(void *)(a1 + 200 * v6 + 56);
  BOOL v37 = v36 < *((void *)&v60 + 1);
  if (v36 == *((void *)&v60 + 1))
  {
    uint64_t v38 = *(void *)(a1 + 200 * v6 + 64);
    BOOL v37 = v38 < (uint64_t)v61;
    if (v38 == (void)v61) {
      BOOL v37 = *(_OWORD *)(a1 + 200 * v6 + 72) < (__int128)__PAIR128__(v62, *((unint64_t *)&v61 + 1));
    }
  }

  if (v37) {
    goto LABEL_32;
  }
  if (*(_OWORD *)(a1 + 200 * v6 + 64) == v61)
  {
    BOOL v39 = v36 == *((void *)&v60 + 1) && *(void *)(a1 + 200 * v6 + 80) == (void)v62;
  }

uint64_t sub_10085FA34(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 40);
  if ((v3 - 5) >= 0xFFFFFFFC)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)result;
    BOOL v8 = !*(void *)result
      || *(void *)(a3 + 56) != *(void *)(v7 + 8)
      || *(void *)(a3 + 64) != *(void *)(v7 + 16);
    *(void *)__n128 result = a3 + 48;
    __n128 result = *(void *)(result + 8);
    if (result)
    {
      if (*(_BYTE *)(v6 + 21))
      {
        if (v8 || (__n128 result = sub_10085FBC8(result, a3), v3 != 1) || (result & 1) == 0) {
          *(_BYTE *)(v6 + 21) = 0;
        }
      }

      if (*(_BYTE *)(v6 + 20))
      {
        if (v8 || (__n128 result = sub_10085FBC8(*(void *)(v6 + 8), a3), (result & 1) == 0))
        {
        }

        else if (v3 == 2)
        {
          goto LABEL_25;
        }

        *(_BYTE *)(v6 + 20) = 0;
      }
    }

    if (v3 != 2)
    {
      if (v3 == 1) {
        *(_BYTE *)(v6 + 21) = 1;
      }
      goto LABEL_27;
    }

uint64_t sub_10085FB7C(uint64_t result, unsigned __int8 *a2)
{
  if (*(_BYTE *)(result + 21)) {
    *(_BYTE *)(result + 21) = 0;
  }
  if (*(_BYTE *)(result + 20))
  {
    *(_BYTE *)(result + 20) = 0;
  }

  return result;
}

uint64_t sub_10085FBC8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 56) != *(void *)(a2 + 56) || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a2 + 72);
  if (v3 != v4)
  {
    double v5 = *(double *)(a2 + 88);
    if (v5 == 0.0)
    {
      if (v3 + 1 != v4) {
        return 0LL;
      }
    }

    else
    {
      if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        return 0LL;
      }
      double v6 = fabs(v5);
      double v7 = 2.22044605e-16;
      if (v6 >= 1.0) {
        double v7 = v6 * 2.22044605e-16;
      }
      uint64_t v8 = v3 + 1;
      if (v6 > v7 || v8 != v4) {
        return 0LL;
      }
    }
  }

  double v10 = *(double *)a1;
  double v23 = *(double *)(a1 + 8);
  double v24 = v10;
  sub_100843CD4(&v24, &v23, 1);
  double v11 = v23;
  double v12 = v24;
  double v13 = *(double *)a2;
  double v23 = *(double *)(a2 + 8);
  double v24 = v13;
  sub_100843CD4(&v24, &v23, 1);
  if (v12 == v24) {
    goto LABEL_34;
  }
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v15 = vabdd_f64(v12, v24);
    double v16 = fabs(v12);
    double v17 = fabs(v24);
    if (v16 >= v17) {
      double v17 = v16;
    }
    double v18 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
    if (v15 <= v18)
    {
LABEL_34:
      if (v11 == v23) {
        return 1LL;
      }
      if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v19 = vabdd_f64(v11, v23);
        double v20 = fabs(v11);
        double v21 = fabs(v23);
        if (v20 >= v21) {
          double v21 = v20;
        }
        double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 <= v22) {
          return 1LL;
        }
      }
    }
  }

  return 0LL;
}

uint64_t sub_10085FD88(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 40);
  if (v1 == 7) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = **(double ***)result;
  uint64_t v4 = *(double ***)(result + 8);
  double v5 = *v4;
  double v6 = v4[1];
  char v12 = 0;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  char v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      __n128 result = sub_1008452A4((uint64_t)&v12, v3, v5, v5 + 2, (uint64_t)&v13);
      if (!(_DWORD)result) {
        break;
      }
      double v7 = v5 + 4;
      v5 += 2;
    }

    while (v7 != v6);
    if (!v15)
    {
      if ((_DWORD)v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!((_DWORD)v13 + HIDWORD(v13))) {
          goto LABEL_8;
        }
      }

      else if (!(_DWORD)v13)
      {
        goto LABEL_8;
      }

      double v10 = *(unsigned __int8 **)(v2 + 24);
      if (*v10 - 58 <= 0xFFFFFFF7)
      {
        *double v10 = 50;
        double v10 = *(unsigned __int8 **)(v2 + 24);
      }

      int v11 = *(_DWORD *)(v2 + 40) | 1;
      *(_DWORD *)(v2 + 40) = v11;
      if (v10[3] - 58 <= 0xFFFFFFF6)
      {
        v10[3] = 49;
        int v11 = *(_DWORD *)(v2 + 40);
      }

      int v8 = v11 | 4;
      goto LABEL_10;
    }
  }

double sub_10085FEEC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  BOOL v9 = a2 - 25;
  unint64_t v10 = a1;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    uint64_t v12 = v11;
    uint64_t v13 = (uint64_t)a2 - v10;
    unint64_t v14 = 0x8F5C28F5C28F5C29LL * ((uint64_t)((uint64_t)a2 - v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v42 = *(a2 - 9);
        uint64_t v43 = *(void *)(v10 + 128);
        if (v42 == v43)
        {
          uint64_t v44 = *(a2 - 8);
          uint64_t v45 = *(void *)(v10 + 136);
          BOOL v46 = v44 < v45;
          if (v44 == v45)
          {
            uint64_t v47 = *(a2 - 7);
            uint64_t v48 = *(void *)(v10 + 144);
            BOOL v46 = v47 < v48;
            if (v47 == v48) {
              BOOL v46 = *((_OWORD *)a2 - 3) < *(_OWORD *)(v10 + 152);
            }
          }

          if (!v46
            && (*(a2 - 6) != *(void *)(v10 + 152)
             || *(a2 - 7) != *(void *)(v10 + 144)
             || v44 != v45
             || *(a2 - 5) != *(void *)(v10 + 160)
             || !sub_100862154((uint64_t)(a2 - 25), v10, a3)))
          {
            return result;
          }
        }

        else if (v42 >= v43)
        {
          return result;
        }

        __int128 v59 = *(_OWORD *)v10;
        __int128 v65 = *(_OWORD *)(v10 + 48);
        __int128 v67 = *(_OWORD *)(v10 + 64);
        __int128 v61 = *(_OWORD *)(v10 + 16);
        __int128 v63 = *(_OWORD *)(v10 + 32);
        __int128 v73 = *(_OWORD *)(v10 + 112);
        __int128 v75 = *(_OWORD *)(v10 + 128);
        __int128 v69 = *(_OWORD *)(v10 + 80);
        __int128 v71 = *(_OWORD *)(v10 + 96);
        uint64_t v83 = *(void *)(v10 + 192);
        __int128 v79 = *(_OWORD *)(v10 + 160);
        __int128 v81 = *(_OWORD *)(v10 + 176);
        __int128 v77 = *(_OWORD *)(v10 + 144);
        *(_OWORD *)unint64_t v10 = *v9;
        __int128 v49 = *(_OWORD *)(a2 - 23);
        __int128 v50 = *(_OWORD *)(a2 - 21);
        __int128 v51 = *(_OWORD *)(a2 - 17);
        *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(v10 + 64) = v51;
        *(_OWORD *)(v10 + 16) = v49;
        *(_OWORD *)(v10 + 32) = v50;
        __int128 v52 = *(_OWORD *)(a2 - 15);
        __int128 v53 = *(_OWORD *)(a2 - 13);
        __int128 v54 = *(_OWORD *)(a2 - 9);
        *(_OWORD *)(v10 + 112) = *(_OWORD *)(a2 - 11);
        *(_OWORD *)(v10 + 128) = v54;
        *(_OWORD *)(v10 + 80) = v52;
        *(_OWORD *)(v10 + 96) = v53;
        __int128 v55 = *(_OWORD *)(a2 - 7);
        __int128 v56 = *(_OWORD *)(a2 - 5);
        __int128 v57 = *(_OWORD *)(a2 - 3);
        *(void *)(v10 + 192) = *(a2 - 1);
        *(_OWORD *)(v10 + 160) = v56;
        *(_OWORD *)(v10 + 176) = v57;
        *(_OWORD *)(v10 + 144) = v55;
        *(_OWORD *)(a2 - 5) = v79;
        *(_OWORD *)(a2 - 3) = v81;
        *(a2 - 1) = v83;
        *(_OWORD *)(a2 - 13) = v71;
        *(_OWORD *)(a2 - 11) = v73;
        *(_OWORD *)(a2 - 9) = v75;
        *(_OWORD *)(a2 - 7) = v77;
        *(_OWORD *)(a2 - 21) = v63;
        *(_OWORD *)(a2 - 19) = v65;
        *(_OWORD *)(a2 - 17) = v67;
        *(_OWORD *)(a2 - 15) = v69;
        double result = *(double *)&v61;
        *BOOL v9 = v59;
        *(_OWORD *)(a2 - 23) = v61;
        return result;
      case 3uLL:
        sub_100860A48(v10, v10 + 200, (uint64_t)(a2 - 25));
        return result;
      case 4uLL:
        *(void *)&double result = sub_10086251C(v10, v10 + 200, v10 + 400, (uint64_t)(a2 - 25)).n128_u64[0];
        return result;
      case 5uLL:
        *(void *)&double result = sub_100862954(v10, v10 + 200, v10 + 400, v10 + 600, (uint64_t)(a2 - 25)).n128_u64[0];
        return result;
      default:
        if (v13 <= 4799)
        {
          if ((a5 & 1) == 0) {
            return sub_1008607C8(v10, (uint64_t)a2, a3);
          }
          sub_1008604D8(v10, (uint64_t)a2, a3);
          return result;
        }

        if (v12 != 1)
        {
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = v10 + 200 * (v14 >> 1);
          if ((unint64_t)v13 < 0x6401)
          {
            sub_100860A48(v16, v10, (uint64_t)(a2 - 25));
            if ((a5 & 1) != 0) {
              goto LABEL_22;
            }
          }

          else
          {
            sub_100860A48(v10, v16, (uint64_t)(a2 - 25));
            uint64_t v17 = 200 * v15;
            uint64_t v18 = 200 * v15 + v10 - 200;
            sub_100860A48(v10 + 200, v17 + v10 - 200, (uint64_t)(a2 - 50));
            uint64_t v19 = v10 + 400;
            uint64_t v20 = v10 + 200 + v17;
            sub_100860A48(v19, v20, (uint64_t)(a2 - 75));
            sub_100860A48(v18, v16, v20);
            __int128 v58 = *(_OWORD *)a1;
            __int128 v64 = *(_OWORD *)(a1 + 48);
            __int128 v66 = *(_OWORD *)(a1 + 64);
            __int128 v60 = *(_OWORD *)(a1 + 16);
            __int128 v62 = *(_OWORD *)(a1 + 32);
            __int128 v72 = *(_OWORD *)(a1 + 112);
            __int128 v74 = *(_OWORD *)(a1 + 128);
            __int128 v68 = *(_OWORD *)(a1 + 80);
            __int128 v70 = *(_OWORD *)(a1 + 96);
            uint64_t v82 = *(void *)(a1 + 192);
            __int128 v78 = *(_OWORD *)(a1 + 160);
            __int128 v80 = *(_OWORD *)(a1 + 176);
            __int128 v76 = *(_OWORD *)(a1 + 144);
            *(_OWORD *)a1 = *(_OWORD *)v16;
            __int128 v22 = *(_OWORD *)(v16 + 16);
            __int128 v23 = *(_OWORD *)(v16 + 32);
            __int128 v24 = *(_OWORD *)(v16 + 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v16 + 48);
            *(_OWORD *)(a1 + 64) = v24;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 32) = v23;
            __int128 v25 = *(_OWORD *)(v16 + 80);
            __int128 v26 = *(_OWORD *)(v16 + 96);
            __int128 v27 = *(_OWORD *)(v16 + 128);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v16 + 112);
            *(_OWORD *)(a1 + 128) = v27;
            *(_OWORD *)(a1 + 80) = v25;
            *(_OWORD *)(a1 + 96) = v26;
            __int128 v28 = *(_OWORD *)(v16 + 144);
            __int128 v29 = *(_OWORD *)(v16 + 160);
            __int128 v30 = *(_OWORD *)(v16 + 176);
            *(void *)(a1 + 192) = *(void *)(v16 + 192);
            *(_OWORD *)(a1 + 160) = v29;
            *(_OWORD *)(a1 + 176) = v30;
            *(_OWORD *)(a1 + 144) = v28;
            *(_OWORD *)uint64_t v16 = v58;
            *(_OWORD *)(v16 + 48) = v64;
            *(_OWORD *)(v16 + 64) = v66;
            *(_OWORD *)(v16 + 16) = v60;
            *(_OWORD *)(v16 + 32) = v62;
            *(_OWORD *)(v16 + 112) = v72;
            *(_OWORD *)(v16 + 128) = v74;
            *(_OWORD *)(v16 + 80) = v68;
            *(_OWORD *)(v16 + 96) = v70;
            *(void *)(v16 + 192) = v82;
            *(_OWORD *)(v16 + 160) = v78;
            *(_OWORD *)(v16 + 176) = v80;
            *(_OWORD *)(v16 + 144) = v76;
            if ((a5 & 1) != 0) {
              goto LABEL_22;
            }
          }

          uint64_t v31 = *(void *)(a1 - 72);
          uint64_t v32 = *(void *)(a1 + 128);
          if (v31 == v32)
          {
            uint64_t v33 = *(void *)(a1 - 64);
            uint64_t v34 = *(void *)(a1 + 136);
            BOOL v35 = v33 < v34;
            if (v33 == v34)
            {
              uint64_t v36 = *(void *)(a1 - 56);
              uint64_t v37 = *(void *)(a1 + 144);
              BOOL v35 = v36 < v37;
              if (v36 == v37) {
                BOOL v35 = *(_OWORD *)(a1 - 48) < *(_OWORD *)(a1 + 152);
              }
            }

            if (!v35
              && (*(void *)(a1 - 48) != *(void *)(a1 + 152)
               || *(void *)(a1 - 56) != *(void *)(a1 + 144)
               || v33 != v34
               || *(void *)(a1 - 40) != *(void *)(a1 + 160)
               || (sub_100862154(a1 - 200, a1, v21) & 1) == 0))
            {
LABEL_26:
              unint64_t v10 = sub_10086112C((__int128 *)a1, (unint64_t)a2, a3);
              goto LABEL_27;
            }
          }

          else if (v31 >= v32)
          {
            goto LABEL_26;
          }

uint64_t sub_1008604D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result == a2) {
    return result;
  }
  uint64_t v64 = v3;
  uint64_t v65 = v4;
  uint64_t v6 = result;
  uint64_t v7 = result + 200;
  if (result + 200 == a2) {
    return result;
  }
  uint64_t v8 = 0LL;
  uint64_t v9 = result;
  do
  {
    uint64_t v10 = v9;
    uint64_t v9 = v7;
    uint64_t v11 = *(void *)(v10 + 328);
    uint64_t v12 = *(void *)(v10 + 128);
    if (v11 == v12)
    {
      uint64_t v13 = *(void *)(v10 + 336);
      uint64_t v14 = *(void *)(v10 + 136);
      BOOL v15 = v13 < v14;
      if (v13 == v14)
      {
        uint64_t v16 = *(void *)(v10 + 344);
        uint64_t v17 = *(void *)(v10 + 144);
        BOOL v15 = v16 < v17;
        if (v16 == v17) {
          BOOL v15 = *(_OWORD *)(v10 + 352) < *(_OWORD *)(v10 + 152);
        }
      }

      if (!v15)
      {
        if (*(void *)(v10 + 352) != *(void *)(v10 + 152)) {
          goto LABEL_33;
        }
        if (*(void *)(v10 + 344) != *(void *)(v10 + 144)) {
          goto LABEL_33;
        }
        if (v13 != v14) {
          goto LABEL_33;
        }
        if (*(void *)(v10 + 360) != *(void *)(v10 + 160)) {
          goto LABEL_33;
        }
        double result = sub_100862154(v9, v10, a3);
        if (!(_DWORD)result) {
          goto LABEL_33;
        }
      }
    }

    else if (v11 >= v12)
    {
      goto LABEL_33;
    }

    __int128 v18 = *(_OWORD *)(v9 + 48);
    __int128 v54 = *(_OWORD *)(v9 + 32);
    __int128 v55 = v18;
    __int128 v19 = *(_OWORD *)(v9 + 112);
    __int128 v58 = *(_OWORD *)(v9 + 96);
    __int128 v59 = v19;
    __int128 v20 = *(_OWORD *)(v9 + 80);
    __int128 v56 = *(_OWORD *)(v9 + 64);
    __int128 v57 = v20;
    uint64_t v63 = *(void *)(v9 + 192);
    __int128 v21 = *(_OWORD *)(v9 + 176);
    *(_OWORD *)&v61[16] = *(_OWORD *)(v9 + 160);
    __int128 v62 = v21;
    __int128 v22 = *(_OWORD *)(v9 + 144);
    __int128 v60 = *(_OWORD *)(v9 + 128);
    *(_OWORD *)__int128 v61 = v22;
    __int128 v23 = *(_OWORD *)(v9 + 16);
    __int128 v52 = *(_OWORD *)v9;
    __int128 v53 = v23;
    __int128 v24 = *(_OWORD *)(v10 + 176);
    *(_OWORD *)(v9 + 160) = *(_OWORD *)(v10 + 160);
    *(_OWORD *)(v9 + 176) = v24;
    *(void *)(v9 + 192) = *(void *)(v10 + 192);
    __int128 v25 = *(_OWORD *)(v10 + 112);
    *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
    *(_OWORD *)(v9 + 112) = v25;
    __int128 v26 = *(_OWORD *)(v10 + 144);
    *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
    *(_OWORD *)(v9 + 144) = v26;
    __int128 v27 = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
    *(_OWORD *)(v9 + 48) = v27;
    __int128 v28 = *(_OWORD *)(v10 + 80);
    *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v9 + 80) = v28;
    __int128 v29 = *(_OWORD *)(v10 + 16);
    uint64_t v30 = v6;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v29;
    if (v10 == v6) {
      goto LABEL_32;
    }
    uint64_t v31 = v8;
    while (1)
    {
      uint64_t v32 = v6 + v31;
      uint64_t v33 = *(void *)(v6 + v31 - 72);
      if ((void)v60 == v33) {
        break;
      }
LABEL_29:
      v10 -= 200LL;
      __int128 v37 = *(_OWORD *)(v6 + v31 - 24);
      *(_OWORD *)(v32 + 160) = *(_OWORD *)(v6 + v31 - 40);
      *(_OWORD *)(v32 + 176) = v37;
      *(void *)(v32 + 192) = *(void *)(v6 + v31 - 8);
      __int128 v38 = *(_OWORD *)(v6 + v31 - 88);
      *(_OWORD *)(v32 + 96) = *(_OWORD *)(v6 + v31 - 104);
      *(_OWORD *)(v32 + 112) = v38;
      __int128 v39 = *(_OWORD *)(v6 + v31 - 56);
      *(_OWORD *)(v32 + 128) = *(_OWORD *)(v6 + v31 - 72);
      *(_OWORD *)(v32 + 144) = v39;
      __int128 v40 = *(_OWORD *)(v6 + v31 - 152);
      *(_OWORD *)(v32 + 32) = *(_OWORD *)(v6 + v31 - 168);
      *(_OWORD *)(v32 + 48) = v40;
      __int128 v41 = *(_OWORD *)(v6 + v31 - 120);
      *(_OWORD *)(v32 + 64) = *(_OWORD *)(v6 + v31 - 136);
      *(_OWORD *)(v32 + 80) = v41;
      __int128 v42 = *(_OWORD *)(v6 + v31 - 184);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)(v6 + v31 - 200);
      *(_OWORD *)(v32 + 16) = v42;
      v31 -= 200LL;
      if (!v31)
      {
        uint64_t v30 = v6;
        goto LABEL_32;
      }
    }

    uint64_t v34 = *(void *)(v32 - 64);
    BOOL v35 = *((void *)&v60 + 1) < v34;
    if (*((void *)&v60 + 1) == v34)
    {
      uint64_t v36 = *(void *)(v6 + v31 - 56);
      BOOL v35 = *(void *)v61 < v36;
      if (*(void *)v61 == v36) {
        BOOL v35 = *(_OWORD *)&v61[8] < *(_OWORD *)(v6 + v31 - 48);
      }
    }

    if (v35) {
      goto LABEL_29;
    }
    if (*(_OWORD *)v61 == *(_OWORD *)(v6 + v31 - 56)
      && *((void *)&v60 + 1) == v34
      && *(void *)&v61[16] == *(void *)(v6 + v31 - 40))
    {
      double result = sub_100862154((uint64_t)&v52, v6 + v31 - 200, a3);
      if (!(_DWORD)result)
      {
        uint64_t v30 = v6 + v31;
        goto LABEL_32;
      }

      goto LABEL_29;
    }

double sub_1008607C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v59 = v3;
    uint64_t v60 = v4;
    uint64_t v6 = a1;
    while (1)
    {
      while (1)
      {
        if (v6 + 200 == a2) {
          return result;
        }
        uint64_t v7 = (void *)v6;
        v6 += 200LL;
        uint64_t v8 = v7[41];
        uint64_t v9 = v7[16];
        if (v8 != v9) {
          break;
        }
        uint64_t v10 = v7[42];
        uint64_t v11 = v7[17];
        BOOL v13 = __OFSUB__(v10, v11);
        BOOL v12 = v10 - v11 < 0;
        if (v10 == v11)
        {
          uint64_t v14 = v7[43];
          uint64_t v15 = v7[18];
          BOOL v13 = __OFSUB__(v14, v15);
          BOOL v12 = v14 - v15 < 0;
          if (v14 == v15)
          {
            uint64_t v16 = v7[45];
            uint64_t v17 = v7[20];
            BOOL v13 = __OFSUB__(v16, v17);
            BOOL v12 = v16 - v17 < 0;
            if (v16 == v17)
            {
              uint64_t v18 = v7[44];
              uint64_t v19 = v7[19];
              BOOL v13 = __OFSUB__(v18, v19);
              BOOL v12 = v18 - v19 < 0;
            }
          }
        }

        if (v12 != v13
          || v7[44] == v7[19]
          && v7[43] == v7[18]
          && v10 == v11
          && v7[45] == v7[20]
          && sub_100862154(v6, (uint64_t)v7, a3))
        {
          goto LABEL_17;
        }
      }

      if (v8 < v9)
      {
LABEL_17:
        __int128 v21 = *(_OWORD *)(v6 + 176);
        __int128 v56 = *(_OWORD *)(v6 + 160);
        __int128 v57 = v21;
        uint64_t v58 = *(void *)(v6 + 192);
        __int128 v22 = *(_OWORD *)(v6 + 112);
        __int128 v52 = *(_OWORD *)(v6 + 96);
        __int128 v53 = v22;
        __int128 v23 = *(_OWORD *)(v6 + 144);
        __int128 v54 = *(_OWORD *)(v6 + 128);
        __int128 v55 = v23;
        __int128 v24 = *(_OWORD *)(v6 + 48);
        __int128 v48 = *(_OWORD *)(v6 + 32);
        __int128 v49 = v24;
        __int128 v25 = *(_OWORD *)(v6 + 80);
        __int128 v50 = *(_OWORD *)(v6 + 64);
        __int128 v51 = v25;
        __int128 v26 = *(_OWORD *)(v6 + 16);
        uint64_t v27 = v6;
        __int128 v46 = *(_OWORD *)v6;
        __int128 v47 = v26;
        while (1)
        {
          __int128 v28 = *(_OWORD *)(v27 - 56);
          __int128 v29 = *(_OWORD *)(v27 - 24);
          *(_OWORD *)(v27 + 160) = *(_OWORD *)(v27 - 40);
          *(_OWORD *)(v27 + 176) = v29;
          *(void *)(v27 + 192) = *(void *)(v27 - 8);
          __int128 v30 = *(_OWORD *)(v27 - 120);
          __int128 v31 = *(_OWORD *)(v27 - 88);
          *(_OWORD *)(v27 + 96) = *(_OWORD *)(v27 - 104);
          *(_OWORD *)(v27 + 112) = v31;
          *(_OWORD *)(v27 + 128) = *(_OWORD *)(v27 - 72);
          *(_OWORD *)(v27 + 144) = v28;
          __int128 v32 = *(_OWORD *)(v27 - 184);
          __int128 v33 = *(_OWORD *)(v27 - 152);
          *(_OWORD *)(v27 + 32) = *(_OWORD *)(v27 - 168);
          *(_OWORD *)(v27 + 48) = v33;
          *(_OWORD *)(v27 + 64) = *(_OWORD *)(v27 - 136);
          *(_OWORD *)(v27 + 80) = v30;
          *(_OWORD *)uint64_t v27 = *(_OWORD *)(v27 - 200);
          *(_OWORD *)(v27 + 16) = v32;
          uint64_t v34 = *(void *)(v27 - 272);
          if ((void)v54 != v34)
          {
            goto LABEL_29;
          }

          uint64_t v35 = *(void *)(v27 - 264);
          BOOL v37 = __OFSUB__(*((void *)&v54 + 1), v35);
          BOOL v36 = *((void *)&v54 + 1) - v35 < 0;
          if (*((void *)&v54 + 1) != v35) {
            goto LABEL_22;
          }
          uint64_t v38 = *(void *)(v27 - 256);
          BOOL v37 = __OFSUB__((void)v55, v38);
          BOOL v36 = (uint64_t)v55 - v38 < 0;
          if ((void)v55 == v38
            && (uint64_t v39 = *(void *)(v27 - 240),
                BOOL v37 = __OFSUB__((void)v56, v39),
                BOOL v36 = (uint64_t)v56 - v39 < 0,
                (void)v56 == v39))
          {
          }

          else
          {
LABEL_22:
            if (v36 != v37) {
              goto LABEL_29;
            }
          }

          if (v55 != *(_OWORD *)(v27 - 256)
            || *((void *)&v54 + 1) != v35
            || (void)v56 != *(void *)(v27 - 240)
            || (sub_100862154((uint64_t)&v46, v27 - 400, a3) & 1) == 0)
          {
            break;
          }

uint64_t sub_100860A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 128);
  uint64_t v7 = *(void *)(a1 + 128);
  if (v6 == v7)
  {
    uint64_t v8 = *(void *)(a2 + 136);
    uint64_t v9 = *(void *)(a1 + 136);
    BOOL v10 = v8 < v9;
    if (v8 == v9)
    {
      uint64_t v11 = *(void *)(a2 + 144);
      uint64_t v12 = *(void *)(a1 + 144);
      BOOL v10 = v11 < v12;
      if (v11 == v12) {
        BOOL v10 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
      }
    }

    if (!v10)
    {
      if (*(void *)(a2 + 152) != *(void *)(a1 + 152)
        || *(void *)(a2 + 144) != *(void *)(a1 + 144)
        || v8 != v9
        || *(void *)(a2 + 160) != *(void *)(a1 + 160)
        || (v13 = sub_100862154(a2, a1, a3), uint64_t v6 = *(void *)(a2 + 128), (v13 & 1) == 0))
      {
LABEL_11:
        uint64_t v14 = *(void *)(a3 + 128);
        if (v14 == v6)
        {
          uint64_t v15 = *(void *)(a3 + 136);
          uint64_t v16 = *(void *)(a2 + 136);
          BOOL v17 = v15 < v16;
          if (v15 == v16)
          {
            uint64_t v18 = *(void *)(a3 + 144);
            uint64_t v19 = *(void *)(a2 + 144);
            BOOL v17 = v18 < v19;
            if (v18 == v19) {
              BOOL v17 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
            }
          }

          if (v17) {
            goto LABEL_47;
          }
          if (*(void *)(a3 + 152) == *(void *)(a2 + 152) && *(void *)(a3 + 144) == *(void *)(a2 + 144))
          {
            uint64_t result = 0LL;
            if (v15 != v16) {
              return result;
            }
            if (*(void *)(a3 + 160) != *(void *)(a2 + 160)) {
              return result;
            }
            uint64_t result = sub_100862154(a3, a2, a3);
            if (!(_DWORD)result) {
              return result;
            }
LABEL_47:
            __int128 v140 = *(_OWORD *)(a2 + 160);
            __int128 v145 = *(_OWORD *)(a2 + 176);
            uint64_t v150 = *(void *)(a2 + 192);
            __int128 v120 = *(_OWORD *)(a2 + 96);
            __int128 v125 = *(_OWORD *)(a2 + 112);
            __int128 v130 = *(_OWORD *)(a2 + 128);
            __int128 v135 = *(_OWORD *)(a2 + 144);
            __int128 v100 = *(_OWORD *)(a2 + 32);
            __int128 v105 = *(_OWORD *)(a2 + 48);
            __int128 v110 = *(_OWORD *)(a2 + 64);
            __int128 v115 = *(_OWORD *)(a2 + 80);
            __int128 v90 = *(_OWORD *)a2;
            __int128 v95 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a2 = *(_OWORD *)a3;
            __int128 v54 = *(_OWORD *)(a3 + 16);
            __int128 v55 = *(_OWORD *)(a3 + 32);
            __int128 v56 = *(_OWORD *)(a3 + 64);
            *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
            *(_OWORD *)(a2 + 64) = v56;
            *(_OWORD *)(a2 + 16) = v54;
            *(_OWORD *)(a2 + 32) = v55;
            __int128 v57 = *(_OWORD *)(a3 + 80);
            __int128 v58 = *(_OWORD *)(a3 + 96);
            __int128 v59 = *(_OWORD *)(a3 + 128);
            *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
            *(_OWORD *)(a2 + 128) = v59;
            *(_OWORD *)(a2 + 80) = v57;
            *(_OWORD *)(a2 + 96) = v58;
            __int128 v60 = *(_OWORD *)(a3 + 144);
            __int128 v61 = *(_OWORD *)(a3 + 160);
            __int128 v62 = *(_OWORD *)(a3 + 176);
            *(void *)(a2 + 192) = *(void *)(a3 + 192);
            *(_OWORD *)(a2 + 160) = v61;
            *(_OWORD *)(a2 + 176) = v62;
            *(_OWORD *)(a2 + 144) = v60;
            *(_OWORD *)(a3 + 160) = v140;
            *(_OWORD *)(a3 + 176) = v145;
            *(void *)(a3 + 192) = v150;
            *(_OWORD *)(a3 + 96) = v120;
            *(_OWORD *)(a3 + 112) = v125;
            *(_OWORD *)(a3 + 128) = v130;
            *(_OWORD *)(a3 + 144) = v135;
            *(_OWORD *)(a3 + 32) = v100;
            *(_OWORD *)(a3 + 48) = v105;
            *(_OWORD *)(a3 + 64) = v110;
            *(_OWORD *)(a3 + 80) = v115;
            *(_OWORD *)a3 = v90;
            *(_OWORD *)(a3 + 16) = v95;
            uint64_t v63 = *(void *)(a2 + 128);
            uint64_t v64 = *(void *)(a1 + 128);
            if (v63 == v64)
            {
              uint64_t v65 = *(void *)(a2 + 136);
              uint64_t v66 = *(void *)(a1 + 136);
              BOOL v67 = v65 < v66;
              if (v65 == v66)
              {
                uint64_t v68 = *(void *)(a2 + 144);
                uint64_t v69 = *(void *)(a1 + 144);
                BOOL v67 = v68 < v69;
                if (v68 == v69) {
                  BOOL v67 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
                }
              }

              if (!v67)
              {
                if (*(void *)(a2 + 152) != *(void *)(a1 + 152) || *(void *)(a2 + 144) != *(void *)(a1 + 144)) {
                  return 1LL;
                }
                uint64_t result = 1LL;
                if (v65 != v66 || *(void *)(a2 + 160) != *(void *)(a1 + 160)) {
                  return result;
                }
              }
            }

            else if (v63 >= v64)
            {
              return 1LL;
            }

            __int128 v142 = *(_OWORD *)(a1 + 160);
            __int128 v147 = *(_OWORD *)(a1 + 176);
            uint64_t v152 = *(void *)(a1 + 192);
            __int128 v122 = *(_OWORD *)(a1 + 96);
            __int128 v127 = *(_OWORD *)(a1 + 112);
            __int128 v132 = *(_OWORD *)(a1 + 128);
            __int128 v137 = *(_OWORD *)(a1 + 144);
            __int128 v102 = *(_OWORD *)(a1 + 32);
            __int128 v107 = *(_OWORD *)(a1 + 48);
            __int128 v112 = *(_OWORD *)(a1 + 64);
            __int128 v117 = *(_OWORD *)(a1 + 80);
            __int128 v92 = *(_OWORD *)a1;
            __int128 v97 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            __int128 v79 = *(_OWORD *)(a2 + 16);
            __int128 v80 = *(_OWORD *)(a2 + 32);
            __int128 v81 = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 64) = v81;
            *(_OWORD *)(a1 + 16) = v79;
            *(_OWORD *)(a1 + 32) = v80;
            __int128 v82 = *(_OWORD *)(a2 + 80);
            __int128 v83 = *(_OWORD *)(a2 + 96);
            __int128 v84 = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a1 + 128) = v84;
            *(_OWORD *)(a1 + 80) = v82;
            *(_OWORD *)(a1 + 96) = v83;
            __int128 v85 = *(_OWORD *)(a2 + 144);
            __int128 v86 = *(_OWORD *)(a2 + 160);
            __int128 v87 = *(_OWORD *)(a2 + 176);
            *(void *)(a1 + 192) = *(void *)(a2 + 192);
            *(_OWORD *)(a1 + 160) = v86;
            *(_OWORD *)(a1 + 176) = v87;
            *(_OWORD *)(a1 + 144) = v85;
            *(_OWORD *)(a2 + 160) = v142;
            *(_OWORD *)(a2 + 176) = v147;
            *(void *)(a2 + 192) = v152;
            *(_OWORD *)(a2 + 96) = v122;
            *(_OWORD *)(a2 + 112) = v127;
            *(_OWORD *)(a2 + 128) = v132;
            *(_OWORD *)(a2 + 144) = v137;
            *(_OWORD *)(a2 + 32) = v102;
            *(_OWORD *)(a2 + 48) = v107;
            *(_OWORD *)(a2 + 64) = v112;
            *(_OWORD *)(a2 + 80) = v117;
            uint64_t result = 2LL;
            *(_OWORD *)a2 = v92;
            *(_OWORD *)(a2 + 16) = v97;
            return result;
          }
        }

        else if (v14 < v6)
        {
          goto LABEL_47;
        }

        return 0LL;
      }
    }
  }

  else if (v6 >= v7)
  {
    goto LABEL_11;
  }

  uint64_t v21 = *(void *)(a3 + 128);
  if (v21 != v6)
  {
    if (v21 >= v6) {
      goto LABEL_33;
    }
LABEL_45:
    __int128 v139 = *(_OWORD *)(a1 + 160);
    __int128 v144 = *(_OWORD *)(a1 + 176);
    uint64_t v149 = *(void *)(a1 + 192);
    __int128 v119 = *(_OWORD *)(a1 + 96);
    __int128 v124 = *(_OWORD *)(a1 + 112);
    __int128 v129 = *(_OWORD *)(a1 + 128);
    __int128 v134 = *(_OWORD *)(a1 + 144);
    __int128 v99 = *(_OWORD *)(a1 + 32);
    __int128 v104 = *(_OWORD *)(a1 + 48);
    __int128 v109 = *(_OWORD *)(a1 + 64);
    __int128 v114 = *(_OWORD *)(a1 + 80);
    __int128 v89 = *(_OWORD *)a1;
    __int128 v94 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    __int128 v43 = *(_OWORD *)(a3 + 16);
    __int128 v44 = *(_OWORD *)(a3 + 32);
    __int128 v45 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 64) = v45;
    *(_OWORD *)(a1 + 16) = v43;
    *(_OWORD *)(a1 + 32) = v44;
    __int128 v46 = *(_OWORD *)(a3 + 80);
    __int128 v47 = *(_OWORD *)(a3 + 96);
    __int128 v48 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a1 + 128) = v48;
    *(_OWORD *)(a1 + 80) = v46;
    *(_OWORD *)(a1 + 96) = v47;
    __int128 v49 = *(_OWORD *)(a3 + 144);
    __int128 v50 = *(_OWORD *)(a3 + 160);
    __int128 v51 = *(_OWORD *)(a3 + 176);
    *(void *)(a1 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a1 + 160) = v50;
    *(_OWORD *)(a1 + 176) = v51;
    *(_OWORD *)(a1 + 144) = v49;
    *(_OWORD *)(a3 + 160) = v139;
    *(_OWORD *)(a3 + 176) = v144;
    *(void *)(a3 + 192) = v149;
    *(_OWORD *)(a3 + 96) = v119;
    *(_OWORD *)(a3 + 112) = v124;
    *(_OWORD *)(a3 + 128) = v129;
    *(_OWORD *)(a3 + 144) = v134;
    *(_OWORD *)(a3 + 32) = v99;
    *(_OWORD *)(a3 + 48) = v104;
    *(_OWORD *)(a3 + 64) = v109;
    *(_OWORD *)(a3 + 80) = v114;
    __int128 v53 = v89;
    __int128 v52 = v94;
    uint64_t result = 1LL;
LABEL_61:
    *(_OWORD *)a3 = v53;
    *(_OWORD *)(a3 + 16) = v52;
    return result;
  }

  uint64_t v22 = *(void *)(a3 + 136);
  uint64_t v23 = *(void *)(a2 + 136);
  BOOL v24 = v22 < v23;
  if (v22 == v23)
  {
    uint64_t v25 = *(void *)(a3 + 144);
    uint64_t v26 = *(void *)(a2 + 144);
    BOOL v24 = v25 < v26;
    if (v25 == v26) {
      BOOL v24 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
    }
  }

  if (v24
    || *(void *)(a3 + 152) == *(void *)(a2 + 152)
    && *(void *)(a3 + 144) == *(void *)(a2 + 144)
    && v22 == v23
    && *(void *)(a3 + 160) == *(void *)(a2 + 160)
    && sub_100862154(a3, a2, a3))
  {
    goto LABEL_45;
  }

unint64_t sub_10086112C(__int128 *a1, unint64_t a2, uint64_t a3)
{
  unint64_t j = a2;
  __int128 v5 = a1[11];
  __int128 v112 = a1[10];
  __int128 v113 = v5;
  uint64_t v114 = *((void *)a1 + 24);
  __int128 v6 = a1[7];
  __int128 v108 = a1[6];
  __int128 v109 = v6;
  __int128 v7 = a1[9];
  __int128 v110 = a1[8];
  __int128 v111 = v7;
  __int128 v8 = a1[3];
  __int128 v104 = a1[2];
  __int128 v105 = v8;
  __int128 v9 = a1[5];
  __int128 v106 = a1[4];
  __int128 v107 = v9;
  __int128 v10 = a1[1];
  __int128 v102 = *a1;
  __int128 v103 = v10;
  unint64_t v11 = a2 - 200;
  uint64_t v12 = *(void *)(a2 - 72);
  if ((void)v110 != v12)
  {
LABEL_27:
    for (unint64_t i = (unint64_t)a1 + 200; ; i += 200LL)
    {
      uint64_t v27 = *(void *)(i + 128);
      if ((void)v110 == v27)
      {
        uint64_t v28 = *(void *)(i + 136);
        BOOL v30 = __OFSUB__(*((void *)&v110 + 1), v28);
        BOOL v29 = *((void *)&v110 + 1) - v28 < 0;
        if (*((void *)&v110 + 1) == v28)
        {
          uint64_t v31 = *(void *)(i + 144);
          BOOL v30 = __OFSUB__((void)v111, v31);
          BOOL v29 = (uint64_t)v111 - v31 < 0;
          if ((void)v111 == v31)
          {
            uint64_t v32 = *(void *)(i + 160);
            BOOL v30 = __OFSUB__((void)v112, v32);
            BOOL v29 = (uint64_t)v112 - v32 < 0;
            if ((void)v112 == v32)
            {
              uint64_t v33 = *(void *)(i + 152);
              BOOL v30 = __OFSUB__(*((void *)&v111 + 1), v33);
              BOOL v29 = *((void *)&v111 + 1) - v33 < 0;
            }
          }
        }

        if (v29 != v30
          || v111 == *(_OWORD *)(i + 144)
          && *((void *)&v110 + 1) == v28
          && (void)v112 == *(void *)(i + 160)
          && (sub_100862154((uint64_t)&v102, i, a3) & 1) != 0)
        {
          goto LABEL_41;
        }
      }

      else if ((uint64_t)v110 < v27)
      {
        goto LABEL_41;
      }
    }
  }

  uint64_t v13 = *(void *)(a2 - 64);
  BOOL v15 = __OFSUB__(*((void *)&v110 + 1), v13);
  BOOL v14 = *((void *)&v110 + 1) - v13 < 0;
  if (*((void *)&v110 + 1) == v13)
  {
    uint64_t v16 = *(void *)(a2 - 56);
    BOOL v15 = __OFSUB__((void)v111, v16);
    BOOL v14 = (uint64_t)v111 - v16 < 0;
    if ((void)v111 == v16)
    {
      uint64_t v17 = *(void *)(a2 - 40);
      BOOL v15 = __OFSUB__((void)v112, v17);
      BOOL v14 = (uint64_t)v112 - v17 < 0;
      if ((void)v112 == v17)
      {
        uint64_t v18 = *(void *)(a2 - 48);
        BOOL v15 = __OFSUB__(*((void *)&v111 + 1), v18);
        BOOL v14 = *((void *)&v111 + 1) - v18 < 0;
      }
    }
  }

  if (v14 != v15
    || v111 == *(_OWORD *)(a2 - 56)
    && (void)v112 == *(void *)(a2 - 40)
    && *((void *)&v110 + 1) == v13
    && sub_100862154((uint64_t)&v102, a2 - 200, a3))
  {
    goto LABEL_27;
  }

unint64_t sub_1008616F0(__int128 *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  uint64_t v111 = *((void *)a1 + 24);
  __int128 v6 = a1[11];
  __int128 v109 = a1[10];
  __int128 v110 = v6;
  __int128 v7 = a1[7];
  __int128 v105 = a1[6];
  __int128 v106 = v7;
  __int128 v8 = a1[9];
  __int128 v107 = a1[8];
  __int128 v108 = v8;
  __int128 v9 = a1[3];
  __int128 v101 = a1[2];
  __int128 v102 = v9;
  __int128 v10 = a1[5];
  __int128 v103 = a1[4];
  __int128 v104 = v10;
  __int128 v11 = a1[1];
  __int128 v99 = *a1;
  __int128 v100 = v11;
  while (1)
  {
    uint64_t v12 = (uint64_t)a1 + v5;
    uint64_t v13 = *(void *)((char *)a1 + v5 + 328);
    if (v13 == (void)v107) {
      break;
    }
LABEL_14:
    v5 += 200LL;
  }

  uint64_t v14 = *(void *)(v12 + 336);
  BOOL v16 = __OFSUB__(v14, *((void *)&v107 + 1));
  BOOL v15 = v14 - *((void *)&v107 + 1) < 0;
  if (v14 == *((void *)&v107 + 1))
  {
    uint64_t v17 = *(void *)((char *)a1 + v5 + 344);
    BOOL v16 = __OFSUB__(v17, (void)v108);
    BOOL v15 = v17 - (uint64_t)v108 < 0;
    if (v17 == (void)v108)
    {
      uint64_t v18 = *(void *)((char *)a1 + v5 + 360);
      BOOL v16 = __OFSUB__(v18, (void)v109);
      BOOL v15 = v18 - (uint64_t)v109 < 0;
      if (v18 == (void)v109)
      {
        uint64_t v19 = *(void *)((char *)a1 + v5 + 352);
        BOOL v16 = __OFSUB__(v19, *((void *)&v108 + 1));
        BOOL v15 = v19 - *((void *)&v108 + 1) < 0;
      }
    }
  }

  if (v15 != v16
    || *(__int128 *)((char *)a1 + v5 + 344) == v108
    && v14 == *((void *)&v107 + 1)
    && *(void *)((char *)a1 + v5 + 360) == (void)v109
    && (sub_100862154(v12 + 200, (uint64_t)&v99, a3) & 1) != 0)
  {
    goto LABEL_14;
  }

BOOL sub_100861C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = 0x8F5C28F5C28F5C29LL * ((a2 - a1) >> 3);
  BOOL result = 1LL;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      __int128 v7 = (_OWORD *)(a2 - 200);
      uint64_t v8 = *(void *)(a2 - 72);
      uint64_t v9 = *(void *)(a1 + 128);
      if (v8 != v9)
      {
        if (v8 >= v9) {
          return result;
        }
        goto LABEL_52;
      }

      uint64_t v10 = *(void *)(a2 - 64);
      uint64_t v11 = *(void *)(a1 + 136);
      BOOL v12 = v10 < v11;
      if (v10 == v11)
      {
        uint64_t v13 = *(void *)(a2 - 56);
        uint64_t v14 = *(void *)(a1 + 144);
        BOOL v12 = v13 < v14;
        if (v13 == v14) {
          BOOL v12 = *(_OWORD *)(a2 - 48) < *(_OWORD *)(a1 + 152);
        }
      }

      if (v12) {
        goto LABEL_52;
      }
      if (*(void *)(a2 - 48) == *(void *)(a1 + 152)
        && *(void *)(a2 - 56) == *(void *)(a1 + 144)
        && v10 == v11
        && *(void *)(a2 - 40) == *(void *)(a1 + 160))
      {
LABEL_52:
        __int128 v62 = *(_OWORD *)(a1 + 176);
        __int128 v93 = *(_OWORD *)(a1 + 160);
        __int128 v94 = v62;
        uint64_t v95 = *(void *)(a1 + 192);
        __int128 v63 = *(_OWORD *)(a1 + 112);
        __int128 v89 = *(_OWORD *)(a1 + 96);
        __int128 v90 = v63;
        __int128 v64 = *(_OWORD *)(a1 + 144);
        __int128 v91 = *(_OWORD *)(a1 + 128);
        __int128 v92 = v64;
        __int128 v65 = *(_OWORD *)(a1 + 48);
        __int128 v85 = *(_OWORD *)(a1 + 32);
        __int128 v86 = v65;
        __int128 v66 = *(_OWORD *)(a1 + 80);
        __int128 v87 = *(_OWORD *)(a1 + 64);
        __int128 v88 = v66;
        __int128 v67 = *(_OWORD *)(a1 + 16);
        __int128 v83 = *(_OWORD *)a1;
        __int128 v84 = v67;
        *(_OWORD *)a1 = *v7;
        __int128 v68 = *(_OWORD *)(a2 - 184);
        __int128 v69 = *(_OWORD *)(a2 - 168);
        __int128 v70 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 64) = v70;
        *(_OWORD *)(a1 + 16) = v68;
        *(_OWORD *)(a1 + 32) = v69;
        __int128 v71 = *(_OWORD *)(a2 - 120);
        __int128 v72 = *(_OWORD *)(a2 - 104);
        __int128 v73 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 128) = v73;
        *(_OWORD *)(a1 + 80) = v71;
        *(_OWORD *)(a1 + 96) = v72;
        __int128 v74 = *(_OWORD *)(a2 - 56);
        __int128 v75 = *(_OWORD *)(a2 - 40);
        __int128 v76 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 192) = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 160) = v75;
        *(_OWORD *)(a1 + 176) = v76;
        *(_OWORD *)(a1 + 144) = v74;
        __int128 v77 = v94;
        *(_OWORD *)(a2 - 40) = v93;
        *(_OWORD *)(a2 - 24) = v77;
        *(void *)(a2 - 8) = v95;
        __int128 v78 = v90;
        *(_OWORD *)(a2 - 104) = v89;
        *(_OWORD *)(a2 - 88) = v78;
        __int128 v79 = v92;
        *(_OWORD *)(a2 - 72) = v91;
        *(_OWORD *)(a2 - 56) = v79;
        __int128 v80 = v86;
        *(_OWORD *)(a2 - 168) = v85;
        *(_OWORD *)(a2 - 152) = v80;
        __int128 v81 = v88;
        *(_OWORD *)(a2 - 136) = v87;
        *(_OWORD *)(a2 - 120) = v81;
        __int128 v82 = v84;
        BOOL result = 1LL;
        *__int128 v7 = v83;
        *(_OWORD *)(a2 - 184) = v82;
      }

      return result;
    case 3uLL:
      sub_100860A48(a1, a1 + 200, a2 - 200);
      return 1LL;
    case 4uLL:
      sub_10086251C(a1, a1 + 200, a1 + 400, a2 - 200);
      return 1LL;
    case 5uLL:
      sub_100862954(a1, a1 + 200, a1 + 400, a1 + 600, a2 - 200);
      return 1LL;
    default:
      uint64_t v15 = a1 + 400;
      sub_100860A48(a1, a1 + 200, a1 + 400);
      uint64_t v17 = a1 + 600;
      if (a1 + 600 == a2) {
        return 1LL;
      }
      uint64_t v18 = 0LL;
      int v19 = 0;
      break;
  }

uint64_t sub_100862154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (vabdd_f64(*(double *)(a1 + 184), *(double *)(a2 + 184)) < 50.0)
  {
    double v5 = *(double *)(a1 + 176);
    if (v5 == 0.0) {
      sub_10124CE50();
    }
    double v6 = *(double *)(a2 + 176);
    if (v6 == 0.0) {
      sub_10124CE78();
    }
    double v7 = *(double *)(a1 + 168) / v5;
    double v8 = *(double *)(a2 + 168) / v6;
    if (v7 == v8) {
      goto LABEL_36;
    }
    if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v15 = vabdd_f64(v7, v8);
      double v16 = fabs(v7);
      double v17 = fabs(v8);
      if (v16 < v17) {
        double v16 = v17;
      }
      double v18 = v16 >= 1.0 ? v16 * 2.22044605e-16 : 2.22044605e-16;
      if (v15 <= v18)
      {
LABEL_36:
        double v9 = *(double *)a1;
        double v38 = *(double *)(a1 + 8);
        double v39 = v9;
        sub_100843CD4(&v39, &v38, 1);
        double v10 = v38;
        double v11 = v39;
        double v12 = *(double *)a2;
        double v38 = *(double *)(a2 + 8);
        double v39 = v12;
        sub_100843CD4(&v39, &v38, 1);
        if (v11 == v39) {
          goto LABEL_61;
        }
        if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(void *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          double v19 = vabdd_f64(v11, v39);
          double v20 = fabs(v11);
          double v21 = fabs(v39);
          if (v20 >= v21) {
            double v21 = v20;
          }
          double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v19 <= v22)
          {
LABEL_61:
            if (v10 == v38) {
              return sub_100862414((uint64_t)&unk_10198D631, a1, a2);
            }
            if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              double v23 = vabdd_f64(v10, v38);
              double v24 = fabs(v10);
              double v25 = fabs(v38);
              if (v24 >= v25) {
                double v25 = v24;
              }
              double v26 = v25 >= 1.0 ? v25 * 2.22044605e-16 : 2.22044605e-16;
              if (v23 <= v26) {
                return sub_100862414((uint64_t)&unk_10198D631, a1, a2);
              }
            }
          }
        }
      }
    }
  }

  double v27 = *(double *)(a1 + 184);
  double v28 = *(double *)(a2 + 184);
  if (vabdd_f64(v27, v28) >= 50.0) {
    return v27 < v28;
  }
  double v29 = *(double *)(a1 + 176);
  if (v29 == 0.0) {
    sub_10124CD90(a1, a2, a3);
  }
  double v30 = *(double *)(a2 + 176);
  if (v30 == 0.0) {
    sub_10124CDB4(a1, a2, a3);
  }
  double v31 = *(double *)(a1 + 168) / v29;
  double v32 = *(double *)(a2 + 168) / v30;
  if (v31 == v32)
  {
    BOOL v33 = 0;
  }

  else if ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
         || (*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  }
  {
    BOOL v33 = 1;
  }

  else
  {
    double v34 = vabdd_f64(v31, v32);
    double v35 = fabs(v31);
    double v36 = fabs(v32);
    if (v35 < v36) {
      double v35 = v36;
    }
    if (v35 >= 1.0) {
      double v37 = v35 * 2.22044605e-16;
    }
    else {
      double v37 = 2.22044605e-16;
    }
    BOOL v33 = v34 > v37;
  }

  return v31 < v32 && v33;
}

uint64_t sub_100862414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 56) != *(void *)(a3 + 56))
  {
    uint64_t v7 = *(int *)(a2 + 120);
    double v8 = (char *)dword_1013395D4;
    if (v7 <= 5)
    {
      int v6 = dword_1013395D4[v7];
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)(a3 + 64);
  if (v3 == v4)
  {
    uint64_t v5 = *(int *)(a2 + 120);
    else {
      int v6 = dword_1013395D4[v5];
    }
    uint64_t v12 = *(int *)(a3 + 120);
    if (v12 <= 5)
    {
      int v11 = dword_1013395D4[v12];
      return v6 < v11;
    }

    goto LABEL_18;
  }

  if (v3 == -1)
  {
    unsigned int v9 = *(_DWORD *)(a2 + 120);
    if (v9 == 1) {
      return 0LL;
    }
    if (v9 != 2)
    {
LABEL_10:
      double v8 = "";
      if (v9 <= 5)
      {
        int v6 = *(_DWORD *)&aDitmces[4 * v9 + 9];
        goto LABEL_13;
      }

__n128 sub_10086251C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = *(void *)(a4 + 128);
  uint64_t v11 = *(void *)(a3 + 128);
  if (v10 != v11)
  {
    if (v10 >= v11) {
      return result;
    }
LABEL_13:
    __int128 v88 = *(_OWORD *)(a3 + 160);
    __int128 v91 = *(_OWORD *)(a3 + 176);
    uint64_t v94 = *(void *)(a3 + 192);
    __int128 v76 = *(_OWORD *)(a3 + 96);
    __int128 v79 = *(_OWORD *)(a3 + 112);
    __int128 v82 = *(_OWORD *)(a3 + 128);
    __int128 v85 = *(_OWORD *)(a3 + 144);
    __int128 v64 = *(_OWORD *)(a3 + 32);
    __int128 v67 = *(_OWORD *)(a3 + 48);
    __int128 v70 = *(_OWORD *)(a3 + 64);
    __int128 v73 = *(_OWORD *)(a3 + 80);
    __int128 v58 = *(_OWORD *)a3;
    __n128 v61 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    __int128 v17 = *(_OWORD *)(a4 + 16);
    __int128 v18 = *(_OWORD *)(a4 + 32);
    __int128 v19 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v19;
    *(_OWORD *)(a3 + 16) = v17;
    *(_OWORD *)(a3 + 32) = v18;
    __int128 v20 = *(_OWORD *)(a4 + 80);
    __int128 v21 = *(_OWORD *)(a4 + 96);
    __int128 v22 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v22;
    *(_OWORD *)(a3 + 80) = v20;
    *(_OWORD *)(a3 + 96) = v21;
    __int128 v23 = *(_OWORD *)(a4 + 144);
    __int128 v24 = *(_OWORD *)(a4 + 160);
    __int128 v25 = *(_OWORD *)(a4 + 176);
    *(void *)(a3 + 192) = *(void *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v24;
    *(_OWORD *)(a3 + 176) = v25;
    *(_OWORD *)(a3 + 144) = v23;
    *(_OWORD *)(a4 + 160) = v88;
    *(_OWORD *)(a4 + 176) = v91;
    *(void *)(a4 + 192) = v94;
    *(_OWORD *)(a4 + 96) = v76;
    *(_OWORD *)(a4 + 112) = v79;
    *(_OWORD *)(a4 + 128) = v82;
    *(_OWORD *)(a4 + 144) = v85;
    *(_OWORD *)(a4 + 32) = v64;
    *(_OWORD *)(a4 + 48) = v67;
    *(_OWORD *)(a4 + 64) = v70;
    *(_OWORD *)(a4 + 80) = v73;
    __n128 result = v61;
    *(_OWORD *)a4 = v58;
    *(__n128 *)(a4 + 16) = v61;
    uint64_t v26 = *(void *)(a3 + 128);
    uint64_t v27 = *(void *)(a2 + 128);
    if (v26 == v27)
    {
      uint64_t v28 = *(void *)(a3 + 136);
      uint64_t v29 = *(void *)(a2 + 136);
      BOOL v30 = v28 < v29;
      if (v28 == v29)
      {
        uint64_t v31 = *(void *)(a3 + 144);
        uint64_t v32 = *(void *)(a2 + 144);
        BOOL v30 = v31 < v32;
        if (v31 == v32) {
          BOOL v30 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
        }
      }

      if (!v30
        && (*(void *)(a3 + 152) != *(void *)(a2 + 152)
         || *(void *)(a3 + 144) != *(void *)(a2 + 144)
         || v28 != v29
         || *(void *)(a3 + 160) != *(void *)(a2 + 160)
         || !sub_100862154(a3, a2, v8)))
      {
        return result;
      }
    }

    else if (v26 >= v27)
    {
      return result;
    }

    __int128 v89 = *(_OWORD *)(a2 + 160);
    __int128 v92 = *(_OWORD *)(a2 + 176);
    uint64_t v95 = *(void *)(a2 + 192);
    __int128 v77 = *(_OWORD *)(a2 + 96);
    __int128 v80 = *(_OWORD *)(a2 + 112);
    __int128 v83 = *(_OWORD *)(a2 + 128);
    __int128 v86 = *(_OWORD *)(a2 + 144);
    __int128 v65 = *(_OWORD *)(a2 + 32);
    __int128 v68 = *(_OWORD *)(a2 + 48);
    __int128 v71 = *(_OWORD *)(a2 + 64);
    __int128 v74 = *(_OWORD *)(a2 + 80);
    __int128 v59 = *(_OWORD *)a2;
    __n128 v62 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    __int128 v33 = *(_OWORD *)(a3 + 16);
    __int128 v34 = *(_OWORD *)(a3 + 32);
    __int128 v35 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v35;
    *(_OWORD *)(a2 + 16) = v33;
    *(_OWORD *)(a2 + 32) = v34;
    __int128 v36 = *(_OWORD *)(a3 + 80);
    __int128 v37 = *(_OWORD *)(a3 + 96);
    __int128 v38 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v38;
    *(_OWORD *)(a2 + 80) = v36;
    *(_OWORD *)(a2 + 96) = v37;
    __int128 v39 = *(_OWORD *)(a3 + 144);
    __int128 v40 = *(_OWORD *)(a3 + 160);
    __int128 v41 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v40;
    *(_OWORD *)(a2 + 176) = v41;
    *(_OWORD *)(a2 + 144) = v39;
    *(_OWORD *)(a3 + 160) = v89;
    *(_OWORD *)(a3 + 176) = v92;
    *(void *)(a3 + 192) = v95;
    *(_OWORD *)(a3 + 96) = v77;
    *(_OWORD *)(a3 + 112) = v80;
    *(_OWORD *)(a3 + 128) = v83;
    *(_OWORD *)(a3 + 144) = v86;
    *(_OWORD *)(a3 + 32) = v65;
    *(_OWORD *)(a3 + 48) = v68;
    *(_OWORD *)(a3 + 64) = v71;
    *(_OWORD *)(a3 + 80) = v74;
    __n128 result = v62;
    *(_OWORD *)a3 = v59;
    *(__n128 *)(a3 + 16) = v62;
    uint64_t v42 = *(void *)(a2 + 128);
    uint64_t v43 = *(void *)(a1 + 128);
    if (v42 == v43)
    {
      uint64_t v44 = *(void *)(a2 + 136);
      uint64_t v45 = *(void *)(a1 + 136);
      BOOL v46 = v44 < v45;
      if (v44 == v45)
      {
        uint64_t v47 = *(void *)(a2 + 144);
        uint64_t v48 = *(void *)(a1 + 144);
        BOOL v46 = v47 < v48;
        if (v47 == v48) {
          BOOL v46 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
        }
      }

      if (!v46
        && (*(void *)(a2 + 152) != *(void *)(a1 + 152)
         || *(void *)(a2 + 144) != *(void *)(a1 + 144)
         || v44 != v45
         || *(void *)(a2 + 160) != *(void *)(a1 + 160)
         || !sub_100862154(a2, a1, v8)))
      {
        return result;
      }
    }

    else if (v42 >= v43)
    {
      return result;
    }

    __int128 v90 = *(_OWORD *)(a1 + 160);
    __int128 v93 = *(_OWORD *)(a1 + 176);
    uint64_t v96 = *(void *)(a1 + 192);
    __int128 v78 = *(_OWORD *)(a1 + 96);
    __int128 v81 = *(_OWORD *)(a1 + 112);
    __int128 v84 = *(_OWORD *)(a1 + 128);
    __int128 v87 = *(_OWORD *)(a1 + 144);
    __int128 v66 = *(_OWORD *)(a1 + 32);
    __int128 v69 = *(_OWORD *)(a1 + 48);
    __int128 v72 = *(_OWORD *)(a1 + 64);
    __int128 v75 = *(_OWORD *)(a1 + 80);
    __int128 v60 = *(_OWORD *)a1;
    __n128 v63 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    __int128 v49 = *(_OWORD *)(a2 + 16);
    __int128 v50 = *(_OWORD *)(a2 + 32);
    __int128 v51 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v51;
    *(_OWORD *)(a1 + 16) = v49;
    *(_OWORD *)(a1 + 32) = v50;
    __int128 v52 = *(_OWORD *)(a2 + 80);
    __int128 v53 = *(_OWORD *)(a2 + 96);
    __int128 v54 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v54;
    *(_OWORD *)(a1 + 80) = v52;
    *(_OWORD *)(a1 + 96) = v53;
    __int128 v55 = *(_OWORD *)(a2 + 144);
    __int128 v56 = *(_OWORD *)(a2 + 160);
    __int128 v57 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v56;
    *(_OWORD *)(a1 + 176) = v57;
    *(_OWORD *)(a1 + 144) = v55;
    *(_OWORD *)(a2 + 160) = v90;
    *(_OWORD *)(a2 + 176) = v93;
    *(void *)(a2 + 192) = v96;
    *(_OWORD *)(a2 + 96) = v78;
    *(_OWORD *)(a2 + 112) = v81;
    *(_OWORD *)(a2 + 128) = v84;
    *(_OWORD *)(a2 + 144) = v87;
    *(_OWORD *)(a2 + 32) = v66;
    *(_OWORD *)(a2 + 48) = v69;
    *(_OWORD *)(a2 + 64) = v72;
    *(_OWORD *)(a2 + 80) = v75;
    __n128 result = v63;
    *(_OWORD *)a2 = v60;
    *(__n128 *)(a2 + 16) = v63;
    return result;
  }

  uint64_t v12 = *(void *)(a4 + 136);
  uint64_t v13 = *(void *)(a3 + 136);
  BOOL v14 = v12 < v13;
  if (v12 == v13)
  {
    uint64_t v15 = *(void *)(a4 + 144);
    uint64_t v16 = *(void *)(a3 + 144);
    BOOL v14 = v15 < v16;
    if (v15 == v16) {
      BOOL v14 = *(_OWORD *)(a4 + 152) < *(_OWORD *)(a3 + 152);
    }
  }

  if (v14
    || *(void *)(a4 + 152) == *(void *)(a3 + 152)
    && *(void *)(a4 + 144) == *(void *)(a3 + 144)
    && v12 == v13
    && *(void *)(a4 + 160) == *(void *)(a3 + 160)
    && sub_100862154(a4, a3, v8))
  {
    goto LABEL_13;
  }

  return result;
}

__n128 sub_100862954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_10086251C(a1, a2, a3, a4).n128_u64[0];
  uint64_t v12 = *(void *)(a5 + 128);
  uint64_t v13 = *(void *)(a4 + 128);
  if (v12 != v13)
  {
    if (v12 >= v13) {
      return result;
    }
LABEL_13:
    __int128 v116 = *(_OWORD *)(a4 + 160);
    __int128 v120 = *(_OWORD *)(a4 + 176);
    uint64_t v124 = *(void *)(a4 + 192);
    __int128 v100 = *(_OWORD *)(a4 + 96);
    __int128 v104 = *(_OWORD *)(a4 + 112);
    __int128 v108 = *(_OWORD *)(a4 + 128);
    __int128 v112 = *(_OWORD *)(a4 + 144);
    __int128 v84 = *(_OWORD *)(a4 + 32);
    __int128 v88 = *(_OWORD *)(a4 + 48);
    __int128 v92 = *(_OWORD *)(a4 + 64);
    __int128 v96 = *(_OWORD *)(a4 + 80);
    __int128 v76 = *(_OWORD *)a4;
    __n128 v80 = *(__n128 *)(a4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    __int128 v19 = *(_OWORD *)(a5 + 16);
    __int128 v20 = *(_OWORD *)(a5 + 32);
    __int128 v21 = *(_OWORD *)(a5 + 64);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 64) = v21;
    *(_OWORD *)(a4 + 16) = v19;
    *(_OWORD *)(a4 + 32) = v20;
    __int128 v22 = *(_OWORD *)(a5 + 80);
    __int128 v23 = *(_OWORD *)(a5 + 96);
    __int128 v24 = *(_OWORD *)(a5 + 128);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(a5 + 112);
    *(_OWORD *)(a4 + 128) = v24;
    *(_OWORD *)(a4 + 80) = v22;
    *(_OWORD *)(a4 + 96) = v23;
    __int128 v25 = *(_OWORD *)(a5 + 144);
    __int128 v26 = *(_OWORD *)(a5 + 160);
    __int128 v27 = *(_OWORD *)(a5 + 176);
    *(void *)(a4 + 192) = *(void *)(a5 + 192);
    *(_OWORD *)(a4 + 160) = v26;
    *(_OWORD *)(a4 + 176) = v27;
    *(_OWORD *)(a4 + 144) = v25;
    *(_OWORD *)(a5 + 160) = v116;
    *(_OWORD *)(a5 + 176) = v120;
    *(void *)(a5 + 192) = v124;
    *(_OWORD *)(a5 + 96) = v100;
    *(_OWORD *)(a5 + 112) = v104;
    *(_OWORD *)(a5 + 128) = v108;
    *(_OWORD *)(a5 + 144) = v112;
    *(_OWORD *)(a5 + 32) = v84;
    *(_OWORD *)(a5 + 48) = v88;
    *(_OWORD *)(a5 + 64) = v92;
    *(_OWORD *)(a5 + 80) = v96;
    __n128 result = v80;
    *(_OWORD *)a5 = v76;
    *(__n128 *)(a5 + 16) = v80;
    uint64_t v28 = *(void *)(a4 + 128);
    uint64_t v29 = *(void *)(a3 + 128);
    if (v28 == v29)
    {
      uint64_t v30 = *(void *)(a4 + 136);
      uint64_t v31 = *(void *)(a3 + 136);
      BOOL v32 = v30 < v31;
      if (v30 == v31)
      {
        uint64_t v33 = *(void *)(a4 + 144);
        uint64_t v34 = *(void *)(a3 + 144);
        BOOL v32 = v33 < v34;
        if (v33 == v34) {
          BOOL v32 = *(_OWORD *)(a4 + 152) < *(_OWORD *)(a3 + 152);
        }
      }

      if (!v32
        && (*(void *)(a4 + 152) != *(void *)(a3 + 152)
         || *(void *)(a4 + 144) != *(void *)(a3 + 144)
         || v30 != v31
         || *(void *)(a4 + 160) != *(void *)(a3 + 160)
         || !sub_100862154(a4, a3, v10)))
      {
        return result;
      }
    }

    else if (v28 >= v29)
    {
      return result;
    }

    __int128 v117 = *(_OWORD *)(a3 + 160);
    __int128 v121 = *(_OWORD *)(a3 + 176);
    uint64_t v125 = *(void *)(a3 + 192);
    __int128 v101 = *(_OWORD *)(a3 + 96);
    __int128 v105 = *(_OWORD *)(a3 + 112);
    __int128 v109 = *(_OWORD *)(a3 + 128);
    __int128 v113 = *(_OWORD *)(a3 + 144);
    __int128 v85 = *(_OWORD *)(a3 + 32);
    __int128 v89 = *(_OWORD *)(a3 + 48);
    __int128 v93 = *(_OWORD *)(a3 + 64);
    __int128 v97 = *(_OWORD *)(a3 + 80);
    __int128 v77 = *(_OWORD *)a3;
    __n128 v81 = *(__n128 *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    __int128 v35 = *(_OWORD *)(a4 + 16);
    __int128 v36 = *(_OWORD *)(a4 + 32);
    __int128 v37 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v37;
    *(_OWORD *)(a3 + 16) = v35;
    *(_OWORD *)(a3 + 32) = v36;
    __int128 v38 = *(_OWORD *)(a4 + 80);
    __int128 v39 = *(_OWORD *)(a4 + 96);
    __int128 v40 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 112) = *(_OWORD *)(a4 + 112);
    *(_OWORD *)(a3 + 128) = v40;
    *(_OWORD *)(a3 + 80) = v38;
    *(_OWORD *)(a3 + 96) = v39;
    __int128 v41 = *(_OWORD *)(a4 + 144);
    __int128 v42 = *(_OWORD *)(a4 + 160);
    __int128 v43 = *(_OWORD *)(a4 + 176);
    *(void *)(a3 + 192) = *(void *)(a4 + 192);
    *(_OWORD *)(a3 + 160) = v42;
    *(_OWORD *)(a3 + 176) = v43;
    *(_OWORD *)(a3 + 144) = v41;
    *(_OWORD *)(a4 + 160) = v117;
    *(_OWORD *)(a4 + 176) = v121;
    *(void *)(a4 + 192) = v125;
    *(_OWORD *)(a4 + 96) = v101;
    *(_OWORD *)(a4 + 112) = v105;
    *(_OWORD *)(a4 + 128) = v109;
    *(_OWORD *)(a4 + 144) = v113;
    *(_OWORD *)(a4 + 32) = v85;
    *(_OWORD *)(a4 + 48) = v89;
    *(_OWORD *)(a4 + 64) = v93;
    *(_OWORD *)(a4 + 80) = v97;
    __n128 result = v81;
    *(_OWORD *)a4 = v77;
    *(__n128 *)(a4 + 16) = v81;
    uint64_t v44 = *(void *)(a3 + 128);
    uint64_t v45 = *(void *)(a2 + 128);
    if (v44 == v45)
    {
      uint64_t v46 = *(void *)(a3 + 136);
      uint64_t v47 = *(void *)(a2 + 136);
      BOOL v48 = v46 < v47;
      if (v46 == v47)
      {
        uint64_t v49 = *(void *)(a3 + 144);
        uint64_t v50 = *(void *)(a2 + 144);
        BOOL v48 = v49 < v50;
        if (v49 == v50) {
          BOOL v48 = *(_OWORD *)(a3 + 152) < *(_OWORD *)(a2 + 152);
        }
      }

      if (!v48
        && (*(void *)(a3 + 152) != *(void *)(a2 + 152)
         || *(void *)(a3 + 144) != *(void *)(a2 + 144)
         || v46 != v47
         || *(void *)(a3 + 160) != *(void *)(a2 + 160)
         || !sub_100862154(a3, a2, v10)))
      {
        return result;
      }
    }

    else if (v44 >= v45)
    {
      return result;
    }

    __int128 v118 = *(_OWORD *)(a2 + 160);
    __int128 v122 = *(_OWORD *)(a2 + 176);
    uint64_t v126 = *(void *)(a2 + 192);
    __int128 v102 = *(_OWORD *)(a2 + 96);
    __int128 v106 = *(_OWORD *)(a2 + 112);
    __int128 v110 = *(_OWORD *)(a2 + 128);
    __int128 v114 = *(_OWORD *)(a2 + 144);
    __int128 v86 = *(_OWORD *)(a2 + 32);
    __int128 v90 = *(_OWORD *)(a2 + 48);
    __int128 v94 = *(_OWORD *)(a2 + 64);
    __int128 v98 = *(_OWORD *)(a2 + 80);
    __int128 v78 = *(_OWORD *)a2;
    __n128 v82 = *(__n128 *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    __int128 v51 = *(_OWORD *)(a3 + 16);
    __int128 v52 = *(_OWORD *)(a3 + 32);
    __int128 v53 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 64) = v53;
    *(_OWORD *)(a2 + 16) = v51;
    *(_OWORD *)(a2 + 32) = v52;
    __int128 v54 = *(_OWORD *)(a3 + 80);
    __int128 v55 = *(_OWORD *)(a3 + 96);
    __int128 v56 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(a2 + 128) = v56;
    *(_OWORD *)(a2 + 80) = v54;
    *(_OWORD *)(a2 + 96) = v55;
    __int128 v57 = *(_OWORD *)(a3 + 144);
    __int128 v58 = *(_OWORD *)(a3 + 160);
    __int128 v59 = *(_OWORD *)(a3 + 176);
    *(void *)(a2 + 192) = *(void *)(a3 + 192);
    *(_OWORD *)(a2 + 160) = v58;
    *(_OWORD *)(a2 + 176) = v59;
    *(_OWORD *)(a2 + 144) = v57;
    *(_OWORD *)(a3 + 160) = v118;
    *(_OWORD *)(a3 + 176) = v122;
    *(void *)(a3 + 192) = v126;
    *(_OWORD *)(a3 + 96) = v102;
    *(_OWORD *)(a3 + 112) = v106;
    *(_OWORD *)(a3 + 128) = v110;
    *(_OWORD *)(a3 + 144) = v114;
    *(_OWORD *)(a3 + 32) = v86;
    *(_OWORD *)(a3 + 48) = v90;
    *(_OWORD *)(a3 + 64) = v94;
    *(_OWORD *)(a3 + 80) = v98;
    __n128 result = v82;
    *(_OWORD *)a3 = v78;
    *(__n128 *)(a3 + 16) = v82;
    uint64_t v60 = *(void *)(a2 + 128);
    uint64_t v61 = *(void *)(a1 + 128);
    if (v60 == v61)
    {
      uint64_t v62 = *(void *)(a2 + 136);
      uint64_t v63 = *(void *)(a1 + 136);
      BOOL v64 = v62 < v63;
      if (v62 == v63)
      {
        uint64_t v65 = *(void *)(a2 + 144);
        uint64_t v66 = *(void *)(a1 + 144);
        BOOL v64 = v65 < v66;
        if (v65 == v66) {
          BOOL v64 = *(_OWORD *)(a2 + 152) < *(_OWORD *)(a1 + 152);
        }
      }

      if (!v64
        && (*(void *)(a2 + 152) != *(void *)(a1 + 152)
         || *(void *)(a2 + 144) != *(void *)(a1 + 144)
         || v62 != v63
         || *(void *)(a2 + 160) != *(void *)(a1 + 160)
         || !sub_100862154(a2, a1, v10)))
      {
        return result;
      }
    }

    else if (v60 >= v61)
    {
      return result;
    }

    __int128 v119 = *(_OWORD *)(a1 + 160);
    __int128 v123 = *(_OWORD *)(a1 + 176);
    uint64_t v127 = *(void *)(a1 + 192);
    __int128 v103 = *(_OWORD *)(a1 + 96);
    __int128 v107 = *(_OWORD *)(a1 + 112);
    __int128 v111 = *(_OWORD *)(a1 + 128);
    __int128 v115 = *(_OWORD *)(a1 + 144);
    __int128 v87 = *(_OWORD *)(a1 + 32);
    __int128 v91 = *(_OWORD *)(a1 + 48);
    __int128 v95 = *(_OWORD *)(a1 + 64);
    __int128 v99 = *(_OWORD *)(a1 + 80);
    __int128 v79 = *(_OWORD *)a1;
    __n128 v83 = *(__n128 *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    __int128 v67 = *(_OWORD *)(a2 + 16);
    __int128 v68 = *(_OWORD *)(a2 + 32);
    __int128 v69 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v69;
    *(_OWORD *)(a1 + 16) = v67;
    *(_OWORD *)(a1 + 32) = v68;
    __int128 v70 = *(_OWORD *)(a2 + 80);
    __int128 v71 = *(_OWORD *)(a2 + 96);
    __int128 v72 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v72;
    *(_OWORD *)(a1 + 80) = v70;
    *(_OWORD *)(a1 + 96) = v71;
    __int128 v73 = *(_OWORD *)(a2 + 144);
    __int128 v74 = *(_OWORD *)(a2 + 160);
    __int128 v75 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 160) = v74;
    *(_OWORD *)(a1 + 176) = v75;
    *(_OWORD *)(a1 + 144) = v73;
    *(_OWORD *)(a2 + 160) = v119;
    *(_OWORD *)(a2 + 176) = v123;
    *(void *)(a2 + 192) = v127;
    *(_OWORD *)(a2 + 96) = v103;
    *(_OWORD *)(a2 + 112) = v107;
    *(_OWORD *)(a2 + 128) = v111;
    *(_OWORD *)(a2 + 144) = v115;
    *(_OWORD *)(a2 + 32) = v87;
    *(_OWORD *)(a2 + 48) = v91;
    *(_OWORD *)(a2 + 64) = v95;
    *(_OWORD *)(a2 + 80) = v99;
    __n128 result = v83;
    *(_OWORD *)a2 = v79;
    *(__n128 *)(a2 + 16) = v83;
    return result;
  }

  uint64_t v14 = *(void *)(a5 + 136);
  uint64_t v15 = *(void *)(a4 + 136);
  BOOL v16 = v14 < v15;
  if (v14 == v15)
  {
    uint64_t v17 = *(void *)(a5 + 144);
    uint64_t v18 = *(void *)(a4 + 144);
    BOOL v16 = v17 < v18;
    if (v17 == v18) {
      BOOL v16 = *(_OWORD *)(a5 + 152) < *(_OWORD *)(a4 + 152);
    }
  }

  if (v16
    || *(void *)(a5 + 152) == *(void *)(a4 + 152)
    && *(void *)(a5 + 144) == *(void *)(a4 + 144)
    && v14 == v15
    && *(void *)(a5 + 160) == *(void *)(a4 + 160)
    && sub_100862154(a5, a4, v10))
  {
    goto LABEL_13;
  }

  return result;
}

uint64_t sub_100862EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 200;
    if (a2 - a1 >= 201)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 200 * v10;
      do
      {
        sub_100863290(a1, a4, v9, v12);
        v12 -= 200LL;
        --v11;
      }

      while (v11);
    }

    uint64_t v13 = a2;
    if (a2 != v4)
    {
      uint64_t v14 = a2;
      while (1)
      {
        uint64_t v15 = *(void *)(v14 + 128);
        uint64_t v16 = *(void *)(a1 + 128);
        if (v15 == v16) {
          break;
        }
        if (v15 < v16) {
          goto LABEL_19;
        }
LABEL_20:
        v14 += 200LL;
        if (v14 == v4)
        {
          uint64_t v13 = v4;
          goto LABEL_22;
        }
      }

      uint64_t v17 = *(void *)(v14 + 136);
      uint64_t v18 = *(void *)(a1 + 136);
      BOOL v19 = v17 < v18;
      if (v17 == v18)
      {
        uint64_t v20 = *(void *)(v14 + 144);
        uint64_t v21 = *(void *)(a1 + 144);
        BOOL v19 = v20 < v21;
        if (v20 == v21) {
          BOOL v19 = *(_OWORD *)(v14 + 152) < *(_OWORD *)(a1 + 152);
        }
      }

      if (!v19
        && (*(void *)(v14 + 152) != *(void *)(a1 + 152)
         || *(void *)(v14 + 144) != *(void *)(a1 + 144)
         || v17 != v18
         || *(void *)(v14 + 160) != *(void *)(a1 + 160)
         || !sub_100862154(v14, a1, a3)))
      {
        goto LABEL_20;
      }

__n128 sub_100863290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v92 = v4;
  uint64_t v93 = v5;
  uint64_t v9 = v6 >> 1;
  uint64_t v11 = (0x1EB851EB851EB852LL * ((a4 - a1) >> 3)) | 1;
  uint64_t v12 = a1 + 200 * v11;
  uint64_t v13 = 0x1EB851EB851EB852LL * ((a4 - a1) >> 3) + 2;
  if (v13 >= a3) {
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)(a1 + 200 * v11 + 128);
  uint64_t v15 = *(void *)(v12 + 328);
  if (v14 == v15)
  {
    uint64_t v16 = *(void *)(a1 + 200 * v11 + 136);
    uint64_t v17 = *(void *)(v12 + 336);
    BOOL v18 = v16 < v17;
    if (v16 == v17)
    {
      uint64_t v19 = *(void *)(a1 + 200 * v11 + 144);
      uint64_t v20 = *(void *)(v12 + 344);
      BOOL v18 = v19 < v20;
      if (v19 == v20) {
        BOOL v18 = *(_OWORD *)(a1 + 200 * v11 + 152) < *(_OWORD *)(v12 + 352);
      }
    }

    if (!v18)
    {
      if (*(void *)(a1 + 200 * v11 + 152) != *(void *)(v12 + 352)
        || *(void *)(a1 + 200 * v11 + 144) != *(void *)(v12 + 344))
      {
        goto LABEL_20;
      }

      BOOL v21 = v16 == v17 && *(void *)(a1 + 200 * v11 + 160) == *(void *)(v12 + 360);
    }

    goto LABEL_19;
  }

  if (v14 < v15)
  {
LABEL_19:
    v12 += 200LL;
    uint64_t v11 = v13;
  }

uint64_t sub_10086374C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1;
    uint64_t v9 = v5 + 1;
    a1 += 200 * (v5 + 1);
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 >= a3) {
      goto LABEL_21;
    }
    uint64_t v12 = *(void *)(v8 + 200 * v9 + 128);
    uint64_t v13 = *(void *)(a1 + 328);
    if (v12 != v13)
    {
      if (v12 >= v13) {
        goto LABEL_21;
      }
LABEL_20:
      a1 += 200LL;
      uint64_t v5 = v11;
      goto LABEL_21;
    }

    uint64_t v14 = *(void *)(v8 + 200 * v9 + 136);
    uint64_t v15 = *(void *)(a1 + 336);
    BOOL v16 = v14 < v15;
    if (v14 == v15)
    {
      uint64_t v17 = *(void *)(v8 + 200 * v9 + 144);
      uint64_t v18 = *(void *)(a1 + 344);
      BOOL v16 = v17 < v18;
      if (v17 == v18) {
        BOOL v16 = *(_OWORD *)(v8 + 200 * v9 + 152) < *(_OWORD *)(a1 + 352);
      }
    }

    if (v16) {
      goto LABEL_20;
    }
    if (*(void *)(v8 + 200 * v9 + 152) == *(void *)(a1 + 352)
      && *(void *)(v8 + 200 * v9 + 144) == *(void *)(a1 + 344))
    {
      uint64_t v19 = *(void *)(v8 + 200 * v9 + 160);
      BOOL v20 = v14 == v15 && v19 == *(void *)(a1 + 360);
    }

__n128 sub_1008638D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  unint64_t v6 = v4 >> 1;
  uint64_t v7 = (__int128 *)(a1 + 200 * (v4 >> 1));
  uint64_t v8 = (__int128 *)(a2 - 200);
  uint64_t v9 = *((void *)v7 + 16);
  uint64_t v10 = *(void *)(a2 - 72);
  if (v9 == v10)
  {
    uint64_t v11 = *(void *)(a1 + 200 * v6 + 136);
    uint64_t v12 = *(void *)(a2 - 64);
    BOOL v13 = v11 < v12;
    if (v11 == v12)
    {
      uint64_t v14 = *(void *)(a1 + 200 * v6 + 144);
      uint64_t v15 = *(void *)(a2 - 56);
      BOOL v13 = v14 < v15;
      if (v14 == v15) {
        BOOL v13 = *(_OWORD *)(a1 + 200 * v6 + 152) < *(_OWORD *)(a2 - 48);
      }
    }

    if (!v13)
    {
      if (*(void *)(a1 + 200 * v6 + 152) != *(void *)(a2 - 48)
        || *(void *)(a1 + 200 * v6 + 144) != *(void *)(a2 - 56))
      {
        return result;
      }

      BOOL v16 = v11 == v12 && *(void *)(a1 + 200 * v6 + 160) == *(void *)(a2 - 40);
    }
  }

  else if (v9 >= v10)
  {
    return result;
  }

  __int128 v18 = v8[11];
  __int128 v67 = v8[10];
  __int128 v68 = v18;
  uint64_t v69 = *((void *)v8 + 24);
  __int128 v19 = v8[7];
  __int128 v63 = v8[6];
  __int128 v64 = v19;
  __n128 v20 = (__n128)v8[9];
  __int128 v65 = v8[8];
  __n128 v66 = v20;
  __int128 v21 = v8[3];
  __int128 v59 = v8[2];
  __int128 v60 = v21;
  __int128 v22 = v8[5];
  __int128 v61 = v8[4];
  __int128 v62 = v22;
  __int128 v23 = v8[1];
  __int128 v57 = *v8;
  __int128 v58 = v23;
  __int128 *v8 = *v7;
  __int128 v24 = v7[1];
  __int128 v25 = v7[2];
  __int128 v26 = v7[4];
  void v8[3] = v7[3];
  v8[4] = v26;
  v8[1] = v24;
  v8[2] = v25;
  __int128 v27 = v7[5];
  __int128 v28 = v7[6];
  __int128 v29 = v7[8];
  _WORD v8[7] = v7[7];
  _WORD v8[8] = v29;
  v8[5] = v27;
  v8[6] = v28;
  __int128 v30 = v7[9];
  __int128 v31 = v7[10];
  __int128 v32 = v7[11];
  *((void *)v8 + 24) = *((void *)v7 + 24);
  v8[10] = v31;
  v8[11] = v32;
  v8[9] = v30;
  if (v4 < 2) {
    goto LABEL_35;
  }
  while (1)
  {
    __n128 v33 = v7;
    unint64_t v34 = v6 - 1;
    unint64_t v6 = (v6 - 1) >> 1;
    uint64_t v7 = (__int128 *)(a1 + 200 * v6);
    uint64_t v35 = *((void *)v7 + 16);
    if (v35 == (void)v65) {
      break;
    }
LABEL_32:
    *__n128 v33 = *v7;
    __int128 v40 = v7[1];
    __int128 v41 = v7[2];
    __int128 v42 = v7[4];
    void v33[3] = v7[3];
    v33[4] = v42;
    v33[1] = v40;
    void v33[2] = v41;
    __int128 v43 = v7[5];
    __int128 v44 = v7[6];
    __int128 v45 = v7[8];
    v33[7] = v7[7];
    v33[8] = v45;
    v33[5] = v43;
    v33[6] = v44;
    __int128 v46 = v7[9];
    __int128 v47 = v7[10];
    __int128 v48 = v7[11];
    *((void *)v33 + 24) = *((void *)v7 + 24);
    v33[10] = v47;
    v33[11] = v48;
    v33[9] = v46;
    if (v34 <= 1) {
      goto LABEL_35;
    }
  }

  uint64_t v36 = *(void *)(a1 + 200 * v6 + 136);
  BOOL v37 = v36 < *((void *)&v65 + 1);
  if (v36 == *((void *)&v65 + 1))
  {
    uint64_t v38 = *(void *)(a1 + 200 * v6 + 144);
    BOOL v37 = v38 < (int64_t)v66.n128_u64[0];
    if (v38 == v66.n128_u64[0]) {
      BOOL v37 = *(_OWORD *)(a1 + 200 * v6 + 152) < (__int128)__PAIR128__(v67, v66.n128_u64[1]);
    }
  }

  if (v37) {
    goto LABEL_32;
  }
  if (*(_OWORD *)(a1 + 200 * v6 + 144) == *(_OWORD *)&v66)
  {
    BOOL v39 = v36 == *((void *)&v65 + 1) && *(void *)(a1 + 200 * v6 + 160) == (void)v67;
  }

uint64_t sub_100863BDC(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 120);
  if ((v3 - 5) >= 0xFFFFFFFC)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)result;
    BOOL v8 = !*(void *)result
      || *(void *)(a3 + 136) != *(void *)(v7 + 8)
      || *(void *)(a3 + 144) != *(void *)(v7 + 16);
    *(void *)__n128 result = a3 + 128;
    __n128 result = *(void *)(result + 8);
    if (result)
    {
      if (*(_BYTE *)(v6 + 21))
      {
        if (v8 || (__n128 result = sub_100863D70(result, a3), v3 != 1) || (result & 1) == 0) {
          *(_BYTE *)(v6 + 21) = 0;
        }
      }

      if (*(_BYTE *)(v6 + 20))
      {
        if (v8 || (__n128 result = sub_100863D70(*(void *)(v6 + 8), a3), (result & 1) == 0))
        {
        }

        else if (v3 == 2)
        {
          goto LABEL_25;
        }

        *(_BYTE *)(v6 + 20) = 0;
      }
    }

    if (v3 != 2)
    {
      if (v3 == 1) {
        *(_BYTE *)(v6 + 21) = 1;
      }
      goto LABEL_27;
    }

uint64_t sub_100863D24(uint64_t result, unsigned __int8 *a2)
{
  if (*(_BYTE *)(result + 21)) {
    *(_BYTE *)(result + 21) = 0;
  }
  if (*(_BYTE *)(result + 20))
  {
    *(_BYTE *)(result + 20) = 0;
  }

  return result;
}

uint64_t sub_100863D70(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 136) != *(void *)(a2 + 136) || *(void *)(a1 + 144) != *(void *)(a2 + 144)) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 152);
  uint64_t v4 = *(void *)(a2 + 152);
  if (v3 != v4)
  {
    double v5 = *(double *)(a2 + 168);
    if (v5 == 0.0)
    {
      if (v3 + 1 != v4) {
        return 0LL;
      }
    }

    else
    {
      if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        return 0LL;
      }
      double v6 = fabs(v5);
      double v7 = 2.22044605e-16;
      if (v6 >= 1.0) {
        double v7 = v6 * 2.22044605e-16;
      }
      uint64_t v8 = v3 + 1;
      if (v6 > v7 || v8 != v4) {
        return 0LL;
      }
    }
  }

  double v10 = *(double *)a1;
  double v23 = *(double *)(a1 + 8);
  double v24 = v10;
  sub_100843CD4(&v24, &v23, 1);
  double v11 = v23;
  double v12 = v24;
  double v13 = *(double *)a2;
  double v23 = *(double *)(a2 + 8);
  double v24 = v13;
  sub_100843CD4(&v24, &v23, 1);
  if (v12 == v24) {
    goto LABEL_34;
  }
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v15 = vabdd_f64(v12, v24);
    double v16 = fabs(v12);
    double v17 = fabs(v24);
    if (v16 >= v17) {
      double v17 = v16;
    }
    double v18 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
    if (v15 <= v18)
    {
LABEL_34:
      if (v11 == v23) {
        return 1LL;
      }
      if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v19 = vabdd_f64(v11, v23);
        double v20 = fabs(v11);
        double v21 = fabs(v23);
        if (v20 >= v21) {
          double v21 = v20;
        }
        double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 <= v22) {
          return 1LL;
        }
      }
    }
  }

  return 0LL;
}

uint64_t sub_100863F30(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 40);
  if (v1 == 7) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = **(double ***)result;
  uint64_t v4 = *(double ***)(result + 8);
  double v5 = *v4;
  double v6 = v4[1];
  char v12 = 0;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  char v15 = 0;
  if (v5 + 2 != v6)
  {
    do
    {
      __n128 result = sub_1008452A4((uint64_t)&v12, v3, v5, v5 + 2, (uint64_t)&v13);
      if (!(_DWORD)result) {
        break;
      }
      double v7 = v5 + 4;
      v5 += 2;
    }

    while (v7 != v6);
    if (!v15)
    {
      if ((_DWORD)v14 && HIDWORD(v14) && (int)v14 >= 1)
      {
        if (!((_DWORD)v13 + HIDWORD(v13))) {
          goto LABEL_8;
        }
      }

      else if (!(_DWORD)v13)
      {
        goto LABEL_8;
      }

      double v10 = *(unsigned __int8 **)(v2 + 24);
      if (*v10 - 58 <= 0xFFFFFFF7)
      {
        *double v10 = 50;
        double v10 = *(unsigned __int8 **)(v2 + 24);
      }

      int v11 = *(_DWORD *)(v2 + 40) | 1;
      *(_DWORD *)(v2 + 40) = v11;
      if (v10[1] - 58 <= 0xFFFFFFF6)
      {
        v10[1] = 49;
        int v11 = *(_DWORD *)(v2 + 40);
      }

      int v8 = v11 | 4;
      goto LABEL_10;
    }
  }

uint64_t *sub_100864094(uint64_t a1, uint64_t a2)
{
  *(void *)&__int128 v26 = *(void *)(a1 + 8) + *(void *)a1;
  *((void *)&v26 + 1) = a2;
  uint64_t v3 = sub_10086450C((uint64_t **)(a1 + 16), &v26, &v26);
  if ((v4 & 1) != 0)
  {
    unint64_t v5 = *(void *)(a1 + 56);
    double v24 = 0LL;
    uint64_t v25 = 0LL;
    double v23 = &v24;
    double v6 = *(void **)(a1 + 48);
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v10) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_100007008();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v10) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555LL) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      uint64_t v29 = a1 + 56;
      if (v14)
      {
        char v15 = (char *)sub_10000701C(a1 + 56, v14);
        double v16 = v23;
      }

      else
      {
        char v15 = 0LL;
        double v16 = &v24;
      }

      double v18 = &v15[24 * v11];
      *(void *)&__int128 v26 = v15;
      *((void *)&v26 + 1) = v18;
      __int128 v28 = &v15[24 * v14];
      *(void *)double v18 = v16;
      double v19 = v24;
      *((void *)v18 + 1) = v24;
      double v20 = v18 + 8;
      uint64_t v21 = v25;
      *((void *)v18 + 2) = v25;
      if (v21)
      {
        v19[2] = v20;
        double v23 = &v24;
        double v24 = 0LL;
        uint64_t v25 = 0LL;
      }

      else
      {
        *(void *)double v18 = v20;
      }

      __int128 v27 = v18 + 24;
      sub_1008648D8((uint64_t *)(a1 + 40), &v26);
      double v17 = *(void **)(a1 + 48);
      sub_100864A80((void **)&v26);
    }

    else
    {
      *double v6 = &v24;
      double v7 = v24;
      v6[1] = v24;
      int v8 = v6 + 1;
      uint64_t v9 = v25;
      v6[2] = v25;
      if (v9)
      {
        _OWORD v7[2] = v8;
        double v23 = &v24;
        double v24 = 0LL;
        uint64_t v25 = 0LL;
      }

      else
      {
        *double v6 = v8;
      }

      double v17 = v6 + 3;
    }

    *(void *)(a1 + 48) = v17;
    sub_100008390((uint64_t)&v23, v24);
    ++*(void *)(a1 + 8);
  }

  return v3;
}

void sub_10086424C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

uint64_t sub_100864274(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2 == a1 + 3)
  {
LABEL_10:
    uint64_t v6 = 0LL;
  }

  else
  {
    while (((*(void *)((char *)v8[0] + ((v2[4] >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v2[4]) & 1) != 0
         || (sub_100864BB4((uint64_t)a1, (uint64_t)v2, v8) & 1) == 0)
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          char v4 = v3;
          uint64_t v3 = (void *)*v3;
        }

        while (v3);
      }

      else
      {
        do
        {
          char v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }

        while (!v5);
      }

      uint64_t v2 = v4;
      if (v4 == a1 + 3) {
        goto LABEL_10;
      }
    }

    uint64_t v6 = 1LL;
  }

  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }

  if (v8[0]) {
    operator delete(v8[0]);
  }
  return v6;
}

void sub_100864354( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100864368(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 40);
  sub_100864494(&v3);
  sub_100008390(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

unint64_t *sub_1008643AC(unint64_t *a1, unint64_t a2)
{
  a1[3] = 0LL;
  *a1 = a2;
  a1[1] = 0LL;
  a1[2] = (unint64_t)(a1 + 3);
  a1[4] = 0LL;
  sub_10086440C(a1 + 5, a2);
  return a1;
}

void sub_1008643F4(_Unwind_Exception *a1)
{
}

void *sub_10086440C(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_100006E1C(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 24 * a2;
    uint64_t v6 = 24 * a2;
    double v7 = (void *)(v4 + 8);
    do
    {
      *double v7 = 0LL;
      v7[1] = 0LL;
      *(v7 - 1) = v7;
      v7 += 3;
      v6 -= 24LL;
    }

    while (v6);
    a1[1] = v5;
  }

  return a1;
}

void sub_100864480( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_100864494(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        sub_100008390((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }

      while (v6 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t *sub_10086450C(uint64_t **a1, void *a2, _OWORD *a3)
{
  uint64_t v5 = (void **)sub_10086458C((uint64_t)a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    double v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_1000085FC(a1, v9, v7, v6);
  }

  return v6;
}

void *sub_10086458C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      double v7 = (void *)v4;
      int v8 = (double *)a3[1];
      uint64_t v9 = *(double **)(v4 + 40);
      if (!v8) {
        break;
      }
      if (!v9) {
        goto LABEL_15;
      }
      if (sub_10086464C(v8, v9))
      {
LABEL_11:
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_18;
        }
      }

      else
      {
        uint64_t v10 = (double *)v7[5];
        unint64_t v11 = (double *)a3[1];
        if (v10)
        {
          if (!v11 || !sub_10086464C(v10, v11)) {
            goto LABEL_18;
          }
        }

        else if (!v11)
        {
          goto LABEL_14;
        }

BOOL sub_10086464C(double *a1, double *a2)
{
  double v3 = *a1;
  double v2 = a1[1];
  double v5 = *a2;
  double v4 = a2[1];
  if (*a1 == *a2) {
    goto LABEL_2;
  }
  double v7 = fabs(v5);
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    BOOL v12 = fabs(v3) == 180.0;
  }

  else
  {
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v8 = vabdd_f64(v3, v5);
      double v9 = fabs(v3);
      if (v9 < v7) {
        double v9 = v7;
      }
      double v10 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
      if (v8 <= v10) {
        goto LABEL_2;
      }
    }

    double v11 = fabs(v3);
    BOOL v12 = v11 == 180.0;
    if (v11 != 180.0)
    {
      double v13 = fabs(v11 + -180.0);
      if (v11 < 180.0) {
        double v11 = 180.0;
      }
      if (v11 >= 1.0) {
        double v14 = v11 * 2.22044605e-16;
      }
      else {
        double v14 = 2.22044605e-16;
      }
      BOOL v12 = v13 <= v14;
    }
  }

  if (v7 == 180.0)
  {
    BOOL v16 = 1;
  }

  else
  {
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      BOOL v16 = 0;
      goto LABEL_44;
    }

    double v17 = fabs(v7 + -180.0);
    if (v7 < 180.0) {
      double v7 = 180.0;
    }
    if (v7 >= 1.0) {
      double v18 = v7 * 2.22044605e-16;
    }
    else {
      double v18 = 2.22044605e-16;
    }
    BOOL v16 = v17 <= v18;
  }

  if (v12 && v16) {
    goto LABEL_2;
  }
LABEL_44:
  if (v2 == v4)
  {
    double v23 = fabs(v2);
    goto LABEL_46;
  }

  if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v26 = vabdd_f64(v2, v4);
    double v23 = fabs(v2);
    double v27 = fabs(v4);
    if (v23 >= v27) {
      double v27 = v23;
    }
    double v28 = v27 >= 1.0 ? v27 * 2.22044605e-16 : 2.22044605e-16;
    if (v26 <= v28)
    {
LABEL_46:
      if (v23 != 90.0)
      {
        if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_63;
        }
        double v24 = fabs(v23 + -90.0);
        if (v23 < 90.0) {
          double v23 = 90.0;
        }
        double v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
        if (v24 > v25) {
          goto LABEL_63;
        }
      }

LABEL_2:
      if (v2 != v4)
      {
        if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          return v2 < v4;
        }

        double v19 = vabdd_f64(v2, v4);
        double v20 = fabs(v2);
        double v21 = fabs(v4);
        if (v20 < v21) {
          double v20 = v21;
        }
        double v22 = v20 >= 1.0 ? v20 * 2.22044605e-16 : 2.22044605e-16;
        if (v19 > v22) {
          return v2 < v4;
        }
      }

      return 0LL;
    }
  }

  double v4 = *(_DWORD *)(a1 + 652) - *(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 648);
  double v5 = *(float *)(a1 + 644) + (float)((float)v4 / 100.0);
  uint64_t v6 = sub_100FAE01C(v5, 101320.0);
  if (*(_BYTE *)(a1 + 392))
  {
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_1018840E8);
    }
    double v7 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
    {
      double v8 = *(double *)(a2 + 8);
      double v9 = *(_DWORD *)(a2 + 16);
      double v10 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)std::stringbuf::string_type buf = 134219264;
      __int128 v41 = v8;
      __int128 v42 = 2048;
      __int128 v43 = v6;
      __int128 v44 = 2048;
      __int128 v45 = v5;
      __int128 v46 = 1024;
      __int128 v47 = v4;
      __int128 v48 = 1024;
      __int128 v49 = v9;
      __int128 v50 = 1024;
      __int128 v51 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "compensate watch pressure,timestamp,%f,pressure,%f,elevation,%f,cmHeightDelta,%d,phoneAscend,%d,phoneDescend,%d",  buf,  0x32u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_1018840E8);
      }
      double v11 = *(void *)(a2 + 8);
      BOOL v12 = *(_DWORD *)(a2 + 16);
      double v13 = *(_DWORD *)(a2 + 20);
      __int128 v54 = 134219264;
      __int128 v55 = v11;
      __int128 v56 = 2048;
      __int128 v57 = v6;
      __int128 v58 = 2048;
      __int128 v59 = v5;
      __int128 v60 = 1024;
      __int128 v61 = v4;
      __int128 v62 = 1024;
      __int128 v63 = v12;
      __int128 v64 = 1024;
      __int128 v65 = v13;
      LODWORD(v30) = 50;
      double v14 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  2LL,  "compensate watch pressure,timestamp,%f,pressure,%f,elevation,%f,cmHeightDelta,%d,phoneAscend,%d,phoneDescend,%d",  COERCE_DOUBLE(&v54),  v30,  *(double *)v31,  *(_DWORD *)&v31[8],  *(_DWORD *)((char *)&v33 + 2),  LODWORD(v35));
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "double CLWorkoutElevationFusion::updateWatchPressureWithPhoneElevationChange(const CLElevationChangeEntry &)",  "%s\n",  v14);
    }
  }

  return v6;
}

    *a8 = 100.0;
    return result;
  }

  double v19 = *(_DWORD *)(*(void *)(a10[1] + ((a10[4] >> 5) & 0x7FFFFFFFFFFFFF8LL)) + 16LL * a10[4] + 8);
  if (v19 > 40)
  {
    if (v19 == 41)
    {
LABEL_16:
      *a5 = 100.0;
      return result;
    }

    if (v19 == 52 || v19 == 56)
    {
LABEL_15:
      *a7 = 100.0;
      return result;
    }

    goto LABEL_2;
  }

  switch(v19)
  {
    case 1:
    case 2:
    case 10:
    case 11:
      *a4 = 100.0;
      break;
    case 4:
      goto LABEL_16;
    case 5:
      goto LABEL_15;
    case 8:
      *a6 = 100.0;
      break;
    default:
      goto LABEL_2;
  }

  return result;
}

  if (!*(_BYTE *)(a1 + 1) || (double v11 = v10 - *(double *)(a1 + 24), v11 > *(double *)(a1 + 32)))
  {
    sub_100FF9274(a1, a2, a3, a4, a5);
    return 0LL;
  }

  *(double *)(a1 + 24) = v10;
  if (*(_BYTE *)(a1 + 136))
  {
    sub_1002104CC(a1 + 144, &v53);
    if (*(void *)(a1 + 224) == *(_DWORD *)(a1 + 152))
    {
    }
  }

  double v17 = *(double *)(a1 + 40);
  double v18 = *(double *)(a1 + 8);
  if (v17 + v18 <= 0.0)
  {
    *(_BYTE *)a1 = 0;
    sub_100FF9274(a1, a2, a3, a4, a5);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101893E28);
    }
    double v23 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::stringbuf::string_type buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_FAULT,  "Unexpected,state plus measurement covariance < 0.",  buf,  2u);
    }

    double v24 = sub_1002921D0(115, 0);
    __n128 result = 0LL;
    if (v24)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101893E28);
      }
      LOWORD(v54) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  17LL,  "Unexpected,state plus measurement covariance < 0.",  &v54,  2);
      double v26 = (char *)v25;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
      return 0LL;
    }
  }

  else
  {
    double v19 = *(double *)(a1 + 16);
    double v20 = v53 - v19;
    double v21 = v20 * v20 / (v17 + v18);
    if (v21 <= 20.25)
    {
      double v22 = v11 * 0.00005625;
      if (v21 > 9.0) {
        double v17 = v17 + v17;
      }
    }

    else if (v20 <= 7200.0)
    {
      double v22 = v20 * v20;
    }

    else
    {
      double v22 = 51840000.0;
    }

    uint64_t v29 = v18 + v22;
    __int128 v30 = v29 / (v29 + v17);
    __int128 v31 = v29 * (1.0 - v30);
    *(double *)(a1 + 8) = v31;
    *(double *)(a1 + 16) = v19 + v30 * v20;
    __int128 v32 = sqrt(v31);
    if (v31 >= 0.00000225) {
      __n128 v33 = v32;
    }
    else {
      __n128 v33 = 0.00000225;
    }
    *a5 = v33;
    *a4 = *(double *)(a1 + 16);
    if (qword_101934A70 != -1) {
      dispatch_once(&qword_101934A70, &stru_101893E28);
    }
    unint64_t v34 = (os_log_s *)qword_101934A78;
    if (os_log_type_enabled((os_log_t)qword_101934A78, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = *a2;
      uint64_t v36 = *a3;
      BOOL v37 = *a4;
      uint64_t v38 = *a5;
      *(_DWORD *)std::stringbuf::string_type buf = 134219776;
      *(double *)&uint8_t buf[4] = v35;
      __int128 v71 = 2048;
      __int128 v72 = v36;
      __int128 v73 = 2048;
      __int128 v74 = v37;
      __int128 v75 = 2048;
      __int128 v76 = v38;
      __int128 v77 = 2048;
      __int128 v78 = v17;
      __int128 v79 = 2048;
      __int128 v80 = v22;
      __int128 v81 = 2048;
      __int128 v82 = v20;
      __int128 v83 = 2048;
      __int128 v84 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "internalTimeSecs,%.6lf,externalTimeSecs,%.6lf,filteredOffsetSecs,%.6lf,offsetUncertaintySecs,%.9g,R,%.9g,Q,%.9g, v,%.9g,vtest2,%.9g",  buf,  0x52u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A70 != -1) {
        dispatch_once(&qword_101934A70, &stru_101893E28);
      }
      BOOL v39 = *a2;
      __int128 v40 = *a3;
      __int128 v41 = *a4;
      __int128 v42 = *a5;
      __int128 v54 = 134219776;
      __int128 v55 = v39;
      __int128 v56 = 2048;
      __int128 v57 = v40;
      __int128 v58 = 2048;
      __int128 v59 = v41;
      __int128 v60 = 2048;
      __int128 v61 = v42;
      __int128 v62 = 2048;
      __int128 v63 = v17;
      __int128 v64 = 2048;
      __int128 v65 = v22;
      __n128 v66 = 2048;
      __int128 v67 = v20;
      __int128 v68 = 2048;
      uint64_t v69 = v21;
      LODWORD(v51) = 82;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A78,  2LL,  "internalTimeSecs,%.6lf,externalTimeSecs,%.6lf,filteredOffsetSecs,%.6lf,offsetUncertaintySecs,%.9g,R,%.9g,Q,%.9g, v,%.9g,vtest2,%.9g",  COERCE_DOUBLE(&v54),  v51,  v52,  v53);
      __int128 v44 = (char *)v43;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLTimeOffsetFilter::update(const double &, const double &, double &, double &)",  "%s\n",  v43);
      if (v44 != buf) {
        free(v44);
      }
    }

    return 1LL;
  }

  return result;
}

uint64_t sub_1008648D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10086494C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10086494C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v19 = a6;
  *((void *)&v19 + 1) = a7;
  __int128 v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }

  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24LL;
      *(void *)(v7 - 24) = v9;
      double v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        *double v10 = 0LL;
        *(void *)(a3 - 8) = 0LL;
      }

      else
      {
        *(void *)(v7 - 24) = v12;
      }

      uint64_t v7 = *((void *)&v19 + 1) - 24LL;
      *((void *)&v19 + 1) -= 24LL;
      a3 = v8;
    }

    while (v8 != a5);
    uint64_t v14 = v19;
  }

  char v17 = 1;
  sub_100864A0C((uint64_t)v16);
  return v14;
}

uint64_t sub_100864A0C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_100864A40(a1);
  }
  return a1;
}

void sub_100864A40(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    sub_100008390(v1, *(void **)(v1 + 8));
    v1 += 24LL;
  }

void **sub_100864A80(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100864AB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_100008390(i - 24, *(void **)(i - 16));
  }

uint64_t *sub_100864AF4(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *(void *)(*(void *)a2 + 32LL);
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = *(void *)(v5[4] + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    double v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1000085FC(a1, (uint64_t)v8, v6, v10);
    return v10;
  }

  return (uint64_t *)v8;
}

uint64_t sub_100864BB4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = a2;
  __int128 v19 = 0u;
  memset(v18, 0, sizeof(v18));
  sub_100864FEC(v18, &v20);
  for (uint64_t i = *((void *)&v19 + 1); *((void *)&v19 + 1); uint64_t i = *((void *)&v19 + 1))
  {
    uint64_t v6 = i - 1;
    *((void *)&v19 + 1) = v6;
    sub_100824250(v18, 1);
    *(void *)(*a3 + ((*(void *)(v7 + 32) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << *(void *)(v7 + 32);
    uint64_t v8 = *(void *)(v7 + 32);
    unint64_t v9 = (void *)(*(void *)(a1 + 40) + 24 * v8);
    double v10 = (void *)*v9;
    if ((void *)*v9 != v9 + 1)
    {
      do
      {
        unint64_t v11 = *(void *)(v10[4] + 32LL);
        uint64_t v12 = a3[3];
        if (v11 != *(void *)(v12 + 8 * v8))
        {
          if (((*(void *)(*a3 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
          {
            uint64_t v16 = 1LL;
            goto LABEL_15;
          }

          *(void *)(v12 + 8 * v11) = v8;
          sub_100864FEC(v18, v10 + 4);
        }

        uint64_t v13 = (void *)v10[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }

          while (v13);
        }

        else
        {
          do
          {
            uint64_t v14 = (void *)v10[2];
            BOOL v15 = *v14 == (void)v10;
            double v10 = v14;
          }

          while (!v15);
        }

        uint64_t v8 = *(void *)(v7 + 32);
        double v10 = v14;
      }

      while (v14 != (void *)(*(void *)(a1 + 40) + 24 * v8 + 8));
    }
  }

  uint64_t v16 = 0LL;
LABEL_15:
  sub_100210578(v18);
  return v16;
}

void sub_100864D2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100864D48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_100864D84(void *a1, unint64_t a2)
{
  unsigned __int8 v7 = 0;
  double v4 = sub_100864DEC(a1, a2, &v7);
  uint64_t v6 = -1LL;
  sub_100864F6C(v4 + 3, a2, &v6);
  return a1;
}

void sub_100864DD4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100864DEC(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_1000A7BCC(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_100864EBC(&v13, a2);
        }
        else {
          sub_1004DA818((uint64_t)&v13, a2);
        }
        return a1;
      }
    }

    else
    {
      unint64_t v9 = v8 - 1;
    }

    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0LL;
    }
    *(void *)(*a1 + 8 * v11) = 0LL;
    goto LABEL_10;
  }

  return a1;
}

void *sub_100864EBC(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  double v3 = result;
  int v4 = *((_DWORD *)result + 2);
  uint64_t v5 = (void *)*result;
  if (v4)
  {
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1LL << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }

  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *double v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }

  return result;
}

void *sub_100864F6C(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10000717C(a1, a2);
    unint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8LL;
    }

    while (v8);
    a1[1] = v7;
  }

  return a1;
}

void sub_100864FD0(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_100864FEC(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100865070(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }

  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8LL)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_100865070(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8LL;
      return;
    }

    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000071BC(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      BOOL v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v40 = 8 * (v39 >> 3);
        __int128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int128 v41 = v42;
          v41 += 8;
          v40 -= 8LL;
        }

        while (v40);
      }

      goto LABEL_30;
    }

void sub_100865338( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100865384(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0LL;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 10LL;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 20LL;
  }

  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000EA11C((uint64_t)a1);
}

uint64_t sub_100865418(double *a1, uint64_t a2)
{
  unint64_t v2 = *(double **)a2;
  BOOL v3 = *(double **)(a2 + 8);
  char v13 = 0;
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  char v16 = 0;
  if (v2 + 2 == v3) {
    return 0xFFFFFFFFLL;
  }
  do
  {
    uint64_t v6 = v2 + 4;
    v2 += 2;
  }

  while (v6 != v3);
  if (v16) {
    return 0LL;
  }
  if ((_DWORD)v15 && HIDWORD(v15))
  {
    if ((int)v15 < 1)
    {
      if (!(_DWORD)v14) {
        return 0xFFFFFFFFLL;
      }
    }

    else if (!((_DWORD)v14 + HIDWORD(v14)))
    {
      return 0xFFFFFFFFLL;
    }
  }

  else if (!(_DWORD)v14)
  {
    return 0xFFFFFFFFLL;
  }

  unint64_t v9 = *(double ***)(a2 + 24);
  unint64_t v8 = *(double ***)(a2 + 32);
  if (v9 != v8)
  {
    while (1)
    {
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      if ((unint64_t)((char *)v11 - (char *)*v9) >= 0x40)
      {
        char v13 = 0;
        uint64_t v14 = 0LL;
        uint64_t v15 = 0LL;
        char v16 = 0;
        if (v10 + 2 != v11)
        {
          do
          {
            uint64_t v12 = v10 + 4;
            v10 += 2;
          }

          while (v12 != v11);
          if (v16) {
            return 0LL;
          }
          if ((_DWORD)v15 && HIDWORD(v15))
          {
            if ((int)v15 < 1)
            {
              if ((_DWORD)v14) {
                return 0xFFFFFFFFLL;
              }
            }

            else if ((_DWORD)v14 + HIDWORD(v14))
            {
              return 0xFFFFFFFFLL;
            }
          }

          else if ((_DWORD)v14)
          {
            return 0xFFFFFFFFLL;
          }
        }

        unint64_t v8 = *(double ***)(a2 + 32);
      }

      v9 += 3;
      uint64_t result = 1LL;
      if (v9 == v8) {
        return result;
      }
    }
  }

  return 1LL;
}

  ;
}

  ;
}

void sub_100865630( void *a1, os_log_s *a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
}

void sub_100865648( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

void sub_10086565C( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
}

BOOL sub_100865670()
{
  return os_log_type_enabled((os_log_t)qword_101934838, OS_LOG_TYPE_FAULT);
}

void sub_100865684(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

BOOL sub_10086568C()
{
  return os_log_type_enabled(*(os_log_t *)(v0 + 2104), OS_LOG_TYPE_INFO);
}

BOOL sub_10086569C()
{
  return os_signpost_enabled(*(os_log_t *)(v0 + 2104));
}

void sub_1008656A8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_1008656B0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_1008656B8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_1008656C0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
}

void sub_1008656C8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361B8))
    {
      qword_1019361A0 = 0LL;
      qword_1019361A8 = 0LL;
      qword_1019361B0 = 0LL;
      uint64_t v1 = operator new(6uLL);
      qword_1019361A8 = (uint64_t)(v1 + 3);
      qword_1019361B0 = (uint64_t)(v1 + 3);
      *(_DWORD *)uint64_t v1 = 151521030;
      v1[2] = 3082;
      qword_1019361A0 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_1001CDCD0, &qword_1019361A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361B8);
    }
  }

void sub_100865764(_Unwind_Exception *a1)
{
}

void sub_10086577C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_1019361D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1019361D8))
    {
      qword_1019361C0 = 0LL;
      qword_1019361C8 = 0LL;
      qword_1019361D0 = 0LL;
      uint64_t v1 = operator new(2uLL);
      qword_1019361C0 = (uint64_t)v1;
      _WORD *v1 = 256;
      qword_1019361C8 = (uint64_t)(v1 + 1);
      qword_1019361D0 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_1001CDD00, &qword_1019361C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1019361D8);
    }
  }

void sub_100865808(_Unwind_Exception *a1)
{
}

uint64_t sub_100865820(uint64_t a1, io_service_t a2)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = a1 + 8;
  unint64_t v5 = CFUUIDGetConstantUUIDWithBytes( kCFAllocatorSystemDefault,  0x53u,  0xEAu,  0x67u,  0x34u,  0xC7u,  0xEu,  0x46u,  0x35u,  0x9Cu,  0xF5u,  0x4Fu,  0xAFu,  5u,  0xB4u,  0xF2u,  0x30u);
  uint64_t v6 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0xC2u,  0x44u,  0xE8u,  0x58u,  0x10u,  0x9Cu,  0x11u,  0xD4u,  0x91u,  0xD4u,  0,  0x50u,  0xE4u,  0xC6u,  0x42u,  0x6Fu);
  uint64_t v7 = IOCreatePlugInInterfaceForService(a2, v5, v6, (IOCFPlugInInterface ***)a1, (SInt32 *)&byte15 + 1);
  if ((_DWORD)v7)
  {
    uint64_t v8 = v7;
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    unint64_t v9 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = (void *)(a1 + 40);
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      __int128 v31 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[reader-%{public}s] error: failed to create plugin",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 0)) {
      return v8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v26 = (void *)(a1 + 40);
    *(_DWORD *)uint64_t v29 = 136446210;
    *(void *)&v29[4] = v26;
    LODWORD(byte15) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[reader-%{public}s] error: failed to create plugin",  v29,  byte15,  *(_OWORD *)v29,  *(void *)&v29[16]);
LABEL_44:
    double v27 = (uint8_t *)v20;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "kern_return_t CLDramFastpathClientInterface::Reader::open(io_service_t)",  "%s\n",  v20);
    if (v27 != buf) {
      free(v27);
    }
    return v8;
  }

  uint64_t v12 = *(IOCFPlugInInterface ***)a1;
  char v13 = *(void (**)(IOCFPlugInInterface **, void, void, uint64_t))(**(void **)a1 + 8LL);
  uint64_t v14 = CFUUIDGetConstantUUIDWithBytes( kCFAllocatorSystemDefault,  0xA6u,  0x7Au,  0x69u,  0x95u,  0x23u,  0x6Bu,  0x44u,  0xDEu,  0x97u,  0xB5u,  0x27u,  0xB9u,  0xB1u,  0xE6u,  0x6Fu,  0x2Fu);
  CFUUIDBytes v15 = CFUUIDGetUUIDBytes(v14);
  v13(v12, *(void *)&v15.byte0, *(void *)&v15.byte8, v4);
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 64LL))(v16);
    if (!(_DWORD)v8)
    {
      *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88LL))(*(void *)(a1 + 8));
      return v8;
    }

    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v17 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = (void *)(a1 + 40);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      __int128 v31 = v18;
      __int16 v32 = 1026;
      int v33 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "[reader-%{public}s] error: failed to open, error 0x%{public}x",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      __int128 v19 = (void *)(a1 + 40);
      *(_DWORD *)uint64_t v29 = 136446466;
      *(void *)&v29[4] = v19;
      *(_WORD *)&v29[12] = 1026;
      *(_DWORD *)&v29[14] = v8;
      LODWORD(byte15) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[reader-%{public}s] error: failed to open, error 0x%{public}x",  v29,  byte15,  *(_OWORD *)v29,  *(void *)&v29[16]);
      goto LABEL_44;
    }
  }

  else
  {
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v21 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v22 = (void *)(a1 + 40);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      __int128 v31 = v22;
      __int16 v32 = 1026;
      int v33 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "[reader-%{public}s] error: failed to query fastpath interface error 0x%{public}x",  buf,  0x12u);
    }

    uint64_t v8 = 0LL;
    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      uint64_t v23 = (void *)(a1 + 40);
      *(_DWORD *)uint64_t v29 = 136446466;
      *(void *)&v29[4] = v23;
      *(_WORD *)&v29[12] = 1026;
      *(_DWORD *)&v29[14] = 0;
      LODWORD(byte15) = 18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[reader-%{public}s] error: failed to query fastpath interface error 0x%{public}x",  v29,  byte15);
      unint64_t v25 = (uint8_t *)v24;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "kern_return_t CLDramFastpathClientInterface::Reader::open(io_service_t)",  "%s\n",  v24);
      if (v25 != buf) {
        free(v25);
      }
      return 0LL;
    }
  }

  return v8;
}

IOCFPlugInInterface **sub_100865DF4(uint64_t a1)
{
  uint64_t result = *(IOCFPlugInInterface ***)(a1 + 8);
  if (result)
  {
    ((void (*)(IOCFPlugInInterface **))(*result)[1].QueryInterface)(result);
    uint64_t result = *(IOCFPlugInInterface ***)a1;
    if (*(void *)a1)
    {
      ((void (*)(IOCFPlugInInterface **))(*result)->Release)(result);
      uint64_t result = (IOCFPlugInInterface **)IODestroyPlugInInterface(*(IOCFPlugInInterface ***)a1);
    }

    *(void *)(a1 + 8) = 0LL;
  }

  return result;
}

uint64_t sub_100865E44(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0LL;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 96LL))(v4);
  double v8 = __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v55 - v9);
  uint64_t v11 = **(void **)(a1 + 8);
  if (*(void *)(a1 + 24))
  {
    int v12 = (*(uint64_t (**)(double))(v11 + 104))(v8);
    if (v12)
    {
      int v13 = v12;
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      uint64_t v14 = (os_log_s *)qword_1019347C8;
      if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
      {
        CFUUIDBytes v15 = (void *)(a1 + 40);
        int v72 = 136446466;
        __int128 v73 = v15;
        __int16 v74 = 1026;
        *(_DWORD *)__int128 v75 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "[reader-%{public}s] read error 0x%{public}x",  (uint8_t *)&v72,  0x12u);
      }

      uint64_t v16 = 0LL;
      if (sub_1002921D0(115, 0))
      {
        bzero(&v72, 0x65CuLL);
        if (qword_1019347C0 != -1) {
          dispatch_once(&qword_1019347C0, &stru_10185A968);
        }
        uint64_t v17 = (void *)(a1 + 40);
        int v57 = 136446466;
        __int128 v58 = v17;
        __int16 v59 = 1026;
        *(_DWORD *)__int128 v60 = v13;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v72,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[reader-%{public}s] read error 0x%{public}x",  &v57,  18);
        __int128 v19 = (int *)v18;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)",  "%s\n",  v18);
        if (v19 != &v72) {
          free(v19);
        }
        return 0LL;
      }

      return v16;
    }
  }

  else
  {
    int v20 = (*(uint64_t (**)(double))(v11 + 112))(v8);
    if (v20)
    {
      int v21 = v20;
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      unint64_t v22 = (os_log_s *)qword_1019347C8;
      if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = (void *)(a1 + 40);
        int v72 = 136446466;
        __int128 v73 = v23;
        __int16 v74 = 1026;
        *(_DWORD *)__int128 v75 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "[reader-%{public}s] readlast error 0x%{public}x",  (uint8_t *)&v72,  0x12u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(&v72, 0x65CuLL);
        if (qword_1019347C0 != -1) {
          dispatch_once(&qword_1019347C0, &stru_10185A968);
        }
        BOOL v37 = (void *)(a1 + 40);
        int v57 = 136446466;
        __int128 v58 = v37;
        __int16 v59 = 1026;
        *(_DWORD *)__int128 v60 = v21;
        _os_log_send_and_compose_impl( 2LL,  0LL,  &v72,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[reader-%{public}s] readlast error 0x%{public}x",  &v57,  18);
        uint64_t v39 = (int *)v38;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)",  "%s\n",  v38);
        if (v39 != &v72) {
          free(v39);
        }
      }
    }
  }

  uint64_t v16 = 0LL;
  if ((_DWORD)a3)
  {
    while ((*(unsigned int (**)(void, void *, uint64_t, const void **, void, void))(**(void **)(a1 + 8) + 128LL))( *(void *)(a1 + 8),  v10,  a1 + 32,  &v56,  0LL,  0LL))
    {
      memcpy(a2, v56, *(unsigned int *)(a1 + 16));
      HIDWORD(v55) = 0;
      (*(void (**)(void, void *, void, char *))(**(void **)(a1 + 8) + 136LL))( *(void *)(a1 + 8),  v10,  *(void *)(a1 + 32),  (char *)&v55 + 4);
      if (HIDWORD(v55))
      {
        if (qword_1019347C0 != -1) {
          dispatch_once(&qword_1019347C0, &stru_10185A968);
        }
        uint64_t v24 = (os_log_s *)qword_1019347C8;
        if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
        {
          unint64_t v25 = (void *)(a1 + 40);
          uint64_t v27 = v10[10];
          uint64_t v26 = v10[11];
          uint64_t v29 = v10[3];
          uint64_t v28 = v10[4];
          uint64_t v30 = v10[2];
          uint64_t v32 = v10[8];
          uint64_t v31 = v10[9];
          uint64_t v33 = v10[7];
          int v72 = 136448258;
          __int128 v73 = v25;
          __int16 v74 = 2050;
          *(void *)__int128 v75 = v27;
          v75[4] = 2048;
          *(void *)&v75[5] = v26;
          v75[9] = 2050;
          uint64_t v76 = v29;
          __int16 v77 = 2050;
          uint64_t v78 = v28;
          __int16 v79 = 2050;
          uint64_t v80 = v30;
          __int16 v81 = 2050;
          uint64_t v82 = v32;
          __int16 v83 = 2050;
          uint64_t v84 = v31;
          __int16 v85 = 2050;
          uint64_t v86 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "[reader-%{public}s] corrupt count %{public}zd offset %zd, desc read/write [%{public}llu/%{public}llu/%{publi c}zd, %{public}llu/%{public}llu/%{public}zd",  (uint8_t *)&v72,  0x5Cu);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&v72, 0x65CuLL);
          if (qword_1019347C0 != -1) {
            dispatch_once(&qword_1019347C0, &stru_10185A968);
          }
          uint64_t v40 = (void *)(a1 + 40);
          uint64_t v42 = v10[10];
          uint64_t v41 = v10[11];
          uint64_t v44 = v10[3];
          uint64_t v43 = v10[4];
          uint64_t v45 = v10[2];
          uint64_t v47 = v10[8];
          uint64_t v46 = v10[9];
          uint64_t v48 = v10[7];
          int v57 = 136448258;
          __int128 v58 = v40;
          __int16 v59 = 2050;
          *(void *)__int128 v60 = v42;
          v60[4] = 2048;
          *(void *)&v60[5] = v41;
          v60[9] = 2050;
          uint64_t v61 = v44;
          __int16 v62 = 2050;
          uint64_t v63 = v43;
          __int16 v64 = 2050;
          uint64_t v65 = v45;
          __int16 v66 = 2050;
          uint64_t v67 = v47;
          __int16 v68 = 2050;
          uint64_t v69 = v46;
          __int16 v70 = 2050;
          uint64_t v71 = v48;
          LODWORD(v54) = 92;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v72,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[reader-%{public}s] corrupt count %{public}zd offset %zd, desc read/write [%{public}llu/%{public}llu/%{publi c}zd, %{public}llu/%{public}llu/%{public}zd",  &v57,  v54);
          uint64_t v50 = (int *)v49;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)",  "%s\n",  v49);
          if (v50 != &v72) {
            free(v50);
          }
        }

        if (qword_1019347C0 != -1) {
          dispatch_once(&qword_1019347C0, &stru_10185A968);
        }
        unint64_t v34 = (os_log_s *)qword_1019347C8;
        if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v35 = (void *)(a1 + 40);
          int v72 = 136446722;
          __int128 v73 = v35;
          __int16 v74 = 1026;
          *(_DWORD *)__int128 v75 = v16;
          double v75[2] = 1026;
          *(_DWORD *)&v75[3] = 1;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "[reader-%{public}s] Read %{public}u, corrupt %{public}u",  (uint8_t *)&v72,  0x18u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(&v72, 0x65CuLL);
          if (qword_1019347C0 != -1) {
            dispatch_once(&qword_1019347C0, &stru_10185A968);
          }
          __int128 v51 = (void *)(a1 + 40);
          int v57 = 136446722;
          __int128 v58 = v51;
          __int16 v59 = 1026;
          *(_DWORD *)__int128 v60 = v16;
          v60[2] = 1026;
          *(_DWORD *)&v60[3] = 1;
          LODWORD(v54) = 24;
          _os_log_send_and_compose_impl( 2LL,  0LL,  &v72,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[reader-%{public}s] Read %{public}u, corrupt %{public}u",  &v57,  v54);
          __int128 v53 = (int *)v52;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "uint32_t CLDramFastpathClientInterface::Reader::read(uint8_t * _Nonnull, uint32_t)",  "%s\n",  v52);
          if (v53 != &v72) {
            free(v53);
          }
        }

        return v16;
      }

      uint64_t v16 = (v16 + 1);
      a2 += *(unsigned int *)(a1 + 16);
      if ((_DWORD)a3 == (_DWORD)v16) {
        return a3;
      }
    }
  }

  return v16;
}

uint64_t sub_1008666C8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  *(void *)a1 = off_10185A920;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = objc_opt_new(&OBJC_CLASS___HIDManager);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    *(_OWORD *)__int128 __p = *a3;
    uint64_t v10 = *((void *)a3 + 2);
  }

  int v5 = *((_DWORD *)a3 + 6);
  int v11 = v5;
  *(void *)(a1 + 72) = 0LL;
  if (SHIBYTE(v10) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 88), __p[0], (unint64_t)__p[1]);
    int v6 = SHIBYTE(v10);
    *(_DWORD *)(a1 + 112) = v11;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }

  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)__p;
    *(void *)(a1 + 104) = v10;
    *(_DWORD *)(a1 + 112) = v5;
  }

  if (*((char *)a3 + 23) < 0)
  {
    sub_1010DD48C((_BYTE *)(a1 + 120), *(void **)a3, *((void *)a3 + 1));
  }

  else
  {
    __int128 v7 = *a3;
    *(void *)(a1 + 136) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 120) = v7;
  }

  *(_DWORD *)(a1 + 144) = *((_DWORD *)a3 + 6);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0LL;
  sub_10086682C(a1);
  return a1;
}

void sub_1008667E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_10086682C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    [v2 open];
    [*(id *)(a1 + 16) setDeviceMatching:&off_1018D69E0];
    BOOL v3 = *(void **)(a1 + 16);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100867B6C;
    v9[3] = &unk_10185A938;
    v9[4] = a1;
    [v3 setDeviceNotificationHandler:v9];
    objc_msgSend(*(id *)(a1 + 16), "setDispatchQueue:", objc_msgSend(*(id *)(a1 + 8), "queue"));
    [*(id *)(a1 + 16) activate];
  }

  else
  {
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v4 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
    {
      int v5 = (void *)(a1 + 120);
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      int v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] null hidManager",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      int v6 = (void *)(a1 + 120);
      int v10 = 136446210;
      int v11 = v6;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] null hidManager",  &v10,  12);
      double v8 = (uint8_t *)v7;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLDramFastpathClientInterface::Manager::setupHidDevice()", "%s\n", v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }

uint64_t sub_100866A6C(uint64_t a1)
{
  *(void *)a1 = off_10185A920;
  sub_100866AE4(a1);
  sub_100865DF4(a1 + 48);
  [*(id *)(a1 + 16) cancel];
  [*(id *)(a1 + 16) close];

  *(void *)(a1 + 16) = 0LL;
  return a1;
}

void sub_100866AE4(uint64_t a1)
{
  if (qword_1019347C0 != -1) {
    dispatch_once(&qword_1019347C0, &stru_10185A968);
  }
  unint64_t v2 = (os_log_s *)qword_1019347C8;
  if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v3 = (void *)(a1 + 120);
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    int v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] disabling", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v4 = (void *)(a1 + 120);
    int v7 = 136446210;
    double v8 = v4;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  0LL,  "[manager-%{public}s] disabling",  &v7,  12);
    int v6 = (uint8_t *)v5;
    sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDramFastpathClientInterface::Manager::disable()", "%s\n", v5);
    if (v6 != buf) {
      free(v6);
    }
  }

  sub_100867990(a1);
  *(void *)(a1 + 72) = 0LL;
}

void sub_100866CBC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100866A6C(a1);
  operator delete(v1);
}

void sub_100866CD0(uint64_t a1, double a2)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    BOOL v3 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = (void *)(a1 + 120);
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      uint64_t v24 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[manager-%{public}s] already enabled",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      int v5 = (void *)(a1 + 120);
      int v17 = 136446210;
      uint64_t v18 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  0LL,  "[manager-%{public}s] already enabled",  &v17,  12);
      int v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDramFastpathClientInterface::Manager::enable(CFTimeInterval)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  else
  {
    uint64_t v9 = mach_continuous_time();
    *(double *)(a1 + 152) = sub_101171C7C(v9);
    sub_100867070(a1);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    int v10 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = (void *)(a1 + 120);
      uint64_t v12 = *(void *)(a1 + 152);
      *(_DWORD *)std::stringbuf::string_type buf = 136446722;
      uint64_t v24 = v11;
      __int16 v25 = 2050;
      double v26 = a2;
      __int16 v27 = 2050;
      uint64_t v28 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[manager-%{public}s] enabling with read interval %{public}f at %{public}f",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      int v13 = (void *)(a1 + 120);
      uint64_t v14 = *(void *)(a1 + 152);
      int v17 = 136446722;
      uint64_t v18 = v13;
      __int16 v19 = 2050;
      double v20 = a2;
      __int16 v21 = 2050;
      uint64_t v22 = v14;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  0LL,  "[manager-%{public}s] enabling with read interval %{public}f at %{public}f",  &v17,  32);
      uint64_t v16 = (uint8_t *)v15;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDramFastpathClientInterface::Manager::enable(CFTimeInterval)",  "%s\n",  v15);
      if (v16 != buf) {
        free(v16);
      }
    }

    *(void *)(a1 + 72) = 0LL;
    sub_100867594(a1, a2);
    *(void *)(a1 + 168) = 0LL;
    *(void *)(a1 + 176) = 0LL;
    *(void *)(a1 + 184) = 0LL;
  }

void sub_100867070(uint64_t a1)
{
  unint64_t v26 = 0LL;
  unint64_t v27 = 0LL;
  v25[0] = 0LL;
  v25[1] = 0LL;
  int times = mach_get_times(&v27, &v26, v25);
  if (times)
  {
    int v3 = times;
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v4 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
    {
      int v5 = (void *)(a1 + 120);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      uint64_t v35 = v5;
      __int16 v36 = 1026;
      LODWORD(v37) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] error getting mach times %{public}d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      int v6 = (void *)(a1 + 120);
      int v28 = 136446466;
      uint64_t v29 = v6;
      __int16 v30 = 1026;
      LODWORD(v31) = v3;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] error getting mach times %{public}d",  &v28,  18);
      double v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDramFastpathClientInterface::Manager::updateTimestampOffset()",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }

    goto LABEL_17;
  }

  double v9 = sub_101171C7C(v26);
  double v10 = sub_101171C7C(v27);
  if (v9 >= v10)
  {
    *(double *)(a1 + 160) = v9 - v10;
LABEL_17:
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    int v11 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = (void *)(a1 + 120);
      double v13 = *(double *)(a1 + 160);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      uint64_t v35 = v12;
      __int16 v36 = 2048;
      double v37 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[manager-%{public}s] updated timestamp offset %f",  buf,  0x16u);
    }

    if (!sub_1002921D0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    double v20 = (void *)(a1 + 120);
    double v21 = *(double *)(a1 + 160);
    int v28 = 136446466;
    uint64_t v29 = v20;
    __int16 v30 = 2048;
    double v31 = v21;
    LODWORD(v24) = 22;
    double v22 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  0LL,  "[manager-%{public}s] updated timestamp offset %f",  &v28,  v24);
    __int16 v19 = v23;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDramFastpathClientInterface::Manager::updateTimestampOffset()",  "%s\n",  v22);
LABEL_42:
    if (v19 != buf) {
      free(v19);
    }
    return;
  }

  if (qword_1019347C0 != -1) {
    dispatch_once(&qword_1019347C0, &stru_10185A968);
  }
  uint64_t v14 = (os_log_s *)qword_1019347C8;
  if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
  {
    CFUUIDBytes v15 = (void *)(a1 + 120);
    *(_DWORD *)std::stringbuf::string_type buf = 136446722;
    uint64_t v35 = v15;
    __int16 v36 = 2050;
    double v37 = v9;
    __int16 v38 = 2050;
    double v39 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] unexpected timestamp offset continuous %{public}f, absolute %{public}f",  buf,  0x20u);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v16 = (void *)(a1 + 120);
    int v28 = 136446722;
    uint64_t v29 = v16;
    __int16 v30 = 2050;
    double v31 = v9;
    __int16 v32 = 2050;
    double v33 = v10;
    double v17 = _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] unexpected timestamp offset continuous %{public}f, absolute %{public}f",  &v28,  32);
    __int16 v19 = v18;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDramFastpathClientInterface::Manager::updateTimestampOffset()",  "%s\n",  v17);
    goto LABEL_42;
  }

void sub_100867594(uint64_t a1, double a2)
{
  *(double *)(a1 + 40) = a2;
  if (*(void *)(a1 + 32))
  {
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v4 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_INFO))
    {
      int v5 = (void *)(a1 + 120);
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      __int16 v25 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[manager-%{public}s] Reseting read timer",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      CFUUIDBytes v15 = (void *)(a1 + 120);
      int v20 = 136446210;
      double v21 = v15;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  1LL,  "[manager-%{public}s] Reseting read timer",  &v20,  12);
      double v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDramFastpathClientInterface::Manager::setupReadTimer(CFTimeInterval)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    dispatch_release(*(dispatch_object_t *)(a1 + 32));
    *(void *)(a1 + 32) = 0LL;
  }

  if (qword_1019347C0 != -1) {
    dispatch_once(&qword_1019347C0, &stru_10185A968);
  }
  int v6 = (os_log_s *)qword_1019347C8;
  if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_INFO))
  {
    int v7 = (void *)(a1 + 120);
    *(_DWORD *)std::stringbuf::string_type buf = 136446466;
    __int16 v25 = v7;
    __int16 v26 = 2050;
    double v27 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "[manager-%{public}s] Starting read timer at %{public}f",  buf,  0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v12 = (void *)(a1 + 120);
    int v20 = 136446466;
    double v21 = v12;
    __int16 v22 = 2050;
    double v23 = a2;
    LODWORD(v18) = 22;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  1LL,  "[manager-%{public}s] Starting read timer at %{public}f",  &v20,  v18);
    uint64_t v14 = (uint8_t *)v13;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDramFastpathClientInterface::Manager::setupReadTimer(CFTimeInterval)",  "%s\n",  v13);
    if (v14 != buf) {
      free(v14);
    }
  }

  double v8 = a2 * 1000000000.0;
  double v9 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0,  0,  (dispatch_queue_t)[*(id *)(a1 + 8) queue]);
  *(void *)(a1 + 32) = v9;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100868ECC;
  handler[3] = &unk_10181D3D0;
  handler[4] = a1;
  dispatch_source_set_event_handler(v9, handler);
  double v10 = *(dispatch_source_s **)(a1 + 32);
  dispatch_time_t v11 = dispatch_time(0LL, (uint64_t)v8);
  dispatch_source_set_timer(v10, v11, (unint64_t)v8, 0x989680uLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
}

void sub_100867990(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    unint64_t v2 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_INFO))
    {
      int v3 = (void *)(a1 + 120);
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      double v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[manager-%{public}s] Resetting read timer",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      uint64_t v4 = (void *)(a1 + 120);
      int v7 = 136446210;
      double v8 = v4;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  1LL,  "[manager-%{public}s] Resetting read timer",  &v7,  12);
      int v6 = (uint8_t *)v5;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDramFastpathClientInterface::Manager::teardownReadTimer()",  "%s\n",  v5);
      if (v6 != buf) {
        free(v6);
      }
    }

    dispatch_release(*(dispatch_object_t *)(a1 + 32));
    *(void *)(a1 + 32) = 0LL;
  }

void sub_100867B6C(uint64_t a1, void *a2, int a3)
{
  kern_return_t RegistryEntryID;
  kern_return_t v7;
  os_log_s *v8;
  void *v9;
  void *v10;
  const char *v11;
  uint8_t *v12;
  os_log_s *v13;
  void *v14;
  os_log_s *v15;
  void *v16;
  void *v17;
  void *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t entryID;
  int v23;
  void *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v5 = *(void *)(a1 + 32);
  RegistryEntryID = IORegistryEntryGetRegistryEntryID((io_registry_entry_t)[a2 service], &entryID);
  if (RegistryEntryID)
  {
    int v7 = RegistryEntryID;
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    double v8 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
    {
      double v9 = (void *)(v5 + 120);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      __int16 v30 = v9;
      double v31 = 1026;
      LODWORD(v32) = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] IORegistryEntryGetRegistryEntryID failed 0x%{public}x",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      double v10 = (void *)(v5 + 120);
      double v23 = 136446466;
      uint64_t v24 = v10;
      __int16 v25 = 1026;
      LODWORD(v26) = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] IORegistryEntryGetRegistryEntryID failed 0x%{public}x",  &v23,  18);
LABEL_14:
      uint64_t v12 = (uint8_t *)v11;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDramFastpathClientInterface::Manager::setupHidDevice()_block_invoke",  "%s\n",  v11);
      if (v12 != buf) {
        free(v12);
      }
    }
  }

  else
  {
    if (!a3)
    {
      sub_100868CF8(v5);
      return;
    }

    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    double v13 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = (void *)(v5 + 120);
      *(_DWORD *)std::stringbuf::string_type buf = 136446722;
      __int16 v30 = v14;
      double v31 = 2048;
      __int16 v32 = entryID;
      double v33 = 2050;
      unint64_t v34 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[manager-%{public}s] new device entry ID %llu, this %{public}p",  buf,  0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      uint64_t v18 = (void *)(v5 + 120);
      double v23 = 136446722;
      uint64_t v24 = v18;
      __int16 v25 = 2048;
      __int16 v26 = entryID;
      double v27 = 2050;
      int v28 = v5;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  1LL,  "[manager-%{public}s] new device entry ID %llu, this %{public}p",  &v23,  32);
      int v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDramFastpathClientInterface::Manager::setupHidDevice()_block_invoke",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    if (!*(void *)(v5 + 24))
    {
      sub_10086803C(v5, a2);
      return;
    }

    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    CFUUIDBytes v15 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = (void *)(v5 + 120);
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      __int16 v30 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] unexpected duplicate device",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      double v17 = (void *)(v5 + 120);
      double v23 = 136446210;
      uint64_t v24 = v17;
      LODWORD(v21) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] unexpected duplicate device",  &v23,  v21);
      goto LABEL_14;
    }
  }

void sub_10086803C(uint64_t a1, void *a2)
{
  kern_return_t ParentEntry;
  os_log_s *v5;
  void *v6;
  void *v7;
  const char *v8;
  uint8_t *v9;
  kern_return_t ChildIterator;
  os_log_s *v11;
  void *v12;
  void *v13;
  const char *v14;
  io_object_t v15;
  void *v16;
  CFStringRef v17;
  BOOL v18;
  kern_return_t ChildEntry;
  os_log_s *v20;
  void *v21;
  void *v22;
  const char *v23;
  uint8_t *v24;
  CFStringRef v25;
  kern_return_t v26;
  os_log_s *v27;
  void *v28;
  void *v29;
  const char *v30;
  uint8_t *v31;
  os_log_s *v32;
  void *v33;
  size_t v34;
  size_t v35;
  void *v36;
  mach_error_t v37;
  os_log_s *v38;
  char *v39;
  void *v40;
  char *v41;
  const char *v42;
  void *v43;
  const char *v44;
  os_log_s *v45;
  void *v46;
  BOOL v47;
  void *v48;
  BOOL v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  io_registry_entry_t child;
  io_iterator_t iterator;
  io_registry_entry_t parent;
  int v57;
  void *v58;
  __int16 v59;
  char *v60;
  __int16 v61;
  mach_error_t v62;
  __int16 v63;
  char *v64;
  io_name_t name;
  uint8_t buf[4];
  void *v67;
  __int16 v68;
  char *v69;
  __int16 v70;
  mach_error_t v71;
  __int16 v72;
  char *v73;
  ParentEntry = IORegistryEntryGetParentEntry((io_registry_entry_t)[a2 service], "IOService", &parent);
  if (ParentEntry)
  {
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v5 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
    {
      int v6 = (void *)(a1 + 120);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      uint64_t v67 = v6;
      __int16 v68 = 1026;
      LODWORD(v69) = ParentEntry;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] IORegistryEntryGetParentEntry failed 0x%{public}0x",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      int v7 = (void *)(a1 + 120);
      *(_DWORD *)name = 136446466;
      *(void *)&name[4] = v7;
      *(_WORD *)&name[12] = 1026;
      *(_DWORD *)&name[14] = ParentEntry;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] IORegistryEntryGetParentEntry failed 0x%{public}0x",  name,  18);
      double v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)",  "%s\n",  v8);
LABEL_113:
      if (v9 != buf) {
        free(v9);
      }
      return;
    }

    return;
  }

  ChildIterator = IORegistryEntryGetChildIterator(parent, "IOService", &iterator);
  if (!ChildIterator)
  {
    CFUUIDBytes v15 = IOIteratorNext(iterator);
    if (!v15)
    {
LABEL_100:
      *(void *)(a1 + 24) = a2;
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      uint64_t v45 = (os_log_s *)qword_1019347C8;
      if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v46 = (void *)(a1 + 120);
        uint64_t v47 = *(void *)(a1 + 56) != 0LL;
        *(_DWORD *)std::stringbuf::string_type buf = 136446466;
        uint64_t v67 = v46;
        __int16 v68 = 1026;
        LODWORD(v69) = v47;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "[manager-%{public}s] reader is valid %{public}d",  buf,  0x12u);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019347C0 != -1) {
          dispatch_once(&qword_1019347C0, &stru_10185A968);
        }
        uint64_t v48 = (void *)(a1 + 120);
        uint64_t v49 = *(void *)(a1 + 56) != 0LL;
        *(_DWORD *)name = 136446466;
        *(void *)&name[4] = v48;
        *(_WORD *)&name[12] = 1026;
        *(_DWORD *)&name[14] = v49;
        LODWORD(v51) = 18;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  0LL,  "[manager-%{public}s] reader is valid %{public}d",  name,  v51);
        double v9 = (uint8_t *)v50;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)",  "%s\n",  v50);
        goto LABEL_113;
      }

      return;
    }

    uint64_t v16 = (void *)(a1 + 120);
    while (1)
    {
      double v17 = IOObjectCopyClass(v15);
      uint64_t v18 = CFEqual(@"AppleSPUFastpathInterface", v17) == 0;
      CFRelease(v17);
      if (!v18)
      {
        child = 0;
        ChildEntry = IORegistryEntryGetChildEntry(v15, "IOService", &child);
        if (!ChildEntry)
        {
          __int16 v25 = IOObjectCopyClass(child);
          if (CFEqual(v25, @"AppleSPUFastpathDriver"))
          {
            __int16 v26 = IORegistryEntryGetName(child, name);
            if (v26)
            {
              if (qword_1019347C0 != -1) {
                dispatch_once(&qword_1019347C0, &stru_10185A968);
              }
              double v27 = (os_log_s *)qword_1019347C8;
              if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
              {
                int v28 = (void *)(a1 + 120);
                *(_DWORD *)std::stringbuf::string_type buf = 136446466;
                uint64_t v67 = v28;
                __int16 v68 = 1026;
                LODWORD(v69) = v26;
                _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] IORegistryEntryGetName failed 0x%{public}0x",  buf,  0x12u);
              }

              if (sub_1002921D0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1019347C0 != -1) {
                  dispatch_once(&qword_1019347C0, &stru_10185A968);
                }
                uint64_t v29 = (void *)(a1 + 120);
                int v57 = 136446466;
                __int128 v58 = v29;
                __int16 v59 = 1026;
                LODWORD(v60) = v26;
                LODWORD(v51) = 18;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] IORegistryEntryGetName failed 0x%{public}0x",  &v57,  v51);
                double v31 = (uint8_t *)v30;
                sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDramFastpathClientInterface::Manager::onServiceAdded(HIDDevice * _Nonnull)",  "%s\n",  v30);
                goto LABEL_98;
              }

void sub_100868CEC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_100006BB8(a1);
  }
  _Unwind_Resume(a1);
}

IOCFPlugInInterface **sub_100868CF8(uint64_t a1)
{
  if (qword_1019347C0 != -1) {
    dispatch_once(&qword_1019347C0, &stru_10185A968);
  }
  unint64_t v2 = (os_log_s *)qword_1019347C8;
  if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
  {
    int v3 = (void *)(a1 + 120);
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    dispatch_time_t v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] service disappeared!",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v5 = (void *)(a1 + 120);
    int v8 = 136446210;
    double v9 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] service disappeared!",  &v8,  12);
    int v7 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 0LL, "void CLDramFastpathClientInterface::Manager::onServiceRemoved()", "%s\n", v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  uint64_t result = sub_100865DF4(a1 + 48);
  *(void *)(a1 + 24) = 0LL;
  return result;
}

id *sub_100868ECC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1019347C0 != -1) {
    dispatch_once(&qword_1019347C0, &stru_10185A968);
  }
  unint64_t v2 = (os_log_s *)qword_1019347C8;
  if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_INFO))
  {
    int v3 = (void *)(v1 + 120);
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    dispatch_time_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[manager-%{public}s] Triggering read", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    uint64_t v5 = (void *)(v1 + 120);
    int v8 = 136446210;
    double v9 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  1LL,  "[manager-%{public}s] Triggering read",  &v8,  12);
    int v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDramFastpathClientInterface::Manager::setupReadTimer(CFTimeInterval)_block_invoke",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return sub_10086909C(v1);
}

id *sub_10086909C(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    int v3 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = (void *)(a1 + 120);
      *(_DWORD *)std::stringbuf::string_type buf = 136446466;
      __int16 v19 = v4;
      __int16 v20 = 1026;
      int v21 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[manager-%{public}s] read %{public}d samples",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      uint64_t v5 = (void *)(a1 + 120);
      int v14 = 136446466;
      CFUUIDBytes v15 = v5;
      __int16 v16 = 1026;
      int v17 = v2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  1LL,  "[manager-%{public}s] read %{public}d samples",  &v14,  18);
      int v7 = (uint8_t *)v6;
      sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDramFastpathClientInterface::Manager::onReadTimer()", "%s\n", v6);
LABEL_27:
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  else
  {
    if (qword_1019347C0 != -1) {
      dispatch_once(&qword_1019347C0, &stru_10185A968);
    }
    int v8 = (os_log_s *)qword_1019347C8;
    if (os_log_type_enabled((os_log_t)qword_1019347C8, OS_LOG_TYPE_ERROR))
    {
      double v9 = (void *)(a1 + 120);
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      __int16 v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[manager-%{public}s] reader isn't valid",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347C0 != -1) {
        dispatch_once(&qword_1019347C0, &stru_10185A968);
      }
      dispatch_time_t v11 = (void *)(a1 + 120);
      int v14 = 136446210;
      CFUUIDBytes v15 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347C8,  16LL,  "[manager-%{public}s] reader isn't valid",  &v14,  12);
      int v7 = (uint8_t *)v12;
      sub_10029211C("Generic", 1LL, 0, 0LL, "void CLDramFastpathClientInterface::Manager::onReadTimer()", "%s\n", v12);
      goto LABEL_27;
    }
  }

  return sub_1001BA1BC(v13);
}

void sub_10086940C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100869434(id a1)
{
  qword_1019347C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

uint64_t sub_100869460()
{
  dword_101998E58 = 800;
  __cxa_atexit((void (*)(void *))sub_100355650, qword_101998E40, (void *)&_mh_execute_header);
  sub_1010DDBC0(qword_101998E60, "DmFp");
  dword_101998E78 = 200;
  return __cxa_atexit((void (*)(void *))sub_100355650, qword_101998E60, (void *)&_mh_execute_header);
}

uint64_t sub_1008694EC(uint64_t a1, void *a2, int a3)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = a3;
  if (a3)
  {
    objc_msgSend(objc_msgSend(objc_msgSend(a2, "vendor"), "proxyForService:", @"CLNatalimetryNotifier"), "pause");
    objc_msgSend( objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", @"CLOutdoorService"),  "pause");
  }

  return a1;
}

uint64_t sub_10086954C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    objc_msgSend( objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", @"CLStepCountNotifier"),  "resumeAfterPendingStepCountNotifications");
  }
  return a1;
}

uint64_t sub_100869594()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_101998E80, (void *)&_mh_execute_header);
}

BOOL sub_1008695D8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(double *)(a1 + 4) == *(double *)(a2 + 4)
      && *(double *)(a1 + 12) == *(double *)(a2 + 12)
      && *(double *)(a1 + 20) == *(double *)(a2 + 20)
      && *(double *)(a1 + 28) == *(double *)(a2 + 28)
      && *(double *)(a1 + 36) == *(double *)(a2 + 36)
      && *(double *)(a1 + 44) == *(double *)(a2 + 44)
      && *(double *)(a1 + 52) == *(double *)(a2 + 52)
      && *(double *)(a1 + 60) == *(double *)(a2 + 60)
      && *(double *)(a1 + 68) == *(double *)(a2 + 68)
      && *(double *)(a1 + 76) == *(double *)(a2 + 76)
      && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84)
      && *(double *)(a1 + 88) == *(double *)(a2 + 88)
      && *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96)
      && *(double *)(a1 + 100) == *(double *)(a2 + 100)
      && *(double *)(a1 + 108) == *(double *)(a2 + 108)
      && *(double *)(a1 + 116) == *(double *)(a2 + 116)
      && *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124)
      && *(_DWORD *)(a1 + 128) == *(_DWORD *)(a2 + 128)
      && *(_DWORD *)(a1 + 132) == *(_DWORD *)(a2 + 132)
      && *(_DWORD *)(a1 + 136) == *(_DWORD *)(a2 + 136)
      && *(_DWORD *)(a1 + 140) == *(_DWORD *)(a2 + 140)
}

double sub_100869764(uint64_t a1)
{
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 136);
  double result = *(double *)(a1 + 116);
  *(double *)(a1 + 6sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = result;
  return result;
}

uint64_t sub_100869780(uint64_t a1)
{
  uint64_t result = 0LL;
  if (*(double *)(a1 + 20) > 0.0)
  {
    double v3 = *(double *)(a1 + 4);
    if (v3 <= 90.0 && v3 >= -90.0)
    {
      double v4 = *(double *)(a1 + 12);
      if (v4 <= 180.0 && v4 >= -180.0)
      {
        BOOL v5 = fabs(v3) >= 0.0000001;
        return fabs(v4) >= 0.0000001 || v5;
      }
    }
  }

  return result;
}

uint64_t sub_100869800(uint64_t a1)
{
  uint64_t result = 0LL;
  if (*(double *)(a1 + 36) > 0.0)
  {
    double v3 = *(double *)(a1 + 4);
    if (v3 <= 90.0 && v3 >= -90.0)
    {
      double v4 = *(double *)(a1 + 12);
      if (v4 <= 180.0 && v4 >= -180.0)
      {
        BOOL v5 = fabs(v3) >= 0.0000001;
        return fabs(v4) >= 0.0000001 || v5;
      }
    }
  }

  return result;
}

BOOL sub_100869894(uint64_t a1, uint64_t a2)
{
  return vabdd_f64(*(double *)(a1 + 4), *(double *)(a2 + 4)) < 0.000001
      && vabdd_f64(*(double *)(a1 + 12), *(double *)(a2 + 12)) < 0.000001;
}

double sub_1008698D0(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 76));
}

uint64_t sub_1008698F8@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = v10;
  *(std::locale::__imp **)((char *)&v11.__loc_.__locale_ + *(void *)(v10 - 24)) = (std::locale::__imp *)8;
  *(_DWORD *)((char *)&v10 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((_BYTE *)&v10 + *(void *)(v4 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 4));
  BOOL v5 = sub_10000CF44(&v10, (uint64_t)", ", 2LL);
  uint64_t v6 = *v5;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 - 24) + 16) = 8LL;
  *(_DWORD *)((char *)v5 + *(void *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(void *)(v6 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 12));
  std::stringbuf::str(a2, &v11);
  *(void *)((char *)v9
  uint64_t v10 = v7;
  std::streambuf::~streambuf(&v11);
  return std::ios::~ios(&v12);
}

void sub_100869A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100869A44@<X0>(uint64_t a1@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  uint64_t v4 = sub_10000CF44(&v23, (uint64_t)"lat, ", 5LL);
  uint64_t v5 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 - 24) + 16) = 8LL;
  *(_DWORD *)((char *)v4 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(void *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 4));
  uint64_t v6 = sub_10000CF44(&v23, (uint64_t)", lon, ", 7LL);
  uint64_t v7 = *v6;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 16) = 8LL;
  *(_DWORD *)((char *)v6 + *(void *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(void *)(v7 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 12));
  int v8 = sub_10000CF44(&v23, (uint64_t)", alt, ", 7LL);
  uint64_t v9 = *v8;
  *(uint64_t *)((char *)v8 + *(void *)(*v8 - 24) + 16) = 1LL;
  *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(void *)(v9 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 28));
  uint64_t v10 = sub_10000CF44(&v23, (uint64_t)", acc, ", 7LL);
  uint64_t v11 = *v10;
  *(uint64_t *)((char *)v10 + *(void *)(*v10 - 24) + 16) = 1LL;
  *(_DWORD *)((char *)v10 + *(void *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(void *)(v11 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 20));
  uint64_t v12 = sub_10000CF44(&v23, (uint64_t)", vacc, ", 8LL);
  uint64_t v13 = *v12;
  *(uint64_t *)((char *)v12 + *(void *)(*v12 - 24) + 16) = 1LL;
  *(_DWORD *)((char *)v12 + *(void *)(v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(void *)(v13 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 36));
  int v14 = sub_10000CF44(&v23, (uint64_t)", timestamp, ", 13LL);
  uint64_t v15 = *v14;
  *(uint64_t *)((char *)v14 + *(void *)(*v14 - 24) + 16) = 1LL;
  *(_DWORD *)((char *)v14 + *(void *)(v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(void *)(v15 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(*(double *)(a1 + 76));
  __int16 v16 = sub_10000CF44(&v23, (uint64_t)", age, ", 7LL);
  uint64_t v17 = *v16;
  *(uint64_t *)((char *)v16 + *(void *)(*v16 - 24) + 16) = 1LL;
  *(_DWORD *)((char *)v16 + *(void *)(v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(void *)(v17 - 24) + 8) & 0xFFFFFEFB | 4;
  double Current = CFAbsoluteTimeGetCurrent();
  std::ostream::operator<<(vabdd_f64(Current, *(double *)(a1 + 76)));
  __int16 v19 = sub_10000CF44(&v23, (uint64_t)", type, ", 8LL);
  std::ostream::operator<<(v19, *(unsigned int *)(a1 + 96));
  std::stringbuf::str(a2, &v24);
  *(void *)((char *)v22
  uint64_t v23 = v20;
  std::streambuf::~streambuf(&v24);
  return std::ios::~ios(&v25);
}

void sub_100869D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_100869D50()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_101999118);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_101999118))
  {
    sub_100869DF4((uint64_t)&unk_101998E98);
    __cxa_atexit((void (*)(void *))sub_100869DCC, &unk_101998E98, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101999118);
  }

  return &unk_101998E98;
}

uint64_t sub_100869DCC(uint64_t a1)
{
  return a1;
}

double sub_100869DF4(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_1012E0070;
  *(void *)(a1 + 16) = 0xBFF0000000000000LL;
  *(void *)(a1 + 24) = 0LL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = -1082130432;
  *(_BYTE *)(a1 + 52) = 1;
  *(_DWORD *)(a1 + 56) = 1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 8sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0xBFF0000000000000LL;
  *(void *)(a1 + 88) = 0LL;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 12sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 124) = -1;
  *(void *)(a1 + 136) = -1LL;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 312) = -1;
  *(_DWORD *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 336) = xmmword_1012E0070;
  *(_DWORD *)(a1 + 352) = 1;
  *(_BYTE *)(a1 + 356) = 0;
  *(void *)(a1 + 376) = 0LL;
  __asm { FMOV            V1.2D, #-1.0 }

  *(_OWORD *)(a1 + 384) = _Q1;
  *(_OWORD *)(a1 + 40sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = xmmword_1012EA5D0;
  *(void *)(a1 + 416) = 0xBFF0000000000000LL;
  *(_WORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 448) = 0xBFF0000000000000LL;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_1012EA5D0;
  *(_OWORD *)(a1 + 48sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = _Q1;
  *(_OWORD *)(a1 + 496) = xmmword_1012EA5D0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 544) = xmmword_1012EA5D0;
  *(void *)(a1 + 56sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0LL;
  *(_DWORD *)(a1 + 568) = -1;
  *(_BYTE *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 592) = _Q1;
  *(_WORD *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 61sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0;
  *(_BYTE *)(a1 + 636) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0u;
  *(void *)(a1 + 28sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0xBFF0000000000000LL;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 36sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0u;
  *(_OWORD *)(a1 + 52sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0u;
  double result = 0.0;
  *(_OWORD *)(a1 + 612) = xmmword_101339620;
  *(void *)(a1 + 628) = 0LL;
  return result;
}

double sub_100869F20(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = v2;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v3 = *(void *)(a2 + 88);
  *(void *)(a1 + 8sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  __int128 v4 = *(_OWORD *)(a2 + 104);
  __int128 v5 = *(_OWORD *)(a2 + 120);
  __int128 v6 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 12sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  __int128 v7 = *(_OWORD *)(a2 + 248);
  __int128 v8 = *(_OWORD *)(a2 + 264);
  __int128 v9 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v8;
  *(_OWORD *)(a1 + 28sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = v9;
  *(_OWORD *)(a1 + 248) = v7;
  __int128 v10 = *(_OWORD *)(a2 + 168);
  __int128 v11 = *(_OWORD *)(a2 + 184);
  __int128 v12 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 20sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
  *(_OWORD *)(a1 + 32sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 356) = 0;
  *(void *)(a1 + 36sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(void *)(a2 + 360);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 40sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
  *(_BYTE *)(a1 + 425) = *(_BYTE *)(a2 + 425);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 48sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_BYTE *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 52sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0u;
  *(_OWORD *)(a1 + 544) = xmmword_1012EA5D0;
  *(void *)(a1 + 56sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0LL;
  *(_DWORD *)(a1 + 568) = -1;
  *(_BYTE *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0xBFF0000000000000LL;
  __asm { FMOV            V0.2D, #-1.0 }

  *(_OWORD *)(a1 + 592) = _Q0;
  *(_WORD *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 61sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0;
  *(_DWORD *)(a1 + 612) = 0;
  double result = *(double *)(a2 + 536);
  *(double *)(a1 + 616) = result;
  *(void *)(a1 + 624) = *(void *)(a2 + 544);
  *(_DWORD *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 636) = *(_BYTE *)(a2 + 552);
  return result;
}

double sub_10086A0DC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v4;
  *(void *)&__int128 v4 = *(void *)(a1 + 40);
  *((void *)a2 + 4) = *(void *)(a1 + 32);
  *((void *)a2 + 5) = v4;
  *((_DWORD *)a2 + 12) = *(_DWORD *)(a1 + 48);
  *((_BYTE *)a2 + 52) = *(_BYTE *)(a1 + 52);
  *((_DWORD *)a2 + 14) = *(_DWORD *)(a1 + 56);
  a2[4] = *(_OWORD *)(a1 + 64);
  *(void *)&__int128 v4 = *(void *)(a1 + 88);
  *((void *)a2 + 1sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(void *)(a1 + 80);
  *((void *)a2 + 11) = v4;
  *((_BYTE *)a2 + 96) = *(_BYTE *)(a1 + 96);
  *(_OWORD *)((char *)a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)((char *)a2 + 12sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)a2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)((char *)a2 + 152) = *(_OWORD *)(a1 + 152);
  __int128 v5 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)((char *)a2 + 264) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)((char *)a2 + 28sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = v5;
  *(_OWORD *)((char *)a2 + 248) = *(_OWORD *)(a1 + 248);
  *(_OWORD *)((char *)a2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)((char *)a2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)((char *)a2 + 20sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)((char *)a2 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)((char *)a2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)((char *)a2 + 296) = *(_OWORD *)(a1 + 296);
  *((_DWORD *)a2 + 78) = *(_DWORD *)(a1 + 312);
  *((_DWORD *)a2 + 79) = *(_DWORD *)(a1 + 316);
  __int128 v6 = *(_OWORD *)(a1 + 336);
  a2[20] = *(_OWORD *)(a1 + 320);
  a2[21] = v6;
  *((_DWORD *)a2 + 88) = *(_DWORD *)(a1 + 352);
  *((_BYTE *)a2 + 356) = *(_BYTE *)(a1 + 356);
  *((void *)a2 + 45) = *(void *)(a1 + 360);
  __int128 v7 = *(_OWORD *)(a1 + 384);
  a2[23] = *(_OWORD *)(a1 + 368);
  a2[24] = v7;
  a2[25] = *(_OWORD *)(a1 + 400);
  *((void *)a2 + 52) = *(void *)(a1 + 416);
  *((_BYTE *)a2 + 424) = *(_BYTE *)(a1 + 424);
  *((_BYTE *)a2 + 425) = *(_BYTE *)(a1 + 425);
  a2[27] = *(_OWORD *)(a1 + 432);
  *((void *)a2 + 56) = *(void *)(a1 + 448);
  *((_DWORD *)a2 + 114) = *(_DWORD *)(a1 + 456);
  __int128 v8 = *(_OWORD *)(a1 + 480);
  a2[29] = *(_OWORD *)(a1 + 464);
  a2[30] = v8;
  a2[31] = *(_OWORD *)(a1 + 496);
  int v9 = *(unsigned __int8 *)(a1 + 576);
  if (v9 == 1) {
    int v10 = 1;
  }
  else {
    int v10 = 2 * (v9 == 2);
  }
  *((_DWORD *)a2 + 128) = v10;
  *((void *)a2 + 65) = *(void *)(a1 + 584);
  *((void *)a2 + 66) = *(void *)(a1 + 592);
  double result = *(double *)(a1 + 616);
  *((double *)a2 + 67) = result;
  *((void *)a2 + 68) = *(void *)(a1 + 624);
  *((_BYTE *)a2 + 552) = *(_BYTE *)(a1 + 636);
  return result;
}

void sub_10086A5C8(id a1)
{
  qword_101934838 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10086A5F4(uint64_t a1)
{
  uint64_t v1 = a1 + 208;
  if (!*(void *)(a1 + 208))
  {
    sub_10043AC3C((uint64_t)sub_10086A678, a1, *(void **)(a1 + 24), &v7);
    uint64_t v3 = v7;
    uint64_t v7 = 0LL;
    uint64_t v4 = *(void *)(a1 + 208);
    *(void *)(a1 + 208) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      uint64_t v5 = v7;
      uint64_t v7 = 0LL;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      }
    }
  }

  return v1;
}

void sub_10086A678(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185AF40);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int128 v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonClient::onLocationNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185AF40);
    }
    int v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDaemonClient::onLocationNotification, event:%{public, location:escape_only}s, t his:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100876240(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10086A830( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086A850(uint64_t a1, CLConnection *a2, uint64_t a3, void *a4, void *a5)
{
  *(void *)a1 = off_10185A9B8;
  *(void *)(a1 + 8) = &off_10185AA90;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = [a4 silo];
  *(void *)(a1 + 96) = 0LL;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 71) = 0;
  *(void *)(a1 + 8sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0LL;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 112) = (id)sub_10053C874(4);
  *(_BYTE *)(a1 + 12sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 1;
  *(void *)(a1 + 128) = a1 + 128;
  *(void *)(a1 + 136) = a1 + 128;
  *(void *)(a1 + 144) = 0LL;
  __int128 v8 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 152) = v8;
  *(void *)(a1 + 16sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(_WORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 194) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 196) = 0LL;
  *(_BYTE *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0u;
  *(void *)(a1 + 256) = 0LL;
  *(void *)(a1 + 264) = a2;
  *(void *)(a1 + 272) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_BYTE *)(a1 + 28sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0;
  *(_DWORD *)(a1 + 32sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 36sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 1065353216;
  *(_DWORD *)(a1 + 368) = 65537;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 392) = 0LL;
  *(void *)(a1 + 40sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = off_10182F180;
  int v9 = operator new(0x20uLL);
  void v9[2] = 0LL;
  *int v9 = off_10182F1B8;
  v9[1] = 0LL;
  *((_DWORD *)v9 + 6) = 31337;
  *(void *)(a1 + 408) = v9 + 3;
  *(void *)(a1 + 416) = v9;
  int v10 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonClient(ctor)",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v10, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  char v11 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 68289538;
    int v16 = 0;
    __int16 v17 = 2082;
    __int16 v18 = "";
    __int16 v19 = 2082;
    uint64_t v20 = "activity";
    __int16 v21 = 2050;
    __int16 v22 = (const char *)a1;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDaemonClient(ctor), event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185AF80);
  }
  __int128 v12 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::stringbuf::string_type buf = 68290562;
    int v16 = 0;
    __int16 v17 = 2082;
    __int16 v18 = "";
    __int16 v19 = 2082;
    uint64_t v20 = "state_transition";
    __int16 v21 = 2082;
    __int16 v22 = "DaemonClient";
    __int16 v23 = 2050;
    __int16 v25 = 2082;
    uint64_t v24 = a1;
    __int16 v26 = "lifecycle";
    __int16 v27 = 2050;
    uint64_t v28 = 0LL;
    __int16 v29 = 2050;
    uint64_t v30 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:state transition, event:%{public, location:escape_only}s, state:%{public, locatio n:escape_only}s, id:%{public}p, property:%{public, location:escape_only}s, old:%{public}p, n ew:%{public}p}",  buf,  0x4Eu);
  }

  *(_DWORD *)(a1 + 272) = CLConnection::getRemotePid(a2);
  sub_10086AC94(a1);
  CLConnection::start(*(CLConnection **)(a1 + 264));
  sub_10086AD1C(a1, a5);
  sub_10086D21C(a1);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_10086ABCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  uint64_t v18 = v11[30];
  v11[30] = 0LL;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  uint64_t v19 = v11[29];
  v11[29] = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  uint64_t v20 = v11[28];
  v11[28] = 0LL;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  uint64_t v21 = v11[27];
  v11[27] = 0LL;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
  }
  uint64_t v22 = *v16;
  *int v16 = 0LL;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
  }
  sub_1000229D4(v13, *v15);
  sub_100890314(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_10086AC94(uint64_t a1)
{
  if (qword_101999170 != -1) {
    dispatch_once(&qword_101999170, &stru_10185AAB0);
  }
  uint64_t v2 = *(void *)(a1 + 264);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1008760B0;
  v4[3] = &unk_10182B3E0;
  v4[4] = a1;
  return CLConnection::setDefaultMessageHandler(v2, v4);
}

void sub_10086AD1C(uint64_t a1, void *a2)
{
  uint64_t v151 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
  *(audit_token_t *)double v160 = *(audit_token_t *)&v160[5];
  uint64_t v4 = sub_10055FF18((audit_token_t *)v160);
  if (!-[CLClientKeyPath isValidCKP](v4, "isValidCKP"))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v5 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
    {
      int v6 = *(_DWORD *)(a1 + 272);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Couldn't get information from PID for DaemonClient registration. Defaulting natural ident ity to nullCKP., pid:%{public}u}",  buf,  0x18u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
    }

    uint64_t v7 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      int v8 = *(_DWORD *)(a1 + 272);
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v8;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v7,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Couldn't get information from PID for DaemonClient registration. Defaulting natural identity to nullCKP.",  "{msg%{public}.0s:Couldn't get information from PID for DaemonClient registration. Defaulting natural ident ity to nullCKP., pid:%{public}u}",  buf,  0x18u);
    }
  }

  if (a2)
  {
    uint64_t v149 = -[CLClientKeyPath bundleId](v4, "bundleId");
    int v9 = (CLClientKeyPath *)sub_10053E0A4(*(void *)(a1 + 16), (uint64_t)v4);
    unsigned int v10 = -[CLClientKeyPath isValidCKP](v9, "isValidCKP");
    char v11 = v10;
    if (v10) {
      __int128 v12 = v9;
    }
    else {
      __int128 v12 = v4;
    }
    uint64_t v150 = (uint64_t)v12;
    unint64_t v13 = (unint64_t)[a2 objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
    unint64_t v14 = (unint64_t)[a2 objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
    if ([a2 objectForKey:@"kCLConnectionMessageClientSDKKey"])
    {
      unsigned int v15 = objc_msgSend( objc_msgSend(a2, "objectForKeyedSubscript:", @"kCLConnectionMessageClientSDKKey"),  "unsignedIntValue");
      *(_BYTE *)(a1 + 192) = (v15 & 0xFFF80000) != 0;
      *(_BYTE *)(a1 + 193) = HIWORD(v15) > 0xAu;
      BOOL v16 = v15 > 0xCFFFF;
    }

    else
    {
      *(_BYTE *)(a1 + 192) = objc_msgSend( objc_msgSend( a2,  "objectForKeyedSubscript:",  @"kCLConnectionMessageClientSDKAtLeast2014Key"),  "unsignedIntValue") != 0;
      *(_BYTE *)(a1 + 193) = objc_msgSend( objc_msgSend( a2,  "objectForKeyedSubscript:",  @"kCLConnectionMessageClientSDKAtLeast2017Key"),  "unsignedIntValue") != 0;
      BOOL v16 = objc_msgSend( objc_msgSend( a2,  "objectForKeyedSubscript:",  @"kCLConnectionMessageClientSDKAtLeast2019Key"),  "unsignedIntValue") != 0;
    }

    *(_BYTE *)(a1 + 194) = v16;
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v18 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(unsigned __int8 *)(a1 + 192);
      int v20 = *(unsigned __int8 *)(a1 + 193);
      int v21 = *(unsigned __int8 *)(a1 + 194);
      *(_DWORD *)std::stringbuf::string_type buf = 68290050;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v150;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = v19;
      *(_WORD *)&buf[34] = 1026;
      *(_DWORD *)&buf[36] = v20;
      *(_WORD *)&buf[40] = 1026;
      *(_DWORD *)&buf[42] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:client sdk, NaturalKeyPath:%{public, location:escape_only}@, sdkAtLeast2014?:%{ public}hhd, sdkAtLeast2017?:%{public}hhd, sdkAtLeast2019?:%{public}hhd}",  buf,  0x2Eu);
    }

    uint64_t v152 = a1;
    if (!(v13 | v14)) {
      goto LABEL_42;
    }
    sub_1010DDBC0(buf, "com.apple.locationd.effective_bundle");
    char v22 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 40LL))(a1, buf);
    char v23 = v22;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((v23 & 1) != 0) {
        goto LABEL_28;
      }
    }

    else if ((v22 & 1) != 0)
    {
LABEL_28:
      if (v14)
      {
        id v24 = [(id)v14 stringByResolvingSymlinksInPath];
        if (v13) {
          unsigned int v25 = objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLAppMonitor"),  "syncgetIsApplicationInstalledLocally:",  v13);
        }
        else {
          unsigned int v25 = 1;
        }
        unint64_t v34 = +[NSURL fileURLWithPath:isDirectory:](&OBJC_CLASS___NSURL, "fileURLWithPath:isDirectory:", v24, 1LL);
        if ((-[NSURL checkResourceIsReachableAndReturnError:](v34, "checkResourceIsReachableAndReturnError:", 0LL) & v25) != 1) {
          goto LABEL_116;
        }
        CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
        double v154 = +[NSBundle bundleWithURL:](&OBJC_CLASS___NSBundle, "bundleWithURL:", v34);
        sub_100F4B370(&v159, &__p);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        __int128 v146 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", p_p);
        id v36 = -[NSBundle objectForInfoDictionaryKey:]( v154,  "objectForInfoDictionaryKey:",  @"CLSystemServiceRadars");
        id v148 = (id)v13;
        __int128 v147 = v34;
        if (v36 && (objc_opt_class(&OBJC_CLASS___NSArray), (objc_opt_isKindOfClass(v36, v37) & 1) != 0))
        {
          __int128 v175 = 0u;
          __int128 v176 = 0u;
          memset(v174, 0, sizeof(v174));
          id v38 = [v36 countByEnumeratingWithState:v174 objects:buf count:16];
          if (v38)
          {
            uint64_t v39 = *(void *)v174[2];
            do
            {
              uint64_t v40 = 0LL;
              do
              {
                if (*(void *)v174[2] != v39) {
                  objc_enumerationMutation(v36);
                }
                uint64_t v41 = *(void *)(v174[1] + 8LL * (void)v40);
                objc_opt_class(&OBJC_CLASS___NSNumber);
                if ((objc_opt_isKindOfClass(v41, v42) & 1) == 0)
                {
                  if (qword_101934980 != -1) {
                    dispatch_once(&qword_101934980, &stru_10185AF80);
                  }
                  uint64_t v43 = (os_log_s *)qword_101934988;
                  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v44 = -[NSBundle bundlePath](v154, "bundlePath");
                    uint64_t v165 = 68289539LL;
                    __int16 v166 = 2082;
                    double v167 = "";
                    __int16 v168 = 2113;
                    double v169 = v44;
                    __int16 v170 = 2113;
                    double v171 = (const char *)v36;
                    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#LocationPrivacy System Service's CLSystemServiceRadars key does not only i nclude radar numbers., Bundle:%{private, location:escape_only}@, RadarsArray:%{private, location:escape_only}@}",  (uint8_t *)&v165,  0x26u);
                  }
                }

                uint64_t v40 = (char *)v40 + 1;
              }

              while (v38 != v40);
              id v38 = [v36 countByEnumeratingWithState:v174 objects:buf count:16];
            }

            while (v38);
          }
        }

        else
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_10185AF80);
          }
          uint64_t v45 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v46 = -[NSBundle bundlePath](v154, "bundlePath");
            *(_DWORD *)std::stringbuf::string_type buf = 68289283;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2113;
            *(void *)&buf[20] = v46;
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#LocationPrivacy System Service has no listed radars, Bundle:%{private, locat ion:escape_only}@}",  buf,  0x1Cu);
          }
        }

        unint64_t v13 = (unint64_t)v148;
        uint64_t v47 = (const __CFURL *)v147;
        if (sub_10029661C(-[NSBundle bundlePath](v154, "bundlePath"))
          && !-[NSBundle objectForInfoDictionaryKey:](v154, "objectForInfoDictionaryKey:", @"CLSystemService"))
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_10185AF80);
          }
          uint64_t v48 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v49 = -[NSBundle bundlePath](v154, "bundlePath");
            uint64_t v165 = 68289283LL;
            __int16 v166 = 2082;
            double v167 = "";
            __int16 v168 = 2113;
            double v169 = v49;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#LocationPrivacy Bundle for LocationdInternalSystemService not marked as SystemServ ice., Bundle:%{private, location:escape_only}@}",  (uint8_t *)&v165,  0x1Cu);
          }
        }

        uint64_t v50 = -[NSBundle objectForInfoDictionaryKey:]( v154,  "objectForInfoDictionaryKey:",  @"CLEligibleMasqueraders");
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        __int128 v51 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v52 = -[NSString UTF8String](-[NSBundle bundlePath](v154, "bundlePath"), "UTF8String");
          uint64_t v165 = 68289539LL;
          __int16 v166 = 2082;
          double v167 = "";
          __int16 v168 = 2113;
          double v169 = v50;
          __int16 v170 = 2081;
          double v171 = v52;
          _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLEligibleMasqueraders for bundle, EligibleMasqueraders:%{private, location:esc ape_only}@, Bundle:%{private, location:escape_only}s}",  (uint8_t *)&v165,  0x26u);
        }

        if (v50 && (objc_opt_class(&OBJC_CLASS___NSArray), (objc_opt_isKindOfClass(v50, v53) & 1) != 0))
        {
          if ((-[NSString containsObject:](v50, "containsObject:", v146) & 1) == 0)
          {
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10185AF60);
            }
            uint64_t v54 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
            {
              uint64_t v55 = -[NSString UTF8String](-[NSBundle bundlePath](v154, "bundlePath"), "UTF8String");
              __int128 v56 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                  ? &__p
                  : (std::string *)__p.__r_.__value_.__r.__words[0];
              int v57 = -[NSString UTF8String]( +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v56),  "UTF8String");
              __int128 v58 = -[NSString UTF8String](-[NSString description](v50, "description"), "UTF8String");
              uint64_t v165 = 68289794LL;
              __int16 v166 = 2082;
              double v167 = "";
              __int16 v168 = 2082;
              double v169 = (NSString *)v55;
              __int16 v170 = 2082;
              double v171 = v57;
              __int16 v172 = 2082;
              double v173 = v58;
              _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Invalid masquerader for bundle, Bundle:%{public, location:escape_only}s,  Client ProcessPath:%{public, location:escape_only}s, EligibleMasqueraders for bundle:%{public, loc ation:escape_only}s}",  (uint8_t *)&v165,  0x30u);
              uint64_t v47 = (const __CFURL *)v147;
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_10185AF60);
              }
            }

            __int16 v59 = (os_log_s *)qword_101934978;
            if (os_signpost_enabled((os_log_t)qword_101934978))
            {
              __int128 v60 = v47;
              uint64_t v61 = -[NSString UTF8String](-[NSBundle bundlePath](v154, "bundlePath"), "UTF8String");
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                __int16 v62 = &__p;
              }
              else {
                __int16 v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              uint64_t v63 = -[NSString UTF8String]( +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v62),  "UTF8String");
              __int16 v64 = -[NSString UTF8String](-[NSString description](v50, "description"), "UTF8String");
              uint64_t v165 = 68289794LL;
              __int16 v166 = 2082;
              double v167 = "";
              __int16 v168 = 2082;
              double v169 = (NSString *)v61;
              __int16 v170 = 2082;
              double v171 = v63;
              __int16 v172 = 2082;
              double v173 = v64;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v59,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Invalid masquerader for bundle",  "{msg%{public}.0s:Invalid masquerader for bundle, Bundle:%{public, location:escape_only}s,  Client ProcessPath:%{public, location:escape_only}s, EligibleMasqueraders for bundle:%{public, loc ation:escape_only}s}",  (uint8_t *)&v165,  0x30u);
              int v65 = 0;
              uint64_t v47 = v60;
            }

            else
            {
              int v65 = 0;
            }

LABEL_210:
          __int128 v106 = *(void **)(a1 + 48);
          if ((v153 & ~v77) != 0) {
            sub_1005700DC( *(void *)(a1 + 16),  *(void *)(a1 + 48),  *(void *)(a1 + 80),  *(unsigned __int8 *)(a1 + 74));
          }
          uint64_t v107 = *(void *)(a1 + 16);
          __int128 v108 = (char *)objc_msgSend(objc_msgSend(v106, "legacyClientKey"), "UTF8String");
          if (v108) {
            __int128 v109 = v108;
          }
          else {
            __int128 v109 = "";
          }
          sub_1010DDBC0(buf, v109);
          sub_1005827FC(v107, (uint64_t)buf, v94);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          uint64_t v110 = *(void *)(a1 + 16);
          uint64_t UniqueRemotePid = CLConnection::getUniqueRemotePid(*(CLConnection **)(a1 + 264));
          sub_100561D58(v110, (uint64_t)v106, UniqueRemotePid, 1);
          __int128 v112 = sub_100564E40(*(void *)(a1 + 16), (uint64_t)v106);
          v162[0] = @"kCLConnectionMessageClientKeyForIdentityValidation";
          id v113 = [*(id *)(a1 + 48) clientKey];
          v162[1] = @"kCLConnectionMessageMonitorLedgerAccessKey";
          v163[0] = v113;
          v163[1] = v112;
          v174[0] = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v163,  v162,  2LL);
          int v95 = 1;
          goto LABEL_218;
        }

        if (!v85)
        {
          int v95 = 0;
          v174[0] = 0LL;
          goto LABEL_218;
        }

        sub_1004F2598();
        if (sub_1001B9A1C())
        {
          uint64_t v86 = *(void *)(a1 + 96);
          BOOL v87 = v86 != 0;
          if (v86 && !v30)
          {
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10185AF60);
            }
            __n128 v88 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
            {
              uint64_t v89 = *(void *)(a1 + 48);
              *(_DWORD *)std::stringbuf::string_type buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(void *)&buf[20] = v89;
              _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:WatchKit-Plugin connecting on watch , but companion placeholder bundle not found , ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_10185AF60);
              }
            }

            __int128 v90 = (os_log_s *)qword_101934978;
            if (os_signpost_enabled((os_log_t)qword_101934978))
            {
              uint64_t v91 = *(void *)(a1 + 48);
              *(_DWORD *)std::stringbuf::string_type buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(void *)&buf[20] = v91;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v90,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "WatchKit-Plugin connecting on watch , but companion placeholder bundle not found",  "{msg%{public}.0s:WatchKit-Plugin connecting on watch , but companion placeholder bundle not found , ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
            }
          }
        }

        else
        {
          BOOL v87 = 0;
        }

        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 80LL))(a1))
        {
          *(void *)(a1 + 80) |= 1uLL;
          __int128 v94 = 0LL;
          if (sub_100AE091C((const __CFString *)-[CLClientKeyPath bundlePath](v75, "bundlePath")))
          {
            *(void *)(a1 + 80) |= 4uLL;
            goto LABEL_201;
          }
        }

        else
        {
          if (*(_BYTE *)(a1 + 193)) {
            int v96 = 2;
          }
          else {
            int v96 = *(unsigned __int8 *)(a1 + 192);
          }
          v157[0] = _NSConcreteStackBlock;
          v157[1] = 3221225472LL;
          v157[2] = sub_100879A4C;
          v157[3] = &unk_10185AAD0;
          v157[4] = a1;
          v157[5] = v30;
          BOOL v158 = v87;
          uint64_t v98 = *(void *)(a1 + 80) | sub_100D963AC(v96, (uint64_t)v157);
          *(void *)(a1 + 8sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = v98;
          if (!v30)
          {
            __int128 v94 = 0LL;
LABEL_190:
            if (v98 == 1)
            {
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_10185AF60);
              }
              __int128 v99 = (os_log_s *)qword_101934978;
              if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v100 = *(void *)(a1 + 48);
                *(_DWORD *)std::stringbuf::string_type buf = 138543362;
                *(void *)&uint8_t buf[4] = v100;
                _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "%{public}@ is creating a CLLocationManager, but does not have any NSLocation*UsageDescription keys",  buf,  0xCu);
              }

              if (sub_1002921D0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_101934970 != -1) {
                  dispatch_once(&qword_101934970, &stru_10185AF60);
                }
                uint64_t v101 = *(void *)(a1 + 48);
                LODWORD(v174[0]) = 138543362;
                *(void *)((char *)v174 + 4) = v101;
                LODWORD(v145) = 12;
                _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "%{public}@ is creating a CLLocationManager, but does not have any NSLocation*UsageDescription keys",  v174,  v145);
                __int128 v103 = (char *)v102;
                sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::processRegistration(NSDictionary *)",  "%s\n",  v102);
                if (v103 != buf) {
                  free(v103);
                }
              }

              goto LABEL_207;
            }

  int v6 = 1LL;
LABEL_211:
  *(void *)std::stringbuf::string_type buf = &v174;
  sub_100ECBF34((void ***)buf);
  return v6;
}

void sub_10086D0B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *__p, uint64_t a47, int a48, __int16 a49, char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
}

id sub_10086D1D8(uint64_t a1, int a2)
{
  else {
    return *(id *)(a1 + 48);
  }
}

uint64_t sub_10086D21C(uint64_t a1)
{
  uint64_t v2 = -[CLDaemonClientAdapter initWithDaemonClient:]( objc_alloc(&OBJC_CLASS___CLDaemonClientAdapter),  "initWithDaemonClient:",  a1);
  *(void *)(a1 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = v2;
  -[CLDaemonClientAdapter setValid:](v2, "setValid:", 1LL);
  sub_1003A09BC((uint64_t)sub_10086D6AC, a1, *(void **)(a1 + 24), &v7);
  uint64_t v3 = v7;
  uint64_t v7 = 0LL;
  uint64_t v4 = *(void *)(a1 + 240);
  *(void *)(a1 + 24sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    uint64_t v5 = v7;
    uint64_t v7 = 0LL;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
  }

  [*(id *)(*(void *)(a1 + 240) + 16) register:*(void *)(*(void *)(a1 + 240) + 8) forNotification:5 registrationInfo:0];
  return 1LL;
}

uint64_t sub_10086D2CC(uint64_t a1)
{
  *(void *)a1 = off_10185A9B8;
  *(void *)(a1 + 8) = &off_10185AA90;
  if (*(_BYTE *)(a1 + 72) && *(_BYTE *)(a1 + 91)) {
    sub_100566538(*(void *)(a1 + 16), *(void **)(a1 + 48), 0, 0, 1, 0, 0);
  }

  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = 0LL;

  *(void *)(a1 + 392) = 0LL;
  sub_10086D518(a1);
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185AF80);
  }
  uint64_t v2 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68290562;
    v9[1] = 0;
    __int16 v10 = 2082;
    char v11 = "";
    __int16 v12 = 2082;
    unint64_t v13 = "state_transition";
    __int16 v14 = 2082;
    unsigned int v15 = "DaemonClient";
    __int16 v16 = 2050;
    __int16 v18 = 2082;
    uint64_t v17 = a1;
    int v19 = "lifecycle";
    __int16 v20 = 2050;
    uint64_t v21 = a1;
    __int16 v22 = 2050;
    uint64_t v23 = 0LL;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:state transition, event:%{public, location:escape_only}s, state:%{public, locatio n:escape_only}s, id:%{public}p, property:%{public, location:escape_only}s, old:%{public}p, n ew:%{public}p}",  (uint8_t *)v9,  0x4Eu);
  }

  sub_1002B729C((void *)(a1 + 400));
  sub_1008906C8(a1 + 328);
  sub_100890644(a1 + 288);
  uint64_t v3 = *(void *)(a1 + 240);
  *(void *)(a1 + 24sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0LL;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  sub_1000229D4(a1 + 168, *(char **)(a1 + 176));
  sub_100890314((uint64_t *)(a1 + 128));
  return a1;
}

void sub_10086D50C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100006BB8(a1);
}

void sub_10086D518(uint64_t a1)
{
  if ((*(void *)(a1 + 64) & 0x14LL) != 0) {
    (*(void (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
  }

  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  [*(id *)(a1 + 40) setValid:0];

  *(void *)(a1 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0LL;
  sub_1008AC3D0(a1 + 328);
  sub_100890314((uint64_t *)(a1 + 128));
  uint64_t v3 = *(CLConnection **)(a1 + 264);
  if (v3)
  {
    CLConnection::deferredDelete(v3);
    *(void *)(a1 + 264) = 0LL;
  }

  uint64_t v4 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }

  if (*(_BYTE *)(a1 + 276))
  {
    *(_BYTE *)(a1 + 276) = 0;
    uint64_t v6 = sub_100E28910();
    sub_100E29370(v6, a1, 0, 0LL);
  }

  uint64_t v7 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0LL;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0LL;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }

  *(void *)(a1 + 112) = 0LL;
}

uint64_t sub_10086D678(uint64_t a1)
{
  return sub_10086D2CC(a1 - 8);
}

void sub_10086D680(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10086D2CC(a1);
  operator delete(v1);
}

void sub_10086D694(uint64_t a1)
{
  uint64_t v1 = (void *)sub_10086D2CC(a1 - 8);
  operator delete(v1);
}

void sub_10086D6AC(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185AF40);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonClient::onCompanionNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185AF40);
    }
    uint64_t v8 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDaemonClient::onCompanionNotification, event:%{public, location:escape_only}s,  this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v10 = 0;
  }

  if (*a2 == 5) {
    *(_BYTE *)(a4 + 371) = *a3;
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10086D868( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10086D884(uint64_t a1, void *a2)
{
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185AF80);
  }
  uint64_t v4 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    int v10 = 68290562;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2082;
    __int16 v15 = "state_transition";
    __int16 v16 = 2082;
    __int16 v17 = "DaemonClient";
    __int16 v18 = 2050;
    uint64_t v19 = a1;
    __int16 v20 = 2082;
    uint64_t v21 = "clientKeyPath";
    __int16 v22 = 2114;
    uint64_t v23 = v5;
    __int16 v24 = 2114;
    unsigned int v25 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:state transition, event:%{public, location:escape_only}s, state:%{public, locatio n:escape_only}s, id:%{public}p, property:%{public, location:escape_only}s, old:%{public, location: escape_only}@, new:%{public, location:escape_only}@}",  (uint8_t *)&v10,  0x4Eu);
  }

  if (!*(void *)(a1 + 48)) {
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a1 + 72))
  {

LABEL_16:
    *(void *)(a1 + 48) = a2;
    return;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185AF80);
  }
  uint64_t v6 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    uint64_t v7 = *(const char **)(a1 + 48);
    int v10 = 68289538;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2114;
    __int16 v15 = v7;
    __int16 v16 = 2114;
    __int16 v17 = (const char *)a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Attempting to set CLDC clientKeyPath after we've already finished registration. Sticking wi th the ckp that we originally set fRegistrationReceived with, old:%{public, location:escape_only}@, new: %{public, location:escape_only}@}",  (uint8_t *)&v10,  0x26u);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
  }

  uint64_t v8 = (os_log_s *)qword_101934988;
  if (os_signpost_enabled((os_log_t)qword_101934988))
  {
    int v9 = *(const char **)(a1 + 48);
    int v10 = 68289538;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2114;
    __int16 v15 = v9;
    __int16 v16 = 2114;
    __int16 v17 = (const char *)a2;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Attempting to set CLDC clientKeyPath after we've already finished registration. Sticking with the ckp that we orig inally set fRegistrationReceived with",  "{msg%{public}.0s:Attempting to set CLDC clientKeyPath after we've already finished registration. Sticking wi th the ckp that we originally set fRegistrationReceived with, old:%{public, location:escape_only}@, new: %{public, location:escape_only}@}",  (uint8_t *)&v10,  0x26u);
  }

void sub_10086DB30(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)qword_101999168;
  uint64_t v5 = (unsigned __int8 *)CLConnectionMessage::name(*a2);
  unint64_t v6 = sub_10004B1A4((uint64_t)(v4 + 3), (uint64_t)v5);
  int8x8_t v7 = (int8x8_t)v4[1];
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v11 = v6 % *(void *)&v7;
      }
    }

    else
    {
      unint64_t v11 = (*(void *)&v7 - 1LL) & v6;
    }

    __int16 v12 = *(unsigned __int8 ***)(*v4 + 8 * v11);
    if (v12)
    {
      __int16 v13 = *v12;
      if (*v12)
      {
        uint64_t v14 = (uint64_t)(v4 + 4);
        do
        {
          unint64_t v15 = *((void *)v13 + 1);
          if (v15 == v8)
          {
            if ((sub_100022A24(v14, v13 + 16, v5) & 1) != 0)
            {
              unsigned int v25 = a2[1];
              __int16 v32 = *a2;
              double v33 = (std::__shared_weak_count *)v25;
              if (v25)
              {
                __int16 v26 = (unint64_t *)((char *)v25 + 8);
                do
                  unint64_t v27 = __ldxr(v26);
                while (__stxr(v27 + 1, v26));
              }

              *(void *)std::stringbuf::string_type buf = a1;
              uint64_t v28 = *((void *)v13 + 8);
              if (!v28) {
                sub_100008BDC();
              }
              (*(void (**)(uint64_t, uint8_t *, CLConnectionMessage **))(*(void *)v28 + 48LL))( v28,  buf,  &v32);
              int v29 = v33;
              if (v33)
              {
                p_shared_owners = (unint64_t *)&v33->__shared_owners_;
                do
                  unint64_t v31 = __ldaxr(p_shared_owners);
                while (__stlxr(v31 - 1, p_shared_owners));
                if (!v31)
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
              }

              return;
            }
          }

          else
          {
            if (v10 > 1)
            {
              if (v15 >= *(void *)&v7) {
                v15 %= *(void *)&v7;
              }
            }

            else
            {
              v15 &= *(void *)&v7 - 1LL;
            }

            if (v15 != v11) {
              break;
            }
          }

          __int16 v13 = *(unsigned __int8 **)v13;
        }

        while (v13);
      }
    }
  }

  __int16 v16 = _os_activity_create( (void *)&_mh_execute_header,  "CL: kCLConnectionMessageUnknown",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v16, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int16 v17 = (os_log_s *)qword_101934978;
  BOOL v18 = os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    *(_DWORD *)std::stringbuf::string_type buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v37 = 2082;
    id v38 = "";
    __int16 v39 = 2082;
    uint64_t v40 = "activity";
    __int16 v41 = 2050;
    uint64_t v42 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:kCLConnectionMessageUnknown, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
  }

  uint64_t v19 = *a2;
  __int16 v20 = a2[1];
  v34[0] = v19;
  v34[1] = v20;
  if (v20)
  {
    uint64_t v21 = (unint64_t *)((char *)v20 + 8);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  sub_10086DE68(v18, v34);
  if (v20)
  {
    uint64_t v23 = (unint64_t *)((char *)v20 + 8);
    do
      unint64_t v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v20 + 16LL))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10086DE34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state)
{
}

void sub_10086DE68(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v4 = (__int128 *)CLConnectionMessage::name(*a2);
  if (*((char *)v4 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)v4, *((void *)v4 + 1));
  }

  else
  {
    __int128 v5 = *v4;
    uint64_t v11 = *((void *)v4 + 2);
    *(_OWORD *)std::string __p = v5;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v6 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
  {
    int8x8_t v7 = __p;
    if (v11 < 0) {
      int8x8_t v7 = (void **)__p[0];
    }
    *(_DWORD *)std::stringbuf::string_type buf = 136446210;
    unint64_t v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Got unhandled mesage of type %{public}s",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    unint64_t v8 = __p;
    if (v11 < 0) {
      unint64_t v8 = (void **)__p[0];
    }
    int v12 = 136446210;
    __int16 v13 = v8;
    uint8x8_t v9 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  17LL,  "Got unhandled mesage of type %{public}s",  &v12,  12);
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageUnknown(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v9);
  }

  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10086E08C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_10086E0D0()
{
  unsigned __int8 v0 = operator new(0x28uLL);
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  *((_DWORD *)v0 + 8) = 1065353216;
  qword_101999168 = (uint64_t)v0;
  sub_10086FFA4();
  sub_100870214();
  sub_100870484(0);
  sub_10087070C();
  sub_10087097C(0);
  sub_100870C04(0);
  sub_100870E8C(0);
  sub_100871114(0);
  sub_10087139C(0);
  sub_100871624(1);
  sub_1008718AC(1);
  sub_100871B34(1);
  sub_100871DBC(1);
  sub_100872044(1);
  sub_1008722CC(1);
  sub_100872554(1);
  sub_1008727DC(1);
  sub_100872A64(1);
  sub_100872CEC(1);
  sub_100872F74(1);
  sub_1008731FC(1);
  sub_100873484(1);
  sub_10087370C(1);
  sub_100873994(1);
  sub_100873C1C(1);
  sub_100873EA4(1);
  sub_10087412C(1);
  sub_1008743B4(1);
  sub_10087463C(1);
  sub_1008748C4(1);
  sub_100874B4C(1);
  sub_100874DD4(1);
  sub_10087505C(1);
  sub_1008752E4(1);
  v166[0] = &off_10185C320;
  double v167 = v166;
  sub_10087556C(qword_101999168, "LocationManager/kCLConnectionMessageRegistration", (uint64_t)v166);
  uint64_t v1 = v167;
  if (v167 == v166)
  {
    uint64_t v2 = 4LL;
    uint64_t v1 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_6;
    }
    uint64_t v2 = 5LL;
  }

  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  v166[0] = &off_10185C3A0;
  double v167 = v166;
  sub_10087562C(qword_101999168, "kCLConnectionMessageAllowsLocationPrompts", (uint64_t)v166);
  uint64_t v3 = v167;
  if (v167 == v166)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_11;
    }
    uint64_t v4 = 5LL;
  }

  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_11:
  v166[0] = &off_10185C420;
  double v167 = v166;
  sub_1008756EC(qword_101999168, "kCLConnectionMessageShowLocationPrompt", (uint64_t)v166);
  __int128 v5 = v167;
  if (v167 == v166)
  {
    uint64_t v6 = 4LL;
    __int128 v5 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_16;
    }
    uint64_t v6 = 5LL;
  }

  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_16:
  uint64_t v7 = qword_101999168;
  v166[0] = &off_10185C4A0;
  double v167 = v166;
  unint64_t v8 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v8;
  uint64_t v164 = v7 + 16;
  *(void *)unint64_t v8 = 0LL;
  *((void *)v8 + 1) = 0LL;
  sub_1010DDBC0((void *)v8 + 2, "kCLConnectionMessagePurpose");
  sub_100890C50((uint64_t)(v8 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v8 + 1) = sub_10004B1A4(v7 + 24, (uint64_t)(v8 + 16));
  if ((sub_1008A0368(v7, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  uint8x8_t v9 = v167;
  if (v167 == v166)
  {
    uint64_t v10 = 4LL;
    uint8x8_t v9 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_23;
    }
    uint64_t v10 = 5LL;
  }

  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_23:
  v166[0] = &off_10185C520;
  double v167 = v166;
  sub_10087556C(qword_101999168, "kCLConnectionMessageIsActuallyAWatchKitExtension", (uint64_t)v166);
  uint64_t v11 = v167;
  if (v167 == v166)
  {
    uint64_t v12 = 4LL;
    uint64_t v11 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_28;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_28:
  v166[0] = &off_10185C5A0;
  double v167 = v166;
  sub_1008757AC(qword_101999168, "kCLConnectionMessageProxyForRemoteClient", (uint64_t)v166);
  __int16 v13 = v167;
  if (v167 == v166)
  {
    uint64_t v14 = 4LL;
    __int16 v13 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_33;
    }
    uint64_t v14 = 5LL;
  }

  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_33:
  v166[0] = &off_10185C620;
  double v167 = v166;
  sub_1008757AC(qword_101999168, "kCLConnectionMessageRequestAuthorization", (uint64_t)v166);
  unint64_t v15 = v167;
  if (v167 == v166)
  {
    uint64_t v16 = 4LL;
    unint64_t v15 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_38;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_38:
  v166[0] = &off_10185C6A0;
  double v167 = v166;
  sub_10087586C(qword_101999168, "kCLConnectionMessageRequestTemporaryPrecise", (uint64_t)v166);
  __int16 v17 = v167;
  if (v167 == v166)
  {
    uint64_t v18 = 4LL;
    __int16 v17 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_43;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_43:
  v166[0] = &off_10185C720;
  double v167 = v166;
  sub_10087556C(qword_101999168, "kCLConnectionMessageMarkAsHavingReceivedLocation", (uint64_t)v166);
  uint64_t v19 = v167;
  if (v167 == v166)
  {
    uint64_t v20 = 4LL;
    uint64_t v19 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_48;
    }
    uint64_t v20 = 5LL;
  }

  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_48:
  uint64_t v21 = qword_101999168;
  v166[0] = &off_10185C7A0;
  double v167 = v166;
  unint64_t v22 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v22;
  uint64_t v164 = v21 + 16;
  char v165 = 0;
  *(void *)unint64_t v22 = 0LL;
  *((void *)v22 + 1) = 0LL;
  sub_1010DDBC0((void *)v22 + 2, "kCLConnectionMessageMatchInfoEnabled");
  sub_100890C50((uint64_t)(v22 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v22 + 1) = sub_10004B1A4(v21 + 24, (uint64_t)(v22 + 16));
  if ((sub_1008A0368(v21, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  uint64_t v23 = v167;
  if (v167 == v166)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_55;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_55:
  v166[0] = &off_10185C820;
  double v167 = v166;
  sub_10087562C(qword_101999168, "kCLConnectionMessageGroundAltitudeEnabled", (uint64_t)v166);
  unsigned int v25 = v167;
  if (v167 == v166)
  {
    uint64_t v26 = 4LL;
    unsigned int v25 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_60;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_60:
  uint64_t v27 = qword_101999168;
  v166[0] = &off_10185C8A0;
  double v167 = v166;
  uint64_t v28 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v28;
  uint64_t v164 = v27 + 16;
  char v165 = 0;
  *(void *)uint64_t v28 = 0LL;
  *((void *)v28 + 1) = 0LL;
  sub_1010DDBC0((void *)v28 + 2, "kCLConnectionMessageFusionInfoEnabled");
  sub_100890C50((uint64_t)(v28 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v28 + 1) = sub_10004B1A4(v27 + 24, (uint64_t)(v28 + 16));
  if ((sub_1008A0368(v27, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  int v29 = v167;
  if (v167 == v166)
  {
    uint64_t v30 = 4LL;
    int v29 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_67;
    }
    uint64_t v30 = 5LL;
  }

  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_67:
  v166[0] = &off_10185C920;
  double v167 = v166;
  sub_10087592C(qword_101999168, "kCLConnectionMessageTrackRunInfoEnabled", (uint64_t)v166);
  unint64_t v31 = v167;
  if (v167 == v166)
  {
    uint64_t v32 = 4LL;
    unint64_t v31 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_72;
    }
    uint64_t v32 = 5LL;
  }

  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_72:
  v166[0] = &off_10185C9A0;
  double v167 = v166;
  sub_1008759EC(qword_101999168, "kCLConnectionMessageRegisterAsLocationClient", (uint64_t)v166);
  double v33 = v167;
  if (v167 == v166)
  {
    uint64_t v34 = 4LL;
    double v33 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_77;
    }
    uint64_t v34 = 5LL;
  }

  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_77:
  v166[0] = &off_10185CA20;
  double v167 = v166;
  sub_10087556C(qword_101999168, "kCLConnectionMessageFetchEstimatedLocationAtDate", (uint64_t)v166);
  uint64_t v35 = v167;
  if (v167 == v166)
  {
    uint64_t v36 = 4LL;
    uint64_t v35 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_82;
    }
    uint64_t v36 = 5LL;
  }

  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_82:
  v166[0] = &off_10185CAA0;
  double v167 = v166;
  sub_10087586C(qword_101999168, "kCLConnectionMessageCurrentClientDictionary", (uint64_t)v166);
  __int16 v37 = v167;
  if (v167 == v166)
  {
    uint64_t v38 = 4LL;
    __int16 v37 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_87;
    }
    uint64_t v38 = 5LL;
  }

  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_87:
  v166[0] = &off_10185CB20;
  double v167 = v166;
  sub_100875AAC(qword_101999168, "kCLConnectionMessageVehicleHeading", (uint64_t)v166);
  __int16 v39 = v167;
  if (v167 == v166)
  {
    uint64_t v40 = 4LL;
    __int16 v39 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_92;
    }
    uint64_t v40 = 5LL;
  }

  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_92:
  v166[0] = &off_10185CBA0;
  double v167 = v166;
  sub_100875B6C(qword_101999168, "kCLConnectionMessageVehicleSpeed", (uint64_t)v166);
  __int16 v41 = v167;
  if (v167 == v166)
  {
    uint64_t v42 = 4LL;
    __int16 v41 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_97;
    }
    uint64_t v42 = 5LL;
  }

  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_97:
  v166[0] = &off_10185CC20;
  double v167 = v166;
  sub_1008757AC(qword_101999168, "kCLConnectionMessageRequestMicroLocation", (uint64_t)v166);
  uint64_t v43 = v167;
  if (v167 == v166)
  {
    uint64_t v44 = 4LL;
    uint64_t v43 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_102;
    }
    uint64_t v44 = 5LL;
  }

  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_102:
  v166[0] = &off_10185CCA0;
  double v167 = v166;
  sub_100875C2C(qword_101999168, "kCLConnectionMessageRequestMicroLocationRecordingScan", (uint64_t)v166);
  uint64_t v45 = v167;
  if (v167 == v166)
  {
    uint64_t v46 = 4LL;
    uint64_t v45 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_107;
    }
    uint64_t v46 = 5LL;
  }

  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_107:
  uint64_t v47 = qword_101999168;
  v166[0] = &off_10185CD20;
  double v167 = v166;
  uint64_t v48 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v48;
  uint64_t v164 = v47 + 16;
  char v165 = 0;
  *(void *)uint64_t v48 = 0LL;
  *((void *)v48 + 1) = 0LL;
  sub_1010DDBC0((void *)v48 + 2, "kCLConnectionMessageMicroLocationDonateTruthLabelEvent");
  sub_100890C50((uint64_t)(v48 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v48 + 1) = sub_10004B1A4(v47 + 24, (uint64_t)(v48 + 16));
  if ((sub_1008A0368(v47, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  uint64_t v49 = v167;
  if (v167 == v166)
  {
    uint64_t v50 = 4LL;
    uint64_t v49 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_114;
    }
    uint64_t v50 = 5LL;
  }

  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_114:
  v166[0] = &off_10185CDA0;
  double v167 = v166;
  sub_100875CEC(qword_101999168, "kCLConnectionMessageMicroLocationDonateTruthLabelBetweenDatesEvent", (uint64_t)v166);
  __int128 v51 = v167;
  if (v167 == v166)
  {
    uint64_t v52 = 4LL;
    __int128 v51 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_119;
    }
    uint64_t v52 = 5LL;
  }

  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_119:
  uint64_t v53 = qword_101999168;
  v166[0] = &off_10185CE20;
  double v167 = v166;
  uint64_t v54 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v54;
  uint64_t v164 = v53 + 16;
  char v165 = 0;
  *(void *)uint64_t v54 = 0LL;
  *((void *)v54 + 1) = 0LL;
  sub_1010DDBC0((void *)v54 + 2, "kCLConnectionMessagePurgeMicroLocationSemiSupervisedData");
  sub_100890C50((uint64_t)(v54 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v54 + 1) = sub_10004B1A4(v53 + 24, (uint64_t)(v54 + 16));
  if ((sub_1008A0368(v53, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  uint64_t v55 = v167;
  if (v167 == v166)
  {
    uint64_t v56 = 4LL;
    uint64_t v55 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_126;
    }
    uint64_t v56 = 5LL;
  }

  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_126:
  v166[0] = &off_10185CEA0;
  double v167 = v166;
  sub_100875DAC(qword_101999168, "kCLConnectionMessagePurgeMicroLocationData", (uint64_t)v166);
  int v57 = v167;
  if (v167 == v166)
  {
    uint64_t v58 = 4LL;
    int v57 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_131;
    }
    uint64_t v58 = 5LL;
  }

  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_131:
  v166[0] = &off_10185CF20;
  double v167 = v166;
  sub_100875C2C(qword_101999168, "kCLConnectionMessageMicroLocationExportDatabaseTables", (uint64_t)v166);
  __int16 v59 = v167;
  if (v167 == v166)
  {
    uint64_t v60 = 4LL;
    __int16 v59 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_136;
    }
    uint64_t v60 = 5LL;
  }

  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_136:
  uint64_t v61 = qword_101999168;
  v166[0] = &off_10185CFA0;
  double v167 = v166;
  __int16 v62 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v62;
  uint64_t v164 = v61 + 16;
  char v165 = 0;
  *(void *)__int16 v62 = 0LL;
  *((void *)v62 + 1) = 0LL;
  sub_1010DDBC0((void *)v62 + 2, "kCLConnectionMessageMicroLocationExportDataForMigration");
  sub_100890C50((uint64_t)(v62 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v62 + 1) = sub_10004B1A4(v61 + 24, (uint64_t)(v62 + 16));
  if ((sub_1008A0368(v61, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  uint64_t v63 = v167;
  if (v167 == v166)
  {
    uint64_t v64 = 4LL;
    uint64_t v63 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_143;
    }
    uint64_t v64 = 5LL;
  }

  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_143:
  uint64_t v65 = qword_101999168;
  v166[0] = &off_10185D020;
  double v167 = v166;
  __int16 v66 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v66;
  uint64_t v164 = v65 + 16;
  char v165 = 0;
  *(void *)__int16 v66 = 0LL;
  *((void *)v66 + 1) = 0LL;
  sub_1010DDBC0((void *)v66 + 2, "kCLConnectionMessageMicroLocationRequestStaticSourcesStatistics");
  sub_100890C50((uint64_t)(v66 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v66 + 1) = sub_10004B1A4(v65 + 24, (uint64_t)(v66 + 16));
  if ((sub_1008A0368(v65, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  uint64_t v67 = v167;
  if (v167 == v166)
  {
    uint64_t v68 = 4LL;
    uint64_t v67 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_150;
    }
    uint64_t v68 = 5LL;
  }

  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_150:
  v166[0] = &off_10185D0A0;
  double v167 = v166;
  sub_10087556C(qword_101999168, "kCLConnectionMessageMicroLocationRequestLearning", (uint64_t)v166);
  id v69 = v167;
  if (v167 == v166)
  {
    uint64_t v70 = 4LL;
    id v69 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_155;
    }
    uint64_t v70 = 5LL;
  }

  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_155:
  uint64_t v71 = qword_101999168;
  v166[0] = &off_10185D120;
  double v167 = v166;
  unsigned int v72 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v72;
  uint64_t v164 = v71 + 16;
  char v165 = 0;
  *(void *)unsigned int v72 = 0LL;
  *((void *)v72 + 1) = 0LL;
  sub_1010DDBC0((void *)v72 + 2, "kCLConnectionMessageGmm");
  sub_100890C50((uint64_t)(v72 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v72 + 1) = sub_10004B1A4(v71 + 24, (uint64_t)(v72 + 16));
  if ((sub_1008A0368(v71, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  __int128 v73 = v167;
  if (v167 == v166)
  {
    uint64_t v74 = 4LL;
    __int128 v73 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_162;
    }
    uint64_t v74 = 5LL;
  }

  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_162:
  v166[0] = &off_10185D1A0;
  double v167 = v166;
  sub_100875B6C(qword_101999168, "kCLConnectionMessagePressureBias", (uint64_t)v166);
  __int128 v75 = v167;
  if (v167 == v166)
  {
    uint64_t v76 = 4LL;
    __int128 v75 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_167;
    }
    uint64_t v76 = 5LL;
  }

  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_167:
  v166[0] = &off_10185D220;
  double v167 = v166;
  sub_1008756EC(qword_101999168, "kCLConnectionMessageGyroBiasEstimation", (uint64_t)v166);
  unsigned int v77 = v167;
  if (v167 == v166)
  {
    uint64_t v78 = 4LL;
    unsigned int v77 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_172;
    }
    uint64_t v78 = 5LL;
  }

  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_172:
  v166[0] = &off_10185D2A0;
  double v167 = v166;
  sub_100875E6C(qword_101999168, "kCLConnectionMessageHasRunMiniCal", (uint64_t)v166);
  __int16 v79 = v167;
  if (v167 == v166)
  {
    uint64_t v80 = 4LL;
    __int16 v79 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_177;
    }
    uint64_t v80 = 5LL;
  }

  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_177:
  v166[0] = &off_10185D320;
  double v167 = v166;
  sub_100875B6C(qword_101999168, "kCLConnectionMessageStartMiniCal", (uint64_t)v166);
  BOOL v81 = v167;
  if (v167 == v166)
  {
    uint64_t v82 = 4LL;
    BOOL v81 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_182;
    }
    uint64_t v82 = 5LL;
  }

  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_182:
  v166[0] = &off_10185D3A0;
  double v167 = v166;
  sub_100875E6C(qword_101999168, "kCLConnectionMessageCatherineData", (uint64_t)v166);
  id v83 = v167;
  if (v167 == v166)
  {
    uint64_t v84 = 4LL;
    id v83 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_187;
    }
    uint64_t v84 = 5LL;
  }

  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_187:
  uint64_t v85 = qword_101999168;
  v166[0] = &off_10185D420;
  double v167 = v166;
  uint64_t v86 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v86;
  uint64_t v164 = v85 + 16;
  char v165 = 0;
  *(void *)uint64_t v86 = 0LL;
  *((void *)v86 + 1) = 0LL;
  sub_1010DDBC0((void *)v86 + 2, "kCLConnectionMessageVehicleConnectionMostRecent");
  sub_100890C50((uint64_t)(v86 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v86 + 1) = sub_10004B1A4(v85 + 24, (uint64_t)(v86 + 16));
  if ((sub_1008A0368(v85, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  BOOL v87 = v167;
  if (v167 == v166)
  {
    uint64_t v88 = 4LL;
    BOOL v87 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_194;
    }
    uint64_t v88 = 5LL;
  }

  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_194:
  v166[0] = &off_10185D4A0;
  double v167 = v166;
  sub_10087586C(qword_101999168, "kCLConnectionMessageVehicleStateIsAvailable", (uint64_t)v166);
  uint64_t v89 = v167;
  if (v167 == v166)
  {
    uint64_t v90 = 4LL;
    uint64_t v89 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_199;
    }
    uint64_t v90 = 5LL;
  }

  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_199:
  uint64_t v91 = qword_101999168;
  v166[0] = &off_10185D520;
  double v167 = v166;
  uint64_t v92 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v92;
  uint64_t v164 = v91 + 16;
  char v165 = 0;
  *(void *)uint64_t v92 = 0LL;
  *((void *)v92 + 1) = 0LL;
  sub_1010DDBC0((void *)v92 + 2, "kCLConnectionMessageVehicleStateMostRecentVehicleConnection");
  sub_100890C50((uint64_t)(v92 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v92 + 1) = sub_10004B1A4(v91 + 24, (uint64_t)(v92 + 16));
  if ((sub_1008A0368(v91, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  uint64_t v93 = v167;
  if (v167 == v166)
  {
    uint64_t v94 = 4LL;
    uint64_t v93 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_206;
    }
    uint64_t v94 = 5LL;
  }

  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_206:
  uint64_t v95 = qword_101999168;
  v166[0] = &off_10185D5A0;
  double v167 = v166;
  int v96 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v96;
  uint64_t v164 = v95 + 16;
  char v165 = 0;
  *(void *)int v96 = 0LL;
  *((void *)v96 + 1) = 0LL;
  sub_1010DDBC0((void *)v96 + 2, "kCLConnectionMessageVehicleStateMostRecentInVehicle");
  sub_100890C50((uint64_t)(v96 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v96 + 1) = sub_10004B1A4(v95 + 24, (uint64_t)(v96 + 16));
  if ((sub_1008A0368(v95, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  __int128 v97 = v167;
  if (v167 == v166)
  {
    uint64_t v98 = 4LL;
    __int128 v97 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_213;
    }
    uint64_t v98 = 5LL;
  }

  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_213:
  v166[0] = &off_10185D620;
  double v167 = v166;
  sub_10087562C(qword_101999168, "kCLConnectionMessageVehicleStateIsVehicle", (uint64_t)v166);
  __int128 v99 = v167;
  if (v167 == v166)
  {
    uint64_t v100 = 4LL;
    __int128 v99 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_218;
    }
    uint64_t v100 = 5LL;
  }

  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_218:
  v166[0] = &off_10185D6A0;
  double v167 = v166;
  sub_100875AAC(qword_101999168, "kCLConnectionMessageVehicularState", (uint64_t)v166);
  uint64_t v101 = v167;
  if (v167 == v166)
  {
    uint64_t v102 = 4LL;
    uint64_t v101 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_223;
    }
    uint64_t v102 = 5LL;
  }

  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_223:
  v166[0] = &off_10185D720;
  double v167 = v166;
  sub_100875DAC(qword_101999168, "kCLConnectionMessageVehicularOperatorState", (uint64_t)v166);
  __int128 v103 = v167;
  if (v167 == v166)
  {
    uint64_t v104 = 4LL;
    __int128 v103 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_228;
    }
    uint64_t v104 = 5LL;
  }

  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_228:
  uint64_t v105 = qword_101999168;
  v166[0] = &off_10185D7A0;
  double v167 = v166;
  __int128 v106 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v106;
  uint64_t v164 = v105 + 16;
  char v165 = 0;
  *(void *)__int128 v106 = 0LL;
  *((void *)v106 + 1) = 0LL;
  sub_1010DDBC0((void *)v106 + 2, "kCLConnectionMessageHealthAssessmentRecordTypeForDurationKey");
  sub_100890C50((uint64_t)(v106 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v106 + 1) = sub_10004B1A4(v105 + 24, (uint64_t)(v106 + 16));
  if ((sub_1008A0368(v105, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  uint64_t v107 = v167;
  if (v167 == v166)
  {
    uint64_t v108 = 4LL;
    uint64_t v107 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_235;
    }
    uint64_t v108 = 5LL;
  }

  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_235:
  uint64_t v109 = qword_101999168;
  v166[0] = &off_10185D820;
  double v167 = v166;
  uint64_t v110 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v110;
  uint64_t v164 = v109 + 16;
  char v165 = 0;
  *(void *)uint64_t v110 = 0LL;
  *((void *)v110 + 1) = 0LL;
  sub_1010DDBC0((void *)v110 + 2, "kCLConnectionMessageHealthAssessmentParkinsonsResultQuery");
  sub_100890C50((uint64_t)(v110 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v110 + 1) = sub_10004B1A4(v109 + 24, (uint64_t)(v110 + 16));
  if ((sub_1008A0368(v109, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  __int128 v111 = v167;
  if (v167 == v166)
  {
    uint64_t v112 = 4LL;
    __int128 v111 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_242;
    }
    uint64_t v112 = 5LL;
  }

  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_242:
  v166[0] = &off_10185D8A0;
  double v167 = v166;
  sub_100875C2C(qword_101999168, "kCLConnectionMessageMovementDisorderLastProcessedDate", (uint64_t)v166);
  id v113 = v167;
  if (v167 == v166)
  {
    uint64_t v114 = 4LL;
    id v113 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_247;
    }
    uint64_t v114 = 5LL;
  }

  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_247:
  uint64_t v115 = qword_101999168;
  v166[0] = &off_10185D920;
  double v167 = v166;
  __int128 v116 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v116;
  uint64_t v164 = v115 + 16;
  char v165 = 0;
  *(void *)__int128 v116 = 0LL;
  *((void *)v116 + 1) = 0LL;
  sub_1010DDBC0((void *)v116 + 2, "kCLConnectionMessageMovementDisorderMonitorKinesiasExpirationDate");
  sub_100890C50((uint64_t)(v116 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v116 + 1) = sub_10004B1A4(v115 + 24, (uint64_t)(v116 + 16));
  if ((sub_1008A0368(v115, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  __int128 v117 = v167;
  if (v167 == v166)
  {
    uint64_t v118 = 4LL;
    __int128 v117 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_254;
    }
    uint64_t v118 = 5LL;
  }

  (*(void (**)(void))(*v117 + 8 * v118))();
LABEL_254:
  v166[0] = &off_10185D9A0;
  double v167 = v166;
  sub_1008759EC(qword_101999168, "kCLConnectionMessageSensorRecorderAuthorized", (uint64_t)v166);
  __int128 v119 = v167;
  if (v167 == v166)
  {
    uint64_t v120 = 4LL;
    __int128 v119 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_259;
    }
    uint64_t v120 = 5LL;
  }

  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_259:
  v166[0] = &off_10185DA20;
  double v167 = v166;
  sub_100875F2C(qword_101999168, "kCLConnectionMessageSensorRecorderSensorAvailable", (uint64_t)v166);
  unsigned int v121 = v167;
  if (v167 == v166)
  {
    uint64_t v122 = 4LL;
    unsigned int v121 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_264;
    }
    uint64_t v122 = 5LL;
  }

  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_264:
  v166[0] = &off_10185DAA0;
  double v167 = v166;
  sub_100875FEC(qword_101999168, "kCLConnectionMessageSensorRecorderGetMetaByID", (uint64_t)v166);
  __int128 v123 = v167;
  if (v167 == v166)
  {
    uint64_t v124 = 4LL;
    __int128 v123 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_269;
    }
    uint64_t v124 = 5LL;
  }

  (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_269:
  v166[0] = &off_10185DB20;
  double v167 = v166;
  sub_10087556C(qword_101999168, "kCLConnectionMessageSensorRecorderGetMetaSinceID", (uint64_t)v166);
  uint64_t v125 = v167;
  if (v167 == v166)
  {
    uint64_t v126 = 4LL;
    uint64_t v125 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_274;
    }
    uint64_t v126 = 5LL;
  }

  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_274:
  v166[0] = &off_10185DBA0;
  double v167 = v166;
  sub_100875C2C(qword_101999168, "kCLConnectionMessageSensorRecorderGetMetasByDateRange", (uint64_t)v166);
  uint64_t v127 = v167;
  if (v167 == v166)
  {
    uint64_t v128 = 4LL;
    uint64_t v127 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_279;
    }
    uint64_t v128 = 5LL;
  }

  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_279:
  v166[0] = &off_10185DC20;
  double v167 = v166;
  sub_100875FEC(qword_101999168, "kCLConnectionMessageSensorRecorderGetDataByID", (uint64_t)v166);
  id v129 = v167;
  if (v167 == v166)
  {
    uint64_t v130 = 4LL;
    id v129 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_284;
    }
    uint64_t v130 = 5LL;
  }

  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_284:
  v166[0] = &off_10185DCA0;
  double v167 = v166;
  sub_10087586C(qword_101999168, "kCLConnectionMessageSensorRecorderRecordFor", (uint64_t)v166);
  __int128 v131 = v167;
  if (v167 == v166)
  {
    uint64_t v132 = 4LL;
    __int128 v131 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_289;
    }
    uint64_t v132 = 5LL;
  }

  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_289:
  v166[0] = &off_10185DD20;
  double v167 = v166;
  sub_100875CEC(qword_101999168, "kCLConnectionMessageSensorRecorderWriteSensorDataToFileByDateRange", (uint64_t)v166);
  __int128 v133 = v167;
  if (v167 == v166)
  {
    uint64_t v134 = 4LL;
    __int128 v133 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_294;
    }
    uint64_t v134 = 5LL;
  }

  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_294:
  v166[0] = &off_10185DDA0;
  double v167 = v166;
  sub_100875C2C(qword_101999168, "kCLConnectionMessageSensorRecorderSetSensorSampleRate", (uint64_t)v166);
  uint64_t v135 = v167;
  if (v167 == v166)
  {
    uint64_t v136 = 4LL;
    uint64_t v135 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_299;
    }
    uint64_t v136 = 5LL;
  }

  (*(void (**)(void))(*v135 + 8 * v136))();
LABEL_299:
  v166[0] = &off_10185DE20;
  double v167 = v166;
  sub_10087586C(qword_101999168, "kCLConnectionMessageDeviceHasOriginalCamera", (uint64_t)v166);
  __int128 v137 = v167;
  if (v167 == v166)
  {
    uint64_t v138 = 4LL;
    __int128 v137 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_304;
    }
    uint64_t v138 = 5LL;
  }

  (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_304:
  v166[0] = &off_10185DEA0;
  double v167 = v166;
  sub_10087592C(qword_101999168, "kCLConnectionMessageCameraVcmActuatorId", (uint64_t)v166);
  __int128 v139 = v167;
  if (v167 == v166)
  {
    uint64_t v140 = 4LL;
    __int128 v139 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_309;
    }
    uint64_t v140 = 5LL;
  }

  (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_309:
  v166[0] = &off_10185DF20;
  double v167 = v166;
  sub_100875DAC(qword_101999168, "kCLConnectionMessageCompassCalibrationData", (uint64_t)v166);
  uint64_t v141 = v167;
  if (v167 == v166)
  {
    uint64_t v142 = 4LL;
    uint64_t v141 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_314;
    }
    uint64_t v142 = 5LL;
  }

  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_314:
  v166[0] = &off_10185DFA0;
  double v167 = v166;
  sub_1008756EC(qword_101999168, "kCLConnectionMessageFitnessMachineData", (uint64_t)v166);
  __int128 v143 = v167;
  if (v167 == v166)
  {
    uint64_t v144 = 4LL;
    __int128 v143 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_319;
    }
    uint64_t v144 = 5LL;
  }

  (*(void (**)(void))(*v143 + 8 * v144))();
LABEL_319:
  uint64_t v145 = qword_101999168;
  v166[0] = &off_10185E020;
  double v167 = v166;
  __int128 v146 = (unsigned __int8 *)operator new(0x48uLL);
  double v163 = v146;
  uint64_t v164 = v145 + 16;
  char v165 = 0;
  *(void *)__int128 v146 = 0LL;
  *((void *)v146 + 1) = 0LL;
  sub_1010DDBC0((void *)v146 + 2, "kCLConnectionMessagePredictedWalkDistanceReset");
  sub_100890C50((uint64_t)(v146 + 40), (uint64_t)v166);
  char v165 = 1;
  *((void *)v146 + 1) = sub_10004B1A4(v145 + 24, (uint64_t)(v146 + 16));
  if ((sub_1008A0368(v145, v163) & 1) != 0) {
    double v163 = 0LL;
  }
  sub_100890BD4((uint64_t *)&v163);
  __int128 v147 = v167;
  if (v167 == v166)
  {
    uint64_t v148 = 4LL;
    __int128 v147 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_326;
    }
    uint64_t v148 = 5LL;
  }

  (*(void (**)(void))(*v147 + 8 * v148))();
LABEL_326:
  v166[0] = &off_10185E0A0;
  double v167 = v166;
  sub_100875E6C(qword_101999168, "kCLConnectionMessageWriteDbToFile", (uint64_t)v166);
  uint64_t v149 = v167;
  if (v167 == v166)
  {
    uint64_t v150 = 4LL;
    uint64_t v149 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_331;
    }
    uint64_t v150 = 5LL;
  }

  (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_331:
  v166[0] = &off_10185E120;
  double v167 = v166;
  sub_100875FEC(qword_101999168, "kCLConnectionMessageTriggerVO2MaxRetrocompute", (uint64_t)v166);
  uint64_t v151 = v167;
  if (v167 == v166)
  {
    uint64_t v152 = 4LL;
    uint64_t v151 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_336;
    }
    uint64_t v152 = 5LL;
  }

  (*(void (**)(void))(*v151 + 8 * v152))();
LABEL_336:
  v166[0] = &off_10185E1A0;
  double v167 = v166;
  sub_100875F2C(qword_101999168, "kCLConnectionMessageVO2MaxRetrocomputeStatusQuery", (uint64_t)v166);
  BOOL v153 = v167;
  if (v167 == v166)
  {
    uint64_t v154 = 4LL;
    BOOL v153 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_341;
    }
    uint64_t v154 = 5LL;
  }

  (*(void (**)(void))(*v153 + 8 * v154))();
LABEL_341:
  v166[0] = &off_10185E220;
  double v167 = v166;
  sub_100875FEC(qword_101999168, "kCLConnectionMessageWriteContextConfiguration", (uint64_t)v166);
  uint64_t v155 = v167;
  if (v167 == v166)
  {
    uint64_t v156 = 4LL;
    uint64_t v155 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_346;
    }
    uint64_t v156 = 5LL;
  }

  (*(void (**)(void))(*v155 + 8 * v156))();
LABEL_346:
  v166[0] = &off_10185E2A0;
  double v167 = v166;
  sub_100875F2C(qword_101999168, "kCLConnectionMessageColdStorageQueryConfiguration", (uint64_t)v166);
  double v157 = v167;
  if (v167 == v166)
  {
    uint64_t v158 = 4LL;
    double v157 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_351;
    }
    uint64_t v158 = 5LL;
  }

  (*(void (**)(void))(*v157 + 8 * v158))();
LABEL_351:
  v166[0] = &off_10185E320;
  double v167 = v166;
  sub_100875FEC(qword_101999168, "kCLConnectionMessageCollectMetricsForFunction", (uint64_t)v166);
  audit_token_t v159 = v167;
  if (v167 == v166)
  {
    uint64_t v160 = 4LL;
    audit_token_t v159 = v166;
  }

  else
  {
    if (!v167) {
      goto LABEL_356;
    }
    uint64_t v160 = 5LL;
  }

  (*(void (**)(void))(*v159 + 8 * v160))();
LABEL_356:
  v166[0] = &off_10185E3A0;
  double v167 = v166;
  sub_1008759EC(qword_101999168, "kCLConnectionMessageSimulateMotionSensorData", (uint64_t)v166);
  double result = v167;
  if (v167 == v166)
  {
    uint64_t v162 = 4LL;
    double result = v166;
  }

  else
  {
    if (!v167) {
      return result;
    }
    uint64_t v162 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v162))();
}

void sub_10086FDCC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v18 = a15;
  if (a15 == v15)
  {
    uint64_t v16 = 4LL;
    uint64_t v18 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_7;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v18 + 8 * v16))();
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086FFA4()
{
  unsigned __int8 v0 = v12;
  if (v12)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v17, (uint64_t)(v0 + 5));
      uint64_t v1 = qword_101999168;
      uint64_t v2 = (uint64_t)v18;
      if (!v18) {
        goto LABEL_5;
      }
      if (v18 != v17) {
        break;
      }
      uint64_t v14 = v13;
      (*(void (**)(void *, _BYTE *))(v17[0] + 24LL))(v17, v13);
LABEL_7:
      uint64_t v16 = 0LL;
      uint64_t v3 = operator new(0x28uLL);
      *uint64_t v3 = &off_10185B1B0;
      sub_100890EC0((uint64_t)(v3 + 1), (uint64_t)v13);
      uint64_t v16 = v3;
      sub_10089073C(v1, (uint64_t)(v0 + 2), (uint64_t)v15);
      uint64_t v4 = v16;
      if (v16 == v15)
      {
        uint64_t v4 = v15;
        uint64_t v5 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_12;
        }
        uint64_t v5 = 5LL;
      }

      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_12:
      uint64_t v6 = v14;
      if (v14 == v13)
      {
        uint64_t v6 = v13;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_17:
      unint64_t v8 = v18;
      if (v18 == v17)
      {
        unint64_t v8 = v17;
        uint64_t v9 = 4LL;
        goto LABEL_21;
      }

      if (v18)
      {
        uint64_t v9 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }

      unsigned __int8 v0 = (void *)*v0;
      if (!v0) {
        return sub_100272DAC((uint64_t)v11);
      }
    }

    uint64_t v2 = (*(uint64_t (**)(void))(*v18 + 16LL))();
LABEL_5:
    uint64_t v14 = (_BYTE *)v2;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v11);
}

void sub_100870150( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
}

uint64_t sub_100870214()
{
  unsigned __int8 v0 = v12;
  if (v12)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v17, (uint64_t)(v0 + 5));
      uint64_t v1 = qword_101999168;
      uint64_t v2 = (uint64_t)v18;
      if (!v18) {
        goto LABEL_5;
      }
      if (v18 != v17) {
        break;
      }
      uint64_t v14 = v13;
      (*(void (**)(void *, _BYTE *))(v17[0] + 24LL))(v17, v13);
LABEL_7:
      uint64_t v16 = 0LL;
      uint64_t v3 = operator new(0x28uLL);
      *uint64_t v3 = &off_10185B240;
      sub_100891A80((uint64_t)(v3 + 1), (uint64_t)v13);
      uint64_t v16 = v3;
      sub_10089073C(v1, (uint64_t)(v0 + 2), (uint64_t)v15);
      uint64_t v4 = v16;
      if (v16 == v15)
      {
        uint64_t v4 = v15;
        uint64_t v5 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_12;
        }
        uint64_t v5 = 5LL;
      }

      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_12:
      uint64_t v6 = v14;
      if (v14 == v13)
      {
        uint64_t v6 = v13;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_17:
      unint64_t v8 = v18;
      if (v18 == v17)
      {
        unint64_t v8 = v17;
        uint64_t v9 = 4LL;
        goto LABEL_21;
      }

      if (v18)
      {
        uint64_t v9 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }

      unsigned __int8 v0 = (void *)*v0;
      if (!v0) {
        return sub_100272DAC((uint64_t)v11);
      }
    }

    uint64_t v2 = (*(uint64_t (**)(void))(*v18 + 16LL))();
LABEL_5:
    uint64_t v14 = (_BYTE *)v2;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v11);
}

void sub_1008703C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
}

uint64_t sub_100870484(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B2C0;
      sub_100892064((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100870648( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_10087070C()
{
  unsigned __int8 v0 = v12;
  if (v12)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v17, (uint64_t)(v0 + 5));
      uint64_t v1 = qword_101999168;
      uint64_t v2 = (uint64_t)v18;
      if (!v18) {
        goto LABEL_5;
      }
      if (v18 != v17) {
        break;
      }
      uint64_t v14 = v13;
      (*(void (**)(void *, _BYTE *))(v17[0] + 24LL))(v17, v13);
LABEL_7:
      uint64_t v16 = 0LL;
      uint64_t v3 = operator new(0x28uLL);
      *uint64_t v3 = &off_10185B340;
      sub_100892A18((uint64_t)(v3 + 1), (uint64_t)v13);
      uint64_t v16 = v3;
      sub_10089073C(v1, (uint64_t)(v0 + 2), (uint64_t)v15);
      uint64_t v4 = v16;
      if (v16 == v15)
      {
        uint64_t v4 = v15;
        uint64_t v5 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_12;
        }
        uint64_t v5 = 5LL;
      }

      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_12:
      uint64_t v6 = v14;
      if (v14 == v13)
      {
        uint64_t v6 = v13;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_17:
      unint64_t v8 = v18;
      if (v18 == v17)
      {
        unint64_t v8 = v17;
        uint64_t v9 = 4LL;
        goto LABEL_21;
      }

      if (v18)
      {
        uint64_t v9 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }

      unsigned __int8 v0 = (void *)*v0;
      if (!v0) {
        return sub_100272DAC((uint64_t)v11);
      }
    }

    uint64_t v2 = (*(uint64_t (**)(void))(*v18 + 16LL))();
LABEL_5:
    uint64_t v14 = (_BYTE *)v2;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v11);
}

void sub_1008708B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
}

uint64_t sub_10087097C(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B3C0;
      sub_100271834((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100870B40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100870C04(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B440;
      sub_100893828((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100870DC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100870E8C(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B4C0;
      sub_1007F0C00((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100871050( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100871114(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B540;
      sub_1008945BC((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_1008712D8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_10087139C(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B620;
      sub_100894D0C((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100871560( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100871624(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B6A0;
      sub_1006BECE0((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_1008717E8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_1008718AC(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B720;
      sub_100895AE0((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100871A70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100871B34(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B7A0;
      sub_1008961FC((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100871CF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100871DBC(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B820;
      sub_10066CE14((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100871F80( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100872044(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B8A0;
      sub_100896FD0((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100872208( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_1008722CC(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B920;
      sub_1008976EC((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100872490( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100872554(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185B9A0;
      sub_1005C301C((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100872718( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_1008727DC(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BA20;
      sub_1008984C0((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_1008729A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100872A64(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BAA0;
      sub_10038EC4C((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100872C28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100872CEC(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BB20;
      sub_100899294((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100872EB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100872F74(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BBA0;
      sub_1008999B0((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100873138( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_1008731FC(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BC20;
      sub_10089A0CC((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_1008733C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100873484(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BCA0;
      sub_10064A988((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100873648( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_10087370C(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BD20;
      sub_10089AEA0((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_1008738D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100873994(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BDA0;
      sub_100747BD4((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100873B58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100873C1C(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BE20;
      sub_10070BCDC((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100873DE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100873EA4(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BEA0;
      sub_10089C32C((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100874068( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_10087412C(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BF20;
      sub_10089CA48((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_1008742F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_1008743B4(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185BFA0;
      sub_10089D164((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100874578( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_10087463C(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185C020;
      sub_10089D880((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100874800( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_1008748C4(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185C0A0;
      sub_10089DF9C((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100874A88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100874B4C(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185C120;
      sub_10089E6B8((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100874D10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_100874DD4(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185C1A0;
      sub_10074F57C((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100874F98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_10087505C(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185C220;
      sub_10089F48C((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_100875220( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t sub_1008752E4(char a1)
{
  uint64_t v2 = v14;
  if (v14)
  {
    while (1)
    {
      sub_10001A504((uint64_t)v20, (uint64_t)(v2 + 5));
      uint64_t v3 = qword_101999168;
      uint64_t v4 = (uint64_t)v21;
      if (!v21) {
        goto LABEL_5;
      }
      if (v21 != v20) {
        break;
      }
      uint64_t v16 = v15;
      (*(void (**)(void *, _BYTE *))(v20[0] + 24LL))(v20, v15);
LABEL_7:
      char v17 = a1;
      uint64_t v19 = 0LL;
      uint64_t v5 = operator new(0x30uLL);
      *(void *)uint64_t v5 = &off_10185C2A0;
      sub_10089FBA8((uint64_t)(v5 + 8), (uint64_t)v15);
      v5[40] = v17;
      uint64_t v19 = v5;
      sub_10089073C(v3, (uint64_t)(v2 + 2), (uint64_t)v18);
      uint64_t v6 = v19;
      if (v19 == v18)
      {
        uint64_t v6 = v18;
        uint64_t v7 = 4LL;
      }

      else
      {
        if (!v19) {
          goto LABEL_12;
        }
        uint64_t v7 = 5LL;
      }

      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
      unint64_t v8 = v16;
      if (v16 == v15)
      {
        unint64_t v8 = v15;
        uint64_t v9 = 4LL;
      }

      else
      {
        if (!v16) {
          goto LABEL_17;
        }
        uint64_t v9 = 5LL;
      }

      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
      uint64_t v10 = v21;
      if (v21 == v20)
      {
        uint64_t v10 = v20;
        uint64_t v11 = 4LL;
        goto LABEL_21;
      }

      if (v21)
      {
        uint64_t v11 = 5LL;
LABEL_21:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }

      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return sub_100272DAC((uint64_t)v13);
      }
    }

    uint64_t v4 = (*(uint64_t (**)(void))(*v21 + 16LL))();
LABEL_5:
    uint64_t v16 = (_BYTE *)v4;
    goto LABEL_7;
  }

  return sub_100272DAC((uint64_t)v13);
}

void sub_1008754A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
}

uint64_t *sub_10087556C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875614(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_10087562C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_1008756D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1008756EC(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875794(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1008757AC(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875854(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_10087586C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875914(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_10087592C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_1008759D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_1008759EC(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875A94(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100875AAC(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100875B6C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100875C2C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100875CEC(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100875DAC(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100875E6C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875F14(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100875F2C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100875FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_100875FEC(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16);
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  v9[0] = v7;
  v9[1] = v6;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  sub_1010DDBC0((void *)v7 + 2, a2);
  sub_100890C50((uint64_t)(v7 + 40), a3);
  char v10 = 1;
  *((void *)v7 + 1) = sub_10004B1A4(a1 + 24, (uint64_t)(v7 + 16));
  if ((sub_1008A0368(a1, v9[0]) & 1) != 0) {
    v9[0] = 0LL;
  }
  return sub_100890BD4((uint64_t *)v9);
}

void sub_100876094(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008760B0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a2[1];
  v8[0] = *a2;
  v8[1] = v3;
  if (v3)
  {
    uint64_t v4 = (unint64_t *)((char *)v3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  sub_10086DB30(v2, v8);
  if (v3)
  {
    uint64_t v6 = (unint64_t *)((char *)v3 + 8);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      (*(void (**)(CLConnectionMessage *))(*(void *)v3 + 16LL))(v3);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
    }
  }

void sub_10087613C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100876150(uint64_t a1)
{
  return CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
}

uint64_t sub_100876158(uint64_t a1)
{
  return *(unsigned int *)(a1 + 272);
}

uint64_t sub_100876160(uint64_t a1)
{
  return *(unsigned int *)(a1 + 264);
}

BOOL sub_100876168(uint64_t a1)
{
  return *(void *)(a1 + 264) == 0LL;
}

uint64_t sub_100876178(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t sub_100876180(_BYTE *a1, UInt8 *a2, uint64_t a3)
{
  v7[0] = sub_1008761C0(a1);
  v7[1] = v5;
  return sub_10100DFD4(a2, a3, (uint64_t)v7);
}

unint64_t sub_1008761C0(_BYTE *a1)
{
  uint64_t v2 = sub_1008AC424((uint64_t)a1);
  if (v2)
  {
    uint64_t v3 = v2;
    unsigned int v4 = sub_100DB7A30((uint64_t)v2);
    int v5 = *((unsigned __int8 *)v3 + 194) << 8;
    unint64_t v6 = v4;
  }

  else
  {
    int v5 = 0;
    unint64_t v6 = 0LL;
  }

  if (a1[277] || a1[278] || a1[279]) {
    int v7 = 0x10000;
  }
  else {
    int v7 = a1[280] << 16;
  }
  return (v7 | v5) & 0xFFFF00 | v6;
}

uint64_t sub_100876240(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v7 = *a3;
  if (*a3 == 11)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    char v17 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Got active change notification; updating requests}",
        buf,
        0x12u);
    }
  }

  else
  {
    if (v7 == 21)
    {
      CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a4 + 880), 16LL);
      if (!v8) {
        return sub_1002A5590(v29);
      }
      if (sub_1002AB370((uint64_t)v29, "kCLConnectionMessageVehicleHeadingKey", (uint64_t)v8))
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        __int16 v13 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = *(void *)(a1 + 48);
          uint64_t v15 = *(void *)(a4 + 888);
          uint64_t v16 = *(void *)(a4 + 880);
          *(_DWORD *)std::stringbuf::string_type buf = 138543875;
          *(void *)&uint8_t buf[4] = v14;
          *(_WORD *)&_BYTE buf[12] = 2050;
          *(void *)&buf[14] = v15;
          __int16 v37 = 2049;
          uint64_t v38 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Sending,vehicle heading,to client,%{public}@,time,%{public}.3lf,heading,%{private}.3lf",  buf,  0x20u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185AF60);
          }
          uint64_t v19 = *(void *)(a1 + 48);
          uint64_t v20 = *(void *)(a4 + 888);
          uint64_t v21 = *(void *)(a4 + 880);
          int v30 = 138543875;
          uint64_t v31 = v19;
          __int16 v32 = 2050;
          uint64_t v33 = v20;
          __int16 v34 = 2049;
          uint64_t v35 = v21;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "Sending,vehicle heading,to client,%{public}@,time,%{public}.3lf,heading,%{private}.3lf",  &v30,  32);
          uint64_t v23 = (char *)v22;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLoca tionProvider_Type::NotificationData &)",  "%s\n",  v22);
          if (v23 != buf) {
            free(v23);
          }
        }

        *(void *)std::stringbuf::string_type buf = sub_1002A59CC((uint64_t)v29);
        sub_100876864(a1, buf);
      }

      goto LABEL_12;
    }

    if (v7 == 20)
    {
      CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)(a4 + 848), 32LL);
      if (v8)
      {
        if (sub_1002AB370((uint64_t)v29, "kCLConnectionMessageVehicleSpeedKey", (uint64_t)v8))
        {
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185AF60);
          }
          uint64_t v9 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = *(void *)(a1 + 48);
            uint64_t v11 = *(void *)(a4 + 856);
            uint64_t v12 = *(void *)(a4 + 848);
            *(_DWORD *)std::stringbuf::string_type buf = 138543875;
            *(void *)&uint8_t buf[4] = v10;
            *(_WORD *)&_BYTE buf[12] = 2050;
            *(void *)&buf[14] = v11;
            __int16 v37 = 2049;
            uint64_t v38 = v12;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Sending,vehicle speed,to client,%{public}@,time,%{public}.3lf,speed,%{private}.3lf",  buf,  0x20u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10185AF60);
            }
            uint64_t v24 = *(void *)(a1 + 48);
            uint64_t v25 = *(void *)(a4 + 856);
            uint64_t v26 = *(void *)(a4 + 848);
            int v30 = 138543875;
            uint64_t v31 = v24;
            __int16 v32 = 2050;
            uint64_t v33 = v25;
            __int16 v34 = 2049;
            uint64_t v35 = v26;
            _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "Sending,vehicle speed,to client,%{public}@,time,%{public}.3lf,speed,%{private}.3lf",  &v30,  32);
            uint64_t v28 = (char *)v27;
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLo cationProvider_Type::NotificationData &)",  "%s\n",  v27);
            if (v28 != buf) {
              free(v28);
            }
          }

          *(void *)std::stringbuf::string_type buf = sub_1002A59CC((uint64_t)v29);
          sub_10087676C(a1, buf);
        }

void sub_10087673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10087676C(uint64_t a1, void *a2)
{
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100878064(a1, (uint64_t)&v13);
  int v5 = v14;
  if (v14)
  {
    unint64_t v6 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  CFDataRef v8 = v12;
  if (v12)
  {
    uint64_t v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_100876848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va1);
  sub_10000AE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100876864(uint64_t a1, void *a2)
{
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100878064(a1, (uint64_t)&v13);
  uint64_t v5 = v14;
  if (v14)
  {
    unint64_t v6 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  CFDataRef v8 = v12;
  if (v12)
  {
    uint64_t v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_100876940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va1);
  sub_10000AE14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10087695C(uint64_t a1, uint64_t a2)
{
  *(void *)std::stringbuf::string_type buf = sub_1002A59CC((uint64_t)v9);
  sub_100876B48(a1, buf);
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_10185AFA0);
  }
  unint64_t v4 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::stringbuf::string_type buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sent gyro bias estimation message", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10185AFA0);
    }
    v8[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  2LL,  "Sent gyro bias estimation message",  v8,  2);
    unint64_t v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::onGyroBiasEstimatorNotification(const CLMotionTypeGyroBiasAndVariance &)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  return sub_1002A5590(v9);
}

void sub_100876B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100876B48(uint64_t a1, void *a2)
{
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100878064(a1, (uint64_t)&v13);
  uint64_t v5 = v14;
  if (v14)
  {
    unint64_t v6 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  CFDataRef v8 = v12;
  if (v12)
  {
    uint64_t v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_100876C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va1);
  sub_10000AE14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100876C40(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10185AFC0);
  }
  unint64_t v7 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)std::stringbuf::string_type buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received GMM notification %d", buf, 8u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10185AFC0);
    }
    int v10 = *a3;
    v14[0] = 67109120;
    v14[1] = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Received GMM notification %d",  v14);
    uint64_t v12 = (uint8_t *)v11;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::onGmmNotification(int, const CLGeomagneticModelProvider_Type::Notification &, const CLGeomagn eticModelProvider_Type::NotificationData &)",  "%s\n",  v11);
    if (v12 != buf) {
      free(v12);
    }
  }

  if (!*a3)
  {
    sub_1009AEFF8(a4, (uint64_t)v13);
    *(void *)std::stringbuf::string_type buf = sub_1002A59CC((uint64_t)v13);
    sub_100876E60(a1, buf);
  }

  return sub_1002A5590(v13);
}

void sub_100876E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100876E60(uint64_t a1, void *a2)
{
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100878064(a1, (uint64_t)&v13);
  uint64_t v5 = v14;
  if (v14)
  {
    unint64_t v6 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  int v8 = v12;
  if (v12)
  {
    uint64_t v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_100876F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va1);
  sub_10000AE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100876F58(uint64_t a1, uint64_t a2, int *a3, UInt8 *a4)
{
  if (*a3)
  {
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10185AFE0);
    }
    uint64_t v5 = (os_log_s *)qword_1019345B8;
    if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a3;
      *(_DWORD *)std::stringbuf::string_type buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Unexpected notification in onPressureBias,notification,%d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345B0 != -1) {
        dispatch_once(&qword_1019345B0, &stru_10185AFE0);
      }
      int v7 = *a3;
      LODWORD(v12[0]) = 67109120;
      HIDWORD(v12[0]) = v7;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  16LL,  "Unexpected notification in onPressureBias,notification,%d",  v12);
      uint64_t v9 = (uint8_t *)v8;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::N otificationData &)",  "%s\n",  v8);
      if (v9 != buf) {
        free(v9);
      }
    }
  }

  else
  {
    sub_1002A5370(buf);
    sub_1009AF2B0(a4, (uint64_t)buf);
    v12[0] = sub_1002A59CC((uint64_t)buf);
    sub_10087716C(a1, v12);
    sub_1002A5590(buf);
  }

void sub_10087714C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_10087716C(uint64_t a1, void *a2)
{
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100878064(a1, (uint64_t)&v13);
  uint64_t v5 = v14;
  if (v14)
  {
    int v6 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  int v8 = v12;
  if (v12)
  {
    uint64_t v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_100877248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va1);
  sub_10000AE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100877264(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  BOOL v4 = sub_1005D0E78((int)&v6);
  uint64_t v5 = *a2;
  uint64_t v7 = CMDeviceHasOriginalBackCamera;
  int v8 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4);
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL);
  CLConnectionMessage::sendReply(v5);
}

void sub_10087731C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_100877344(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  BOOL v4 = sub_1005D19D0((int)&v8);
  uint64_t v5 = *a2;
  if (v4)
  {
    uint64_t v11 = CMCameraVcmActuatorId;
    uint64_t v12 = v4;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL);
    CLConnectionMessage::sendReply(v5);
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v9 = CMErrorMessage;
    unint64_t v10 = &off_1018D3AE8;
    CLConnectionMessage::sendReply( v5,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100877450( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_100877494(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  id v4 = sub_1005D1D74((int)&v8);
  uint64_t v5 = *a2;
  if (v4)
  {
    uint64_t v11 = CMCompassCalibrationData;
    id v12 = v4;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL);
    CLConnectionMessage::sendReply(v5);
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v9 = CMErrorMessage;
    unint64_t v10 = &off_1018D3AE8;
    CLConnectionMessage::sendReply( v5,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1008775A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1008775E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 264);
  if (v3)
  {
    uint64_t isEntitled = CLConnection::isEntitled(v3, a2);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    char v6 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
    {
      char v7 = "not entitled";
      uint64_t v8 = *(void *)(a1 + 48);
      if ((_DWORD)isEntitled) {
        char v7 = "entitled";
      }
      else {
        uint64_t v9 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::stringbuf::string_type buf = 138412802;
      *(void *)uint64_t v25 = v8;
      *(_WORD *)&v25[8] = 2080;
      *(void *)&v25[10] = v7;
      __int16 v26 = 2080;
      uint64_t v27 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%@ is %s for %s", buf, 0x20u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      unint64_t v10 = "not entitled";
      uint64_t v11 = *(void *)(a1 + 48);
      if ((_DWORD)isEntitled) {
        unint64_t v10 = "entitled";
      }
      else {
        id v12 = (uint64_t *)*a2;
      }
      int v18 = 138412802;
      uint64_t v19 = v11;
      __int16 v20 = 2080;
      uint64_t v21 = v10;
      __int16 v22 = 2080;
      uint64_t v23 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "%@ is %s for %s",  &v18,  32);
      uint64_t v14 = (uint8_t *)v13;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLDaemonClient::isEntitled(const std::string &)", "%s\n", v13);
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  else
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v15 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289026;
      *(_DWORD *)uint64_t v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(void *)&v25[6] = "";
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:The underlying fConnection in CLDaemonClient is no longer available}",  buf,  0x12u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
    }

    uint64_t v16 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289026;
      *(_DWORD *)uint64_t v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(void *)&v25[6] = "";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "The underlying fConnection in CLDaemonClient is no longer available",  "{msg%{public}.0s:The underlying fConnection in CLDaemonClient is no longer available}",  buf,  0x12u);
    }

    return 0LL;
  }

  return isEntitled;
}

id sub_10087793C(uint64_t a1, char a2)
{
  return [*(id *)(a1 + 112) isAuthorizedForServiceTypeMask:1 << a2];
}

uint64_t sub_100877950(uint64_t a1, void *a2)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  id v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 112);
    *(_DWORD *)std::stringbuf::string_type buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v5;
    __int16 v54 = 2114;
    uint64_t v55 = v6;
    __int16 v56 = 2114;
    int v57 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthContext Set authorization context, ckp:%{public, location:escape_only}@, prevA uthContext:%{public, location:escape_only}@, newAuthContext:%{public, location:escape_only}@}",  buf,  0x30u);
  }

  id v7 = *(id *)(a1 + 112);
  id v8 = a2;
  *(void *)(a1 + 112) = v8;
  sub_100554050(*(void *)(a1 + 16), *(void *)(a1 + 48), *(void *)(a1 + 160), v8);
  uint64_t result = (uint64_t)[v7 isEqual:*(void *)(a1 + 112)];
  if ((result & 1) == 0)
  {
    unsigned int v11 = [*(id *)(a1 + 112) transientAwareRegistrationResult];
    if (v11 <= 8)
    {
      if (((1 << v11) & 0x1C) != 0)
      {
        sub_100878440(a1);
        int v27 = 0;
        uint64_t v28 = a1;
LABEL_73:
        sub_10054B118(*(void *)(a1 + 16), *(void *)(a1 + 48), v28);
        return sub_10054B0AC(*(void *)(a1 + 16), a1, v27);
      }

      if (((1 << v11) & 0x103) != 0)
      {
        *(void *)&__int128 v47 = &v47;
        *((void *)&v47 + 1) = &v47;
        uint64_t v48 = 0LL;
        uint64_t v12 = a1 + 128;
        sub_1008AC594(&v47, (uint64_t *)(a1 + 128));
        for (uint64_t j = *((void *)&v47 + 1); (__int128 *)j != &v47; uint64_t j = *(void *)(j + 8))
        {
          uint64_t v14 = CLConnectionMessage::name(*(CLConnectionMessage **)(j + 16));
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, v14))
          {
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10185AF60);
            }
            uint64_t v15 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v16 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)(j + 16));
              else {
                char v17 = (uint64_t *)*v16;
              }
              *(_DWORD *)std::stringbuf::string_type buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:client authorized; sending out cached message, msg:%{public, location:escape_only}s}",
                buf,
                0x1Cu);
            }

            int v18 = *(std::__shared_weak_count **)(j + 24);
            uint64_t v44 = *(void *)(j + 16);
            uint64_t v45 = v18;
            if (v18)
            {
              p_shared_owners = (unint64_t *)&v18->__shared_owners_;
              do
                unint64_t v20 = __ldxr(p_shared_owners);
              while (__stxr(v20 + 1, p_shared_owners));
            }

            __int128 v46 = *(_OWORD *)(j + 32);
            sub_100878064(a1, (uint64_t)&v44);
            uint64_t v21 = v45;
            if (v45)
            {
              __int16 v22 = (unint64_t *)&v45->__shared_owners_;
              do
                unint64_t v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
          }

          else
          {
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10185AF60);
            }
            uint64_t v24 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v25 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)(j + 16));
              else {
                __int16 v26 = (uint64_t *)*v25;
              }
              *(_DWORD *)std::stringbuf::string_type buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2082;
              *(void *)&buf[20] = v26;
              _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:client authorized but no longer interested in cached message; discarding cache,"
                " msg:%{public, location:escape_only}s}",
                buf,
                0x1Cu);
            }
          }
        }

        if (*(void *)(a1 + 144))
        {
          sub_1010DDBC0(&v43, "{ ");
          for (uint64_t k = *(void *)(a1 + 136); k != v12; uint64_t k = *(void *)(k + 8))
          {
            uint64_t v30 = CLConnectionMessage::name(*(CLConnectionMessage **)(k + 16));
            uint64_t v31 = (char *)v30;
            else {
              size_t v32 = *(void *)(v30 + 8);
            }
            sub_1000392EC((uint64_t)buf, v32 + 1);
            if (buf[23] >= 0) {
              uint64_t v33 = buf;
            }
            else {
              uint64_t v33 = *(_BYTE **)buf;
            }
            if (v32)
            {
              if (v31[23] >= 0) {
                __int16 v34 = v31;
              }
              else {
                __int16 v34 = *(char **)v31;
              }
              memmove(v33, v34, v32);
            }

            *(_WORD *)&v33[v32] = 32;
            if (buf[23] >= 0) {
              uint64_t v35 = buf;
            }
            else {
              uint64_t v35 = *(const std::string::value_type **)buf;
            }
            if (buf[23] >= 0) {
              std::string::size_type v36 = buf[23];
            }
            else {
              std::string::size_type v36 = *(void *)&buf[8];
            }
            std::string::append(&v43, v35, v36);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }

          std::string::append(&v43, "}");
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_10185AF80);
          }
          __int16 v37 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v38 = *(void *)(a1 + 48);
            __int16 v39 = &v43;
            if ((v43.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              __int16 v39 = (std::string *)v43.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::stringbuf::string_type buf = 138412546;
            *(void *)&uint8_t buf[4] = v38;
            *(_WORD *)&_BYTE buf[12] = 2080;
            *(void *)&buf[14] = v39;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "#Warning %@ is still not authorized for %s, dropping",  buf,  0x16u);
          }

          if (sub_1002921D0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_101934980 != -1) {
              dispatch_once(&qword_101934980, &stru_10185AF80);
            }
            uint64_t v40 = *(void *)(a1 + 48);
            __int16 v41 = &v43;
            if ((v43.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              __int16 v41 = (std::string *)v43.__r_.__value_.__r.__words[0];
            }
            int v49 = 138412546;
            uint64_t v50 = v40;
            __int16 v51 = 2080;
            uint64_t v52 = v41;
            uint64_t v42 = (char *)_os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning %@ is still not authorized for %s, dropping",  &v49,  22);
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::setAuthorizationContext(CLClientManagerAuthorizationContext *)",  "%s\n",  v42);
            if (v42 != buf) {
              free(v42);
            }
          }

          sub_100890314((uint64_t *)(a1 + 128));
        }

        sub_100890314((uint64_t *)&v47);
      }

      else if (v11 == 5 && [*(id *)(a1 + 112) registrationResult] == 5)
      {
        sub_10124CEA0();
        __break(1u);
      }
    }

    sub_100878440(a1);
    uint64_t v28 = 0LL;
    int v27 = 1;
    goto LABEL_73;
  }

  return result;
}

void sub_100877FF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_100890314(&a23);
  _Unwind_Resume(a1);
}

void sub_100878064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, v4))
  {
    uint64_t v5 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (objc_msgSend( *(id *)(a1 + 112),  "isNonProvisionallyAuthorizedForServiceTypeMask:",  sub_10087902C(a1, v5)))
    {
      uint64_t v6 = *(void *)(a1 + 264);
      id v7 = *(std::__shared_weak_count **)(a2 + 8);
      int v29 = *(CLConnectionMessage **)a2;
      uint64_t v30 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          unint64_t v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }

      CLConnection::sendMessage(v6, &v29);
      unint64_t v10 = v30;
      if (v30)
      {
        unsigned int v11 = (unint64_t *)&v30->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }

      uint64_t v13 = *(void *)(a2 + 16);
      if ((v13 & 0x7F) != 0)
      {
        sub_100878E80((uint64_t *)a1, v13, *(double *)(a2 + 24));
        uint64_t v14 = *(void *)(a2 + 16) & 0x14LL;
        if (!v14)
        {
          if (qword_101934980 != -1) {
            dispatch_once(&qword_101934980, &stru_10185AF80);
          }
          uint64_t v15 = (os_log_s *)qword_101934988;
          if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
          {
            uint64_t v16 = *(uint64_t **)(a1 + 48);
            *(_DWORD *)std::stringbuf::string_type buf = 68289282;
            int v32 = 0;
            __int16 v33 = 2082;
            __int16 v34 = "";
            __int16 v35 = 2114;
            std::string::size_type v36 = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:markReceivingLocationInformation, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
          }
        }

        uint64_t v17 = *(void *)(a1 + 16);
        else {
          id v18 = *(id *)(a1 + 48);
        }
        __int16 v26 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        int v27 = *((char *)v26 + 23);
        if (v27 < 0)
        {
          if (v26[1] != 39LL)
          {
LABEL_41:
            BOOL v28 = 1LL;
            goto LABEL_42;
          }

          __int16 v26 = (void *)*v26;
        }

        else if (v27 != 39)
        {
          goto LABEL_41;
        }

        BOOL v28 = memcmp(v26, "kCLConnectionMessageCompensatedLocation", 0x27uLL) != 0;
LABEL_42:
        sub_10055AF98(v17, v18, v28, v14 != 0);
      }
    }

    else
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      unint64_t v23 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        else {
          uint64_t v25 = (uint64_t *)*v24;
        }
        *(_DWORD *)std::stringbuf::string_type buf = 68289282;
        int v32 = 0;
        __int16 v33 = 2082;
        __int16 v34 = "";
        __int16 v35 = 2082;
        std::string::size_type v36 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Client not authorized for message, message:%{public, location:escape_only}s}",  buf,  0x1Cu);
      }

      sub_100879458((__n128 **)(a1 + 128), (__n128 *)a2);
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v19 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
    {
      unint64_t v20 = *(uint64_t **)(a1 + 48);
      uint64_t v21 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
      else {
        __int16 v22 = (uint64_t *)*v21;
      }
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v32 = 0;
      __int16 v33 = 2082;
      __int16 v34 = "";
      __int16 v35 = 2114;
      std::string::size_type v36 = v20;
      __int16 v37 = 2082;
      uint64_t v38 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#Warning Client not interested in this message, ClientKeyPath:%{public, location:es cape_only}@, message:%{public, location:escape_only}s}",  buf,  0x26u);
    }
  }

void sub_100878424( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100878440(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  LODWORD(v7) = [*(id *)(a1 + 112) transientAwareRegistrationResult];
  uint64_t v3 = sub_100571348(v2, (int *)&v7);
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v4 = v3;
    unsigned int v5 = [*(id *)(a1 + 112) isAuthorizedForServiceType:12] ^ 1;
    if ((_DWORD)v4) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0LL;
    }
    v8[0] = @"kCLConnectionMessageStatusKey";
    v9[0] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v4);
    v8[1] = @"kCLConnectionMessageCompensationKey";
    v9[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v6);
    v8[2] = @"kCLConnectionMessageAuthorizedForWidgetUpdatesKey";
    void v9[2] = +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 112) authorizedForWidgetUpdates]);
    id v7 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  3LL);
    sub_1008789E4(a1, &v7);
  }

uint64_t sub_100878564(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

void sub_10087856C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x248uLL);
  sub_100DB3840( v4,  a1,  *(void *)(a1 + 24),  *(void *)(a1 + 112),  *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 204),  *(unsigned int *)(a1 + 272));
  *a2 = v4;
  sub_100DB7458((uint64_t)v4, *(unsigned __int8 *)(a1 + 120));
}

void sub_1008785CC(_Unwind_Exception *a1)
{
  *uint64_t v2 = 0LL;
  (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  _Unwind_Resume(a1);
}

void sub_1008785FC(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 12sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = a2;
  uint64_t v3 = sub_1008AC424(a1);
  if (v3) {
    sub_100DB7458((uint64_t)v3, *(unsigned __int8 *)(a1 + 120));
  }
}

void sub_100878634(uint64_t a1)
{
  if (sub_100231608())
  {
    sub_1004F2598();
    BOOL v2 = sub_1001B9A1C() ? *(_BYTE *)(a1 + 193) != 0 : *(void *)(a1 + 96) == 0LL;
    if (v2 && &_SBSCopyBundleInfoValueForKeyAndProcessID != 0LL)
    {
      uint64_t v4 = (const __CFArray *)SBSCopyBundleInfoValueForKeyAndProcessID( @"UIBackgroundModes",  *(unsigned int *)(a1 + 272));
      if (v4)
      {
        unsigned int v5 = v4;
        CFTypeID v6 = CFGetTypeID(v4);
        if (v6 == CFArrayGetTypeID())
        {
          v21.length = CFArrayGetCount(v5);
          v21.location = 0LL;
          if (CFArrayGetFirstIndexOfValue(v5, v21, @"location") != -1)
          {
            *(_BYTE *)(a1 + 204) = 1;
            if (qword_101934970 != -1) {
              dispatch_once(&qword_101934970, &stru_10185AF60);
            }
            id v7 = (os_log_s *)qword_101934978;
            if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v8 = *(void *)(a1 + 48);
              *(_DWORD *)std::stringbuf::string_type buf = 138412290;
              uint64_t v20 = v8;
              _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "client '%@' supports background location",  buf,  0xCu);
            }

            if (sub_1002921D0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_101934970 != -1) {
                dispatch_once(&qword_101934970, &stru_10185AF60);
              }
              uint64_t v14 = *(void *)(a1 + 48);
              int v17 = 138412290;
              uint64_t v18 = v14;
              _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "client '%@' supports background location",  &v17,  12);
              uint64_t v16 = (uint8_t *)v15;
              sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDaemonClient::assessClientCapabilities()", "%s\n", v15);
              if (v16 != buf) {
                free(v16);
              }
            }
          }
        }

        CFRelease(v5);
      }

      else
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        unint64_t v9 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG))
        {
          int v10 = *(_DWORD *)(a1 + 272);
          *(_DWORD *)std::stringbuf::string_type buf = 67109120;
          LODWORD(v2sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "PID %u either doesn't specify UIBackgroundModes, or SB timed out fetching them",  buf,  8u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185AF60);
          }
          int v11 = *(_DWORD *)(a1 + 272);
          int v17 = 67109120;
          LODWORD(v18) = v11;
          _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  2LL,  "PID %u either doesn't specify UIBackgroundModes, or SB timed out fetching them",  &v17);
          uint64_t v13 = (uint8_t *)v12;
          sub_10029211C("Generic", 1LL, 0, 2LL, "void CLDaemonClient::assessClientCapabilities()", "%s\n", v12);
          if (v13 != buf) {
            free(v13);
          }
        }
      }
    }
  }

void sub_1008789E4(uint64_t a1, void *a2)
{
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100878064(a1, (uint64_t)&v13);
  unsigned int v5 = v14;
  if (v14)
  {
    CFTypeID v6 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  uint64_t v8 = v12;
  if (v12)
  {
    unint64_t v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_100878AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va1);
  sub_10000AE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100878ADC(void *a1)
{
  if (((*(uint64_t (**)(void *, uint8_t *))(*a1 + 48LL))(a1, buf) & 1) != 0)
  {
    int v2 = 1;
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageSignificantLocationChange");
    int v2 = (*(uint64_t (**)(void *, void **))(*a1 + 48LL))(a1, __p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }

  if (SBYTE3(v13) < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }

  else if (!v2)
  {
    return;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185AF80);
  }
  uint64_t v3 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = a1[6];
    *(_DWORD *)std::stringbuf::string_type buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:Sending denied error message, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  unint64_t v7 = @"kCLConnectionMessageErrorKey";
  uint64_t v8 = &off_1018D3B00;
  *(void *)std::stringbuf::string_type buf = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL);
  sub_100878CC4((uint64_t)a1, buf);
}

void sub_100878C84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100878CC4(uint64_t a1, void *a2)
{
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100878064(a1, (uint64_t)&v13);
  uint64_t v5 = v14;
  if (v14)
  {
    char v6 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  uint64_t v8 = v12;
  if (v12)
  {
    unint64_t v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_100878DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va1);
  sub_10000AE14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100878DBC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 368);
}

uint64_t sub_100878DC4(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 369);
  *(_BYTE *)(a1 + 369) = 0;
  return v1;
}

uint64_t sub_100878DD4(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 370);
  *(_BYTE *)(a1 + 37sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0;
  return v1;
}

double sub_100878DE4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  unint64_t v4 = sub_1008AC424(a1);
  if (v4)
  {
    sub_100DB78A8((uint64_t)v4, (uint64_t)&v9);
    __int128 v5 = v10;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v11;
  }

  char v6 = sub_1008AC608(a1);
  if (v6)
  {
    sub_10092EB14((uint64_t)v6, (uint64_t)&v9);
    if (*(_BYTE *)(a2 + 32))
    {
      if (v11) {
        sub_100FE3EF4((double *)a2, (double *)&v9);
      }
    }

    else
    {
      double result = *(double *)&v9;
      __int128 v8 = v10;
      *(_OWORD *)a2 = v9;
      *(_OWORD *)(a2 + 16) = v8;
      *(_BYTE *)(a2 + 32) = v11;
    }
  }

  return result;
}

void sub_100878E80(uint64_t *a1, uint64_t a2, double a3)
{
  if ((a2 & 0x14) == 0) {
    return;
  }
  char v4 = a2;
  uint64_t v6 = a1[8];
  uint64_t v7 = v6 & a2;
  if ((v6 & a2) != 0)
  {
    if ((a2 & 0x10) == 0) {
      goto LABEL_4;
    }
  }

  else
  {
    a1[8] = v6 | a2;
    if ((a2 & 0x10) == 0)
    {
LABEL_4:
      if ((a2 & 4) == 0) {
        return;
      }
      goto LABEL_11;
    }
  }

  uint64_t v8 = a1[2];
  else {
    id v9 = (id)a1[6];
  }
  sub_10054FF68(v8, (uint64_t)v9, 4LL, v7 == 0, a3);
  if ((v4 & 4) != 0)
  {
LABEL_11:
    uint64_t v10 = a1[2];
    else {
      id v11 = (id)a1[6];
    }
    sub_10054FF68(v10, (uint64_t)v11, 2LL, v7 == 0, a3);
  }

void sub_100878F74(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[8];
  if ((v2 & a2) != 0)
  {
    char v3 = a2;
    a1[8] = v2 & ~a2;
    if ((a2 & 0x10) != 0)
    {
      uint64_t v5 = a1[2];
      else {
        id v6 = (id)a1[6];
      }
      sub_100550CAC(v5, (uint64_t)v6, 4LL);
    }

    if ((v3 & 4) != 0)
    {
      uint64_t v7 = a1[2];
      else {
        id v8 = (id)a1[6];
      }
      sub_100550CAC(v7, (uint64_t)v8, 2LL);
    }
  }

uint64_t sub_10087902C(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 23);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    uint64_t v5 = (uint64_t *)a2;
    switch(*(_BYTE *)(a2 + 23))
    {
      case 0x1B:
        goto LABEL_78;
      case 0x1C:
        if (*(void *)a2 != 0x656E6E6F434C436BLL
          || *(void *)(a2 + 8) != 0x73654D6E6F697463LL
          || *(void *)(a2 + 16) != 0x61636F4C65676173LL
          || *(_DWORD *)(a2 + 24) != 1852795252)
        {
          goto LABEL_88;
        }

        goto LABEL_41;
      case 0x1D:
      case 0x1E:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
        goto LABEL_88;
      case 0x1F:
        goto LABEL_47;
      case 0x24:
        goto LABEL_43;
      default:
        if (v4 == 39
          && (!memcmp((const void *)a2, "kCLConnectionMessageCompensatedLocation", 0x27uLL)
           || !memcmp((const void *)a2, "kCLConnectionMessageLocationUnavailable", 0x27uLL)))
        {
          goto LABEL_41;
        }

        goto LABEL_88;
    }
  }

  uint64_t v9 = *(void *)(a2 + 8);
  if (v9 == 28)
  {
    BOOL v10 = **(void **)a2 == 0x656E6E6F434C436BLL && *(void *)(*(void *)a2 + 8LL) == 0x73654D6E6F697463LL;
    BOOL v11 = v10 && *(void *)(*(void *)a2 + 16LL) == 0x61636F4C65676173LL;
    if (v11 && *(_DWORD *)(*(void *)a2 + 24LL) == 1852795252) {
      goto LABEL_41;
    }
  }

  if (v9 != 39) {
    goto LABEL_35;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9 != 39)
  {
LABEL_35:
    if (v9 != 36) {
      goto LABEL_64;
    }
LABEL_63:
    uint64_t v9 = *(void *)(a2 + 8);
LABEL_64:
    if (v9 != 31)
    {
LABEL_76:
      if (v9 != 27) {
        goto LABEL_88;
      }
      uint64_t v5 = *(uint64_t **)a2;
LABEL_78:
      uint64_t v20 = *v5;
      uint64_t v21 = v5[1];
      uint64_t v22 = v5[2];
      uint64_t v23 = *(uint64_t *)((char *)v5 + 19);
      if (v20 == 0x656E6E6F434C436BLL
        && v21 == 0x73654D6E6F697463LL
        && v22 == 0x676E615265676173LL
        && v23 == 0x676E69676E615265LL)
      {
        return 4LL;
      }

      goto LABEL_88;
    }

    if (**(void **)a2 != 0x656E6E6F434C436BLL
      || *(void *)(*(void *)a2 + 8LL) != 0x73654D6E6F697463LL
      || *(void *)(*(void *)a2 + 16LL) != 0x6967655265676173LL
      || *(void *)(*(void *)a2 + 23LL) != 0x65746174536E6F69LL)
    {
LABEL_75:
      uint64_t v9 = *(void *)(a2 + 8);
      goto LABEL_76;
    }

    return 3LL;
  }

  if (!memcmp(*(const void **)a2, "kCLConnectionMessageLocationUnavailable", 0x27uLL))
  {
LABEL_41:
    if ((sub_1004F76B8() & 1) != 0) {
      return 16LL;
    }
    return 32LL;
  }

  if ((v4 & 0x80) != 0) {
    goto LABEL_35;
  }
  uint64_t v5 = (uint64_t *)a2;
  if (v4 == 27) {
    goto LABEL_78;
  }
  if (v4 == 31) {
    goto LABEL_47;
  }
  if (v4 != 36) {
    goto LABEL_88;
  }
LABEL_43:
  if ((v4 & 0x80) != 0) {
    goto LABEL_63;
  }
  uint64_t v5 = (uint64_t *)a2;
  if (v4 == 27) {
    goto LABEL_78;
  }
  if (v4 != 31) {
    goto LABEL_88;
  }
LABEL_47:
  if (*(void *)a2 == 0x656E6E6F434C436BLL
    && *(void *)(a2 + 8) == 0x73654D6E6F697463LL
    && *(void *)(a2 + 16) == 0x6967655265676173LL
    && *(void *)(a2 + 23) == 0x65746174536E6F69LL)
  {
    return 3LL;
  }

  if ((v4 & 0x80) != 0) {
    goto LABEL_75;
  }
  uint64_t v5 = (uint64_t *)a2;
  if (v4 == 27) {
    goto LABEL_78;
  }
LABEL_88:
  if (sub_10088FAF0((void *)a2, "kCLConnectionMessageSignificantLocationChange")) {
    return 2048LL;
  }
  if (sub_10088FAF0((void *)a2, "kCLConnectionMessageSignificantLocationVisit")
    || sub_10088FAF0((void *)a2, "kCLConnectionMessageSignificantLocationVisitState"))
  {
    return 64LL;
  }

  if (sub_10088FAF0((void *)a2, "kCLConnectionMessageTranscriptFetch")) {
    return 65552LL;
  }
  return 0LL;
}

__n128 sub_100879458(__n128 **a1, __n128 *a2)
{
  int v4 = (__n128 *)operator new(0x30uLL);
  unint64_t v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5)
  {
    id v6 = (unint64_t *)(v5 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  __n128 result = a2[1];
  v4[2] = result;
  unint64_t v9 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(void *)(v9 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

void sub_1008794C4(uint64_t a1, unint64_t a2)
{
}

void sub_1008794D8(uint64_t a1, uint64_t a2)
{
}

id sub_1008794E4(uint64_t a1)
{
  return sub_10054B118(*(void *)(a1 + 16), *(void *)(a1 + 48), 0LL);
}

void sub_1008794F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void sub_100879500( uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  std::string __p = *a3;
  a3->__r_.__value_.__l.__size_ = 0LL;
  a3->__r_.__value_.__l.__cap_ = 0LL;
  a3->__r_.__value_.__r.__words[0] = 0LL;
  sub_10054C948(v5, a2, &__p, a4, a5);
}

void sub_100879554( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100879570(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 371);
}

uint64_t sub_100879578(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 194);
}

uint64_t sub_100879580(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 91);
}

id sub_100879588(uint64_t a1)
{
  id v1 = sub_100552424(*(void *)(a1 + 16), *(void *)(a1 + 48));
  return _[v1 stringForKey:@"PlatformSpecificBundleId" defaultValue:0];
}

uint64_t sub_1008795B8(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t sub_1008795C0(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  BOOL v17 = 0;
  uint64_t v5 = *(void **)(a1 + 48);
  unsigned int v6 = sub_10057D4D0(*(void *)(a1 + 16), (uint64_t)v5);
  if (!a3) {
    return 0LL;
  }
  unsigned int v7 = v6;
  uint64_t v8 = sub_1002F8DDC();
  char v9 = sub_1002A6FD4(v8, (uint64_t)a3, &v17);
  uint64_t result = 0LL;
  if (v17) {
    char v9 = 1;
  }
  if ((v9 & 1) == 0 && ((v7 ^ 1) & 1) == 0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    BOOL v11 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      int v19 = 0;
      __int16 v20 = 2082;
      uint64_t v21 = "";
      __int16 v22 = 2114;
      uint64_t v23 = v5;
      __int16 v24 = 2114;
      uint64_t v25 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Resetting auth and updating daemon cache, ckp:%{public, location:escape_only}@, d aemonCacheKey:%{public, location:escape_only}@}",  buf,  0x26u);
    }

    uint64_t v12 = *(void *)(a1 + 16);
    sub_1010DDBC0(__p, "ClientRemoved");
    sub_10054BFD4(v12, v5, 1, (uint64_t *)__p);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = sub_1002F8DDC();
    buf[0] = 1;
    sub_1002AB464(v13, a3, buf);
    uint64_t v14 = sub_1002F8DDC();
    (*(void (**)(uint64_t))(*(void *)v14 + 944LL))(v14);
    return 1LL;
  }

  return result;
}

void sub_100879774( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100879798(uint64_t a1)
{
  id result = objc_msgSend( objc_msgSend(*(id *)(a1 + 48), "bundlePath"),  "isEqual:",  @"/System/Library/LocationBundles/AppleWatchFaces.bundle");
  if ((_DWORD)result)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    char v3 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 68289026;
      v5[1] = 0;
      __int16 v6 = 2082;
      unsigned int v7 = "";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Resetting watch faces auth on Apple Watch Ultra}",  (uint8_t *)v5,  0x12u);
    }

    return (id)sub_1008795C0(a1, v4, @"AppleWatchUltraWatchFacesAuthReset");
  }

  return result;
}

void sub_1008798B0(uint64_t a1, uint64_t a2)
{
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185AF80);
  }
  uint64_t v4 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 272);
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)std::stringbuf::string_type buf = 68289538;
    int v18 = 0;
    __int16 v19 = 2082;
    __int16 v20 = "";
    __int16 v21 = 1026;
    int v22 = v5;
    __int16 v23 = 2114;
    uint64_t v24 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning MessageRegistration received by daemon client after first message, ClientPid :%{public}d, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x22u);
  }

  unsigned int v7 = *(CLConnection **)(a1 + 264);
  CLConnection::pause(v7);
  *(void *)(a1 + 264) = 0LL;
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v15 = *(CLConnectionMessage **)a2;
  char v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  sub_100544A24(v8, v7, &v15);
  uint64_t v12 = v16;
  if (v16)
  {
    uint64_t v13 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_100879A30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100879A4C(uint64_t a1, CFStringRef key)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(__CFBundle **)(a1 + 40);
  if (v4)
  {
    if (CFBundleGetValueForInfoDictionaryKey(v4, key)) {
      return 1LL;
    }
    if (*(void *)(a1 + 40))
    {
      uint64_t v6 = sub_10059CEEC();
      unsigned int v7 = sub_10059D310(v6, *(__CFBundle **)(a1 + 40), key, 0);
      if (v7)
      {
        CFRelease(v7);
        return 1LL;
      }
    }
  }

  if (!&_SBSCopyBundleInfoValueForKeyAndProcessID) {
    return 0LL;
  }
  uint64_t v8 = (const void *)SBSCopyBundleInfoValueForKeyAndProcessID(key, *(unsigned int *)(v5 + 272));
  if (!v8) {
    return 0LL;
  }
  CFRelease(v8);
  return !*(_BYTE *)(a1 + 48);
}

void sub_100879AE4(uint64_t a1, void *a2)
{
  uint64_t v13 = v11;
  unint64_t v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  sub_100878064(a1, (uint64_t)&v13);
  uint64_t v5 = v14;
  if (v14)
  {
    uint64_t v6 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  uint64_t v8 = v12;
  if (v12)
  {
    char v9 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

void sub_100879BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_10000AE14((uint64_t)va1);
  sub_10000AE14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100879BDC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1 + 328;
  *(void *)std::stringbuf::string_type buf = &v33;
  uint64_t v5 = sub_100891598(a1 + 328, (uint64_t *)&v33, (uint64_t)&unk_1012CF090, (uint64_t **)buf);
  uint64_t v6 = (const void *)v5[3];
  unint64_t v7 = (std::__shared_weak_count *)v5[4];
  uint64_t v34 = (uint64_t)v6;
  __int16 v35 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  if (v6)
  {
    if (!v10)
    {
      sub_10124D184( (uint64_t)a2,  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v29,  v30,  v31,  v32,  (uint64_t)v33,  v34,  (uint64_t)v35,  v36,  *(uint64_t *)buf,  *(uint64_t *)v38,  *(uint64_t *)&v38[8],  *(uint64_t *)&v38[16],  *(uint64_t *)&v38[24],  v39,  v40,  v41);
      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h",  443,  "getOrCreatePersistentSubscription");
      goto LABEL_26;
    }

    *a2 = (uint64_t)v10;
    a2[1] = (uint64_t)v7;
    if (v7)
    {
      int v18 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }

    if (v10[248]) {
      goto LABEL_18;
    }
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    __int16 v20 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 48);
      *(_DWORD *)std::stringbuf::string_type buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v38 = 2082;
      *(void *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2114;
      *(void *)&v38[12] = v21;
      *(_WORD *)&v38[20] = 2082;
      *(void *)&v38[22] = (unint64_t)"29CLVisitMonitoringSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Invalid persistent subscription detected... getting a fresh one, ClientKeyPath:%{pu blic, location:escape_only}@, subscription:%{public, location:escape_only}s}",  buf,  0x26u);
    }

    sub_10000AE14((uint64_t)a2);
  }

  sub_10058616C(*(uint64_t **)(a1 + 16), *(void *)(a1 + 48), a2);
  uint64_t v22 = *a2;
  *(_BYTE *)(v22 + 144) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
  uint64_t v23 = *a2;
  uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  id v25 = v24;

  *(void *)(v23 + 152) = v24;
  if (!*a2 || !*(_BYTE *)(*a2 + 248))
  {
    sub_10124D01C();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h",  456,  "getOrCreatePersistentSubscription");
LABEL_26:
    __break(1u);
    return;
  }

  *(void *)std::stringbuf::string_type buf = &v33;
  __int16 v26 = sub_100891598(v4, (uint64_t *)&v33, (uint64_t)&unk_1012CF090, (uint64_t **)buf);
  sub_1000F2F30(v26 + 3, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)*a2 + 16LL))(*a2, a1 + 8);
LABEL_18:
  if (v7)
  {
    int v27 = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

void sub_100879EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *sub_100879F14(void **a1)
{
  *(void *)std::stringbuf::string_type buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"19CLFenceSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x58uLL);
    sub_100266470((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124D434(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10087A0BC(_Unwind_Exception *a1)
{
}

void sub_10087A0D8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v9 = 0LL;
  id v5 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
  if (v5 && sub_1002B1DA4(v5, &v9))
  {
    sub_10056FE74(*(void *)(a1 + 16), *(void *)(a1 + 48), v9);
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v6 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      unint64_t v13 = "kCLConnectionMessagePurposeKey";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v10 = 136446210;
      uint64_t v11 = "kCLConnectionMessagePurposeKey";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v10,  12);
      uint64_t v8 = (uint8_t *)v7;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessagePurpose(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v7);
      if (v8 != buf) {
        free(v8);
      }
    }
  }
}

void sub_10087A2E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10087A314(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(buf, "com.apple.locationd.effective_bundle");
  char v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 40LL))(a1, buf);
  char v6 = v5;
  if (v28 < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0) {
      goto LABEL_3;
    }
LABEL_14:
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v15 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      uint64_t v16 = *(void *)(a1 + 48);
      *(_DWORD *)std::stringbuf::string_type buf = 138543362;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "Unentitled entity '%{public}@' trying to tell us they are WatchKit",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      uint64_t v17 = *(const char **)(a1 + 48);
      int v21 = 138543362;
      uint64_t v22 = v17;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Unentitled entity '%{public}@' trying to tell us they are WatchKit",  &v21,  12);
      uint64_t v14 = (char *)v18;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageIsActuallyAWatchKitExtension(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v18);
      goto LABEL_31;
    }

    goto LABEL_27;
  }

  if ((v5 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
  if (v7 && (sub_1002A9230(v7, (BOOL *)(a1 + 88)) & 1) != 0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v8 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = *(unsigned __int8 *)(a1 + 88);
      *(_DWORD *)std::stringbuf::string_type buf = 138412546;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v26 = 1024;
      int v27 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Setting client, %@, is actually a WatchKit extension, %d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      uint64_t v11 = *(const char **)(a1 + 48);
      int v12 = *(unsigned __int8 *)(a1 + 88);
      int v21 = 138412546;
      uint64_t v22 = v11;
      __int16 v23 = 1024;
      int v24 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "Setting client, %@, is actually a WatchKit extension, %d",  &v21,  18);
      uint64_t v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageIsActuallyAWatchKitExtension(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v13);
LABEL_31:
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    unint64_t v19 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::stringbuf::string_type buf = 136446210;
      *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v21 = 136446210;
      uint64_t v22 = "kCLConnectionMessageEnabledKey";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v21,  12);
      uint64_t v14 = (char *)v20;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageIsActuallyAWatchKitExtension(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v20);
      goto LABEL_31;
    }
  }

void sub_10087A7E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_10087A83C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(buf, "com.apple.locationd.effective_bundle");
  char v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 40LL))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v24) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0) {
      goto LABEL_3;
    }
  }

  else if ((v5 & 1) != 0)
  {
LABEL_3:
    id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
    if (v7 && (sub_1002A9230(v7, (BOOL *)(a1 + 89)) & 1) != 0)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      uint64_t v8 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 48);
        int v10 = *(unsigned __int8 *)(a1 + 89);
        *(_DWORD *)std::stringbuf::string_type buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v23 = 2114;
        uint64_t v24 = v9;
        __int16 v25 = 1026;
        int v26 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#usesync Setting client proxy for remote client, ClientKeyPath:%{public, location :escape_only}@, is proxy:%{public}hhd}",  buf,  0x22u);
      }

      if (!*(_BYTE *)(a1 + 72))
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        uint64_t v11 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = *(_DWORD *)(a1 + 272);
          *(_DWORD *)std::stringbuf::string_type buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          __int16 v23 = 1026;
          LODWORD(v24) = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#usesync #warning Received a ProxyForRemoteClient message for a client that failed to register.  Is it uninstalled?, pid:%{public}d}",  buf,  0x18u);
        }
      }
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      uint64_t v17 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::stringbuf::string_type buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185AF80);
        }
        int v20 = 136446210;
        int v21 = "kCLConnectionMessageEnabledKey";
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v20,  12);
        unint64_t v19 = (char *)v18;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageProxyForRemoteClient(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v18);
        if (v19 != buf) {
          free(v19);
        }
      }
    }

    goto LABEL_27;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v13 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
  {
    uint64_t v14 = *(void *)(a1 + 48);
    *(_DWORD *)std::stringbuf::string_type buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v23 = 2114;
    uint64_t v24 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#usesync Unentitled client claims to be a remote client, ClientKeyPath:%{public, loca tion:escape_only}@}",  buf,  0x1Cu);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
  }

  uint64_t v15 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v16 = *(void *)(a1 + 48);
    *(_DWORD *)std::stringbuf::string_type buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v23 = 2114;
    uint64_t v24 = v16;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#usesync Unentitled client claims to be a remote client",  "{msg%{public}.0s:#usesync Unentitled client claims to be a remote client, ClientKeyPath:%{public, loca tion:escape_only}@}",  buf,  0x1Cu);
  }

void sub_10087ACEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_10087AD34(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(buf, "com.apple.locationd.effective_bundle");
  char v3 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 40LL))(a1, buf);
  char v4 = v3;
  if (SBYTE3(v18) < 0)
  {
    operator delete(*(void **)buf);
    if ((v4 & 1) != 0)
    {
LABEL_3:
      if (([*(id *)(a1 + 112) isAuthorizedForServiceTypeMask:1024] & 1) == 0)
      {
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185AF80);
        }
        char v5 = (os_log_s *)qword_101934988;
        if (!os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_10;
        }
        uint64_t v6 = *(void *)(a1 + 48);
        *(_DWORD *)std::stringbuf::string_type buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v17 = 2114;
        uint64_t v18 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning, request to mark client as having received location while it is not authorized , ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
      }

      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
LABEL_10:
      id v7 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void *)(a1 + 48);
        *(_DWORD *)std::stringbuf::string_type buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        __int16 v17 = 2114;
        uint64_t v18 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:markReceivingLocationInformation, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
      }

      sub_10055AF98(*(void *)(a1 + 16), *(void *)(a1 + 48), 1LL, 0);
      goto LABEL_19;
    }
  }

  else if ((v3 & 1) != 0)
  {
    goto LABEL_3;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185AF80);
  }
  uint64_t v9 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
  {
    uint64_t v10 = *(void *)(a1 + 48);
    *(_DWORD *)std::stringbuf::string_type buf = 138543362;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_FAULT,  "Unentitled entity '%{public}@' trying to mark itself as having received location?!",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v11 = *(void *)(a1 + 48);
    int v14 = 138543362;
    uint64_t v15 = v11;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Unentitled entity '%{public}@' trying to mark itself as having received location?!",  &v14,  12);
    unint64_t v13 = (char *)v12;
    sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageMarkAsHavingReceivedLocation(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

void sub_10087B090( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_10087B0D8(uint64_t a1, CLConnectionMessage **a2)
{
  char v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  objc_opt_class(&OBJC_CLASS___NSNumber);
  uint64_t v6 = v5;
  *(void *)&double v7 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses( *a2,  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v6, v7, v8, 0LL));
  id v10 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessageStatusKey"];
  id v11 = [DictionaryOfClasses objectForKeyedSubscript:@"kCLConnectionMessagePurposeIdentifierKey"];
  if (v11) {
    sub_1010DDBC0(v35, (char *)[v11 UTF8String]);
  }
  else {
    sub_1010DDBC0(v35, "");
  }
  if ((objc_opt_respondsToSelector(v10, "intValue") & 1) != 0)
  {
    unsigned int v12 = [v10 intValue];
    sub_1004F2598();
    if (sub_1004F7500() && *(_BYTE *)(a1 + 88))
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      unint64_t v13 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
      {
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t buf = 68289282LL;
        __int16 v38 = 2082;
        uint64_t v39 = "";
        __int16 v40 = 2114;
        uint64_t v41 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:WatchKit-1.0 client requesting authorization on companion, ClientKeyPath:%{public , location:escape_only}@}",  (uint8_t *)&buf,  0x1Cu);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
      }

      uint64_t v15 = (os_log_s *)qword_101934978;
      if (os_signpost_enabled((os_log_t)qword_101934978))
      {
        uint64_t v16 = *(void *)(a1 + 48);
        uint64_t buf = 68289282LL;
        __int16 v38 = 2082;
        uint64_t v39 = "";
        __int16 v40 = 2114;
        uint64_t v41 = v16;
        __int16 v17 = "WatchKit-1.0 client requesting authorization on companion";
        uint64_t v18 = "{msg%{public}.0s:WatchKit-1.0 client requesting authorization on companion, ClientKeyPath:%{pu"
              "blic, location:escape_only}@}";
LABEL_21:
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v17,  v18,  (uint8_t *)&buf,  0x1Cu);
        goto LABEL_48;
      }

      goto LABEL_48;
    }

    if (v12 != 3 || *(_BYTE *)(a1 + 90) == 0) {
      int v23 = v12;
    }
    else {
      int v23 = 4;
    }
    if (v23 == 4)
    {
      BOOL v24 = *(_BYTE *)(a1 + 74) == 0;
      int v25 = 1;
    }

    else
    {
      if (v23 != 3)
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        int v27 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
        {
          uint64_t v28 = *(void *)(a1 + 48);
          uint64_t buf = 68289282LL;
          __int16 v38 = 2082;
          uint64_t v39 = "";
          __int16 v40 = 2114;
          uint64_t v41 = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#AuthPrompt Malformed authorization status, ClientKeyPath:%{public, location:escape_only}@}",  (uint8_t *)&buf,  0x1Cu);
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185AF60);
          }
        }

        uint8_t v29 = (os_log_s *)qword_101934978;
        if (os_signpost_enabled((os_log_t)qword_101934978))
        {
          uint64_t v30 = *(void *)(a1 + 48);
          uint64_t buf = 68289282LL;
          __int16 v38 = 2082;
          uint64_t v39 = "";
          __int16 v40 = 2114;
          uint64_t v41 = v30;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v29,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#AuthPrompt Malformed authorization status",  "{msg%{public}.0s:#AuthPrompt Malformed authorization status, ClientKeyPath:%{public, location:escape_only}@}",  (uint8_t *)&buf,  0x1Cu);
        }

        int v26 = 0;
        goto LABEL_43;
      }

      BOOL v24 = *(_BYTE *)(a1 + 74) == 0;
      int v25 = 3;
    }

    if (v24) {
      int v26 = v25 + 1;
    }
    else {
      int v26 = v25;
    }
LABEL_43:
    uint64_t v31 = *(void *)(a1 + 48);
    if (SHIBYTE(v36) < 0)
    {
      sub_1010DD48C(__p, v35[0], (unint64_t)v35[1]);
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v35;
      uint64_t v33 = v36;
    }

    sub_1005857F0((uint64_t)v34, v26, v31, 0LL, (__int128 *)__p);
    sub_10087B6F4(a1, v34, 0LL, 1);
    sub_1005858A0((uint64_t)v34);
    if (SHIBYTE(v33) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_48;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v19 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
  {
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t buf = 68289282LL;
    __int16 v38 = 2082;
    uint64_t v39 = "";
    __int16 v40 = 2114;
    uint64_t v41 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#AuthPrompt Malformed authorization request, ClientKeyPath:%{public, location:escape_only}@}",  (uint8_t *)&buf,  0x1Cu);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
  }

  uint64_t v15 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t buf = 68289282LL;
    __int16 v38 = 2082;
    uint64_t v39 = "";
    __int16 v40 = 2114;
    uint64_t v41 = v21;
    __int16 v17 = "#AuthPrompt Malformed authorization request";
    uint64_t v18 = "{msg%{public}.0s:#AuthPrompt Malformed authorization request, ClientKeyPath:%{public, location:escape_only}@}";
    goto LABEL_21;
  }

void sub_10087B674( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10087B6F4(uint64_t a1, unsigned int *a2, NSDictionary *a3, int a4)
{
  if (*(_BYTE *)(a1 + 72) && !*(_BYTE *)(a1 + 104)) {
    sub_100564EF4(*(void *)(a1 + 16), *(void **)(a1 + 48), 1);
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 80LL))(a1) & 1) != 0
    || [*(id *)(a1 + 48) isAuthLimited])
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v8 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *a2;
      *(void *)uint64_t buf = 68289538LL;
      *(_WORD *)uint64_t v120 = 2082;
      *(void *)&v120[2] = "";
      *(_WORD *)&v120[10] = 2114;
      *(void *)&v120[12] = v9;
      *(_WORD *)&v120[20] = 2050;
      *(void *)&v120[22] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#AuthPrompt System services may not request authorization, ClientKeyPath:%{public, location:escape_only}@, requestType:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}",  buf,  0x26u);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
    }

    id v11 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v13 = *a2;
      *(void *)uint64_t buf = 68289538LL;
      *(_WORD *)uint64_t v120 = 2082;
      *(void *)&v120[2] = "";
      *(_WORD *)&v120[10] = 2114;
      *(void *)&v120[12] = v12;
      *(_WORD *)&v120[20] = 2050;
      *(void *)&v120[22] = v13;
      uint64_t v14 = "#AuthPrompt System services may not request authorization";
      uint64_t v15 = "{msg%{public}.0s:#AuthPrompt System services may not request authorization, ClientKeyPath:%{publ"
            "ic, location:escape_only}@, requestType:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
LABEL_13:
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  v14,  v15,  buf,  0x26u);
      return;
    }

    return;
  }

  if (([*(id *)(a1 + 112) inUseLevelIsAtLeast:5] & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 369))
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      uint64_t v16 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 48);
        uint64_t v18 = *a2;
        [*(id *)(a1 + 112) inUseLevel];
        unsigned int v19 = [*(id *)(a1 + 112) inUseLevel];
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v120 = 2082;
        *(void *)&v120[2] = "";
        *(_WORD *)&v120[10] = 2114;
        *(void *)&v120[12] = v17;
        *(_WORD *)&v120[20] = 2050;
        *(void *)&v120[22] = v18;
        *(_WORD *)&v120[30] = 2050;
        unint64_t v121 = v19;
        uint64_t v20 = "{msg%{public}.0s:#AuthPrompt Permitting authorization request placed by client entitled to specially"
              " request prompts despite being insufficiently in-use, ClientKeyPath:%{public, location:escape_only}@"
              ", requestType:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, inUseLevel:%{"
              "public, location:CLClientInUseLevel}lld}";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v20, buf, 0x30u);
      }
    }

    else
    {
      sub_1010DDBC0(buf, "com.apple.locationd.prompt_from_background");
      int v21 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)a1 + 40LL))(a1, buf);
      if ((v120[15] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (!v21)
      {
        if (a4)
        {
          sub_1002B68E8(a1 + 400, &v107);
          *(void *)uint64_t buf = 0LL;
          *(void *)uint64_t v120 = buf;
          *(void *)&v120[8] = 0x7812000000LL;
          *(void *)&v120[16] = sub_10087D040;
          *(void *)&v120[24] = sub_10087D04C;
          sub_1005859E4((uint64_t)&v122, (uint64_t)a2);
          v105[0] = _NSConcreteStackBlock;
          v105[2] = sub_10087D054;
          v105[3] = &unk_10185AB50;
          v105[6] = a1;
          void v105[7] = v107;
          uint64_t v52 = *(void **)(a1 + 32);
          v105[1] = 3321888768LL;
          __int128 v106 = v108;
          if (v108)
          {
            p_shared_weak_owners = &v108->__shared_weak_owners_;
            do
              unint64_t v54 = __ldxr((unint64_t *)p_shared_weak_owners);
            while (__stxr(v54 + 1, (unint64_t *)p_shared_weak_owners));
          }

          v105[4] = a3;
          v105[5] = buf;
          [v52 afterInterval:v105 async:3.0];
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185AF60);
          }
          uint64_t v55 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v56 = *(void *)(a1 + 48);
            uint64_t v57 = *a2;
            [*(id *)(a1 + 112) inUseLevel];
            unsigned int v58 = [*(id *)(a1 + 112) inUseLevel];
            *(_DWORD *)uint64_t v109 = 68289794;
            int v110 = 0;
            __int16 v111 = 2082;
            uint64_t v112 = "";
            __int16 v113 = 2114;
            uint64_t v114 = v56;
            __int16 v115 = 2050;
            uint64_t v116 = v57;
            __int16 v117 = 2050;
            uint64_t v118 = v58;
            _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt #Warning Delaying authorization request placed while insufficiently in- use, ClientKeyPath:%{public, location:escape_only}@, requestType:%{public, location:CLClientMana ger_Type::AuthorizationRequestType}lld, inUseLevel:%{public, location:CLClientInUseLevel}lld}",  v109,  0x30u);
          }

          if (v106) {
            std::__shared_weak_count::__release_weak(v106);
          }
          _Block_object_dispose(buf, 8);
          sub_1005858A0((uint64_t)&v122);
          if (v108) {
            std::__shared_weak_count::__release_weak(v108);
          }
        }

        else
        {
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185AF60);
          }
          __int16 v59 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v61 = *(void **)(a1 + 112);
            uint64_t v60 = (id *)(a1 + 112);
            uint64_t v62 = (uint64_t)*(v60 - 8);
            uint64_t v63 = *a2;
            [v61 inUseLevel];
            unsigned int v64 = [*v60 inUseLevel];
            *(_DWORD *)uint64_t buf = 68289794;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)uint64_t v120 = 2082;
            *(void *)&v120[2] = "";
            *(_WORD *)&v120[10] = 2114;
            *(void *)&v120[12] = v62;
            *(_WORD *)&v120[20] = 2050;
            *(void *)&v120[22] = v63;
            *(_WORD *)&v120[30] = 2050;
            unint64_t v121 = v64;
            _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt #Warning Dropping authorization request placed while insufficiently in- use, ClientKeyPath:%{public, location:escape_only}@, requestType:%{public, location:CLClientMana ger_Type::AuthorizationRequestType}lld, inUseLevel:%{public, location:CLClientInUseLevel}lld}",  buf,  0x30u);
          }

          sub_10055E8F4(a2, (uint64_t)@"App is in the background");
        }

        return;
      }

      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      uint64_t v16 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = *(void *)(a1 + 48);
        uint64_t v23 = *a2;
        [*(id *)(a1 + 112) inUseLevel];
        unsigned int v24 = [*(id *)(a1 + 112) inUseLevel];
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v120 = 2082;
        *(void *)&v120[2] = "";
        *(_WORD *)&v120[10] = 2114;
        *(void *)&v120[12] = v22;
        *(_WORD *)&v120[20] = 2050;
        *(void *)&v120[22] = v23;
        *(_WORD *)&v120[30] = 2050;
        unint64_t v121 = v24;
        uint64_t v20 = "{msg%{public}.0s:#AuthPrompt #widgetkit Permitting authorization request placed by client entitled t"
              "o specially request prompts for Widgets, ClientKeyPath:%{public, location:escape_only}@, requestTy"
              "pe:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, inUseLevel:%{public, locat"
              "ion:CLClientInUseLevel}lld}";
        goto LABEL_28;
      }
    }
  }

  int v25 = *a2 - 1;
  if (v25 < 0xB && ((0x50Fu >> v25) & 1) != 0)
  {
    uint64_t v31 = qword_10133F2F8[v25];
    uint64_t v32 = sub_10057C8DC(*(void *)(a1 + 16), *(void *)(a1 + 48));
    if (!v32)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      uint64_t v33 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = *(void *)(a1 + 48);
        uint64_t v35 = *(void *)(a1 + 80);
        *(void *)uint64_t buf = 68289538LL;
        *(_WORD *)uint64_t v120 = 2082;
        *(void *)&v120[2] = "";
        *(_WORD *)&v120[10] = 2114;
        *(void *)&v120[12] = v34;
        *(_WORD *)&v120[20] = 1026;
        *(_DWORD *)&v120[22] = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning #AuthPrompt CLCM:allowableAuthMask in invalid, considering fSupportedAuthMaskB uilder, ClientKeyPath:%{public, location:escape_only}@, fSupportedAuthMaskBuilder:%{public}d}",  buf,  0x22u);
      }

      uint64_t v32 = *(void *)(a1 + 80);
    }

    if ((v31 & ~v32) != 0)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      int v49 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v50 = *a2;
        uint64_t v51 = *(void *)(a1 + 48);
        *(void *)uint64_t buf = 68289794LL;
        *(_WORD *)uint64_t v120 = 2082;
        *(void *)&v120[2] = "";
        *(_WORD *)&v120[10] = 2050;
        *(void *)&v120[12] = v50;
        *(_WORD *)&v120[20] = 2114;
        *(void *)&v120[22] = v51;
        *(_WORD *)&v120[30] = 2050;
        unint64_t v121 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt Authorization value requested by client ignored because not in its allowabl e mask, requestType:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, ClientKeyPa th:%{public, location:escape_only}@, authMaskAllowable:%{public}lu}",  buf,  0x30u);
      }

      sub_10055E8F4(a2, (uint64_t)@"Requested authorization level isn't supported by the app");
      return;
    }

    if (sub_10057D1EC(*(void *)(a1 + 16)) && !sub_10053C998(*(void **)(a1 + 48)))
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      uint64_t v70 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v71 = *a2;
        uint64_t v72 = *(void *)(a1 + 48);
        *(void *)uint64_t buf = 68289538LL;
        *(_WORD *)uint64_t v120 = 2082;
        *(void *)&v120[2] = "";
        *(_WORD *)&v120[10] = 2050;
        *(void *)&v120[12] = v71;
        *(_WORD *)&v120[20] = 2114;
        *(void *)&v120[22] = v72;
        _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt Authorization request ignored, at lock-screen, requestType:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x26u);
      }

      sub_10055E8F4(a2, (uint64_t)@"App is requesting authorization prompt while the screen is locked");
      return;
    }

    if (sub_10054668C(*(void *)(a1 + 16)))
    {
      double v36 = sub_10057D1E0(*(void *)(a1 + 16));
      [*(id *)(a1 + 32) currentLatchedAbsoluteTimestamp];
      double v38 = v37 - v36;
      if (v38 < 900.0)
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        unsigned int v77 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v78 = *a2;
          __int16 v79 = (uint64_t *)(a1 + 16);
          sub_10054669C(*(void *)(a1 + 16));
          unsigned int v80 = sub_10054669C(*(void *)(a1 + 16));
          BOOL v81 = *(const char **)(a1 + 48);
          id v82 = sub_1005466B4(*v79);
          *(void *)uint64_t buf = 68290306LL;
          *(_WORD *)uint64_t v120 = 2082;
          *(void *)&v120[2] = "";
          *(_WORD *)&v120[10] = 2050;
          *(void *)&v120[12] = v78;
          *(_WORD *)&v120[20] = 2050;
          *(void *)&v120[22] = v80;
          *(_WORD *)&v120[30] = 2114;
          unint64_t v121 = (unint64_t)v81;
          __int16 v122 = 2114;
          double v123 = *(double *)&v82;
          __int16 v124 = 2050;
          uint64_t v125 = (uint64_t)v38;
          _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt Authorization request ignored because another authorization effort is alr eady in flight, requestType:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, e xistingRequestType:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, ClientKeyPath :%{public, location:escape_only}@, existingClientKey:%{public, location:escape_only}@, InflightRequest SquattingDurationSeconds:%{public}ld}",  buf,  0x44u);
        }

        sub_10055E8F4(a2, (uint64_t)@"Outstanding authorization prompt detected.");
        return;
      }

      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      uint64_t v39 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = *(void *)(a1 + 48);
        id v41 = sub_1005466B4(*(void *)(a1 + 16));
        sub_10054669C(*(void *)(a1 + 16));
        unsigned int v42 = sub_10054669C(*(void *)(a1 + 16));
        *(void *)uint64_t buf = 68290050LL;
        *(_WORD *)uint64_t v120 = 2082;
        *(void *)&v120[2] = "";
        *(_WORD *)&v120[10] = 2114;
        *(void *)&v120[12] = v40;
        *(_WORD *)&v120[20] = 2114;
        *(void *)&v120[22] = v41;
        *(_WORD *)&v120[30] = 2050;
        unint64_t v121 = v42;
        __int16 v122 = 2050;
        double v123 = v38 / 60.0;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:#AuthPrompt Inflight auth-request squatting for more than 15 mins. TearingDown, Cli entKeyPath:%{public, location:escape_only}@, squattingClient:%{public, location:escape_only}@, squatti ngRequestType:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, InflightRequestSquatt ingDurationMinutes:%{public}.2f}",  buf,  0x3Au);
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
      }

      std::string v43 = (os_log_s *)qword_101934978;
      if (os_signpost_enabled((os_log_t)qword_101934978))
      {
        uint64_t v44 = *(void *)(a1 + 48);
        id v45 = sub_1005466B4(*(void *)(a1 + 16));
        sub_10054669C(*(void *)(a1 + 16));
        unsigned int v46 = sub_10054669C(*(void *)(a1 + 16));
        *(_DWORD *)uint64_t buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v120 = 2082;
        *(void *)&v120[2] = "";
        *(_WORD *)&v120[10] = 2114;
        *(void *)&v120[12] = v44;
        *(_WORD *)&v120[20] = 2114;
        *(void *)&v120[22] = v45;
        *(_WORD *)&v120[30] = 2050;
        unint64_t v121 = v46;
        __int16 v122 = 2050;
        double v123 = v38 / 60.0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v43,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#AuthPrompt Inflight auth-request squatting for more than 15 mins. TearingDown",  "{msg%{public}.0s:#AuthPrompt Inflight auth-request squatting for more than 15 mins. TearingDown, Cli entKeyPath:%{public, location:escape_only}@, squattingClient:%{public, location:escape_only}@, squatti ngRequestType:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, InflightRequestSquatt ingDurationMinutes:%{public}.2f}",  buf,  0x3Au);
      }

      sub_100579358(*(void *)(a1 + 16), 1, 0LL);
    }

    if ([*(id *)(a1 + 112) transientAwareRegistrationResult] == 4)
    {
      if (*a2 == 9)
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        __int128 v47 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v48 = *(void *)(a1 + 48);
          *(void *)uint64_t buf = 68289282LL;
          *(_WORD *)uint64_t v120 = 2082;
          *(void *)&v120[2] = "";
          *(_WORD *)&v120[10] = 2114;
          *(void *)&v120[12] = v48;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt Ignoring request for temporary precise from app with no authorization yet , ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
        }

        sub_10055E8F4( a2,  (uint64_t)@"App's authorization status is not yet determined. App needs to ask for authorization before asking for temporary precise upgrade.");
        return;
      }

      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      uint64_t v83 = qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v84 = *(void *)(a1 + 48);
        uint64_t v85 = *a2;
        *(void *)uint64_t buf = 68289538LL;
        *(_WORD *)uint64_t v120 = 2082;
        *(void *)&v120[2] = "";
        *(_WORD *)&v120[10] = 2114;
        *(void *)&v120[12] = v84;
        *(_WORD *)&v120[20] = 2050;
        *(void *)&v120[22] = v85;
        uint64_t v86 = "{msg%{public}.0s:#AuthPrompt Allowing standard prompt because no auth yet, ClientKeyPath:%{pub"
              "lic, location:escape_only}@, requestType:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
        BOOL v87 = (os_log_s *)v83;
        uint32_t v88 = 38;
LABEL_129:
        _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, v86, buf, v88);
      }
    }

    else
    {
      if ([*(id *)(a1 + 112) registrationResult] == 1
        && *a2 == 4
        && sub_10057D734(*(void *)(a1 + 16), *(void *)(a1 + 48)))
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        uint64_t v65 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v66 = *(void *)(a1 + 48);
          uint64_t v67 = *a2;
          uint64_t v68 = sub_100297524([*(id *)(a1 + 112) registrationResult]);
          *(void *)uint64_t buf = 68289794LL;
          *(_WORD *)uint64_t v120 = 2082;
          *(void *)&v120[2] = "";
          *(_WORD *)&v120[10] = 2114;
          *(void *)&v120[12] = v66;
          *(_WORD *)&v120[20] = 2050;
          *(void *)&v120[22] = v67;
          *(_WORD *)&v120[30] = 2082;
          unint64_t v121 = (unint64_t)v68;
          _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt Allowing one-shot upgrade attempt, ClientKeyPath:%{public, location :escape_only}@, requestType:%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, Reg istrationResult:%{public, location:escape_only}s}",  buf,  0x30u);
        }

        *(void *)uint64_t buf = 0LL;
        *(void *)uint64_t v120 = buf;
        *(void *)&v120[8] = 0x7812000000LL;
        *(void *)&v120[16] = sub_10087D040;
        *(void *)&v120[24] = sub_10087D04C;
        sub_1005859E4((uint64_t)&v122, (uint64_t)a2);
        uint64_t v69 = *(void *)(a1 + 48);
        v104[0] = _NSConcreteStackBlock;
        v104[1] = 3221225472LL;
        v104[2] = sub_10087D160;
        v104[3] = &unk_10185AB88;
        v104[4] = buf;
        sub_1010DDBC0(__p, "");
        sub_1005857F0((uint64_t)v109, 7, v69, v104, (__int128 *)__p);
        sub_100585A44((uint64_t)a2, (uint64_t)v109);
        sub_1005858A0((uint64_t)v109);
        if (v103 < 0) {
          operator delete(__p[0]);
        }
        _Block_object_dispose(buf, 8);
        sub_1005858A0((uint64_t)&v122);
        goto LABEL_136;
      }

      if ([*(id *)(a1 + 112) registrationResult] == 2 && !*(_BYTE *)(a1 + 369))
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        uint64_t v95 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v96 = *(void *)(a1 + 48);
          *(void *)uint64_t buf = 68289282LL;
          *(_WORD *)uint64_t v120 = 2082;
          *(void *)&v120[2] = "";
          *(_WORD *)&v120[10] = 2114;
          *(void *)&v120[12] = v96;
          _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt Client is denied.  Asking client manager to consider doing a big switch p rompt, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
        }

        uint64_t v97 = *(void *)(a1 + 48);
        sub_1010DDBC0(v100, "");
        sub_1005857F0((uint64_t)buf, 10, v97, 0LL, (__int128 *)v100);
        sub_100585A44((uint64_t)a2, (uint64_t)buf);
        sub_1005858A0((uint64_t)buf);
        if (v101 < 0) {
          operator delete(v100[0]);
        }
        goto LABEL_136;
      }

      if (*a2 == 9 && ([*(id *)(a1 + 112) isAuthorizedForServiceType:12] & 1) == 0)
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        uint64_t v93 = qword_101934978;
        if (!os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_136;
        }
        uint64_t v94 = *(void *)(a1 + 48);
        *(void *)uint64_t buf = 68289282LL;
        *(_WORD *)uint64_t v120 = 2082;
        *(void *)&v120[2] = "";
        *(_WORD *)&v120[10] = 2114;
        *(void *)&v120[12] = v94;
        uint64_t v86 = "{msg%{public}.0s:#AuthPrompt Allowing no-auth-change auth request because this #compensation client "
              "wants temporary precise, ClientKeyPath:%{public, location:escape_only}@}";
        BOOL v87 = (os_log_s *)v93;
        uint32_t v88 = 28;
        goto LABEL_129;
      }

      if (!*(_BYTE *)(a1 + 369))
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        uint64_t v89 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v90 = *(void *)(a1 + 48);
          uint64_t v91 = *a2;
          uint64_t v92 = sub_100297524([*(id *)(a1 + 112) registrationResult]);
          *(void *)uint64_t buf = 68289794LL;
          *(_WORD *)uint64_t v120 = 2082;
          *(void *)&v120[2] = "";
          *(_WORD *)&v120[10] = 2114;
          *(void *)&v120[12] = v90;
          *(_WORD *)&v120[20] = 2050;
          *(void *)&v120[22] = v91;
          *(_WORD *)&v120[30] = 2082;
          unint64_t v121 = (unint64_t)v92;
          _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt Ignoring authorization request due to existing authorization, ClientK eyPath:%{public, location:escape_only}@, requestType:%{public, location:CLClientManager_Type::Authoriz ationRequestType}lld, RegistrationResult:%{public, location:escape_only}s}",  buf,  0x30u);
        }

        sub_10055E8F4(a2, (uint64_t)@"The user has already made a decision about the app's authorization");
        return;
      }

      if ([*(id *)(a1 + 112) registrationResult] != 2)
      {
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        __int128 v73 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v74 = *(void *)(a1 + 48);
          uint64_t v75 = *a2;
          uint64_t v76 = sub_100297524([*(id *)(a1 + 112) registrationResult]);
          *(void *)uint64_t buf = 68289794LL;
          *(_WORD *)uint64_t v120 = 2082;
          *(void *)&v120[2] = "";
          *(_WORD *)&v120[10] = 2114;
          *(void *)&v120[12] = v74;
          *(_WORD *)&v120[20] = 2050;
          *(void *)&v120[22] = v75;
          *(_WORD *)&v120[30] = 2082;
          unint64_t v121 = (unint64_t)v76;
          _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#AuthPrompt Ignoring special-reprompt authorization request due to existing authoriza tion, ClientKeyPath:%{public, location:escape_only}@, requestType:%{public, location:CLClientManag er_Type::AuthorizationRequestType}lld, RegistrationResult:%{public, location:escape_only}s}",  buf,  0x30u);
        }

        return;
      }
    }

LABEL_136:
    uint64_t v98 = *(void *)(a1 + 16);
    sub_1005859E4((uint64_t)v99, (uint64_t)a2);
    sub_10055EA14(v98, a1, v99, a3);
    sub_1005858A0((uint64_t)v99);
    return;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  int v26 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
  {
    uint64_t v27 = *a2;
    uint64_t v28 = *(void *)(a1 + 48);
    *(void *)uint64_t buf = 68289538LL;
    *(_WORD *)uint64_t v120 = 2082;
    *(void *)&v120[2] = "";
    *(_WORD *)&v120[10] = 2050;
    *(void *)&v120[12] = v27;
    *(_WORD *)&v120[20] = 2114;
    *(void *)&v120[22] = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#AuthPrompt Unrecognized authorization value, requestType:%{public, location:CLClient Manager_Type::AuthorizationRequestType}lld, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x26u);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
  }

  id v11 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v29 = *a2;
    uint64_t v30 = *(void *)(a1 + 48);
    *(void *)uint64_t buf = 68289538LL;
    *(_WORD *)uint64_t v120 = 2082;
    *(void *)&v120[2] = "";
    *(_WORD *)&v120[10] = 2050;
    *(void *)&v120[12] = v29;
    *(_WORD *)&v120[20] = 2114;
    *(void *)&v120[22] = v30;
    uint64_t v14 = "#AuthPrompt Unrecognized authorization value";
    uint64_t v15 = "{msg%{public}.0s:#AuthPrompt Unrecognized authorization value, requestType:%{public, location:CLCl"
          "ientManager_Type::AuthorizationRequestType}lld, ClientKeyPath:%{public, location:escape_only}@}";
    goto LABEL_13;
  }

  if (!v26) {
    goto LABEL_169;
  }
LABEL_137:
  if (v26 != 1) {
    goto LABEL_180;
  }
  uint64_t v83 = *(uint64_t **)(a1 + 240);
  if (!v83) {
    goto LABEL_180;
  }
  __asm { FMOV            V0.2D, #-1.0 }

  uint64_t v142 = _Q0;
  while ((*((_DWORD *)v83 + 167) & 0xFFFFFFFB) == 0)
  {
LABEL_153:
    uint64_t v83 = (uint64_t *)*v83;
    if (!v83) {
      goto LABEL_180;
    }
  }

  if (qword_101934960 != -1) {
    dispatch_once(&qword_101934960, &stru_10186D380);
  }
  uint64_t v85 = (os_log_s *)p_vtable[301];
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v86 = *((_DWORD *)v83 + 165);
    BOOL v87 = *v27;
    *(_DWORD *)uint64_t buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = v86;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(double *)&buf[10] = v87;
    *(_WORD *)&_BYTE buf[18] = 1026;
    *(_DWORD *)&buf[20] = v143;
    _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEBUG,  "#selection,yield the only non-outlier hypothesis,hID,%{public}d,location_mct,%{public}.3f,isWiFiAssociated,%{public}d",  buf,  0x18u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint64_t v89 = p_vtable[301];
    uint64_t v90 = *((_DWORD *)v83 + 165);
    uint64_t v91 = *v27;
    *(_DWORD *)uint64_t v145 = 67240704;
    *(_DWORD *)&v145[4] = v90;
    *(_WORD *)&v145[8] = 2050;
    *(double *)&v145[10] = v91;
    *(_WORD *)&v145[18] = 1026;
    *(_DWORD *)&v145[20] = v143;
    LODWORD(v138) = 24;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v89,  2LL,  "#selection,yield the only non-outlier hypothesis,hID,%{public}d,location_mct,%{public}.3f,isWiFiAssociated,%{public}d",  v145,  v138);
    uint64_t v93 = (char *)v92;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v92);
    if (v93 != buf) {
      free(v93);
    }
  }

  *(void *)uint64_t v145 = &off_1018920B8;
  *(_OWORD *)&v145[8] = v142;
  *(_OWORD *)&v146[16] = xmmword_1012E0070;
  *(_OWORD *)&v146[32] = xmmword_1012E0070;
  *(_OWORD *)&v146[56] = v142;
  *(_OWORD *)&v146[72] = v142;
  *(void *)&v146[88] = 0xBFF0000000000000LL;
  *(_DWORD *)&v146[96] = 0;
  v146[100] = 0;
  *(_DWORD *)&v146[104] = 0;
  *(_DWORD *)&v146[104] = sub_100E8FA20((uint64_t)(v83 + 1), v27);
  if (!sub_1004CCD0C((uint64_t)(v83 + 7), v27) || !sub_1004CE2F8((uint64_t)(v83 + 7), (uint64_t)v145))
  {
    if (qword_101934960 != -1) {
      dispatch_once(&qword_101934960, &stru_10186D380);
    }
    uint32_t v88 = (os_log_s *)p_vtable[301];
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEBUG,  "#selection,Failed to retrieve estimate from the single non-outlier hypothesis",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934960 != -1) {
        dispatch_once(&qword_101934960, &stru_10186D380);
      }
      uint64_t v94 = p_vtable[301];
      v144[0] = 0;
      LODWORD(v138) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v94,  2LL,  "#selection,Failed to retrieve estimate from the single non-outlier hypothesis",  v144,  v138);
      uint64_t v96 = (char *)v95;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL cllcf::CLLCFusion::performHypothesisSelection(const LCFusionProviderLocation &)",  "%s\n",  v95);
      if (v96 != buf) {
        free(v96);
      }
    }

    goto LABEL_153;
  }

  __int128 v106 = v83[6] + v83[5] - 1;
  *(_OWORD *)(*(void *)(v83[2] + 8 * (v106 / 0x17)) + 176 * (v106 % 0x17)) = *(_OWORD *)(a2 + 8);
  sub_100AB862C(a1 + 248, (uint64_t)(v83 + 1));
  uint64_t v107 = *(_OWORD *)&v146[64];
  *(_OWORD *)(a1 + 104sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_OWORD *)&v146[48];
  *(_OWORD *)(a1 + 1056) = v107;
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v146[80];
  *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v146[92];
  uint64_t v108 = *(_OWORD *)v146;
  *(_OWORD *)(a1 + 976) = *(_OWORD *)&v145[8];
  *(_OWORD *)(a1 + 992) = v108;
  __int16 v79 = *(_OWORD *)&v146[16];
  unsigned int v80 = *(_OWORD *)&v146[32];
LABEL_193:
  id result = 1LL;
  *(_OWORD *)(a1 + 1008) = v79;
  *(_OWORD *)(a1 + 1024) = v80;
  return result;
}

  *(_DWORD *)(a1 + 396) |= 0x400000u;
  int v49 = *(void **)(a1 + 176);
  if (!v49)
  {
    int v49 = operator new(0x18uLL);
    v49[1] = 0LL;
    double v49[2] = 0LL;
    *int v49 = off_101875E10;
    *(void *)(a1 + 176) = v49;
  }

  uint64_t v50 = *(void *)(a2 + 176);
  if (!v50) {
    uint64_t v50 = *(void *)(qword_1019A1D38 + 176);
  }
  sub_100BB99FC(v49, v50);
  double v7 = *(_DWORD *)(a2 + 396);
  if ((v7 & 0x800000) != 0)
  {
LABEL_141:
    *(_DWORD *)(a1 + 396) |= 0x800000u;
    uint64_t v51 = *(_BYTE **)(a1 + 184);
    if (!v51)
    {
      uint64_t v51 = operator new(0x18uLL);
      *(void *)uint64_t v51 = off_101875F00;
      v51[8] = 0;
      *((_DWORD *)v51 + 3) = 0;
      *((_DWORD *)v51 + 4) = 0;
      *(void *)(a1 + 184) = v51;
    }

    uint64_t v52 = *(void *)(a2 + 184);
    if (!v52) {
      uint64_t v52 = *(void *)(qword_1019A1D38 + 184);
    }
    sub_100BB9ABC((uint64_t)v51, v52);
    double v7 = *(_DWORD *)(a2 + 396);
  }

  uint64_t v63 = *(void *)(a1 + 136);
  unsigned int v64 = *(unsigned __int8 *)(v63 + 23);
  uint64_t v65 = v64;
  uint64_t v66 = *(void *)(v63 + 8);
  if ((v64 & 0x80u) == 0) {
    uint64_t v67 = *(unsigned __int8 *)(v63 + 23);
  }
  else {
    uint64_t v67 = v66;
  }
  if (v67 >= 0x80)
  {
    uint64_t v68 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback( (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v67,  a2);
    unsigned int v64 = *(unsigned __int8 *)(v63 + 23);
    uint64_t v66 = *(void *)(v63 + 8);
    char v3 = *(_DWORD *)(a1 + 224);
    uint64_t v65 = *(_BYTE *)(v63 + 23);
  }

  else
  {
    uint64_t v68 = 1;
  }

  if (v65 < 0) {
    unsigned int v64 = v66;
  }
  char v4 = (v4 + v68 + v64 + 2);
  if ((v3 & 0x80000) == 0)
  {
LABEL_119:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_151;
  }

  uint64_t v17 = *(void *)(a2 + 16);
  v5 |= 2uLL;
  *uint64_t v2 = v5;
  *(_BYTE *)(a1 + 324) = v6;
  *(void *)(a1 + 16) = v17;
  double v7 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_71:
    if ((v7 & 0x400000000000LL) == 0) {
      return result;
    }
LABEL_138:
    id result = *(float *)(a2 + 228);
    *uint64_t v2 = v5 | 0x400000000000LL;
    *(_BYTE *)(a1 + 324) = v6;
    *(float *)(a1 + 228) = result;
    return result;
  }

  PB::TextFormatter::format(this, "maxPulseStartTime", *(void *)(a1 + 48));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_70:
    if ((v6 & 0x80) == 0) {
      goto LABEL_71;
    }
LABEL_138:
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 64));
    if ((*v5 & 0x100) == 0) {
      return PB::TextFormatter::endObject(this);
    }
    goto LABEL_72;
  }

  id result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0xC9u);
  uint64_t v6 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_71:
    if ((v6 & 0x400000000000LL) == 0) {
      return result;
    }
    return PB::Writer::write(this, *(float *)(v3 + 228), 0x12Du);
  }

  id result = *(float *)(a2 + 244);
  v5 |= 0x400000000000000uLL;
  *uint64_t v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 244) = result;
  char v4 = *v3;
  double v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 0x200) == 0)
  {
LABEL_63:
    if ((v4 & 0x8000000000LL) == 0) {
      goto LABEL_64;
    }
    goto LABEL_138;
  }

  PB::TextFormatter::format(this, "lowSenseWithoutAudioDeltaVThreshold3", *(float *)(a1 + 200));
  uint64_t v6 = *v5;
  double v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000000000LL) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000LL) == 0) {
      goto LABEL_63;
    }
    goto LABEL_138;
  }

  id result = PB::Writer::write(this, *(float *)(v3 + 168), 0x39u);
  uint64_t v5 = *v4;
  uint64_t v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000LL) == 0)
  {
LABEL_62:
    if ((v5 & 0x20000000000LL) == 0) {
      goto LABEL_63;
    }
    goto LABEL_138;
  }

  id result = *(float *)(a2 + 88);
  v5 |= 0x80000uLL;
  *uint64_t v2 = v5;
  *(_WORD *)(a1 + 324) = v6;
  *(_BYTE *)(a1 + 326) = BYTE2(v6);
  *(float *)(a1 + 88) = result;
  LOWORD(v8) = *(_WORD *)(a2 + 324);
  char v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_56:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_138;
  }

  PB::TextFormatter::format(this, "kStrongerAudioRO", *(_BYTE *)(a1 + 311));
  double v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000000000LL) == 0)
  {
LABEL_55:
    if ((v6 & 0x100000000000LL) == 0) {
      goto LABEL_56;
    }
    goto LABEL_138;
  }

  id result = PB::Writer::write(this, *(float *)(v3 + 88), 0xF6u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_56:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_138;
  }

  int v25 = *(_BYTE *)(a2 + 332);
  v6 |= 0x200000uLL;
  *uint64_t v2 = v5;
  *(void *)(a1 + 364) = v6;
  *(_BYTE *)(a1 + 332) = v25;
  char v4 = *v3;
  double v7 = *(void *)(a2 + 364);
  if ((v7 & 0x100000) == 0)
  {
LABEL_31:
    if ((v7 & 0x200) == 0) {
      goto LABEL_32;
    }
    goto LABEL_138;
  }

  PB::TextFormatter::format(this, "isUshaFPDecided", *(_BYTE *)(a1 + 334));
  double v7 = *v5;
  uint64_t v6 = *(void *)(a1 + 364);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_138;
  }

  id result = PB::Writer::write(this, *(_BYTE *)(v3 + 332), 0x6Bu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x100000) == 0)
  {
LABEL_31:
    if ((v6 & 0x200) == 0) {
      goto LABEL_32;
    }
    goto LABEL_138;
  }

  uint64_t v67 = *(_BYTE *)(a2 + 203);
  *(_WORD *)(result + 212) = v4;
  v4 |= 0x10000uLL;
  *(void *)(result + 204) = v3;
  *(_BYTE *)(result + 214) = BYTE2(v4);
  *(_BYTE *)(result + 203) = v67;
  LOWORD(sub_1012279C0(0LL, v4, v5) = *(_WORD *)(a2 + 212);
  uint64_t v2 = *(void *)(a2 + 204);
  if ((v2 & 0x10000000000LL) == 0)
  {
LABEL_58:
    if ((v2 & 0x100000000000LL) == 0) {
      goto LABEL_59;
    }
    goto LABEL_138;
  }

  PB::TextFormatter::format(this, "kSaturationMetRO1", *(_BYTE *)(a1 + 194));
  uint64_t v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  uint64_t v5 = *(void *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x100) == 0)
  {
LABEL_57:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_138;
  }

  id result = PB::Writer::write(this, *(float *)(v3 + 68), 0x45Au);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  char v4 = *(void *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_58:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_138;
  }

              char v3 = *((void *)this + 2);
              char v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }

        char v4 = 0;
      }

      break;
    }
  }

  return v4 == 0;
}

          *(_DWORD *)(a1 + 48) = v38;
          goto LABEL_166;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          id v41 = *((void *)this + 1);
          unsigned int v42 = *((void *)this + 2);
          std::string v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5LL && v41 + 10 <= v42)
          {
            uint64_t v44 = 0;
            id v45 = 0;
            unsigned int v46 = 0LL;
            do
            {
              __int128 v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              uint64_t v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_139;
              }
              v44 += 7;
              id v41 = v47;
              uint64_t v62 = v45++ > 8;
            }

            while (!v62);
LABEL_114:
            LODWORD(v46) = 0;
            goto LABEL_139;
          }

          BOOL v81 = 0;
          id v82 = 0;
          unsigned int v46 = 0LL;
          if (v42 <= v41) {
            unsigned int v42 = *((void *)this + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)this + 24) = 1;
            }

            else
            {
              uint64_t v83 = v41 + 1;
              uint64_t v84 = *(_BYTE *)(v43 + v41);
              *((void *)this + 1) = v83;
              v46 |= (unint64_t)(v84 & 0x7F) << v81;
              if (v84 < 0)
              {
                v81 += 7;
                id v41 = v83;
                uint64_t v62 = v82++ > 8;
                if (v62) {
                  goto LABEL_114;
                }
                continue;
              }

              if (*((_BYTE *)this + 24)) {
                LODWORD(v46) = 0;
              }
            }

            break;
          }

void sub_10087CAF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, std::__shared_weak_count *a44, uint64_t a45, std::__shared_weak_count *a46, char a47)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v48 - 240), 8);
  sub_1005858A0(v47);
  _Unwind_Resume(a1);
}

void sub_10087CBC8(void *a1, uint64_t a2)
{
  char v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3321888768LL;
  void v25[2] = sub_10087CFD8;
  _OWORD v25[3] = &unk_10185AAF0;
  uint64_t v5 = *(CLConnectionMessage **)a2;
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  v25[4] = *(void *)a2;
  int v26 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    uint64_t v5 = *(CLConnectionMessage **)a2;
  }

  Dictionary = (void *)CLConnectionMessage::getDictionary(v5);
  uint64_t v10 = (NSDictionary *)[Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
  if (!v10) {
    goto LABEL_8;
  }
  sub_1010DDBC0(buf, "com.apple.locationd.prompt_content_control");
  char v11 = (*(uint64_t (**)(void *, _BYTE *))(*a1 + 40LL))(a1, buf);
  char v12 = v11;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if ((v12 & 1) != 0) {
      goto LABEL_8;
    }
  }

  else if ((v11 & 1) != 0)
  {
LABEL_8:
    id v13 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeIdentifierKey"];
    if (v13) {
      sub_1010DDBC0(buf, (char *)[v13 UTF8String]);
    }
    else {
      sub_1010DDBC0(buf, "");
    }
    if (v10)
    {
      uint64_t v27 = @"UsageDescription";
      uint64_t v28 = v10;
      uint64_t v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL);
    }

    uint64_t v14 = a1[6];
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_1010DD48C(__p, *(void **)buf, *(unint64_t *)&buf[8]);
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      uint64_t v23 = *(void *)&buf[16];
    }

    sub_1005857F0((uint64_t)v24, 9, v14, v25, (__int128 *)__p);
    sub_10087B6F4((uint64_t)a1, v24, v10, 1);
    sub_1005858A0((uint64_t)v24);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_28;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  uint64_t v15 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
  {
    uint64_t v16 = a1[6];
    *(void *)uint64_t buf = 68289282LL;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&_BYTE buf[18] = 2114;
    *(void *)&buf[20] = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:#AuthPrompt Not showing temporary precise prompt because the client lacks the required SPI entitlement, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
  }

  uint64_t v17 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v18 = a1[6];
    *(void *)uint64_t buf = 68289282LL;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&_BYTE buf[18] = 2114;
    *(void *)&buf[20] = v18;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "#AuthPrompt Not showing temporary precise prompt because the client lacks the required SPI entitlement",  "{msg%{public}.0s:#AuthPrompt Not showing temporary precise prompt because the client lacks the required SPI entitlement, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

void sub_10087CF50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10000AE14((uint64_t)&a28);

  _Unwind_Resume(a1);
}

uint64_t sub_10087CFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  [v6 setObject:a2 forKeyedSubscript:@"kCLConnectionMessagePromptResponseKey"];
  [v6 setObject:a3 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

uint64_t sub_10087D040(uint64_t a1, uint64_t a2)
{
  return sub_1005859E4(a1 + 48, a2 + 48);
}

uint64_t sub_10087D04C(uint64_t a1)
{
  return sub_1005858A0(a1 + 48);
}

uint64_t sub_10087D054(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10087D0C4;
  v3[3] = &unk_10185AB28;
  uint64_t v5 = v1;
  __int128 v4 = *(_OWORD *)(result + 32);
  uint64_t v2 = *(void *)(result + 64);
  if (v2)
  {
    if (*(void *)(v2 + 8) != -1LL) {
      return sub_10087D0C4(v3);
    }
  }

  return result;
}

uint64_t sub_10087D0C4(void *a1)
{
  uint64_t v2 = a1[6];
  sub_1005859E4((uint64_t)v4, *(void *)(a1[5] + 8LL) + 48LL);
  sub_10087B6F4(v2, v4, a1[4], 0LL);
  return sub_1005858A0((uint64_t)v4);
}

void sub_10087D118(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10087D12C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2)
  {
    char v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_10087D150(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10087D160(uint64_t a1)
{
}

void sub_10087D170(uint64_t a1, CLConnectionMessage **a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(buf, "com.apple.locationd.private_info");
  char v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 40LL))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v25) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0) {
      goto LABEL_3;
    }
LABEL_14:
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v15 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v24 = 2114;
      uint64_t v25 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning Client does not have appropriate entitlement to enable match info, ClientKey Path:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }

    goto LABEL_23;
  }

  if ((v5 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
  if (v7 && (sub_1002A9230(v7, (BOOL *)(a1 + 277)) & 1) != 0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    unint64_t v8 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = *(unsigned __int8 *)(a1 + 277);
      *(_DWORD *)uint64_t buf = 138412546;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Client %@ is setting match info enabled to %d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      char v11 = *(const char **)(a1 + 48);
      int v12 = *(unsigned __int8 *)(a1 + 277);
      int v19 = 138412546;
      uint64_t v20 = v11;
      __int16 v21 = 1024;
      int v22 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "Client %@ is setting match info enabled to %d",  &v19,  18);
      uint64_t v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageMatchInfoEnabled(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v13);
LABEL_27:
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v17 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v19 = 136446210;
      uint64_t v20 = "kCLConnectionMessageEnabledKey";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v19,  12);
      uint64_t v14 = (char *)v18;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageMatchInfoEnabled(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v18);
      goto LABEL_27;
    }
  }

void sub_10087D5A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_10087D5F0(uint64_t a1, CLConnectionMessage **a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(buf, "com.apple.locationd.private_info");
  char v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 40LL))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0) {
      goto LABEL_3;
    }
  }

  else if ((v5 & 1) != 0)
  {
LABEL_3:
    id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
    if (!v7 || (sub_1002A9230(v7, (BOOL *)(a1 + 278)) & 1) == 0)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      unint64_t v8 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185AF80);
        }
        int v13 = 136446210;
        uint64_t v14 = "kCLConnectionMessageEnabledKey";
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v13,  12);
        int v10 = (char *)v9;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageGroundAltitudeEnabled(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v9);
        if (v10 != buf) {
          free(v10);
        }
      }
    }

    goto LABEL_19;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  char v11 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v16 = 2114;
    uint64_t v17 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning Client does not have appropriate entitlement to enable ground altitude, Client KeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

void sub_10087D8BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_10087D904(uint64_t a1, CLConnectionMessage **a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(buf, "com.apple.locationd.private_info");
  char v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 40LL))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0) {
      goto LABEL_3;
    }
  }

  else if ((v5 & 1) != 0)
  {
LABEL_3:
    id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
    if (!v7 || (sub_1002A9230(v7, (BOOL *)(a1 + 279)) & 1) == 0)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      unint64_t v8 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185AF80);
        }
        int v13 = 136446210;
        uint64_t v14 = "kCLConnectionMessageEnabledKey";
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v13,  12);
        int v10 = (char *)v9;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageFusionInfoEnabled(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v9);
        if (v10 != buf) {
          free(v10);
        }
      }
    }

    goto LABEL_19;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  char v11 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v16 = 2114;
    uint64_t v17 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning Client does not have appropriate entitlement to enable fusion info, ClientKeyP ath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

void sub_10087DBD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_10087DC18(uint64_t a1, CLConnectionMessage **a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(buf, "com.apple.locationd.private_info");
  char v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 40LL))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0) {
      goto LABEL_3;
    }
  }

  else if ((v5 & 1) != 0)
  {
LABEL_3:
    id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
    if (!v7 || (sub_1002A9230(v7, (BOOL *)(a1 + 280)) & 1) == 0)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      unint64_t v8 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185AF80);
        }
        int v13 = 136446210;
        uint64_t v14 = "kCLConnectionMessageEnabledKey";
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v13,  12);
        int v10 = (char *)v9;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageTrackRunInfoEnabled(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v9);
        if (v10 != buf) {
          free(v10);
        }
      }
    }

    goto LABEL_19;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  char v11 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v16 = 2114;
    uint64_t v17 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning Client does not have appropriate entitlement to enable track run info, ClientK eyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

void sub_10087DEE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_10087DF2C(uint64_t a1, CLConnectionMessage **a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(buf, "com.apple.locationd.prompt_behavior");
  char v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 40LL))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v27) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0) {
      goto LABEL_3;
    }
LABEL_14:
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v15 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v26 = 2114;
      uint64_t v27 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Client does not have appropriate entitlement to change prompt behaviour, ClientKeyPat h:%{public, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
    }

    uint64_t v17 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      uint64_t v18 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v26 = 2114;
      uint64_t v27 = v18;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Client does not have appropriate entitlement to change prompt behaviour",  "{msg%{public}.0s:Client does not have appropriate entitlement to change prompt behaviour, ClientKeyPat h:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }

    goto LABEL_26;
  }

  if ((v5 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
  if (v7 && (sub_1002A9230(v7, (BOOL *)(a1 + 368)) & 1) != 0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    unint64_t v8 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = *(unsigned __int8 *)(a1 + 368);
      *(_DWORD *)uint64_t buf = 138412546;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Client %@ is setting location prompt allowed to %d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      char v11 = *(const char **)(a1 + 48);
      int v12 = *(unsigned __int8 *)(a1 + 368);
      int v21 = 138412546;
      int v22 = v11;
      __int16 v23 = 1024;
      int v24 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "Client %@ is setting location prompt allowed to %d",  &v21,  18);
      uint64_t v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageAllowsLocationPrompts(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v13);
LABEL_30:
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    int v19 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v21 = 136446210;
      int v22 = "kCLConnectionMessageEnabledKey";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v21,  12);
      uint64_t v14 = (char *)v20;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageAllowsLocationPrompts(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v20);
      goto LABEL_30;
    }
  }

void sub_10087E3F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_10087E448(uint64_t a1, CLConnectionMessage **a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_1010DDBC0(buf, "com.apple.locationd.prompt_behavior");
  char v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 40LL))(a1, buf);
  char v6 = v5;
  if (SBYTE3(v27) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0) {
      goto LABEL_3;
    }
LABEL_14:
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v15 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v26 = 2114;
      uint64_t v27 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "{msg%{public}.0s:Client does not have appropriate entitlement to change prompt behaviour, ClientKeyPat h:%{public, location:escape_only}@}",  buf,  0x1Cu);
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
    }

    uint64_t v17 = (os_log_s *)qword_101934978;
    if (os_signpost_enabled((os_log_t)qword_101934978))
    {
      uint64_t v18 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v26 = 2114;
      uint64_t v27 = v18;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Client does not have appropriate entitlement to change prompt behaviour",  "{msg%{public}.0s:Client does not have appropriate entitlement to change prompt behaviour, ClientKeyPat h:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }

    goto LABEL_26;
  }

  if ((v5 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEnabledKey"];
  if (v7 && (sub_1002A9230(v7, (BOOL *)(a1 + 369)) & 1) != 0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    unint64_t v8 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = *(unsigned __int8 *)(a1 + 369);
      *(_DWORD *)uint64_t buf = 138412546;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Client %@ is setting location prompt show to %d",  buf,  0x12u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      char v11 = *(const char **)(a1 + 48);
      int v12 = *(unsigned __int8 *)(a1 + 369);
      int v21 = 138412546;
      int v22 = v11;
      __int16 v23 = 1024;
      int v24 = v12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "Client %@ is setting location prompt show to %d",  &v21,  18);
      uint64_t v14 = (char *)v13;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageShowLocationPrompt(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v13);
LABEL_30:
      if (v14 != buf) {
        free(v14);
      }
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    int v19 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = "kCLConnectionMessageEnabledKey";
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v21 = 136446210;
      int v22 = "kCLConnectionMessageEnabledKey";
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v21,  12);
      uint64_t v14 = (char *)v20;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageShowLocationPrompt(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v20);
      goto LABEL_30;
    }
  }

void sub_10087E914( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_10087E964(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  char v3 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 138543362;
    uint64_t v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client %{public}@ is registering as a location client and will show up in Settings",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v5 = *(void *)(a1 + 48);
    int v8 = 138543362;
    uint64_t v9 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "Client %{public}@ is registering as a location client and will show up in Settings",  &v8,  12);
    id v7 = (uint8_t *)v6;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageRegisterAsLocationClient(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v6);
    if (v7 != buf) {
      free(v7);
    }
  }

  sub_10055DB84(*(void *)(a1 + 16), *(void *)(a1 + 48));
}

void sub_10087EB34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10087EB60(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_1019349A0 != -1) {
    dispatch_once(&qword_1019349A0, &stru_10185B000);
  }
  uint64_t v5 = (os_log_s *)qword_1019349A8;
  if (os_log_type_enabled((os_log_t)qword_1019349A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 68289282;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2114;
    uint64_t v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning The SPI is not supported on this device, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  uint64_t v7 = *a2;
  int v10 = @"kCLConnectionMessageErrorKey";
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  uint64_t v9 = @"Not supported.";
  uint64_t v11 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL);
  CLConnectionMessage::sendReply(v7);
}

void sub_10087ECF0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_10087ED18(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  -[NSMutableDictionary objectForKey:]( sub_1005705D0(*(void *)(a1 + 16), 0, 0),  "objectForKey:",  [*(id *)(a1 + 48) clientKey]);
  CLConnectionMessage::sendReply(*a2);
}

void sub_10087ED8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10087EDA0(void *a1, CLConnectionMessage **a2)
{
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1002A5550((int)v9, Dictionary);
  if ((sub_1002A6F64((uint64_t)v9, "kCLConnectionMessageSubscribeKey", (BOOL *)&v8 + 7) & 1) != 0)
  {
    sub_10087EFB4(a1, HIBYTE(v8));
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      int v13 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v10 = 136446210;
      uint64_t v11 = "kCLConnectionMessageSubscribeKey";
      LODWORD(v8) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v10,  v8);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageVehicleSpeed(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return sub_1002A5590(v9);
}

void sub_10087EF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10087EFB4(void *a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185AF80);
  }
  uint64_t v5 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = a1[6];
    *(_DWORD *)uint64_t buf = 138412546;
    uint64_t v28 = v6;
    __int16 v29 = 1024;
    int v30 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Received VehicleSpeed request,client,%@,subscribe,%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v13 = a1[6];
    int v23 = 138412546;
    uint64_t v24 = v13;
    __int16 v25 = 1024;
    int v26 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "Received VehicleSpeed request,client,%@,subscribe,%d",  &v23,  18);
    uint64_t v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleRequestVehicleSpeed(BOOL, const CLNameValuePair &)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  if (sub_1008885CC(a1))
  {
    (*(void (**)(void *, const char *, uint64_t))(*a1 + 32LL))(a1, "kCLConnectionMessageVehicleSpeed", a2);
    if ((_DWORD)a2)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      uint64_t v7 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = a1[6];
        *(_DWORD *)uint64_t buf = 138412290;
        uint64_t v28 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "client '%@' subscribing to vehicle speed",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185AF80);
        }
        uint64_t v16 = a1[6];
        int v23 = 138412290;
        uint64_t v24 = v16;
        LODWORD(v22) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "client '%@' subscribing to vehicle speed",  &v23,  v22);
        uint64_t v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleRequestVehicleSpeed(BOOL, const CLNameValuePair &)",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      uint64_t v9 = sub_10086A5F4((uint64_t)a1);
      [*(id *)(*(void *)v9 + 16) register:*(void *)(*(void *)v9 + 8) forNotification:20 registrationInfo:0];
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v10 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = a1[6];
        *(_DWORD *)uint64_t buf = 138412290;
        uint64_t v28 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "client '%@' unsubscribing from vehicle speed",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185AF80);
        }
        uint64_t v19 = a1[6];
        int v23 = 138412290;
        uint64_t v24 = v19;
        LODWORD(v22) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "client '%@' unsubscribing from vehicle speed",  &v23,  v22);
        int v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleRequestVehicleSpeed(BOOL, const CLNameValuePair &)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }

      uint64_t v12 = sub_10086A5F4((uint64_t)a1);
      [*(id *)(*(void *)v12 + 16) unregister:*(void *)(*(void *)v12 + 8) forNotification:20];
    }
  }
}

void sub_10087F488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10087F4C4(void *a1, CLConnectionMessage **a2)
{
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1002A5550((int)v9, Dictionary);
  if ((sub_1002A6F64((uint64_t)v9, "kCLConnectionMessageSubscribeKey", (BOOL *)&v8 + 7) & 1) != 0)
  {
    sub_10087F6D8(a1, HIBYTE(v8));
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v13 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v10 = 136446210;
      uint64_t v11 = "kCLConnectionMessageSubscribeKey";
      LODWORD(v8) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v10,  v8);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageVehicleHeading(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return sub_1002A5590(v9);
}

void sub_10087F6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10087F6D8(void *a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185AF80);
  }
  uint64_t v5 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = a1[6];
    *(_DWORD *)uint64_t buf = 138412546;
    uint64_t v28 = v6;
    __int16 v29 = 1024;
    int v30 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Received VehicleHeading request,client,%@,subscribe,%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v13 = a1[6];
    int v23 = 138412546;
    uint64_t v24 = v13;
    __int16 v25 = 1024;
    int v26 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "Received VehicleHeading request,client,%@,subscribe,%d",  &v23,  18);
    uint64_t v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleRequestVehicleHeading(BOOL, const CLNameValuePair &)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  if (sub_1008885CC(a1))
  {
    (*(void (**)(void *, const char *, uint64_t))(*a1 + 32LL))(a1, "kCLConnectionMessageVehicleHeading", a2);
    if ((_DWORD)a2)
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      uint64_t v7 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = a1[6];
        *(_DWORD *)uint64_t buf = 138412290;
        uint64_t v28 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "client '%@' subscribing to vehicle heading",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185AF80);
        }
        uint64_t v16 = a1[6];
        int v23 = 138412290;
        uint64_t v24 = v16;
        LODWORD(v22) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "client '%@' subscribing to vehicle heading",  &v23,  v22);
        uint64_t v18 = (uint8_t *)v17;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleRequestVehicleHeading(BOOL, const CLNameValuePair &)",  "%s\n",  v17);
        if (v18 != buf) {
          free(v18);
        }
      }

      uint64_t v9 = sub_10086A5F4((uint64_t)a1);
      [*(id *)(*(void *)v9 + 16) register:*(void *)(*(void *)v9 + 8) forNotification:21 registrationInfo:0];
    }

    else
    {
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v10 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = a1[6];
        *(_DWORD *)uint64_t buf = 138412290;
        uint64_t v28 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "client '%@' unsubscribing from vehicle heading",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185AF80);
        }
        uint64_t v19 = a1[6];
        int v23 = 138412290;
        uint64_t v24 = v19;
        LODWORD(v22) = 12;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  2LL,  "client '%@' unsubscribing from vehicle heading",  &v23,  v22);
        int v21 = (uint8_t *)v20;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleRequestVehicleHeading(BOOL, const CLNameValuePair &)",  "%s\n",  v20);
        if (v21 != buf) {
          free(v21);
        }
      }

      uint64_t v12 = sub_10086A5F4((uint64_t)a1);
      [*(id *)(*(void *)v12 + 16) unregister:*(void *)(*(void *)v12 + 8) forNotification:21];
    }
  }
}

void sub_10087FBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10087FBE8(uint64_t a1, CLConnectionMessage **a2)
{
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1002A5550((int)v9, Dictionary);
  if ((sub_1002A6F64((uint64_t)v9, "kCLConnectionMessageSubscribeKey", (BOOL *)&v8 + 7) & 1) != 0)
  {
    sub_10087FE00(a1, HIBYTE(v8), (uint64_t)v9);
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v13 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v10 = 136446210;
      uint64_t v11 = "kCLConnectionMessageSubscribeKey";
      LODWORD(v8) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v10,  v8);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageGyroBiasEstimation(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return sub_1002A5590(v9);
}

void sub_10087FDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10087FE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934590 != -1) {
    dispatch_once(&qword_101934590, &stru_10185AFA0);
  }
  uint64_t v7 = (os_log_s *)off_101934598;
  if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 138543618;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&_BYTE buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "CLDaemonClient received GyroBiasEstimation request,client,%{public}@,subscribe,%{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10185AFA0);
    }
    uint64_t v18 = *(void *)(a1 + 48);
    int v31 = 138543618;
    uint64_t v32 = v18;
    __int16 v33 = 1026;
    int v34 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "CLDaemonClient received GyroBiasEstimation request,client,%{public}@,subscribe,%{public}d",  &v31,  18);
    uint64_t v20 = (char *)v19;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)",  "%s\n",  v19);
    if (v20 != buf) {
      free(v20);
    }
  }

  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 32LL))( a1,  "kCLConnectionMessageGyroBiasEstimation",  a2);
  if ((_DWORD)a2)
  {
    if ((sub_1002A6F64(a3, "kCLConnectionMessageBuildGYTTKey", &v30) & 1) != 0)
    {
      if (v30) {
        objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLGyroCalibrationDatabase"),  "startFactoryGYTT");
      }
    }

    else
    {
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10185AFA0);
      }
      uint64_t v11 = (os_log_s *)off_101934598;
      if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "isBuildingGYTT not set", buf, 2u);
      }

      if (sub_1002921D0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934590 != -1) {
          dispatch_once(&qword_101934590, &stru_10185AFA0);
        }
        LOWORD(v31) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  17LL,  "isBuildingGYTT not set",  &v31,  v27);
        int v26 = (char *)v25;
        sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)",  "%s\n",  v25);
        if (v26 != buf) {
          free(v26);
        }
      }

      BOOL v30 = 0;
    }

    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10185AFA0);
    }
    uint64_t v12 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "CLDaemonClient got gyro bias estimation subscription request,isBuildingGYTT,%{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10185AFA0);
      }
      int v31 = 67240192;
      LODWORD(v32) = v30;
      LODWORD(v27) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "CLDaemonClient got gyro bias estimation subscription request,isBuildingGYTT,%{public}d",  &v31,  v27);
      uint64_t v24 = (char *)v23;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
    }

    sub_1002B68E8(a1 + 400, buf);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = sub_100E28910();
    BOOL v15 = v30;
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3321888768LL;
    double v28[2] = sub_100883764;
    v28[3] = &unk_10185ACD0;
    v28[4] = v13;
    v28[5] = a1;
    v28[6] = *(void *)buf;
    __int16 v29 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v16 = (unint64_t *)(*(void *)&buf[8] + 16LL);
      do
        unint64_t v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }

    sub_100E29370(v14, a1, v15, (uint64_t)v28);
    *(_BYTE *)(a1 + 276) = 1;
    if (v29) {
      std::__shared_weak_count::__release_weak(v29);
    }
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
  }

  else
  {
    if (qword_101934590 != -1) {
      dispatch_once(&qword_101934590, &stru_10185AFA0);
    }
    uint64_t v9 = (os_log_s *)off_101934598;
    if (os_log_type_enabled((os_log_t)off_101934598, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "CLDaemonClient got gyro bias estimation unsubscription request",  buf,  2u);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934590 != -1) {
        dispatch_once(&qword_101934590, &stru_10185AFA0);
      }
      LOWORD(v31) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  off_101934598,  1LL,  "CLDaemonClient got gyro bias estimation unsubscription request",  &v31,  v27);
      uint64_t v22 = (char *)v21;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)",  "%s\n",  v21);
      if (v22 != buf) {
        free(v22);
      }
    }

    uint64_t v10 = sub_100E28910();
    sub_100E29370(v10, a1, 0, 0LL);
    *(_BYTE *)(a1 + 276) = 0;
  }
}

void sub_1008804A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, std::__shared_weak_count *a26)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100880510(uint64_t a1, CLConnectionMessage **a2)
{
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1002A5550((int)v9, Dictionary);
  if ((sub_1002A6F64((uint64_t)v9, "kCLConnectionMessageSubscribeKey", (BOOL *)&v8 + 7) & 1) != 0)
  {
    sub_100880724(a1, HIBYTE(v8));
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v13 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v10 = 136446210;
      uint64_t v11 = "kCLConnectionMessageSubscribeKey";
      LODWORD(v8) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v10,  v8);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageGmm(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return sub_1002A5590(v9);
}

void sub_100880704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100880724(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934580 != -1) {
    dispatch_once(&qword_101934580, &stru_10185AFC0);
  }
  uint64_t v5 = (os_log_s *)qword_101934588;
  if (os_log_type_enabled((os_log_t)qword_101934588, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 138543618;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v19 = 1026;
    int v20 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Received GMM request,client,%{public}@,subscribe,%{public}d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934580 != -1) {
      dispatch_once(&qword_101934580, &stru_10185AFC0);
    }
    uint64_t v11 = *(void *)(a1 + 48);
    int v14 = 138543618;
    uint64_t v15 = v11;
    __int16 v16 = 1026;
    int v17 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934588,  2LL,  "Received GMM request,client,%{public}@,subscribe,%{public}d",  &v14,  18);
    uint64_t v13 = (char *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleRequestGmm(BOOL, const CLNameValuePair &)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 32LL))(a1, "kCLConnectionMessageGmm", a2);
  uint64_t v7 = *(void *)(a1 + 224);
  if ((_DWORD)a2)
  {
    if (!v7)
    {
      sub_100A15BEC((uint64_t)sub_1008838B8, a1, *(void **)(a1 + 24), buf);
      uint64_t v8 = *(void *)buf;
      *(void *)uint64_t buf = 0LL;
      uint64_t v9 = *(void *)(a1 + 224);
      *(void *)(a1 + 224) = v8;
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
        uint64_t v10 = *(void *)buf;
        *(void *)uint64_t buf = 0LL;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
        }
      }

      [*(id *)(*(void *)(a1 + 224) + 16) register:*(void *)(*(void *)(a1 + 224) + 8) forNotification:0 registrationInfo:0];
    }
  }

  else if (v7)
  {
    *(void *)(a1 + 224) = 0LL;
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
}

void sub_1008809B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1008809E4(uint64_t a1, CLConnectionMessage **a2)
{
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_1002A5550((int)v9, Dictionary);
  if ((sub_1002A6F64((uint64_t)v9, "kCLConnectionMessageSubscribeKey", (BOOL *)&v8 + 7) & 1) != 0)
  {
    sub_100880BF8(a1, HIBYTE(v8));
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v4 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v13 = "kCLConnectionMessageSubscribeKey";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "Couldn't get value for key %{public}s",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      int v10 = 136446210;
      uint64_t v11 = "kCLConnectionMessageSubscribeKey";
      LODWORD(v8) = 12;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  17LL,  "Couldn't get value for key %{public}s",  &v10,  v8);
      uint64_t v7 = (uint8_t *)v6;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessagePressureBias(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v6);
      if (v7 != buf) {
        free(v7);
      }
    }
  }

  return sub_1002A5590(v9);
}

void sub_100880BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100880BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_1019345B0 != -1) {
    dispatch_once(&qword_1019345B0, &stru_10185AFE0);
  }
  uint64_t v5 = (os_log_s *)qword_1019345B8;
  if (os_log_type_enabled((os_log_t)qword_1019345B8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 138412546;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Received pressure bias estimation request.,client,%@,subscribe,%d",  buf,  0x12u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345B0 != -1) {
      dispatch_once(&qword_1019345B0, &stru_10185AFE0);
    }
    uint64_t v11 = *(void *)(a1 + 48);
    int v14 = 138412546;
    uint64_t v15 = v11;
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345B8,  2LL,  "Received pressure bias estimation request.,client,%@,subscribe,%d",  &v14,  18);
    uint64_t v13 = (char *)v12;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleRequestPressureBias(BOOL, const CLNameValuePair &)",  "%s\n",  v12);
    if (v13 != buf) {
      free(v13);
    }
  }

  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 32LL))( a1,  "kCLConnectionMessagePressureBias",  a2);
  uint64_t v7 = *(void *)(a1 + 232);
  if ((_DWORD)a2)
  {
    if (!v7)
    {
      sub_100C8F484((uint64_t)sub_100883A90, a1, *(void **)(a1 + 24), buf);
      uint64_t v8 = *(void *)buf;
      *(void *)uint64_t buf = 0LL;
      uint64_t v9 = *(void *)(a1 + 232);
      *(void *)(a1 + 232) = v8;
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
        uint64_t v10 = *(void *)buf;
        *(void *)uint64_t buf = 0LL;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
        }
      }

      [*(id *)(*(void *)(a1 + 232) + 16) register:*(void *)(*(void *)(a1 + 232) + 8) forNotification:0 registrationInfo:0];
    }
  }

  else
  {
    *(void *)(a1 + 232) = 0LL;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
  }
}

void sub_100880E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100880EB8(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40LL))(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_100880F18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100880F34(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 196))
  {
    if (sub_100880EB8(a1)
      || (uint64_t v2 = kTCCServiceMotion,
          CLConnection::getAuditToken(*(CLConnection **)(a1 + 264)),
          TCCAccessCheckAuditToken(v2, v9, 0LL)))
    {
      *(_DWORD *)(a1 + 196) = 1;
    }

    else
    {
      *(_DWORD *)(a1 + 196) = 2;
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      uint64_t v4 = (os_log_s *)qword_101934988;
      if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t buf = 138412290;
        uint64_t v13 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %@ did not pass entitlement/tcc checks.",  buf,  0xCu);
      }

      if (sub_1002921D0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_101934980 != -1) {
          dispatch_once(&qword_101934980, &stru_10185AF80);
        }
        uint64_t v6 = *(void *)(a1 + 48);
        int v10 = 138412290;
        uint64_t v11 = v6;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning Client %@ did not pass entitlement/tcc checks.",  &v10,  12);
        uint64_t v8 = (uint8_t *)v7;
        sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLDaemonClient::isAuthorizedForMotionActivity()",  "%s\n",  v7);
        if (v8 != buf) {
          free(v8);
        }
      }
    }
  }

  return *(_DWORD *)(a1 + 196) == 1;
}

BOOL sub_100881140(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 200)) {
    return *(_DWORD *)(a1 + 200) == 1;
  }
  if (sub_100880EB8(a1))
  {
LABEL_5:
    *(_DWORD *)(a1 + 20sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 1;
    return *(_DWORD *)(a1 + 200) == 1;
  }

  if (!sub_100E7D40C(0))
  {
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185B020);
    }
    char v3 = (os_log_s *)qword_1019344B8;
    if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v16 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Client %@ cannot access sensor recorder, invalid target.\n",  buf,  0xCu);
    }

    if (!sub_1002921D0(115, 2)) {
      return *(_DWORD *)(a1 + 200) == 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185B020);
    }
    uint64_t v5 = *(void *)(a1 + 48);
    int v13 = 138412290;
    uint64_t v14 = v5;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "Client %@ cannot access sensor recorder, invalid target.\n",  &v13,  12);
LABEL_23:
    uint64_t v11 = (uint8_t *)v6;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLDaemonClient::isAuthorizedForSensorRecorder()", "%s\n", v6);
    if (v11 != buf) {
      free(v11);
    }
    return *(_DWORD *)(a1 + 200) == 1;
  }

  uint64_t v2 = kTCCServiceMotion;
  CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
  *(_DWORD *)(a1 + 20sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 2;
  if (qword_1019344B0 != -1) {
    dispatch_once(&qword_1019344B0, &stru_10185B020);
  }
  uint64_t v7 = (os_log_s *)qword_1019344B8;
  if (os_log_type_enabled((os_log_t)qword_1019344B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 138412290;
    uint64_t v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Client %@ did not pass entitlement/tcc checks.\n",  buf,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019344B0 != -1) {
      dispatch_once(&qword_1019344B0, &stru_10185B020);
    }
    uint64_t v10 = *(void *)(a1 + 48);
    int v13 = 138412290;
    uint64_t v14 = v10;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344B8,  0LL,  "Client %@ did not pass entitlement/tcc checks.\n",  &v13,  12);
    goto LABEL_23;
  }

  return *(_DWORD *)(a1 + 200) == 1;
}

uint64_t sub_10088144C(uint64_t a1, void *a2)
{
  uint64_t v4 = CMErrorMessage;
  uint64_t v5 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL);
  return CLConnectionMessage::sendReply(*a2);
}

void sub_1008814E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_100880EB8(a1) & 1) != 0)
  {
    id v5 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLVehicleConnectionNotifier");
    [v5 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3321888768LL;
    _OWORD v18[2] = sub_10088185C;
    v18[3] = &unk_10185ABA8;
    uint64_t v7 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v18[4] = a1;
    v18[5] = v7;
    __int16 v19 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }

    [v5 fetchMostRecentConnectionWithReply:v18];
    uint64_t v10 = v19;
    if (v19)
    {
      uint64_t v11 = (unint64_t *)&v19->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }

  else
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    int v13 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v23 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %@ does not have appropriate entitlement to access motion activity spi",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      uint64_t v15 = *(void *)(a1 + 48);
      int v20 = 138412290;
      uint64_t v21 = v15;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning Client %@ does not have appropriate entitlement to access motion activity spi",  &v20,  12);
      int v17 = (uint8_t *)v16;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageVehicleConnectionMostRecent(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v16);
      if (v17 != buf) {
        free(v17);
      }
    }

    sub_1008817C0(a1, 106LL);
  }
}

void sub_100881780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008817C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = CMErrorMessage;
  id v5 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  char v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL);
  sub_1008AC668(a1, &v3);
}

void sub_10088185C(void *a1, uint64_t a2)
{
  if (*(double *)a2 <= 0.0)
  {
    uint64_t v7 = (std::__shared_weak_count *)a1[6];
    v17[0] = a1[5];
    v17[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }

    sub_10088144C((uint64_t)a1, v17);
    if (v7)
    {
      uint64_t v10 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

  else
  {
    uint64_t v4 = a1[4];
    id v5 = -[CMMotionTimeRange initWithStartDate:endDate:]( objc_alloc(&OBJC_CLASS___CMMotionTimeRange),  "initWithStartDate:endDate:",  *(double *)a2,  *(double *)(a2 + 8));
    if (*(_BYTE *)(a2 + 16)) {
      uint64_t v6 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a2 + 16);
    }
    else {
      uint64_t v6 = 0LL;
    }
    if (*(_BYTE *)(a2 + 272)) {
      unint64_t v12 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a2 + 272);
    }
    else {
      unint64_t v12 = 0LL;
    }
    if (*(_BYTE *)(a2 + 528)) {
      int v13 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a2 + 528);
    }
    else {
      int v13 = 0LL;
    }
    uint64_t v14 = -[CMVehicleStateData initWithTimeRange:vehicleName:vehicleModelName:vehicleBluetoothAddress:]( objc_alloc(&OBJC_CLASS___CMVehicleStateData),  "initWithTimeRange:vehicleName:vehicleModelName:vehicleBluetoothAddress:",  v5,  v6,  v12,  v13);
    uint64_t v26 = CMVehicleConnectionDataKey;
    uint64_t v27 = v14;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL);
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10185B040);
    }
    uint64_t v15 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(v4 + 48);
      *(_DWORD *)uint64_t buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      uint64_t v21 = "";
      __int16 v22 = 2113;
      uint64_t v23 = v16;
      __int16 v24 = 2113;
      __int16 v25 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Sending vehicle connection, to client:%{private, location:escape_only}@, data:% {private, location:escape_only}@}",  buf,  0x26u);
    }

    CLConnectionMessage::sendReply(a1[5]);
  }

void sub_100881B18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100881B34(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_100880EB8(a1) & 1) == 0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v8 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v29 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %@ does not have appropriate entitlement to access motion activity spi",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      uint64_t v18 = *(void *)(a1 + 48);
      int v26 = 138412290;
      uint64_t v27 = v18;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning Client %@ does not have appropriate entitlement to access motion activity spi",  &v26,  12);
      __int16 v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageVehicleStateMostRecentInVehicle(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    uint64_t v7 = 106LL;
    goto LABEL_15;
  }

  if ((sub_1004F97F4() & 0x80000000) == 0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    id v5 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v29 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %@ does not have access to motion activity spi because the platform is not supported",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      uint64_t v21 = *(void *)(a1 + 48);
      int v26 = 138412290;
      uint64_t v27 = v21;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning Client %@ does not have access to motion activity spi because the platform is not supported",  &v26,  12);
      uint64_t v23 = (uint8_t *)v22;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageVehicleStateMostRecentInVehicle(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v22);
      if (v23 != buf) {
        free(v23);
      }
    }

    uint64_t v7 = 109LL;
LABEL_15:
    sub_100881F7C(a1, v7);
    goto LABEL_16;
  }

  id v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLVehicleConnectionNotifier");
  [v10 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3321888768LL;
  void v24[2] = sub_100882018;
  void v24[3] = &unk_10185ABD8;
  uint64_t v12 = *a2;
  unint64_t v11 = (std::__shared_weak_count *)a2[1];
  v24[4] = a1;
  v24[5] = v12;
  __int16 v25 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }

  [v10 fetchMostRecentInVehicleStartAndExitTimesWithReply:v24];
  uint64_t v15 = v25;
  if (v25)
  {
    uint64_t v16 = (unint64_t *)&v25->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

void sub_100881F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100881F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = CMErrorMessage;
  id v5 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  char v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL);
  sub_1008AC708(a1, &v3);
}

void sub_100882018(uint64_t a1, double a2, double a3)
{
  if (a2 <= 0.0)
  {
    id v5 = *(std::__shared_weak_count **)(a1 + 48);
    v10[0] = *(void *)(a1 + 40);
    v10[1] = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }

    sub_10088144C(a1, v10);
    if (v5)
    {
      uint64_t v8 = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

  else
  {
    v11[0] = CMVehicleConnectionStartTime;
    v12[0] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
    v11[1] = CMVehicleConnectionEndTime;
    v12[1] = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a3);
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  2LL);
    CLConnectionMessage::sendReply(*(void *)(a1 + 40));
  }

void sub_10088216C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100882188(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_100880EB8(a1) & 1) != 0)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    uint64_t v6 = Dictionary;
    if (Dictionary
      && (uint64_t v7 = CMVehicleStateDeviceId, [Dictionary objectForKeyedSubscript:CMVehicleStateDeviceId])
      && (uint64_t v8 = CMVehicleStateDeviceType, [v6 objectForKeyedSubscript:CMVehicleStateDeviceType]))
    {
      id v9 = [v6 objectForKeyedSubscript:v7];
      id v10 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLVehicleConnectionNotifier");
      [v10 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
      id v11 = objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", v8), "unsignedIntegerValue");
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3321888768LL;
      v31[2] = sub_100882708;
      v31[3] = &unk_10185AC08;
      uint64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
      v31[4] = *(void *)a2;
      uint64_t v32 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          unint64_t v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }

      [v10 fetchIsDeviceVehicle:v9 deviceType:v11 withReply:v31];
      uint64_t v15 = v32;
      if (v32)
      {
        uint64_t v16 = (unint64_t *)&v32->__shared_owners_;
        do
          unint64_t v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        goto LABEL_29;
      }
    }

    else
    {
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10185B040);
      }
      __int16 v20 = (os_log_s *)qword_1019344F8;
      if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_FAULT,  "Error checking IsVehicle with device address and type!",  buf,  2u);
      }

      uint64_t v21 = sub_1002921D0(115, 0);
      if ((_DWORD)v21)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1019344F0 != -1) {
          dispatch_once(&qword_1019344F0, &stru_10185B040);
        }
        LOWORD(v34) = 0;
        _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  17LL,  "Error checking IsVehicle with device address and type!",  &v34,  2);
        BOOL v30 = (uint8_t *)v29;
        uint64_t v21 = sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageVehicleStateIsVehicle(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v29);
        if (v30 != buf) {
          free(v30);
        }
      }

      __int16 v22 = *(CLConnectionMessage **)a2;
      uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
      v33[0] = v22;
      v33[1] = v15;
      if (v15)
      {
        uint64_t v23 = (unint64_t *)&v15->__shared_owners_;
        do
          unint64_t v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }

      sub_10088144C(v21, v33);
      if (v15)
      {
        __int16 v25 = (unint64_t *)&v15->__shared_owners_;
        do
          unint64_t v17 = __ldaxr(v25);
        while (__stlxr(v17 - 1, v25));
LABEL_29:
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }

  else
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10185B040);
    }
    uint64_t v18 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138543362;
      uint64_t v37 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %{public}@ does not have appropriate entitlement to access motion activity SPI",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10185B040);
      }
      uint64_t v26 = *(void *)(a1 + 48);
      int v34 = 138543362;
      uint64_t v35 = v26;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#Warning Client %{public}@ does not have appropriate entitlement to access motion activity SPI",  &v34,  12);
      uint64_t v28 = (uint8_t *)v27;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageVehicleStateIsVehicle(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v27);
      if (v28 != buf) {
        free(v28);
      }
    }

    sub_10088266C(a1, 106LL);
  }
}

void sub_100882614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10088266C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = CMErrorMessage;
  id v5 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  char v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL);
  sub_1008AC7A8(a1, &v3);
}

uint64_t sub_100882708(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v3 = 2LL;
  }
  else {
    uint64_t v3 = 1LL;
  }
  uint64_t v5 = CMVehicleStateIsVehicle;
  uint64_t v6 = +[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v3);
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL);
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_1008827A8(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_100880EB8(a1) & 1) == 0)
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10185B040);
    }
    uint64_t v8 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138543362;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %{public}@ does not have appropriate entitlement to access motion activity SPI",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10185B040);
      }
      uint64_t v19 = *(void *)(a1 + 48);
      int v31 = 138543362;
      uint64_t v32 = v19;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#Warning Client %{public}@ does not have appropriate entitlement to access motion activity SPI",  &v31,  12);
      uint64_t v21 = (char *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageVehicularOperatorState(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    uint64_t v7 = 106LL;
    goto LABEL_15;
  }

  if ((sub_1004F97F4() & 0x800000000LL) == 0)
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10185B040);
    }
    uint64_t v5 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138543362;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %{public}@ does not have access to vehicular state SPI because the platform is not supported",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10185B040);
      }
      uint64_t v22 = *(void *)(a1 + 48);
      int v31 = 138543362;
      uint64_t v32 = v22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  0LL,  "#Warning Client %{public}@ does not have access to vehicular state SPI because the platform is not supported",  &v31,  12);
      unint64_t v24 = (char *)v23;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageVehicularOperatorState(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
    }

    uint64_t v7 = 109LL;
LABEL_15:
    sub_100882DBC(a1, v7);
    goto LABEL_33;
  }

  id v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLVehicleStateNotifier");
  [v10 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
  if (v10)
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3321888768LL;
    double v27[2] = sub_100882E58;
    v27[3] = &unk_10185AC38;
    id v11 = (std::__shared_weak_count *)a2[1];
    v27[4] = *a2;
    uint64_t v28 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }

    [v10 fetchVehicularDndOperatorStateWithReply:v27];
    unint64_t v14 = v28;
    if (v28)
    {
      uint64_t v15 = (unint64_t *)&v28->__shared_owners_;
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

  else
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10185B040);
    }
    unint64_t v17 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Cannot find vehicle state proxy", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10185B040);
      }
      LOWORD(v31) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  16LL,  "Cannot find vehicle state proxy",  &v31,  2);
      uint64_t v26 = (char *)v25;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageVehicularOperatorState(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }

    uint64_t v18 = *a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v29 = CMErrorMessage;
    BOOL v30 = &off_1018D3B18;
    CLConnectionMessage::sendReply( v18,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
    if (v34 < 0) {
      operator delete(*(void **)buf);
    }
  }

LABEL_33:
}

void sub_100882D50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  _Unwind_Resume(a1);
}

void sub_100882DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = CMErrorMessage;
  uint64_t v5 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL);
  sub_1008AC848(a1, &v3);
}

uint64_t sub_100882E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = CMVehicularOperatorStateKey;
  uint64_t v5 = +[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2);
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL);
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_100882EF0(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_100880EB8(a1) & 1) == 0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v8 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %@ does not have appropriate entitlement to access motion activity spi",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      uint64_t v19 = *(void *)(a1 + 48);
      int v31 = 138412290;
      uint64_t v32 = v19;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning Client %@ does not have appropriate entitlement to access motion activity spi",  &v31,  12);
      uint64_t v21 = (char *)v20;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageVehicularState(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v20);
      if (v21 != buf) {
        free(v21);
      }
    }

    uint64_t v7 = 106LL;
    goto LABEL_15;
  }

  if ((sub_1004F97F4() & 0x800000000LL) == 0)
  {
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v5 = (os_log_s *)qword_101934988;
    if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %@ does not have access to vehicular state spi because the platform is not supported",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934980 != -1) {
        dispatch_once(&qword_101934980, &stru_10185AF80);
      }
      uint64_t v22 = *(void *)(a1 + 48);
      int v31 = 138412290;
      uint64_t v32 = v22;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning Client %@ does not have access to vehicular state spi because the platform is not supported",  &v31,  12);
      unint64_t v24 = (char *)v23;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageVehicularState(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v23);
      if (v24 != buf) {
        free(v24);
      }
    }

    uint64_t v7 = 109LL;
LABEL_15:
    sub_100883504(a1, v7);
    goto LABEL_33;
  }

  id v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLVehicleStateNotifier");
  [v10 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
  if (v10)
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3321888768LL;
    double v27[2] = sub_1008835A0;
    v27[3] = &unk_10185AC68;
    id v11 = (std::__shared_weak_count *)a2[1];
    v27[4] = *a2;
    uint64_t v28 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }

    [v10 fetchVehicularDndStateAndHintsWithReply:v27];
    unint64_t v14 = v28;
    if (v28)
    {
      uint64_t v15 = (unint64_t *)&v28->__shared_owners_;
      do
        unint64_t v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

  else
  {
    if (qword_1019344F0 != -1) {
      dispatch_once(&qword_1019344F0, &stru_10185B040);
    }
    unint64_t v17 = (os_log_s *)qword_1019344F8;
    if (os_log_type_enabled((os_log_t)qword_1019344F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Cannot find vehicle state proxy", buf, 2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344F0 != -1) {
        dispatch_once(&qword_1019344F0, &stru_10185B040);
      }
      LOWORD(v31) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344F8,  16LL,  "Cannot find vehicle state proxy",  &v31,  2);
      uint64_t v26 = (char *)v25;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageVehicularState(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v25);
      if (v26 != buf) {
        free(v26);
      }
    }

    uint64_t v18 = *a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v29 = CMErrorMessage;
    BOOL v30 = &off_1018D3B18;
    CLConnectionMessage::sendReply( v18,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
    if (v34 < 0) {
      operator delete(*(void **)buf);
    }
  }

LABEL_33:
}

void sub_100883498( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  _Unwind_Resume(a1);
}

void sub_100883504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = CMErrorMessage;
  uint64_t v5 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL);
  sub_1008AC8E8(a1, &v3);
}

uint64_t sub_1008835A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = CMVehicularStateKey;
  v7[0] = +[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2);
  v6[1] = CMVehicularHintsKey;
  v7[1] = +[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a3);
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  2LL);
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_100883664(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v6 = CMAvailable;
  else {
    unint64_t v5 = 0LL;
  }
  uint64_t v7 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5);
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL);
  CLConnectionMessage::sendReply(*a2);
}

void sub_100883738(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_100883764(void *a1, _OWORD *a2)
{
  v13[0] = *a2;
  *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)((char *)a2 + 12);
  unint64_t v5 = a1 + 4;
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = v5[1];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768LL;
  void v10[2] = sub_100883828;
  v10[3] = &unk_10185AC98;
  uint64_t v7 = a1[6];
  uint64_t v6 = (std::__shared_weak_count *)a1[7];
  v10[4] = v4;
  v10[5] = v7;
  id v11 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }

  v12[0] = v13[0];
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)v13 + 12);
  [v3 async:v10];
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_100883810( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100883828(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  v4[0] = *(_OWORD *)(a1 + 56);
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a1 + 68);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    if (*(void *)(v3 + 8) != -1LL) {
      return sub_10087695C(result, (uint64_t)v4);
    }
  }

  return result;
}

uint64_t sub_1008838A8(uint64_t a1)
{
  return sub_10087695C(*(void *)(a1 + 32), a1 + 40);
}

void sub_1008838B8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185AF40);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonClient::onGmmNotification",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185AF40);
    }
    unint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDaemonClient::onGmmNotification, event:%{public, location:escape_only}s, this :%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100876C40(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100883A70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100883A90(uint64_t a1, int *a2, UInt8 *a3, uint64_t a4)
{
  if (qword_1019349D0 != -1) {
    dispatch_once(&qword_1019349D0, &stru_10185AF40);
  }
  if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create( (void *)&_mh_execute_header,  "CL: CLDaemonClient::onPressureBias",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1019349D0 != -1) {
      dispatch_once(&qword_1019349D0, &stru_10185AF40);
    }
    unint64_t v9 = (os_log_s *)qword_1019349D8;
    if (os_log_type_enabled((os_log_t)qword_1019349D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDaemonClient::onPressureBias, event:%{public, location:escape_only}s, this:%{public}p}",  buf,  0x26u);
    }
  }

  else
  {
    char v11 = 0;
  }

  sub_100876F58(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100883C48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100883C68(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 152))(a1);
  if ((_DWORD)v5 && (uint64_t v5 = sub_100D3BAEC(a1[3]), (v5 & 1) != 0))
  {
    objc_opt_class(&OBJC_CLASS___CMFitnessMachineData);
    uint64_t v7 = v6;
    *(void *)&double v8 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses( *(CLConnectionMessage **)a2,  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v7, v8, v9, 0LL));
    char v11 = DictionaryOfClasses;
    if (DictionaryOfClasses)
    {
      uint64_t v12 = CMFitnessMachineDataRecord;
      if ([DictionaryOfClasses objectForKeyedSubscript:CMFitnessMachineDataRecord])
      {
        sub_100222B94(buf, (uint64_t)"CLDaemonClient.FitnessMachineData", 0);
        objc_msgSend( (id)sub_100884030((uint64_t)a1),  "feedFitnessMachineData:",  objc_msgSend(v11, "objectForKeyedSubscript:", v12));
        int v13 = *(CLConnectionMessage **)a2;
        uint64_t v32 = CMReturnCode;
        __int16 v33 = &off_1018D3B30;
        +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v33,  &v32,  1LL);
        CLConnectionMessage::sendReply(v13);
        sub_1001BA1BC(buf);
        goto LABEL_26;
      }
    }

    if (qword_1019344D0 != -1) {
      dispatch_once(&qword_1019344D0, &stru_10185B060);
    }
    __int16 v20 = (os_log_s *)qword_1019344D8;
    if (os_log_type_enabled((os_log_t)qword_1019344D8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_FAULT,  "Error receiving data from fitness machine",  (uint8_t *)buf,  2u);
    }

    uint64_t v21 = sub_1002921D0(115, 0);
    if ((_DWORD)v21)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019344D0 != -1) {
        dispatch_once(&qword_1019344D0, &stru_10185B060);
      }
      v30[0] = 0;
      LODWORD(v28) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019344D8,  17LL,  "Error receiving data from fitness machine",  v30,  v28);
      uint64_t v27 = (uint8_t *)v26;
      uint64_t v21 = sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageFitnessMachineData(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v26);
    }

    uint64_t v22 = *(CLConnectionMessage **)a2;
    uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
    v29[0] = v22;
    v29[1] = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }

    sub_10088144C(v21, v29);
    if (v15)
    {
      __int16 v25 = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(v25);
      while (__stlxr(v19 - 1, v25));
      goto LABEL_12;
    }
  }

  else
  {
    __int16 v14 = *(CLConnectionMessage **)a2;
    uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
    v31[0] = v14;
    v31[1] = v15;
    if (v15)
    {
      __int16 v16 = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }

    sub_10088144C(v5, v31);
    if (v15)
    {
      __int16 v18 = (unint64_t *)&v15->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
LABEL_12:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }

void sub_100883FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100884030(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result)
  {
    id v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLFitnessMachineNotifier");
    *(void *)(a1 + 256) = v3;
    [v3 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
    return *(void *)(a1 + 256);
  }

  return result;
}

void sub_10088407C(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_1004F97F4() & 0x20000) != 0)
  {
    unsigned int v7 = objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLGyroCalibrationDatabase"),  "syncgetBiasFit:",  v10);
    double v6 = v11;
    if (v11 > 0.0) {
      uint64_t v5 = v7;
    }
    else {
      uint64_t v5 = 0LL;
    }
  }

  else
  {
    uint64_t v5 = (int)objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLGyroCalibrationDatabase"),  "syncgetNonFactoryRoundCount") > 0;
  }

  uint64_t v8 = CMAvailable;
  uint64_t v9 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5, v6);
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL);
  CLConnectionMessage::sendReply(*a2);
}

void sub_100884184(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

uint64_t sub_1008841B8(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *, void **))(*a1 + 40LL))(a1, &__p);
  uint64_t v3 = v2;
  if (SBYTE3(v13) < 0)
  {
    operator delete(__p);
    if ((v3 & 1) != 0) {
      return v3;
    }
  }

  else if ((v2 & 1) != 0)
  {
    return v3;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  uint64_t v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_FAULT))
  {
    uint64_t v5 = a1[6];
    std::string __p = (void *)68289282;
    __int16 v10 = 2082;
    double v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "{msg%{public}.0s:Client does not have appropriate entitlement access catherine provider SPI, ClientKeyPa th:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
  }

  double v6 = (os_log_s *)qword_101934978;
  if (os_signpost_enabled((os_log_t)qword_101934978))
  {
    uint64_t v7 = a1[6];
    std::string __p = (void *)68289282;
    __int16 v10 = 2082;
    double v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v7;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "Client does not have appropriate entitlement access catherine provider SPI",  "{msg%{public}.0s:Client does not have appropriate entitlement access catherine provider SPI, ClientKeyPa th:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
  }

  return v3;
}

void sub_100884398( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008843BC(void *a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_1008841B8(a1) & 1) != 0)
  {
    objc_opt_class(&OBJC_CLASS___CMCatherineData);
    uint64_t v6 = v5;
    *(void *)&double v7 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
    id v9 = objc_msgSend( (id)CLConnectionMessage::getDictionaryOfClasses( *a2,  +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, v7, v8, 0)),  "objectForKeyedSubscript:",  @"kCLConnectionMessageCatherineDataKey");
    if (v9)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      _OWORD v13[2] = sub_1008845A0;
      v13[3] = &unk_101840D20;
      _DWORD v13[4] = v9;
      sub_10070EDB8((uint64_t)v13);
      uint64_t v10 = sub_100F5A080();
      sub_100F5C544(v10, 1);
      double v11 = (dispatch_queue_t *)sub_100B354EC();
      *(_DWORD *)uint64_t buf = 1;
      sub_100B36A48(v11, (uint64_t)buf);
    }

    else
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      __int16 v12 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v15 = 0;
        __int16 v16 = 2082;
        unint64_t v17 = "";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning Packet contains nil catherine data}",  buf,  0x12u);
      }
    }
  }
}

void sub_10088456C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008845A0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    sub_10070EA6C(a2, *(void **)(a1 + 32));
  }
}

uint64_t sub_1008845B8(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *, _BYTE *))(*a1 + 40LL))(a1, __p);
  uint64_t v3 = v2;
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0) {
      return v3;
    }
  }

  else if ((v2 & 1) != 0)
  {
    return v3;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185AF80);
  }
  uint64_t v4 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[6];
    *(_DWORD *)std::string __p = 138412290;
    *(void *)&__p[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %@ does not have appropriate entitlement to run miniCal",  __p,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v7 = a1[6];
    int v10 = 138412290;
    uint64_t v11 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning Client %@ does not have appropriate entitlement to run miniCal",  &v10,  12);
    id v9 = (char *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLDaemonClient::isEntitledForMiniCal()", "%s\n", v8);
    if (v9 != __p) {
      free(v9);
    }
  }

  return v3;
}

void sub_1008847B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008847D4(uint64_t a1, void *a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_1008845B8((void *)a1) & 1) == 0)
  {
    uint64_t v6 = *a2;
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v11 = CMErrorMessage;
    __int16 v12 = &off_1018D3B48;
    CLConnectionMessage::sendReply( v6,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
LABEL_5:
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_10;
  }

  if ((sub_1004F97F4() & 0x2000) == 0)
  {
    uint64_t v5 = *a2;
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v9 = CMErrorMessage;
    int v10 = &off_1018D3B60;
    CLConnectionMessage::sendReply( v5,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    goto LABEL_5;
  }

  if (objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "isServiceRunning:",  @"CLSensorCalibrationController")) {
    objc_msgSend( objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLSensorCalibrationController"),  "start:",  1);
  }
  CLConnectionMessage::sendReply(*a2);
LABEL_10:
}

void sub_10088495C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1008849AC(uint64_t a1, int *a2)
{
  char v4 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 40LL))(a1, __p);
  char v5 = v4;
  if (SBYTE3(v35) < 0)
  {
    operator delete(*(void **)__p);
    if ((v5 & 1) != 0)
    {
LABEL_3:
      uint64_t result = sub_10022E544(*(void *)(a1 + 24));
      if ((_DWORD)result)
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1) & 1) != 0)
        {
          uint64_t result = 1LL;
          int v7 = 100;
        }

        else
        {
          if (qword_101934800 != -1) {
            dispatch_once(&qword_101934800, &stru_10185B080);
          }
          uint64_t v11 = (os_log_s *)off_101934808;
          if (os_log_type_enabled((os_log_t)off_101934808, OS_LOG_TYPE_DEFAULT))
          {
            CLConnection::getName(*(CLConnection **)(a1 + 264));
            int RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
            char v13 = v26;
            *(_DWORD *)std::string __p = 136446722;
            if ((v30 & 0x80000000LL) != 0) {
              char v13 = *(_BYTE **)v26;
            }
            *(void *)&__p[4] = v13;
            __int16 v32 = 1026;
            int v33 = RemotePid;
            __int16 v34 = 2050;
            uint64_t v35 = a1;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "#Warning HealthAssessment,Client failed authorization check, %{public}s, %{public}d, %{public}p",  __p,  0x1Cu);
            if (SBYTE3(v30) < 0) {
              operator delete(*(void **)v26);
            }
          }

          uint64_t result = sub_1002921D0(115, 2);
          if ((_DWORD)result)
          {
            bzero(__p, 0x65CuLL);
            if (qword_101934800 != -1) {
              dispatch_once(&qword_101934800, &stru_10185B080);
            }
            unint64_t v19 = off_101934808;
            CLConnection::getName(*(CLConnection **)(a1 + 264));
            int v20 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
            uint64_t v21 = v24;
            *(_DWORD *)uint64_t v26 = 136446722;
            if (v25 < 0) {
              uint64_t v21 = (void **)v24[0];
            }
            *(void *)&v26[4] = v21;
            __int16 v27 = 1026;
            int v28 = v20;
            __int16 v29 = 2050;
            uint64_t v30 = a1;
            _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v19,  0LL,  "#Warning HealthAssessment,Client failed authorization check, %{public}s, %{public}d, %{public}p",  v26,  28);
            uint64_t v23 = v22;
            if (v25 < 0) {
              operator delete(v24[0]);
            }
            sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDaemonClient::isAuthorizedForHealthAssessment(CMError &)",  "%s\n",  v23);
            if (v23 != __p) {
              free(v23);
            }
            uint64_t result = 0LL;
          }

          int v7 = 111;
        }
      }

      else
      {
        int v7 = 109;
      }

      goto LABEL_26;
    }
  }

  else if ((v4 & 1) != 0)
  {
    goto LABEL_3;
  }

  if (qword_101934800 != -1) {
    dispatch_once(&qword_101934800, &stru_10185B080);
  }
  char v8 = (os_log_s *)off_101934808;
  if (os_log_type_enabled((os_log_t)off_101934808, OS_LOG_TYPE_DEFAULT))
  {
    CLConnection::getName(*(CLConnection **)(a1 + 264));
    int v9 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
    int v10 = v26;
    *(_DWORD *)std::string __p = 136446722;
    if ((v30 & 0x80000000LL) != 0) {
      int v10 = *(_BYTE **)v26;
    }
    *(void *)&__p[4] = v10;
    __int16 v32 = 1026;
    int v33 = v9;
    __int16 v34 = 2050;
    uint64_t v35 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "#Warning HealthAssessment,Client failed entitlement check, %{public}s, %{public}d, %{public}p",  __p,  0x1Cu);
    if (SBYTE3(v30) < 0) {
      operator delete(*(void **)v26);
    }
  }

  uint64_t result = sub_1002921D0(115, 2);
  if ((_DWORD)result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934800 != -1) {
      dispatch_once(&qword_101934800, &stru_10185B080);
    }
    __int16 v14 = off_101934808;
    CLConnection::getName(*(CLConnection **)(a1 + 264));
    int v15 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 264));
    __int16 v16 = v24;
    *(_DWORD *)uint64_t v26 = 136446722;
    if (v25 < 0) {
      __int16 v16 = (void **)v24[0];
    }
    *(void *)&v26[4] = v16;
    __int16 v27 = 1026;
    int v28 = v15;
    __int16 v29 = 2050;
    uint64_t v30 = a1;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v14,  0LL,  "#Warning HealthAssessment,Client failed entitlement check, %{public}s, %{public}d, %{public}p",  v26,  28);
    __int16 v18 = v17;
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "BOOL CLDaemonClient::isAuthorizedForHealthAssessment(CMError &)",  "%s\n",  v18);
    if (v18 != __p) {
      free(v18);
    }
    uint64_t result = 0LL;
  }

  int v7 = 110;
LABEL_26:
  *a2 = v7;
  return result;
}

void sub_100884E8C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100884EE0(uint64_t a1, CLConnectionMessage **a2)
{
  char v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  char v5 = sub_1008849AC(a1, (int *)&v19);
  uint64_t v6 = *a2;
  if ((v5 & 1) != 0)
  {
    objc_opt_class(&OBJC_CLASS___CLHealthAssessmentRecordTypeForDuration);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    int v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      unsigned int v10 = [ObjectOfClass dataType];
      [v9 duration];
      uint64_t v12 = v11;
      id v13 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLHealthAssessmentNotifier");
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      void v17[2] = sub_100885110;
      void v17[3] = &unk_10185AD00;
      unsigned int v18 = v10;
      v17[4] = v12;
      [v13 doAsync:v17];
      CLConnectionMessage::sendReply(*a2);
    }

    else
    {
      __int16 v14 = *a2;
      sub_1010DDBC0(__p, "kCLConnectionMessageError");
      uint64_t v20 = CMErrorMessage;
      uint64_t v21 = &off_1018D3AE8;
      CLConnectionMessage::sendReply( v14,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
  }

  else
  {
    uint64_t v22 = CMErrorMessage;
    uint64_t v23 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v19);
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL);
    CLConnectionMessage::sendReply(v6);
  }
}

void sub_1008850C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100885110(uint64_t a1, uint64_t a2)
{
  return sub_10022F200(a2, *(_DWORD *)(a1 + 40), *(double *)(a1 + 32));
}

void sub_100885124()
{
}

void sub_100885148()
{
}

void sub_10088516C()
{
}

void sub_100885190(uint64_t a1, uint64_t *a2)
{
  char v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = *a2;
  uint64_t v6 = CMAuthorized;
  int v7 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_100881140(a1));
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL);
  CLConnectionMessage::sendReply(v5);
}

void sub_100885258(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_100006BB8(exception_object);
}

void sub_100885280(uint64_t a1, CLConnectionMessage **a2)
{
  char v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = *a2;
  objc_opt_class(&OBJC_CLASS___CLSensorRecorderSensorAvailable);
  ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v5, v6);
  if (ObjectOfClass)
  {
    unsigned int v8 = [ObjectOfClass dataType];
    if (!v8 || (sub_100880EB8(a1) & 1) != 0)
    {
      int v9 = *a2;
      uint64_t v16 = CMAvailable;
      unint64_t v17 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_100E7D40C(v8));
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL);
      CLConnectionMessage::sendReply(v9);
      goto LABEL_9;
    }

    uint64_t v11 = *a2;
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v18 = CMErrorMessage;
    unsigned int v19 = &off_1018D3B78;
    CLConnectionMessage::sendReply( v11,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
  }

  else
  {
    unsigned int v10 = *a2;
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v14 = CMErrorMessage;
    int v15 = &off_1018D3AE8;
    CLConnectionMessage::sendReply( v10,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
  }

  if (v13 < 0) {
    operator delete(__p[0]);
  }
LABEL_9:
}

void sub_100885444( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_100885498(uint64_t a1, uint64_t a2)
{
  char v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  BOOL v5 = sub_100881140(a1);
  uint64_t v6 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    objc_opt_class(&OBJC_CLASS___CLSensorRecorderSensorMetaRequestById);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    int v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      id v10 = [ObjectOfClass identifier];
      unsigned int v11 = [v9 dataType];
      if (v11 && (sub_100880EB8(a1) & 1) == 0)
      {
        uint64_t v21 = *(CLConnectionMessage **)a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v31 = CMErrorMessage;
        __int16 v32 = &off_1018D3B78;
        CLConnectionMessage::sendReply( v21,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
      }

      else
      {
        if ((sub_100E7D40C(v11) & 1) != 0)
        {
          id v12 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLSensorRecorderNotifier");
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3321888768LL;
          void v22[2] = sub_100885808;
          v22[3] = &unk_10185AD28;
          unsigned int v24 = v11;
          v22[4] = v9;
          v22[5] = v10;
          char v13 = *(std::__shared_weak_count **)(a2 + 8);
          void v22[6] = *(void *)a2;
          uint64_t v23 = v13;
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              unint64_t v15 = __ldxr(p_shared_owners);
            while (__stxr(v15 + 1, p_shared_owners));
          }

          [v12 doAsync:v22];
          uint64_t v16 = v23;
          if (v23)
          {
            unint64_t v17 = (unint64_t *)&v23->__shared_owners_;
            do
              unint64_t v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }

          goto LABEL_20;
        }

        uint64_t v20 = *(CLConnectionMessage **)a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v29 = CMErrorMessage;
        uint64_t v30 = &off_1018D3B60;
        CLConnectionMessage::sendReply( v20,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
      }
    }

    else
    {
      unsigned int v19 = *(CLConnectionMessage **)a2;
      sub_1010DDBC0(__p, "kCLConnectionMessageError");
      uint64_t v27 = CMErrorMessage;
      int v28 = &off_1018D3AE8;
      CLConnectionMessage::sendReply( v19,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
    }
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v33 = CMErrorMessage;
    __int16 v34 = &off_1018D3B78;
    CLConnectionMessage::sendReply( v6,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
  }

  if (v26 < 0) {
    operator delete(__p[0]);
  }
LABEL_20:
}

void sub_100885790( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  _Unwind_Resume(a1);
}

void sub_100885808(uint64_t a1, uint64_t *a2)
{
  int v3 = sub_100E7F34C( a2,  *(_DWORD *)(a1 + 64),  *(void *)(a1 + 40),   objc_msgSend( [CLSensorRecorderSensorMeta alloc],  "initWithDataType:",  objc_msgSend(*(id *)(a1 + 32), "dataType")));
  uint64_t v4 = *(void *)(a1 + 48);
  if (v3)
  {
    CLConnectionMessage::sendReply(*(void *)(a1 + 48));
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v7 = CMErrorMessage;
    unsigned int v8 = &off_1018D3B90;
    CLConnectionMessage::sendReply( v4,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100885940( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100885964(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2)
  {
    int v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_100885988(uint64_t a1)
{
  return sub_10000AE14(a1 + 48);
}

void sub_100885990(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  BOOL v5 = sub_100881140(a1);
  char v6 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    objc_opt_class(&OBJC_CLASS___CLSensorRecorderSensorMetaRequestById);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    int v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      id v10 = [ObjectOfClass identifier];
      unsigned int v11 = [v9 dataType];
      if (v11 && (sub_100880EB8(a1) & 1) == 0)
      {
        uint64_t v21 = *(CLConnectionMessage **)a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v31 = CMErrorMessage;
        __int16 v32 = &off_1018D3B78;
        CLConnectionMessage::sendReply( v21,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
      }

      else
      {
        if ((sub_100E7D40C(v11) & 1) != 0)
        {
          id v12 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLSensorRecorderNotifier");
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3321888768LL;
          void v22[2] = sub_100885D00;
          v22[3] = &unk_10185AD28;
          unsigned int v24 = v11;
          v22[4] = v9;
          v22[5] = v10;
          char v13 = *(std::__shared_weak_count **)(a2 + 8);
          void v22[6] = *(void *)a2;
          uint64_t v23 = v13;
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              unint64_t v15 = __ldxr(p_shared_owners);
            while (__stxr(v15 + 1, p_shared_owners));
          }

          [v12 doAsync:v22];
          uint64_t v16 = v23;
          if (v23)
          {
            unint64_t v17 = (unint64_t *)&v23->__shared_owners_;
            do
              unint64_t v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }

          goto LABEL_20;
        }

        uint64_t v20 = *(CLConnectionMessage **)a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v29 = CMErrorMessage;
        uint64_t v30 = &off_1018D3B60;
        CLConnectionMessage::sendReply( v20,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
      }
    }

    else
    {
      unsigned int v19 = *(CLConnectionMessage **)a2;
      sub_1010DDBC0(__p, "kCLConnectionMessageError");
      uint64_t v27 = CMErrorMessage;
      int v28 = &off_1018D3AE8;
      CLConnectionMessage::sendReply( v19,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
    }
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v33 = CMErrorMessage;
    __int16 v34 = &off_1018D3B78;
    CLConnectionMessage::sendReply( v6,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
  }

  if (v26 < 0) {
    operator delete(__p[0]);
  }
LABEL_20:
}

void sub_100885C88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  _Unwind_Resume(a1);
}

void sub_100885D00(uint64_t a1, uint64_t *a2)
{
  id v4 =  objc_msgSend( [CLSensorRecorderSensorMeta alloc],  "initWithDataType:",  objc_msgSend(*(id *)(a1 + 32), "dataType"));
  int v5 = sub_100E7F38C(a2, *(_DWORD *)(a1 + 64), *(void *)(a1 + 40), v4);
  uint64_t v6 = *(void *)(a1 + 48);
  if (v5)
  {
    uint64_t v7 = CLConnectionMessage::name(*(CLConnectionMessage **)(a1 + 48));
    CLConnectionMessage::sendReply(v6, v7, v4);
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v10 = CMErrorMessage;
    unsigned int v11 = &off_1018D3B90;
    CLConnectionMessage::sendReply( v6,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100885E44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_100885E68(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  BOOL v5 = sub_100881140(a1);
  uint64_t v6 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    objc_opt_class(&OBJC_CLASS___CLSensorRecorderSensorMetaRequestByDateRange);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    char v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      [ObjectOfClass startTime];
      double v11 = v10;
      [v9 endTime];
      double v13 = v12;
      unsigned int v14 = [v9 dataType];
      if (v14 && (sub_100880EB8(a1) & 1) == 0)
      {
        unsigned int v24 = *(CLConnectionMessage **)a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v37 = CMErrorMessage;
        double v38 = &off_1018D3B78;
        CLConnectionMessage::sendReply( v24,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
      }

      else if ((sub_100E7D40C(v14) & 1) != 0)
      {
        if (v11 < v13)
        {
          id v15 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLSensorRecorderNotifier");
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3321888768LL;
          _OWORD v26[2] = sub_100886258;
          _OWORD v26[3] = &unk_10185AD58;
          unsigned int v28 = v14;
          *(double *)&v26[4] = v11;
          *(double *)&v26[5] = v13;
          uint64_t v16 = *(std::__shared_weak_count **)(a2 + 8);
          v26[6] = *(void *)a2;
          uint64_t v27 = v16;
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              unint64_t v18 = __ldxr(p_shared_owners);
            while (__stxr(v18 + 1, p_shared_owners));
          }

          [v15 doAsync:v26];
          unsigned int v19 = v27;
          if (v27)
          {
            uint64_t v20 = (unint64_t *)&v27->__shared_owners_;
            do
              unint64_t v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }

          goto LABEL_22;
        }

        char v25 = *(CLConnectionMessage **)a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v33 = CMErrorMessage;
        __int16 v34 = &off_1018D3B90;
        CLConnectionMessage::sendReply( v25,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
      }

      else
      {
        uint64_t v23 = *(CLConnectionMessage **)a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v35 = CMErrorMessage;
        double v36 = &off_1018D3B60;
        CLConnectionMessage::sendReply( v23,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
      }
    }

    else
    {
      uint64_t v22 = *(CLConnectionMessage **)a2;
      sub_1010DDBC0(__p, "kCLConnectionMessageError");
      uint64_t v31 = CMErrorMessage;
      __int16 v32 = &off_1018D3AE8;
      CLConnectionMessage::sendReply( v22,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
    }
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v39 = CMErrorMessage;
    uint64_t v40 = &off_1018D3B78;
    CLConnectionMessage::sendReply( v6,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v40,  &v39,  1LL));
  }

  if (v30 < 0) {
    operator delete(__p[0]);
  }
LABEL_22:
}

void sub_1008861D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  _Unwind_Resume(a1);
}

void sub_100886258(uint64_t a1, uint64_t *a2)
{
  id v4 = +[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 10LL);
  if (sub_100E7F3CC(a2, *(_DWORD *)(a1 + 64), v4, *(double *)(a1 + 32), *(double *)(a1 + 40)))
  {
    if (qword_1019345F0 != -1) {
      dispatch_once(&qword_1019345F0, &stru_10185B0A0);
    }
    BOOL v5 = (os_log_s *)qword_1019345F8;
    if (os_log_type_enabled((os_log_t)qword_1019345F8, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 134218496;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v26 = 2048;
      uint64_t v27 = v7;
      __int16 v28 = 1024;
      unsigned int v29 = -[NSMutableArray count](v4, "count");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "(%f, %f), %d records returned", buf, 0x1Cu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345F0 != -1) {
        dispatch_once(&qword_1019345F0, &stru_10185B0A0);
      }
      uint64_t v11 = qword_1019345F8;
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      int v19 = 134218496;
      uint64_t v20 = v13;
      __int16 v21 = 2048;
      uint64_t v22 = v12;
      __int16 v23 = 1024;
      unsigned int v24 = -[NSMutableArray count](v4, "count");
      LODWORD(v16) = 28;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v11,  1LL,  "(%f, %f), %d records returned",  COERCE_DOUBLE(&v19),  v16,  v17);
      id v15 = (char *)v14;
      sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageSensorRecorderGetMetasByDateRange(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v14);
      if (v15 != buf) {
        free(v15);
      }
    }

    unsigned int v8 = *(CLConnectionMessage **)(a1 + 48);
    uint64_t v9 = CLConnectionMessage::name(v8);
    CLConnectionMessage::sendReply(v8, v9, v4);
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v17 = CMErrorMessage;
    unint64_t v18 = &off_1018D3B90;
    CLConnectionMessage::sendReply( v10,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
    if (SHIBYTE(v28) < 0) {
      operator delete(*(void **)buf);
    }
  }

void sub_100886508( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10088652C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  char v5 = sub_100880EB8(a1);
  uint64_t v6 = *(CLConnectionMessage **)a2;
  if ((v5 & 1) != 0)
  {
    objc_opt_class(&OBJC_CLASS___CLSensorRecorderWriteSensorDataToFileForDateRange);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    uint64_t v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      [ObjectOfClass startTime];
      double v11 = v10;
      [v9 endTime];
      double v13 = v12;
      unsigned int v14 = [v9 dataType];
      if ((sub_100E7D40C(v14) & 1) != 0)
      {
        id v15 = -[NSFileHandle initWithFileDescriptor:closeOnDealloc:]( objc_alloc(&OBJC_CLASS___NSFileHandle),  "initWithFileDescriptor:closeOnDealloc:",  CLConnectionMessage::copyFileDescriptor(*(CLConnectionMessage **)a2, 0LL),  1LL);
        if (v15 && v11 < v13)
        {
          id v16 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLSensorRecorderNotifier");
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3321888768LL;
          _OWORD v26[2] = sub_1008868FC;
          _OWORD v26[3] = &unk_10185AD90;
          unsigned int v28 = v14;
          v26[4] = v15;
          *(double *)&v26[5] = v11;
          *(double *)&v26[6] = v13;
          uint64_t v17 = *(std::__shared_weak_count **)(a2 + 8);
          void v26[7] = *(void *)a2;
          uint64_t v27 = v17;
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              unint64_t v19 = __ldxr(p_shared_owners);
            while (__stxr(v19 + 1, p_shared_owners));
          }

          [v16 doAsync:v26];
          uint64_t v20 = v27;
          if (v27)
          {
            __int16 v21 = (unint64_t *)&v27->__shared_owners_;
            do
              unint64_t v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
        }

        else
        {
          uint64_t v25 = *(CLConnectionMessage **)a2;
          sub_1010DDBC0(__p, "kCLConnectionMessageError");
          uint64_t v33 = CMErrorMessage;
          __int16 v34 = &off_1018D3B90;
          CLConnectionMessage::sendReply( v25,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
          if (v30 < 0) {
            operator delete(__p[0]);
          }
        }

        goto LABEL_22;
      }

      unsigned int v24 = *(CLConnectionMessage **)a2;
      sub_1010DDBC0(__p, "kCLConnectionMessageError");
      uint64_t v35 = CMErrorMessage;
      double v36 = &off_1018D3B60;
      CLConnectionMessage::sendReply( v24,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
    }

    else
    {
      __int16 v23 = *(CLConnectionMessage **)a2;
      sub_1010DDBC0(__p, "kCLConnectionMessageError");
      uint64_t v31 = CMErrorMessage;
      __int16 v32 = &off_1018D3AE8;
      CLConnectionMessage::sendReply( v23,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
    }
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v37 = CMErrorMessage;
    double v38 = &off_1018D3B78;
    CLConnectionMessage::sendReply( v6,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
  }

  if (v30 < 0) {
    operator delete(__p[0]);
  }
LABEL_22:
}

void sub_10088687C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  _Unwind_Resume(a1);
}

void sub_1008868FC(uint64_t a1, uint64_t a2)
{
  int v3 = sub_100E7FFE0(a2);
  id v4 = *(CLConnectionMessage **)(a1 + 56);
  if (v3)
  {
    uint64_t v5 = CLConnectionMessage::name(v4);
    CLConnectionMessage::sendReply(v4, v5, &__kCFBooleanTrue);
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v8 = CMErrorMessage;
    uint64_t v9 = &off_1018D3B90;
    CLConnectionMessage::sendReply( v4,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100886A0C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100886A30(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2)
  {
    int v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_100886A54(uint64_t a1)
{
  return sub_10000AE14(a1 + 56);
}

void sub_100886A5C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  char v5 = sub_100880EB8(a1);
  uint64_t v6 = *(CLConnectionMessage **)a2;
  if ((v5 & 1) != 0)
  {
    objc_opt_class(&OBJC_CLASS___CLSensorRecorderSensorSampleRate);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    uint64_t v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      unsigned int v10 = [ObjectOfClass rate];
      unsigned int v11 = [v9 dataType];
      if ((sub_100E7D40C(v11) & 1) != 0)
      {
        id v12 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLSensorRecorderNotifier");
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3321888768LL;
        v21[2] = sub_100886D54;
        v21[3] = &unk_10185ADC0;
        unsigned int v23 = v11;
        unsigned int v24 = v10;
        double v13 = *(std::__shared_weak_count **)(a2 + 8);
        v21[4] = *(void *)a2;
        unint64_t v22 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            unint64_t v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }

        [v12 doAsync:v21];
        id v16 = v22;
        if (v22)
        {
          uint64_t v17 = (unint64_t *)&v22->__shared_owners_;
          do
            unint64_t v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }

        goto LABEL_17;
      }

      uint64_t v20 = *(CLConnectionMessage **)a2;
      sub_1010DDBC0(__p, "kCLConnectionMessageError");
      uint64_t v29 = CMErrorMessage;
      char v30 = &off_1018D3B60;
      CLConnectionMessage::sendReply( v20,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
    }

    else
    {
      unint64_t v19 = *(CLConnectionMessage **)a2;
      sub_1010DDBC0(__p, "kCLConnectionMessageError");
      uint64_t v27 = CMErrorMessage;
      unsigned int v28 = &off_1018D3AE8;
      CLConnectionMessage::sendReply( v19,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
    }
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v31 = CMErrorMessage;
    __int16 v32 = &off_1018D3B78;
    CLConnectionMessage::sendReply( v6,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
  }

  if (v26 < 0) {
    operator delete(__p[0]);
  }
LABEL_17:
}

void sub_100886CE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_100886D54(uint64_t a1, uint64_t a2)
{
  int v3 = sub_100E7D4EC(a2, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
  unint64_t v4 = *(CLConnectionMessage **)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = CLConnectionMessage::name(v4);
    CLConnectionMessage::sendReply(v4, v5, &__kCFBooleanTrue);
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v8 = CMErrorMessage;
    uint64_t v9 = &off_1018D3B90;
    CLConnectionMessage::sendReply( v4,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_100886E5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_100886E80(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  BOOL v5 = sub_100881140(a1);
  uint64_t v6 = *(CLConnectionMessage **)a2;
  if (v5)
  {
    objc_opt_class(&OBJC_CLASS___CLSensorRecorderSensorDataRequestById);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    uint64_t v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      unsigned int v10 = [ObjectOfClass dataType];
      if (v10 && (sub_100880EB8(a1) & 1) == 0)
      {
        unint64_t v15 = *(CLConnectionMessage **)a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v54 = CMErrorMessage;
        uint64_t v55 = &off_1018D3BA8;
        CLConnectionMessage::sendReply( v15,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v55,  &v54,  1LL));
      }

      else if ((sub_100E7D40C(v10) & 1) != 0)
      {
        uint64_t v11 = *(void *)(a1 + 376);
        if (v11)
        {
          uint64_t v12 = *(void *)(a1 + 384);
LABEL_35:
          uint64_t v26 = *(void *)(a1 + 392);
          id v27 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLSensorRecorderNotifier");
          v42[0] = _NSConcreteStackBlock;
          v42[1] = 3321888768LL;
          _OWORD v42[2] = sub_1008876D0;
          v42[3] = &unk_10185ADF8;
          v42[4] = v26;
          v42[5] = v9;
          unsigned int v44 = v10;
          uint64_t v29 = *(CLConnectionMessage **)a2;
          unsigned int v28 = *(std::__shared_weak_count **)(a2 + 8);
          v42[7] = v11;
          v42[8] = v29;
          std::string v43 = v28;
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              unint64_t v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
          }

          v42[6] = v12;
          [v27 doAsync:v42];
          __int16 v32 = v43;
          if (v43)
          {
            uint64_t v33 = (unint64_t *)&v43->__shared_owners_;
            do
              unint64_t v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }

          goto LABEL_14;
        }

        if (qword_1019345F0 != -1) {
          dispatch_once(&qword_1019345F0, &stru_10185B0A0);
        }
        id v16 = (os_log_s *)qword_1019345F8;
        if (os_log_type_enabled((os_log_t)qword_1019345F8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Allocating mmap buffer.",  (uint8_t *)__p,  2u);
        }

        if (sub_1002921D0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1019345F0 != -1) {
            dispatch_once(&qword_1019345F0, &stru_10185B0A0);
          }
          LOWORD(v49[0]) = 0;
          _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019345F8,  2LL,  "Allocating mmap buffer.",  v49,  2);
          double v38 = (void **)v37;
          sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v37);
          if (v38 != __p) {
            free(v38);
          }
        }

        *(void *)(a1 + 392) = -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  "CLDaemonClient.SensorRecorderAccel");
        uint64_t v17 = mmap(0LL, 0x24000uLL, 3, 4097, -1, 0LL);
        *(void *)(a1 + 376) = v17;
        if (v17 == (void *)-1LL)
        {
          if (qword_1019345F0 != -1) {
            dispatch_once(&qword_1019345F0, &stru_10185B0A0);
          }
          uint64_t v20 = (os_log_s *)qword_1019345F8;
          if (os_log_type_enabled((os_log_t)qword_1019345F8, OS_LOG_TYPE_ERROR))
          {
            int v21 = *__error();
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "mmap failure.  errno %d",  (uint8_t *)__p,  8u);
          }

          if (sub_1002921D0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1019345F0 != -1) {
              dispatch_once(&qword_1019345F0, &stru_10185B0A0);
            }
            uint64_t v22 = qword_1019345F8;
            int v23 = *__error();
            v49[0] = 67109120;
            v49[1] = v23;
            _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  v22,  16LL,  "mmap failure.  errno %d",  v49);
            uint64_t v25 = (void **)v24;
            sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v24);
            if (v25 != __p) {
              free(v25);
            }
          }
        }

        else
        {
          unint64_t v18 = dispatch_data_create(v17, 0x24000uLL, 0LL, _dispatch_data_destructor_munmap);
          if (v18)
          {
            unint64_t v19 = v18;
            *(void *)(a1 + 384) = xpc_data_create_with_dispatch_data(v18);
          }

          else
          {
            munmap(*(void **)(a1 + 376), 0x24000uLL);
          }
        }

        uint64_t v12 = *(void *)(a1 + 384);
        if (v12)
        {
          uint64_t v11 = *(void *)(a1 + 376);
          goto LABEL_35;
        }

        if (qword_1019345F0 != -1) {
          dispatch_once(&qword_1019345F0, &stru_10185B0A0);
        }
        uint64_t v35 = (os_log_s *)qword_1019345F8;
        if (os_log_type_enabled((os_log_t)qword_1019345F8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "Did not successfully allocate buffer for sensor recorder.  Returning CMErrorNotAvailable",  (uint8_t *)__p,  2u);
        }

        if (sub_1002921D0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1019345F0 != -1) {
            dispatch_once(&qword_1019345F0, &stru_10185B0A0);
          }
          LOWORD(v49[0]) = 0;
          LODWORD(v41) = 2;
          _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_1019345F8,  16LL,  "Did not successfully allocate buffer for sensor recorder.  Returning CMErrorNotAvailable",  v49,  v41);
          uint64_t v40 = (void **)v39;
          sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v39);
          if (v40 != __p) {
            free(v40);
          }
        }

        *(void *)(a1 + 376) = 0LL;
        double v36 = *(CLConnectionMessage **)a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v47 = CMErrorMessage;
        uint64_t v48 = &off_1018D3B60;
        CLConnectionMessage::sendReply( v36,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v48,  &v47,  1LL));
      }

      else
      {
        unsigned int v14 = *(CLConnectionMessage **)a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v52 = CMErrorMessage;
        uint64_t v53 = &off_1018D3B60;
        CLConnectionMessage::sendReply( v14,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v53,  &v52,  1LL));
      }
    }

    else
    {
      double v13 = *(CLConnectionMessage **)a2;
      sub_1010DDBC0(__p, "kCLConnectionMessageError");
      uint64_t v45 = CMErrorMessage;
      unsigned int v46 = &off_1018D3AE8;
      CLConnectionMessage::sendReply( v13,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL));
    }
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v56 = CMErrorMessage;
    uint64_t v57 = &off_1018D3B78;
    CLConnectionMessage::sendReply( v6,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v57,  &v56,  1LL));
  }

  if (v51 < 0) {
    operator delete(__p[0]);
  }
LABEL_14:
}

void sub_100887638( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  _Unwind_Resume(a1);
}

void sub_1008876D0(uint64_t a1, uint64_t *a2)
{
  if (qword_1019345F0 != -1) {
    dispatch_once(&qword_1019345F0, &stru_10185B0A0);
  }
  unint64_t v4 = (os_log_s *)qword_1019345F8;
  if (os_log_type_enabled((os_log_t)qword_1019345F8, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 40) identifier];
    id v6 = [*(id *)(a1 + 40) metaIdentifier];
    *(_DWORD *)uint64_t buf = 134218240;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Requesting id, %llu, meta id, %llu", buf, 0x16u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019345F0 != -1) {
      dispatch_once(&qword_1019345F0, &stru_10185B0A0);
    }
    uint64_t v12 = qword_1019345F8;
    id v13 = [*(id *)(a1 + 40) identifier];
    id v14 = [*(id *)(a1 + 40) metaIdentifier];
    *(_DWORD *)std::string __p = 134218240;
    *(void *)&__p[4] = v13;
    __int16 v20 = 2048;
    id v21 = v14;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  v12,  0LL,  "Requesting id, %llu, meta id, %llu",  __p,  22);
    id v16 = (char *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)_block_invoke",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  id v7 = [*(id *)(a1 + 40) identifier];
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)uint64_t buf = v7;
  *(void *)&uint8_t buf[8] = v8;
  *(_DWORD *)&uint8_t buf[16] = 147456;
  int v9 = sub_100E7F408( a2,  *(_DWORD *)(a1 + 80),  (uint64_t)buf,  (sqlite3_int64)[*(id *)(a1 + 40) metaIdentifier]);
  uint64_t v10 = *(void *)(a1 + 64);
  if (v9)
  {
    uint64_t v11 = CLConnectionMessage::name(*(CLConnectionMessage **)(a1 + 64));
    CLConnectionMessage::sendReply(v10, v11, *(void *)(a1 + 48));
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v17 = CMErrorMessage;
    unint64_t v18 = &off_1018D3AE8;
    CLConnectionMessage::sendReply( v10,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
    if (v22 < 0) {
      operator delete(*(void **)__p);
    }
  }

void sub_100887990( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008879B4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v2;
  if (v2)
  {
    int v3 = (unint64_t *)(v2 + 8);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

uint64_t sub_1008879D8(uint64_t a1)
{
  return sub_10000AE14(a1 + 64);
}

void sub_1008879E0(uint64_t a1, CLConnectionMessage **a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  BOOL v5 = sub_100881140(a1);
  id v6 = *a2;
  if (v5)
  {
    objc_opt_class(&OBJC_CLASS___CLSensorRecorderRecordSensorTypeFor);
    ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v6, v7);
    int v9 = ObjectOfClass;
    if (ObjectOfClass)
    {
      unsigned int v10 = [ObjectOfClass dataType];
      [v9 duration];
      uint64_t v12 = v11;
      if (v10 && (sub_100880EB8(a1) & 1) == 0)
      {
        id v16 = *a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v25 = CMErrorMessage;
        uint64_t v26 = &off_1018D3B78;
        CLConnectionMessage::sendReply( v16,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL));
      }

      else
      {
        if ((sub_100E7D40C(v10) & 1) != 0)
        {
          id v13 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLSensorRecorderNotifier");
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472LL;
          void v17[2] = sub_100887CFC;
          void v17[3] = &unk_10185AD00;
          unsigned int v18 = v10;
          v17[4] = v12;
          [v13 doAsync:v17];
          CLConnectionMessage::sendReply(*a2);
          goto LABEL_13;
        }

        unint64_t v15 = *a2;
        sub_1010DDBC0(__p, "kCLConnectionMessageError");
        uint64_t v23 = CMErrorMessage;
        unsigned int v24 = &off_1018D3B60;
        CLConnectionMessage::sendReply( v15,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v24,  &v23,  1LL));
      }
    }

    else
    {
      id v14 = *a2;
      sub_1010DDBC0(__p, "kCLConnectionMessageError");
      uint64_t v21 = CMErrorMessage;
      char v22 = &off_1018D3AE8;
      CLConnectionMessage::sendReply( v14,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
    }
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v27 = CMErrorMessage;
    unsigned int v28 = &off_1018D3B78;
    CLConnectionMessage::sendReply( v6,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
  }

  if (v20 < 0) {
    operator delete(__p[0]);
  }
LABEL_13:
}

void sub_100887C94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

BOOL sub_100887CFC(uint64_t a1, uint64_t a2)
{
  return sub_100E7F448(a2, *(_DWORD *)(a1 + 40), *(double *)(a1 + 32));
}

void sub_100887D10(uint64_t a1, CLConnectionMessage **a2)
{
  int v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  if (Dictionary
    && (id v5 = [Dictionary objectForKeyedSubscript:CMPredictedWalkDistanceResetDateKey]) != 0)
  {
    [v5 doubleValue];
    *(double *)unint64_t v19 = v6;
    if (v6 == 0.0)
    {
      id v16 = *a2;
      sub_1010DDBC0(buf, "kCLConnectionMessageError");
      uint64_t v21 = CMErrorMessage;
      char v22 = &off_1018D3AE8;
      CLConnectionMessage::sendReply( v16,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
      if (v24 < 0) {
        operator delete(*(void **)buf);
      }
    }

    else
    {
      uint64_t v7 = sub_1002F8DDC();
      sub_1002AC820(v7, @"PredictedWalkDistanceResetDate", v19);
      CLConnectionMessage::sendReply(*a2);
    }
  }

  else
  {
    if (qword_1019346C0 != -1) {
      dispatch_once(&qword_1019346C0, &stru_10185B0C0);
    }
    uint64_t v8 = (os_log_s *)qword_1019346C8;
    if (os_log_type_enabled((os_log_t)qword_1019346C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Programmer error: Wrong parameters were passed!",  buf,  2u);
    }

    uint64_t v9 = sub_1002921D0(115, 0);
    if ((_DWORD)v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019346C0 != -1) {
        dispatch_once(&qword_1019346C0, &stru_10185B0C0);
      }
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346C8,  16LL,  "Programmer error: Wrong parameters were passed!",  v19,  2);
      unsigned int v18 = (uint8_t *)v17;
      uint64_t v9 = sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessagePredictedWalkDistanceReset(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    unsigned int v10 = *a2;
    uint64_t v11 = (std::__shared_weak_count *)a2[1];
    v20[0] = v10;
    v20[1] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }

    sub_10088144C(v9, v20);
    if (v11)
    {
      id v14 = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_100887FD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  _Unwind_Resume(a1);
}

void sub_100888034(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((sub_100880EB8(a1) & 1) != 0)
  {
    if (objc_msgSend( objc_msgSend( (id)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2),  "objectForKeyedSubscript:",  CMDatabaseType),  "integerValue"))
    {
      id v5 = 0LL;
    }

    else
    {
      id v5 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:",  @"CLGyroCalibrationDatabase");
    }

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3321888768LL;
    void v19[2] = sub_1008883B8;
    v19[3] = &unk_10185AE28;
    unsigned int v10 = *(CLConnectionMessage **)a2;
    uint64_t v9 = *(std::__shared_weak_count **)(a2 + 8);
    v19[4] = a1;
    void v19[5] = v10;
    char v20 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }

    [v5 dumpDatabase:@"fatEgg" onCompletion:v19];
    unint64_t v13 = v20;
    if (v20)
    {
      id v14 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  else
  {
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10185B0E0);
    }
    double v6 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138543362;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_FAULT,  "Client %{public}@ does not have appropriate motion entitlement.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_10185B0E0);
      }
      uint64_t v16 = *(void *)(a1 + 48);
      int v23 = 138543362;
      uint64_t v24 = v16;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  17LL,  "Client %{public}@ does not have appropriate motion entitlement.",  &v23,  12);
      unsigned int v18 = (char *)v17;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageWriteDbToFile(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    uint64_t v8 = *(CLConnectionMessage **)a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v21 = CMErrorMessage;
    char v22 = &off_1018D3B78;
    CLConnectionMessage::sendReply( v8,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
    if (v26 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_100888354( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  _Unwind_Resume(a1);
}

void sub_1008883B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v4 = +[NSFileHandle fileHandleForReadingAtPath:](&OBJC_CLASS___NSFileHandle, "fileHandleForReadingAtPath:", a2);
    id v5 =  -[NSFileHandle initWithFileDescriptor:]( objc_alloc(&OBJC_CLASS___NSFileHandle),  "initWithFileDescriptor:",  CLConnectionMessage::copyFileDescriptor(*(CLConnectionMessage **)(a1 + 40), 0LL));
    double v6 = v5;
    id v7 = 0LL;
    if (v4) {
      BOOL v8 = v5 == 0LL;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      id v7 = +[CMMotionUtils copyDataFrom:to:](&OBJC_CLASS___CMMotionUtils, "copyDataFrom:to:", v4, v5);
    }
    -[NSFileHandle closeFile](v4, "closeFile");
    -[NSFileHandle closeFile](v6, "closeFile");
    -[NSFileManager removeItemAtPath:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "removeItemAtPath:error:",  a2,  0LL);
    uint64_t v9 = *(void *)(a1 + 40);
    if (v7) {
      unsigned int v10 = &__kCFBooleanTrue;
    }
    else {
      unsigned int v10 = &__kCFBooleanFalse;
    }
    v17[0] = CMReturnCode;
    v17[1] = CMFileSize;
    v18[0] = v10;
    v18[1] = +[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v7);
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  2LL);
    CLConnectionMessage::sendReply(v9);
  }

  else
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 48);
    v16[0] = *(void *)(a1 + 40);
    v16[1] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }

    sub_10088144C(a1, v16);
    if (v11)
    {
      id v14 = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

void sub_1008885B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1008885CC(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *, _BYTE *))(*a1 + 40LL))(a1, __p);
  uint64_t v3 = v2;
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) != 0) {
      return v3;
    }
  }

  else if ((v2 & 1) != 0)
  {
    return v3;
  }

  if (qword_101934980 != -1) {
    dispatch_once(&qword_101934980, &stru_10185AF80);
  }
  unint64_t v4 = (os_log_s *)qword_101934988;
  if (os_log_type_enabled((os_log_t)qword_101934988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[6];
    *(_DWORD *)std::string __p = 138412290;
    *(void *)&__p[4] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "#Warning Client %@ does not have appropriate entitlement to access vehicle data SPI",  __p,  0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934980 != -1) {
      dispatch_once(&qword_101934980, &stru_10185AF80);
    }
    uint64_t v7 = a1[6];
    int v10 = 138412290;
    uint64_t v11 = v7;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934988,  0LL,  "#Warning Client %@ does not have appropriate entitlement to access vehicle data SPI",  &v10,  12);
    uint64_t v9 = (char *)v8;
    sub_10029211C("Generic", 1LL, 0, 2LL, "BOOL CLDaemonClient::isEntitledForVehicleData()", "%s\n", v8);
    if (v9 != __p) {
      free(v9);
    }
  }

  return v3;
}

void sub_1008887C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008887E8(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *, void **))(*a1 + 40LL))(a1, &__p);
  uint64_t v3 = v2;
  if (SBYTE3(v11) < 0)
  {
    operator delete(__p);
    if ((v3 & 1) != 0) {
      return v3;
    }
  }

  else if ((v2 & 1) != 0)
  {
    return v3;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a1[6];
    std::string __p = (void *)68289282;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:#Warning Client does not have appropriate entitlement to access MicroLocation SPI, Clie ntKeyPath:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
  }

  return v3;
}

void sub_100888920( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100888944(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *, void **))(*a1 + 40LL))(a1, &__p);
  uint64_t v3 = v2;
  if (SBYTE3(v11) < 0)
  {
    operator delete(__p);
    if ((v3 & 1) != 0) {
      return v3;
    }
  }

  else if ((v2 & 1) != 0)
  {
    return v3;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a1[6];
    std::string __p = (void *)68289282;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Warning Client does not have appropriate entitlement to request MicroLocation's forced reco rding scan, ClientKeyPath:%{public, location:escape_only}@}",  (uint8_t *)&__p,  0x1Cu);
  }

  return v3;
}

void sub_100888A7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_100888AA0(uint64_t a1)
{
  uint64_t v2 = (const __CFString *)[*(id *)(a1 + 48) legacyClientKey];
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = &stru_1018A4B00;
  }
  CFErrorRef error = 0LL;
  CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
  unint64_t v4 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
  if (v4)
  {
    uint64_t v5 = v4;
    double v6 = (void *)SecTaskCopyValueForEntitlement(v4, @"com.apple.locationd.microlocation.client-identity", &error);
    CFErrorRef v7 = error;
    if (error)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      __int16 v8 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
      {
        CFErrorDomain Domain = CFErrorGetDomain(error);
        CFIndex Code = CFErrorGetCode(error);
        *(_DWORD *)uint64_t buf = 68289538;
        int v21 = 0;
        __int16 v22 = 2082;
        int v23 = "";
        __int16 v24 = 2114;
        uint64_t v25 = (const char *)Domain;
        __int16 v26 = 2050;
        CFIndex v27 = Code;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:getMicroLocationClientIdentifier, #Warning SecTaskCopyValueForEntitlement failed ,  with error:%{public, location:escape_only}@, error code:%{public}ld}",  buf,  0x26u);
      }

      CFRelease(error);
    }

    if (v6)
    {
      CFTypeID v11 = CFGetTypeID(v6);
      if (v11 == CFStringGetTypeID()) {
        id v12 = v6;
      }
      else {
        id v12 = 0LL;
      }
      CFRelease(v6);
      if (v7) {
        goto LABEL_22;
      }
    }

    else
    {
      id v12 = 0LL;
      if (v7)
      {
LABEL_22:
        if (qword_101934970 != -1) {
          dispatch_once(&qword_101934970, &stru_10185AF60);
        }
        id v14 = (os_log_s *)qword_101934978;
        if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289283;
          int v21 = 0;
          __int16 v22 = 2082;
          int v23 = "";
          __int16 v24 = 2081;
          uint64_t v25 = "com.apple.locationd.microlocation.client-identity";
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:getMicroLocationClientIdentifier, Warning Issue retrieving entitlement string value , entitlement key:%{private, location:escape_only}s}",  buf,  0x1Cu);
        }
      }
    }

    CFRelease(v5);
    if (v12)
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      unint64_t v15 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = (const char *)[v12 UTF8String];
        *(_DWORD *)uint64_t buf = 68289282;
        int v21 = 0;
        __int16 v22 = 2082;
        int v23 = "";
        __int16 v24 = 2082;
        uint64_t v25 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:getMicroLocationClientIdentifier, MicroLocation entitlement based, client identifie r:%{public, location:escape_only}s}",  buf,  0x1Cu);
      }

      return (const __CFString *)v12;
    }

    return v3;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  char v13 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v21 = 0;
    __int16 v22 = 2082;
    int v23 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:getMicroLocationClientIdentifier, #Warning SecTaskCreateWithSelf failed}",  buf,  0x12u);
  }

  return v3;
}

void sub_100888E38(void *a1, uint64_t a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  uint64_t v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    double v6 = (void **)a1[6];
    uint64_t buf = 68289282LL;
    __int16 v36 = 2082;
    uint64_t v37 = "";
    __int16 v38 = 2114;
    uint64_t v39 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received current MicroLocation request from: , ClientKeyPath:%{public, location:escape_only}@}",  (uint8_t *)&buf,  0x1Cu);
  }

  if ((sub_1008887E8(a1) & 1) == 0)
  {
    char v20 = *(CLConnectionMessage **)a2;
    uint64_t v33 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    __int16 v32 = @"Not entitled for Microlocation.";
    unint64_t v34 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL);
LABEL_25:
    CLConnectionMessage::sendReply(v20);
    goto LABEL_26;
  }

  if ((sub_100BA0ED0() & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    int v21 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      sub_1004F2598();
      sub_1004F5420(__p);
      __int16 v22 = v26 >= 0 ? __p : (void **)__p[0];
      uint64_t buf = 68289282LL;
      __int16 v36 = 2082;
      uint64_t v37 = "";
      __int16 v38 = 2082;
      uint64_t v39 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:MicroLocations are not available on this platform, platform:%{public, location:escape_only}s}",  (uint8_t *)&buf,  0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    char v20 = *(CLConnectionMessage **)a2;
    uint64_t v29 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
    unsigned int v28 = @"Microlocation is not available on this platform.";
    char v30 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL);
    goto LABEL_25;
  }

  objc_opt_class(&OBJC_CLASS___NSNumber);
  uint64_t v8 = v7;
  *(void *)&double v9 = objc_opt_class(&OBJC_CLASS___NSString).n128_u64[0];
  uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses( *(CLConnectionMessage **)a2,  +[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", v8, v9, v10, 0LL));
  id v12 = sub_100888AA0((uint64_t)a1);
  char v13 = (void *)sub_10088926C((uint64_t)a1);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3321888768LL;
  _OWORD v23[2] = sub_1008892B8;
  v23[3] = &unk_10185AE58;
  id v14 = *(std::__shared_weak_count **)(a2 + 8);
  v23[4] = *(void *)a2;
  __int16 v24 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }

  [v13 requestCurrentMicroLocationForClient:v12 withAdditionalInformation:DictionaryOfClasses withReply:v23];
  uint64_t v17 = v24;
  if (v24)
  {
    unsigned int v18 = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

void sub_100889224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10088926C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 248);
  if (!result)
  {
    id v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLMicroLocationNotifier");
    *(void *)(a1 + 248) = v3;
    [v3 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
    return *(void *)(a1 + 248);
  }

  return result;
}

uint64_t sub_1008892B8(uint64_t a1, uint64_t a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10185B100);
  }
  unint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    __int16 v8 = 2082;
    double v9 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:replying for Microlocation localization request}",  (uint8_t *)v7,  0x12u);
  }

  id v5 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  if (a2) {
    [v5 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
  }
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_1008893D0(void *a1, uint64_t a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  id v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    double v6 = (void **)a1[6];
    uint64_t buf = 68289282LL;
    __int16 v43 = 2082;
    unsigned int v44 = "";
    __int16 v45 = 2114;
    unsigned int v46 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received Microlocation recording scan request from: , ClientKeyPath:%{public, locatio n:escape_only}@}",  (uint8_t *)&buf,  0x1Cu);
  }

  if ((sub_1008887E8(a1) & 1) == 0)
  {
    __int16 v22 = *(CLConnectionMessage **)a2;
    uint64_t v40 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v38 = NSLocalizedDescriptionKey;
    uint64_t v39 = @"Not entitled for Microlocation.";
    uint64_t v41 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v39,  &v38,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v41,  &v40,  1LL);
LABEL_27:
    CLConnectionMessage::sendReply(v22);
    goto LABEL_28;
  }

  if ((sub_100BA0ED0() & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    int v23 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      sub_1004F2598();
      sub_1004F5420(__p);
      __int16 v24 = v29 >= 0 ? __p : (void **)__p[0];
      uint64_t buf = 68289282LL;
      __int16 v43 = 2082;
      unsigned int v44 = "";
      __int16 v45 = 2082;
      unsigned int v46 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:MicroLocations are not available on this platform, platform:%{public, location:escape_only}s}",  (uint8_t *)&buf,  0x1Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v22 = *(CLConnectionMessage **)a2;
    __int16 v36 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v34 = NSLocalizedDescriptionKey;
    uint64_t v35 = @"Microlocation is not available on this platform.";
    uint64_t v37 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v35,  &v34,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v37,  &v36,  1LL);
    goto LABEL_27;
  }

  objc_opt_class(&OBJC_CLASS___NSNumber);
  uint64_t v8 = v7;
  objc_opt_class(&OBJC_CLASS___NSString);
  uint64_t v10 = v9;
  *(void *)&double v11 = objc_opt_class(&OBJC_CLASS___NSUUID).n128_u64[0];
  uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses( *(CLConnectionMessage **)a2,  +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v8,  v11,  v10,  v12,  0LL));
  if (objc_msgSend( objc_msgSend( DictionaryOfClasses,  "objectForKey:",  @"private.MicroLocation.forced.recordingRequest"),  "BOOLValue")
    && (sub_100888944(a1) & 1) == 0)
  {
    uint64_t v25 = *(CLConnectionMessage **)a2;
    __int16 v32 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v30 = NSLocalizedDescriptionKey;
    NSErrorUserInfoKey v31 = @"Not entitled for forced recording.";
    uint64_t v33 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v33,  &v32,  1LL);
    CLConnectionMessage::sendReply(v25);
  }

  else
  {
    id v14 = sub_100888AA0((uint64_t)a1);
    unint64_t v15 = (void *)sub_10088926C((uint64_t)a1);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3321888768LL;
    _OWORD v26[2] = sub_1008898CC;
    _OWORD v26[3] = &unk_10185AE58;
    unint64_t v16 = *(std::__shared_weak_count **)(a2 + 8);
    v26[4] = *(void *)a2;
    NSErrorUserInfoKey v27 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }

    [v15 requestMicroLocationRecordingScanForClient:v14 withAdditionalInformation:DictionaryOfClasses withReply:v26];
    unint64_t v19 = v27;
    if (v27)
    {
      char v20 = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }

void sub_100889880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1008898CC(uint64_t a1, uint64_t a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10185B100);
  }
  unint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:replying for Microlocation recording request}",  (uint8_t *)v7,  0x12u);
  }

  id v5 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  if (a2) {
    [v5 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
  }
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_1008899E4(void *a1, uint64_t a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  id v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    double v6 = (void **)a1[6];
    *(_DWORD *)uint64_t buf = 68289282;
    int v31 = 0;
    __int16 v32 = 2082;
    uint64_t v33 = "";
    __int16 v34 = 2114;
    uint64_t v35 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received Microlocation truth donation request from: , ClientKeyPath:%{public, locatio n:escape_only}@}",  buf,  0x1Cu);
  }

  if ((sub_1008887E8(a1) & 1) == 0)
  {
    __int16 v22 = *(CLConnectionMessage **)a2;
    uint64_t v48 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
    uint64_t v47 = @"Not entitled for Microlocation.";
    int v49 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v47,  &v46,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v49,  &v48,  1LL);
LABEL_32:
    CLConnectionMessage::sendReply(v22);
    goto LABEL_34;
  }

  if ((sub_100BA0ED0() & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    int v23 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      sub_1004F2598();
      sub_1004F5420(__p);
      __int16 v24 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 68289282;
      int v31 = 0;
      __int16 v32 = 2082;
      uint64_t v33 = "";
      __int16 v34 = 2082;
      uint64_t v35 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:MicroLocations are not available on this platform, platform:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v22 = *(CLConnectionMessage **)a2;
    unsigned int v44 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v42 = NSLocalizedDescriptionKey;
    __int16 v43 = @"Microlocation is not available on this platform.";
    __int16 v45 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v43,  &v42,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v45,  &v44,  1LL);
    goto LABEL_32;
  }

  Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  __int16 v8 = Dictionary;
  if (Dictionary
    && [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelKey"]
    && [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationRecordingTriggerUuidKey"])
  {
    uint64_t v9 = sub_100888AA0((uint64_t)a1);
    uint64_t v10 =  -[NSUUID initWithUUIDString:]( [NSUUID alloc],  "initWithUUIDString:",  [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelKey"]);
    double v11 =  -[NSUUID initWithUUIDString:]( [NSUUID alloc],  "initWithUUIDString:",  [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationRecordingTriggerUuidKey"]);
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10185B100);
    }
    uint64_t v12 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      char v13 = -[NSString UTF8String](-[NSUUID UUIDString](v10, "UUIDString"), "UTF8String");
      id v14 = -[NSString UTF8String](-[NSUUID UUIDString](v11, "UUIDString"), "UTF8String");
      *(_DWORD *)uint64_t buf = 68289538;
      int v31 = 0;
      __int16 v32 = 2082;
      uint64_t v33 = "";
      __int16 v34 = 2082;
      uint64_t v35 = (void **)v13;
      __int16 v36 = 2082;
      uint64_t v37 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDaemonClient, truthlabel donation event, truthLabelUUID: :%{public, location:esca pe_only}s, triggerUUID: :%{public, location:escape_only}s}",  buf,  0x26u);
    }

    unint64_t v15 = (void *)sub_10088926C((uint64_t)a1);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3321888768LL;
    _OWORD v26[2] = sub_100889FC4;
    _OWORD v26[3] = &unk_10185AE58;
    unint64_t v16 = *(std::__shared_weak_count **)(a2 + 8);
    v26[4] = *(void *)a2;
    NSErrorUserInfoKey v27 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }

    [v15 donateTruthTagLabelForClient:v9 truthLabelUUID:v10 recordingTriggerUUID:v11 withReply:v26];
    unint64_t v19 = v27;
    if (v27)
    {
      char v20 = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }

  else
  {
    uint64_t v25 = *(CLConnectionMessage **)a2;
    uint64_t v40 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v38 = NSLocalizedDescriptionKey;
    uint64_t v39 = @"Invalid parameters. Check truthLabelUUID and recordingTriggerUUID";
    uint64_t v41 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v39,  &v38,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v41,  &v40,  1LL);
    CLConnectionMessage::sendReply(v25);
  }

void sub_100889F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100889FC4(uint64_t a1, uint64_t a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10185B100);
  }
  unint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:donate truth label is replied}",  (uint8_t *)v7,  0x12u);
  }

  id v5 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  if (a2) {
    [v5 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
  }
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_10088A0DC(void *a1, uint64_t a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  id v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    double v6 = (void **)a1[6];
    uint64_t buf = 68289282LL;
    __int16 v43 = 2082;
    unsigned int v44 = "";
    __int16 v45 = 2114;
    NSErrorUserInfoKey v46 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received Microlocation truth donation between dates request from: , ClientKeyPath:%{p ublic, location:escape_only}@}",  (uint8_t *)&buf,  0x1Cu);
  }

  if ((sub_1008887E8(a1) & 1) == 0)
  {
    __int16 v22 = *(CLConnectionMessage **)a2;
    uint64_t v40 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v38 = NSLocalizedDescriptionKey;
    uint64_t v39 = @"Not entitled for Microlocation.";
    uint64_t v41 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v39,  &v38,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v41,  &v40,  1LL);
LABEL_33:
    CLConnectionMessage::sendReply(v22);
    goto LABEL_35;
  }

  if ((sub_100BA0ED0() & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    int v23 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      sub_1004F2598();
      sub_1004F5420(__p);
      __int16 v24 = v29 >= 0 ? __p : (void **)__p[0];
      uint64_t buf = 68289282LL;
      __int16 v43 = 2082;
      unsigned int v44 = "";
      __int16 v45 = 2082;
      NSErrorUserInfoKey v46 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:MicroLocations are not available on this platform, platform:%{public, location:escape_only}s}",  (uint8_t *)&buf,  0x1Cu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v22 = *(CLConnectionMessage **)a2;
    __int16 v36 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v34 = NSLocalizedDescriptionKey;
    uint64_t v35 = @"Microlocation is not available on this platform.";
    uint64_t v37 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v35,  &v34,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v37,  &v36,  1LL);
    goto LABEL_33;
  }

  Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  __int16 v8 = Dictionary;
  if (Dictionary
    && [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelKey"]
    && [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelStartDateKey"]
    && [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelEndDateKey"])
  {
    uint64_t v9 = sub_100888AA0((uint64_t)a1);
    uint64_t v10 =  -[NSUUID initWithUUIDString:]( [NSUUID alloc],  "initWithUUIDString:",  [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelKey"]);
    id v11 = [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelStartDateKey"];
    id v12 = [v8 objectForKeyedSubscript:@"kCLConnectionMessageMicroLocationTruthLabelEndDateKey"];
    if (qword_1019348D0 != -1) {
      dispatch_once(&qword_1019348D0, &stru_10185B100);
    }
    char v13 = (os_log_s *)qword_1019348D8;
    if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
    {
      id v14 = -[NSString UTF8String](-[NSUUID UUIDString](v10, "UUIDString"), "UTF8String");
      uint64_t buf = 68289282LL;
      __int16 v43 = 2082;
      unsigned int v44 = "";
      __int16 v45 = 2082;
      NSErrorUserInfoKey v46 = (void **)v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:CLDaemonClient, truthlabel donation between dates event, truthLabelUUID: :%{public, location:escape_only}s}",  (uint8_t *)&buf,  0x1Cu);
    }

    unint64_t v15 = (void *)sub_10088926C((uint64_t)a1);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3321888768LL;
    _OWORD v26[2] = sub_10088A6B8;
    _OWORD v26[3] = &unk_10185AE58;
    unint64_t v16 = *(std::__shared_weak_count **)(a2 + 8);
    v26[4] = *(void *)a2;
    NSErrorUserInfoKey v27 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }

    [v15 donateTruthTagLabelForClient:v9 truthLabelUUID:v10 betweenDate:v11 andDate:v12 withReply:v26];
    unint64_t v19 = v27;
    if (v27)
    {
      char v20 = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }

  else
  {
    uint64_t v25 = *(CLConnectionMessage **)a2;
    __int16 v32 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v30 = NSLocalizedDescriptionKey;
    int v31 = @"Invalid parameters. Check truthLabelUUID, startDate and endDate";
    uint64_t v33 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v33,  &v32,  1LL);
    CLConnectionMessage::sendReply(v25);
  }

void sub_10088A664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10088A6B8(uint64_t a1, uint64_t a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10185B100);
  }
  unint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:donate truth label between dates is replied}",  (uint8_t *)v7,  0x12u);
  }

  id v5 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  if (a2) {
    [v5 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
  }
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_10088A7D0(void *a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  id v3 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = (void **)a1[6];
    *(_DWORD *)uint64_t buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    char v13 = "";
    __int16 v14 = 2114;
    unint64_t v15 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received purge Microlocation semi-supervised data request from: , ClientKeyPath:%{pub lic, location:escape_only}@}",  buf,  0x1Cu);
  }

  if ((sub_1008887E8(a1) & 1) != 0)
  {
    if ((sub_100BA0ED0() & 1) != 0)
    {
      id v5 = sub_100888AA0((uint64_t)a1);
      [(id)sub_10088926C((uint64_t)a1) purgeMicroLocationSemiSupervisedDataForClient:v5];
    }

    else
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      double v6 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
      {
        sub_1004F2598();
        sub_1004F5420(__p);
        if (v9 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289282;
        int v11 = 0;
        __int16 v12 = 2082;
        char v13 = "";
        __int16 v14 = 2082;
        unint64_t v15 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:MicroLocations are not available on this platform, platform:%{public, location:escape_only}s}",  buf,  0x1Cu);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_10088A9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10088A9F8(void *a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  id v3 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = (void **)a1[6];
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v14 = 2082;
    unint64_t v15 = "";
    __int16 v16 = 2114;
    uint64_t v17 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received purge Microlocation data request from: , ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  if ((sub_1008887E8(a1) & 1) != 0)
  {
    sub_1010DDBC0(buf, "com.apple.locationd.milo_purge_data");
    char v5 = (*(uint64_t (**)(void *, uint8_t *))(*a1 + 40LL))(a1, buf);
    char v6 = v5;
    if (SBYTE3(v17) < 0)
    {
      operator delete(*(void **)buf);
      if ((v6 & 1) != 0)
      {
LABEL_8:
        if ((sub_100BA0ED0() & 1) != 0)
        {
          [(id)sub_10088926C((uint64_t)a1) purgeAllMicroLocationData];
        }

        else
        {
          if (qword_101934970 != -1) {
            dispatch_once(&qword_101934970, &stru_10185AF60);
          }
          char v9 = (os_log_s *)qword_101934978;
          if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
          {
            sub_1004F2598();
            sub_1004F5420(__p);
            if (v12 >= 0) {
              uint64_t v10 = __p;
            }
            else {
              uint64_t v10 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v14 = 2082;
            unint64_t v15 = "";
            __int16 v16 = 2082;
            uint64_t v17 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:MicroLocations are not available on this platform, platform:%{public, locatio n:escape_only}s}",  buf,  0x1Cu);
            if (v12 < 0) {
              operator delete(__p[0]);
            }
          }
        }

        goto LABEL_23;
      }
    }

    else if ((v5 & 1) != 0)
    {
      goto LABEL_8;
    }

    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v7 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      __int16 v8 = (void **)a1[6];
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Warning Client does not have appropriate entitlement to request purge of milo data, C lientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
    }
  }

void sub_10088ACB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_10088ACFC(void *a1, uint64_t *a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  char v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    char v6 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282LL;
    __int16 v40 = 2082;
    uint64_t v41 = "";
    __int16 v42 = 2114;
    __int16 v43 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received export Microlocation database tables request from: , ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  if ((sub_1008887E8(a1) & 1) == 0)
  {
    uint64_t v16 = *a2;
    uint64_t v37 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
    __int16 v36 = @"Not entitled for Microlocation.";
    NSErrorUserInfoKey v38 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL);
LABEL_27:
    CLConnectionMessage::sendReply(v16);
    goto LABEL_28;
  }

  if ((sub_100BA0ED0() & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v17 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      sub_1004F2598();
      sub_1004F5420(__p);
      unint64_t v18 = v26 >= 0 ? __p : (void **)__p[0];
      *(void *)uint64_t buf = 68289282LL;
      __int16 v40 = 2082;
      uint64_t v41 = "";
      __int16 v42 = 2082;
      __int16 v43 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:MicroLocations are not available on this platform, platform:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v16 = *a2;
    uint64_t v33 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    __int16 v32 = @"Microlocation is not available on this platform.";
    NSErrorUserInfoKey v34 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL);
    goto LABEL_27;
  }

  sub_1010DDBC0(buf, "com.apple.locationd.microlocation.export-db");
  char v7 = (*(uint64_t (**)(void *, uint8_t *))(*a1 + 40LL))(a1, buf);
  char v8 = v7;
  if (SBYTE3(v43) < 0)
  {
    operator delete(*(void **)buf);
    if ((v8 & 1) != 0) {
      goto LABEL_9;
    }
  }

  else if ((v7 & 1) != 0)
  {
LABEL_9:
    char v9 = (void *)sub_10088926C((uint64_t)a1);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3321888768LL;
    _OWORD v23[2] = sub_10088B248;
    v23[3] = &unk_10185AE88;
    uint64_t v10 = (std::__shared_weak_count *)a2[1];
    v23[4] = *a2;
    __int16 v24 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        unint64_t v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }

    [v9 exportMicroLocationDatabaseTablesWithReply:v23];
    char v13 = v24;
    if (v24)
    {
      __int16 v14 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    goto LABEL_28;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v19 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    char v20 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282LL;
    __int16 v40 = 2082;
    uint64_t v41 = "";
    __int16 v42 = 2114;
    __int16 v43 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Warning Client does not have appropriate entitlement to request MicroLocation export databa se tables, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
  NSErrorUserInfoKey v30 = @"Not entitled for export database.";
  unint64_t v21 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
  uint64_t v22 = *a2;
  NSErrorUserInfoKey v27 = @"kCLConnectionMessageErrorKey";
  unsigned int v28 = v21;
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL);
  CLConnectionMessage::sendReply(v22);
LABEL_28:
}

void sub_10088B1EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10088B248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 =  -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  2LL);
  char v7 = v6;
  if (a2) {
    -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", a2, @"kCLConnectionMessageErrorKey");
  }
  if (a3) {
    -[NSMutableDictionary setObject:forKey:]( v7,  "setObject:forKey:",  a3,  @"kCLConnectionMessageMicroLocationExportDatabaseTablesInfoKey");
  }
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_10088B2C8(void *a1, uint64_t *a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  char v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    char v6 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282LL;
    __int16 v40 = 2082;
    uint64_t v41 = "";
    __int16 v42 = 2114;
    __int16 v43 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received export Microlocation data for migration request from: , ClientKeyPath:%{publ ic, location:escape_only}@}",  buf,  0x1Cu);
  }

  if ((sub_1008887E8(a1) & 1) == 0)
  {
    uint64_t v16 = *a2;
    uint64_t v37 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
    __int16 v36 = @"Not entitled for Microlocation.";
    NSErrorUserInfoKey v38 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL);
LABEL_27:
    CLConnectionMessage::sendReply(v16);
    goto LABEL_28;
  }

  if ((sub_100BA0ED0() & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v17 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      sub_1004F2598();
      sub_1004F5420(__p);
      unint64_t v18 = v26 >= 0 ? __p : (void **)__p[0];
      *(void *)uint64_t buf = 68289282LL;
      __int16 v40 = 2082;
      uint64_t v41 = "";
      __int16 v42 = 2082;
      __int16 v43 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:MicroLocations are not available on this platform, platform:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v16 = *a2;
    uint64_t v33 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    __int16 v32 = @"Microlocation is not available on this platform.";
    NSErrorUserInfoKey v34 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL);
    goto LABEL_27;
  }

  sub_1010DDBC0(buf, "com.apple.locationd.microlocation.export-db");
  char v7 = (*(uint64_t (**)(void *, uint8_t *))(*a1 + 40LL))(a1, buf);
  char v8 = v7;
  if (SBYTE3(v43) < 0)
  {
    operator delete(*(void **)buf);
    if ((v8 & 1) != 0) {
      goto LABEL_9;
    }
  }

  else if ((v7 & 1) != 0)
  {
LABEL_9:
    char v9 = (void *)sub_10088926C((uint64_t)a1);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3321888768LL;
    _OWORD v23[2] = sub_10088B814;
    v23[3] = &unk_10185AE88;
    uint64_t v10 = (std::__shared_weak_count *)a2[1];
    v23[4] = *a2;
    __int16 v24 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        unint64_t v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }

    [v9 exportMicroLocationDataForMigrationWithReply:v23];
    char v13 = v24;
    if (v24)
    {
      __int16 v14 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    goto LABEL_28;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v19 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    char v20 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282LL;
    __int16 v40 = 2082;
    uint64_t v41 = "";
    __int16 v42 = 2114;
    __int16 v43 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Warning Client does not have appropriate entitlement to request MicroLocation export databa se tables, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
  NSErrorUserInfoKey v30 = @"Not entitled for export database.";
  unint64_t v21 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
  uint64_t v22 = *a2;
  NSErrorUserInfoKey v27 = @"kCLConnectionMessageErrorKey";
  unsigned int v28 = v21;
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL);
  CLConnectionMessage::sendReply(v22);
LABEL_28:
}

void sub_10088B7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10088B814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 =  -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  2LL);
  char v7 = v6;
  if (a2) {
    -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", a2, @"kCLConnectionMessageErrorKey");
  }
  if (a3) {
    -[NSMutableDictionary setObject:forKey:]( v7,  "setObject:forKey:",  a3,  @"kCLConnectionMessageMicroLocationExportDataForMigrationInfoKey");
  }
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_10088B894(void *a1, uint64_t *a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  char v5 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    char v6 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282LL;
    __int16 v40 = 2082;
    uint64_t v41 = "";
    __int16 v42 = 2114;
    __int16 v43 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received export per anchor per cluster measurement value statistics request from: , Cli entKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  if ((sub_1008887E8(a1) & 1) == 0)
  {
    uint64_t v16 = *a2;
    uint64_t v37 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
    __int16 v36 = @"Not entitled for Microlocation.";
    NSErrorUserInfoKey v38 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL);
LABEL_27:
    CLConnectionMessage::sendReply(v16);
    goto LABEL_28;
  }

  if ((sub_100BA0ED0() & 1) == 0)
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v17 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      sub_1004F2598();
      sub_1004F5420(__p);
      unint64_t v18 = v26 >= 0 ? __p : (void **)__p[0];
      *(void *)uint64_t buf = 68289282LL;
      __int16 v40 = 2082;
      uint64_t v41 = "";
      __int16 v42 = 2082;
      __int16 v43 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:MicroLocations are not available on this platform, platform:%{public, location:escape_only}s}",  buf,  0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v16 = *a2;
    uint64_t v33 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    __int16 v32 = @"Microlocation is not available on this platform.";
    NSErrorUserInfoKey v34 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL);
    goto LABEL_27;
  }

  sub_1010DDBC0(buf, "com.apple.locationd.microlocation.source-statistics");
  char v7 = (*(uint64_t (**)(void *, uint8_t *))(*a1 + 40LL))(a1, buf);
  char v8 = v7;
  if (SBYTE3(v43) < 0)
  {
    operator delete(*(void **)buf);
    if ((v8 & 1) != 0) {
      goto LABEL_9;
    }
  }

  else if ((v7 & 1) != 0)
  {
LABEL_9:
    char v9 = (void *)sub_10088926C((uint64_t)a1);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3321888768LL;
    _OWORD v23[2] = sub_10088BDE0;
    v23[3] = &unk_10185AE88;
    uint64_t v10 = (std::__shared_weak_count *)a2[1];
    v23[4] = *a2;
    __int16 v24 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        unint64_t v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }

    [v9 requestAnchorValueStatisticsWithReply:v23];
    char v13 = v24;
    if (v24)
    {
      __int16 v14 = (unint64_t *)&v24->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    goto LABEL_28;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v19 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    char v20 = (void **)a1[6];
    *(void *)uint64_t buf = 68289282LL;
    __int16 v40 = 2082;
    uint64_t v41 = "";
    __int16 v42 = 2114;
    __int16 v43 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Warning, client is not entitled to request Microlocation to export static sources' value st atistics, ClientKeyPath:%{public, location:escape_only}@}",  buf,  0x1Cu);
  }

  NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
  NSErrorUserInfoKey v30 = @"Not entitled for exporting anchor value statistics";
  unint64_t v21 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
  uint64_t v22 = *a2;
  NSErrorUserInfoKey v27 = @"kCLConnectionMessageErrorKey";
  unsigned int v28 = v21;
  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL);
  CLConnectionMessage::sendReply(v22);
LABEL_28:
}

void sub_10088BD84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10088BDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 =  -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  2LL);
  char v7 = v6;
  if (a2) {
    -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", a2, @"kCLConnectionMessageErrorKey");
  }
  if (a3) {
    -[NSMutableDictionary setObject:forKey:]( v7,  "setObject:forKey:",  a3,  @"kCLConnectionMessageMicroLocationRequestStaticSourcesStatisticsInfoKey");
  }
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_10088BE60(void *a1, void *a2)
{
  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  unint64_t v4 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
  {
    char v5 = (void **)a1[6];
    uint64_t buf = 68289282LL;
    __int16 v31 = 2082;
    __int16 v32 = "";
    __int16 v33 = 2114;
    NSErrorUserInfoKey v34 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Received current MicroLocation request from: , ClientKeyPath:%{public, location:escape_only}@}",  (uint8_t *)&buf,  0x1Cu);
  }

  if ((sub_1008887E8(a1) & 1) != 0)
  {
    if ((sub_100BA0ED0() & 1) != 0)
    {
      char v6 = sub_100888AA0((uint64_t)a1);
      char v7 = (void *)sub_10088926C((uint64_t)a1);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3321888768LL;
      void v18[2] = sub_10088C214;
      v18[3] = &unk_10185AE58;
      char v8 = (std::__shared_weak_count *)a2[1];
      v18[4] = *a2;
      unint64_t v19 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          unint64_t v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }

      objc_msgSend(v7, "requestMicroLocationLearningForClient_Legacy:withReply:", v6, v18);
      int v11 = v19;
      if (v19)
      {
        unint64_t v12 = (unint64_t *)&v19->__shared_owners_;
        do
          unint64_t v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }

    else
    {
      if (qword_101934970 != -1) {
        dispatch_once(&qword_101934970, &stru_10185AF60);
      }
      unint64_t v15 = (os_log_s *)qword_101934978;
      if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
      {
        sub_1004F2598();
        sub_1004F5420(__p);
        uint64_t v16 = v21 >= 0 ? __p : (void **)__p[0];
        uint64_t buf = 68289282LL;
        __int16 v31 = 2082;
        __int16 v32 = "";
        __int16 v33 = 2082;
        NSErrorUserInfoKey v34 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:MicroLocations are not available on this platform, platform:%{public, location:escape_only}s}",  (uint8_t *)&buf,  0x1Cu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v17 = *a2;
      __int16 v24 = @"kCLConnectionMessageErrorKey";
      NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
      int v23 = @"Microlocation is not available on this platform.";
      uint64_t v25 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL));
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL);
      CLConnectionMessage::sendReply(v17);
    }
  }

  else
  {
    uint64_t v14 = *a2;
    unsigned int v28 = @"kCLConnectionMessageErrorKey";
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    NSErrorUserInfoKey v27 = @"Not entitled for Microlocation.";
    NSErrorUserInfoKey v29 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCLErrorDomain,  1LL,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL));
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v29,  &v28,  1LL);
    CLConnectionMessage::sendReply(v14);
  }

void sub_10088C1F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10088C214(uint64_t a1, uint64_t a2)
{
  if (qword_1019348D0 != -1) {
    dispatch_once(&qword_1019348D0, &stru_10185B100);
  }
  unint64_t v4 = (os_log_s *)qword_1019348D8;
  if (os_log_type_enabled((os_log_t)qword_1019348D8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    __int16 v8 = 2082;
    char v9 = "";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "{msg%{public}.0s:replying for Microlocation learning request}",  (uint8_t *)v7,  0x12u);
  }

  id v5 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  if (a2) {
    [v5 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
  }
  return CLConnectionMessage::sendReply(*(void *)(a1 + 32));
}

void sub_10088C32C(uint64_t a1, void *a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_10185B120);
  }
  id v5 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Received request to trigger VO2Max retrocompute",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10185B120);
    }
    v18[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "Received request to trigger VO2Max retrocompute",  v18,  2);
    unint64_t v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleTriggerVo2MaxRetrocompute(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  if (objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "isServiceRunning:",  @"CLVO2MaxService"))
  {
    id v6 = objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "proxyForService:forClient:",  @"CLVO2MaxService",  @"CLClientManager");
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3321888768LL;
    void v16[2] = sub_10088C664;
    void v16[3] = &unk_101848040;
    char v7 = (std::__shared_weak_count *)a2[1];
    v16[4] = *a2;
    uint64_t v17 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }

    [v6 triggerRetrocomputeWithReply:v16];
    unint64_t v10 = v17;
    if (v17)
    {
      int v11 = (unint64_t *)&v17->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }

  else
  {
    uint64_t v13 = *a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v19 = CMErrorMessage;
    char v20 = &off_1018D3B60;
    CLConnectionMessage::sendReply( v13,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
    if (v22 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_10088C60C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  _Unwind_Resume(a1);
}

void sub_10088C664(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((_DWORD)a2 == 100)
  {
    CLConnectionMessage::sendReply(*(void *)(a1 + 32));
  }

  else
  {
    sub_1010DDBC0(__p, "kCLConnectionMessageError");
    uint64_t v6 = CMErrorMessage;
    char v7 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
    CLConnectionMessage::sendReply( v2,  __p,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }

void sub_10088C760( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_10088C784(uint64_t a1, void *a2)
{
  unint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_1019346E0 != -1) {
    dispatch_once(&qword_1019346E0, &stru_10185B120);
  }
  char v5 = (os_log_s *)qword_1019346E8;
  if (os_log_type_enabled((os_log_t)qword_1019346E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Received request to query VO2Max retrocompute status",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019346E0 != -1) {
      dispatch_once(&qword_1019346E0, &stru_10185B120);
    }
    v18[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019346E8,  2LL,  "Received request to query VO2Max retrocompute status",  v18,  2);
    unint64_t v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageVO2MaxRetrocomputeStatusQuery(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  if (objc_msgSend( objc_msgSend(*(id *)(a1 + 24), "vendor"),  "isServiceRunning:",  @"CLVO2MaxService"))
  {
    id v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLVO2MaxService");
    [v6 registerDelegate:*(void *)(a1 + 40) inSilo:*(void *)(a1 + 32)];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3321888768LL;
    void v16[2] = sub_10088CAC8;
    void v16[3] = &unk_10185AEB8;
    char v7 = (std::__shared_weak_count *)a2[1];
    v16[4] = *a2;
    uint64_t v17 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }

    [v6 queryVO2MaxRetrocomputeStatusWithReply:v16];
    unint64_t v10 = v17;
    if (v17)
    {
      int v11 = (unint64_t *)&v17->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }

  else
  {
    uint64_t v13 = *a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v19 = CMErrorMessage;
    char v20 = &off_1018D3B60;
    CLConnectionMessage::sendReply( v13,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
    if (v22 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_10088CA6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10088CAC8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v6 = CMVO2MaxRetrocomputeRecord;
    uint64_t v7 = a2;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL);
    uint64_t v3 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v8 = CMErrorMessage;
    unint64_t v9 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL);
    uint64_t v3 = v4;
  }

  return CLConnectionMessage::sendReply(v3);
}

void sub_10088CB98(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934730 != -1) {
    dispatch_once(&qword_101934730, &stru_10185B140);
  }
  char v5 = (os_log_s *)qword_101934738;
  if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Received request to write context configuration",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_10185B140);
    }
    LOWORD(v26) = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "Received request to write context configuration",  &v26,  2);
    unint64_t v15 = (uint8_t *)v14;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageWriteContextConfiguration(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v14);
    if (v15 != buf) {
      free(v15);
    }
  }

  id v6 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:CMContextConfigurationKey];
  uint64_t v7 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  +[NSDictionary dictionaryWithDictionary:](&OBJC_CLASS___NSDictionary, "dictionaryWithDictionary:", v6),  1LL,  0LL);
  id v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", @"CLCompanionNotifier");
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10088D148;
  v21[3] = &unk_101840D20;
  v21[4] = v7;
  [v8 doAsync:v21];
  if (qword_101934730 != -1) {
    dispatch_once(&qword_101934730, &stru_10185B140);
  }
  unint64_t v9 = (os_log_s *)qword_101934738;
  if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138412290;
    id v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Sent configuration to watch: %@", buf, 0xCu);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_10185B140);
    }
    int v26 = 138412290;
    id v27 = v6;
    LODWORD(v2sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 12;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "Sent configuration to watch: %@",  &v26,  v20);
    uint64_t v17 = (uint8_t *)v16;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageWriteContextConfiguration(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v16);
    if (v17 != buf) {
      free(v17);
    }
  }

  uint64_t v10 = sub_100B7ECFC();
  uint64_t v11 = sub_100B803FC(v10, v6);
  if ((_DWORD)v11 == 100)
  {
    unint64_t v12 = *a2;
    uint64_t v22 = CMReturnCode;
    int v23 = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL);
  }

  else
  {
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_10185B140);
    }
    uint64_t v13 = (os_log_s *)qword_101934738;
    if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v29) = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[Dynamic Config] Error on config insertion: %{public}d",  buf,  8u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934730 != -1) {
        dispatch_once(&qword_101934730, &stru_10185B140);
      }
      int v26 = 67240192;
      LODWORD(v27) = v11;
      LODWORD(v2sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  16LL,  "[Dynamic Config] Error on config insertion: %{public}d",  &v26,  v20);
      uint64_t v19 = (uint8_t *)v18;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageWriteContextConfiguration(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v18);
      if (v19 != buf) {
        free(v19);
      }
    }

    unint64_t v12 = *a2;
    uint64_t v24 = CMErrorMessage;
    uint64_t v25 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v11);
    +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL);
  }

  CLConnectionMessage::sendReply(v12);
}

void sub_10088D104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10088D148(uint64_t a1, uint64_t a2)
{
  return sub_10039FB50(120.0, a2, 32, *(void **)(a1 + 32), 300LL, 0LL, 0LL, 0LL, 0, 0LL);
}

void sub_10088D190(id *a1, uint64_t *a2)
{
  if (qword_1019347B0 != -1) {
    dispatch_once(&qword_1019347B0, &stru_10185B160);
  }
  uint64_t v4 = (os_log_s *)qword_1019347B8;
  if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "DaemonClient: Received request for ColdStorageQueryConfiguration",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_10185B160);
    }
    v22[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  2LL,  "DaemonClient: Received request for ColdStorageQueryConfiguration",  v22,  2);
    uint64_t v16 = (uint8_t *)v15;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageColdStorageQueryConfiguration(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v15);
    if (v16 != buf) {
      free(v16);
    }
  }

  sub_1010DDBC0(buf, "com.apple.locationd.cold-storage");
  char v5 = (*((uint64_t (**)(id *, uint8_t *))*a1 + 5))(a1, buf);
  char v6 = v5;
  if ((v32 & 0x80000000) == 0)
  {
    if ((v5 & 1) != 0) {
      goto LABEL_8;
    }
LABEL_12:
    uint64_t v10 = *a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v29 = CMErrorMessage;
    NSErrorUserInfoKey v30 = &off_1018D3BA8;
    CLConnectionMessage::sendReply( v10,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
    goto LABEL_25;
  }

  operator delete(*(void **)buf);
  if ((v6 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_8:
  id v7 = objc_msgSend(objc_msgSend(a1[3], "vendor"), "proxyForService:", @"CMHealthColdStorageService");
  if (v7)
  {
    id v8 = [v7 syncgetFetchColdStorageConfiguration];
    if (v8)
    {
      uint64_t v9 = *a2;
      uint64_t v23 = CMColdStorageConfiguration;
      id v24 = v8;
      +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v24,  &v23,  1LL);
      CLConnectionMessage::sendReply(v9);
      return;
    }

    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_10185B160);
    }
    uint64_t v13 = (os_log_s *)qword_1019347B8;
    if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "DaemonClient: Failed to fetch configuration",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347B0 != -1) {
        dispatch_once(&qword_1019347B0, &stru_10185B160);
      }
      v22[0] = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  16LL,  "DaemonClient: Failed to fetch configuration",  v22,  v21);
      uint64_t v20 = (uint8_t *)v19;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageColdStorageQueryConfiguration(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v19);
      if (v20 != buf) {
        free(v20);
      }
    }

    uint64_t v14 = *a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v25 = CMErrorMessage;
    int v26 = &off_1018D3AE8;
    CLConnectionMessage::sendReply( v14,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL));
  }

  else
  {
    if (qword_1019347B0 != -1) {
      dispatch_once(&qword_1019347B0, &stru_10185B160);
    }
    uint64_t v11 = (os_log_s *)qword_1019347B8;
    if (os_log_type_enabled((os_log_t)qword_1019347B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "DaemonClient: Request failed because ColdStorage Service not running",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019347B0 != -1) {
        dispatch_once(&qword_1019347B0, &stru_10185B160);
      }
      v22[0] = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019347B8,  16LL,  "DaemonClient: Request failed because ColdStorage Service not running",  v22,  v21);
      unint64_t v18 = (uint8_t *)v17;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageColdStorageQueryConfiguration(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v17);
      if (v18 != buf) {
        free(v18);
      }
    }

    uint64_t v12 = *a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v27 = CMErrorMessage;
    unsigned int v28 = &off_1018D3B60;
    CLConnectionMessage::sendReply( v12,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
  }

void sub_10088D72C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10088D75C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_101934730 != -1) {
    dispatch_once(&qword_101934730, &stru_10185B140);
  }
  char v5 = (os_log_s *)qword_101934738;
  if (os_log_type_enabled((os_log_t)qword_101934738, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Collecting Metrics for function", buf, 2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934730 != -1) {
      dispatch_once(&qword_101934730, &stru_10185B140);
    }
    v11[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934738,  2LL,  "Collecting Metrics for function",  v11,  2);
    uint64_t v10 = (uint8_t *)v9;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageCollectMetricsForFunction(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v9);
    if (v10 != buf) {
      free(v10);
    }
  }

  uint64_t v6 = *(void *)(a1 + 16);
  id v7 = *(void **)(a1 + 48);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  sub_100561368(v6, v7, Dictionary);
}

void sub_10088D92C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10088D958(id *a1, uint64_t a2)
{
  if (qword_101934A00 != -1) {
    dispatch_once(&qword_101934A00, &stru_10185B180);
  }
  uint64_t v4 = (os_log_s *)qword_101934A08;
  if (os_log_type_enabled((os_log_t)qword_101934A08, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "DaemonClient: Received request for motion sensor data simulation",  buf,  2u);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_101934A00 != -1) {
      dispatch_once(&qword_101934A00, &stru_10185B180);
    }
    v42[0] = 0;
    _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A08,  2LL,  "DaemonClient: Received request for motion sensor data simulation",  v42,  2);
    char v32 = (uint8_t *)v31;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "void CLDaemonClient::handleMessageSensorMonitorMotionSensorData(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v31);
    if (v32 != buf) {
      free(v32);
    }
  }

  sub_1010DDBC0(buf, "com.apple.locationd.sensormonitor-simulator");
  char v5 = (*((uint64_t (**)(id *, uint8_t *))*a1 + 5))(a1, buf);
  char v6 = v5;
  if ((v48 & 0x80000000) == 0)
  {
    if ((v5 & 1) != 0) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t v14 = *(CLConnectionMessage **)a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v45 = CMErrorMessage;
    NSErrorUserInfoKey v46 = &off_1018D3BA8;
    CLConnectionMessage::sendReply( v14,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL));
LABEL_35:
    if (v48 < 0) {
      operator delete(*(void **)buf);
    }
    return;
  }

  operator delete(*(void **)buf);
  if ((v6 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  id v7 = objc_msgSend(objc_msgSend(a1[3], "vendor"), "proxyForService:", @"CLSensorMonitor");
  if (!v7)
  {
    if (qword_101934A00 != -1) {
      dispatch_once(&qword_101934A00, &stru_10185B180);
    }
    uint64_t v23 = (os_log_s *)qword_101934A08;
    if (os_log_type_enabled((os_log_t)qword_101934A08, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "DaemonClient: Request failed because SensorMonitor Service not running",  buf,  2u);
    }

    if (sub_1002921D0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A00 != -1) {
        dispatch_once(&qword_101934A00, &stru_10185B180);
      }
      v42[0] = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A08,  16LL,  "DaemonClient: Request failed because SensorMonitor Service not running",  v42,  v39);
      __int16 v36 = (uint8_t *)v35;
      sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageSensorMonitorMotionSensorData(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v35);
      if (v36 != buf) {
        free(v36);
      }
    }

    id v24 = *(CLConnectionMessage **)a2;
    sub_1010DDBC0(buf, "kCLConnectionMessageError");
    uint64_t v43 = CMErrorMessage;
    unsigned int v44 = &off_1018D3B60;
    CLConnectionMessage::sendReply( v24,  buf,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v44,  &v43,  1LL));
    goto LABEL_35;
  }

  Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  uint64_t v9 = Dictionary;
  if (Dictionary
    && (uint64_t v10 = CMSensorMonitorMotionSensorTypeId,
        [Dictionary objectForKeyedSubscript:CMSensorMonitorMotionSensorTypeId])
    && (uint64_t v11 = CMSensorMonitorMotionSensorPayload,
        [v9 objectForKeyedSubscript:CMSensorMonitorMotionSensorPayload]))
  {
    id v12 = [v9 objectForKeyedSubscript:v10];
    objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
    {
      objc_msgSend( v7,  "simulateMotionSensorDataForType:payload:",  objc_msgSend(objc_msgSend(v9, "objectForKeyedSubscript:", v10), "integerValue"),  objc_msgSend(v9, "objectForKeyedSubscript:", v11));
      return;
    }

    if (qword_101934A00 != -1) {
      dispatch_once(&qword_101934A00, &stru_10185B180);
    }
    uint64_t v25 = (os_log_s *)qword_101934A08;
    if (os_log_type_enabled((os_log_t)qword_101934A08, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Motion Sensor Type is invalid", buf, 2u);
    }

    uint64_t v26 = sub_1002921D0(115, 0);
    if ((_DWORD)v26)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A00 != -1) {
        dispatch_once(&qword_101934A00, &stru_10185B180);
      }
      v42[0] = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A08,  16LL,  "Motion Sensor Type is invalid",  v42,  v39);
      NSErrorUserInfoKey v38 = (uint8_t *)v37;
      uint64_t v26 = sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageSensorMonitorMotionSensorData(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v37);
      if (v38 != buf) {
        free(v38);
      }
    }

    uint64_t v27 = *(CLConnectionMessage **)a2;
    unint64_t v18 = *(std::__shared_weak_count **)(a2 + 8);
    v40[0] = v27;
    v40[1] = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
    }

    sub_10088144C(v26, v40);
    if (v18)
    {
      NSErrorUserInfoKey v30 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v22 = __ldaxr(v30);
      while (__stlxr(v22 - 1, v30));
LABEL_27:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }

  else
  {
    if (qword_101934A00 != -1) {
      dispatch_once(&qword_101934A00, &stru_10185B180);
    }
    unint64_t v15 = (os_log_s *)qword_101934A08;
    if (os_log_type_enabled((os_log_t)qword_101934A08, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Error receiving valid request to simulate motion sensor data",  buf,  2u);
    }

    uint64_t v16 = sub_1002921D0(115, 0);
    if ((_DWORD)v16)
    {
      bzero(buf, 0x65CuLL);
      if (qword_101934A00 != -1) {
        dispatch_once(&qword_101934A00, &stru_10185B180);
      }
      v42[0] = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_101934A08,  16LL,  "Error receiving valid request to simulate motion sensor data",  v42,  v39);
      NSErrorUserInfoKey v34 = (uint8_t *)v33;
      uint64_t v16 = sub_10029211C( "Generic",  1LL,  0,  0LL,  "void CLDaemonClient::handleMessageSensorMonitorMotionSensorData(std::shared_ptr<CLConnectionMessage>)",  "%s\n",  v33);
      if (v34 != buf) {
        free(v34);
      }
    }

    uint64_t v17 = *(CLConnectionMessage **)a2;
    unint64_t v18 = *(std::__shared_weak_count **)(a2 + 8);
    v41[0] = v17;
    v41[1] = v18;
    if (v18)
    {
      uint64_t v19 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }

    sub_10088144C(v16, v41);
    if (v18)
    {
      uint64_t v21 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      goto LABEL_27;
    }
  }

void sub_10088E0E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
}

uint64_t sub_10088E128(const char *a1)
{
  uint64_t result = strcmp(a1, "kCLConnectionMessageCollectMetricsForFunction");
  if ((_DWORD)result)
  {
    uint64_t result = strcmp(a1, "kCLConnectionMessageGesture");
    if ((_DWORD)result)
    {
      uint64_t result = strcmp(a1, "kCLConnectionMessageGyroBiasEstimation");
      if ((_DWORD)result)
      {
        uint64_t result = strcmp(a1, "kCLConnectionMessageMotionActivityUpdate");
        if ((_DWORD)result)
        {
          uint64_t result = strcmp(a1, "kCLConnectionMessageMotionActivityPeriodicUpdate");
          if ((_DWORD)result)
          {
            uint64_t result = strcmp(a1, "kCLConnectionMessageMotionActivityQuery");
            if ((_DWORD)result)
            {
              uint64_t result = strcmp(a1, "kCLConnectionMessageMotionActivityAvailable");
              if ((_DWORD)result)
              {
                uint64_t result = strcmp(a1, "kCLConnectionMessageActivityAlarmStart");
                if ((_DWORD)result)
                {
                  uint64_t result = strcmp(a1, "kCLConnectionMessageActivityAlarmAvailable");
                  if ((_DWORD)result)
                  {
                    uint64_t result = strcmp(a1, "kCLConnectionMessageStepCountUpdate");
                    if ((_DWORD)result)
                    {
                      uint64_t result = strcmp(a1, "kCLConnectionMessagePedometerEvent");
                      if ((_DWORD)result)
                      {
                        uint64_t result = strcmp(a1, "kCLConnectionMessageStartStepCountAvailable");
                        if ((_DWORD)result)
                        {
                          uint64_t result = strcmp(a1, "kCLConnectionMessageStepCountQuery");
                          if ((_DWORD)result)
                          {
                            uint64_t result = strcmp(a1, "kCLConnectionMessageStepCountRecordQuery");
                            if ((_DWORD)result)
                            {
                              uint64_t result = strcmp(a1, "kCLConnectionMessageFloorCountAvailable");
                              if ((_DWORD)result)
                              {
                                uint64_t result = strcmp(a1, "kCLConnectionMessagePaceAndCadenceAPIAvailable");
                                if ((_DWORD)result)
                                {
                                  uint64_t result = strcmp(a1, "InUseAssertion/kCLConnectionMessage");
                                  if ((_DWORD)result)
                                  {
                                    uint64_t result = strcmp(a1, "EmergencyEnablementAssertion/kCLConnectionMessage");
                                    if ((_DWORD)result)
                                    {
                                      uint64_t result = strcmp(a1, "LocationIndependenceAssertion/kCLConnectionMessage");
                                      if ((_DWORD)result)
                                      {
                                        uint64_t result = strcmp(a1, "kCLConnectionMessageStepCountReset");
                                        if ((_DWORD)result)
                                        {
                                          uint64_t result = strcmp(a1, "kCLConnectionMessageOdometerGpsAvailability");
                                          if ((_DWORD)result)
                                          {
                                            uint64_t result = strcmp(a1, "kCLConnectionMessageStartOdometerUpdate");
                                            if ((_DWORD)result)
                                            {
                                              uint64_t result = strcmp(a1, "kCLConnectionMessageCyclingWorkoutDistanceUpdate");
                                              if ((_DWORD)result)
                                              {
                                                uint64_t result = strcmp(a1, "kCLConnectionMessageOdometerSuitabilityUpdate");
                                                if ((_DWORD)result)
                                                {
                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageSedentaryTimerIsAvailable");
                                                  if ((_DWORD)result)
                                                  {
                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageSedentaryTimerIsArmed");
                                                    if ((_DWORD)result)
                                                    {
                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageSedentaryTimerStart");
                                                      if ((_DWORD)result)
                                                      {
                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageSedentaryTimerStop");
                                                        if ((_DWORD)result)
                                                        {
                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageSedentaryTimerQuery");
                                                          if ((_DWORD)result)
                                                          {
                                                            uint64_t result = strcmp( a1,  "kCLConnectionMessageSedentaryTimerAlarm");
                                                            if ((_DWORD)result)
                                                            {
                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageOnBodyDetection");
                                                              if ((_DWORD)result)
                                                              {
                                                                uint64_t result = strcmp( a1,  "kCLConnectionMessageOnBodyDetectionParams");
                                                                if ((_DWORD)result)
                                                                {
                                                                  uint64_t result = strcmp( a1,  "kCLConnectionMessageSidebandSensorFusionEnable");
                                                                  if ((_DWORD)result)
                                                                  {
                                                                    uint64_t result = strcmp( a1,  "kCLConnectionMessageNatalimetryUpdate");
                                                                    if ((_DWORD)result)
                                                                    {
                                                                      uint64_t result = strcmp( a1,  "kCLConnectionMessageNatalimetryAvailable");
                                                                      if ((_DWORD)result)
                                                                      {
                                                                        uint64_t result = strcmp( a1,  "kCLConnectionMessageNatalimetryQuery");
                                                                        if ((_DWORD)result)
                                                                        {
                                                                          uint64_t result = strcmp( a1,  "Health/kCLConnectionMessageMetMinutesQuery");
                                                                          if ((_DWORD)result)
                                                                          {
                                                                            uint64_t result = strcmp( a1,  "Health/kCLConnectionMessageVO2MaxInputsQuery");
                                                                            if ((_DWORD)result)
                                                                            {
                                                                              uint64_t result = strcmp( a1,  "kCLConnectionMessageNatalimetryGetUserProfile");
                                                                              if ((_DWORD)result)
                                                                              {
                                                                                uint64_t result = strcmp( a1,  "kCLConnectionMessageNatalimet rySetUserProfile");
                                                                                if ((_DWORD)result)
                                                                                {
                                                                                  uint64_t result = strcmp( a1,  "kCLConnectionMessageExerciseMinuteQuery");
                                                                                  if ((_DWORD)result)
                                                                                  {
                                                                                    uint64_t result = strcmp( a1,  "kCLConnectionMessageExerciseMinuteUpdate");
                                                                                    if ((_DWORD)result)
                                                                                    {
                                                                                      uint64_t result = strcmp( a1,  "kCLConnectionMessageWorkoutEvent");
                                                                                      if ((_DWORD)result)
                                                                                      {
                                                                                        uint64_t result = strcmp( a1,  "kCLConnectionMessageB eginWorkoutSession");
                                                                                        if ((_DWORD)result)
                                                                                        {
                                                                                          uint64_t result = strcmp( a1,  "kCLConnectionMessageEndWorkoutSession");
                                                                                          if ((_DWORD)result)
                                                                                          {
                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageSetCurrentWorkoutType");
                                                                                            if ((_DWORD)result)
                                                                                            {
                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessagePauseWorkout");
                                                                                              if ((_DWORD)result)
                                                                                              {
                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageResumeWorkout");
                                                                                                if ((_DWORD)result)
                                                                                                {
                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageVehicleStateIsAvailable");
                                                                                                  if ((_DWORD)result)
                                                                                                  {
                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageFallStatsAvailable");
                                                                                                    if ((_DWORD)result)
                                                                                                    {
                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageFallStatsSetEnabled");
                                                                                                      if ((_DWORD)result)
                                                                                                      {
                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageFallStatsSendStats");
                                                                                                        if ((_DWORD)result)
                                                                                                        {
                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageFallStatsGetConfig");
                                                                                                          if ((_DWORD)result)
                                                                                                          {
                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageAnomalyEvent");
                                                                                                            if ((_DWORD)result)
                                                                                                            {
                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageAnomalyEventCompleted");
                                                                                                              if ((_DWORD)result)
                                                                                                              {
                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageAnomalyEventCompletedMostRecent");
                                                                                                                if ((_DWORD)result)
                                                                                                                {
                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageAnomalyEventEnabled");
                                                                                                                  if ((_DWORD)result)
                                                                                                                  {
                                                                                                                    uint64_t result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerIsTracking");
                                                                                                                    if ((_DWORD)result)
                                                                                                                    {
                                                                                                                      uint64_t result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerStart");
                                                                                                                      if ((_DWORD)result)
                                                                                                                      {
                                                                                                                        uint64_t result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerStop");
                                                                                                                        if ((_DWORD)result)
                                                                                                                        {
                                                                                                                          uint64_t result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerQuery");
                                                                                                                          if ((_DWORD)result)
                                                                                                                          {
                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoServiceEvent");
                                                                                                                            if ((_DWORD)result)
                                                                                                                            {
                                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoCreateService");
                                                                                                                              if ((_DWORD)result)
                                                                                                                              {
                                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoDeleteService");
                                                                                                                                if ((_DWORD)result)
                                                                                                                                {
                                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoQueryMyServices");
                                                                                                                                  if ((_DWORD)result)
                                                                                                                                  {
                                                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoQueryConnectionStatus");
                                                                                                                                    if ((_DWORD)result)
                                                                                                                                    {
                                                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoConnectToService");
                                                                                                                                      if ((_DWORD)result)
                                                                                                                                      {
                                                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoPredictionEventUpdate");
                                                                                                                                        if ((_DWORD)result)
                                                                                                                                        {
                                                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoServiceDebugResponse");
                                                                                                                                          if ((_DWORD)result)
                                                                                                                                          {
                                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoConnectionStatusEvent");
                                                                                                                                            if ((_DWORD)result)
                                                                                                                                            {
                                                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoGenericEventResponse");
                                                                                                                                              if ((_DWORD)result)
                                                                                                                                              {
                                                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageMiLoEnableMiLoAtCurrentLocation");
                                                                                                                                                if ((_DWORD)result)
                                                                                                                                                {
                                                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageRemoveCustomLOI");
                                                                                                                                                  if ((_DWORD)result)
                                                                                                                                                  {
                                                                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageAbsoluteAltitudeUpdate");
                                                                                                                                                    if ((_DWORD)result)
                                                                                                                                                    {
                                                                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageKappaStatsAvailable");
                                                                                                                                                      if ((_DWORD)result)
                                                                                                                                                      {
                                                                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageKappaSendAPCommand");
                                                                                                                                                        if ((_DWORD)result)
                                                                                                                                                        {
                                                                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageKappaGetStateRequest");
                                                                                                                                                          if ((_DWORD)result)
                                                                                                                                                          {
                                                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageKappaGetState");
                                                                                                                                                            if ((_DWORD)result)
                                                                                                                                                            {
                                                                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageIndoorOutdoorUpdate");
                                                                                                                                                              if ((_DWORD)result)
                                                                                                                                                              {
                                                                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageIndoorOutdoorLastKnownState");
                                                                                                                                                                if ((_DWORD)result)
                                                                                                                                                                {
                                                                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageBBTimeFreqTransferAssert");
                                                                                                                                                                  if ((_DWORD)result)
                                                                                                                                                                  {
                                                                                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageBBTimeFreqTransferAssertError");
                                                                                                                                                                    if ((_DWORD)result)
                                                                                                                                                                    {
                                                                                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageBBTimeFreqTransferMeasurement");
                                                                                                                                                                      if ((_DWORD)result)
                                                                                                                                                                      {
                                                                                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageGNSSHeatMap");
                                                                                                                                                                        if ((_DWORD)result)
                                                                                                                                                                        {
                                                                                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageGnssDisablementAssertReq");
                                                                                                                                                                          if ((_DWORD)result)
                                                                                                                                                                          {
                                                                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageGnssDisablementAssertRsp");
                                                                                                                                                                            if ((_DWORD)result)
                                                                                                                                                                            {
                                                                                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageVO2MaxRetrocomputeStatusQuery");
                                                                                                                                                                              if ((_DWORD)result)
                                                                                                                                                                              {
                                                                                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageEclipseServiceRequest");
                                                                                                                                                                                if ((_DWORD)result)
                                                                                                                                                                                {
                                                                                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageEclipseViewObstructedStateRequest");
                                                                                                                                                                                  if ((_DWORD)result)
                                                                                                                                                                                  {
                                                                                                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageProxPDPUpdate");
                                                                                                                                                                                    if ((_DWORD)result)
                                                                                                                                                                                    {
                                                                                                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageALSPhoneUpdate");
                                                                                                                                                                                      if ((_DWORD)result)
                                                                                                                                                                                      {
                                                                                                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageWriteContextConfiguration");
                                                                                                                                                                                        if ((_DWORD)result)
                                                                                                                                                                                        {
                                                                                                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageMagicMountServiceRequest");
                                                                                                                                                                                          if ((_DWORD)result)
                                                                                                                                                                                          {
                                                                                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageMagicMountAPWakesAllowed");
                                                                                                                                                                                            if ((_DWORD)result)
                                                                                                                                                                                            {
                                                                                                                                                                                              uint64_t result = strcmp(a1, "kCLConnectionMessageGnssExtensionsClient");
                                                                                                                                                                                              if ((_DWORD)result)
                                                                                                                                                                                              {
                                                                                                                                                                                                uint64_t result = strcmp(a1, "kCLConnectionMessageGnssExtensionsClientError");
                                                                                                                                                                                                if ((_DWORD)result)
                                                                                                                                                                                                {
                                                                                                                                                                                                  uint64_t result = strcmp(a1, "kCLConnectionMessageGnssExtensionsData");
                                                                                                                                                                                                  if ((_DWORD)result)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    uint64_t result = strcmp(a1, "kCLConnectionMessageBatchedAccelerometer");
                                                                                                                                                                                                    if ((_DWORD)result)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      uint64_t result = strcmp(a1, "kCLConnectionMessageBatchedDeviceMotion");
                                                                                                                                                                                                      if ((_DWORD)result)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        uint64_t result = strcmp(a1, "kCLConnectionMessageBatchedSensorAvailabilityUpdate");
                                                                                                                                                                                                        if ((_DWORD)result)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          uint64_t result = strcmp(a1, "kCLConnectionMessageBatchedSensorError");
                                                                                                                                                                                                          if ((_DWORD)result)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            uint64_t result = strcmp(a1, "kCLConnectionMessageCLGNSSStateQueryAssertionResponse");
                                                                                                                                                                                                            if ((_DWORD)result) {
                                                                                                                                                                                                              return strcmp(a1, "kCLConnectionMessageBBGnssStatusQuery") != 0;
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_10088E950(char *__s)
{
  BOOL v2 = sub_10088EB7C(__p);
  BOOL v3 = v2;
  if (v6 < 0)
  {
    operator delete(__p[0]);
    if (v3) {
      return 0LL;
    }
  }

  else if (v2)
  {
    return 0LL;
  }

  uint64_t result = strcmp(__s, "kCLConnectionMessageLocation");
  if ((_DWORD)result)
  {
    uint64_t result = strcmp(__s, "kCLConnectionMessageLocationUnavailable");
    if ((_DWORD)result)
    {
      uint64_t result = strcmp(__s, "kCLConnectionMessageMotionActivityUpdate");
      if ((_DWORD)result)
      {
        uint64_t result = strcmp(__s, "kCLConnectionMessageActivityAlarmStart");
        if ((_DWORD)result)
        {
          uint64_t result = strcmp(__s, "kCLConnectionMessageSignificantLocationChange");
          if ((_DWORD)result)
          {
            uint64_t result = strcmp(__s, "kCLConnectionMessageSignificantLocationVisit");
            if ((_DWORD)result)
            {
              uint64_t result = strcmp(__s, "kCLConnectionMessageSignificantLocationVisitState");
              if ((_DWORD)result)
              {
                uint64_t result = strcmp(__s, "kCLConnectionMessageStepCountUpdate");
                if ((_DWORD)result)
                {
                  uint64_t result = strcmp(__s, "kCLConnectionMessageExerciseMinuteUpdate");
                  if ((_DWORD)result)
                  {
                    uint64_t result = strcmp(__s, "kCLConnectionMessageWorkoutEvent");
                    if ((_DWORD)result)
                    {
                      uint64_t result = strcmp(__s, "kCLConnectionMessageNatalimetryUpdate");
                      if ((_DWORD)result)
                      {
                        uint64_t result = strcmp(__s, "kCLConnectionMessageKappaGetStateRequest");
                        if ((_DWORD)result)
                        {
                          uint64_t result = strcmp(__s, "kCLConnectionMessageSedentaryTimerAlarm");
                          if ((_DWORD)result)
                          {
                            uint64_t result = strcmp(__s, "kCLConnectionMessageLocationPush");
                            if ((_DWORD)result)
                            {
                              uint64_t result = strcmp(__s, "kCLConnectionMessageMotionAlarmFire");
                              if ((_DWORD)result)
                              {
                                uint64_t result = strcmp(__s, "kCLConnectionMessageMiLoServiceEvent");
                                if ((_DWORD)result)
                                {
                                  uint64_t result = strcmp(__s, "kCLConnectionMessageMiLoPredictionEventUpdate");
                                  if ((_DWORD)result)
                                  {
                                    uint64_t result = strcmp(__s, "kCLConnectionMessageMiLoServiceDebugResponse");
                                    if ((_DWORD)result)
                                    {
                                      uint64_t result = strcmp(__s, "kCLConnectionMessageMiLoConnectionStatusEvent");
                                      if ((_DWORD)result)
                                      {
                                        uint64_t result = strcmp(__s, "kCLConnectionMessageMiLoGenericEventResponse");
                                        if ((_DWORD)result)
                                        {
                                          uint64_t result = strcmp(__s, "kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate");
                                          if ((_DWORD)result)
                                          {
                                            uint64_t result = strcmp(__s, "kCLConnectionMessageAnomalyEvent");
                                            if ((_DWORD)result) {
                                              return strcmp(__s, "kCLConnectionMessageOdometerGpsAvailability") != 0;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

BOOL sub_10088EB7C(void *a1)
{
  uint64_t v1 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = a1[1];
    if (v5 == 36)
    {
      uint64_t v5 = v1[1];
    }

    else if (v5 == 39 && !memcmp((const void *)*a1, "kCLConnectionMessageAuthorizationStatus", 0x27uLL))
    {
      return 1LL;
    }

    if (v5 == 31)
    {
      if (*(void *)*v1 == 0x656E6E6F434C436BLL
        && *(void *)(*v1 + 8LL) == 0x73654D6E6F697463LL
        && *(void *)(*v1 + 16LL) == 0x6967655265676173LL
        && *(void *)(*v1 + 23LL) == 0x65746174536E6F69LL)
      {
        return 1LL;
      }

      uint64_t v5 = v1[1];
    }

    if (v5 == 41)
    {
      uint64_t v5 = v1[1];
    }

    if (v5 == 51)
    {
      uint64_t v5 = v1[1];
    }

    if (v5 != 54) {
      goto LABEL_54;
    }
    a1 = (void *)*v1;
    goto LABEL_36;
  }

  unsigned int v2 = *((unsigned __int8 *)a1 + 23);
  if (v2 > 0x28)
  {
    switch(v2)
    {
      case ')':
        BOOL v3 = "kCLConnectionMessageRegionMonitoringError";
        size_t v4 = 41LL;
        break;
      case '3':
        BOOL v3 = "kCLConnectionMessageRegionMonitoringResponseDelayed";
        size_t v4 = 51LL;
        break;
      case '6':
LABEL_36:
        BOOL v3 = "kCLConnectionMessageRegionMonitoringNoLocationWatchdog";
        size_t v4 = 54LL;
        break;
      default:
        goto LABEL_54;
    }

CLOSTransaction *sub_10088EE88(const void *a1, const char *a2)
{
  return -[CLOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CLOSTransaction),  "initWithDescription:",  __str);
}

uint64_t sub_10088EEF8(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40LL))(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_10088EF58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10088EF74(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (char *)-[__CFString UTF8String]((id)sub_100888AA0(a1), "UTF8String");
  sub_1010DDBC0(&v5, v3);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_10088EFCC(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 160LL))(a1)
    && (CLConnection::getAuditToken(*(CLConnection **)(a1 + 264)),
        TCCAccessCheckAuditToken(@"kTCCServiceFallDetection", v14, 0LL)))
  {
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10185B0E0);
    }
    uint64_t v2 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v18 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Client %@ did pass Fall Detection entitlement/tcc checks.",  buf,  0xCu);
    }

    if (sub_1002921D0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_10185B0E0);
      }
      uint64_t v11 = *(void *)(a1 + 48);
      int v15 = 138412290;
      uint64_t v16 = v11;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  0LL,  "Client %@ did pass Fall Detection entitlement/tcc checks.",  &v15,  12);
      uint64_t v13 = (uint8_t *)v12;
      sub_10029211C("Generic", 1LL, 0, 2LL, "virtual BOOL CLDaemonClient::isAuthorizedForFallDetection()", "%s\n", v12);
      if (v13 != buf) {
        free(v13);
      }
    }

    return 1LL;
  }

  else
  {
    if (qword_1019345D0 != -1) {
      dispatch_once(&qword_1019345D0, &stru_10185B0E0);
    }
    __int128 v5 = (os_log_s *)qword_1019345D8;
    if (os_log_type_enabled((os_log_t)qword_1019345D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Client %@ did not pass Fall Detection entitlement/tcc checks.",  buf,  0xCu);
    }

    BOOL v7 = sub_1002921D0(115, 0);
    uint64_t result = 0LL;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1019345D0 != -1) {
        dispatch_once(&qword_1019345D0, &stru_10185B0E0);
      }
      uint64_t v8 = *(void *)(a1 + 48);
      int v15 = 138412290;
      uint64_t v16 = v8;
      _os_log_send_and_compose_impl( 2LL,  0LL,  buf,  1628LL,  &_mh_execute_header,  qword_1019345D8,  16LL,  "Client %@ did not pass Fall Detection entitlement/tcc checks.",  &v15,  12);
      uint64_t v10 = (uint8_t *)v9;
      sub_10029211C("Generic", 1LL, 0, 0LL, "virtual BOOL CLDaemonClient::isAuthorizedForFallDetection()", "%s\n", v9);
      if (v10 != buf) {
        free(v10);
      }
      return 0LL;
    }
  }

  return result;
}

void *sub_10088F314@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + 56);
  if (v3) {
    size_t v4 = (char *)[v3 UTF8String];
  }
  else {
    size_t v4 = "";
  }
  return sub_1010DDBC0(a2, v4);
}

uint64_t sub_10088F350(uint64_t a1, char *__s, int a3)
{
  LODWORD(v3) = a3;
  if (a3)
  {
    sub_1010DDBC0(__p, __s);
    uint64_t v6 = sub_10087902C(a1, (uint64_t)__p);
    if (SHIBYTE(v48) < 0) {
      operator delete(*(void **)__p);
    }
    if ([*(id *)(a1 + 112) isAuthorizedForServiceTypeMask:v6])
    {
LABEL_5:
      LODWORD(v7) = 0;
      uint64_t v8 = 1LL;
    }

    else
    {
      switch([*(id *)(a1 + 112) transientAwareRegistrationResult])
      {
        case 2u:
          if ((sub_1004F76B8() & 1) == 0) {
            goto LABEL_29;
          }
          uint64_t v8 = 0LL;
LABEL_23:
          LODWORD(v7) = 1;
          break;
        case 3u:
          uint64_t v8 = 0LL;
          LODWORD(v7) = 0;
          break;
        case 4u:
        case 6u:
        case 7u:
          uint64_t v8 = 1LL;
          goto LABEL_23;
        case 5u:
          sub_10124D59C();
          __break(1u);
LABEL_29:
          LODWORD(v7) = [*(id *)(a1 + 112) inUseLevelIsAtLeast:3];
          uint64_t v8 = 0LL;
          break;
        default:
          goto LABEL_5;
      }
    }

    if (sub_10088E950(__s))
    {
      if (!strncmp(__s, "kCLConnectionMessage", 0x14uLL)) {
        uint64_t v13 = 20LL;
      }
      else {
        uint64_t v13 = 0LL;
      }
      uint64_t v14 = sub_10088EE88((const void *)a1, &__s[v13]);
    }

    else
    {
      uint64_t v14 = +[NSNull null](&OBJC_CLASS___NSNull, "null");
    }

    int v15 = v14;
    objc_msgSend( *(id *)(a1 + 152),  "setObject:forKeyedSubscript:",  v14,  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __s));
    if (!strcmp(__s, "kCLConnectionMessageLocation")) {
      [*(id *)(a1 + 152) setObject:v15 forKeyedSubscript:@"kCLConnectionMessageCompensatedLocation"];
    }
    *(void *)(a1 + 160) |= v6;
  }

  else
  {
    uint64_t v9 = (NSNull *)objc_msgSend( *(id *)(a1 + 152),  "objectForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __s));
    if (v9 && v9 != +[NSNull null](&OBJC_CLASS___NSNull, "null")) {
      sub_10057C098(*(void *)(a1 + 16));
    }
    objc_msgSend( *(id *)(a1 + 152),  "removeObjectForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __s));
    if (!strcmp(__s, "kCLConnectionMessageLocation")) {
      [*(id *)(a1 + 152) removeObjectForKey:@"kCLConnectionMessageCompensatedLocation"];
    }
    *(void *)(a1 + 16sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = 0LL;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    uint64_t v10 = *(void **)(a1 + 152);
    id v7 = [v10 countByEnumeratingWithState:&v33 objects:v52 count:16];
    if (v7)
    {
      uint64_t v11 = *(void *)v34;
      do
      {
        for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v34 != v11) {
            objc_enumerationMutation(v10);
          }
          sub_1010DDBC0(__p, (char *)[*(id *)(*((void *)&v33 + 1) + 8 * (void)i) UTF8String]);
          *(void *)(a1 + 160) |= sub_10087902C(a1, (uint64_t)__p);
          if (SHIBYTE(v48) < 0) {
            operator delete(*(void **)__p);
          }
        }

        id v7 = [v10 countByEnumeratingWithState:&v33 objects:v52 count:16];
      }

      while (v7);
    }

    uint64_t v8 = 1LL;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  uint64_t v16 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v18 = "un";
    *(_DWORD *)std::string __p = 138544130;
    if ((_DWORD)v3) {
      uint64_t v18 = "";
    }
    *(void *)&__p[4] = v17;
    __int16 v46 = 2050;
    uint64_t v47 = a1;
    __int16 v48 = 2082;
    int v49 = v18;
    __int16 v50 = 2082;
    char v51 = __s;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Client %{public}@ (%{public}p) is %{public}ssubscribing to notification %{public}s",  __p,  0x2Au);
  }

  if (sub_1002921D0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v23 = *(void *)(a1 + 48);
    id v24 = "un";
    if ((_DWORD)v3) {
      id v24 = "";
    }
    int v37 = 138544130;
    uint64_t v38 = v23;
    __int16 v39 = 2050;
    uint64_t v40 = a1;
    __int16 v41 = 2082;
    __int16 v42 = v24;
    __int16 v43 = 2082;
    unsigned int v44 = __s;
    _os_log_send_and_compose_impl( 2LL,  0LL,  __p,  1628LL,  &_mh_execute_header,  qword_101934978,  0LL,  "Client %{public}@ (%{public}p) is %{public}ssubscribing to notification %{public}s",  &v37,  42);
    uint64_t v26 = (char *)v25;
    sub_10029211C( "Generic",  1LL,  0,  2LL,  "virtual BOOL CLDaemonClient::modifySubscription(const char *const, BOOL)",  "%s\n",  v25);
    if (v26 != __p) {
      free(v26);
    }
  }

  if (*(_BYTE *)(a1 + 72))
  {
    sub_1010DDBC0(__p, __s);
    if (SHIBYTE(v48) < 0)
    {
      operator delete(*(void **)__p);
      if (!(_DWORD)v3) {
        goto LABEL_55;
      }
    }

    else if (!(_DWORD)v3)
    {
      goto LABEL_55;
    }

    uint64_t v3 = *(void **)(a1 + 48);
    sub_1005486B8(*(void *)(a1 + 16), (uint64_t)v3);
    if (!*(_BYTE *)(a1 + 104)) {
      sub_100564EF4(*(void *)(a1 + 16), v3, 1);
    }
LABEL_55:
    if ((_DWORD)v7)
    {
      if (!*(_BYTE *)(a1 + 91)
        && ([*(id *)(a1 + 48) isAuthLimited] & 1) == 0
        && !sub_10054668C(*(void *)(a1 + 16))
        && !*(_BYTE *)(a1 + 73))
      {
        uint64_t v3 = *(void **)(a1 + 16);
        uint64_t v21 = *(void *)(a1 + 48);
        if (*(_BYTE *)(a1 + 369))
        {
          sub_1010DDBC0(&v30, "");
          sub_1005857F0((uint64_t)v32, 2, v21, 0LL, &v30);
          LODWORD(v3) = sub_10055EA14((uint64_t)v3, a1, v32, 0LL);
          sub_1005858A0((uint64_t)v32);
          if ((v31 & 0x80000000) == 0) {
            goto LABEL_61;
          }
          unint64_t v22 = (void *)v30;
        }

        else
        {
          sub_1010DDBC0(v27, "");
          sub_1005857F0((uint64_t)v29, 5, v21, 0LL, (__int128 *)v27);
          LODWORD(v3) = sub_10055EA14((uint64_t)v3, a1, v29, 0LL);
          sub_1005858A0((uint64_t)v29);
          if ((v28 & 0x80000000) == 0) {
            goto LABEL_61;
          }
          unint64_t v22 = v27[0];
        }

        operator delete(v22);
        goto LABEL_61;
      }

      LODWORD(v3) = [*(id *)(a1 + 112) registrationResult];
    }

void sub_10088F9FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10088FA88(uint64_t a1, uint64_t *a2)
{
  if (sub_10088EB7C(a2)) {
    return 1LL;
  }
  __int128 v5 = *(void **)(a1 + 152);
  else {
    uint64_t v6 = (uint64_t *)*a2;
  }
  return objc_msgSend( v5,  "objectForKeyedSubscript:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6)) != 0;
}

BOOL sub_10088FAF0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1LL) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }

  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1LL) {
LABEL_10:
    }
      sub_1001040F8();
    return memcmp(a1, __s, v4) == 0;
  }

  return 0LL;
}

uint64_t sub_10088FB80(uint64_t a1)
{
  if ([*(id *)(a1 + 112) inUseLevelIsAtLeast:5])
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v2 = (os_log_s *)qword_101934978;
    if (!os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG)) {
      return 1LL;
    }
    uint64_t v3 = *(void *)(a1 + 48);
    int v10 = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v3;
    size_t v4 = "{msg%{public}.0s:Allowing process assertion due to foreground-ish status, ClientKeyPath:%{public, l"
         "ocation:escape_only}@}";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, v4, (uint8_t *)&v10, 0x1Cu);
    return 1LL;
  }

  if (sub_100547DF0(*(void *)(a1 + 16), a1))
  {
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    uint64_t v2 = (os_log_s *)qword_101934978;
    if (!os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEBUG)) {
      return 1LL;
    }
    uint64_t v5 = *(void *)(a1 + 48);
    int v10 = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v5;
    size_t v4 = "{msg%{public}.0s:Allowing process assertion due to client manager., ClientKeyPath:%{public, locatio"
         "n:escape_only}@}";
    goto LABEL_11;
  }

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  id v7 = (os_log_s *)qword_101934978;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:#Warning Denying process assertion, ClientKeyPath:%{public, location:escape_only}@}",  (uint8_t *)&v10,  0x1Cu);
    return 0LL;
  }

  return result;
}

uint64_t sub_10088FDB0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

id sub_10088FDB8(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  CLConnection::getRemotePid(*(CLConnection **)(a1 + 264))),  @"PID");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(a1 + 48), "clientKey"), @"ClientKeyPath");
  CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  -[CLClientKeyPath clientKey](sub_10055FF18(&v18), "clientKey"),  @"NaturalConnectedIdentity");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72)),  @"RegistrationSuccessful");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  objc_msgSend(sub_10053E0A4(*(void *)(a1 + 16), *(void *)(a1 + 48)), "isValidCKP")),  @"RegisteredInAuthDatabase");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 112)),  @"AuthContext");
  double v3 = sub_100878DE4(a1, (uint64_t)v11);
  if (v17)
  {
    double v5 = v12;
    double v4 = v13;
    int v6 = v14;
    int v7 = v15;
    int v8 = v16;
    BOOL v9 = v11[0] != 0;
  }

  else
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = 0;
    BOOL v9 = 0LL;
    double v4 = INFINITY;
    double v5 = INFINITY;
  }

  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v9, v3),  @"Active");
  if (v5 < INFINITY) {
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v5),  @"DesiredAccuracy");
  }
  if (v4 < INFINITY) {
    objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4),  @"DistanceFilter");
  }
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6 != 0),  @"BatchEnabled");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7 != 0),  @"Spectator");
  objc_msgSend( v2,  "setObject:forKeyedSubscript:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8 != 0),  @"HasProcessAssertion");
  return v2;
}

void sub_10089002C(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v4 = *a2;
  double v5 = (std::__shared_weak_count *)a2[1];
  unsigned __int8 v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    uint64_t v15 = v4;
    unsigned __int8 v16 = v5;
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }

  else
  {
    uint64_t v15 = *a2;
    unsigned __int8 v16 = 0LL;
  }

  uint64_t v17 = a3;
  double v18 = a4;
  sub_100878064(a1, (uint64_t)&v15);
  BOOL v9 = v16;
  if (v16)
  {
    int v10 = (unint64_t *)&v16->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v14)
  {
    double v12 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

void sub_100890108( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100890124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (__int128 *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  if (*((char *)v6 + 23) < 0)
  {
    sub_1010DD48C(__p, *(void **)v6, *((void *)v6 + 1));
  }

  else
  {
    __int128 v7 = *v6;
    uint64_t v19 = *((void *)v6 + 2);
    *(_OWORD *)std::string __p = v7;
  }

  if (v19 >= 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 32LL))(a1, v8, 1LL);
  BOOL v9 = *(std::__shared_weak_count **)(a2 + 8);
  unsigned __int8 v16 = *(CLConnectionMessage **)a2;
  uint64_t v17 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }

  (*(void (**)(uint64_t, CLConnectionMessage **, uint64_t, double))(*(void *)a1 + 16LL))(a1, &v16, a3, 0.0);
  double v12 = v17;
  if (v17)
  {
    unint64_t v13 = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  if (v19 >= 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 32LL))(a1, v15, 0LL);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10089025C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100890288(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100890290(id a1)
{
  qword_1019349D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1008902BC(id a1)
{
  qword_101934978 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1008902E8(id a1)
{
  qword_101934988 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100890314(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    double v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        double v5 = (uint64_t *)v3[1];
        sub_10000AE14((uint64_t)(v3 + 2));
        operator delete(v3);
        double v3 = v5;
      }

      while (v5 != a1);
    }
  }

void sub_100890384(id a1)
{
  off_101934598 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1008903B0(id a1)
{
  qword_101934588 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_1008903DC(id a1)
{
  qword_1019345B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_100890408(id a1)
{
  qword_1019349A8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Routine");
}

void sub_100890434(id a1)
{
  qword_1019344B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100890460(id a1)
{
  qword_1019344F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_10089048C(id a1)
{
  qword_1019344D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1008904B8(id a1)
{
  off_101934808 = os_log_create("com.apple.locationd.Motion", "MovementDisorder");
}

void sub_1008904E4(id a1)
{
  qword_1019345F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "SensorRecorder");
}

void sub_100890510(id a1)
{
  qword_1019346C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void sub_10089053C(id a1)
{
  qword_1019345D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100890568(id a1)
{
  qword_1019348D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_100890594(id a1)
{
  qword_1019346E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_1008905C0(id a1)
{
  qword_101934738 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void sub_1008905EC(id a1)
{
  qword_1019347B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

void sub_100890618(id a1)
{
  qword_101934A08 = (uint64_t)os_log_create("com.apple.locationd.Core", "SensorKit");
}

uint64_t sub_100890644(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10089067C(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      double v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0LL;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_1008906C8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100890700(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      double v3 = (void *)*v2;
      sub_10000AE14((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

uint64_t sub_10089073C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_10004B1A4(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          uint64_t result = sub_100022A24(a1 + 32, i + 16, (unsigned __int8 *)a2);
          if ((result & 1) != 0) {
            return result;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t v17 = operator new(0x48uLL);
  v27[0] = (uint64_t)v17;
  v27[1] = a1 + 16;
  char v28 = 0;
  *uint64_t v17 = 0LL;
  v17[1] = v9;
  double v18 = v17 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1010DD48C(v18, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)double v18 = *(_OWORD *)a2;
    v17[4] = *(void *)(a2 + 16);
  }

  sub_100890C50((uint64_t)(v17 + 5), a3);
  char v28 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1LL;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_1008909DC(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)v27[0] = *v25;
    *uint64_t v25 = v27[0];
  }

  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v26 = *(void *)(*(void *)v27[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10) {
          v26 %= v10;
        }
      }

      else
      {
        v26 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v26) = v27[0];
    }
  }

  v27[0] = 0LL;
  ++*v7;
  return (uint64_t)sub_100890BD4(v27);
}

void sub_1008909C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1008909DC(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }

    else
    {
      uint64_t v13 = 1LL << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }

    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unsigned __int8 v16 = *(void **)a1;
      *(void *)a1 = 0LL;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0LL;
      return;
    }
  }

  if (prime >> 61) {
    sub_1000070D4();
  }
  double v5 = operator new(8 * prime);
  int v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0LL;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0LL;
  while (prime != v7);
  unint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }

    else
    {
      v9 &= prime - 1;
    }

    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    unint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }

        else
        {
          v15 &= prime - 1;
        }

        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }

          void *v8 = *v14;
          *unint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          unint64_t v14 = v8;
        }

        size_t v15 = v9;
LABEL_31:
        unint64_t v8 = v14;
        unint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }

      while (v14);
    }
  }

uint64_t *sub_100890BD4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    if (!*((_BYTE *)a1 + 16))
    {
LABEL_10:
      operator delete((void *)v2);
      return a1;
    }

    unint64_t v3 = *(void **)(v2 + 64);
    if (v3 == (void *)(v2 + 40))
    {
      uint64_t v4 = 4LL;
      unint64_t v3 = (void *)(v2 + 40);
    }

    else
    {
      if (!v3) {
        goto LABEL_8;
      }
      uint64_t v4 = 5LL;
    }

    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    goto LABEL_10;
  }

  return a1;
}

uint64_t sub_100890C50(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }

  *unint64_t v3 = 0LL;
  return a1;
}

void *sub_100890CB4(void *a1)
{
  *a1 = &off_10185B1B0;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100890D14(char *__p)
{
  *(void *)std::string __p = &off_10185B1B0;
  uint64_t v2 = __p + 8;
  unint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    unint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void *sub_100890D74(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &off_10185B1B0;
  sub_10001A504((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100890DB8(_Unwind_Exception *a1)
{
}

uint64_t sub_100890DCC(uint64_t a1, void *a2)
{
  *a2 = &off_10185B1B0;
  return sub_10001A504((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100890DEC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100890E20(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100890E70(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_100890E78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100890EB4()
{
}

uint64_t sub_100890EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100890F24(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100890FAC(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    double v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100890F94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100890FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      size_t v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v30 = 2082;
    char v31 = "";
    __int16 v32 = 2082;
    __int128 v33 = "activity";
    __int16 v34 = 2082;
    __int128 v35 = v9;
    __int16 v36 = 2050;
    uint64_t v37 = a2;
    __int16 v38 = 1026;
    int v39 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72))
  {
    unint64_t v11 = (char *)objc_msgSend(objc_msgSend(*(id *)(a2 + 48), "legacyClientKey"), "UTF8String");
    if (v11) {
      uint8x8_t v12 = v11;
    }
    else {
      uint8x8_t v12 = "";
    }
    sub_1010DDBC0(buf, v12);
    sub_100891260(a2, &v26);
    uint64_t v13 = v26;
    unint64_t v14 = *(std::__shared_weak_count **)(a3 + 8);
    size_t v24 = *(CLConnectionMessage **)a3;
    uint64_t v25 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }

    uint64_t v17 = *(void *)(a1 + 24);
    if (!v17) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, uint64_t, CLConnectionMessage **))(*(void *)v17 + 48LL))(v17, v13, &v24);
    double v18 = v25;
    if (v25)
    {
      float v19 = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }

    BOOL v21 = v27;
    if (v27)
    {
      unint64_t v22 = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    if (SBYTE3(v33) < 0) {
      operator delete(*(void **)buf);
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100891214( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_100891260(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1 + 328;
  *(void *)uint64_t buf = &v33;
  double v5 = sub_100891598(a1 + 328, (uint64_t *)&v33, (uint64_t)&unk_1012CF090, (uint64_t **)buf);
  unint64_t v6 = (const void *)v5[3];
  __int128 v7 = (std::__shared_weak_count *)v5[4];
  uint64_t v34 = (uint64_t)v6;
  __int128 v35 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  if (v6)
  {
    if (!v10)
    {
      sub_10124D184( (uint64_t)a2,  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v29,  v30,  v31,  v32,  (uint64_t)v33,  v34,  (uint64_t)v35,  v36,  *(uint64_t *)buf,  *(uint64_t *)v38,  *(uint64_t *)&v38[8],  *(uint64_t *)&v38[16],  *(uint64_t *)&v38[24],  v39,  v40,  v41);
      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h",  443,  "getOrCreatePersistentSubscription");
      goto LABEL_26;
    }

    *a2 = (uint64_t)v10;
    a2[1] = (uint64_t)v7;
    if (v7)
    {
      double v18 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }

    if (v10[248]) {
      goto LABEL_18;
    }
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    unint64_t v20 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v38 = 2082;
      *(void *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2114;
      *(void *)&v38[12] = v21;
      *(_WORD *)&v38[20] = 2082;
      *(void *)&v38[22] = (unint64_t)"17CLSLCSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Invalid persistent subscription detected... getting a fresh one, ClientKeyPath:%{pu blic, location:escape_only}@, subscription:%{public, location:escape_only}s}",  buf,  0x26u);
    }

    sub_10000AE14((uint64_t)a2);
  }

  sub_1005551F8(*(uint64_t **)(a1 + 16), *(void *)(a1 + 48), a2);
  uint64_t v22 = *a2;
  *(_BYTE *)(v22 + 144) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
  uint64_t v23 = *a2;
  size_t v24 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  id v25 = v24;

  *(void *)(v23 + 152) = v24;
  if (!*a2 || !*(_BYTE *)(*a2 + 248))
  {
    sub_10124D01C();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h",  456,  "getOrCreatePersistentSubscription");
LABEL_26:
    __break(1u);
    return;
  }

  *(void *)uint64_t buf = &v33;
  uint64_t v26 = sub_100891598(v4, (uint64_t *)&v33, (uint64_t)&unk_1012CF090, (uint64_t **)buf);
  sub_1000F2F30(v26 + 3, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)*a2 + 16LL))(*a2, a1 + 8);
LABEL_18:
  if (v7)
  {
    uint64_t v27 = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

void sub_100891564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *sub_100891598(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v8 = *(void *)(*a2 + 8);
  if ((v8 & 0x8000000000000000LL) != 0)
  {
    unint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381LL;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }

    while (v11);
  }

  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
    }

    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }

    uint64_t v15 = *(void **)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = (void *)*v15;
      if (*v15)
      {
        do
        {
          unint64_t v17 = v16[1];
          if (v17 == v8)
          {
            if (sub_10001A4B8(v16[2], *a2)) {
              return v16;
            }
          }

          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12) {
                v17 %= v12;
              }
            }

            else
            {
              v17 &= v12 - 1;
            }

            if (v17 != v4) {
              break;
            }
          }

          uint64_t v16 = (void *)*v16;
        }

        while (v16);
      }
    }
  }

  double v18 = operator new(0x28uLL);
  v29[0] = v18;
  v29[1] = a1 + 16;
  *double v18 = 0LL;
  v18[1] = v8;
  uint64_t v19 = **a4;
  v18[3] = 0LL;
  v18[4] = 0LL;
  void v18[2] = v19;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v22 = 1LL;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_100019E10(a1, v25);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }
  }

  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }

  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8LL);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v27 >= v12) {
          v27 %= v12;
        }
      }

      else
      {
        v27 &= v12 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }

  uint64_t v16 = (void *)v29[0];
  v29[0] = 0LL;
  ++*(void *)(a1 + 24);
  sub_100891830((uint64_t)v29, 0LL);
  return v16;
}

void sub_100891818(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100891830(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_10000AE14((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }

void *sub_100891874(void *a1)
{
  *a1 = &off_10185B240;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_1008918D4(char *__p)
{
  *(void *)std::string __p = &off_10185B240;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void *sub_100891934(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &off_10185B240;
  sub_10001A504((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100891978(_Unwind_Exception *a1)
{
}

uint64_t sub_10089198C(uint64_t a1, void *a2)
{
  *a2 = &off_10185B240;
  return sub_10001A504((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_1008919AC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1008919E0(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100891A30(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_100891A38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100891A74()
{
}

uint64_t sub_100891A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100891AE4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100891B6C(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    double v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100891B54( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100891B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      unint64_t v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v30 = 2082;
    uint64_t v31 = "";
    __int16 v32 = 2082;
    __int128 v33 = "activity";
    __int16 v34 = 2082;
    __int128 v35 = v9;
    __int16 v36 = 2050;
    uint64_t v37 = a2;
    __int16 v38 = 1026;
    int v39 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72))
  {
    unsigned int v11 = (char *)objc_msgSend(objc_msgSend(*(id *)(a2 + 48), "legacyClientKey"), "UTF8String");
    if (v11) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = "";
    }
    sub_1010DDBC0(buf, v12);
    sub_100879BDC(a2, &v26);
    uint64_t v13 = v26;
    unint64_t v14 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v24 = *(CLConnectionMessage **)a3;
    size_t v25 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }

    uint64_t v17 = *(void *)(a1 + 24);
    if (!v17) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, uint64_t, CLConnectionMessage **))(*(void *)v17 + 48LL))(v17, v13, &v24);
    double v18 = v25;
    if (v25)
    {
      uint64_t v19 = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }

    float v21 = v27;
    if (v27)
    {
      BOOL v22 = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    if (SBYTE3(v33) < 0) {
      operator delete(*(void **)buf);
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100891DD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void *sub_100891E20(void *a1)
{
  *a1 = &off_10185B2C0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100891E80(char *__p)
{
  *(void *)std::string __p = &off_10185B2C0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100891EE0(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B2C0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100891F38(_Unwind_Exception *a1)
{
}

uint64_t sub_100891F4C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B2C0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100891F90(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100891FC4(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100892014(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089201C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100892058()
{
}

uint64_t sub_100892064(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_1008920C8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100892150(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    double v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100892138( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100892150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      unint64_t v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    size_t v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    unsigned int v11 = sub_100892378((void *)a2);
    unint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    unint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100892350( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100892378(void *a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      unsigned int v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"21CLHeadingSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0xB0uLL);
    sub_100CE7044(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124D8AC(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_100892520(_Unwind_Exception *a1)
{
}

void *sub_10089253C(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v8 = *(void *)(*a2 + 8);
  if ((v8 & 0x8000000000000000LL) != 0)
  {
    unint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381LL;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }

    while (v11);
  }

  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
    }

    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }

    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = (void *)*i)
      {
        unint64_t v17 = i[1];
        if (v17 == v8)
        {
          if (sub_10001A4B8(i[2], *a2)) {
            return i;
          }
        }

        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }

          else
          {
            v17 &= v12 - 1;
          }

          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }

  unint64_t v18 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  void *i = 0LL;
  i[1] = v8;
  i[2] = **a4;
  i[3] = 0LL;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    BOOL v21 = 1LL;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_100019E10(a1, v24);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }
  }

  uint64_t v25 = *(void *)a1;
  __int16 v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    void *i = *v26;
LABEL_41:
    *__int16 v26 = i;
    goto LABEL_42;
  }

  void *i = *v18;
  *unint64_t v18 = i;
  *(void *)(v25 + 8 * v4) = v18;
  if (*i)
  {
    unint64_t v27 = *(void *)(*i + 8LL);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v27 >= v12) {
        v27 %= v12;
      }
    }

    else
    {
      v27 &= v12 - 1;
    }

    __int16 v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }

void sub_10089279C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_1008927B8(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v3 = __p[3];
    __p[3] = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_10089280C(void *a1)
{
  *a1 = &off_10185B340;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089286C(char *__p)
{
  *(void *)std::string __p = &off_10185B340;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void *sub_1008928CC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &off_10185B340;
  sub_10001A504((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100892910(_Unwind_Exception *a1)
{
}

uint64_t sub_100892924(uint64_t a1, void *a2)
{
  *a2 = &off_10185B340;
  return sub_10001A504((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100892944(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100892978(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_1008929C8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_1008929D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100892A0C()
{
}

uint64_t sub_100892A18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100892A7C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100892B04(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100892AEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100892B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      unint64_t v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v30 = 2082;
    uint64_t v31 = "";
    __int16 v32 = 2082;
    int v33 = "activity";
    __int16 v34 = 2082;
    __int128 v35 = v9;
    __int16 v36 = 2050;
    uint64_t v37 = a2;
    __int16 v38 = 1026;
    int v39 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72))
  {
    uint64_t v11 = (char *)objc_msgSend(objc_msgSend(*(id *)(a2 + 48), "legacyClientKey"), "UTF8String");
    if (v11) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = "";
    }
    sub_1010DDBC0(buf, v12);
    sub_100892DB8(a2, &v26);
    uint64_t v13 = v26;
    unint64_t v14 = *(std::__shared_weak_count **)(a3 + 8);
    size_t v24 = *(CLConnectionMessage **)a3;
    uint64_t v25 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }

    uint64_t v17 = *(void *)(a1 + 24);
    if (!v17) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, uint64_t, CLConnectionMessage **))(*(void *)v17 + 48LL))(v17, v13, &v24);
    unint64_t v18 = v25;
    if (v25)
    {
      float v19 = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }

    BOOL v21 = v27;
    if (v27)
    {
      unint64_t v22 = (unint64_t *)&v27->__shared_owners_;
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    if (SBYTE3(v33) < 0) {
      operator delete(*(void **)buf);
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100892D6C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_100892DB8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1 + 328;
  *(void *)uint64_t buf = &v33;
  uint64_t v5 = sub_100891598(a1 + 328, (uint64_t *)&v33, (uint64_t)&unk_1012CF090, (uint64_t **)buf);
  unint64_t v6 = (const void *)v5[3];
  __int128 v7 = (std::__shared_weak_count *)v5[4];
  uint64_t v34 = (uint64_t)v6;
  __int128 v35 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }

  if (v6)
  {
    if (!v10)
    {
      sub_10124D184( (uint64_t)a2,  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v29,  v30,  v31,  v32,  (uint64_t)v33,  v34,  (uint64_t)v35,  v36,  *(uint64_t *)buf,  *(uint64_t *)v38,  *(uint64_t *)&v38[8],  *(uint64_t *)&v38[16],  *(uint64_t *)&v38[24],  v39,  v40,  v41);
      abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h",  443,  "getOrCreatePersistentSubscription");
      goto LABEL_26;
    }

    *a2 = (uint64_t)v10;
    a2[1] = (uint64_t)v7;
    if (v7)
    {
      unint64_t v18 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }

    if (v10[248]) {
      goto LABEL_18;
    }
    if (qword_101934970 != -1) {
      dispatch_once(&qword_101934970, &stru_10185AF60);
    }
    unint64_t v20 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v38 = 2082;
      *(void *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2114;
      *(void *)&v38[12] = v21;
      *(_WORD *)&v38[20] = 2082;
      *(void *)&v38[22] = (unint64_t)"18CLPushSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Invalid persistent subscription detected... getting a fresh one, ClientKeyPath:%{pu blic, location:escape_only}@, subscription:%{public, location:escape_only}s}",  buf,  0x26u);
    }

    sub_10000AE14((uint64_t)a2);
  }

  sub_100587148(*(uint64_t **)(a1 + 16), *(void *)(a1 + 48), a2);
  uint64_t v22 = *a2;
  *(_BYTE *)(v22 + 144) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
  uint64_t v23 = *a2;
  size_t v24 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  id v25 = v24;

  *(void *)(v23 + 152) = v24;
  if (!*a2 || !*(_BYTE *)(*a2 + 248))
  {
    sub_10124D01C();
    abort_report_np( "%s:%d: assertion failure in %s",  "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h",  456,  "getOrCreatePersistentSubscription");
LABEL_26:
    __break(1u);
    return;
  }

  *(void *)uint64_t buf = &v33;
  uint64_t v26 = sub_100891598(v4, (uint64_t *)&v33, (uint64_t)&unk_1012CF090, (uint64_t **)buf);
  sub_1000F2F30(v26 + 3, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)*a2 + 16LL))(*a2, a1 + 8);
LABEL_18:
  if (v7)
  {
    unint64_t v27 = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

void sub_1008930BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *sub_1008930F0(void *a1)
{
  *a1 = &off_10185B3C0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100893150(char *__p)
{
  *(void *)std::string __p = &off_10185B3C0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_1008931B0(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B3C0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100893208(_Unwind_Exception *a1)
{
}

uint64_t sub_10089321C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B3C0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100893260(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100893294(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_1008932E4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_1008932EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100893328()
{
}

void sub_100893334(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_1008933BC(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_1008933A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_1008933BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      unint64_t v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    uint64_t v11 = sub_100879F14((void **)a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_1008935BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_1008935E4(void *a1)
{
  *a1 = &off_10185B440;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100893644(char *__p)
{
  *(void *)std::string __p = &off_10185B440;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_1008936A4(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B440;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_1008936FC(_Unwind_Exception *a1)
{
}

uint64_t sub_100893710(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B440;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100893754(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100893788(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_1008937D8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_1008937E0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089381C()
{
}

uint64_t sub_100893828(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10089388C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100893914(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_1008938FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100893914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      unint64_t v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    uint64_t v11 = sub_100893B3C(a2);
    uint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100893B14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100893B3C(uint64_t a1)
{
  *(void *)uint64_t buf = &v7;
  uint64_t v2 = sub_10089253C(a1 + 288, (uint64_t *)&v7, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (const void *)v2[3];
  if (v3) {
    goto LABEL_8;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2082;
      unint64_t v12 = (unint64_t)"22CLLocationSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    sub_10087856C(a1, buf);
    uint64_t v3 = *(const void **)buf;
    uint64_t v5 = v2[3];
    v2[3] = *(void *)buf;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      uint64_t v3 = (const void *)v2[3];
    }

    if (!v3)
    {
      uint64_t result = (void *)sub_10124DA14();
      goto LABEL_11;
    }

void *sub_100893CC0(void *a1)
{
  *a1 = &off_10185B4C0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100893D20(char *__p)
{
  *(void *)std::string __p = &off_10185B4C0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100893D80(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B4C0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100893DD8(_Unwind_Exception *a1)
{
}

uint64_t sub_100893DEC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B4C0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100893E30(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100893E64(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100893EB4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_100893EBC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100893EF8()
{
}

void sub_100893F04(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100893F8C(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100893F74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100893F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_1008941B4((void **)a2);
    unint64_t v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089418C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_1008941B4(void **a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"21CLRangingSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x148uLL);
    sub_1007EF03C((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124DE3C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089435C(_Unwind_Exception *a1)
{
}

void *sub_100894378(void *a1)
{
  *a1 = &off_10185B540;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_1008943D8(char *__p)
{
  *(void *)std::string __p = &off_10185B540;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100894438(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B540;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100894490(_Unwind_Exception *a1)
{
}

uint64_t sub_1008944A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B540;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_1008944E8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089451C(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089456C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_100894574(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1008945B0()
{
}

uint64_t sub_1008945BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100894620(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_1008946A8(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100894690( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_1008946A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_1008948D0((void **)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_1008948A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_1008948D0(void **a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = 0x800000010133A434LL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x30uLL);
    sub_100C6AAF0((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    *uint64_t v3 = &off_10185B5E0;
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124E10C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_100894A94(_Unwind_Exception *a1)
{
}

void sub_100894AB4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_100C6AB50(a1);
  operator delete(v1);
}

void *sub_100894AC8(void *a1)
{
  *a1 = &off_10185B620;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100894B28(char *__p)
{
  *(void *)std::string __p = &off_10185B620;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100894B88(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B620;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100894BE0(_Unwind_Exception *a1)
{
}

uint64_t sub_100894BF4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B620;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100894C38(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100894C6C(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100894CBC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_100894CC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100894D00()
{
}

uint64_t sub_100894D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100894D70(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100894DF8(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100894DE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100894DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_100895020((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100894FF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100895020(void *a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"28CLPlaceInferenceSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x2B8uLL);
    sub_1009256E4(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124E3DC(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_1008951C8(_Unwind_Exception *a1)
{
}

void *sub_1008951E4(void *a1)
{
  *a1 = &off_10185B6A0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100895244(char *__p)
{
  *(void *)std::string __p = &off_10185B6A0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_1008952A4(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B6A0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_1008952FC(_Unwind_Exception *a1)
{
}

uint64_t sub_100895310(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B6A0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100895354(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100895388(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_1008953D8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_1008953E0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089541C()
{
}

void sub_100895428(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_1008954B0(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100895498( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_1008954B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_1008956D8((void **)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_1008956B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_1008956D8(void **a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"25CLNatalimetrySubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x50uLL);
    sub_1006BBBC0((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124E6AC(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_100895880(_Unwind_Exception *a1)
{
}

void *sub_10089589C(void *a1)
{
  *a1 = &off_10185B720;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_1008958FC(char *__p)
{
  *(void *)std::string __p = &off_10185B720;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089595C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B720;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_1008959B4(_Unwind_Exception *a1)
{
}

uint64_t sub_1008959C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B720;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100895A0C(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100895A40(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100895A90(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_100895A98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100895AD4()
{
}

uint64_t sub_100895AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100895B44(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100895BCC(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100895BB4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100895BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_100895DF4((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100895DCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100895DF4(void *a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"28CLSedentaryTimerSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x38uLL);
    sub_100A120A8(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124E97C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_100895F9C(_Unwind_Exception *a1)
{
}

void *sub_100895FB8(void *a1)
{
  *a1 = &off_10185B7A0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100896018(char *__p)
{
  *(void *)std::string __p = &off_10185B7A0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100896078(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B7A0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_1008960D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1008960E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B7A0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100896128(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089615C(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_1008961AC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_1008961B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1008961F0()
{
}

uint64_t sub_1008961FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100896260(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_1008962E8(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_1008962D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_1008962E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_100896510((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_1008964E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100896510(void *a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"23CLStepCountSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x48uLL);
    sub_100B17FB0(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124EC4C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_1008966B8(_Unwind_Exception *a1)
{
}

void *sub_1008966D4(void *a1)
{
  *a1 = &off_10185B820;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100896734(char *__p)
{
  *(void *)std::string __p = &off_10185B820;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100896794(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B820;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_1008967EC(_Unwind_Exception *a1)
{
}

uint64_t sub_100896800(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B820;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100896844(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100896878(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_1008968C8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_1008968D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089690C()
{
}

void sub_100896918(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_1008969A0(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100896988( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_1008969A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_100896BC8((void **)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100896BA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100896BC8(void **a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"25CLMotionAlarmSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x40uLL);
    sub_10066B0DC((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124EF1C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_100896D70(_Unwind_Exception *a1)
{
}

void *sub_100896D8C(void *a1)
{
  *a1 = &off_10185B8A0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100896DEC(char *__p)
{
  *(void *)std::string __p = &off_10185B8A0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100896E4C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B8A0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100896EA4(_Unwind_Exception *a1)
{
}

uint64_t sub_100896EB8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B8A0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100896EFC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100896F30(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100896F80(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_100896F88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100896FC4()
{
}

uint64_t sub_100896FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100897034(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_1008970BC(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_1008970A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_1008970BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_1008972E4((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_1008972BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_1008972E4(void *a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"22CLOdometerSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x118uLL);
    sub_100D0B6EC(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124F1EC(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089748C(_Unwind_Exception *a1)
{
}

void *sub_1008974A8(void *a1)
{
  *a1 = &off_10185B920;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100897508(char *__p)
{
  *(void *)std::string __p = &off_10185B920;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100897568(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B920;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_1008975C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1008975D4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B920;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100897618(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089764C(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089769C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_1008976A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1008976E0()
{
}

uint64_t sub_1008976EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100897750(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_1008977D8(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_1008977C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_1008977D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_100897A00((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_1008979D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100897A00(void *a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"28CLExerciseMinuteSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x38uLL);
    sub_100F953FC(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124F4BC(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_100897BA8(_Unwind_Exception *a1)
{
}

void *sub_100897BC4(void *a1)
{
  *a1 = &off_10185B9A0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100897C24(char *__p)
{
  *(void *)std::string __p = &off_10185B9A0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100897C84(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185B9A0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100897CDC(_Unwind_Exception *a1)
{
}

uint64_t sub_100897CF0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185B9A0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100897D34(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100897D68(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100897DB8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_100897DC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100897DFC()
{
}

void sub_100897E08(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100897E90(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100897E78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100897E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_1008980B8((void **)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100898090( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_1008980B8(void **a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"23CLElevationSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x50uLL);
    sub_1005C115C((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124F78C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_100898260(_Unwind_Exception *a1)
{
}

void *sub_10089827C(void *a1)
{
  *a1 = &off_10185BA20;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_1008982DC(char *__p)
{
  *(void *)std::string __p = &off_10185BA20;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089833C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BA20;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100898394(_Unwind_Exception *a1)
{
}

uint64_t sub_1008983A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BA20;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_1008983EC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100898420(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100898470(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_100898478(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1008984B4()
{
}

uint64_t sub_1008984C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100898524(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_1008985AC(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100898594( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_1008985AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_1008987D4((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_1008987AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_1008987D4(void *a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"18CLFallSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x38uLL);
    sub_100B5D6E4(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124FA5C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089897C(_Unwind_Exception *a1)
{
}

void *sub_100898998(void *a1)
{
  *a1 = &off_10185BAA0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_1008989F8(char *__p)
{
  *(void *)std::string __p = &off_10185BAA0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100898A58(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BAA0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100898AB0(_Unwind_Exception *a1)
{
}

uint64_t sub_100898AC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BAA0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100898B08(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100898B3C(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100898B8C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_100898B94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100898BD0()
{
}

void sub_100898BDC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100898C64(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100898C4C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100898C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_100898E8C((void **)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100898E64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100898E8C(void **a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"28CLMiLoConnectionSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x88uLL);
    sub_100388414((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124FD2C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_100899034(_Unwind_Exception *a1)
{
}

void *sub_100899050(void *a1)
{
  *a1 = &off_10185BB20;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_1008990B0(char *__p)
{
  *(void *)std::string __p = &off_10185BB20;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100899110(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BB20;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100899168(_Unwind_Exception *a1)
{
}

uint64_t sub_10089917C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BB20;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_1008991C0(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1008991F4(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100899244(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089924C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_100899288()
{
}

uint64_t sub_100899294(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_1008992F8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100899380(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100899368( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100899380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_1008995A8((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100899580( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_1008995A8(void *a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"28CLMotionActivitySubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x38uLL);
    sub_100C03494(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10124FFFC(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_100899750(_Unwind_Exception *a1)
{
}

void *sub_10089976C(void *a1)
{
  *a1 = &off_10185BBA0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_1008997CC(char *__p)
{
  *(void *)std::string __p = &off_10185BBA0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089982C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BBA0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100899884(_Unwind_Exception *a1)
{
}

uint64_t sub_100899898(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BBA0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_1008998DC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100899910(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_100899960(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_100899968(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_1008999A4()
{
}

uint64_t sub_1008999B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_100899A14(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_100899A9C(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_100899A84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_100899A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_100899CC4((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_100899C9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_100899CC4(void *a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"21CLWorkoutSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x160uLL);
    sub_100DDE190(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_1012502CC(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_100899E6C(_Unwind_Exception *a1)
{
}

void *sub_100899E88(void *a1)
{
  *a1 = &off_10185BC20;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_100899EE8(char *__p)
{
  *(void *)std::string __p = &off_10185BC20;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_100899F48(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BC20;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100899FA0(_Unwind_Exception *a1)
{
}

uint64_t sub_100899FB4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BC20;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_100899FF8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089A02C(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089A07C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089A084(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089A0C0()
{
}

uint64_t sub_10089A0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10089A130(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089A1B8(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089A1A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089A1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_10089A3E0((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089A3B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089A3E0(void *a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"25CLMotionStateSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x48uLL);
    sub_100E5A8F0(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10125059C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089A588(_Unwind_Exception *a1)
{
}

void *sub_10089A5A4(void *a1)
{
  *a1 = &off_10185BCA0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089A604(char *__p)
{
  *(void *)std::string __p = &off_10185BCA0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089A664(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BCA0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089A6BC(_Unwind_Exception *a1)
{
}

uint64_t sub_10089A6D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BCA0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089A714(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089A748(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089A798(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089A7A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089A7DC()
{
}

void sub_10089A7E8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089A870(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089A858( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089A870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_10089AA98((void **)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089AA70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089AA98(void **a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"21CLSkiDataSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x38uLL);
    sub_100649244((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_10125086C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089AC40(_Unwind_Exception *a1)
{
}

void *sub_10089AC5C(void *a1)
{
  *a1 = &off_10185BD20;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089ACBC(char *__p)
{
  *(void *)std::string __p = &off_10185BD20;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089AD1C(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BD20;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089AD74(_Unwind_Exception *a1)
{
}

uint64_t sub_10089AD88(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BD20;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089ADCC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089AE00(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089AE50(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089AE58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089AE94()
{
}

uint64_t sub_10089AEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  *uint64_t v3 = 0LL;
  return a1;
}

void sub_10089AF04(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089AF8C(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089AF74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089AF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_10089B1B4((void *)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089B18C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089B1B4(void *a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"22CLSwimDataSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x38uLL);
    sub_100FC4EC4(v3, a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_101250B3C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089B35C(_Unwind_Exception *a1)
{
}

void *sub_10089B378(void *a1)
{
  *a1 = &off_10185BDA0;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089B3D8(char *__p)
{
  *(void *)std::string __p = &off_10185BDA0;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089B438(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BDA0;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089B490(_Unwind_Exception *a1)
{
}

uint64_t sub_10089B4A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BDA0;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089B4E8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10089B51C(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

void sub_10089B56C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
}

uint64_t sub_10089B574(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }

  else
  {
    return 0LL;
  }

_UNKNOWN **sub_10089B5B0()
{
}

void sub_10089B5BC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a2;
  __int128 v7 = *a3;
  *(void *)a3 = 0LL;
  *((void *)a3 + 1) = 0LL;
  sub_10089B644(a1, v3, (uint64_t)&v7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v5 = (unint64_t *)(*((void *)&v7 + 1) + 8LL);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

void sub_10089B62C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_10124D718();
  }
  _Unwind_Resume(exception_object);
}

void sub_10089B644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "CL: Incoming message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_101934970 != -1) {
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }
  __int128 v7 = (os_log_s *)qword_101934978;
  if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    else {
      __int16 v9 = (uint64_t *)*v8;
    }
    int v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 68290050;
    int v23 = 0;
    __int16 v24 = 2082;
    id v25 = "";
    __int16 v26 = 2082;
    unint64_t v27 = "activity";
    __int16 v28 = 2082;
    uint8_t v29 = v9;
    __int16 v30 = 2050;
    uint64_t v31 = a2;
    __int16 v32 = 1026;
    int v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "{msg%{public}.0s:Incoming message, event:%{public, location:escape_only}s, name:%{public, location :escape_only}s, this:%{public}p, registrationReceived:%{public}hhd}",  buf,  0x36u);
  }

  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    __int16 v11 = sub_10089B86C((void **)a2);
    __int16 v12 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v19 = *(CLConnectionMessage **)a3;
    unint64_t v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        unint64_t v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }

    uint64_t v15 = *(void *)(a1 + 24);
    if (!v15) {
      sub_100008BDC();
    }
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(void *)v15 + 48LL))(v15, v11, &v19);
    uint64_t v16 = v20;
    if (v20)
    {
      uint64_t v17 = (unint64_t *)&v20->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  os_activity_scope_leave(&state);
}

void sub_10089B844( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void *sub_10089B86C(void **a1)
{
  *(void *)uint64_t buf = &v8;
  uint64_t v2 = sub_10089253C((uint64_t)(a1 + 36), (uint64_t *)&v8, (uint64_t)&unk_1012CF090, (void **)buf);
  uint64_t v3 = (void *)v2[3];
  if (v3) {
    goto LABEL_7;
  }
  if (qword_101934970 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v4 = (os_log_s *)qword_101934978;
    if (os_log_type_enabled((os_log_t)qword_101934978, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      unint64_t v13 = (unint64_t)"22CLSidebandSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "{msg%{public}.0s:Creating subscription due to demand, type:%{public, location:escape_only}s}",  buf,  0x1Cu);
    }

    uint64_t v3 = operator new(0x40uLL);
    sub_100746DB0((uint64_t)v3, (uint64_t)a1, a1[3], a1[14], a1[6]);
    uint64_t v5 = v2[3];
    v2[3] = v3;
    if (!v5) {
      break;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    uint64_t v3 = (void *)v2[3];
    if (v3) {
      break;
    }
    sub_101250E0C(v6);
LABEL_11:
    __break(1u);
LABEL_12:
    dispatch_once(&qword_101934970, &stru_10185AF60);
  }

void sub_10089BA14(_Unwind_Exception *a1)
{
}

void *sub_10089BA30(void *a1)
{
  *a1 = &off_10185BE20;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_10089BA90(char *__p)
{
  *(void *)std::string __p = &off_10185BE20;
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_BYTE *sub_10089BAF0(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &off_10185BE20;
  sub_10001A504((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_10089BB48(_Unwind_Exception *a1)
{
}

uint64_t sub_10089BB5C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_10185BE20;
  uint64_t result = sub_10001A504(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 4sub_100222B94(v13, (uint64_t)"CLBatchedSensor.ReadTimer", 0) = *(_BYTE *)(a1 + 40);
  return result;
}

void *sub_10089BBA0(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 32);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}